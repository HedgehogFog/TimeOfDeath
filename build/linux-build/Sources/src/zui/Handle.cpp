// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_zui_Handle
#include <hxinc/zui/Handle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a404387ea021c3c1_1340_new,"zui.Handle","new",0x10476fda,"zui.Handle.new","Sources/zui/Zui.hx",1340,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_a404387ea021c3c1_1372_nest,"zui.Handle","nest",0x2e3a6bde,"zui.Handle.nest","Sources/zui/Zui.hx",1372,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_a404387ea021c3c1_1379_boot,"zui.Handle","boot",0x26536f78,"zui.Handle.boot","Sources/zui/Zui.hx",1379,0xe279dd08)
namespace zui{

void Handle_obj::__construct( ::Dynamic ops){
            	HX_STACKFRAME(&_hx_pos_a404387ea021c3c1_1340_new)
HXLINE(1358)		this->changed = false;
HXLINE(1357)		this->dragY = 0;
HXLINE(1356)		this->dragX = 0;
HXLINE(1355)		this->dragEnabled = false;
HXLINE(1354)		this->dragging = false;
HXLINE(1353)		this->lastMaxY = ((Float)0.0);
HXLINE(1352)		this->lastMaxX = ((Float)0.0);
HXLINE(1351)		this->layout = 0;
HXLINE(1350)		this->scrollEnabled = false;
HXLINE(1349)		this->scrollOffset = ((Float)0.0);
HXLINE(1348)		this->scrolling = false;
HXLINE(1347)		this->redraws = 2;
HXLINE(1346)		this->texture = null();
HXLINE(1345)		this->text = HX_("",00,00,00,00);
HXLINE(1344)		this->value = ((Float)0.0);
HXLINE(1343)		this->color = -1;
HXLINE(1342)		this->position = 0;
HXLINE(1341)		this->selected = false;
HXLINE(1362)		if (hx::IsNotNull( ops )) {
HXLINE(1363)			if (hx::IsNotNull( ops->__Field(HX_("selected",5b,2a,6d,b1),hx::paccDynamic) )) {
HXLINE(1363)				this->selected = ( (bool)(ops->__Field(HX_("selected",5b,2a,6d,b1),hx::paccDynamic)) );
            			}
HXLINE(1364)			if (hx::IsNotNull( ops->__Field(HX_("position",a9,a0,fa,ca),hx::paccDynamic) )) {
HXLINE(1364)				this->position = ( (int)(ops->__Field(HX_("position",a9,a0,fa,ca),hx::paccDynamic)) );
            			}
HXLINE(1365)			if (hx::IsNotNull( ops->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic) )) {
HXLINE(1365)				this->value = ( (Float)(ops->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
            			}
HXLINE(1366)			if (hx::IsNotNull( ops->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic) )) {
HXLINE(1366)				this->text = ( (::String)(ops->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)) );
            			}
HXLINE(1367)			if (hx::IsNotNull( ops->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic) )) {
HXLINE(1367)				this->color = ( (int)(ops->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) );
            			}
HXLINE(1368)			if (hx::IsNotNull( ops->__Field(HX_("layout",aa,ae,b8,58),hx::paccDynamic) )) {
HXLINE(1368)				this->layout = ( (int)(ops->__Field(HX_("layout",aa,ae,b8,58),hx::paccDynamic)) );
            			}
            		}
            	}

Dynamic Handle_obj::__CreateEmpty() { return new Handle_obj; }

void *Handle_obj::_hx_vtable = 0;

Dynamic Handle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Handle_obj > _hx_result = new Handle_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Handle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ee8b1d6;
}

 ::zui::Handle Handle_obj::nest(int i, ::Dynamic ops){
            	HX_GC_STACKFRAME(&_hx_pos_a404387ea021c3c1_1372_nest)
HXLINE(1373)		if (hx::IsNull( this->children )) {
HXLINE(1373)			this->children = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(1374)		while((this->children->length <= i)){
HXLINE(1374)			this->children->push(null());
            		}
HXLINE(1375)		if (hx::IsNull( this->children->__get(i).StaticCast<  ::zui::Handle >() )) {
HXLINE(1375)			this->children[i] =  ::zui::Handle_obj::__alloc( HX_CTX ,ops);
            		}
HXLINE(1376)		return this->children->__get(i).StaticCast<  ::zui::Handle >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Handle_obj,nest,return )

 ::zui::Handle Handle_obj::global;


hx::ObjectPtr< Handle_obj > Handle_obj::__new( ::Dynamic ops) {
	hx::ObjectPtr< Handle_obj > __this = new Handle_obj();
	__this->__construct(ops);
	return __this;
}

hx::ObjectPtr< Handle_obj > Handle_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic ops) {
	Handle_obj *__this = (Handle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Handle_obj), true, "zui.Handle"));
	*(void **)__this = Handle_obj::_hx_vtable;
	__this->__construct(ops);
	return __this;
}

Handle_obj::Handle_obj()
{
}

void Handle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Handle);
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(redraws,"redraws");
	HX_MARK_MEMBER_NAME(scrolling,"scrolling");
	HX_MARK_MEMBER_NAME(scrollOffset,"scrollOffset");
	HX_MARK_MEMBER_NAME(scrollEnabled,"scrollEnabled");
	HX_MARK_MEMBER_NAME(layout,"layout");
	HX_MARK_MEMBER_NAME(lastMaxX,"lastMaxX");
	HX_MARK_MEMBER_NAME(lastMaxY,"lastMaxY");
	HX_MARK_MEMBER_NAME(dragging,"dragging");
	HX_MARK_MEMBER_NAME(dragEnabled,"dragEnabled");
	HX_MARK_MEMBER_NAME(dragX,"dragX");
	HX_MARK_MEMBER_NAME(dragY,"dragY");
	HX_MARK_MEMBER_NAME(changed,"changed");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_END_CLASS();
}

void Handle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(redraws,"redraws");
	HX_VISIT_MEMBER_NAME(scrolling,"scrolling");
	HX_VISIT_MEMBER_NAME(scrollOffset,"scrollOffset");
	HX_VISIT_MEMBER_NAME(scrollEnabled,"scrollEnabled");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	HX_VISIT_MEMBER_NAME(lastMaxX,"lastMaxX");
	HX_VISIT_MEMBER_NAME(lastMaxY,"lastMaxY");
	HX_VISIT_MEMBER_NAME(dragging,"dragging");
	HX_VISIT_MEMBER_NAME(dragEnabled,"dragEnabled");
	HX_VISIT_MEMBER_NAME(dragX,"dragX");
	HX_VISIT_MEMBER_NAME(dragY,"dragY");
	HX_VISIT_MEMBER_NAME(changed,"changed");
	HX_VISIT_MEMBER_NAME(children,"children");
}

hx::Val Handle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"nest") ) { return hx::Val( nest_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		if (HX_FIELD_EQ(inName,"dragX") ) { return hx::Val( dragX ); }
		if (HX_FIELD_EQ(inName,"dragY") ) { return hx::Val( dragY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { return hx::Val( layout ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"redraws") ) { return hx::Val( redraws ); }
		if (HX_FIELD_EQ(inName,"changed") ) { return hx::Val( changed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"lastMaxX") ) { return hx::Val( lastMaxX ); }
		if (HX_FIELD_EQ(inName,"lastMaxY") ) { return hx::Val( lastMaxY ); }
		if (HX_FIELD_EQ(inName,"dragging") ) { return hx::Val( dragging ); }
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrolling") ) { return hx::Val( scrolling ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dragEnabled") ) { return hx::Val( dragEnabled ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollOffset") ) { return hx::Val( scrollOffset ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scrollEnabled") ) { return hx::Val( scrollEnabled ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Handle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { outValue = ( global ); return true; }
	}
	return false;
}

hx::Val Handle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragX") ) { dragX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragY") ) { dragY=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { layout=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::kha::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"redraws") ) { redraws=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changed") ) { changed=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMaxX") ) { lastMaxX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMaxY") ) { lastMaxY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragging") ) { dragging=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrolling") ) { scrolling=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dragEnabled") ) { dragEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollOffset") ) { scrollOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scrollEnabled") ) { scrollEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Handle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { global=ioValue.Cast<  ::zui::Handle >(); return true; }
	}
	return false;
}

void Handle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("redraws",5c,ab,50,c6));
	outFields->push(HX_("scrolling",f5,fa,19,3e));
	outFields->push(HX_("scrollOffset",80,eb,01,b8));
	outFields->push(HX_("scrollEnabled",f4,1f,78,f0));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("lastMaxX",aa,5e,9f,db));
	outFields->push(HX_("lastMaxY",ab,5e,9f,db));
	outFields->push(HX_("dragging",cf,3c,8c,37));
	outFields->push(HX_("dragEnabled",ed,26,52,34));
	outFields->push(HX_("dragX",e4,49,b6,df));
	outFields->push(HX_("dragY",e5,49,b6,df));
	outFields->push(HX_("changed",f4,b0,cc,cc));
	outFields->push(HX_("children",3f,19,6a,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Handle_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Handle_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{hx::fsInt,(int)offsetof(Handle_obj,position),HX_("position",a9,a0,fa,ca)},
	{hx::fsInt,(int)offsetof(Handle_obj,color),HX_("color",63,71,5c,4a)},
	{hx::fsFloat,(int)offsetof(Handle_obj,value),HX_("value",71,7f,b8,31)},
	{hx::fsString,(int)offsetof(Handle_obj,text),HX_("text",ad,cc,f9,4c)},
	{hx::fsObject /*  ::kha::Image */ ,(int)offsetof(Handle_obj,texture),HX_("texture",db,c8,e0,9e)},
	{hx::fsInt,(int)offsetof(Handle_obj,redraws),HX_("redraws",5c,ab,50,c6)},
	{hx::fsBool,(int)offsetof(Handle_obj,scrolling),HX_("scrolling",f5,fa,19,3e)},
	{hx::fsFloat,(int)offsetof(Handle_obj,scrollOffset),HX_("scrollOffset",80,eb,01,b8)},
	{hx::fsBool,(int)offsetof(Handle_obj,scrollEnabled),HX_("scrollEnabled",f4,1f,78,f0)},
	{hx::fsInt,(int)offsetof(Handle_obj,layout),HX_("layout",aa,ae,b8,58)},
	{hx::fsFloat,(int)offsetof(Handle_obj,lastMaxX),HX_("lastMaxX",aa,5e,9f,db)},
	{hx::fsFloat,(int)offsetof(Handle_obj,lastMaxY),HX_("lastMaxY",ab,5e,9f,db)},
	{hx::fsBool,(int)offsetof(Handle_obj,dragging),HX_("dragging",cf,3c,8c,37)},
	{hx::fsBool,(int)offsetof(Handle_obj,dragEnabled),HX_("dragEnabled",ed,26,52,34)},
	{hx::fsInt,(int)offsetof(Handle_obj,dragX),HX_("dragX",e4,49,b6,df)},
	{hx::fsInt,(int)offsetof(Handle_obj,dragY),HX_("dragY",e5,49,b6,df)},
	{hx::fsBool,(int)offsetof(Handle_obj,changed),HX_("changed",f4,b0,cc,cc)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Handle_obj,children),HX_("children",3f,19,6a,70)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Handle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zui::Handle */ ,(void *) &Handle_obj::global,HX_("global",63,31,b2,a7)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Handle_obj_sMemberFields[] = {
	HX_("selected",5b,2a,6d,b1),
	HX_("position",a9,a0,fa,ca),
	HX_("color",63,71,5c,4a),
	HX_("value",71,7f,b8,31),
	HX_("text",ad,cc,f9,4c),
	HX_("texture",db,c8,e0,9e),
	HX_("redraws",5c,ab,50,c6),
	HX_("scrolling",f5,fa,19,3e),
	HX_("scrollOffset",80,eb,01,b8),
	HX_("scrollEnabled",f4,1f,78,f0),
	HX_("layout",aa,ae,b8,58),
	HX_("lastMaxX",aa,5e,9f,db),
	HX_("lastMaxY",ab,5e,9f,db),
	HX_("dragging",cf,3c,8c,37),
	HX_("dragEnabled",ed,26,52,34),
	HX_("dragX",e4,49,b6,df),
	HX_("dragY",e5,49,b6,df),
	HX_("changed",f4,b0,cc,cc),
	HX_("children",3f,19,6a,70),
	HX_("nest",98,80,02,49),
	::String(null()) };

static void Handle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Handle_obj::global,"global");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Handle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Handle_obj::global,"global");
};

#endif

hx::Class Handle_obj::__mClass;

static ::String Handle_obj_sStaticFields[] = {
	HX_("global",63,31,b2,a7),
	::String(null())
};

void Handle_obj::__register()
{
	Handle_obj _hx_dummy;
	Handle_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zui.Handle",e8,3a,f0,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Handle_obj::__GetStatic;
	__mClass->mSetStaticField = &Handle_obj::__SetStatic;
	__mClass->mMarkFunc = Handle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Handle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Handle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Handle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Handle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Handle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Handle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Handle_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_a404387ea021c3c1_1379_boot)
HXDLIN(1379)		global =  ::zui::Handle_obj::__alloc( HX_CTX ,null());
            	}
}

} // end namespace zui
