// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_util_Timer
#include <hxinc/util/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_355386dbc3168f4c_9_new,"util.Timer","new",0xfd2abfab,"util.Timer.new","util/Timer.hx",9,0x3b658726)
HX_LOCAL_STACK_FRAME(_hx_pos_355386dbc3168f4c_13_update,"util.Timer","update",0xdf80f79e,"util.Timer.update","util/Timer.hx",13,0x3b658726)
namespace util{

void Timer_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_355386dbc3168f4c_9_new)
            	}

Dynamic Timer_obj::__CreateEmpty() { return new Timer_obj; }

void *Timer_obj::_hx_vtable = 0;

Dynamic Timer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Timer_obj > _hx_result = new Timer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Timer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b32355b;
}

void Timer_obj::update(){
            	HX_STACKFRAME(&_hx_pos_355386dbc3168f4c_13_update)
HXLINE(  14)		Float _hx_tmp = ::kha::Scheduler_obj::time();
HXDLIN(  14)		this->delta = (_hx_tmp - this->current);
HXLINE(  15)		this->current = ::kha::Scheduler_obj::time();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,update,(void))


hx::ObjectPtr< Timer_obj > Timer_obj::__new() {
	hx::ObjectPtr< Timer_obj > __this = new Timer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Timer_obj > Timer_obj::__alloc(hx::Ctx *_hx_ctx) {
	Timer_obj *__this = (Timer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Timer_obj), false, "util.Timer"));
	*(void **)__this = Timer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Timer_obj::Timer_obj()
{
}

hx::Val Timer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { return hx::Val( delta ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Timer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { delta=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Timer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("delta",f8,e7,26,d7));
	outFields->push(HX_("current",39,9c,e3,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Timer_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Timer_obj,delta),HX_("delta",f8,e7,26,d7)},
	{hx::fsFloat,(int)offsetof(Timer_obj,current),HX_("current",39,9c,e3,cb)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Timer_obj_sStaticStorageInfo = 0;
#endif

static ::String Timer_obj_sMemberFields[] = {
	HX_("delta",f8,e7,26,d7),
	HX_("current",39,9c,e3,cb),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class Timer_obj::__mClass;

void Timer_obj::__register()
{
	Timer_obj _hx_dummy;
	Timer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("util.Timer",39,0e,f9,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Timer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Timer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
