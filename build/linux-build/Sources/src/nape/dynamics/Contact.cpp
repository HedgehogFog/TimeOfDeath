// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Arbiter
#include <hxinc/nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_CollisionArbiter
#include <hxinc/nape/dynamics/CollisionArbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_Contact
#include <hxinc/nape/dynamics/Contact.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <hxinc/zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <hxinc/zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_30ed909f400939fa_179_new,"nape.dynamics.Contact","new",0x44c5d15e,"nape.dynamics.Contact.new","nape/dynamics/Contact.hx",179,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_190_get_arbiter,"nape.dynamics.Contact","get_arbiter",0xe1484efe,"nape.dynamics.Contact.get_arbiter","nape/dynamics/Contact.hx",190,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_201_get_penetration,"nape.dynamics.Contact","get_penetration",0x23e69e20,"nape.dynamics.Contact.get_penetration","nape/dynamics/Contact.hx",201,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_216_get_position,"nape.dynamics.Contact","get_position",0xe74543f4,"nape.dynamics.Contact.get_position","nape/dynamics/Contact.hx",216,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_228_get_fresh,"nape.dynamics.Contact","get_fresh",0xb26db643,"nape.dynamics.Contact.get_fresh","nape/dynamics/Contact.hx",228,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_248_normalImpulse,"nape.dynamics.Contact","normalImpulse",0xeae713cc,"nape.dynamics.Contact.normalImpulse","nape/dynamics/Contact.hx",248,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_281_tangentImpulse,"nape.dynamics.Contact","tangentImpulse",0xadfaf232,"nape.dynamics.Contact.tangentImpulse","nape/dynamics/Contact.hx",281,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_308_rollingImpulse,"nape.dynamics.Contact","rollingImpulse",0x139a7972,"nape.dynamics.Contact.rollingImpulse","nape/dynamics/Contact.hx",308,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_337_totalImpulse,"nape.dynamics.Contact","totalImpulse",0x7decd493,"nape.dynamics.Contact.totalImpulse","nape/dynamics/Contact.hx",337,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_386_get_friction,"nape.dynamics.Contact","get_friction",0xb4141c45,"nape.dynamics.Contact.get_friction","nape/dynamics/Contact.hx",386,0x044513b2)
HX_LOCAL_STACK_FRAME(_hx_pos_30ed909f400939fa_404_toString,"nape.dynamics.Contact","toString",0x256276ee,"nape.dynamics.Contact.toString","nape/dynamics/Contact.hx",404,0x044513b2)
namespace nape{
namespace dynamics{

void Contact_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_179_new)
HXLINE( 183)		this->zpp_inner = null();
HXLINE( 397)		if (!(::zpp_nape::dynamics::ZPP_Contact_obj::internal)) {
HXLINE( 397)			HX_STACK_DO_THROW(HX_("Error: Cannot instantiate Contact derp!",3d,03,b2,97));
            		}
            	}

Dynamic Contact_obj::__CreateEmpty() { return new Contact_obj; }

void *Contact_obj::_hx_vtable = 0;

Dynamic Contact_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Contact_obj > _hx_result = new Contact_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Contact_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x056ba684;
}

 ::nape::dynamics::CollisionArbiter Contact_obj::get_arbiter(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_190_get_arbiter)
HXDLIN( 190)		if (hx::IsNull( this->zpp_inner->arbiter )) {
HXDLIN( 190)			return null();
            		}
            		else {
HXDLIN( 190)			 ::nape::dynamics::Arbiter _this = this->zpp_inner->arbiter->outer;
HXDLIN( 190)			if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXDLIN( 190)				return _this->zpp_inner->colarb->outer_zn;
            			}
            			else {
HXDLIN( 190)				return null();
            			}
            		}
HXDLIN( 190)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Contact_obj,get_arbiter,return )

Float Contact_obj::get_penetration(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_201_get_penetration)
HXLINE( 203)		if (this->zpp_inner->inactiveme()) {
HXLINE( 203)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 205)		return -(this->zpp_inner->dist);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Contact_obj,get_penetration,return )

 ::nape::geom::Vec2 Contact_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_216_get_position)
HXLINE( 218)		if (this->zpp_inner->inactiveme()) {
HXLINE( 218)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 220)		if (hx::IsNull( this->zpp_inner->wrap_position )) {
HXLINE( 220)			this->zpp_inner->getposition();
            		}
HXLINE( 221)		return this->zpp_inner->wrap_position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Contact_obj,get_position,return )

bool Contact_obj::get_fresh(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_228_get_fresh)
HXLINE( 230)		if (this->zpp_inner->inactiveme()) {
HXLINE( 230)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 232)		return this->zpp_inner->fresh;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Contact_obj,get_fresh,return )

 ::nape::geom::Vec3 Contact_obj::normalImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_248_normalImpulse)
HXLINE( 250)		if (this->zpp_inner->inactiveme()) {
HXLINE( 250)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 252)		 ::zpp_nape::dynamics::ZPP_ColArbiter colarb = this->zpp_inner->arbiter->colarb;
HXLINE( 253)		 ::zpp_nape::dynamics::ZPP_IContact cin = this->zpp_inner->inner;
HXLINE( 254)		Float jnAcc = cin->jnAcc;
HXLINE( 255)		if (hx::IsNull( body )) {
HXLINE( 255)			return ::nape::geom::Vec3_obj::get((colarb->nx * jnAcc),(colarb->ny * jnAcc),null());
            		}
            		else {
HXLINE( 258)			bool _hx_tmp;
HXDLIN( 258)			if (hx::IsNotEq( body,colarb->b1->outer )) {
HXLINE( 258)				_hx_tmp = hx::IsNotEq( body,colarb->b2->outer );
            			}
            			else {
HXLINE( 258)				_hx_tmp = false;
            			}
HXDLIN( 258)			if (_hx_tmp) {
HXLINE( 258)				HX_STACK_DO_THROW(HX_("Error: Contact does not relate to the given body",b8,87,d3,4a));
            			}
HXLINE( 260)			if (hx::IsEq( body,colarb->b1->outer )) {
HXLINE( 260)				return ::nape::geom::Vec3_obj::get((colarb->nx * -(jnAcc)),(colarb->ny * -(jnAcc)),(-(((colarb->ny * cin->r1x) - (colarb->nx * cin->r1y))) * jnAcc));
            			}
            			else {
HXLINE( 261)				return ::nape::geom::Vec3_obj::get((colarb->nx * jnAcc),(colarb->ny * jnAcc),(((colarb->ny * cin->r2x) - (colarb->nx * cin->r2y)) * jnAcc));
            			}
            		}
HXLINE( 255)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Contact_obj,normalImpulse,return )

 ::nape::geom::Vec3 Contact_obj::tangentImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_281_tangentImpulse)
HXLINE( 283)		if (this->zpp_inner->inactiveme()) {
HXLINE( 283)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 285)		 ::zpp_nape::dynamics::ZPP_ColArbiter colarb = this->zpp_inner->arbiter->colarb;
HXLINE( 286)		 ::zpp_nape::dynamics::ZPP_IContact cin = this->zpp_inner->inner;
HXLINE( 287)		Float jtAcc = cin->jtAcc;
HXLINE( 288)		if (hx::IsNull( body )) {
HXLINE( 288)			return ::nape::geom::Vec3_obj::get((-(colarb->ny) * jtAcc),(colarb->nx * jtAcc),null());
            		}
            		else {
HXLINE( 291)			bool _hx_tmp;
HXDLIN( 291)			if (hx::IsNotEq( body,colarb->b1->outer )) {
HXLINE( 291)				_hx_tmp = hx::IsNotEq( body,colarb->b2->outer );
            			}
            			else {
HXLINE( 291)				_hx_tmp = false;
            			}
HXDLIN( 291)			if (_hx_tmp) {
HXLINE( 291)				HX_STACK_DO_THROW(HX_("Error: Contact does not relate to the given body",b8,87,d3,4a));
            			}
HXLINE( 293)			if (hx::IsEq( body,colarb->b1->outer )) {
HXLINE( 293)				return ::nape::geom::Vec3_obj::get((colarb->ny * jtAcc),(-(colarb->nx) * jtAcc),(-(((cin->r1x * colarb->nx) + (cin->r1y * colarb->ny))) * jtAcc));
            			}
            			else {
HXLINE( 294)				return ::nape::geom::Vec3_obj::get((-(colarb->ny) * jtAcc),(colarb->nx * jtAcc),(((cin->r2x * colarb->nx) + (cin->r2y * colarb->ny)) * jtAcc));
            			}
            		}
HXLINE( 288)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Contact_obj,tangentImpulse,return )

Float Contact_obj::rollingImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_308_rollingImpulse)
HXLINE( 310)		if (this->zpp_inner->inactiveme()) {
HXLINE( 310)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 312)		 ::zpp_nape::dynamics::ZPP_ColArbiter colarb = this->zpp_inner->arbiter->colarb;
HXLINE( 313)		Float jrAcc = this->zpp_inner->arbiter->colarb->jrAcc;
HXLINE( 314)		if (hx::IsNull( body )) {
HXLINE( 314)			return jrAcc;
            		}
            		else {
HXLINE( 317)			bool _hx_tmp;
HXDLIN( 317)			if (hx::IsNotEq( body,colarb->b1->outer )) {
HXLINE( 317)				_hx_tmp = hx::IsNotEq( body,colarb->b2->outer );
            			}
            			else {
HXLINE( 317)				_hx_tmp = false;
            			}
HXDLIN( 317)			if (_hx_tmp) {
HXLINE( 317)				HX_STACK_DO_THROW(HX_("Error: Contact does not relate to the given body",b8,87,d3,4a));
            			}
HXLINE( 319)			if (hx::IsEq( body,colarb->b1->outer )) {
HXLINE( 319)				return -(jrAcc);
            			}
            			else {
HXLINE( 320)				return jrAcc;
            			}
            		}
HXLINE( 314)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Contact_obj,rollingImpulse,return )

 ::nape::geom::Vec3 Contact_obj::totalImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_337_totalImpulse)
HXLINE( 339)		if (this->zpp_inner->inactiveme()) {
HXLINE( 339)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 341)		 ::zpp_nape::dynamics::ZPP_ColArbiter colarb = this->zpp_inner->arbiter->colarb;
HXLINE( 342)		 ::zpp_nape::dynamics::ZPP_IContact cin = this->zpp_inner->inner;
HXLINE( 343)		Float jnAcc = cin->jnAcc;
HXLINE( 344)		Float jtAcc = cin->jtAcc;
HXLINE( 345)		Float jrAcc = colarb->jrAcc;
HXLINE( 346)		if (hx::IsNull( body )) {
HXLINE( 347)			return ::nape::geom::Vec3_obj::get(((colarb->nx * jnAcc) - (colarb->ny * jtAcc)),((colarb->ny * jnAcc) + (colarb->nx * jtAcc)),jrAcc);
            		}
            		else {
HXLINE( 351)			bool _hx_tmp;
HXDLIN( 351)			if (hx::IsNotEq( body,colarb->b1->outer )) {
HXLINE( 351)				_hx_tmp = hx::IsNotEq( body,colarb->b2->outer );
            			}
            			else {
HXLINE( 351)				_hx_tmp = false;
            			}
HXDLIN( 351)			if (_hx_tmp) {
HXLINE( 351)				HX_STACK_DO_THROW(HX_("Error: Contact does not relate to the given body",b8,87,d3,4a));
            			}
HXLINE( 353)			Float jx = ((colarb->nx * jnAcc) - (colarb->ny * jtAcc));
HXLINE( 354)			Float jy = ((colarb->ny * jnAcc) + (colarb->nx * jtAcc));
HXLINE( 371)			if (hx::IsEq( body,colarb->b1->outer )) {
HXLINE( 371)				return ::nape::geom::Vec3_obj::get(-(jx),-(jy),(-(((jy * cin->r1x) - (jx * cin->r1y))) - jrAcc));
            			}
            			else {
HXLINE( 372)				return ::nape::geom::Vec3_obj::get(jx,jy,(((jy * cin->r2x) - (jx * cin->r2y)) + jrAcc));
            			}
            		}
HXLINE( 346)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Contact_obj,totalImpulse,return )

Float Contact_obj::get_friction(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_386_get_friction)
HXLINE( 388)		if (this->zpp_inner->inactiveme()) {
HXLINE( 388)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 390)		return this->zpp_inner->inner->friction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Contact_obj,get_friction,return )

::String Contact_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_30ed909f400939fa_404_toString)
HXDLIN( 404)		bool _hx_tmp;
HXDLIN( 404)		if (hx::IsNotNull( this->zpp_inner->arbiter )) {
HXDLIN( 404)			_hx_tmp = this->zpp_inner->arbiter->cleared;
            		}
            		else {
HXDLIN( 404)			_hx_tmp = true;
            		}
HXDLIN( 404)		if (_hx_tmp) {
HXDLIN( 404)			return HX_("{object-pooled}",cf,12,fa,86);
            		}
            		else {
HXLINE( 405)			return HX_("{Contact}",78,01,26,60);
            		}
HXLINE( 404)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Contact_obj,toString,return )


hx::ObjectPtr< Contact_obj > Contact_obj::__new() {
	hx::ObjectPtr< Contact_obj > __this = new Contact_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Contact_obj > Contact_obj::__alloc(hx::Ctx *_hx_ctx) {
	Contact_obj *__this = (Contact_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Contact_obj), true, "nape.dynamics.Contact"));
	*(void **)__this = Contact_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Contact_obj::Contact_obj()
{
}

void Contact_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Contact);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Contact_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Contact_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fresh") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fresh() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arbiter") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_arbiter() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"friction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_friction() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"get_fresh") ) { return hx::Val( get_fresh_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_arbiter") ) { return hx::Val( get_arbiter_dyn() ); }
		if (HX_FIELD_EQ(inName,"penetration") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_penetration() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalImpulse") ) { return hx::Val( totalImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_friction") ) { return hx::Val( get_friction_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"normalImpulse") ) { return hx::Val( normalImpulse_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tangentImpulse") ) { return hx::Val( tangentImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"rollingImpulse") ) { return hx::Val( rollingImpulse_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_penetration") ) { return hx::Val( get_penetration_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Contact_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Contact >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Contact_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("arbiter",e9,bf,55,09));
	outFields->push(HX_("penetration",8b,60,96,06));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("fresh",6e,86,86,06));
	outFields->push(HX_("friction",fa,78,c9,97));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Contact_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Contact */ ,(int)offsetof(Contact_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Contact_obj_sStaticStorageInfo = 0;
#endif

static ::String Contact_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_arbiter",00,20,50,8f),
	HX_("get_penetration",22,18,78,c7),
	HX_("get_position",b2,54,14,80),
	HX_("get_fresh",c5,e2,2f,4a),
	HX_("normalImpulse",4e,a9,46,07),
	HX_("tangentImpulse",70,2e,3e,65),
	HX_("rollingImpulse",b0,b5,dd,ca),
	HX_("totalImpulse",51,e5,bb,16),
	HX_("get_friction",03,2d,e3,4c),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Contact_obj::__mClass;

void Contact_obj::__register()
{
	Contact_obj _hx_dummy;
	Contact_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.dynamics.Contact",6c,8a,b6,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Contact_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Contact_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Contact_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Contact_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace dynamics
