// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_InteractionType
#include <hxinc/nape/callbacks/InteractionType.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerList
#include <hxinc/nape/callbacks/ListenerList.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintIterator
#include <hxinc/nape/constraint/ConstraintIterator.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <hxinc/nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <hxinc/nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <hxinc/nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <hxinc/nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <hxinc/nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultList
#include <hxinc/nape/geom/ConvexResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <hxinc/nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <hxinc/nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyIterator
#include <hxinc/nape/phys/BodyIterator.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <hxinc/nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <hxinc/nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundIterator
#include <hxinc/nape/phys/CompoundIterator.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <hxinc/nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <hxinc/nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <hxinc/nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <hxinc/nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <hxinc/nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SpaceArbiterList
#include <hxinc/zpp_nape/dynamics/ZPP_SpaceArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <hxinc/zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <hxinc/zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <hxinc/zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <hxinc/zpp_nape/util/ZPP_CompoundList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <hxinc/zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <hxinc/zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_177_new,"nape.space.Space","new",0xca3d1b6a,"nape.space.Space.new","nape/space/Space.hx",177,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_195_get_userData,"nape.space.Space","get_userData",0x3f404dd4,"nape.space.Space.get_userData","nape/space/Space.hx",195,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_209_get_gravity,"nape.space.Space","get_gravity",0x5014336f,"nape.space.Space.get_gravity","nape/space/Space.hx",209,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_213_set_gravity,"nape.space.Space","set_gravity",0x5a813a7b,"nape.space.Space.set_gravity","nape/space/Space.hx",213,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_233_get_broadphase,"nape.space.Space","get_broadphase",0x9161c338,"nape.space.Space.get_broadphase","nape/space/Space.hx",233,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_254_get_sortContacts,"nape.space.Space","get_sortContacts",0x856c4690,"nape.space.Space.get_sortContacts","nape/space/Space.hx",254,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_256_set_sortContacts,"nape.space.Space","set_sortContacts",0xdbae3404,"nape.space.Space.set_sortContacts","nape/space/Space.hx",256,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_273_get_worldAngularDrag,"nape.space.Space","get_worldAngularDrag",0x1b380d83,"nape.space.Space.get_worldAngularDrag","nape/space/Space.hx",273,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_275_set_worldAngularDrag,"nape.space.Space","set_worldAngularDrag",0xe7efc4f7,"nape.space.Space.set_worldAngularDrag","nape/space/Space.hx",275,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_296_get_worldLinearDrag,"nape.space.Space","get_worldLinearDrag",0x00d4c38c,"nape.space.Space.get_worldLinearDrag","nape/space/Space.hx",296,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_298_set_worldLinearDrag,"nape.space.Space","set_worldLinearDrag",0x3d71b698,"nape.space.Space.set_worldLinearDrag","nape/space/Space.hx",298,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_320_get_compounds,"nape.space.Space","get_compounds",0xaea44a09,"nape.space.Space.get_compounds","nape/space/Space.hx",320,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_334_get_bodies,"nape.space.Space","get_bodies",0x8403157f,"nape.space.Space.get_bodies","nape/space/Space.hx",334,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_346_get_liveBodies,"nape.space.Space","get_liveBodies",0xb25d0d0b,"nape.space.Space.get_liveBodies","nape/space/Space.hx",346,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_360_get_constraints,"nape.space.Space","get_constraints",0x7a48bb17,"nape.space.Space.get_constraints","nape/space/Space.hx",360,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_372_get_liveConstraints,"nape.space.Space","get_liveConstraints",0xc965e80b,"nape.space.Space.get_liveConstraints","nape/space/Space.hx",372,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_383_visitBodies,"nape.space.Space","visitBodies",0x367958b5,"nape.space.Space.visitBodies","nape/space/Space.hx",383,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_399_visitConstraints,"nape.space.Space","visitConstraints",0x9c851421,"nape.space.Space.visitConstraints","nape/space/Space.hx",399,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_415_visitCompounds,"nape.space.Space","visitCompounds",0xd6eb6c93,"nape.space.Space.visitCompounds","nape/space/Space.hx",415,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_437_get_world,"nape.space.Space","get_world",0x1a582133,"nape.space.Space.get_world","nape/space/Space.hx",437,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_446_get_arbiters,"nape.space.Space","get_arbiters",0x5bc9e429,"nape.space.Space.get_arbiters","nape/space/Space.hx",446,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_463_get_listeners,"nape.space.Space","get_listeners",0x8e3774e0,"nape.space.Space.get_listeners","nape/space/Space.hx",463,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_475_clear,"nape.space.Space","clear",0x57751317,"nape.space.Space.clear","nape/space/Space.hx",475,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_501_step,"nape.space.Space","step",0x2e944502,"nape.space.Space.step","nape/space/Space.hx",501,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_518_get_timeStamp,"nape.space.Space","get_timeStamp",0xd3a55417,"nape.space.Space.get_timeStamp","nape/space/Space.hx",518,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_528_get_elapsedTime,"nape.space.Space","get_elapsedTime",0x2961c80a,"nape.space.Space.get_elapsedTime","nape/space/Space.hx",528,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_578_interactionType,"nape.space.Space","interactionType",0xaa7b59b6,"nape.space.Space.interactionType","nape/space/Space.hx",578,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_610_shapesUnderPoint,"nape.space.Space","shapesUnderPoint",0x226603a0,"nape.space.Space.shapesUnderPoint","nape/space/Space.hx",610,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_647_bodiesUnderPoint,"nape.space.Space","bodiesUnderPoint",0x5ad9326e,"nape.space.Space.bodiesUnderPoint","nape/space/Space.hx",647,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_690_shapesInAABB,"nape.space.Space","shapesInAABB",0x7e82208d,"nape.space.Space.shapesInAABB","nape/space/Space.hx",690,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_718_bodiesInAABB,"nape.space.Space","bodiesInAABB",0x2326505b,"nape.space.Space.bodiesInAABB","nape/space/Space.hx",718,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_744_shapesInCircle,"nape.space.Space","shapesInCircle",0xb046b15d,"nape.space.Space.shapesInCircle","nape/space/Space.hx",744,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_791_bodiesInCircle,"nape.space.Space","bodiesInCircle",0xea30f0ab,"nape.space.Space.bodiesInCircle","nape/space/Space.hx",791,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_838_shapesInShape,"nape.space.Space","shapesInShape",0xaa6fcc74,"nape.space.Space.shapesInShape","nape/space/Space.hx",838,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_870_bodiesInShape,"nape.space.Space","bodiesInShape",0x157570e6,"nape.space.Space.bodiesInShape","nape/space/Space.hx",870,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_898_shapesInBody,"nape.space.Space","shapesInBody",0x7f4e5caf,"nape.space.Space.shapesInBody","nape/space/Space.hx",898,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_924_bodiesInBody,"nape.space.Space","bodiesInBody",0x23f28c7d,"nape.space.Space.bodiesInBody","nape/space/Space.hx",924,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_957_convexCast,"nape.space.Space","convexCast",0x715d8bfc,"nape.space.Space.convexCast","nape/space/Space.hx",957,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_992_convexMultiCast,"nape.space.Space","convexMultiCast",0x0e887b7b,"nape.space.Space.convexMultiCast","nape/space/Space.hx",992,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_1023_rayCast,"nape.space.Space","rayCast",0x6728f5d3,"nape.space.Space.rayCast","nape/space/Space.hx",1023,0x769bc808)
HX_LOCAL_STACK_FRAME(_hx_pos_dd842c0da2ce1650_1048_rayMultiCast,"nape.space.Space","rayMultiCast",0xa87b0644,"nape.space.Space.rayMultiCast","nape/space/Space.hx",1048,0x769bc808)
namespace nape{
namespace space{

void Space_obj::__construct( ::nape::geom::Vec2 gravity, ::nape::space::Broadphase broadphase){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_177_new)
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 541)		bool _hx_tmp;
HXDLIN( 541)		if (hx::IsNotNull( gravity )) {
HXLINE( 541)			_hx_tmp = gravity->zpp_disp;
            		}
            		else {
HXLINE( 541)			_hx_tmp = false;
            		}
HXDLIN( 541)		if (_hx_tmp) {
HXLINE( 541)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 544)		 ::zpp_nape::geom::ZPP_Vec2 _hx_tmp1;
HXDLIN( 544)		if (hx::IsNull( gravity )) {
HXLINE( 544)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 544)			_hx_tmp1 = gravity->zpp_inner;
            		}
HXDLIN( 544)		this->zpp_inner =  ::zpp_nape::space::ZPP_Space_obj::__alloc( HX_CTX ,_hx_tmp1,broadphase);
HXLINE( 545)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 546)		if (hx::IsNotNull( gravity )) {
HXLINE( 546)			if (gravity->zpp_inner->weak) {
HXLINE( 550)				bool _hx_tmp2;
HXDLIN( 550)				if (hx::IsNotNull( gravity )) {
HXLINE( 550)					_hx_tmp2 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 550)					_hx_tmp2 = false;
            				}
HXDLIN( 550)				if (_hx_tmp2) {
HXLINE( 550)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 550)				{
HXLINE( 550)					 ::zpp_nape::geom::ZPP_Vec2 _this = gravity->zpp_inner;
HXDLIN( 550)					if (_this->_immutable) {
HXLINE( 550)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 550)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 550)						_this->_isimmutable();
            					}
            				}
HXDLIN( 550)				if (gravity->zpp_inner->_inuse) {
HXLINE( 550)					HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            				}
HXDLIN( 550)				 ::zpp_nape::geom::ZPP_Vec2 inner = gravity->zpp_inner;
HXDLIN( 550)				gravity->zpp_inner->outer = null();
HXDLIN( 550)				gravity->zpp_inner = null();
HXDLIN( 550)				{
HXLINE( 550)					 ::nape::geom::Vec2 o = gravity;
HXDLIN( 550)					o->zpp_pool = null();
HXDLIN( 550)					if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 550)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            					}
            					else {
HXLINE( 550)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            					}
HXDLIN( 550)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 550)					o->zpp_disp = true;
            				}
HXDLIN( 550)				{
HXLINE( 550)					 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 550)					{
HXLINE( 550)						if (hx::IsNotNull( o1->outer )) {
HXLINE( 550)							o1->outer->zpp_inner = null();
HXDLIN( 550)							o1->outer = null();
            						}
HXDLIN( 550)						o1->_isimmutable = null();
HXDLIN( 550)						o1->_validate = null();
HXDLIN( 550)						o1->_invalidate = null();
            					}
HXDLIN( 550)					o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 550)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            				}
            			}
            		}
            	}

Dynamic Space_obj::__CreateEmpty() { return new Space_obj; }

void *Space_obj::_hx_vtable = 0;

Dynamic Space_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Space_obj > _hx_result = new Space_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Space_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a6e0090;
}

 ::Dynamic Space_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_195_get_userData)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_userData,return )

 ::nape::geom::Vec2 Space_obj::get_gravity(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_209_get_gravity)
HXLINE( 210)		if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 210)			this->zpp_inner->getgravity();
            		}
HXLINE( 211)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_gravity,return )

 ::nape::geom::Vec2 Space_obj::set_gravity( ::nape::geom::Vec2 gravity){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_213_set_gravity)
HXLINE( 214)		{
HXLINE( 217)			bool _hx_tmp;
HXDLIN( 217)			if (hx::IsNotNull( gravity )) {
HXLINE( 217)				_hx_tmp = gravity->zpp_disp;
            			}
            			else {
HXLINE( 217)				_hx_tmp = false;
            			}
HXDLIN( 217)			if (_hx_tmp) {
HXLINE( 217)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 221)			if (hx::IsNull( gravity )) {
HXLINE( 221)				HX_STACK_DO_THROW(HX_("Error: Space::gravity cannot be null",d1,79,de,e5));
            			}
HXLINE( 223)			{
HXLINE( 223)				if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 223)					this->zpp_inner->getgravity();
            				}
HXDLIN( 223)				 ::nape::geom::Vec2 _this = this->zpp_inner->wrap_gravity;
HXDLIN( 223)				bool _hx_tmp1;
HXDLIN( 223)				if (hx::IsNotNull( _this )) {
HXLINE( 223)					_hx_tmp1 = _this->zpp_disp;
            				}
            				else {
HXLINE( 223)					_hx_tmp1 = false;
            				}
HXDLIN( 223)				if (_hx_tmp1) {
HXLINE( 223)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 223)				bool _hx_tmp2;
HXDLIN( 223)				if (hx::IsNotNull( gravity )) {
HXLINE( 223)					_hx_tmp2 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 223)					_hx_tmp2 = false;
            				}
HXDLIN( 223)				if (_hx_tmp2) {
HXLINE( 223)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 223)				{
HXLINE( 223)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 223)					if (_this1->_immutable) {
HXLINE( 223)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 223)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 223)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 223)				if (hx::IsNull( gravity )) {
HXLINE( 223)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 223)				bool _hx_tmp3;
HXDLIN( 223)				if (hx::IsNotNull( gravity )) {
HXLINE( 223)					_hx_tmp3 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 223)					_hx_tmp3 = false;
            				}
HXDLIN( 223)				if (_hx_tmp3) {
HXLINE( 223)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 223)				{
HXLINE( 223)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = gravity->zpp_inner;
HXDLIN( 223)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 223)						_this2->_validate();
            					}
            				}
HXDLIN( 223)				Float x = gravity->zpp_inner->x;
HXDLIN( 223)				bool _hx_tmp4;
HXDLIN( 223)				if (hx::IsNotNull( gravity )) {
HXLINE( 223)					_hx_tmp4 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 223)					_hx_tmp4 = false;
            				}
HXDLIN( 223)				if (_hx_tmp4) {
HXLINE( 223)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 223)				{
HXLINE( 223)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = gravity->zpp_inner;
HXDLIN( 223)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 223)						_this3->_validate();
            					}
            				}
HXDLIN( 223)				Float y = gravity->zpp_inner->y;
HXDLIN( 223)				bool _hx_tmp5;
HXDLIN( 223)				if (hx::IsNotNull( _this )) {
HXLINE( 223)					_hx_tmp5 = _this->zpp_disp;
            				}
            				else {
HXLINE( 223)					_hx_tmp5 = false;
            				}
HXDLIN( 223)				if (_hx_tmp5) {
HXLINE( 223)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 223)				{
HXLINE( 223)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 223)					if (_this4->_immutable) {
HXLINE( 223)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 223)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 223)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 223)				bool _hx_tmp6;
HXDLIN( 223)				if ((x == x)) {
HXLINE( 223)					_hx_tmp6 = (y != y);
            				}
            				else {
HXLINE( 223)					_hx_tmp6 = true;
            				}
HXDLIN( 223)				if (_hx_tmp6) {
HXLINE( 223)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 223)				bool _hx_tmp7;
HXDLIN( 223)				bool _hx_tmp8;
HXDLIN( 223)				if (hx::IsNotNull( _this )) {
HXLINE( 223)					_hx_tmp8 = _this->zpp_disp;
            				}
            				else {
HXLINE( 223)					_hx_tmp8 = false;
            				}
HXDLIN( 223)				if (_hx_tmp8) {
HXLINE( 223)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 223)				{
HXLINE( 223)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 223)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 223)						_this5->_validate();
            					}
            				}
HXDLIN( 223)				if ((_this->zpp_inner->x == x)) {
HXLINE( 223)					bool _hx_tmp9;
HXDLIN( 223)					if (hx::IsNotNull( _this )) {
HXLINE( 223)						_hx_tmp9 = _this->zpp_disp;
            					}
            					else {
HXLINE( 223)						_hx_tmp9 = false;
            					}
HXDLIN( 223)					if (_hx_tmp9) {
HXLINE( 223)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 223)					{
HXLINE( 223)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 223)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 223)							_this6->_validate();
            						}
            					}
HXDLIN( 223)					_hx_tmp7 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 223)					_hx_tmp7 = false;
            				}
HXDLIN( 223)				if (!(_hx_tmp7)) {
HXLINE( 223)					{
HXLINE( 223)						_this->zpp_inner->x = x;
HXDLIN( 223)						_this->zpp_inner->y = y;
            					}
HXDLIN( 223)					{
HXLINE( 223)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 223)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 223)							_this7->_invalidate(_this7);
            						}
            					}
            				}
HXDLIN( 223)				 ::nape::geom::Vec2 ret = _this;
HXDLIN( 223)				if (gravity->zpp_inner->weak) {
HXLINE( 223)					bool _hx_tmp10;
HXDLIN( 223)					if (hx::IsNotNull( gravity )) {
HXLINE( 223)						_hx_tmp10 = gravity->zpp_disp;
            					}
            					else {
HXLINE( 223)						_hx_tmp10 = false;
            					}
HXDLIN( 223)					if (_hx_tmp10) {
HXLINE( 223)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 223)					{
HXLINE( 223)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = gravity->zpp_inner;
HXDLIN( 223)						if (_this8->_immutable) {
HXLINE( 223)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 223)						if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 223)							_this8->_isimmutable();
            						}
            					}
HXDLIN( 223)					if (gravity->zpp_inner->_inuse) {
HXLINE( 223)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 223)					 ::zpp_nape::geom::ZPP_Vec2 inner = gravity->zpp_inner;
HXDLIN( 223)					gravity->zpp_inner->outer = null();
HXDLIN( 223)					gravity->zpp_inner = null();
HXDLIN( 223)					{
HXLINE( 223)						 ::nape::geom::Vec2 o = gravity;
HXDLIN( 223)						o->zpp_pool = null();
HXDLIN( 223)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 223)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 223)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 223)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 223)						o->zpp_disp = true;
            					}
HXDLIN( 223)					{
HXLINE( 223)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 223)						{
HXLINE( 223)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 223)								o1->outer->zpp_inner = null();
HXDLIN( 223)								o1->outer = null();
            							}
HXDLIN( 223)							o1->_isimmutable = null();
HXDLIN( 223)							o1->_validate = null();
HXDLIN( 223)							o1->_invalidate = null();
            						}
HXDLIN( 223)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 223)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 225)		if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 225)			this->zpp_inner->getgravity();
            		}
HXDLIN( 225)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_gravity,return )

 ::nape::space::Broadphase Space_obj::get_broadphase(){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_233_get_broadphase)
HXDLIN( 233)		if (this->zpp_inner->bphase->is_sweep) {
HXDLIN( 233)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE )) {
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE =  ::nape::space::Broadphase_obj::__alloc( HX_CTX );
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 233)			return ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;
            		}
            		else {
HXDLIN( 233)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE )) {
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE =  ::nape::space::Broadphase_obj::__alloc( HX_CTX );
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 233)			return ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;
            		}
HXDLIN( 233)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_broadphase,return )

bool Space_obj::get_sortContacts(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_254_get_sortContacts)
HXDLIN( 254)		return this->zpp_inner->sortcontacts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_sortContacts,return )

bool Space_obj::set_sortContacts(bool sortContacts){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_256_set_sortContacts)
HXLINE( 258)		this->zpp_inner->sortcontacts = sortContacts;
HXLINE( 260)		return this->zpp_inner->sortcontacts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_sortContacts,return )

Float Space_obj::get_worldAngularDrag(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_273_get_worldAngularDrag)
HXDLIN( 273)		return this->zpp_inner->global_ang_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_worldAngularDrag,return )

Float Space_obj::set_worldAngularDrag(Float worldAngularDrag){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_275_set_worldAngularDrag)
HXLINE( 276)		{
HXLINE( 277)			Float d = worldAngularDrag;
HXLINE( 279)			if ((d != d)) {
HXLINE( 279)				HX_STACK_DO_THROW(HX_("Error: Space::worldAngularDrag cannot be NaN",37,21,43,58));
            			}
HXLINE( 281)			this->zpp_inner->global_ang_drag = d;
            		}
HXLINE( 283)		return this->zpp_inner->global_ang_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_worldAngularDrag,return )

Float Space_obj::get_worldLinearDrag(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_296_get_worldLinearDrag)
HXDLIN( 296)		return this->zpp_inner->global_lin_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_worldLinearDrag,return )

Float Space_obj::set_worldLinearDrag(Float worldLinearDrag){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_298_set_worldLinearDrag)
HXLINE( 299)		{
HXLINE( 300)			Float d = worldLinearDrag;
HXLINE( 302)			if ((d != d)) {
HXLINE( 302)				HX_STACK_DO_THROW(HX_("Error: Space::worldLinearDrag cannot be NaN",6e,68,93,46));
            			}
HXLINE( 304)			this->zpp_inner->global_lin_drag = d;
            		}
HXLINE( 306)		return this->zpp_inner->global_lin_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_worldLinearDrag,return )

 ::nape::phys::CompoundList Space_obj::get_compounds(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_320_get_compounds)
HXDLIN( 320)		return this->zpp_inner->wrap_compounds;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_compounds,return )

 ::nape::phys::BodyList Space_obj::get_bodies(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_334_get_bodies)
HXDLIN( 334)		return this->zpp_inner->wrap_bodies;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_bodies,return )

 ::nape::phys::BodyList Space_obj::get_liveBodies(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_346_get_liveBodies)
HXDLIN( 346)		return this->zpp_inner->wrap_live;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_liveBodies,return )

 ::nape::constraint::ConstraintList Space_obj::get_constraints(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_360_get_constraints)
HXDLIN( 360)		return this->zpp_inner->wrap_constraints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_constraints,return )

 ::nape::constraint::ConstraintList Space_obj::get_liveConstraints(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_372_get_liveConstraints)
HXDLIN( 372)		return this->zpp_inner->wrap_livecon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_liveConstraints,return )

void Space_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_383_visitBodies)
HXLINE( 385)		if (hx::IsNull( lambda )) {
HXLINE( 385)			HX_STACK_DO_THROW(HX_("Error: lambda cannot be null for Space::visitBodies",ca,9f,b3,e9));
            		}
HXLINE( 387)		{
HXLINE( 387)			 ::nape::phys::BodyList _this = this->zpp_inner->wrap_bodies;
HXDLIN( 387)			_this->zpp_inner->valmod();
HXDLIN( 387)			 ::nape::phys::BodyIterator _g = ::nape::phys::BodyIterator_obj::get(_this);
HXDLIN( 387)			while(true){
HXLINE( 387)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 387)				 ::nape::phys::BodyList _this1 = _g->zpp_inner;
HXDLIN( 387)				_this1->zpp_inner->valmod();
HXDLIN( 387)				if (_this1->zpp_inner->zip_length) {
HXLINE( 387)					_this1->zpp_inner->zip_length = false;
HXDLIN( 387)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 387)				int length = _this1->zpp_inner->user_length;
HXDLIN( 387)				_g->zpp_critical = true;
HXDLIN( 387)				bool _hx_tmp;
HXDLIN( 387)				if ((_g->zpp_i < length)) {
HXLINE( 387)					_hx_tmp = true;
            				}
            				else {
HXLINE( 387)					{
HXLINE( 387)						_g->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXDLIN( 387)						::nape::phys::BodyIterator_obj::zpp_pool = _g;
HXDLIN( 387)						_g->zpp_inner = null();
            					}
HXDLIN( 387)					_hx_tmp = false;
            				}
HXDLIN( 387)				if (!(_hx_tmp)) {
HXLINE( 387)					goto _hx_goto_16;
            				}
HXDLIN( 387)				_g->zpp_critical = false;
HXDLIN( 387)				 ::nape::phys::Body b = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 387)				lambda(b);
            			}
            			_hx_goto_16:;
            		}
HXLINE( 388)		{
HXLINE( 388)			 ::nape::phys::CompoundList _this2 = this->zpp_inner->wrap_compounds;
HXDLIN( 388)			_this2->zpp_inner->valmod();
HXDLIN( 388)			 ::nape::phys::CompoundIterator _g1 = ::nape::phys::CompoundIterator_obj::get(_this2);
HXDLIN( 388)			while(true){
HXLINE( 388)				_g1->zpp_inner->zpp_inner->valmod();
HXDLIN( 388)				 ::nape::phys::CompoundList _this3 = _g1->zpp_inner;
HXDLIN( 388)				_this3->zpp_inner->valmod();
HXDLIN( 388)				if (_this3->zpp_inner->zip_length) {
HXLINE( 388)					_this3->zpp_inner->zip_length = false;
HXDLIN( 388)					_this3->zpp_inner->user_length = _this3->zpp_inner->inner->length;
            				}
HXDLIN( 388)				int length1 = _this3->zpp_inner->user_length;
HXDLIN( 388)				_g1->zpp_critical = true;
HXDLIN( 388)				bool _hx_tmp1;
HXDLIN( 388)				if ((_g1->zpp_i < length1)) {
HXLINE( 388)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 388)					{
HXLINE( 388)						_g1->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 388)						::nape::phys::CompoundIterator_obj::zpp_pool = _g1;
HXDLIN( 388)						_g1->zpp_inner = null();
            					}
HXDLIN( 388)					_hx_tmp1 = false;
            				}
HXDLIN( 388)				if (!(_hx_tmp1)) {
HXLINE( 388)					goto _hx_goto_17;
            				}
HXDLIN( 388)				_g1->zpp_critical = false;
HXDLIN( 388)				 ::nape::phys::Compound c = _g1->zpp_inner->at(_g1->zpp_i++);
HXDLIN( 388)				c->visitBodies(lambda);
            			}
            			_hx_goto_17:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,visitBodies,(void))

void Space_obj::visitConstraints( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_399_visitConstraints)
HXLINE( 401)		if (hx::IsNull( lambda )) {
HXLINE( 401)			HX_STACK_DO_THROW(HX_("Error: lambda cannot be null for Space::visitConstraints",ec,00,28,b3));
            		}
HXLINE( 403)		{
HXLINE( 403)			 ::nape::constraint::ConstraintList _this = this->zpp_inner->wrap_constraints;
HXDLIN( 403)			_this->zpp_inner->valmod();
HXDLIN( 403)			 ::nape::constraint::ConstraintIterator _g = ::nape::constraint::ConstraintIterator_obj::get(_this);
HXDLIN( 403)			while(true){
HXLINE( 403)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 403)				 ::nape::constraint::ConstraintList _this1 = _g->zpp_inner;
HXDLIN( 403)				_this1->zpp_inner->valmod();
HXDLIN( 403)				if (_this1->zpp_inner->zip_length) {
HXLINE( 403)					_this1->zpp_inner->zip_length = false;
HXDLIN( 403)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 403)				int length = _this1->zpp_inner->user_length;
HXDLIN( 403)				_g->zpp_critical = true;
HXDLIN( 403)				bool _hx_tmp;
HXDLIN( 403)				if ((_g->zpp_i < length)) {
HXLINE( 403)					_hx_tmp = true;
            				}
            				else {
HXLINE( 403)					{
HXLINE( 403)						_g->zpp_next = ::nape::constraint::ConstraintIterator_obj::zpp_pool;
HXDLIN( 403)						::nape::constraint::ConstraintIterator_obj::zpp_pool = _g;
HXDLIN( 403)						_g->zpp_inner = null();
            					}
HXDLIN( 403)					_hx_tmp = false;
            				}
HXDLIN( 403)				if (!(_hx_tmp)) {
HXLINE( 403)					goto _hx_goto_19;
            				}
HXDLIN( 403)				_g->zpp_critical = false;
HXDLIN( 403)				 ::nape::constraint::Constraint c = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 403)				lambda(c);
            			}
            			_hx_goto_19:;
            		}
HXLINE( 404)		{
HXLINE( 404)			 ::nape::phys::CompoundList _this2 = this->zpp_inner->wrap_compounds;
HXDLIN( 404)			_this2->zpp_inner->valmod();
HXDLIN( 404)			 ::nape::phys::CompoundIterator _g1 = ::nape::phys::CompoundIterator_obj::get(_this2);
HXDLIN( 404)			while(true){
HXLINE( 404)				_g1->zpp_inner->zpp_inner->valmod();
HXDLIN( 404)				 ::nape::phys::CompoundList _this3 = _g1->zpp_inner;
HXDLIN( 404)				_this3->zpp_inner->valmod();
HXDLIN( 404)				if (_this3->zpp_inner->zip_length) {
HXLINE( 404)					_this3->zpp_inner->zip_length = false;
HXDLIN( 404)					_this3->zpp_inner->user_length = _this3->zpp_inner->inner->length;
            				}
HXDLIN( 404)				int length1 = _this3->zpp_inner->user_length;
HXDLIN( 404)				_g1->zpp_critical = true;
HXDLIN( 404)				bool _hx_tmp1;
HXDLIN( 404)				if ((_g1->zpp_i < length1)) {
HXLINE( 404)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 404)					{
HXLINE( 404)						_g1->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 404)						::nape::phys::CompoundIterator_obj::zpp_pool = _g1;
HXDLIN( 404)						_g1->zpp_inner = null();
            					}
HXDLIN( 404)					_hx_tmp1 = false;
            				}
HXDLIN( 404)				if (!(_hx_tmp1)) {
HXLINE( 404)					goto _hx_goto_20;
            				}
HXDLIN( 404)				_g1->zpp_critical = false;
HXDLIN( 404)				 ::nape::phys::Compound c1 = _g1->zpp_inner->at(_g1->zpp_i++);
HXDLIN( 404)				c1->visitConstraints(lambda);
            			}
            			_hx_goto_20:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,visitConstraints,(void))

void Space_obj::visitCompounds( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_415_visitCompounds)
HXLINE( 417)		if (hx::IsNull( lambda )) {
HXLINE( 417)			HX_STACK_DO_THROW(HX_("Error: lambda cannot be null for Space::visitCompounds",9e,00,f9,5f));
            		}
HXLINE( 419)		{
HXLINE( 419)			 ::nape::phys::CompoundList _this = this->zpp_inner->wrap_compounds;
HXDLIN( 419)			_this->zpp_inner->valmod();
HXDLIN( 419)			 ::nape::phys::CompoundIterator _g = ::nape::phys::CompoundIterator_obj::get(_this);
HXDLIN( 419)			while(true){
HXLINE( 419)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 419)				 ::nape::phys::CompoundList _this1 = _g->zpp_inner;
HXDLIN( 419)				_this1->zpp_inner->valmod();
HXDLIN( 419)				if (_this1->zpp_inner->zip_length) {
HXLINE( 419)					_this1->zpp_inner->zip_length = false;
HXDLIN( 419)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 419)				int length = _this1->zpp_inner->user_length;
HXDLIN( 419)				_g->zpp_critical = true;
HXDLIN( 419)				bool _hx_tmp;
HXDLIN( 419)				if ((_g->zpp_i < length)) {
HXLINE( 419)					_hx_tmp = true;
            				}
            				else {
HXLINE( 419)					{
HXLINE( 419)						_g->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 419)						::nape::phys::CompoundIterator_obj::zpp_pool = _g;
HXDLIN( 419)						_g->zpp_inner = null();
            					}
HXDLIN( 419)					_hx_tmp = false;
            				}
HXDLIN( 419)				if (!(_hx_tmp)) {
HXLINE( 419)					goto _hx_goto_22;
            				}
HXDLIN( 419)				_g->zpp_critical = false;
HXDLIN( 419)				 ::nape::phys::Compound c = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 420)				lambda(c);
HXLINE( 421)				c->visitCompounds(lambda);
            			}
            			_hx_goto_22:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,visitCompounds,(void))

 ::nape::phys::Body Space_obj::get_world(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_437_get_world)
HXDLIN( 437)		return this->zpp_inner->_hx___static;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_world,return )

 ::nape::dynamics::ArbiterList Space_obj::get_arbiters(){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_446_get_arbiters)
HXLINE( 447)		if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE( 448)			 ::zpp_nape::dynamics::ZPP_SpaceArbiterList ret =  ::zpp_nape::dynamics::ZPP_SpaceArbiterList_obj::__alloc( HX_CTX );
HXLINE( 449)			ret->space = this->zpp_inner;
HXLINE( 450)			this->zpp_inner->wrap_arbiters = ret;
            		}
HXLINE( 452)		return this->zpp_inner->wrap_arbiters;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_arbiters,return )

 ::nape::callbacks::ListenerList Space_obj::get_listeners(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_463_get_listeners)
HXDLIN( 463)		return this->zpp_inner->wrap_listeners;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_listeners,return )

void Space_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_475_clear)
HXLINE( 477)		if (this->zpp_inner->midstep) {
HXLINE( 477)			HX_STACK_DO_THROW(HX_("Error: Space::clear() cannot be called during space step()",4d,e1,68,3a));
            		}
HXLINE( 479)		this->zpp_inner->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,clear,(void))

void Space_obj::step(Float deltaTime,hx::Null< int >  __o_velocityIterations,hx::Null< int >  __o_positionIterations){
            		int velocityIterations = __o_velocityIterations.Default(10);
            		int positionIterations = __o_positionIterations.Default(10);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_501_step)
HXLINE( 503)		if ((deltaTime != deltaTime)) {
HXLINE( 503)			HX_STACK_DO_THROW(HX_("Error: deltaTime cannot be NaN",72,6b,11,1a));
            		}
HXLINE( 504)		if ((deltaTime <= 0)) {
HXLINE( 504)			HX_STACK_DO_THROW(HX_("Error: deltaTime must be strictly positive",94,a6,0d,71));
            		}
HXLINE( 505)		if ((velocityIterations <= 0)) {
HXLINE( 505)			HX_STACK_DO_THROW(HX_("Error: must use atleast one velocity iteration",80,7b,52,00));
            		}
HXLINE( 506)		if ((positionIterations <= 0)) {
HXLINE( 506)			HX_STACK_DO_THROW(HX_("Error: must use atleast one position iteration",0c,41,23,bf));
            		}
HXLINE( 508)		this->zpp_inner->step(deltaTime,velocityIterations,positionIterations);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,step,(void))

int Space_obj::get_timeStamp(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_518_get_timeStamp)
HXDLIN( 518)		return this->zpp_inner->stamp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_timeStamp,return )

Float Space_obj::get_elapsedTime(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_528_get_elapsedTime)
HXDLIN( 528)		return this->zpp_inner->time;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_elapsedTime,return )

 ::nape::callbacks::InteractionType Space_obj::interactionType( ::nape::shape::Shape shape1, ::nape::shape::Shape shape2){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_578_interactionType)
HXLINE( 580)		bool _hx_tmp;
HXDLIN( 580)		if (hx::IsNotNull( shape1 )) {
HXLINE( 580)			_hx_tmp = hx::IsNull( shape2 );
            		}
            		else {
HXLINE( 580)			_hx_tmp = true;
            		}
HXDLIN( 580)		if (_hx_tmp) {
HXLINE( 580)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate interaction type for null shapes",74,e7,3b,f0));
            		}
HXLINE( 583)		bool _hx_tmp1;
HXDLIN( 583)		 ::nape::phys::Body _hx_tmp2;
HXDLIN( 583)		if (hx::IsNotNull( shape1->zpp_inner->body )) {
HXLINE( 583)			_hx_tmp2 = shape1->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 583)			_hx_tmp2 = null();
            		}
HXDLIN( 583)		if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 583)			 ::nape::phys::Body _hx_tmp3;
HXDLIN( 583)			if (hx::IsNotNull( shape2->zpp_inner->body )) {
HXLINE( 583)				_hx_tmp3 = shape2->zpp_inner->body->outer;
            			}
            			else {
HXLINE( 583)				_hx_tmp3 = null();
            			}
HXDLIN( 583)			_hx_tmp1 = hx::IsNull( _hx_tmp3 );
            		}
            		else {
HXLINE( 583)			_hx_tmp1 = true;
            		}
HXDLIN( 583)		if (_hx_tmp1) {
HXLINE( 583)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate interaction type for shapes not part of a Body",81,30,94,33));
            		}
HXLINE( 585)		bool _hx_tmp4;
HXDLIN( 585)		 ::nape::phys::Body _hx_tmp5;
HXDLIN( 585)		if (hx::IsNotNull( shape1->zpp_inner->body )) {
HXLINE( 585)			_hx_tmp5 = shape1->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 585)			_hx_tmp5 = null();
            		}
HXDLIN( 585)		if ((_hx_tmp5->zpp_inner->type == 1)) {
HXLINE( 585)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 585)			if (hx::IsNotNull( shape2->zpp_inner->body )) {
HXLINE( 585)				_hx_tmp6 = shape2->zpp_inner->body->outer;
            			}
            			else {
HXLINE( 585)				_hx_tmp6 = null();
            			}
HXDLIN( 585)			_hx_tmp4 = (_hx_tmp6->zpp_inner->type == 1);
            		}
            		else {
HXLINE( 585)			_hx_tmp4 = false;
            		}
HXDLIN( 585)		if (_hx_tmp4) {
HXLINE( 585)			return null();
            		}
HXLINE( 586)		 ::nape::phys::Body _hx_tmp7;
HXDLIN( 586)		if (hx::IsNotNull( shape1->zpp_inner->body )) {
HXLINE( 586)			_hx_tmp7 = shape1->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 586)			_hx_tmp7 = null();
            		}
HXDLIN( 586)		 ::nape::phys::Body _hx_tmp8;
HXDLIN( 586)		if (hx::IsNotNull( shape2->zpp_inner->body )) {
HXLINE( 586)			_hx_tmp8 = shape2->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 586)			_hx_tmp8 = null();
            		}
HXDLIN( 586)		if (hx::IsEq( _hx_tmp7,_hx_tmp8 )) {
HXLINE( 586)			return null();
            		}
HXLINE( 587)		 ::zpp_nape::shape::ZPP_Shape s1 = shape1->zpp_inner;
HXLINE( 588)		 ::zpp_nape::shape::ZPP_Shape s2 = shape2->zpp_inner;
HXLINE( 589)		 ::zpp_nape::space::ZPP_Space _this = this->zpp_inner;
HXDLIN( 589)		 ::zpp_nape::phys::ZPP_Body b1 = s1->body;
HXDLIN( 589)		 ::zpp_nape::phys::ZPP_Body b2 = s2->body;
HXDLIN( 589)		bool con_ignore;
HXDLIN( 589)		{
HXLINE( 589)			con_ignore = false;
HXDLIN( 589)			{
HXLINE( 589)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;
HXDLIN( 589)				while(hx::IsNotNull( cx_ite )){
HXLINE( 589)					 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXDLIN( 589)					bool _hx_tmp9;
HXDLIN( 589)					if (con->ignore) {
HXLINE( 589)						_hx_tmp9 = con->pair_exists(b1->id,b2->id);
            					}
            					else {
HXLINE( 589)						_hx_tmp9 = false;
            					}
HXDLIN( 589)					if (_hx_tmp9) {
HXLINE( 589)						con_ignore = true;
HXDLIN( 589)						goto _hx_goto_31;
            					}
HXDLIN( 589)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_31:;
            			}
            		}
HXDLIN( 589)		int _g;
HXDLIN( 589)		bool _g1;
HXDLIN( 589)		if (!(con_ignore)) {
HXLINE( 589)			 ::zpp_nape::phys::ZPP_Interactor cur = s1;
HXDLIN( 589)			while(true){
HXLINE( 589)				bool _g2;
HXDLIN( 589)				if (hx::IsNotNull( cur )) {
HXLINE( 589)					_g2 = hx::IsNull( cur->group );
            				}
            				else {
HXLINE( 589)					_g2 = false;
            				}
HXDLIN( 589)				if (!(_g2)) {
HXLINE( 589)					goto _hx_goto_32;
            				}
HXDLIN( 589)				if (hx::IsNotNull( cur->ishape )) {
HXLINE( 589)					cur = cur->ishape->body;
            				}
            				else {
HXLINE( 589)					if (hx::IsNotNull( cur->icompound )) {
HXLINE( 589)						cur = cur->icompound->compound;
            					}
            					else {
HXLINE( 589)						cur = cur->ibody->compound;
            					}
            				}
            			}
            			_hx_goto_32:;
HXDLIN( 589)			 ::zpp_nape::dynamics::ZPP_InteractionGroup g1;
HXDLIN( 589)			if (hx::IsNull( cur )) {
HXLINE( 589)				g1 = null();
            			}
            			else {
HXLINE( 589)				g1 = cur->group;
            			}
HXDLIN( 589)			bool _g3;
HXDLIN( 589)			if (hx::IsNull( g1 )) {
HXLINE( 589)				_g3 = false;
            			}
            			else {
HXLINE( 589)				 ::zpp_nape::phys::ZPP_Interactor cur1 = s2;
HXDLIN( 589)				while(true){
HXLINE( 589)					bool _g4;
HXDLIN( 589)					if (hx::IsNotNull( cur1 )) {
HXLINE( 589)						_g4 = hx::IsNull( cur1->group );
            					}
            					else {
HXLINE( 589)						_g4 = false;
            					}
HXDLIN( 589)					if (!(_g4)) {
HXLINE( 589)						goto _hx_goto_33;
            					}
HXDLIN( 589)					if (hx::IsNotNull( cur1->ishape )) {
HXLINE( 589)						cur1 = cur1->ishape->body;
            					}
            					else {
HXLINE( 589)						if (hx::IsNotNull( cur1->icompound )) {
HXLINE( 589)							cur1 = cur1->icompound->compound;
            						}
            						else {
HXLINE( 589)							cur1 = cur1->ibody->compound;
            						}
            					}
            				}
            				_hx_goto_33:;
HXDLIN( 589)				 ::zpp_nape::dynamics::ZPP_InteractionGroup g2;
HXDLIN( 589)				if (hx::IsNull( cur1 )) {
HXLINE( 589)					g2 = null();
            				}
            				else {
HXLINE( 589)					g2 = cur1->group;
            				}
HXDLIN( 589)				if (hx::IsNull( g2 )) {
HXLINE( 589)					_g3 = false;
            				}
            				else {
HXLINE( 589)					bool ret = false;
HXDLIN( 589)					while(true){
HXLINE( 589)						bool _g5;
HXDLIN( 589)						if (hx::IsNotNull( g1 )) {
HXLINE( 589)							_g5 = hx::IsNotNull( g2 );
            						}
            						else {
HXLINE( 589)							_g5 = false;
            						}
HXDLIN( 589)						if (!(_g5)) {
HXLINE( 589)							goto _hx_goto_34;
            						}
HXDLIN( 589)						if (hx::IsEq( g1,g2 )) {
HXLINE( 589)							ret = g1->ignore;
HXDLIN( 589)							goto _hx_goto_34;
            						}
HXDLIN( 589)						if ((g1->depth < g2->depth)) {
HXLINE( 589)							g2 = g2->group;
            						}
            						else {
HXLINE( 589)							g1 = g1->group;
            						}
            					}
            					_hx_goto_34:;
HXDLIN( 589)					_g3 = ret;
            				}
            			}
HXDLIN( 589)			_g1 = !(_g3);
            		}
            		else {
HXLINE( 589)			_g1 = false;
            		}
HXDLIN( 589)		if (_g1) {
HXLINE( 589)			bool _g6;
HXDLIN( 589)			bool _g7;
HXDLIN( 589)			if (!(s1->sensorEnabled)) {
HXLINE( 589)				_g7 = s2->sensorEnabled;
            			}
            			else {
HXLINE( 589)				_g7 = true;
            			}
HXDLIN( 589)			if (_g7) {
HXLINE( 589)				 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = s1->filter;
HXDLIN( 589)				 ::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;
HXDLIN( 589)				if (((_this1->sensorMask & x->sensorGroup) != 0)) {
HXLINE( 589)					_g6 = ((x->sensorMask & _this1->sensorGroup) != 0);
            				}
            				else {
HXLINE( 589)					_g6 = false;
            				}
            			}
            			else {
HXLINE( 589)				_g6 = false;
            			}
HXDLIN( 589)			if (_g6) {
HXLINE( 589)				_g = 2;
            			}
            			else {
HXLINE( 589)				bool _g8;
HXDLIN( 589)				bool _g9;
HXDLIN( 589)				bool _g10;
HXDLIN( 589)				if (!(s1->fluidEnabled)) {
HXLINE( 589)					_g10 = s2->fluidEnabled;
            				}
            				else {
HXLINE( 589)					_g10 = true;
            				}
HXDLIN( 589)				if (_g10) {
HXLINE( 589)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this2 = s1->filter;
HXDLIN( 589)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x1 = s2->filter;
HXDLIN( 589)					if (((_this2->fluidMask & x1->fluidGroup) != 0)) {
HXLINE( 589)						_g9 = ((x1->fluidMask & _this2->fluidGroup) != 0);
            					}
            					else {
HXLINE( 589)						_g9 = false;
            					}
            				}
            				else {
HXLINE( 589)					_g9 = false;
            				}
HXDLIN( 589)				if (_g9) {
HXLINE( 589)					bool _g11;
HXDLIN( 589)					bool _g12;
HXDLIN( 589)					bool _g13;
HXDLIN( 589)					if ((b1->imass == 0)) {
HXLINE( 589)						_g13 = (b2->imass == 0);
            					}
            					else {
HXLINE( 589)						_g13 = false;
            					}
HXDLIN( 589)					if (_g13) {
HXLINE( 589)						_g12 = (b1->iinertia == 0);
            					}
            					else {
HXLINE( 589)						_g12 = false;
            					}
HXDLIN( 589)					if (_g12) {
HXLINE( 589)						_g11 = (b2->iinertia == 0);
            					}
            					else {
HXLINE( 589)						_g11 = false;
            					}
HXDLIN( 589)					_g8 = !(_g11);
            				}
            				else {
HXLINE( 589)					_g8 = false;
            				}
HXDLIN( 589)				if (_g8) {
HXLINE( 589)					_g = 0;
            				}
            				else {
HXLINE( 589)					bool _g14;
HXDLIN( 589)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = s1->filter;
HXDLIN( 589)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x2 = s2->filter;
HXDLIN( 589)					bool _g15;
HXDLIN( 589)					if (((_this3->collisionMask & x2->collisionGroup) != 0)) {
HXLINE( 589)						_g15 = ((x2->collisionMask & _this3->collisionGroup) != 0);
            					}
            					else {
HXLINE( 589)						_g15 = false;
            					}
HXDLIN( 589)					if (_g15) {
HXLINE( 589)						bool _g16;
HXDLIN( 589)						bool _g17;
HXDLIN( 589)						bool _g18;
HXDLIN( 589)						if ((b1->imass == 0)) {
HXLINE( 589)							_g18 = (b2->imass == 0);
            						}
            						else {
HXLINE( 589)							_g18 = false;
            						}
HXDLIN( 589)						if (_g18) {
HXLINE( 589)							_g17 = (b1->iinertia == 0);
            						}
            						else {
HXLINE( 589)							_g17 = false;
            						}
HXDLIN( 589)						if (_g17) {
HXLINE( 589)							_g16 = (b2->iinertia == 0);
            						}
            						else {
HXLINE( 589)							_g16 = false;
            						}
HXDLIN( 589)						_g14 = !(_g16);
            					}
            					else {
HXLINE( 589)						_g14 = false;
            					}
HXDLIN( 589)					if (_g14) {
HXLINE( 589)						_g = 1;
            					}
            					else {
HXLINE( 589)						_g = -1;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 589)			_g = -1;
            		}
HXDLIN( 589)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 590)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID )) {
HXLINE( 590)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 590)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 590)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 590)				return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID;
            			}
            			break;
            			case (int)1: {
HXLINE( 591)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE( 591)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 591)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 591)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 591)				return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION;
            			}
            			break;
            			case (int)2: {
HXLINE( 592)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE( 592)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 592)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 592)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 592)				return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR;
            			}
            			break;
            			default:{
HXLINE( 593)				return null();
            			}
            		}
HXLINE( 589)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Space_obj,interactionType,return )

 ::nape::shape::ShapeList Space_obj::shapesUnderPoint( ::nape::geom::Vec2 point, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_610_shapesUnderPoint)
HXLINE( 613)		bool _hx_tmp;
HXDLIN( 613)		if (hx::IsNotNull( point )) {
HXLINE( 613)			_hx_tmp = point->zpp_disp;
            		}
            		else {
HXLINE( 613)			_hx_tmp = false;
            		}
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 613)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 617)		if (hx::IsNull( point )) {
HXLINE( 617)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes under a null point :)",7b,64,54,a1));
            		}
HXLINE( 619)		 ::zpp_nape::space::ZPP_Space ret = this->zpp_inner;
HXDLIN( 619)		bool ret1;
HXDLIN( 619)		if (hx::IsNotNull( point )) {
HXLINE( 619)			ret1 = point->zpp_disp;
            		}
            		else {
HXLINE( 619)			ret1 = false;
            		}
HXDLIN( 619)		if (ret1) {
HXLINE( 619)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 619)		{
HXLINE( 619)			 ::zpp_nape::geom::ZPP_Vec2 _this = point->zpp_inner;
HXDLIN( 619)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 619)				_this->_validate();
            			}
            		}
HXDLIN( 619)		Float ret2 = point->zpp_inner->x;
HXDLIN( 619)		bool ret3;
HXDLIN( 619)		if (hx::IsNotNull( point )) {
HXLINE( 619)			ret3 = point->zpp_disp;
            		}
            		else {
HXLINE( 619)			ret3 = false;
            		}
HXDLIN( 619)		if (ret3) {
HXLINE( 619)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 619)		{
HXLINE( 619)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = point->zpp_inner;
HXDLIN( 619)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 619)				_this1->_validate();
            			}
            		}
HXDLIN( 619)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret4;
HXDLIN( 619)		if (hx::IsNull( filter )) {
HXLINE( 619)			ret4 = null();
            		}
            		else {
HXLINE( 619)			ret4 = filter->zpp_inner;
            		}
HXDLIN( 619)		 ::nape::shape::ShapeList ret5 = ret->shapesUnderPoint(ret2,point->zpp_inner->y,ret4,output);
HXLINE( 620)		if (point->zpp_inner->weak) {
HXLINE( 624)			bool _hx_tmp1;
HXDLIN( 624)			if (hx::IsNotNull( point )) {
HXLINE( 624)				_hx_tmp1 = point->zpp_disp;
            			}
            			else {
HXLINE( 624)				_hx_tmp1 = false;
            			}
HXDLIN( 624)			if (_hx_tmp1) {
HXLINE( 624)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 624)			{
HXLINE( 624)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = point->zpp_inner;
HXDLIN( 624)				if (_this2->_immutable) {
HXLINE( 624)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 624)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 624)					_this2->_isimmutable();
            				}
            			}
HXDLIN( 624)			if (point->zpp_inner->_inuse) {
HXLINE( 624)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 624)			 ::zpp_nape::geom::ZPP_Vec2 inner = point->zpp_inner;
HXDLIN( 624)			point->zpp_inner->outer = null();
HXDLIN( 624)			point->zpp_inner = null();
HXDLIN( 624)			{
HXLINE( 624)				 ::nape::geom::Vec2 o = point;
HXDLIN( 624)				o->zpp_pool = null();
HXDLIN( 624)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 624)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 624)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 624)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 624)				o->zpp_disp = true;
            			}
HXDLIN( 624)			{
HXLINE( 624)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 624)				{
HXLINE( 624)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 624)						o1->outer->zpp_inner = null();
HXDLIN( 624)						o1->outer = null();
            					}
HXDLIN( 624)					o1->_isimmutable = null();
HXDLIN( 624)					o1->_validate = null();
HXDLIN( 624)					o1->_invalidate = null();
            				}
HXDLIN( 624)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 624)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 631)		return ret5;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,shapesUnderPoint,return )

 ::nape::phys::BodyList Space_obj::bodiesUnderPoint( ::nape::geom::Vec2 point, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_647_bodiesUnderPoint)
HXLINE( 650)		bool _hx_tmp;
HXDLIN( 650)		if (hx::IsNotNull( point )) {
HXLINE( 650)			_hx_tmp = point->zpp_disp;
            		}
            		else {
HXLINE( 650)			_hx_tmp = false;
            		}
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 650)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 654)		if (hx::IsNull( point )) {
HXLINE( 654)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate objects under a null point :)",2d,a0,2a,84));
            		}
HXLINE( 656)		 ::zpp_nape::space::ZPP_Space ret = this->zpp_inner;
HXDLIN( 656)		bool ret1;
HXDLIN( 656)		if (hx::IsNotNull( point )) {
HXLINE( 656)			ret1 = point->zpp_disp;
            		}
            		else {
HXLINE( 656)			ret1 = false;
            		}
HXDLIN( 656)		if (ret1) {
HXLINE( 656)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 656)		{
HXLINE( 656)			 ::zpp_nape::geom::ZPP_Vec2 _this = point->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 656)				_this->_validate();
            			}
            		}
HXDLIN( 656)		Float ret2 = point->zpp_inner->x;
HXDLIN( 656)		bool ret3;
HXDLIN( 656)		if (hx::IsNotNull( point )) {
HXLINE( 656)			ret3 = point->zpp_disp;
            		}
            		else {
HXLINE( 656)			ret3 = false;
            		}
HXDLIN( 656)		if (ret3) {
HXLINE( 656)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 656)		{
HXLINE( 656)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = point->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 656)				_this1->_validate();
            			}
            		}
HXDLIN( 656)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret4;
HXDLIN( 656)		if (hx::IsNull( filter )) {
HXLINE( 656)			ret4 = null();
            		}
            		else {
HXLINE( 656)			ret4 = filter->zpp_inner;
            		}
HXDLIN( 656)		 ::nape::phys::BodyList ret5 = ret->bodiesUnderPoint(ret2,point->zpp_inner->y,ret4,output);
HXLINE( 657)		if (point->zpp_inner->weak) {
HXLINE( 661)			bool _hx_tmp1;
HXDLIN( 661)			if (hx::IsNotNull( point )) {
HXLINE( 661)				_hx_tmp1 = point->zpp_disp;
            			}
            			else {
HXLINE( 661)				_hx_tmp1 = false;
            			}
HXDLIN( 661)			if (_hx_tmp1) {
HXLINE( 661)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 661)			{
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = point->zpp_inner;
HXDLIN( 661)				if (_this2->_immutable) {
HXLINE( 661)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 661)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 661)					_this2->_isimmutable();
            				}
            			}
HXDLIN( 661)			if (point->zpp_inner->_inuse) {
HXLINE( 661)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 661)			 ::zpp_nape::geom::ZPP_Vec2 inner = point->zpp_inner;
HXDLIN( 661)			point->zpp_inner->outer = null();
HXDLIN( 661)			point->zpp_inner = null();
HXDLIN( 661)			{
HXLINE( 661)				 ::nape::geom::Vec2 o = point;
HXDLIN( 661)				o->zpp_pool = null();
HXDLIN( 661)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 661)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 661)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 661)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 661)				o->zpp_disp = true;
            			}
HXDLIN( 661)			{
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 661)				{
HXLINE( 661)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 661)						o1->outer->zpp_inner = null();
HXDLIN( 661)						o1->outer = null();
            					}
HXDLIN( 661)					o1->_isimmutable = null();
HXDLIN( 661)					o1->_validate = null();
HXDLIN( 661)					o1->_invalidate = null();
            				}
HXDLIN( 661)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 661)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 668)		return ret5;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,bodiesUnderPoint,return )

 ::nape::shape::ShapeList Space_obj::shapesInAABB( ::nape::geom::AABB aabb,hx::Null< bool >  __o_containment,hx::Null< bool >  __o_strict, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            		bool containment = __o_containment.Default(false);
            		bool strict = __o_strict.Default(true);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_690_shapesInAABB)
HXLINE( 692)		if (hx::IsNull( aabb )) {
HXLINE( 692)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes in a null AABB :)",da,0f,25,1f));
            		}
HXLINE( 693)		bool _hx_tmp;
HXDLIN( 693)		{
HXLINE( 693)			 ::zpp_nape::geom::ZPP_AABB _this = aabb->zpp_inner;
HXDLIN( 693)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 693)				_this->_validate();
            			}
            		}
HXDLIN( 693)		 ::zpp_nape::geom::ZPP_AABB _this1 = aabb->zpp_inner;
HXDLIN( 693)		if (((_this1->maxx - _this1->minx) != 0)) {
HXLINE( 693)			{
HXLINE( 693)				 ::zpp_nape::geom::ZPP_AABB _this2 = aabb->zpp_inner;
HXDLIN( 693)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 693)					_this2->_validate();
            				}
            			}
HXDLIN( 693)			 ::zpp_nape::geom::ZPP_AABB _this3 = aabb->zpp_inner;
HXDLIN( 693)			_hx_tmp = ((_this3->maxy - _this3->miny) == 0);
            		}
            		else {
HXLINE( 693)			_hx_tmp = true;
            		}
HXDLIN( 693)		if (_hx_tmp) {
HXLINE( 693)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes in degenerate AABB :/",70,07,66,6d));
            		}
HXLINE( 695)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp1;
HXDLIN( 695)		if (hx::IsNull( filter )) {
HXLINE( 695)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 695)			_hx_tmp1 = filter->zpp_inner;
            		}
HXDLIN( 695)		return this->zpp_inner->shapesInAABB(aabb,strict,containment,_hx_tmp1,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,shapesInAABB,return )

 ::nape::phys::BodyList Space_obj::bodiesInAABB( ::nape::geom::AABB aabb,hx::Null< bool >  __o_containment,hx::Null< bool >  __o_strict, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            		bool containment = __o_containment.Default(false);
            		bool strict = __o_strict.Default(true);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_718_bodiesInAABB)
HXLINE( 720)		if (hx::IsNull( aabb )) {
HXLINE( 720)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate objects in a null AABB :)",8c,0a,23,15));
            		}
HXLINE( 721)		bool _hx_tmp;
HXDLIN( 721)		{
HXLINE( 721)			 ::zpp_nape::geom::ZPP_AABB _this = aabb->zpp_inner;
HXDLIN( 721)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 721)				_this->_validate();
            			}
            		}
HXDLIN( 721)		 ::zpp_nape::geom::ZPP_AABB _this1 = aabb->zpp_inner;
HXDLIN( 721)		if (((_this1->maxx - _this1->minx) != 0)) {
HXLINE( 721)			{
HXLINE( 721)				 ::zpp_nape::geom::ZPP_AABB _this2 = aabb->zpp_inner;
HXDLIN( 721)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 721)					_this2->_validate();
            				}
            			}
HXDLIN( 721)			 ::zpp_nape::geom::ZPP_AABB _this3 = aabb->zpp_inner;
HXDLIN( 721)			_hx_tmp = ((_this3->maxy - _this3->miny) == 0);
            		}
            		else {
HXLINE( 721)			_hx_tmp = true;
            		}
HXDLIN( 721)		if (_hx_tmp) {
HXLINE( 721)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate objects in degenerate AABB :/",22,43,3c,50));
            		}
HXLINE( 723)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp1;
HXDLIN( 723)		if (hx::IsNull( filter )) {
HXLINE( 723)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 723)			_hx_tmp1 = filter->zpp_inner;
            		}
HXDLIN( 723)		return this->zpp_inner->bodiesInAABB(aabb,strict,containment,_hx_tmp1,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,bodiesInAABB,return )

 ::nape::shape::ShapeList Space_obj::shapesInCircle( ::nape::geom::Vec2 position,Float radius,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            		bool containment = __o_containment.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_744_shapesInCircle)
HXLINE( 747)		bool _hx_tmp;
HXDLIN( 747)		if (hx::IsNotNull( position )) {
HXLINE( 747)			_hx_tmp = position->zpp_disp;
            		}
            		else {
HXLINE( 747)			_hx_tmp = false;
            		}
HXDLIN( 747)		if (_hx_tmp) {
HXLINE( 747)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 751)		if (hx::IsNull( position )) {
HXLINE( 751)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes at null circle :)",bd,d5,8c,55));
            		}
HXLINE( 752)		if ((radius != radius)) {
HXLINE( 752)			HX_STACK_DO_THROW(HX_("Error: Circle radius cannot be NaN",4f,d1,ff,8b));
            		}
HXLINE( 753)		if ((radius <= 0)) {
HXLINE( 753)			HX_STACK_DO_THROW(HX_("Error: Circle radius must be strictly positive",f1,e3,ab,38));
            		}
HXLINE( 755)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret;
HXDLIN( 755)		if (hx::IsNull( filter )) {
HXLINE( 755)			ret = null();
            		}
            		else {
HXLINE( 755)			ret = filter->zpp_inner;
            		}
HXDLIN( 755)		 ::nape::shape::ShapeList ret1 = this->zpp_inner->shapesInCircle(position,radius,containment,ret,output);
HXLINE( 756)		if (position->zpp_inner->weak) {
HXLINE( 760)			bool _hx_tmp1;
HXDLIN( 760)			if (hx::IsNotNull( position )) {
HXLINE( 760)				_hx_tmp1 = position->zpp_disp;
            			}
            			else {
HXLINE( 760)				_hx_tmp1 = false;
            			}
HXDLIN( 760)			if (_hx_tmp1) {
HXLINE( 760)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 760)			{
HXLINE( 760)				 ::zpp_nape::geom::ZPP_Vec2 _this = position->zpp_inner;
HXDLIN( 760)				if (_this->_immutable) {
HXLINE( 760)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 760)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 760)					_this->_isimmutable();
            				}
            			}
HXDLIN( 760)			if (position->zpp_inner->_inuse) {
HXLINE( 760)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 760)			 ::zpp_nape::geom::ZPP_Vec2 inner = position->zpp_inner;
HXDLIN( 760)			position->zpp_inner->outer = null();
HXDLIN( 760)			position->zpp_inner = null();
HXDLIN( 760)			{
HXLINE( 760)				 ::nape::geom::Vec2 o = position;
HXDLIN( 760)				o->zpp_pool = null();
HXDLIN( 760)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 760)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 760)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 760)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 760)				o->zpp_disp = true;
            			}
HXDLIN( 760)			{
HXLINE( 760)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 760)				{
HXLINE( 760)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 760)						o1->outer->zpp_inner = null();
HXDLIN( 760)						o1->outer = null();
            					}
HXDLIN( 760)					o1->_isimmutable = null();
HXDLIN( 760)					o1->_validate = null();
HXDLIN( 760)					o1->_invalidate = null();
            				}
HXDLIN( 760)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 760)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 767)		return ret1;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,shapesInCircle,return )

 ::nape::phys::BodyList Space_obj::bodiesInCircle( ::nape::geom::Vec2 position,Float radius,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            		bool containment = __o_containment.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_791_bodiesInCircle)
HXLINE( 794)		bool _hx_tmp;
HXDLIN( 794)		if (hx::IsNotNull( position )) {
HXLINE( 794)			_hx_tmp = position->zpp_disp;
            		}
            		else {
HXLINE( 794)			_hx_tmp = false;
            		}
HXDLIN( 794)		if (_hx_tmp) {
HXLINE( 794)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 798)		if (hx::IsNull( position )) {
HXLINE( 798)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate objects at null circle :)",6f,d0,8a,4b));
            		}
HXLINE( 799)		if ((radius != radius)) {
HXLINE( 799)			HX_STACK_DO_THROW(HX_("Error: Circle radius cannot be NaN",4f,d1,ff,8b));
            		}
HXLINE( 800)		if ((radius <= 0)) {
HXLINE( 800)			HX_STACK_DO_THROW(HX_("Error: Circle radius must be strictly positive",f1,e3,ab,38));
            		}
HXLINE( 802)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret;
HXDLIN( 802)		if (hx::IsNull( filter )) {
HXLINE( 802)			ret = null();
            		}
            		else {
HXLINE( 802)			ret = filter->zpp_inner;
            		}
HXDLIN( 802)		 ::nape::phys::BodyList ret1 = this->zpp_inner->bodiesInCircle(position,radius,containment,ret,output);
HXLINE( 803)		if (position->zpp_inner->weak) {
HXLINE( 807)			bool _hx_tmp1;
HXDLIN( 807)			if (hx::IsNotNull( position )) {
HXLINE( 807)				_hx_tmp1 = position->zpp_disp;
            			}
            			else {
HXLINE( 807)				_hx_tmp1 = false;
            			}
HXDLIN( 807)			if (_hx_tmp1) {
HXLINE( 807)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 807)			{
HXLINE( 807)				 ::zpp_nape::geom::ZPP_Vec2 _this = position->zpp_inner;
HXDLIN( 807)				if (_this->_immutable) {
HXLINE( 807)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 807)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 807)					_this->_isimmutable();
            				}
            			}
HXDLIN( 807)			if (position->zpp_inner->_inuse) {
HXLINE( 807)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 807)			 ::zpp_nape::geom::ZPP_Vec2 inner = position->zpp_inner;
HXDLIN( 807)			position->zpp_inner->outer = null();
HXDLIN( 807)			position->zpp_inner = null();
HXDLIN( 807)			{
HXLINE( 807)				 ::nape::geom::Vec2 o = position;
HXDLIN( 807)				o->zpp_pool = null();
HXDLIN( 807)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 807)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 807)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 807)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 807)				o->zpp_disp = true;
            			}
HXDLIN( 807)			{
HXLINE( 807)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 807)				{
HXLINE( 807)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 807)						o1->outer->zpp_inner = null();
HXDLIN( 807)						o1->outer = null();
            					}
HXDLIN( 807)					o1->_isimmutable = null();
HXDLIN( 807)					o1->_validate = null();
HXDLIN( 807)					o1->_invalidate = null();
            				}
HXDLIN( 807)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 807)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 814)		return ret1;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,bodiesInCircle,return )

 ::nape::shape::ShapeList Space_obj::shapesInShape( ::nape::shape::Shape shape,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            		bool containment = __o_containment.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_838_shapesInShape)
HXLINE( 840)		if (hx::IsNull( shape )) {
HXLINE( 840)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes in a null shapes :)",48,a8,12,36));
            		}
HXLINE( 841)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 841)		if (hx::IsNotNull( shape->zpp_inner->body )) {
HXLINE( 841)			_hx_tmp = shape->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 841)			_hx_tmp = null();
            		}
HXDLIN( 841)		if (hx::IsNull( _hx_tmp )) {
HXLINE( 841)			HX_STACK_DO_THROW(HX_("Error: Query shape needs to be inside a Body to be well defined :)",a5,79,fe,6e));
            		}
HXLINE( 842)		if ((shape->zpp_inner->type == 1)) {
HXLINE( 843)			 ::nape::shape::ValidationResult res = shape->zpp_inner->polygon->valid();
HXLINE( 844)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 844)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 844)				::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 844)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 844)			if (hx::IsNotEq( res,::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 844)				HX_STACK_DO_THROW((HX_("Error: Polygon query shape is invalid : ",fa,40,f2,2b) + res->toString()));
            			}
            		}
HXLINE( 847)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp1;
HXDLIN( 847)		if (hx::IsNull( filter )) {
HXLINE( 847)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 847)			_hx_tmp1 = filter->zpp_inner;
            		}
HXDLIN( 847)		return this->zpp_inner->shapesInShape(shape->zpp_inner,containment,_hx_tmp1,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,shapesInShape,return )

 ::nape::phys::BodyList Space_obj::bodiesInShape( ::nape::shape::Shape shape,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            		bool containment = __o_containment.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_870_bodiesInShape)
HXLINE( 872)		if (hx::IsNull( shape )) {
HXLINE( 872)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate bodies in a null shapes :)",96,a4,85,46));
            		}
HXLINE( 873)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 873)		if (hx::IsNotNull( shape->zpp_inner->body )) {
HXLINE( 873)			_hx_tmp = shape->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 873)			_hx_tmp = null();
            		}
HXDLIN( 873)		if (hx::IsNull( _hx_tmp )) {
HXLINE( 873)			HX_STACK_DO_THROW(HX_("Error: Query shape needs to be inside a Body to be well defined :)",a5,79,fe,6e));
            		}
HXLINE( 874)		if ((shape->zpp_inner->type == 1)) {
HXLINE( 875)			 ::nape::shape::ValidationResult res = shape->zpp_inner->polygon->valid();
HXLINE( 876)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 876)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 876)				::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 876)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 876)			if (hx::IsNotEq( res,::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 876)				HX_STACK_DO_THROW((HX_("Error: Polygon query shape is invalid : ",fa,40,f2,2b) + res->toString()));
            			}
            		}
HXLINE( 879)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp1;
HXDLIN( 879)		if (hx::IsNull( filter )) {
HXLINE( 879)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 879)			_hx_tmp1 = filter->zpp_inner;
            		}
HXDLIN( 879)		return this->zpp_inner->bodiesInShape(shape->zpp_inner,containment,_hx_tmp1,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,bodiesInShape,return )

 ::nape::shape::ShapeList Space_obj::shapesInBody( ::nape::phys::Body body, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_898_shapesInBody)
HXLINE( 900)		if (hx::IsNull( body )) {
HXLINE( 900)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes in null body",d6,21,f4,08));
            		}
HXLINE( 902)		 ::nape::shape::ShapeList ret;
HXDLIN( 902)		if (hx::IsNull( output )) {
HXLINE( 902)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 902)			ret = output;
            		}
HXLINE( 903)		{
HXLINE( 903)			 ::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;
HXDLIN( 903)			_this->zpp_inner->valmod();
HXDLIN( 903)			 ::nape::shape::ShapeIterator _g = ::nape::shape::ShapeIterator_obj::get(_this);
HXDLIN( 903)			while(true){
HXLINE( 903)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 903)				 ::nape::shape::ShapeList _this1 = _g->zpp_inner;
HXDLIN( 903)				_this1->zpp_inner->valmod();
HXDLIN( 903)				if (_this1->zpp_inner->zip_length) {
HXLINE( 903)					_this1->zpp_inner->zip_length = false;
HXDLIN( 903)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 903)				int length = _this1->zpp_inner->user_length;
HXDLIN( 903)				_g->zpp_critical = true;
HXDLIN( 903)				bool _hx_tmp;
HXDLIN( 903)				if ((_g->zpp_i < length)) {
HXLINE( 903)					_hx_tmp = true;
            				}
            				else {
HXLINE( 903)					{
HXLINE( 903)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN( 903)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN( 903)						_g->zpp_inner = null();
            					}
HXDLIN( 903)					_hx_tmp = false;
            				}
HXDLIN( 903)				if (!(_hx_tmp)) {
HXLINE( 903)					goto _hx_goto_44;
            				}
HXDLIN( 903)				_g->zpp_critical = false;
HXDLIN( 903)				 ::nape::shape::Shape shape = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 904)				 ::nape::shape::ShapeList cur = this->shapesInShape(shape,false,filter,ret);
            			}
            			_hx_goto_44:;
            		}
HXLINE( 906)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,shapesInBody,return )

 ::nape::phys::BodyList Space_obj::bodiesInBody( ::nape::phys::Body body, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_924_bodiesInBody)
HXLINE( 926)		if (hx::IsNull( body )) {
HXLINE( 926)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate shapes in null body",d6,21,f4,08));
            		}
HXLINE( 928)		 ::nape::phys::BodyList ret;
HXDLIN( 928)		if (hx::IsNull( output )) {
HXLINE( 928)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 928)			ret = output;
            		}
HXLINE( 929)		{
HXLINE( 929)			 ::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;
HXDLIN( 929)			_this->zpp_inner->valmod();
HXDLIN( 929)			 ::nape::shape::ShapeIterator _g = ::nape::shape::ShapeIterator_obj::get(_this);
HXDLIN( 929)			while(true){
HXLINE( 929)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 929)				 ::nape::shape::ShapeList _this1 = _g->zpp_inner;
HXDLIN( 929)				_this1->zpp_inner->valmod();
HXDLIN( 929)				if (_this1->zpp_inner->zip_length) {
HXLINE( 929)					_this1->zpp_inner->zip_length = false;
HXDLIN( 929)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 929)				int length = _this1->zpp_inner->user_length;
HXDLIN( 929)				_g->zpp_critical = true;
HXDLIN( 929)				bool _hx_tmp;
HXDLIN( 929)				if ((_g->zpp_i < length)) {
HXLINE( 929)					_hx_tmp = true;
            				}
            				else {
HXLINE( 929)					{
HXLINE( 929)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN( 929)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN( 929)						_g->zpp_inner = null();
            					}
HXDLIN( 929)					_hx_tmp = false;
            				}
HXDLIN( 929)				if (!(_hx_tmp)) {
HXLINE( 929)					goto _hx_goto_46;
            				}
HXDLIN( 929)				_g->zpp_critical = false;
HXDLIN( 929)				 ::nape::shape::Shape shape = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 930)				 ::nape::phys::BodyList cur = this->bodiesInShape(shape,false,filter,ret);
            			}
            			_hx_goto_46:;
            		}
HXLINE( 932)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,bodiesInBody,return )

 ::nape::geom::ConvexResult Space_obj::convexCast( ::nape::shape::Shape shape,Float deltaTime,hx::Null< bool >  __o_liveSweep, ::nape::dynamics::InteractionFilter filter){
            		bool liveSweep = __o_liveSweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_957_convexCast)
HXLINE( 959)		if (hx::IsNull( shape )) {
HXLINE( 959)			HX_STACK_DO_THROW(HX_("Error: Cannot cast null shape :)",b5,3e,15,dc));
            		}
HXLINE( 962)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 962)		if (hx::IsNotNull( shape->zpp_inner->body )) {
HXLINE( 962)			_hx_tmp = shape->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 962)			_hx_tmp = null();
            		}
HXDLIN( 962)		if (hx::IsNull( _hx_tmp )) {
HXLINE( 962)			HX_STACK_DO_THROW(HX_("Error: Shape must belong to a body to be cast.",46,3e,0d,1e));
            		}
HXLINE( 965)		bool _hx_tmp1;
HXDLIN( 965)		if (!((deltaTime < 0))) {
HXLINE( 965)			_hx_tmp1 = (deltaTime != deltaTime);
            		}
            		else {
HXLINE( 965)			_hx_tmp1 = true;
            		}
HXDLIN( 965)		if (_hx_tmp1) {
HXLINE( 965)			HX_STACK_DO_THROW(HX_("Error: deltaTime must be positive",48,08,6e,89));
            		}
HXLINE( 967)		return this->zpp_inner->convexCast(shape->zpp_inner,deltaTime,filter,liveSweep);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,convexCast,return )

 ::nape::geom::ConvexResultList Space_obj::convexMultiCast( ::nape::shape::Shape shape,Float deltaTime,hx::Null< bool >  __o_liveSweep, ::nape::dynamics::InteractionFilter filter, ::nape::geom::ConvexResultList output){
            		bool liveSweep = __o_liveSweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_992_convexMultiCast)
HXLINE( 994)		if (hx::IsNull( shape )) {
HXLINE( 994)			HX_STACK_DO_THROW(HX_("Error: Cannot cast null shape :)",b5,3e,15,dc));
            		}
HXLINE( 997)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 997)		if (hx::IsNotNull( shape->zpp_inner->body )) {
HXLINE( 997)			_hx_tmp = shape->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 997)			_hx_tmp = null();
            		}
HXDLIN( 997)		if (hx::IsNull( _hx_tmp )) {
HXLINE( 997)			HX_STACK_DO_THROW(HX_("Error: Shape must belong to a body to be cast.",46,3e,0d,1e));
            		}
HXLINE(1000)		bool _hx_tmp1;
HXDLIN(1000)		if (!((deltaTime < 0))) {
HXLINE(1000)			_hx_tmp1 = (deltaTime != deltaTime);
            		}
            		else {
HXLINE(1000)			_hx_tmp1 = true;
            		}
HXDLIN(1000)		if (_hx_tmp1) {
HXLINE(1000)			HX_STACK_DO_THROW(HX_("Error: deltaTime must be positive",48,08,6e,89));
            		}
HXLINE(1002)		return this->zpp_inner->convexMultiCast(shape->zpp_inner,deltaTime,filter,liveSweep,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,convexMultiCast,return )

 ::nape::geom::RayResult Space_obj::rayCast( ::nape::geom::Ray ray,hx::Null< bool >  __o_inner, ::nape::dynamics::InteractionFilter filter){
            		bool inner = __o_inner.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_1023_rayCast)
HXLINE(1025)		if (hx::IsNull( ray )) {
HXLINE(1025)			HX_STACK_DO_THROW(HX_("Error: Cannot cast null ray :)",cc,b7,f2,ff));
            		}
HXLINE(1027)		return this->zpp_inner->rayCast(ray,inner,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,rayCast,return )

 ::nape::geom::RayResultList Space_obj::rayMultiCast( ::nape::geom::Ray ray,hx::Null< bool >  __o_inner, ::nape::dynamics::InteractionFilter filter, ::nape::geom::RayResultList output){
            		bool inner = __o_inner.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_1048_rayMultiCast)
HXLINE(1050)		if (hx::IsNull( ray )) {
HXLINE(1050)			HX_STACK_DO_THROW(HX_("Error: Cannot cast null ray :)",cc,b7,f2,ff));
            		}
HXLINE(1052)		return this->zpp_inner->rayMultiCast(ray,inner,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,rayMultiCast,return )


hx::ObjectPtr< Space_obj > Space_obj::__new( ::nape::geom::Vec2 gravity, ::nape::space::Broadphase broadphase) {
	hx::ObjectPtr< Space_obj > __this = new Space_obj();
	__this->__construct(gravity,broadphase);
	return __this;
}

hx::ObjectPtr< Space_obj > Space_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::geom::Vec2 gravity, ::nape::space::Broadphase broadphase) {
	Space_obj *__this = (Space_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Space_obj), true, "nape.space.Space"));
	*(void **)__this = Space_obj::_hx_vtable;
	__this->__construct(gravity,broadphase);
	return __this;
}

Space_obj::Space_obj()
{
}

void Space_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Space);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Space_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Space_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_world() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bodies() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gravity() ); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_userData() ); }
		if (HX_FIELD_EQ(inName,"arbiters") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_arbiters() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"compounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_compounds() ); }
		if (HX_FIELD_EQ(inName,"get_world") ) { return hx::Val( get_world_dyn() ); }
		if (HX_FIELD_EQ(inName,"listeners") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_listeners() ); }
		if (HX_FIELD_EQ(inName,"timeStamp") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_timeStamp() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"broadphase") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_broadphase() ); }
		if (HX_FIELD_EQ(inName,"get_bodies") ) { return hx::Val( get_bodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"liveBodies") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_liveBodies() ); }
		if (HX_FIELD_EQ(inName,"convexCast") ) { return hx::Val( convexCast_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_gravity") ) { return hx::Val( get_gravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gravity") ) { return hx::Val( set_gravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"constraints") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_constraints() ); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_elapsedTime() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortContacts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sortContacts() ); }
		if (HX_FIELD_EQ(inName,"get_arbiters") ) { return hx::Val( get_arbiters_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInBody") ) { return hx::Val( shapesInBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInBody") ) { return hx::Val( bodiesInBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_compounds") ) { return hx::Val( get_compounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_listeners") ) { return hx::Val( get_listeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_timeStamp") ) { return hx::Val( get_timeStamp_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_broadphase") ) { return hx::Val( get_broadphase_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_liveBodies") ) { return hx::Val( get_liveBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitCompounds") ) { return hx::Val( visitCompounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"worldLinearDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_worldLinearDrag() ); }
		if (HX_FIELD_EQ(inName,"get_constraints") ) { return hx::Val( get_constraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"liveConstraints") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_liveConstraints() ); }
		if (HX_FIELD_EQ(inName,"get_elapsedTime") ) { return hx::Val( get_elapsedTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"interactionType") ) { return hx::Val( interactionType_dyn() ); }
		if (HX_FIELD_EQ(inName,"convexMultiCast") ) { return hx::Val( convexMultiCast_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_sortContacts") ) { return hx::Val( get_sortContacts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sortContacts") ) { return hx::Val( set_sortContacts_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldAngularDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_worldAngularDrag() ); }
		if (HX_FIELD_EQ(inName,"visitConstraints") ) { return hx::Val( visitConstraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_worldLinearDrag") ) { return hx::Val( get_worldLinearDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_worldLinearDrag") ) { return hx::Val( set_worldLinearDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_liveConstraints") ) { return hx::Val( get_liveConstraints_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_worldAngularDrag") ) { return hx::Val( get_worldAngularDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_worldAngularDrag") ) { return hx::Val( set_worldAngularDrag_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Space_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravity(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sortContacts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sortContacts(inValue.Cast< bool >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"worldLinearDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_worldLinearDrag(inValue.Cast< Float >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"worldAngularDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_worldAngularDrag(inValue.Cast< Float >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Space_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("gravity",4e,6e,ff,77));
	outFields->push(HX_("broadphase",b9,5d,1d,d8));
	outFields->push(HX_("sortContacts",51,43,24,a6));
	outFields->push(HX_("worldAngularDrag",c4,fe,f3,7d));
	outFields->push(HX_("worldLinearDrag",6b,75,d4,fd));
	outFields->push(HX_("compounds",a8,3a,fb,13));
	outFields->push(HX_("bodies",80,1b,dd,5a));
	outFields->push(HX_("liveBodies",8c,a7,18,f9));
	outFields->push(HX_("constraints",76,51,b4,17));
	outFields->push(HX_("liveConstraints",ea,99,65,c6));
	outFields->push(HX_("world",52,96,64,ce));
	outFields->push(HX_("arbiters",6a,2c,b2,21));
	outFields->push(HX_("listeners",7f,65,8e,f3));
	outFields->push(HX_("timeStamp",b6,44,fc,38));
	outFields->push(HX_("elapsedTime",69,5e,cd,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Space_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Space */ ,(int)offsetof(Space_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Space_obj_sStaticStorageInfo = 0;
#endif

static ::String Space_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_userData",1e,4a,42,ba),
	HX_("get_gravity",65,ce,f9,fd),
	HX_("set_gravity",71,d5,66,08),
	HX_("get_broadphase",02,e6,12,4e),
	HX_("get_sortContacts",da,2f,c3,aa),
	HX_("set_sortContacts",4e,1d,05,01),
	HX_("get_worldAngularDrag",cd,63,5e,9c),
	HX_("set_worldAngularDrag",41,1b,16,69),
	HX_("get_worldLinearDrag",82,44,df,88),
	HX_("set_worldLinearDrag",8e,37,7c,c5),
	HX_("get_compounds",7f,0e,5f,d5),
	HX_("get_bodies",49,8b,64,4b),
	HX_("get_liveBodies",d5,2f,0e,6f),
	HX_("get_constraints",0d,09,96,d8),
	HX_("get_liveConstraints",01,69,70,51),
	HX_("visitBodies",ab,f3,5e,e4),
	HX_("visitConstraints",6b,fd,db,c1),
	HX_("visitCompounds",5d,8f,9c,93),
	HX_("get_world",a9,f2,0d,12),
	HX_("get_arbiters",73,e0,cb,d6),
	HX_("get_listeners",56,39,f2,b4),
	HX_("clear",8d,71,5b,48),
	HX_("step",4c,e7,5b,4c),
	HX_("get_timeStamp",8d,18,60,fa),
	HX_("get_elapsedTime",00,16,af,87),
	HX_("interactionType",ac,a7,c8,08),
	HX_("shapesUnderPoint",ea,ec,bc,47),
	HX_("bodiesUnderPoint",b8,1b,30,80),
	HX_("shapesInAABB",d7,1c,84,f9),
	HX_("bodiesInAABB",a5,4c,28,9e),
	HX_("shapesInCircle",27,d4,f7,6c),
	HX_("bodiesInCircle",75,13,e2,a6),
	HX_("shapesInShape",ea,90,2a,d1),
	HX_("bodiesInShape",5c,35,30,3c),
	HX_("shapesInBody",f9,58,50,fa),
	HX_("bodiesInBody",c7,88,f4,9e),
	HX_("convexCast",c6,01,bf,38),
	HX_("convexMultiCast",71,c9,d5,6c),
	HX_("rayCast",c9,5d,3c,25),
	HX_("rayMultiCast",8e,02,7d,23),
	::String(null()) };

hx::Class Space_obj::__mClass;

void Space_obj::__register()
{
	Space_obj _hx_dummy;
	Space_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.space.Space",78,de,a4,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Space_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Space_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Space_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Space_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace space
