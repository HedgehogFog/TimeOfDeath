// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_FluidProperties
#include <hxinc/nape/phys/FluidProperties.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <hxinc/nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <hxinc/zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <hxinc/zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_177_new,"nape.phys.FluidProperties","new",0x937b9199,"nape.phys.FluidProperties.new","nape/phys/FluidProperties.hx",177,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_195_get_userData,"nape.phys.FluidProperties","get_userData",0xff2f19c5,"nape.phys.FluidProperties.get_userData","nape/phys/FluidProperties.hx",195,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_210_get_shapes,"nape.phys.FluidProperties","get_shapes",0x01af11e2,"nape.phys.FluidProperties.get_shapes","nape/phys/FluidProperties.hx",210,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_254_copy,"nape.phys.FluidProperties","copy",0x71660c5c,"nape.phys.FluidProperties.copy","nape/phys/FluidProperties.hx",254,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_269_get_density,"nape.phys.FluidProperties","get_density",0x52e0c238,"nape.phys.FluidProperties.get_density","nape/phys/FluidProperties.hx",269,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_271_set_density,"nape.phys.FluidProperties","set_density",0x5d4dc944,"nape.phys.FluidProperties.set_density","nape/phys/FluidProperties.hx",271,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_294_get_viscosity,"nape.phys.FluidProperties","get_viscosity",0xf5eafc77,"nape.phys.FluidProperties.get_viscosity","nape/phys/FluidProperties.hx",294,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_296_set_viscosity,"nape.phys.FluidProperties","set_viscosity",0x3af0de83,"nape.phys.FluidProperties.set_viscosity","nape/phys/FluidProperties.hx",296,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_318_get_gravity,"nape.phys.FluidProperties","get_gravity",0x880af09e,"nape.phys.FluidProperties.get_gravity","nape/phys/FluidProperties.hx",318,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_320_set_gravity,"nape.phys.FluidProperties","set_gravity",0x9277f7aa,"nape.phys.FluidProperties.set_gravity","nape/phys/FluidProperties.hx",320,0xe22a5857)
HX_LOCAL_STACK_FRAME(_hx_pos_5b9aecec097d9540_345_toString,"nape.phys.FluidProperties","toString",0x82e300d3,"nape.phys.FluidProperties.toString","nape/phys/FluidProperties.hx",345,0xe22a5857)
namespace nape{
namespace phys{

void FluidProperties_obj::__construct(hx::Null< Float >  __o_density,hx::Null< Float >  __o_viscosity){
            		Float density = __o_density.Default(1);
            		Float viscosity = __o_viscosity.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_5b9aecec097d9540_177_new)
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 224)		if (hx::IsNull( ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool )) {
HXLINE( 225)			this->zpp_inner =  ::zpp_nape::phys::ZPP_FluidProperties_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 231)			this->zpp_inner = ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool;
HXLINE( 232)			::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool = this->zpp_inner->next;
HXLINE( 233)			this->zpp_inner->next = null();
            		}
HXLINE( 240)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 241)		if ((density != (this->zpp_inner->density * ( (Float)(1000) )))) {
HXLINE( 241)			if ((density != density)) {
HXLINE( 241)				HX_STACK_DO_THROW(((HX_("Error: FluidProperties::",6f,be,8d,4f) + HX_("density",e8,3f,d5,42)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 241)			this->zpp_inner->density = (density / ( (Float)(1000) ));
HXDLIN( 241)			this->zpp_inner->invalidate();
            		}
HXLINE( 242)		if ((viscosity != this->zpp_inner->viscosity)) {
HXLINE( 242)			if ((viscosity != viscosity)) {
HXLINE( 242)				HX_STACK_DO_THROW(((HX_("Error: FluidProperties::",6f,be,8d,4f) + HX_("viscosity",27,46,3e,2a)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 242)			if ((viscosity < 0)) {
HXLINE( 242)				HX_STACK_DO_THROW(((((HX_("Error: FluidProperties::",6f,be,8d,4f) + HX_("viscosity",27,46,3e,2a)) + HX_(" (",08,1c,00,00)) + viscosity) + HX_(") must be >= 0",cc,84,5f,ca)));
            			}
HXDLIN( 242)			this->zpp_inner->viscosity = (viscosity / ( (Float)(1) ));
HXDLIN( 242)			this->zpp_inner->invalidate();
            		}
            	}

Dynamic FluidProperties_obj::__CreateEmpty() { return new FluidProperties_obj; }

void *FluidProperties_obj::_hx_vtable = 0;

Dynamic FluidProperties_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FluidProperties_obj > _hx_result = new FluidProperties_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FluidProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53fe0f03;
}

 ::Dynamic FluidProperties_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_195_get_userData)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_userData,return )

 ::nape::shape::ShapeList FluidProperties_obj::get_shapes(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_210_get_shapes)
HXLINE( 211)		if (hx::IsNull( this->zpp_inner->wrap_shapes )) {
HXLINE( 211)			this->zpp_inner->wrap_shapes = ::zpp_nape::util::ZPP_ShapeList_obj::get(this->zpp_inner->shapes,true);
            		}
HXLINE( 212)		return this->zpp_inner->wrap_shapes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_shapes,return )

 ::nape::phys::FluidProperties FluidProperties_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_5b9aecec097d9540_254_copy)
HXLINE( 255)		 ::nape::phys::FluidProperties ret =  ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,(this->zpp_inner->density * ( (Float)(1000) )),this->zpp_inner->viscosity);
HXLINE( 256)		if (hx::IsNotNull( this->zpp_inner->userData )) {
HXLINE( 256)			ret->zpp_inner->userData = ::Reflect_obj::copy(this->zpp_inner->userData);
            		}
HXLINE( 257)		{
HXLINE( 257)			 ::nape::geom::Vec2 gravity = this->zpp_inner->wrap_gravity;
HXDLIN( 257)			if (hx::IsNull( gravity )) {
HXLINE( 257)				if (hx::IsNotNull( ret->zpp_inner->wrap_gravity )) {
HXLINE( 257)					ret->zpp_inner->wrap_gravity->zpp_inner->_inuse = false;
HXDLIN( 257)					{
HXLINE( 257)						 ::nape::geom::Vec2 _this = ret->zpp_inner->wrap_gravity;
HXDLIN( 257)						bool _hx_tmp;
HXDLIN( 257)						if (hx::IsNotNull( _this )) {
HXLINE( 257)							_hx_tmp = _this->zpp_disp;
            						}
            						else {
HXLINE( 257)							_hx_tmp = false;
            						}
HXDLIN( 257)						if (_hx_tmp) {
HXLINE( 257)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 257)						{
HXLINE( 257)							 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 257)							if (_this1->_immutable) {
HXLINE( 257)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 257)							if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 257)								_this1->_isimmutable();
            							}
            						}
HXDLIN( 257)						if (_this->zpp_inner->_inuse) {
HXLINE( 257)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 257)						 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 257)						_this->zpp_inner->outer = null();
HXDLIN( 257)						_this->zpp_inner = null();
HXDLIN( 257)						{
HXLINE( 257)							 ::nape::geom::Vec2 o = _this;
HXDLIN( 257)							o->zpp_pool = null();
HXDLIN( 257)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 257)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            							}
            							else {
HXLINE( 257)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            							}
HXDLIN( 257)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 257)							o->zpp_disp = true;
            						}
HXDLIN( 257)						{
HXLINE( 257)							 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 257)							{
HXLINE( 257)								if (hx::IsNotNull( o1->outer )) {
HXLINE( 257)									o1->outer->zpp_inner = null();
HXDLIN( 257)									o1->outer = null();
            								}
HXDLIN( 257)								o1->_isimmutable = null();
HXDLIN( 257)								o1->_validate = null();
HXDLIN( 257)								o1->_invalidate = null();
            							}
HXDLIN( 257)							o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 257)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            						}
            					}
HXDLIN( 257)					ret->zpp_inner->wrap_gravity = null();
            				}
            			}
            			else {
HXLINE( 257)				bool _hx_tmp1;
HXDLIN( 257)				if (hx::IsNotNull( gravity )) {
HXLINE( 257)					_hx_tmp1 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 257)					_hx_tmp1 = false;
            				}
HXDLIN( 257)				if (_hx_tmp1) {
HXLINE( 257)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 257)				if (hx::IsNull( ret->zpp_inner->wrap_gravity )) {
HXLINE( 257)					ret->zpp_inner->getgravity();
            				}
HXDLIN( 257)				{
HXLINE( 257)					 ::nape::geom::Vec2 _this2 = ret->zpp_inner->wrap_gravity;
HXDLIN( 257)					bool _hx_tmp2;
HXDLIN( 257)					if (hx::IsNotNull( _this2 )) {
HXLINE( 257)						_hx_tmp2 = _this2->zpp_disp;
            					}
            					else {
HXLINE( 257)						_hx_tmp2 = false;
            					}
HXDLIN( 257)					if (_hx_tmp2) {
HXLINE( 257)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 257)					bool _hx_tmp3;
HXDLIN( 257)					if (hx::IsNotNull( gravity )) {
HXLINE( 257)						_hx_tmp3 = gravity->zpp_disp;
            					}
            					else {
HXLINE( 257)						_hx_tmp3 = false;
            					}
HXDLIN( 257)					if (_hx_tmp3) {
HXLINE( 257)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 257)					{
HXLINE( 257)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = _this2->zpp_inner;
HXDLIN( 257)						if (_this3->_immutable) {
HXLINE( 257)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 257)						if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE( 257)							_this3->_isimmutable();
            						}
            					}
HXDLIN( 257)					if (hx::IsNull( gravity )) {
HXLINE( 257)						HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            					}
HXDLIN( 257)					bool _hx_tmp4;
HXDLIN( 257)					if (hx::IsNotNull( gravity )) {
HXLINE( 257)						_hx_tmp4 = gravity->zpp_disp;
            					}
            					else {
HXLINE( 257)						_hx_tmp4 = false;
            					}
HXDLIN( 257)					if (_hx_tmp4) {
HXLINE( 257)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 257)					{
HXLINE( 257)						 ::zpp_nape::geom::ZPP_Vec2 _this4 = gravity->zpp_inner;
HXDLIN( 257)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 257)							_this4->_validate();
            						}
            					}
HXDLIN( 257)					Float x = gravity->zpp_inner->x;
HXDLIN( 257)					bool _hx_tmp5;
HXDLIN( 257)					if (hx::IsNotNull( gravity )) {
HXLINE( 257)						_hx_tmp5 = gravity->zpp_disp;
            					}
            					else {
HXLINE( 257)						_hx_tmp5 = false;
            					}
HXDLIN( 257)					if (_hx_tmp5) {
HXLINE( 257)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 257)					{
HXLINE( 257)						 ::zpp_nape::geom::ZPP_Vec2 _this5 = gravity->zpp_inner;
HXDLIN( 257)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 257)							_this5->_validate();
            						}
            					}
HXDLIN( 257)					Float y = gravity->zpp_inner->y;
HXDLIN( 257)					bool _hx_tmp6;
HXDLIN( 257)					if (hx::IsNotNull( _this2 )) {
HXLINE( 257)						_hx_tmp6 = _this2->zpp_disp;
            					}
            					else {
HXLINE( 257)						_hx_tmp6 = false;
            					}
HXDLIN( 257)					if (_hx_tmp6) {
HXLINE( 257)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 257)					{
HXLINE( 257)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this2->zpp_inner;
HXDLIN( 257)						if (_this6->_immutable) {
HXLINE( 257)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 257)						if (hx::IsNotNull( _this6->_isimmutable )) {
HXLINE( 257)							_this6->_isimmutable();
            						}
            					}
HXDLIN( 257)					bool _hx_tmp7;
HXDLIN( 257)					if ((x == x)) {
HXLINE( 257)						_hx_tmp7 = (y != y);
            					}
            					else {
HXLINE( 257)						_hx_tmp7 = true;
            					}
HXDLIN( 257)					if (_hx_tmp7) {
HXLINE( 257)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 257)					bool _hx_tmp8;
HXDLIN( 257)					bool _hx_tmp9;
HXDLIN( 257)					if (hx::IsNotNull( _this2 )) {
HXLINE( 257)						_hx_tmp9 = _this2->zpp_disp;
            					}
            					else {
HXLINE( 257)						_hx_tmp9 = false;
            					}
HXDLIN( 257)					if (_hx_tmp9) {
HXLINE( 257)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 257)					{
HXLINE( 257)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this2->zpp_inner;
HXDLIN( 257)						if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 257)							_this7->_validate();
            						}
            					}
HXDLIN( 257)					if ((_this2->zpp_inner->x == x)) {
HXLINE( 257)						bool _hx_tmp10;
HXDLIN( 257)						if (hx::IsNotNull( _this2 )) {
HXLINE( 257)							_hx_tmp10 = _this2->zpp_disp;
            						}
            						else {
HXLINE( 257)							_hx_tmp10 = false;
            						}
HXDLIN( 257)						if (_hx_tmp10) {
HXLINE( 257)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 257)						{
HXLINE( 257)							 ::zpp_nape::geom::ZPP_Vec2 _this8 = _this2->zpp_inner;
HXDLIN( 257)							if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 257)								_this8->_validate();
            							}
            						}
HXDLIN( 257)						_hx_tmp8 = (_this2->zpp_inner->y == y);
            					}
            					else {
HXLINE( 257)						_hx_tmp8 = false;
            					}
HXDLIN( 257)					if (!(_hx_tmp8)) {
HXLINE( 257)						{
HXLINE( 257)							_this2->zpp_inner->x = x;
HXDLIN( 257)							_this2->zpp_inner->y = y;
            						}
HXDLIN( 257)						{
HXLINE( 257)							 ::zpp_nape::geom::ZPP_Vec2 _this9 = _this2->zpp_inner;
HXDLIN( 257)							if (hx::IsNotNull( _this9->_invalidate )) {
HXLINE( 257)								_this9->_invalidate(_this9);
            							}
            						}
            					}
HXDLIN( 257)					 ::nape::geom::Vec2 ret1 = _this2;
HXDLIN( 257)					if (gravity->zpp_inner->weak) {
HXLINE( 257)						bool _hx_tmp11;
HXDLIN( 257)						if (hx::IsNotNull( gravity )) {
HXLINE( 257)							_hx_tmp11 = gravity->zpp_disp;
            						}
            						else {
HXLINE( 257)							_hx_tmp11 = false;
            						}
HXDLIN( 257)						if (_hx_tmp11) {
HXLINE( 257)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 257)						{
HXLINE( 257)							 ::zpp_nape::geom::ZPP_Vec2 _this10 = gravity->zpp_inner;
HXDLIN( 257)							if (_this10->_immutable) {
HXLINE( 257)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 257)							if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 257)								_this10->_isimmutable();
            							}
            						}
HXDLIN( 257)						if (gravity->zpp_inner->_inuse) {
HXLINE( 257)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 257)						 ::zpp_nape::geom::ZPP_Vec2 inner1 = gravity->zpp_inner;
HXDLIN( 257)						gravity->zpp_inner->outer = null();
HXDLIN( 257)						gravity->zpp_inner = null();
HXDLIN( 257)						{
HXLINE( 257)							 ::nape::geom::Vec2 o2 = gravity;
HXDLIN( 257)							o2->zpp_pool = null();
HXDLIN( 257)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 257)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            							}
            							else {
HXLINE( 257)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            							}
HXDLIN( 257)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 257)							o2->zpp_disp = true;
            						}
HXDLIN( 257)						{
HXLINE( 257)							 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 257)							{
HXLINE( 257)								if (hx::IsNotNull( o3->outer )) {
HXLINE( 257)									o3->outer->zpp_inner = null();
HXDLIN( 257)									o3->outer = null();
            								}
HXDLIN( 257)								o3->_isimmutable = null();
HXDLIN( 257)								o3->_validate = null();
HXDLIN( 257)								o3->_invalidate = null();
            							}
HXDLIN( 257)							o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 257)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            						}
            					}
            				}
            			}
            		}
HXLINE( 258)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,copy,return )

Float FluidProperties_obj::get_density(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_269_get_density)
HXDLIN( 269)		return (this->zpp_inner->density * ( (Float)(1000) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_density,return )

Float FluidProperties_obj::set_density(Float density){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_271_set_density)
HXLINE( 273)		if ((density != (this->zpp_inner->density * ( (Float)(1000) )))) {
HXLINE( 275)			if ((density != density)) {
HXLINE( 275)				HX_STACK_DO_THROW(((HX_("Error: FluidProperties::",6f,be,8d,4f) + HX_("density",e8,3f,d5,42)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 278)			this->zpp_inner->density = (density / ( (Float)(1000) ));
HXLINE( 279)			this->zpp_inner->invalidate();
            		}
HXLINE( 282)		return (this->zpp_inner->density * ( (Float)(1000) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidProperties_obj,set_density,return )

Float FluidProperties_obj::get_viscosity(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_294_get_viscosity)
HXDLIN( 294)		return this->zpp_inner->viscosity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_viscosity,return )

Float FluidProperties_obj::set_viscosity(Float viscosity){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_296_set_viscosity)
HXLINE( 298)		if ((viscosity != this->zpp_inner->viscosity)) {
HXLINE( 300)			if ((viscosity != viscosity)) {
HXLINE( 300)				HX_STACK_DO_THROW(((HX_("Error: FluidProperties::",6f,be,8d,4f) + HX_("viscosity",27,46,3e,2a)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 301)			if ((viscosity < 0)) {
HXLINE( 301)				HX_STACK_DO_THROW(((((HX_("Error: FluidProperties::",6f,be,8d,4f) + HX_("viscosity",27,46,3e,2a)) + HX_(" (",08,1c,00,00)) + viscosity) + HX_(") must be >= 0",cc,84,5f,ca)));
            			}
HXLINE( 303)			this->zpp_inner->viscosity = (viscosity / ( (Float)(1) ));
HXLINE( 304)			this->zpp_inner->invalidate();
            		}
HXLINE( 307)		return this->zpp_inner->viscosity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidProperties_obj,set_viscosity,return )

 ::nape::geom::Vec2 FluidProperties_obj::get_gravity(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_318_get_gravity)
HXDLIN( 318)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_gravity,return )

 ::nape::geom::Vec2 FluidProperties_obj::set_gravity( ::nape::geom::Vec2 gravity){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_320_set_gravity)
HXLINE( 322)		if (hx::IsNull( gravity )) {
HXLINE( 323)			if (hx::IsNotNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 324)				this->zpp_inner->wrap_gravity->zpp_inner->_inuse = false;
HXLINE( 325)				{
HXLINE( 325)					 ::nape::geom::Vec2 _this = this->zpp_inner->wrap_gravity;
HXDLIN( 325)					bool _hx_tmp;
HXDLIN( 325)					if (hx::IsNotNull( _this )) {
HXLINE( 325)						_hx_tmp = _this->zpp_disp;
            					}
            					else {
HXLINE( 325)						_hx_tmp = false;
            					}
HXDLIN( 325)					if (_hx_tmp) {
HXLINE( 325)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 325)					{
HXLINE( 325)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 325)						if (_this1->_immutable) {
HXLINE( 325)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 325)						if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 325)							_this1->_isimmutable();
            						}
            					}
HXDLIN( 325)					if (_this->zpp_inner->_inuse) {
HXLINE( 325)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 325)					 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 325)					_this->zpp_inner->outer = null();
HXDLIN( 325)					_this->zpp_inner = null();
HXDLIN( 325)					{
HXLINE( 325)						 ::nape::geom::Vec2 o = _this;
HXDLIN( 325)						o->zpp_pool = null();
HXDLIN( 325)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 325)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 325)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 325)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 325)						o->zpp_disp = true;
            					}
HXDLIN( 325)					{
HXLINE( 325)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 325)						{
HXLINE( 325)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 325)								o1->outer->zpp_inner = null();
HXDLIN( 325)								o1->outer = null();
            							}
HXDLIN( 325)							o1->_isimmutable = null();
HXDLIN( 325)							o1->_validate = null();
HXDLIN( 325)							o1->_invalidate = null();
            						}
HXDLIN( 325)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 325)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
HXLINE( 326)				this->zpp_inner->wrap_gravity = null();
            			}
            		}
            		else {
HXLINE( 332)			bool _hx_tmp1;
HXDLIN( 332)			if (hx::IsNotNull( gravity )) {
HXLINE( 332)				_hx_tmp1 = gravity->zpp_disp;
            			}
            			else {
HXLINE( 332)				_hx_tmp1 = false;
            			}
HXDLIN( 332)			if (_hx_tmp1) {
HXLINE( 332)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 335)			if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 335)				this->zpp_inner->getgravity();
            			}
HXLINE( 336)			{
HXLINE( 336)				 ::nape::geom::Vec2 _this2 = this->zpp_inner->wrap_gravity;
HXDLIN( 336)				bool _hx_tmp2;
HXDLIN( 336)				if (hx::IsNotNull( _this2 )) {
HXLINE( 336)					_hx_tmp2 = _this2->zpp_disp;
            				}
            				else {
HXLINE( 336)					_hx_tmp2 = false;
            				}
HXDLIN( 336)				if (_hx_tmp2) {
HXLINE( 336)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 336)				bool _hx_tmp3;
HXDLIN( 336)				if (hx::IsNotNull( gravity )) {
HXLINE( 336)					_hx_tmp3 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 336)					_hx_tmp3 = false;
            				}
HXDLIN( 336)				if (_hx_tmp3) {
HXLINE( 336)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 336)				{
HXLINE( 336)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = _this2->zpp_inner;
HXDLIN( 336)					if (_this3->_immutable) {
HXLINE( 336)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 336)					if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE( 336)						_this3->_isimmutable();
            					}
            				}
HXDLIN( 336)				if (hx::IsNull( gravity )) {
HXLINE( 336)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 336)				bool _hx_tmp4;
HXDLIN( 336)				if (hx::IsNotNull( gravity )) {
HXLINE( 336)					_hx_tmp4 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 336)					_hx_tmp4 = false;
            				}
HXDLIN( 336)				if (_hx_tmp4) {
HXLINE( 336)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 336)				{
HXLINE( 336)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = gravity->zpp_inner;
HXDLIN( 336)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 336)						_this4->_validate();
            					}
            				}
HXDLIN( 336)				Float x = gravity->zpp_inner->x;
HXDLIN( 336)				bool _hx_tmp5;
HXDLIN( 336)				if (hx::IsNotNull( gravity )) {
HXLINE( 336)					_hx_tmp5 = gravity->zpp_disp;
            				}
            				else {
HXLINE( 336)					_hx_tmp5 = false;
            				}
HXDLIN( 336)				if (_hx_tmp5) {
HXLINE( 336)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 336)				{
HXLINE( 336)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = gravity->zpp_inner;
HXDLIN( 336)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 336)						_this5->_validate();
            					}
            				}
HXDLIN( 336)				Float y = gravity->zpp_inner->y;
HXDLIN( 336)				bool _hx_tmp6;
HXDLIN( 336)				if (hx::IsNotNull( _this2 )) {
HXLINE( 336)					_hx_tmp6 = _this2->zpp_disp;
            				}
            				else {
HXLINE( 336)					_hx_tmp6 = false;
            				}
HXDLIN( 336)				if (_hx_tmp6) {
HXLINE( 336)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 336)				{
HXLINE( 336)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this2->zpp_inner;
HXDLIN( 336)					if (_this6->_immutable) {
HXLINE( 336)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 336)					if (hx::IsNotNull( _this6->_isimmutable )) {
HXLINE( 336)						_this6->_isimmutable();
            					}
            				}
HXDLIN( 336)				bool _hx_tmp7;
HXDLIN( 336)				if ((x == x)) {
HXLINE( 336)					_hx_tmp7 = (y != y);
            				}
            				else {
HXLINE( 336)					_hx_tmp7 = true;
            				}
HXDLIN( 336)				if (_hx_tmp7) {
HXLINE( 336)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 336)				bool _hx_tmp8;
HXDLIN( 336)				bool _hx_tmp9;
HXDLIN( 336)				if (hx::IsNotNull( _this2 )) {
HXLINE( 336)					_hx_tmp9 = _this2->zpp_disp;
            				}
            				else {
HXLINE( 336)					_hx_tmp9 = false;
            				}
HXDLIN( 336)				if (_hx_tmp9) {
HXLINE( 336)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 336)				{
HXLINE( 336)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this2->zpp_inner;
HXDLIN( 336)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 336)						_this7->_validate();
            					}
            				}
HXDLIN( 336)				if ((_this2->zpp_inner->x == x)) {
HXLINE( 336)					bool _hx_tmp10;
HXDLIN( 336)					if (hx::IsNotNull( _this2 )) {
HXLINE( 336)						_hx_tmp10 = _this2->zpp_disp;
            					}
            					else {
HXLINE( 336)						_hx_tmp10 = false;
            					}
HXDLIN( 336)					if (_hx_tmp10) {
HXLINE( 336)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 336)					{
HXLINE( 336)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = _this2->zpp_inner;
HXDLIN( 336)						if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 336)							_this8->_validate();
            						}
            					}
HXDLIN( 336)					_hx_tmp8 = (_this2->zpp_inner->y == y);
            				}
            				else {
HXLINE( 336)					_hx_tmp8 = false;
            				}
HXDLIN( 336)				if (!(_hx_tmp8)) {
HXLINE( 336)					{
HXLINE( 336)						_this2->zpp_inner->x = x;
HXDLIN( 336)						_this2->zpp_inner->y = y;
            					}
HXDLIN( 336)					{
HXLINE( 336)						 ::zpp_nape::geom::ZPP_Vec2 _this9 = _this2->zpp_inner;
HXDLIN( 336)						if (hx::IsNotNull( _this9->_invalidate )) {
HXLINE( 336)							_this9->_invalidate(_this9);
            						}
            					}
            				}
HXDLIN( 336)				 ::nape::geom::Vec2 ret = _this2;
HXDLIN( 336)				if (gravity->zpp_inner->weak) {
HXLINE( 336)					bool _hx_tmp11;
HXDLIN( 336)					if (hx::IsNotNull( gravity )) {
HXLINE( 336)						_hx_tmp11 = gravity->zpp_disp;
            					}
            					else {
HXLINE( 336)						_hx_tmp11 = false;
            					}
HXDLIN( 336)					if (_hx_tmp11) {
HXLINE( 336)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 336)					{
HXLINE( 336)						 ::zpp_nape::geom::ZPP_Vec2 _this10 = gravity->zpp_inner;
HXDLIN( 336)						if (_this10->_immutable) {
HXLINE( 336)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 336)						if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 336)							_this10->_isimmutable();
            						}
            					}
HXDLIN( 336)					if (gravity->zpp_inner->_inuse) {
HXLINE( 336)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 336)					 ::zpp_nape::geom::ZPP_Vec2 inner1 = gravity->zpp_inner;
HXDLIN( 336)					gravity->zpp_inner->outer = null();
HXDLIN( 336)					gravity->zpp_inner = null();
HXDLIN( 336)					{
HXLINE( 336)						 ::nape::geom::Vec2 o2 = gravity;
HXDLIN( 336)						o2->zpp_pool = null();
HXDLIN( 336)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 336)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            						}
            						else {
HXLINE( 336)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            						}
HXDLIN( 336)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 336)						o2->zpp_disp = true;
            					}
HXDLIN( 336)					{
HXLINE( 336)						 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 336)						{
HXLINE( 336)							if (hx::IsNotNull( o3->outer )) {
HXLINE( 336)								o3->outer->zpp_inner = null();
HXDLIN( 336)								o3->outer = null();
            							}
HXDLIN( 336)							o3->_isimmutable = null();
HXDLIN( 336)							o3->_validate = null();
HXDLIN( 336)							o3->_invalidate = null();
            						}
HXDLIN( 336)						o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 336)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            					}
            				}
            			}
            		}
HXLINE( 339)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidProperties_obj,set_gravity,return )

::String FluidProperties_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_345_toString)
HXDLIN( 345)		::String _hx_tmp = ((((HX_("{ density: ",a9,c0,bf,86) + (this->zpp_inner->density * ( (Float)(1000) ))) + HX_(" viscosity: ",6d,44,e7,22)) + this->zpp_inner->viscosity) + HX_(" gravity: ",54,4c,c1,12));
HXDLIN( 345)		return ((_hx_tmp + ::Std_obj::string(this->zpp_inner->wrap_gravity)) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,toString,return )


hx::ObjectPtr< FluidProperties_obj > FluidProperties_obj::__new(hx::Null< Float >  __o_density,hx::Null< Float >  __o_viscosity) {
	hx::ObjectPtr< FluidProperties_obj > __this = new FluidProperties_obj();
	__this->__construct(__o_density,__o_viscosity);
	return __this;
}

hx::ObjectPtr< FluidProperties_obj > FluidProperties_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_density,hx::Null< Float >  __o_viscosity) {
	FluidProperties_obj *__this = (FluidProperties_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FluidProperties_obj), true, "nape.phys.FluidProperties"));
	*(void **)__this = FluidProperties_obj::_hx_vtable;
	__this->__construct(__o_density,__o_viscosity);
	return __this;
}

FluidProperties_obj::FluidProperties_obj()
{
}

void FluidProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FluidProperties);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void FluidProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val FluidProperties_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shapes() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_density() ); }
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gravity() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_userData() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"viscosity") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_viscosity() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_shapes") ) { return hx::Val( get_shapes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_density") ) { return hx::Val( get_density_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_density") ) { return hx::Val( set_density_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gravity") ) { return hx::Val( get_gravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gravity") ) { return hx::Val( set_gravity_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_viscosity") ) { return hx::Val( get_viscosity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_viscosity") ) { return hx::Val( set_viscosity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FluidProperties_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_density(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravity(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::phys::ZPP_FluidProperties >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viscosity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_viscosity(inValue.Cast< Float >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FluidProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("shapes",32,da,29,1d));
	outFields->push(HX_("density",e8,3f,d5,42));
	outFields->push(HX_("viscosity",27,46,3e,2a));
	outFields->push(HX_("gravity",4e,6e,ff,77));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FluidProperties_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_FluidProperties */ ,(int)offsetof(FluidProperties_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FluidProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String FluidProperties_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_userData",1e,4a,42,ba),
	HX_("get_shapes",fb,49,b1,0d),
	HX_("copy",b5,bb,c4,41),
	HX_("get_density",ff,9f,cf,c8),
	HX_("set_density",0b,a7,3c,d3),
	HX_("get_viscosity",fe,19,a2,eb),
	HX_("set_viscosity",0a,fc,a7,30),
	HX_("get_gravity",65,ce,f9,fd),
	HX_("set_gravity",71,d5,66,08),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class FluidProperties_obj::__mClass;

void FluidProperties_obj::__register()
{
	FluidProperties_obj _hx_dummy;
	FluidProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.phys.FluidProperties",27,d1,e2,a7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FluidProperties_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FluidProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FluidProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FluidProperties_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
