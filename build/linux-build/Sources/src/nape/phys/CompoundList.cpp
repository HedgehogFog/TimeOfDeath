// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_phys_Compound
#include <hxinc/nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundIterator
#include <hxinc/nape/phys/CompoundIterator.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <hxinc/nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <hxinc/zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Compound
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <hxinc/zpp_nape/util/ZPP_CompoundList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_234_new,"nape.phys.CompoundList","new",0xb7459911,"nape.phys.CompoundList.new","nape/phys/CompoundList.hx",234,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_244_get_length,"nape.phys.CompoundList","get_length",0xfdc7241e,"nape.phys.CompoundList.get_length","nape/phys/CompoundList.hx",244,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_346_has,"nape.phys.CompoundList","has",0xb741080b,"nape.phys.CompoundList.has","nape/phys/CompoundList.hx",346,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_363_at,"nape.phys.CompoundList","at",0xb633ed62,"nape.phys.CompoundList.at","nape/phys/CompoundList.hx",363,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_416_push,"nape.phys.CompoundList","push",0xa6fee409,"nape.phys.CompoundList.push","nape/phys/CompoundList.hx",416,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_447_unshift,"nape.phys.CompoundList","unshift",0x0a1658ba,"nape.phys.CompoundList.unshift","nape/phys/CompoundList.hx",447,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_478_pop,"nape.phys.CompoundList","pop",0xb7472642,"nape.phys.CompoundList.pop","nape/phys/CompoundList.hx",478,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_519_shift,"nape.phys.CompoundList","shift",0x299d0373,"nape.phys.CompoundList.shift","nape/phys/CompoundList.hx",519,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_564_add,"nape.phys.CompoundList","add",0xb73bbad2,"nape.phys.CompoundList.add","nape/phys/CompoundList.hx",564,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_576_remove,"nape.phys.CompoundList","remove",0x21e29833,"nape.phys.CompoundList.remove","nape/phys/CompoundList.hx",576,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_614_clear,"nape.phys.CompoundList","clear",0xf5d5887e,"nape.phys.CompoundList.clear","nape/phys/CompoundList.hx",614,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_633_empty,"nape.phys.CompoundList","empty",0x1d54517e,"nape.phys.CompoundList.empty","nape/phys/CompoundList.hx",633,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_647_iterator,"nape.phys.CompoundList","iterator",0x385e5f9d,"nape.phys.CompoundList.iterator","nape/phys/CompoundList.hx",647,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_662_copy,"nape.phys.CompoundList","copy",0x9e628de4,"nape.phys.CompoundList.copy","nape/phys/CompoundList.hx",662,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_684_merge,"nape.phys.CompoundList","merge",0xb340b9a9,"nape.phys.CompoundList.merge","nape/phys/CompoundList.hx",684,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_702_toString,"nape.phys.CompoundList","toString",0xdd32e65b,"nape.phys.CompoundList.toString","nape/phys/CompoundList.hx",702,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_732_foreach,"nape.phys.CompoundList","foreach",0x6b4772bb,"nape.phys.CompoundList.foreach","nape/phys/CompoundList.hx",732,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_779_filter,"nape.phys.CompoundList","filter",0xa28f1ba7,"nape.phys.CompoundList.filter","nape/phys/CompoundList.hx",779,0xaf0f831f)
HX_LOCAL_STACK_FRAME(_hx_pos_3054e882b2f2b6b8_304_fromArray,"nape.phys.CompoundList","fromArray",0x60e73b40,"nape.phys.CompoundList.fromArray","nape/phys/CompoundList.hx",304,0xaf0f831f)
namespace nape{
namespace phys{

void CompoundList_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_234_new)
HXLINE( 238)		this->zpp_inner = null();
HXLINE( 696)		this->zpp_inner =  ::zpp_nape::util::ZPP_CompoundList_obj::__alloc( HX_CTX );
HXLINE( 697)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic CompoundList_obj::__CreateEmpty() { return new CompoundList_obj; }

void *CompoundList_obj::_hx_vtable = 0;

Dynamic CompoundList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CompoundList_obj > _hx_result = new CompoundList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CompoundList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71697d43;
}

int CompoundList_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_244_get_length)
HXLINE( 245)		this->zpp_inner->valmod();
HXLINE( 246)		if (this->zpp_inner->zip_length) {
HXLINE( 247)			this->zpp_inner->zip_length = false;
HXLINE( 259)			this->zpp_inner->user_length = this->zpp_inner->inner->length;
            		}
HXLINE( 261)		return this->zpp_inner->user_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,get_length,return )

bool CompoundList_obj::has( ::nape::phys::Compound obj){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_346_has)
HXLINE( 347)		this->zpp_inner->valmod();
HXLINE( 350)		return this->zpp_inner->inner->has(obj->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,has,return )

 ::nape::phys::Compound CompoundList_obj::at(int index){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_363_at)
HXLINE( 364)		this->zpp_inner->valmod();
HXLINE( 368)		bool _hx_tmp;
HXDLIN( 368)		if ((index >= 0)) {
HXLINE( 368)			this->zpp_inner->valmod();
HXDLIN( 368)			if (this->zpp_inner->zip_length) {
HXLINE( 368)				this->zpp_inner->zip_length = false;
HXDLIN( 368)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 368)			_hx_tmp = (index >= this->zpp_inner->user_length);
            		}
            		else {
HXLINE( 368)			_hx_tmp = true;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 368)			HX_STACK_DO_THROW(HX_("Error: Index out of bounds",10,f3,5b,3f));
            		}
HXLINE( 370)		if (this->zpp_inner->reverse_flag) {
HXLINE( 370)			this->zpp_inner->valmod();
HXDLIN( 370)			if (this->zpp_inner->zip_length) {
HXLINE( 370)				this->zpp_inner->zip_length = false;
HXDLIN( 370)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 370)			index = ((this->zpp_inner->user_length - 1) - index);
            		}
HXLINE( 372)		bool _hx_tmp1;
HXDLIN( 372)		if ((index >= this->zpp_inner->at_index)) {
HXLINE( 372)			_hx_tmp1 = hx::IsNull( this->zpp_inner->at_ite );
            		}
            		else {
HXLINE( 372)			_hx_tmp1 = true;
            		}
HXDLIN( 372)		if (_hx_tmp1) {
HXLINE( 373)			this->zpp_inner->at_index = index;
HXLINE( 374)			this->zpp_inner->at_ite = this->zpp_inner->inner->iterator_at(index);
            		}
            		else {
HXLINE( 377)			while((this->zpp_inner->at_index != index)){
HXLINE( 378)				this->zpp_inner->at_index++;
HXLINE( 379)				this->zpp_inner->at_ite = this->zpp_inner->at_ite->next;
            			}
            		}
HXLINE( 403)		return this->zpp_inner->at_ite->elt->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,at,return )

bool CompoundList_obj::push( ::nape::phys::Compound obj){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_416_push)
HXLINE( 418)		if (this->zpp_inner->immutable) {
HXLINE( 418)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 420)		this->zpp_inner->modify_test();
HXLINE( 421)		this->zpp_inner->valmod();
HXLINE( 424)		bool cont;
HXDLIN( 424)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 424)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 424)			cont = true;
            		}
HXLINE( 425)		if (cont) {
HXLINE( 426)			if (this->zpp_inner->reverse_flag) {
HXLINE( 426)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
            			else {
HXLINE( 428)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 428)					 ::zpp_nape::util::ZNPNode_ZPP_Compound _hx_tmp;
HXDLIN( 428)					if (hx::IsNull( this->zpp_inner->inner->head )) {
HXLINE( 428)						_hx_tmp = null();
            					}
            					else {
HXLINE( 428)						 ::zpp_nape::util::ZNPList_ZPP_Compound _hx_tmp1 = this->zpp_inner->inner;
HXDLIN( 428)						this->zpp_inner->valmod();
HXDLIN( 428)						if (this->zpp_inner->zip_length) {
HXLINE( 428)							this->zpp_inner->zip_length = false;
HXDLIN( 428)							this->zpp_inner->user_length = this->zpp_inner->inner->length;
            						}
HXDLIN( 428)						_hx_tmp = _hx_tmp1->iterator_at((this->zpp_inner->user_length - 1));
            					}
HXDLIN( 428)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 429)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
HXLINE( 431)			this->zpp_inner->invalidate();
HXLINE( 432)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 432)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 434)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,push,return )

bool CompoundList_obj::unshift( ::nape::phys::Compound obj){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_447_unshift)
HXLINE( 449)		if (this->zpp_inner->immutable) {
HXLINE( 449)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 451)		this->zpp_inner->modify_test();
HXLINE( 452)		this->zpp_inner->valmod();
HXLINE( 455)		bool cont;
HXDLIN( 455)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 455)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 455)			cont = true;
            		}
HXLINE( 456)		if (cont) {
HXLINE( 457)			if (this->zpp_inner->reverse_flag) {
HXLINE( 458)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 458)					 ::zpp_nape::util::ZNPNode_ZPP_Compound _hx_tmp;
HXDLIN( 458)					if (hx::IsNull( this->zpp_inner->inner->head )) {
HXLINE( 458)						_hx_tmp = null();
            					}
            					else {
HXLINE( 458)						 ::zpp_nape::util::ZNPList_ZPP_Compound _hx_tmp1 = this->zpp_inner->inner;
HXDLIN( 458)						this->zpp_inner->valmod();
HXDLIN( 458)						if (this->zpp_inner->zip_length) {
HXLINE( 458)							this->zpp_inner->zip_length = false;
HXDLIN( 458)							this->zpp_inner->user_length = this->zpp_inner->inner->length;
            						}
HXDLIN( 458)						_hx_tmp = _hx_tmp1->iterator_at((this->zpp_inner->user_length - 1));
            					}
HXDLIN( 458)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 459)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
            			else {
HXLINE( 461)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
HXLINE( 462)			this->zpp_inner->invalidate();
HXLINE( 463)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 463)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 465)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,unshift,return )

 ::nape::phys::Compound CompoundList_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_478_pop)
HXLINE( 480)		if (this->zpp_inner->immutable) {
HXLINE( 480)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 482)		this->zpp_inner->modify_test();
HXLINE( 484)		if (hx::IsNull( this->zpp_inner->inner->head )) {
HXLINE( 484)			HX_STACK_DO_THROW(HX_("Error: Cannot remove from empty list",3a,7e,61,8d));
            		}
HXLINE( 486)		this->zpp_inner->valmod();
HXLINE( 489)		 ::zpp_nape::phys::ZPP_Compound ret = null();
HXLINE( 490)		if (this->zpp_inner->reverse_flag) {
HXLINE( 491)			ret = this->zpp_inner->inner->head->elt;
HXLINE( 492)			 ::nape::phys::Compound retx = ret->outer;
HXLINE( 493)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 493)				this->zpp_inner->subber(retx);
            			}
HXLINE( 494)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 494)				this->zpp_inner->inner->pop();
            			}
            		}
            		else {
HXLINE( 497)			bool _hx_tmp;
HXDLIN( 497)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 497)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 497)				_hx_tmp = false;
            			}
HXDLIN( 497)			if (_hx_tmp) {
HXLINE( 497)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 498)			 ::zpp_nape::util::ZNPNode_ZPP_Compound ite;
HXDLIN( 498)			this->zpp_inner->valmod();
HXDLIN( 498)			if (this->zpp_inner->zip_length) {
HXLINE( 498)				this->zpp_inner->zip_length = false;
HXDLIN( 498)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 498)			if ((this->zpp_inner->user_length == 1)) {
HXLINE( 498)				ite = null();
            			}
            			else {
HXLINE( 498)				 ::zpp_nape::util::ZNPList_ZPP_Compound ite1 = this->zpp_inner->inner;
HXDLIN( 498)				this->zpp_inner->valmod();
HXDLIN( 498)				if (this->zpp_inner->zip_length) {
HXLINE( 498)					this->zpp_inner->zip_length = false;
HXDLIN( 498)					this->zpp_inner->user_length = this->zpp_inner->inner->length;
            				}
HXDLIN( 498)				ite = ite1->iterator_at((this->zpp_inner->user_length - 2));
            			}
HXLINE( 499)			if (hx::IsNull( ite )) {
HXLINE( 499)				ret = this->zpp_inner->inner->head->elt;
            			}
            			else {
HXLINE( 499)				ret = ite->next->elt;
            			}
HXLINE( 500)			 ::nape::phys::Compound retx1 = ret->outer;
HXLINE( 501)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 501)				this->zpp_inner->subber(retx1);
            			}
HXLINE( 502)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 502)				this->zpp_inner->inner->erase(ite);
            			}
            		}
HXLINE( 504)		this->zpp_inner->invalidate();
HXLINE( 505)		 ::nape::phys::Compound retx2 = ret->outer;
HXLINE( 506)		return retx2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,pop,return )

 ::nape::phys::Compound CompoundList_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_519_shift)
HXLINE( 521)		if (this->zpp_inner->immutable) {
HXLINE( 521)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 523)		this->zpp_inner->modify_test();
HXLINE( 525)		if (hx::IsNull( this->zpp_inner->inner->head )) {
HXLINE( 525)			HX_STACK_DO_THROW(HX_("Error: Cannot remove from empty list",3a,7e,61,8d));
            		}
HXLINE( 527)		this->zpp_inner->valmod();
HXLINE( 530)		 ::zpp_nape::phys::ZPP_Compound ret = null();
HXLINE( 531)		if (this->zpp_inner->reverse_flag) {
HXLINE( 532)			bool _hx_tmp;
HXDLIN( 532)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 532)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 532)				_hx_tmp = false;
            			}
HXDLIN( 532)			if (_hx_tmp) {
HXLINE( 532)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 533)			 ::zpp_nape::util::ZNPNode_ZPP_Compound ite;
HXDLIN( 533)			this->zpp_inner->valmod();
HXDLIN( 533)			if (this->zpp_inner->zip_length) {
HXLINE( 533)				this->zpp_inner->zip_length = false;
HXDLIN( 533)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 533)			if ((this->zpp_inner->user_length == 1)) {
HXLINE( 533)				ite = null();
            			}
            			else {
HXLINE( 533)				 ::zpp_nape::util::ZNPList_ZPP_Compound ite1 = this->zpp_inner->inner;
HXDLIN( 533)				this->zpp_inner->valmod();
HXDLIN( 533)				if (this->zpp_inner->zip_length) {
HXLINE( 533)					this->zpp_inner->zip_length = false;
HXDLIN( 533)					this->zpp_inner->user_length = this->zpp_inner->inner->length;
            				}
HXDLIN( 533)				ite = ite1->iterator_at((this->zpp_inner->user_length - 2));
            			}
HXLINE( 534)			if (hx::IsNull( ite )) {
HXLINE( 534)				ret = this->zpp_inner->inner->head->elt;
            			}
            			else {
HXLINE( 534)				ret = ite->next->elt;
            			}
HXLINE( 535)			 ::nape::phys::Compound retx = ret->outer;
HXLINE( 536)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 536)				this->zpp_inner->subber(retx);
            			}
HXLINE( 537)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 537)				this->zpp_inner->inner->erase(ite);
            			}
            		}
            		else {
HXLINE( 540)			ret = this->zpp_inner->inner->head->elt;
HXLINE( 541)			 ::nape::phys::Compound retx1 = ret->outer;
HXLINE( 542)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 542)				this->zpp_inner->subber(retx1);
            			}
HXLINE( 543)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 543)				this->zpp_inner->inner->pop();
            			}
            		}
HXLINE( 545)		this->zpp_inner->invalidate();
HXLINE( 546)		 ::nape::phys::Compound retx2 = ret->outer;
HXLINE( 547)		return retx2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,shift,return )

bool CompoundList_obj::add( ::nape::phys::Compound obj){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_564_add)
HXDLIN( 564)		if (this->zpp_inner->reverse_flag) {
HXDLIN( 564)			return this->push(obj);
            		}
            		else {
HXDLIN( 564)			return this->unshift(obj);
            		}
HXDLIN( 564)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,add,return )

bool CompoundList_obj::remove( ::nape::phys::Compound obj){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_576_remove)
HXLINE( 578)		if (this->zpp_inner->immutable) {
HXLINE( 578)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 580)		this->zpp_inner->modify_test();
HXLINE( 581)		this->zpp_inner->valmod();
HXLINE( 584)		bool ret;
HXLINE( 585)		{
HXLINE( 586)			ret = false;
HXLINE( 587)			{
HXLINE( 588)				 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = this->zpp_inner->inner->head;
HXLINE( 589)				while(hx::IsNotNull( cx_ite )){
HXLINE( 590)					 ::zpp_nape::phys::ZPP_Compound x = cx_ite->elt;
HXLINE( 592)					if (hx::IsEq( x,obj->zpp_inner )) {
HXLINE( 593)						ret = true;
HXLINE( 594)						goto _hx_goto_10;
            					}
HXLINE( 597)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_10:;
            			}
            		}
HXLINE( 601)		if (ret) {
HXLINE( 602)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 602)				this->zpp_inner->subber(obj);
            			}
HXLINE( 603)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 603)				this->zpp_inner->inner->remove(obj->zpp_inner);
            			}
HXLINE( 604)			this->zpp_inner->invalidate();
            		}
HXLINE( 606)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,remove,return )

void CompoundList_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_614_clear)
HXLINE( 616)		if (this->zpp_inner->immutable) {
HXLINE( 616)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 618)		if (this->zpp_inner->reverse_flag) {
HXLINE( 619)			while(hx::IsNotNull( this->zpp_inner->inner->head )){
HXLINE( 619)				this->pop();
            			}
            		}
            		else {
HXLINE( 622)			while(hx::IsNotNull( this->zpp_inner->inner->head )){
HXLINE( 622)				this->shift();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,clear,(void))

bool CompoundList_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_633_empty)
HXDLIN( 633)		return hx::IsNull( this->zpp_inner->inner->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,empty,return )

 ::nape::phys::CompoundIterator CompoundList_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_647_iterator)
HXLINE( 648)		this->zpp_inner->valmod();
HXLINE( 651)		return ::nape::phys::CompoundIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,iterator,return )

 ::nape::phys::CompoundList CompoundList_obj::copy(hx::Null< bool >  __o_deep){
            		bool deep = __o_deep.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_662_copy)
HXLINE( 663)		 ::nape::phys::CompoundList ret =  ::nape::phys::CompoundList_obj::__alloc( HX_CTX );
HXLINE( 664)		{
HXLINE( 664)			this->zpp_inner->valmod();
HXDLIN( 664)			 ::nape::phys::CompoundIterator _g = ::nape::phys::CompoundIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 664)			while(true){
HXLINE( 664)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 664)				 ::nape::phys::CompoundList _this = _g->zpp_inner;
HXDLIN( 664)				_this->zpp_inner->valmod();
HXDLIN( 664)				if (_this->zpp_inner->zip_length) {
HXLINE( 664)					_this->zpp_inner->zip_length = false;
HXDLIN( 664)					_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            				}
HXDLIN( 664)				int length = _this->zpp_inner->user_length;
HXDLIN( 664)				_g->zpp_critical = true;
HXDLIN( 664)				bool _hx_tmp;
HXDLIN( 664)				if ((_g->zpp_i < length)) {
HXLINE( 664)					_hx_tmp = true;
            				}
            				else {
HXLINE( 664)					{
HXLINE( 664)						_g->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 664)						::nape::phys::CompoundIterator_obj::zpp_pool = _g;
HXDLIN( 664)						_g->zpp_inner = null();
            					}
HXDLIN( 664)					_hx_tmp = false;
            				}
HXDLIN( 664)				if (!(_hx_tmp)) {
HXLINE( 664)					goto _hx_goto_17;
            				}
HXDLIN( 664)				_g->zpp_critical = false;
HXDLIN( 664)				 ::nape::phys::Compound i = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 664)				 ::nape::phys::Compound _hx_tmp1;
HXDLIN( 664)				if (deep) {
HXLINE( 666)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Compound",8b,7f,81,5b)) + HX_(" is not a copyable type",89,ec,2e,8b)));
            				}
            				else {
HXLINE( 664)					_hx_tmp1 = i;
            				}
HXDLIN( 664)				ret->push(_hx_tmp1);
            			}
            			_hx_goto_17:;
            		}
HXLINE( 671)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,copy,return )

void CompoundList_obj::merge( ::nape::phys::CompoundList xs){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_684_merge)
HXLINE( 686)		if (hx::IsNull( xs )) {
HXLINE( 686)			HX_STACK_DO_THROW(HX_("Error: Cannot merge with null list",f4,38,16,fb));
            		}
HXLINE( 688)		{
HXLINE( 688)			xs->zpp_inner->valmod();
HXDLIN( 688)			 ::nape::phys::CompoundIterator _g = ::nape::phys::CompoundIterator_obj::get(xs);
HXDLIN( 688)			while(true){
HXLINE( 688)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 688)				 ::nape::phys::CompoundList _this = _g->zpp_inner;
HXDLIN( 688)				_this->zpp_inner->valmod();
HXDLIN( 688)				if (_this->zpp_inner->zip_length) {
HXLINE( 688)					_this->zpp_inner->zip_length = false;
HXDLIN( 688)					_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            				}
HXDLIN( 688)				int length = _this->zpp_inner->user_length;
HXDLIN( 688)				_g->zpp_critical = true;
HXDLIN( 688)				bool _hx_tmp;
HXDLIN( 688)				if ((_g->zpp_i < length)) {
HXLINE( 688)					_hx_tmp = true;
            				}
            				else {
HXLINE( 688)					{
HXLINE( 688)						_g->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 688)						::nape::phys::CompoundIterator_obj::zpp_pool = _g;
HXDLIN( 688)						_g->zpp_inner = null();
            					}
HXDLIN( 688)					_hx_tmp = false;
            				}
HXDLIN( 688)				if (!(_hx_tmp)) {
HXLINE( 688)					goto _hx_goto_19;
            				}
HXDLIN( 688)				_g->zpp_critical = false;
HXDLIN( 688)				 ::nape::phys::Compound x = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 689)				if (!(this->has(x))) {
HXLINE( 689)					if (this->zpp_inner->reverse_flag) {
HXLINE( 689)						this->push(x);
            					}
            					else {
HXLINE( 689)						this->unshift(x);
            					}
            				}
            			}
            			_hx_goto_19:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,merge,(void))

::String CompoundList_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_702_toString)
HXLINE( 703)		::String ret = HX_("[",5b,00,00,00);
HXLINE( 704)		bool fst = true;
HXLINE( 705)		{
HXLINE( 705)			this->zpp_inner->valmod();
HXDLIN( 705)			 ::nape::phys::CompoundIterator _g = ::nape::phys::CompoundIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 705)			while(true){
HXLINE( 705)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 705)				 ::nape::phys::CompoundList _this = _g->zpp_inner;
HXDLIN( 705)				_this->zpp_inner->valmod();
HXDLIN( 705)				if (_this->zpp_inner->zip_length) {
HXLINE( 705)					_this->zpp_inner->zip_length = false;
HXDLIN( 705)					_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            				}
HXDLIN( 705)				int length = _this->zpp_inner->user_length;
HXDLIN( 705)				_g->zpp_critical = true;
HXDLIN( 705)				bool _hx_tmp;
HXDLIN( 705)				if ((_g->zpp_i < length)) {
HXLINE( 705)					_hx_tmp = true;
            				}
            				else {
HXLINE( 705)					{
HXLINE( 705)						_g->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 705)						::nape::phys::CompoundIterator_obj::zpp_pool = _g;
HXDLIN( 705)						_g->zpp_inner = null();
            					}
HXDLIN( 705)					_hx_tmp = false;
            				}
HXDLIN( 705)				if (!(_hx_tmp)) {
HXLINE( 705)					goto _hx_goto_21;
            				}
HXDLIN( 705)				_g->zpp_critical = false;
HXDLIN( 705)				 ::nape::phys::Compound i = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 706)				if (!(fst)) {
HXLINE( 706)					ret = (ret + HX_(",",2c,00,00,00));
            				}
HXLINE( 707)				::String ret1;
HXDLIN( 707)				if (hx::IsNull( i )) {
HXLINE( 707)					ret1 = HX_("NULL",87,66,cf,33);
            				}
            				else {
HXLINE( 707)					ret1 = i->toString();
            				}
HXDLIN( 707)				ret = (ret + ret1);
HXLINE( 708)				fst = false;
            			}
            			_hx_goto_21:;
            		}
HXLINE( 710)		return (ret + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompoundList_obj,toString,return )

 ::nape::phys::CompoundList CompoundList_obj::foreach( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_732_foreach)
HXLINE( 734)		if (hx::IsNull( lambda )) {
HXLINE( 734)			HX_STACK_DO_THROW(HX_("Error: Cannot execute null on list elements",97,fe,61,00));
            		}
HXLINE( 736)		this->zpp_inner->valmod();
HXDLIN( 736)		 ::nape::phys::CompoundIterator it = ::nape::phys::CompoundIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXLINE( 737)		while(true){
HXLINE( 737)			it->zpp_inner->zpp_inner->valmod();
HXDLIN( 737)			 ::nape::phys::CompoundList _this = it->zpp_inner;
HXDLIN( 737)			_this->zpp_inner->valmod();
HXDLIN( 737)			if (_this->zpp_inner->zip_length) {
HXLINE( 737)				_this->zpp_inner->zip_length = false;
HXDLIN( 737)				_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            			}
HXDLIN( 737)			int length = _this->zpp_inner->user_length;
HXDLIN( 737)			it->zpp_critical = true;
HXDLIN( 737)			bool _hx_tmp;
HXDLIN( 737)			if ((it->zpp_i < length)) {
HXLINE( 737)				_hx_tmp = true;
            			}
            			else {
HXLINE( 737)				{
HXLINE( 737)					it->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 737)					::nape::phys::CompoundIterator_obj::zpp_pool = it;
HXDLIN( 737)					it->zpp_inner = null();
            				}
HXDLIN( 737)				_hx_tmp = false;
            			}
HXDLIN( 737)			if (!(_hx_tmp)) {
HXLINE( 737)				goto _hx_goto_23;
            			}
HXLINE( 738)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 739)				it->zpp_critical = false;
HXDLIN( 739)				lambda(it->zpp_inner->at(it->zpp_i++));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 742)					{
HXLINE( 743)						it->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXLINE( 744)						::nape::phys::CompoundIterator_obj::zpp_pool = it;
HXLINE( 745)						it->zpp_inner = null();
            					}
HXLINE( 747)					goto _hx_goto_23;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE( 750)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,foreach,return )

 ::nape::phys::CompoundList CompoundList_obj::filter( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_779_filter)
HXLINE( 781)		if (hx::IsNull( lambda )) {
HXLINE( 781)			HX_STACK_DO_THROW(HX_("Error: Cannot select elements of list with null",14,a8,f1,3b));
            		}
HXLINE( 783)		int i = 0;
HXLINE( 784)		while(true){
HXLINE( 784)			this->zpp_inner->valmod();
HXDLIN( 784)			if (this->zpp_inner->zip_length) {
HXLINE( 784)				this->zpp_inner->zip_length = false;
HXDLIN( 784)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 784)			if (!((i < this->zpp_inner->user_length))) {
HXLINE( 784)				goto _hx_goto_25;
            			}
HXLINE( 785)			 ::nape::phys::Compound x = this->at(i);
HXLINE( 786)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 787)				if (( (bool)(lambda(x)) )) {
HXLINE( 787)					i = (i + 1);
            				}
            				else {
HXLINE( 788)					this->remove(x);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 791)					goto _hx_goto_25;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_25:;
HXLINE( 794)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,filter,return )

 ::nape::phys::CompoundList CompoundList_obj::fromArray(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_3054e882b2f2b6b8_304_fromArray)
HXLINE( 306)		if (hx::IsNull( array )) {
HXLINE( 307)			HX_STACK_DO_THROW(HX_("Error: Cannot convert null Array to Nape list",35,f1,7a,22));
            		}
HXLINE( 310)		 ::nape::phys::CompoundList ret =  ::nape::phys::CompoundList_obj::__alloc( HX_CTX );
HXLINE( 311)		{
HXLINE( 311)			int _g = 0;
HXDLIN( 311)			while((_g < array->length)){
HXLINE( 311)				 ::nape::phys::Compound i = array->__get(_g).StaticCast<  ::nape::phys::Compound >();
HXDLIN( 311)				_g = (_g + 1);
HXLINE( 316)				ret->push(i);
            			}
            		}
HXLINE( 318)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CompoundList_obj,fromArray,return )


hx::ObjectPtr< CompoundList_obj > CompoundList_obj::__new() {
	hx::ObjectPtr< CompoundList_obj > __this = new CompoundList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< CompoundList_obj > CompoundList_obj::__alloc(hx::Ctx *_hx_ctx) {
	CompoundList_obj *__this = (CompoundList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompoundList_obj), true, "nape.phys.CompoundList"));
	*(void **)__this = CompoundList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CompoundList_obj::CompoundList_obj()
{
}

void CompoundList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CompoundList);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void CompoundList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val CompoundList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn() ); }
		if (HX_FIELD_EQ(inName,"foreach") ) { return hx::Val( foreach_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CompoundList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
	}
	return false;
}

hx::Val CompoundList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::util::ZPP_CompoundList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CompoundList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CompoundList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZPP_CompoundList */ ,(int)offsetof(CompoundList_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CompoundList_obj_sStaticStorageInfo = 0;
#endif

static ::String CompoundList_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_length",af,04,8f,8f),
	HX_("has",5a,3f,4f,00),
	HX_("at",f3,54,00,00),
	HX_("push",da,11,61,4a),
	HX_("unshift",89,e3,b3,78),
	HX_("pop",91,5d,55,00),
	HX_("shift",82,ec,22,7c),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("clear",8d,71,5b,48),
	HX_("empty",8d,3a,da,6f),
	HX_("iterator",ee,49,9a,93),
	HX_("copy",b5,bb,c4,41),
	HX_("merge",b8,a2,c6,05),
	HX_("toString",ac,d0,6e,38),
	HX_("foreach",8a,fd,e4,d9),
	HX_("filter",b8,1f,35,85),
	::String(null()) };

hx::Class CompoundList_obj::__mClass;

static ::String CompoundList_obj_sStaticFields[] = {
	HX_("fromArray",cf,57,18,da),
	::String(null())
};

void CompoundList_obj::__register()
{
	CompoundList_obj _hx_dummy;
	CompoundList_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.phys.CompoundList",9f,bc,45,b0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CompoundList_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CompoundList_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CompoundList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CompoundList_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompoundList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompoundList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
