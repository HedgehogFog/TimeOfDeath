// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_phys_BodyType
#include <hxinc/nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f46e3b8ef9a54803_183_new,"nape.phys.BodyType","new",0x00b540a4,"nape.phys.BodyType.new","nape/phys/BodyType.hx",183,0x8b4ddeec)
HX_LOCAL_STACK_FRAME(_hx_pos_f46e3b8ef9a54803_192_toString,"nape.phys.BodyType","toString",0x611be9e8,"nape.phys.BodyType.toString","nape/phys/BodyType.hx",192,0x8b4ddeec)
HX_LOCAL_STACK_FRAME(_hx_pos_f46e3b8ef9a54803_203_get_STATIC,"nape.phys.BodyType","get_STATIC",0x2a18d8b3,"nape.phys.BodyType.get_STATIC","nape/phys/BodyType.hx",203,0x8b4ddeec)
HX_LOCAL_STACK_FRAME(_hx_pos_f46e3b8ef9a54803_217_get_DYNAMIC,"nape.phys.BodyType","get_DYNAMIC",0xab5527ba,"nape.phys.BodyType.get_DYNAMIC","nape/phys/BodyType.hx",217,0x8b4ddeec)
HX_LOCAL_STACK_FRAME(_hx_pos_f46e3b8ef9a54803_232_get_KINEMATIC,"nape.phys.BodyType","get_KINEMATIC",0xce5daa00,"nape.phys.BodyType.get_KINEMATIC","nape/phys/BodyType.hx",232,0x8b4ddeec)
namespace nape{
namespace phys{

void BodyType_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f46e3b8ef9a54803_183_new)
HXDLIN( 183)		if (!(::zpp_nape::util::ZPP_Flags_obj::internal)) {
HXDLIN( 183)			HX_STACK_DO_THROW(((HX_("Error: Cannot instantiate ",c5,85,dd,08) + HX_("BodyType",9c,4e,de,a5)) + HX_(" derp!",a2,fd,96,a2)));
            		}
            	}

Dynamic BodyType_obj::__CreateEmpty() { return new BodyType_obj; }

void *BodyType_obj::_hx_vtable = 0;

Dynamic BodyType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BodyType_obj > _hx_result = new BodyType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BodyType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62d907ba;
}

::String BodyType_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_f46e3b8ef9a54803_192_toString)
HXDLIN( 192)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 192)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXDLIN( 192)			return HX_("STATIC",ae,88,7e,b8);
            		}
            		else {
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 193)				return HX_("DYNAMIC",5f,73,e9,b5);
            			}
            			else {
HXLINE( 194)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 194)				if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 194)					return HX_("KINEMATIC",e5,e8,57,df);
            				}
            				else {
HXLINE( 195)					return HX_("",00,00,00,00);
            				}
            			}
            		}
HXLINE( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyType_obj,toString,return )

 ::nape::phys::BodyType BodyType_obj::get_STATIC(){
            	HX_GC_STACKFRAME(&_hx_pos_f46e3b8ef9a54803_203_get_STATIC)
HXLINE( 204)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE( 205)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 206)			::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXLINE( 207)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 209)		return ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BodyType_obj,get_STATIC,return )

 ::nape::phys::BodyType BodyType_obj::get_DYNAMIC(){
            	HX_GC_STACKFRAME(&_hx_pos_f46e3b8ef9a54803_217_get_DYNAMIC)
HXLINE( 218)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 219)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 220)			::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXLINE( 221)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 223)		return ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BodyType_obj,get_DYNAMIC,return )

 ::nape::phys::BodyType BodyType_obj::get_KINEMATIC(){
            	HX_GC_STACKFRAME(&_hx_pos_f46e3b8ef9a54803_232_get_KINEMATIC)
HXLINE( 233)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 234)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 235)			::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXLINE( 236)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 238)		return ::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BodyType_obj,get_KINEMATIC,return )


hx::ObjectPtr< BodyType_obj > BodyType_obj::__new() {
	hx::ObjectPtr< BodyType_obj > __this = new BodyType_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BodyType_obj > BodyType_obj::__alloc(hx::Ctx *_hx_ctx) {
	BodyType_obj *__this = (BodyType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BodyType_obj), false, "nape.phys.BodyType"));
	*(void **)__this = BodyType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BodyType_obj::BodyType_obj()
{
}

hx::Val BodyType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BodyType_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"STATIC") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_STATIC() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"DYNAMIC") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_DYNAMIC() ); return true; } }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"KINEMATIC") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_KINEMATIC() ); return true; } }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_STATIC") ) { outValue = get_STATIC_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_DYNAMIC") ) { outValue = get_DYNAMIC_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_KINEMATIC") ) { outValue = get_KINEMATIC_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *BodyType_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BodyType_obj_sStaticStorageInfo = 0;
#endif

static ::String BodyType_obj_sMemberFields[] = {
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class BodyType_obj::__mClass;

static ::String BodyType_obj_sStaticFields[] = {
	HX_("get_STATIC",77,f8,05,a9),
	HX_("get_DYNAMIC",76,d3,e3,3b),
	HX_("get_KINEMATIC",bc,bc,bb,a0),
	::String(null())
};

void BodyType_obj::__register()
{
	BodyType_obj _hx_dummy;
	BodyType_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.phys.BodyType",b2,5e,9f,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BodyType_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BodyType_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BodyType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BodyType_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BodyType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BodyType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
