// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <hxinc/nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <hxinc/nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <hxinc/zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <hxinc/zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a044d6fed8503fe2_177_new,"nape.phys.Material","new",0x7495fc4f,"nape.phys.Material.new","nape/phys/Material.hx",177,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_195_get_userData,"nape.phys.Material","get_userData",0xb568a84f,"nape.phys.Material.get_userData","nape/phys/Material.hx",195,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_210_get_shapes,"nape.phys.Material","get_shapes",0x64f309ec,"nape.phys.Material.get_shapes","nape/phys/Material.hx",210,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_264_copy,"nape.phys.Material","copy",0x876900e6,"nape.phys.Material.copy","nape/phys/Material.hx",264,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_287_get_elasticity,"nape.phys.Material","get_elasticity",0x9bc8b833,"nape.phys.Material.get_elasticity","nape/phys/Material.hx",287,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_289_set_elasticity,"nape.phys.Material","set_elasticity",0xbbe8a0a7,"nape.phys.Material.set_elasticity","nape/phys/Material.hx",289,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_317_get_dynamicFriction,"nape.phys.Material","get_dynamicFriction",0x33bef49f,"nape.phys.Material.get_dynamicFriction","nape/phys/Material.hx",317,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_319_set_dynamicFriction,"nape.phys.Material","set_dynamicFriction",0x705be7ab,"nape.phys.Material.set_dynamicFriction","nape/phys/Material.hx",319,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_347_get_staticFriction,"nape.phys.Material","get_staticFriction",0x8f3ee982,"nape.phys.Material.get_staticFriction","nape/phys/Material.hx",347,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_349_set_staticFriction,"nape.phys.Material","set_staticFriction",0x6bee1bf6,"nape.phys.Material.set_staticFriction","nape/phys/Material.hx",349,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_375_get_density,"nape.phys.Material","get_density",0xcb15d2ee,"nape.phys.Material.get_density","nape/phys/Material.hx",375,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_377_set_density,"nape.phys.Material","set_density",0xd582d9fa,"nape.phys.Material.set_density","nape/phys/Material.hx",377,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_406_get_rollingFriction,"nape.phys.Material","get_rollingFriction",0x103578a5,"nape.phys.Material.get_rollingFriction","nape/phys/Material.hx",406,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_408_set_rollingFriction,"nape.phys.Material","set_rollingFriction",0x4cd26bb1,"nape.phys.Material.set_rollingFriction","nape/phys/Material.hx",408,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_426_toString,"nape.phys.Material","toString",0xfcbc025d,"nape.phys.Material.toString","nape/phys/Material.hx",426,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_435_wood,"nape.phys.Material","wood",0x94a1445e,"nape.phys.Material.wood","nape/phys/Material.hx",435,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_444_steel,"nape.phys.Material","steel",0x2e26b7ba,"nape.phys.Material.steel","nape/phys/Material.hx",444,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_453_ice,"nape.phys.Material","ice",0x74922f3a,"nape.phys.Material.ice","nape/phys/Material.hx",453,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_462_rubber,"nape.phys.Material","rubber",0x5ec752e1,"nape.phys.Material.rubber","nape/phys/Material.hx",462,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_471_glass,"nape.phys.Material","glass",0x400b0feb,"nape.phys.Material.glass","nape/phys/Material.hx",471,0x235b81a1)
HX_LOCAL_STACK_FRAME(_hx_pos_a044d6fed8503fe2_480_sand,"nape.phys.Material","sand",0x91f1c975,"nape.phys.Material.sand","nape/phys/Material.hx",480,0x235b81a1)
namespace nape{
namespace phys{

void Material_obj::__construct(hx::Null< Float >  __o_elasticity,hx::Null< Float >  __o_dynamicFriction,hx::Null< Float >  __o_staticFriction,hx::Null< Float >  __o_density,hx::Null< Float >  __o_rollingFriction){
            		Float elasticity = __o_elasticity.Default(((Float)0.0));
            		Float dynamicFriction = __o_dynamicFriction.Default(((Float)1.0));
            		Float staticFriction = __o_staticFriction.Default(((Float)2.0));
            		Float density = __o_density.Default(1);
            		Float rollingFriction = __o_rollingFriction.Default(((Float)0.001));
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_177_new)
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 231)		if (hx::IsNull( ::zpp_nape::phys::ZPP_Material_obj::zpp_pool )) {
HXLINE( 232)			this->zpp_inner =  ::zpp_nape::phys::ZPP_Material_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 238)			this->zpp_inner = ::zpp_nape::phys::ZPP_Material_obj::zpp_pool;
HXLINE( 239)			::zpp_nape::phys::ZPP_Material_obj::zpp_pool = this->zpp_inner->next;
HXLINE( 240)			this->zpp_inner->next = null();
            		}
HXLINE( 247)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 248)		if ((elasticity != this->zpp_inner->elasticity)) {
HXLINE( 248)			if ((elasticity != elasticity)) {
HXLINE( 248)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("elasticity",79,23,b4,4d)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 248)			this->zpp_inner->elasticity = (elasticity / ( (Float)(1) ));
HXDLIN( 248)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 249)		if ((dynamicFriction != this->zpp_inner->dynamicFriction)) {
HXLINE( 249)			if ((dynamicFriction != dynamicFriction)) {
HXLINE( 249)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("dynamicFriction",99,eb,8a,da)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 249)			if ((dynamicFriction < 0)) {
HXLINE( 249)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("dynamicFriction",99,eb,8a,da)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXDLIN( 249)			this->zpp_inner->dynamicFriction = (dynamicFriction / ( (Float)(1) ));
HXDLIN( 249)			this->zpp_inner->invalidate(((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ANGDRAG) | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 250)		if ((staticFriction != this->zpp_inner->staticFriction)) {
HXLINE( 250)			if ((staticFriction != staticFriction)) {
HXLINE( 250)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("staticFriction",c8,6f,c8,40)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 250)			if ((staticFriction < 0)) {
HXLINE( 250)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("staticFriction",c8,6f,c8,40)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXDLIN( 250)			this->zpp_inner->staticFriction = (staticFriction / ( (Float)(1) ));
HXDLIN( 250)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 251)		if ((density != (this->zpp_inner->density * ( (Float)(1000) )))) {
HXLINE( 251)			if ((density != density)) {
HXLINE( 251)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("density",e8,3f,d5,42)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 251)			if ((density < 0)) {
HXLINE( 251)				HX_STACK_DO_THROW(HX_("Error: Material::density must be positive",6c,bf,6a,a5));
            			}
HXDLIN( 251)			if ((density < 0)) {
HXLINE( 251)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("density",e8,3f,d5,42)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXDLIN( 251)			this->zpp_inner->density = (density / ( (Float)(1000) ));
HXDLIN( 251)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::PROPS));
            		}
HXLINE( 252)		if ((rollingFriction != this->zpp_inner->rollingFriction)) {
HXLINE( 252)			if ((rollingFriction != rollingFriction)) {
HXLINE( 252)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("rollingFriction",9f,6f,01,b7)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 252)			if ((rollingFriction < 0)) {
HXLINE( 252)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("rollingFriction",9f,6f,01,b7)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXDLIN( 252)			this->zpp_inner->rollingFriction = (rollingFriction / ( (Float)(1) ));
HXDLIN( 252)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
            	}

Dynamic Material_obj::__CreateEmpty() { return new Material_obj; }

void *Material_obj::_hx_vtable = 0;

Dynamic Material_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Material_obj > _hx_result = new Material_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Material_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x205dc781;
}

 ::Dynamic Material_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_195_get_userData)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_userData,return )

 ::nape::shape::ShapeList Material_obj::get_shapes(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_210_get_shapes)
HXLINE( 211)		if (hx::IsNull( this->zpp_inner->wrap_shapes )) {
HXLINE( 211)			this->zpp_inner->wrap_shapes = ::zpp_nape::util::ZPP_ShapeList_obj::get(this->zpp_inner->shapes,true);
            		}
HXLINE( 212)		return this->zpp_inner->wrap_shapes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_shapes,return )

 ::nape::phys::Material Material_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_264_copy)
HXLINE( 265)		 ::nape::phys::Material ret =  ::nape::phys::Material_obj::__alloc( HX_CTX ,this->zpp_inner->elasticity,this->zpp_inner->dynamicFriction,this->zpp_inner->staticFriction,(this->zpp_inner->density * ( (Float)(1000) )),this->zpp_inner->rollingFriction);
HXLINE( 266)		if (hx::IsNotNull( this->zpp_inner->userData )) {
HXLINE( 266)			ret->zpp_inner->userData = ::Reflect_obj::copy(this->zpp_inner->userData);
            		}
HXLINE( 267)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,copy,return )

Float Material_obj::get_elasticity(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_287_get_elasticity)
HXDLIN( 287)		return this->zpp_inner->elasticity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_elasticity,return )

Float Material_obj::set_elasticity(Float elasticity){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_289_set_elasticity)
HXLINE( 291)		if ((elasticity != this->zpp_inner->elasticity)) {
HXLINE( 293)			if ((elasticity != elasticity)) {
HXLINE( 293)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("elasticity",79,23,b4,4d)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 297)			this->zpp_inner->elasticity = (elasticity / ( (Float)(1) ));
HXLINE( 298)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 301)		return this->zpp_inner->elasticity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,set_elasticity,return )

Float Material_obj::get_dynamicFriction(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_317_get_dynamicFriction)
HXDLIN( 317)		return this->zpp_inner->dynamicFriction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_dynamicFriction,return )

Float Material_obj::set_dynamicFriction(Float dynamicFriction){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_319_set_dynamicFriction)
HXLINE( 321)		if ((dynamicFriction != this->zpp_inner->dynamicFriction)) {
HXLINE( 323)			if ((dynamicFriction != dynamicFriction)) {
HXLINE( 323)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("dynamicFriction",99,eb,8a,da)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 325)			if ((dynamicFriction < 0)) {
HXLINE( 325)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("dynamicFriction",99,eb,8a,da)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXLINE( 327)			this->zpp_inner->dynamicFriction = (dynamicFriction / ( (Float)(1) ));
HXLINE( 328)			this->zpp_inner->invalidate(((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ANGDRAG) | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 331)		return this->zpp_inner->dynamicFriction;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,set_dynamicFriction,return )

Float Material_obj::get_staticFriction(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_347_get_staticFriction)
HXDLIN( 347)		return this->zpp_inner->staticFriction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_staticFriction,return )

Float Material_obj::set_staticFriction(Float staticFriction){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_349_set_staticFriction)
HXLINE( 351)		if ((staticFriction != this->zpp_inner->staticFriction)) {
HXLINE( 353)			if ((staticFriction != staticFriction)) {
HXLINE( 353)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("staticFriction",c8,6f,c8,40)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 355)			if ((staticFriction < 0)) {
HXLINE( 355)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("staticFriction",c8,6f,c8,40)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXLINE( 357)			this->zpp_inner->staticFriction = (staticFriction / ( (Float)(1) ));
HXLINE( 358)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 361)		return this->zpp_inner->staticFriction;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,set_staticFriction,return )

Float Material_obj::get_density(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_375_get_density)
HXDLIN( 375)		return (this->zpp_inner->density * ( (Float)(1000) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_density,return )

Float Material_obj::set_density(Float density){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_377_set_density)
HXLINE( 379)		if ((density != (this->zpp_inner->density * ( (Float)(1000) )))) {
HXLINE( 381)			if ((density != density)) {
HXLINE( 381)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("density",e8,3f,d5,42)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 382)			if ((density < 0)) {
HXLINE( 382)				HX_STACK_DO_THROW(HX_("Error: Material::density must be positive",6c,bf,6a,a5));
            			}
HXLINE( 383)			if ((density < 0)) {
HXLINE( 383)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("density",e8,3f,d5,42)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXLINE( 385)			this->zpp_inner->density = (density / ( (Float)(1000) ));
HXLINE( 386)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::PROPS));
            		}
HXLINE( 389)		return (this->zpp_inner->density * ( (Float)(1000) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,set_density,return )

Float Material_obj::get_rollingFriction(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_406_get_rollingFriction)
HXDLIN( 406)		return this->zpp_inner->rollingFriction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,get_rollingFriction,return )

Float Material_obj::set_rollingFriction(Float rollingFriction){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_408_set_rollingFriction)
HXLINE( 410)		if ((rollingFriction != this->zpp_inner->rollingFriction)) {
HXLINE( 412)			if ((rollingFriction != rollingFriction)) {
HXLINE( 412)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("rollingFriction",9f,6f,01,b7)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 414)			if ((rollingFriction < 0)) {
HXLINE( 414)				HX_STACK_DO_THROW(((HX_("Error: Material::",15,a1,26,32) + HX_("rollingFriction",9f,6f,01,b7)) + HX_(" cannot be negative",f5,23,be,15)));
            			}
HXLINE( 416)			this->zpp_inner->rollingFriction = (rollingFriction / ( (Float)(1) ));
HXLINE( 417)			this->zpp_inner->invalidate((::zpp_nape::phys::ZPP_Material_obj::WAKE | ::zpp_nape::phys::ZPP_Material_obj::ARBITERS));
            		}
HXLINE( 420)		return this->zpp_inner->rollingFriction;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,set_rollingFriction,return )

::String Material_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a044d6fed8503fe2_426_toString)
HXDLIN( 426)		return ((((((((((HX_("{ elasticity: ",24,a5,f5,7e) + this->zpp_inner->elasticity) + HX_(" dynamicFriction: ",5f,d2,4d,10)) + this->zpp_inner->dynamicFriction) + HX_(" staticFriction: ",8e,64,14,b6)) + this->zpp_inner->staticFriction) + HX_(" density: ",6e,38,e2,9b)) + (this->zpp_inner->density * ( (Float)(1000) ))) + HX_(" rollingFriction: ",e5,e3,71,da)) + this->zpp_inner->rollingFriction) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,toString,return )

 ::nape::phys::Material Material_obj::wood(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_435_wood)
HXDLIN( 435)		return  ::nape::phys::Material_obj::__alloc( HX_CTX ,((Float)0.4),((Float)0.2),((Float)0.38),((Float)0.7),((Float)0.005));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Material_obj,wood,return )

 ::nape::phys::Material Material_obj::steel(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_444_steel)
HXDLIN( 444)		return  ::nape::phys::Material_obj::__alloc( HX_CTX ,((Float)0.2),((Float)0.57),((Float)0.74),((Float)7.8),((Float)0.001));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Material_obj,steel,return )

 ::nape::phys::Material Material_obj::ice(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_453_ice)
HXDLIN( 453)		return  ::nape::phys::Material_obj::__alloc( HX_CTX ,((Float)0.3),((Float)0.03),((Float)0.1),((Float)0.9),((Float)0.0001));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Material_obj,ice,return )

 ::nape::phys::Material Material_obj::rubber(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_462_rubber)
HXDLIN( 462)		return  ::nape::phys::Material_obj::__alloc( HX_CTX ,((Float)0.8),((Float)1.0),((Float)1.4),((Float)1.5),((Float)0.01));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Material_obj,rubber,return )

 ::nape::phys::Material Material_obj::glass(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_471_glass)
HXDLIN( 471)		return  ::nape::phys::Material_obj::__alloc( HX_CTX ,((Float)0.4),((Float)0.4),((Float)0.94),((Float)2.6),((Float)0.002));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Material_obj,glass,return )

 ::nape::phys::Material Material_obj::sand(){
            	HX_GC_STACKFRAME(&_hx_pos_a044d6fed8503fe2_480_sand)
HXDLIN( 480)		return  ::nape::phys::Material_obj::__alloc( HX_CTX ,((Float)-1.0),((Float)0.45),((Float)0.6),((Float)1.6),((Float)16.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Material_obj,sand,return )


hx::ObjectPtr< Material_obj > Material_obj::__new(hx::Null< Float >  __o_elasticity,hx::Null< Float >  __o_dynamicFriction,hx::Null< Float >  __o_staticFriction,hx::Null< Float >  __o_density,hx::Null< Float >  __o_rollingFriction) {
	hx::ObjectPtr< Material_obj > __this = new Material_obj();
	__this->__construct(__o_elasticity,__o_dynamicFriction,__o_staticFriction,__o_density,__o_rollingFriction);
	return __this;
}

hx::ObjectPtr< Material_obj > Material_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_elasticity,hx::Null< Float >  __o_dynamicFriction,hx::Null< Float >  __o_staticFriction,hx::Null< Float >  __o_density,hx::Null< Float >  __o_rollingFriction) {
	Material_obj *__this = (Material_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Material_obj), true, "nape.phys.Material"));
	*(void **)__this = Material_obj::_hx_vtable;
	__this->__construct(__o_elasticity,__o_dynamicFriction,__o_staticFriction,__o_density,__o_rollingFriction);
	return __this;
}

Material_obj::Material_obj()
{
}

void Material_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Material);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Material_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Material_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shapes() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_density() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_userData() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_shapes") ) { return hx::Val( get_shapes_dyn() ); }
		if (HX_FIELD_EQ(inName,"elasticity") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_elasticity() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_density") ) { return hx::Val( get_density_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_density") ) { return hx::Val( set_density_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_elasticity") ) { return hx::Val( get_elasticity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_elasticity") ) { return hx::Val( set_elasticity_dyn() ); }
		if (HX_FIELD_EQ(inName,"staticFriction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_staticFriction() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dynamicFriction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dynamicFriction() ); }
		if (HX_FIELD_EQ(inName,"rollingFriction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rollingFriction() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_staticFriction") ) { return hx::Val( get_staticFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_staticFriction") ) { return hx::Val( set_staticFriction_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_dynamicFriction") ) { return hx::Val( get_dynamicFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_dynamicFriction") ) { return hx::Val( set_dynamicFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rollingFriction") ) { return hx::Val( get_rollingFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rollingFriction") ) { return hx::Val( set_rollingFriction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Material_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ice") ) { outValue = ice_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"wood") ) { outValue = wood_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sand") ) { outValue = sand_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"steel") ) { outValue = steel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"glass") ) { outValue = glass_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rubber") ) { outValue = rubber_dyn(); return true; }
	}
	return false;
}

hx::Val Material_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_density(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::phys::ZPP_Material >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_elasticity(inValue.Cast< Float >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"staticFriction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_staticFriction(inValue.Cast< Float >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dynamicFriction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dynamicFriction(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"rollingFriction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rollingFriction(inValue.Cast< Float >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Material_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("shapes",32,da,29,1d));
	outFields->push(HX_("elasticity",79,23,b4,4d));
	outFields->push(HX_("dynamicFriction",99,eb,8a,da));
	outFields->push(HX_("staticFriction",c8,6f,c8,40));
	outFields->push(HX_("density",e8,3f,d5,42));
	outFields->push(HX_("rollingFriction",9f,6f,01,b7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Material_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Material */ ,(int)offsetof(Material_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Material_obj_sStaticStorageInfo = 0;
#endif

static ::String Material_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_userData",1e,4a,42,ba),
	HX_("get_shapes",fb,49,b1,0d),
	HX_("copy",b5,bb,c4,41),
	HX_("get_elasticity",c2,ab,a9,c3),
	HX_("set_elasticity",36,94,c9,e3),
	HX_("get_dynamicFriction",b0,ba,95,65),
	HX_("set_dynamicFriction",bc,ad,32,a2),
	HX_("get_staticFriction",91,50,62,dc),
	HX_("set_staticFriction",05,83,11,b9),
	HX_("get_density",ff,9f,cf,c8),
	HX_("set_density",0b,a7,3c,d3),
	HX_("get_rollingFriction",b6,3e,0c,42),
	HX_("set_rollingFriction",c2,31,a9,7e),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Material_obj::__mClass;

static ::String Material_obj_sStaticFields[] = {
	HX_("wood",2d,ff,fc,4e),
	HX_("steel",0b,72,0e,84),
	HX_("ice",4b,03,50,00),
	HX_("rubber",70,9f,a2,33),
	HX_("glass",3c,ca,f2,95),
	HX_("sand",44,84,4d,4c),
	::String(null())
};

void Material_obj::__register()
{
	Material_obj _hx_dummy;
	Material_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.phys.Material",dd,28,18,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Material_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Material_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Material_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Material_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Material_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Material_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
