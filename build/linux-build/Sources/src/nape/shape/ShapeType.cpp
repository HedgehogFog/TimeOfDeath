// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_shape_ShapeType
#include <hxinc/nape/shape/ShapeType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_72b06e8ee91451b6_183_new,"nape.shape.ShapeType","new",0xb55a943a,"nape.shape.ShapeType.new","nape/shape/ShapeType.hx",183,0xe7bde238)
HX_LOCAL_STACK_FRAME(_hx_pos_72b06e8ee91451b6_192_toString,"nape.shape.ShapeType","toString",0x4ed1d692,"nape.shape.ShapeType.toString","nape/shape/ShapeType.hx",192,0xe7bde238)
HX_LOCAL_STACK_FRAME(_hx_pos_72b06e8ee91451b6_201_get_CIRCLE,"nape.shape.ShapeType","get_CIRCLE",0xb2b4593f,"nape.shape.ShapeType.get_CIRCLE","nape/shape/ShapeType.hx",201,0xe7bde238)
HX_LOCAL_STACK_FRAME(_hx_pos_72b06e8ee91451b6_214_get_POLYGON,"nape.shape.ShapeType","get_POLYGON",0xc7f4644b,"nape.shape.ShapeType.get_POLYGON","nape/shape/ShapeType.hx",214,0xe7bde238)
namespace nape{
namespace shape{

void ShapeType_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_72b06e8ee91451b6_183_new)
HXDLIN( 183)		if (!(::zpp_nape::util::ZPP_Flags_obj::internal)) {
HXDLIN( 183)			HX_STACK_DO_THROW(((HX_("Error: Cannot instantiate ",c5,85,dd,08) + HX_("ShapeType",5b,86,b8,89)) + HX_(" derp!",a2,fd,96,a2)));
            		}
            	}

Dynamic ShapeType_obj::__CreateEmpty() { return new ShapeType_obj; }

void *ShapeType_obj::_hx_vtable = 0;

Dynamic ShapeType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShapeType_obj > _hx_result = new ShapeType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ShapeType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51e99bc2;
}

::String ShapeType_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_72b06e8ee91451b6_192_toString)
HXDLIN( 192)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE )) {
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE =  ::nape::shape::ShapeType_obj::__alloc( HX_CTX );
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 192)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE )) {
HXDLIN( 192)			return HX_("CIRCLE",10,1e,90,08);
            		}
            		else {
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON =  ::nape::shape::ShapeType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON )) {
HXLINE( 193)				return HX_("POLYGON",5a,d6,64,92);
            			}
            			else {
HXLINE( 194)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ShapeType_obj,toString,return )

 ::nape::shape::ShapeType ShapeType_obj::get_CIRCLE(){
            	HX_GC_STACKFRAME(&_hx_pos_72b06e8ee91451b6_201_get_CIRCLE)
HXLINE( 202)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE )) {
HXLINE( 203)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 204)			::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE =  ::nape::shape::ShapeType_obj::__alloc( HX_CTX );
HXLINE( 205)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 207)		return ::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ShapeType_obj,get_CIRCLE,return )

 ::nape::shape::ShapeType ShapeType_obj::get_POLYGON(){
            	HX_GC_STACKFRAME(&_hx_pos_72b06e8ee91451b6_214_get_POLYGON)
HXLINE( 215)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON )) {
HXLINE( 216)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 217)			::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON =  ::nape::shape::ShapeType_obj::__alloc( HX_CTX );
HXLINE( 218)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 220)		return ::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ShapeType_obj,get_POLYGON,return )


hx::ObjectPtr< ShapeType_obj > ShapeType_obj::__new() {
	hx::ObjectPtr< ShapeType_obj > __this = new ShapeType_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ShapeType_obj > ShapeType_obj::__alloc(hx::Ctx *_hx_ctx) {
	ShapeType_obj *__this = (ShapeType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShapeType_obj), false, "nape.shape.ShapeType"));
	*(void **)__this = ShapeType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ShapeType_obj::ShapeType_obj()
{
}

hx::Val ShapeType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ShapeType_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"CIRCLE") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_CIRCLE() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"POLYGON") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_POLYGON() ); return true; } }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_CIRCLE") ) { outValue = get_CIRCLE_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_POLYGON") ) { outValue = get_POLYGON_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ShapeType_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ShapeType_obj_sStaticStorageInfo = 0;
#endif

static ::String ShapeType_obj_sMemberFields[] = {
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class ShapeType_obj::__mClass;

static ::String ShapeType_obj_sStaticFields[] = {
	HX_("get_CIRCLE",d9,8d,17,f9),
	HX_("get_POLYGON",71,36,5f,18),
	::String(null())
};

void ShapeType_obj::__register()
{
	ShapeType_obj _hx_dummy;
	ShapeType_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.shape.ShapeType",48,af,c1,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ShapeType_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ShapeType_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShapeType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShapeType_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShapeType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShapeType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace shape
