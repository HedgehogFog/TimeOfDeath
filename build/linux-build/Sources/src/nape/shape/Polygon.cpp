// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbType
#include <hxinc/nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <hxinc/nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPoly
#include <hxinc/nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2Iterator
#include <hxinc/nape/geom/Vec2Iterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <hxinc/nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <hxinc/nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_EdgeList
#include <hxinc/nape/shape/EdgeList.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <hxinc/nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <hxinc/nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <hxinc/zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <hxinc/zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <hxinc/zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <hxinc/zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Vec2
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Vec2List
#include <hxinc/zpp_nape/util/ZPP_Vec2List.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_179_new,"nape.shape.Polygon","new",0x3561fe79,"nape.shape.Polygon.new","nape/shape/Polygon.hx",179,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_279_get_localVerts,"nape.shape.Polygon","get_localVerts",0x9d615807,"nape.shape.Polygon.get_localVerts","nape/shape/Polygon.hx",279,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_293_get_worldVerts,"nape.shape.Polygon","get_worldVerts",0xd11a65c0,"nape.shape.Polygon.get_worldVerts","nape/shape/Polygon.hx",293,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_304_get_edges,"nape.shape.Polygon","get_edges",0x0c0710c6,"nape.shape.Polygon.get_edges","nape/shape/Polygon.hx",304,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_313_validity,"nape.shape.Polygon","validity",0x26a0f9f9,"nape.shape.Polygon.validity","nape/shape/Polygon.hx",313,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_209_rect,"nape.shape.Polygon","rect",0x830174eb,"nape.shape.Polygon.rect","nape/shape/Polygon.hx",209,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_231_box,"nape.shape.Polygon","box",0x3558ec24,"nape.shape.Polygon.box","nape/shape/Polygon.hx",231,0x3fc17059)
HX_LOCAL_STACK_FRAME(_hx_pos_4527d7a939562085_257_regular,"nape.shape.Polygon","regular",0x2a4a00f5,"nape.shape.Polygon.regular","nape/shape/Polygon.hx",257,0x3fc17059)
namespace nape{
namespace shape{

void Polygon_obj::__construct( ::Dynamic localVerts, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_4527d7a939562085_179_new)
HXLINE( 183)		this->zpp_inner_zn = null();
HXLINE( 333)		::nape::shape::Shape_obj::zpp_internalAlloc = true;
HXLINE( 334)		super::__construct();
HXLINE( 335)		::nape::shape::Shape_obj::zpp_internalAlloc = false;
HXLINE( 341)		if (hx::IsNull( localVerts )) {
HXLINE( 341)			HX_STACK_DO_THROW(HX_("Error: localVerts cannot be null",a2,aa,69,91));
            		}
HXLINE( 343)		this->zpp_inner_zn =  ::zpp_nape::shape::ZPP_Polygon_obj::__alloc( HX_CTX );
HXLINE( 344)		this->zpp_inner_zn->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 345)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 346)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 347)		this->zpp_inner_i = this->zpp_inner;
HXLINE( 348)		this->zpp_inner_i->outer_i = hx::ObjectPtr<OBJ_>(this);
HXLINE( 350)		if (::Std_obj::is(localVerts,hx::ArrayBase::__mClass)) {
HXLINE( 351)			::cpp::VirtualArray lv = ( (::cpp::VirtualArray)(localVerts) );
HXLINE( 352)			{
HXLINE( 352)				int _g = 0;
HXDLIN( 352)				while((_g < lv->get_length())){
HXLINE( 352)					 ::Dynamic vite = lv->__get(_g);
HXDLIN( 352)					_g = (_g + 1);
HXLINE( 354)					if (hx::IsNull( vite )) {
HXLINE( 354)						HX_STACK_DO_THROW(HX_("Error: Array<Vec2> contains null objects",eb,2d,26,50));
            					}
HXLINE( 357)					if (!(::Std_obj::is(vite,hx::ClassOf< ::nape::geom::Vec2 >()))) {
HXLINE( 357)						HX_STACK_DO_THROW(HX_("Error: Array<Vec2> contains non Vec2 objects",d5,3c,56,e0));
            					}
HXLINE( 359)					 ::nape::geom::Vec2 x = ( ( ::nape::geom::Vec2)(vite) );
HXLINE( 362)					bool _hx_tmp;
HXDLIN( 362)					if (hx::IsNotNull( x )) {
HXLINE( 362)						_hx_tmp = x->zpp_disp;
            					}
            					else {
HXLINE( 362)						_hx_tmp = false;
            					}
HXDLIN( 362)					if (_hx_tmp) {
HXLINE( 362)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXLINE( 365)					if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 365)						this->zpp_inner_zn->getlverts();
            					}
HXDLIN( 365)					 ::nape::geom::Vec2List _hx_tmp1 = this->zpp_inner_zn->wrap_lverts;
HXDLIN( 365)					bool _hx_tmp2;
HXDLIN( 365)					if (hx::IsNotNull( x )) {
HXLINE( 365)						_hx_tmp2 = x->zpp_disp;
            					}
            					else {
HXLINE( 365)						_hx_tmp2 = false;
            					}
HXDLIN( 365)					if (_hx_tmp2) {
HXLINE( 365)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 365)					if (x->zpp_disp) {
HXLINE( 365)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 365)					{
HXLINE( 365)						 ::zpp_nape::geom::ZPP_Vec2 _this = x->zpp_inner;
HXDLIN( 365)						if (hx::IsNotNull( _this->_validate )) {
HXLINE( 365)							_this->_validate();
            						}
            					}
HXDLIN( 365)					Float x1 = x->zpp_inner->x;
HXDLIN( 365)					if (x->zpp_disp) {
HXLINE( 365)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 365)					{
HXLINE( 365)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = x->zpp_inner;
HXDLIN( 365)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 365)							_this1->_validate();
            						}
            					}
HXDLIN( 365)					Float y = x->zpp_inner->y;
HXDLIN( 365)					bool _hx_tmp3;
HXDLIN( 365)					if ((x1 == x1)) {
HXLINE( 365)						_hx_tmp3 = (y != y);
            					}
            					else {
HXLINE( 365)						_hx_tmp3 = true;
            					}
HXDLIN( 365)					if (_hx_tmp3) {
HXLINE( 365)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 365)					 ::nape::geom::Vec2 ret;
HXDLIN( 365)					if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 365)						ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            					}
            					else {
HXLINE( 365)						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 365)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 365)						ret->zpp_pool = null();
HXDLIN( 365)						ret->zpp_disp = false;
HXDLIN( 365)						if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 365)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            						}
            					}
HXDLIN( 365)					if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 365)						 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 365)						{
HXLINE( 365)							if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 365)								ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 365)								ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 365)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 365)								ret1->next = null();
            							}
HXDLIN( 365)							ret1->weak = false;
            						}
HXDLIN( 365)						ret1->_immutable = false;
HXDLIN( 365)						{
HXLINE( 365)							ret1->x = x1;
HXDLIN( 365)							ret1->y = y;
            						}
HXDLIN( 365)						ret->zpp_inner = ret1;
HXDLIN( 365)						ret->zpp_inner->outer = ret;
            					}
            					else {
HXLINE( 365)						bool _hx_tmp4;
HXDLIN( 365)						if (hx::IsNotNull( ret )) {
HXLINE( 365)							_hx_tmp4 = ret->zpp_disp;
            						}
            						else {
HXLINE( 365)							_hx_tmp4 = false;
            						}
HXDLIN( 365)						if (_hx_tmp4) {
HXLINE( 365)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 365)						{
HXLINE( 365)							 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 365)							if (_this2->_immutable) {
HXLINE( 365)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 365)							if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 365)								_this2->_isimmutable();
            							}
            						}
HXDLIN( 365)						bool _hx_tmp5;
HXDLIN( 365)						if ((x1 == x1)) {
HXLINE( 365)							_hx_tmp5 = (y != y);
            						}
            						else {
HXLINE( 365)							_hx_tmp5 = true;
            						}
HXDLIN( 365)						if (_hx_tmp5) {
HXLINE( 365)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN( 365)						bool _hx_tmp6;
HXDLIN( 365)						bool _hx_tmp7;
HXDLIN( 365)						if (hx::IsNotNull( ret )) {
HXLINE( 365)							_hx_tmp7 = ret->zpp_disp;
            						}
            						else {
HXLINE( 365)							_hx_tmp7 = false;
            						}
HXDLIN( 365)						if (_hx_tmp7) {
HXLINE( 365)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 365)						{
HXLINE( 365)							 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 365)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 365)								_this3->_validate();
            							}
            						}
HXDLIN( 365)						if ((ret->zpp_inner->x == x1)) {
HXLINE( 365)							bool _hx_tmp8;
HXDLIN( 365)							if (hx::IsNotNull( ret )) {
HXLINE( 365)								_hx_tmp8 = ret->zpp_disp;
            							}
            							else {
HXLINE( 365)								_hx_tmp8 = false;
            							}
HXDLIN( 365)							if (_hx_tmp8) {
HXLINE( 365)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 365)							{
HXLINE( 365)								 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN( 365)								if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 365)									_this4->_validate();
            								}
            							}
HXDLIN( 365)							_hx_tmp6 = (ret->zpp_inner->y == y);
            						}
            						else {
HXLINE( 365)							_hx_tmp6 = false;
            						}
HXDLIN( 365)						if (!(_hx_tmp6)) {
HXLINE( 365)							{
HXLINE( 365)								ret->zpp_inner->x = x1;
HXDLIN( 365)								ret->zpp_inner->y = y;
            							}
HXDLIN( 365)							{
HXLINE( 365)								 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN( 365)								if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 365)									_this5->_invalidate(_this5);
            								}
            							}
            						}
            					}
HXDLIN( 365)					ret->zpp_inner->weak = false;
HXDLIN( 365)					_hx_tmp1->push(ret);
            				}
            			}
            		}
            		else {
HXLINE( 384)			if (::Std_obj::is(localVerts,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE( 385)				 ::nape::geom::Vec2List lv1 = ( ( ::nape::geom::Vec2List)(localVerts) );
HXLINE( 386)				{
HXLINE( 386)					 ::nape::geom::Vec2Iterator _g1 = lv1->iterator();
HXDLIN( 386)					while(true){
HXLINE( 386)						_g1->zpp_inner->zpp_inner->valmod();
HXDLIN( 386)						int length = _g1->zpp_inner->zpp_gl();
HXDLIN( 386)						_g1->zpp_critical = true;
HXDLIN( 386)						bool _hx_tmp9;
HXDLIN( 386)						if ((_g1->zpp_i < length)) {
HXLINE( 386)							_hx_tmp9 = true;
            						}
            						else {
HXLINE( 386)							{
HXLINE( 386)								_g1->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN( 386)								::nape::geom::Vec2Iterator_obj::zpp_pool = _g1;
HXDLIN( 386)								_g1->zpp_inner = null();
            							}
HXDLIN( 386)							_hx_tmp9 = false;
            						}
HXDLIN( 386)						if (!(_hx_tmp9)) {
HXLINE( 386)							goto _hx_goto_1;
            						}
HXDLIN( 386)						_g1->zpp_critical = false;
HXDLIN( 386)						 ::nape::geom::Vec2 x2 = _g1->zpp_inner->at(_g1->zpp_i++);
HXLINE( 388)						if (hx::IsNull( x2 )) {
HXLINE( 388)							HX_STACK_DO_THROW(HX_("Error: Vec2List contains null objects",86,c5,d1,3e));
            						}
HXLINE( 392)						bool _hx_tmp10;
HXDLIN( 392)						if (hx::IsNotNull( x2 )) {
HXLINE( 392)							_hx_tmp10 = x2->zpp_disp;
            						}
            						else {
HXLINE( 392)							_hx_tmp10 = false;
            						}
HXDLIN( 392)						if (_hx_tmp10) {
HXLINE( 392)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXLINE( 395)						if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 395)							this->zpp_inner_zn->getlverts();
            						}
HXDLIN( 395)						 ::nape::geom::Vec2List _hx_tmp11 = this->zpp_inner_zn->wrap_lverts;
HXDLIN( 395)						bool _hx_tmp12;
HXDLIN( 395)						if (hx::IsNotNull( x2 )) {
HXLINE( 395)							_hx_tmp12 = x2->zpp_disp;
            						}
            						else {
HXLINE( 395)							_hx_tmp12 = false;
            						}
HXDLIN( 395)						if (_hx_tmp12) {
HXLINE( 395)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 395)						if (x2->zpp_disp) {
HXLINE( 395)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 395)						{
HXLINE( 395)							 ::zpp_nape::geom::ZPP_Vec2 _this6 = x2->zpp_inner;
HXDLIN( 395)							if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 395)								_this6->_validate();
            							}
            						}
HXDLIN( 395)						Float x3 = x2->zpp_inner->x;
HXDLIN( 395)						if (x2->zpp_disp) {
HXLINE( 395)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 395)						{
HXLINE( 395)							 ::zpp_nape::geom::ZPP_Vec2 _this7 = x2->zpp_inner;
HXDLIN( 395)							if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 395)								_this7->_validate();
            							}
            						}
HXDLIN( 395)						Float y1 = x2->zpp_inner->y;
HXDLIN( 395)						bool _hx_tmp13;
HXDLIN( 395)						if ((x3 == x3)) {
HXLINE( 395)							_hx_tmp13 = (y1 != y1);
            						}
            						else {
HXLINE( 395)							_hx_tmp13 = true;
            						}
HXDLIN( 395)						if (_hx_tmp13) {
HXLINE( 395)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN( 395)						 ::nape::geom::Vec2 ret2;
HXDLIN( 395)						if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 395)							ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            						}
            						else {
HXLINE( 395)							ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 395)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 395)							ret2->zpp_pool = null();
HXDLIN( 395)							ret2->zpp_disp = false;
HXDLIN( 395)							if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 395)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            							}
            						}
HXDLIN( 395)						if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 395)							 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN( 395)							{
HXLINE( 395)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 395)									ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 395)									ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 395)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 395)									ret3->next = null();
            								}
HXDLIN( 395)								ret3->weak = false;
            							}
HXDLIN( 395)							ret3->_immutable = false;
HXDLIN( 395)							{
HXLINE( 395)								ret3->x = x3;
HXDLIN( 395)								ret3->y = y1;
            							}
HXDLIN( 395)							ret2->zpp_inner = ret3;
HXDLIN( 395)							ret2->zpp_inner->outer = ret2;
            						}
            						else {
HXLINE( 395)							bool _hx_tmp14;
HXDLIN( 395)							if (hx::IsNotNull( ret2 )) {
HXLINE( 395)								_hx_tmp14 = ret2->zpp_disp;
            							}
            							else {
HXLINE( 395)								_hx_tmp14 = false;
            							}
HXDLIN( 395)							if (_hx_tmp14) {
HXLINE( 395)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 395)							{
HXLINE( 395)								 ::zpp_nape::geom::ZPP_Vec2 _this8 = ret2->zpp_inner;
HXDLIN( 395)								if (_this8->_immutable) {
HXLINE( 395)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 395)								if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 395)									_this8->_isimmutable();
            								}
            							}
HXDLIN( 395)							bool _hx_tmp15;
HXDLIN( 395)							if ((x3 == x3)) {
HXLINE( 395)								_hx_tmp15 = (y1 != y1);
            							}
            							else {
HXLINE( 395)								_hx_tmp15 = true;
            							}
HXDLIN( 395)							if (_hx_tmp15) {
HXLINE( 395)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN( 395)							bool _hx_tmp16;
HXDLIN( 395)							bool _hx_tmp17;
HXDLIN( 395)							if (hx::IsNotNull( ret2 )) {
HXLINE( 395)								_hx_tmp17 = ret2->zpp_disp;
            							}
            							else {
HXLINE( 395)								_hx_tmp17 = false;
            							}
HXDLIN( 395)							if (_hx_tmp17) {
HXLINE( 395)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 395)							{
HXLINE( 395)								 ::zpp_nape::geom::ZPP_Vec2 _this9 = ret2->zpp_inner;
HXDLIN( 395)								if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 395)									_this9->_validate();
            								}
            							}
HXDLIN( 395)							if ((ret2->zpp_inner->x == x3)) {
HXLINE( 395)								bool _hx_tmp18;
HXDLIN( 395)								if (hx::IsNotNull( ret2 )) {
HXLINE( 395)									_hx_tmp18 = ret2->zpp_disp;
            								}
            								else {
HXLINE( 395)									_hx_tmp18 = false;
            								}
HXDLIN( 395)								if (_hx_tmp18) {
HXLINE( 395)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 395)								{
HXLINE( 395)									 ::zpp_nape::geom::ZPP_Vec2 _this10 = ret2->zpp_inner;
HXDLIN( 395)									if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 395)										_this10->_validate();
            									}
            								}
HXDLIN( 395)								_hx_tmp16 = (ret2->zpp_inner->y == y1);
            							}
            							else {
HXLINE( 395)								_hx_tmp16 = false;
            							}
HXDLIN( 395)							if (!(_hx_tmp16)) {
HXLINE( 395)								{
HXLINE( 395)									ret2->zpp_inner->x = x3;
HXDLIN( 395)									ret2->zpp_inner->y = y1;
            								}
HXDLIN( 395)								{
HXLINE( 395)									 ::zpp_nape::geom::ZPP_Vec2 _this11 = ret2->zpp_inner;
HXDLIN( 395)									if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 395)										_this11->_invalidate(_this11);
            									}
            								}
            							}
            						}
HXDLIN( 395)						ret2->zpp_inner->weak = false;
HXDLIN( 395)						_hx_tmp11->push(ret2);
            					}
            					_hx_goto_1:;
            				}
            			}
            			else {
HXLINE( 398)				if (::Std_obj::is(localVerts,hx::ClassOf< ::nape::geom::GeomPoly >())) {
HXLINE( 399)					 ::nape::geom::GeomPoly lv2 = ( ( ::nape::geom::GeomPoly)(localVerts) );
HXLINE( 402)					bool _hx_tmp19;
HXDLIN( 402)					if (hx::IsNotNull( lv2 )) {
HXLINE( 402)						_hx_tmp19 = lv2->zpp_disp;
            					}
            					else {
HXLINE( 402)						_hx_tmp19 = false;
            					}
HXDLIN( 402)					if (_hx_tmp19) {
HXLINE( 402)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXLINE( 405)					 ::zpp_nape::geom::ZPP_GeomVert verts = lv2->zpp_inner->vertices;
HXLINE( 406)					if (hx::IsNotNull( verts )) {
HXLINE( 407)						 ::zpp_nape::geom::ZPP_GeomVert vite1 = verts;
HXLINE( 408)						while(true){
HXLINE( 409)							Float x4 = vite1->x;
HXDLIN( 409)							Float y2 = vite1->y;
HXDLIN( 409)							bool _hx_tmp20;
HXDLIN( 409)							if ((x4 == x4)) {
HXLINE( 409)								_hx_tmp20 = (y2 != y2);
            							}
            							else {
HXLINE( 409)								_hx_tmp20 = true;
            							}
HXDLIN( 409)							if (_hx_tmp20) {
HXLINE( 409)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN( 409)							 ::nape::geom::Vec2 ret4;
HXDLIN( 409)							if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 409)								ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            							}
            							else {
HXLINE( 409)								ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 409)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 409)								ret4->zpp_pool = null();
HXDLIN( 409)								ret4->zpp_disp = false;
HXDLIN( 409)								if (hx::IsEq( ret4,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 409)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            								}
            							}
HXDLIN( 409)							if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 409)								 ::zpp_nape::geom::ZPP_Vec2 ret5;
HXDLIN( 409)								{
HXLINE( 409)									if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 409)										ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 409)										ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 409)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 409)										ret5->next = null();
            									}
HXDLIN( 409)									ret5->weak = false;
            								}
HXDLIN( 409)								ret5->_immutable = false;
HXDLIN( 409)								{
HXLINE( 409)									ret5->x = x4;
HXDLIN( 409)									ret5->y = y2;
            								}
HXDLIN( 409)								ret4->zpp_inner = ret5;
HXDLIN( 409)								ret4->zpp_inner->outer = ret4;
            							}
            							else {
HXLINE( 409)								bool _hx_tmp21;
HXDLIN( 409)								if (hx::IsNotNull( ret4 )) {
HXLINE( 409)									_hx_tmp21 = ret4->zpp_disp;
            								}
            								else {
HXLINE( 409)									_hx_tmp21 = false;
            								}
HXDLIN( 409)								if (_hx_tmp21) {
HXLINE( 409)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 409)								{
HXLINE( 409)									 ::zpp_nape::geom::ZPP_Vec2 _this12 = ret4->zpp_inner;
HXDLIN( 409)									if (_this12->_immutable) {
HXLINE( 409)										HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            									}
HXDLIN( 409)									if (hx::IsNotNull( _this12->_isimmutable )) {
HXLINE( 409)										_this12->_isimmutable();
            									}
            								}
HXDLIN( 409)								bool _hx_tmp22;
HXDLIN( 409)								if ((x4 == x4)) {
HXLINE( 409)									_hx_tmp22 = (y2 != y2);
            								}
            								else {
HXLINE( 409)									_hx_tmp22 = true;
            								}
HXDLIN( 409)								if (_hx_tmp22) {
HXLINE( 409)									HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            								}
HXDLIN( 409)								bool _hx_tmp23;
HXDLIN( 409)								bool _hx_tmp24;
HXDLIN( 409)								if (hx::IsNotNull( ret4 )) {
HXLINE( 409)									_hx_tmp24 = ret4->zpp_disp;
            								}
            								else {
HXLINE( 409)									_hx_tmp24 = false;
            								}
HXDLIN( 409)								if (_hx_tmp24) {
HXLINE( 409)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 409)								{
HXLINE( 409)									 ::zpp_nape::geom::ZPP_Vec2 _this13 = ret4->zpp_inner;
HXDLIN( 409)									if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 409)										_this13->_validate();
            									}
            								}
HXDLIN( 409)								if ((ret4->zpp_inner->x == x4)) {
HXLINE( 409)									bool _hx_tmp25;
HXDLIN( 409)									if (hx::IsNotNull( ret4 )) {
HXLINE( 409)										_hx_tmp25 = ret4->zpp_disp;
            									}
            									else {
HXLINE( 409)										_hx_tmp25 = false;
            									}
HXDLIN( 409)									if (_hx_tmp25) {
HXLINE( 409)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN( 409)									{
HXLINE( 409)										 ::zpp_nape::geom::ZPP_Vec2 _this14 = ret4->zpp_inner;
HXDLIN( 409)										if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 409)											_this14->_validate();
            										}
            									}
HXDLIN( 409)									_hx_tmp23 = (ret4->zpp_inner->y == y2);
            								}
            								else {
HXLINE( 409)									_hx_tmp23 = false;
            								}
HXDLIN( 409)								if (!(_hx_tmp23)) {
HXLINE( 409)									{
HXLINE( 409)										ret4->zpp_inner->x = x4;
HXDLIN( 409)										ret4->zpp_inner->y = y2;
            									}
HXDLIN( 409)									{
HXLINE( 409)										 ::zpp_nape::geom::ZPP_Vec2 _this15 = ret4->zpp_inner;
HXDLIN( 409)										if (hx::IsNotNull( _this15->_invalidate )) {
HXLINE( 409)											_this15->_invalidate(_this15);
            										}
            									}
            								}
            							}
HXDLIN( 409)							ret4->zpp_inner->weak = false;
HXDLIN( 409)							 ::nape::geom::Vec2 x5 = ret4;
HXLINE( 410)							vite1 = vite1->next;
HXLINE( 411)							if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 411)								this->zpp_inner_zn->getlverts();
            							}
HXDLIN( 411)							 ::nape::geom::Vec2List _hx_tmp26 = this->zpp_inner_zn->wrap_lverts;
HXDLIN( 411)							bool _hx_tmp27;
HXDLIN( 411)							if (hx::IsNotNull( x5 )) {
HXLINE( 411)								_hx_tmp27 = x5->zpp_disp;
            							}
            							else {
HXLINE( 411)								_hx_tmp27 = false;
            							}
HXDLIN( 411)							if (_hx_tmp27) {
HXLINE( 411)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 411)							if (x5->zpp_disp) {
HXLINE( 411)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 411)							{
HXLINE( 411)								 ::zpp_nape::geom::ZPP_Vec2 _this16 = x5->zpp_inner;
HXDLIN( 411)								if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 411)									_this16->_validate();
            								}
            							}
HXDLIN( 411)							Float x6 = x5->zpp_inner->x;
HXDLIN( 411)							if (x5->zpp_disp) {
HXLINE( 411)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 411)							{
HXLINE( 411)								 ::zpp_nape::geom::ZPP_Vec2 _this17 = x5->zpp_inner;
HXDLIN( 411)								if (hx::IsNotNull( _this17->_validate )) {
HXLINE( 411)									_this17->_validate();
            								}
            							}
HXDLIN( 411)							Float y3 = x5->zpp_inner->y;
HXDLIN( 411)							bool _hx_tmp28;
HXDLIN( 411)							if ((x6 == x6)) {
HXLINE( 411)								_hx_tmp28 = (y3 != y3);
            							}
            							else {
HXLINE( 411)								_hx_tmp28 = true;
            							}
HXDLIN( 411)							if (_hx_tmp28) {
HXLINE( 411)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN( 411)							 ::nape::geom::Vec2 ret6;
HXDLIN( 411)							if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 411)								ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            							}
            							else {
HXLINE( 411)								ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 411)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN( 411)								ret6->zpp_pool = null();
HXDLIN( 411)								ret6->zpp_disp = false;
HXDLIN( 411)								if (hx::IsEq( ret6,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 411)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            								}
            							}
HXDLIN( 411)							if (hx::IsNull( ret6->zpp_inner )) {
HXLINE( 411)								 ::zpp_nape::geom::ZPP_Vec2 ret7;
HXDLIN( 411)								{
HXLINE( 411)									if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 411)										ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 411)										ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 411)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN( 411)										ret7->next = null();
            									}
HXDLIN( 411)									ret7->weak = false;
            								}
HXDLIN( 411)								ret7->_immutable = false;
HXDLIN( 411)								{
HXLINE( 411)									ret7->x = x6;
HXDLIN( 411)									ret7->y = y3;
            								}
HXDLIN( 411)								ret6->zpp_inner = ret7;
HXDLIN( 411)								ret6->zpp_inner->outer = ret6;
            							}
            							else {
HXLINE( 411)								bool _hx_tmp29;
HXDLIN( 411)								if (hx::IsNotNull( ret6 )) {
HXLINE( 411)									_hx_tmp29 = ret6->zpp_disp;
            								}
            								else {
HXLINE( 411)									_hx_tmp29 = false;
            								}
HXDLIN( 411)								if (_hx_tmp29) {
HXLINE( 411)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 411)								{
HXLINE( 411)									 ::zpp_nape::geom::ZPP_Vec2 _this18 = ret6->zpp_inner;
HXDLIN( 411)									if (_this18->_immutable) {
HXLINE( 411)										HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            									}
HXDLIN( 411)									if (hx::IsNotNull( _this18->_isimmutable )) {
HXLINE( 411)										_this18->_isimmutable();
            									}
            								}
HXDLIN( 411)								bool _hx_tmp30;
HXDLIN( 411)								if ((x6 == x6)) {
HXLINE( 411)									_hx_tmp30 = (y3 != y3);
            								}
            								else {
HXLINE( 411)									_hx_tmp30 = true;
            								}
HXDLIN( 411)								if (_hx_tmp30) {
HXLINE( 411)									HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            								}
HXDLIN( 411)								bool _hx_tmp31;
HXDLIN( 411)								bool _hx_tmp32;
HXDLIN( 411)								if (hx::IsNotNull( ret6 )) {
HXLINE( 411)									_hx_tmp32 = ret6->zpp_disp;
            								}
            								else {
HXLINE( 411)									_hx_tmp32 = false;
            								}
HXDLIN( 411)								if (_hx_tmp32) {
HXLINE( 411)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 411)								{
HXLINE( 411)									 ::zpp_nape::geom::ZPP_Vec2 _this19 = ret6->zpp_inner;
HXDLIN( 411)									if (hx::IsNotNull( _this19->_validate )) {
HXLINE( 411)										_this19->_validate();
            									}
            								}
HXDLIN( 411)								if ((ret6->zpp_inner->x == x6)) {
HXLINE( 411)									bool _hx_tmp33;
HXDLIN( 411)									if (hx::IsNotNull( ret6 )) {
HXLINE( 411)										_hx_tmp33 = ret6->zpp_disp;
            									}
            									else {
HXLINE( 411)										_hx_tmp33 = false;
            									}
HXDLIN( 411)									if (_hx_tmp33) {
HXLINE( 411)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN( 411)									{
HXLINE( 411)										 ::zpp_nape::geom::ZPP_Vec2 _this20 = ret6->zpp_inner;
HXDLIN( 411)										if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 411)											_this20->_validate();
            										}
            									}
HXDLIN( 411)									_hx_tmp31 = (ret6->zpp_inner->y == y3);
            								}
            								else {
HXLINE( 411)									_hx_tmp31 = false;
            								}
HXDLIN( 411)								if (!(_hx_tmp31)) {
HXLINE( 411)									{
HXLINE( 411)										ret6->zpp_inner->x = x6;
HXDLIN( 411)										ret6->zpp_inner->y = y3;
            									}
HXDLIN( 411)									{
HXLINE( 411)										 ::zpp_nape::geom::ZPP_Vec2 _this21 = ret6->zpp_inner;
HXDLIN( 411)										if (hx::IsNotNull( _this21->_invalidate )) {
HXLINE( 411)											_this21->_invalidate(_this21);
            										}
            									}
            								}
            							}
HXDLIN( 411)							ret6->zpp_inner->weak = false;
HXDLIN( 411)							_hx_tmp26->push(ret6);
HXLINE( 412)							{
HXLINE( 412)								bool _hx_tmp34;
HXDLIN( 412)								if (hx::IsNotNull( x5 )) {
HXLINE( 412)									_hx_tmp34 = x5->zpp_disp;
            								}
            								else {
HXLINE( 412)									_hx_tmp34 = false;
            								}
HXDLIN( 412)								if (_hx_tmp34) {
HXLINE( 412)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 412)								{
HXLINE( 412)									 ::zpp_nape::geom::ZPP_Vec2 _this22 = x5->zpp_inner;
HXDLIN( 412)									if (_this22->_immutable) {
HXLINE( 412)										HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            									}
HXDLIN( 412)									if (hx::IsNotNull( _this22->_isimmutable )) {
HXLINE( 412)										_this22->_isimmutable();
            									}
            								}
HXDLIN( 412)								if (x5->zpp_inner->_inuse) {
HXLINE( 412)									HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            								}
HXDLIN( 412)								 ::zpp_nape::geom::ZPP_Vec2 inner = x5->zpp_inner;
HXDLIN( 412)								x5->zpp_inner->outer = null();
HXDLIN( 412)								x5->zpp_inner = null();
HXDLIN( 412)								{
HXLINE( 412)									 ::nape::geom::Vec2 o = x5;
HXDLIN( 412)									o->zpp_pool = null();
HXDLIN( 412)									if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 412)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            									}
            									else {
HXLINE( 412)										::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            									}
HXDLIN( 412)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 412)									o->zpp_disp = true;
            								}
HXDLIN( 412)								{
HXLINE( 412)									 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 412)									{
HXLINE( 412)										if (hx::IsNotNull( o1->outer )) {
HXLINE( 412)											o1->outer->zpp_inner = null();
HXDLIN( 412)											o1->outer = null();
            										}
HXDLIN( 412)										o1->_isimmutable = null();
HXDLIN( 412)										o1->_validate = null();
HXDLIN( 412)										o1->_invalidate = null();
            									}
HXDLIN( 412)									o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 412)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            								}
            							}
HXLINE( 408)							if (hx::IsEq( vite1,verts )) {
HXLINE( 408)								goto _hx_goto_2;
            							}
            						}
            						_hx_goto_2:;
            					}
            				}
            				else {
HXLINE( 419)					HX_STACK_DO_THROW(HX_("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>",bb,80,45,90));
            				}
            			}
            		}
HXLINE( 424)		if (::Std_obj::is(localVerts,hx::ArrayBase::__mClass)) {
HXLINE( 425)			::Array< ::Dynamic> lv3 = ( (::Array< ::Dynamic>)(localVerts) );
HXLINE( 426)			int i = 0;
HXLINE( 427)			while((i < lv3->length)){
HXLINE( 428)				 ::nape::geom::Vec2 cur = lv3->__get(i).StaticCast<  ::nape::geom::Vec2 >();
HXLINE( 429)				bool _hx_tmp35;
HXDLIN( 429)				if (cur->zpp_inner->weak) {
HXLINE( 433)					{
HXLINE( 433)						bool _hx_tmp36;
HXDLIN( 433)						if (hx::IsNotNull( cur )) {
HXLINE( 433)							_hx_tmp36 = cur->zpp_disp;
            						}
            						else {
HXLINE( 433)							_hx_tmp36 = false;
            						}
HXDLIN( 433)						if (_hx_tmp36) {
HXLINE( 433)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 433)						{
HXLINE( 433)							 ::zpp_nape::geom::ZPP_Vec2 _this23 = cur->zpp_inner;
HXDLIN( 433)							if (_this23->_immutable) {
HXLINE( 433)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 433)							if (hx::IsNotNull( _this23->_isimmutable )) {
HXLINE( 433)								_this23->_isimmutable();
            							}
            						}
HXDLIN( 433)						if (cur->zpp_inner->_inuse) {
HXLINE( 433)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 433)						 ::zpp_nape::geom::ZPP_Vec2 inner1 = cur->zpp_inner;
HXDLIN( 433)						cur->zpp_inner->outer = null();
HXDLIN( 433)						cur->zpp_inner = null();
HXDLIN( 433)						{
HXLINE( 433)							 ::nape::geom::Vec2 o2 = cur;
HXDLIN( 433)							o2->zpp_pool = null();
HXDLIN( 433)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 433)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            							}
            							else {
HXLINE( 433)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            							}
HXDLIN( 433)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 433)							o2->zpp_disp = true;
            						}
HXDLIN( 433)						{
HXLINE( 433)							 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 433)							{
HXLINE( 433)								if (hx::IsNotNull( o3->outer )) {
HXLINE( 433)									o3->outer->zpp_inner = null();
HXDLIN( 433)									o3->outer = null();
            								}
HXDLIN( 433)								o3->_isimmutable = null();
HXDLIN( 433)								o3->_validate = null();
HXDLIN( 433)								o3->_invalidate = null();
            							}
HXDLIN( 433)							o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 433)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            						}
            					}
HXLINE( 429)					_hx_tmp35 = true;
            				}
            				else {
HXLINE( 429)					_hx_tmp35 = false;
            				}
HXDLIN( 429)				if (_hx_tmp35) {
HXLINE( 440)					lv3->removeRange(i,1);
HXLINE( 441)					continue;
            				}
HXLINE( 443)				i = (i + 1);
            			}
            		}
            		else {
HXLINE( 471)			if (::Std_obj::is(localVerts,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE( 472)				 ::nape::geom::Vec2List lv4 = ( ( ::nape::geom::Vec2List)(localVerts) );
HXLINE( 473)				if (hx::IsNotNull( lv4->zpp_inner->_validate )) {
HXLINE( 473)					lv4->zpp_inner->_validate();
            				}
HXLINE( 474)				 ::zpp_nape::util::ZNPList_ZPP_Vec2 ins = lv4->zpp_inner->inner;
HXLINE( 475)				 ::zpp_nape::util::ZNPNode_ZPP_Vec2 pre = null();
HXLINE( 476)				 ::zpp_nape::util::ZNPNode_ZPP_Vec2 cur1 = ins->head;
HXLINE( 477)				while(hx::IsNotNull( cur1 )){
HXLINE( 478)					 ::zpp_nape::geom::ZPP_Vec2 x7 = cur1->elt;
HXLINE( 479)					if (x7->outer->zpp_inner->weak) {
HXLINE( 482)						cur1 = ins->erase(pre);
HXLINE( 483)						if (x7->outer->zpp_inner->weak) {
HXLINE( 487)							 ::nape::geom::Vec2 _this24 = x7->outer;
HXDLIN( 487)							bool _hx_tmp37;
HXDLIN( 487)							if (hx::IsNotNull( _this24 )) {
HXLINE( 487)								_hx_tmp37 = _this24->zpp_disp;
            							}
            							else {
HXLINE( 487)								_hx_tmp37 = false;
            							}
HXDLIN( 487)							if (_hx_tmp37) {
HXLINE( 487)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 487)							{
HXLINE( 487)								 ::zpp_nape::geom::ZPP_Vec2 _this25 = _this24->zpp_inner;
HXDLIN( 487)								if (_this25->_immutable) {
HXLINE( 487)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 487)								if (hx::IsNotNull( _this25->_isimmutable )) {
HXLINE( 487)									_this25->_isimmutable();
            								}
            							}
HXDLIN( 487)							if (_this24->zpp_inner->_inuse) {
HXLINE( 487)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN( 487)							 ::zpp_nape::geom::ZPP_Vec2 inner2 = _this24->zpp_inner;
HXDLIN( 487)							_this24->zpp_inner->outer = null();
HXDLIN( 487)							_this24->zpp_inner = null();
HXDLIN( 487)							{
HXLINE( 487)								 ::nape::geom::Vec2 o4 = _this24;
HXDLIN( 487)								o4->zpp_pool = null();
HXDLIN( 487)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 487)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o4;
            								}
            								else {
HXLINE( 487)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o4;
            								}
HXDLIN( 487)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o4;
HXDLIN( 487)								o4->zpp_disp = true;
            							}
HXDLIN( 487)							{
HXLINE( 487)								 ::zpp_nape::geom::ZPP_Vec2 o5 = inner2;
HXDLIN( 487)								{
HXLINE( 487)									if (hx::IsNotNull( o5->outer )) {
HXLINE( 487)										o5->outer->zpp_inner = null();
HXDLIN( 487)										o5->outer = null();
            									}
HXDLIN( 487)									o5->_isimmutable = null();
HXDLIN( 487)									o5->_validate = null();
HXDLIN( 487)									o5->_invalidate = null();
            								}
HXDLIN( 487)								o5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 487)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o5;
            							}
            						}
            					}
            					else {
HXLINE( 496)						pre = cur1;
HXLINE( 497)						cur1 = cur1->next;
            					}
            				}
            			}
            		}
HXLINE( 502)		if (hx::IsNull( material )) {
HXLINE( 503)			if (hx::IsNull( ::zpp_nape::phys::ZPP_Material_obj::zpp_pool )) {
HXLINE( 504)				this->zpp_inner->material =  ::zpp_nape::phys::ZPP_Material_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 510)				this->zpp_inner->material = ::zpp_nape::phys::ZPP_Material_obj::zpp_pool;
HXLINE( 511)				::zpp_nape::phys::ZPP_Material_obj::zpp_pool = this->zpp_inner->material->next;
HXLINE( 512)				this->zpp_inner->material->next = null();
            			}
            		}
            		else {
HXLINE( 519)			{
HXLINE( 519)				this->zpp_inner->immutable_midstep(HX_("Shape::material",a8,cd,a4,b9));
HXDLIN( 519)				if (hx::IsNull( material )) {
HXLINE( 519)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null as Shape material",9d,c0,89,99));
            				}
HXDLIN( 519)				this->zpp_inner->setMaterial(material->zpp_inner);
            			}
HXDLIN( 519)			this->zpp_inner->material->wrapper();
            		}
HXLINE( 520)		if (hx::IsNull( filter )) {
HXLINE( 521)			if (hx::IsNull( ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool )) {
HXLINE( 522)				this->zpp_inner->filter =  ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 528)				this->zpp_inner->filter = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 529)				::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = this->zpp_inner->filter->next;
HXLINE( 530)				this->zpp_inner->filter->next = null();
            			}
            		}
            		else {
HXLINE( 537)			{
HXLINE( 537)				this->zpp_inner->immutable_midstep(HX_("Shape::filter",79,9e,c6,67));
HXDLIN( 537)				if (hx::IsNull( filter )) {
HXLINE( 537)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null as Shape filter",2e,7a,75,59));
            				}
HXDLIN( 537)				this->zpp_inner->setFilter(filter->zpp_inner);
            			}
HXDLIN( 537)			this->zpp_inner->filter->wrapper();
            		}
HXLINE( 538)		this->zpp_inner_i->insert_cbtype(::zpp_nape::callbacks::ZPP_CbType_obj::ANY_SHAPE->zpp_inner);
            	}

Dynamic Polygon_obj::__CreateEmpty() { return new Polygon_obj; }

void *Polygon_obj::_hx_vtable = 0;

Dynamic Polygon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Polygon_obj > _hx_result = new Polygon_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Polygon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x643c1bb3) {
		if (inClassId<=(int)0x13534801) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x13534801;
		} else {
			return inClassId==(int)0x643c1bb3;
		}
	} else {
		return inClassId==(int)0x7e0877dc;
	}
}

 ::nape::geom::Vec2List Polygon_obj::get_localVerts(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_279_get_localVerts)
HXLINE( 280)		if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 280)			this->zpp_inner_zn->getlverts();
            		}
HXLINE( 281)		return this->zpp_inner_zn->wrap_lverts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,get_localVerts,return )

 ::nape::geom::Vec2List Polygon_obj::get_worldVerts(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_293_get_worldVerts)
HXLINE( 294)		if (hx::IsNull( this->zpp_inner_zn->wrap_gverts )) {
HXLINE( 294)			this->zpp_inner_zn->getgverts();
            		}
HXLINE( 295)		return this->zpp_inner_zn->wrap_gverts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,get_worldVerts,return )

 ::nape::shape::EdgeList Polygon_obj::get_edges(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_304_get_edges)
HXLINE( 305)		if (hx::IsNull( this->zpp_inner_zn->wrap_edges )) {
HXLINE( 305)			this->zpp_inner_zn->getedges();
            		}
HXLINE( 306)		return this->zpp_inner_zn->wrap_edges;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,get_edges,return )

 ::nape::shape::ValidationResult Polygon_obj::validity(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_313_validity)
HXDLIN( 313)		return this->zpp_inner_zn->valid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,validity,return )

::Array< ::Dynamic> Polygon_obj::rect(Float x,Float y,Float width,Float height,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4527d7a939562085_209_rect)
HXLINE( 211)		bool _hx_tmp;
HXDLIN( 211)		bool _hx_tmp1;
HXDLIN( 211)		bool _hx_tmp2;
HXDLIN( 211)		if ((x == x)) {
HXLINE( 211)			_hx_tmp2 = (y != y);
            		}
            		else {
HXLINE( 211)			_hx_tmp2 = true;
            		}
HXDLIN( 211)		if (!(_hx_tmp2)) {
HXLINE( 211)			_hx_tmp1 = (width != width);
            		}
            		else {
HXLINE( 211)			_hx_tmp1 = true;
            		}
HXDLIN( 211)		if (!(_hx_tmp1)) {
HXLINE( 211)			_hx_tmp = (height != height);
            		}
            		else {
HXLINE( 211)			_hx_tmp = true;
            		}
HXDLIN( 211)		if (_hx_tmp) {
HXLINE( 211)			HX_STACK_DO_THROW(HX_("Error: Polygon.rect cannot accept NaN arguments",9c,ae,a8,7a));
            		}
HXLINE( 213)		bool _hx_tmp3;
HXDLIN( 213)		if ((x == x)) {
HXLINE( 213)			_hx_tmp3 = (y != y);
            		}
            		else {
HXLINE( 213)			_hx_tmp3 = true;
            		}
HXDLIN( 213)		if (_hx_tmp3) {
HXLINE( 213)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 213)		 ::nape::geom::Vec2 ret;
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 213)			ret->zpp_pool = null();
HXDLIN( 213)			ret->zpp_disp = false;
HXDLIN( 213)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 213)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 213)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 213)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 213)					ret1->next = null();
            				}
HXDLIN( 213)				ret1->weak = false;
            			}
HXDLIN( 213)			ret1->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret1->x = x;
HXDLIN( 213)				ret1->y = y;
            			}
HXDLIN( 213)			ret->zpp_inner = ret1;
HXDLIN( 213)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp4;
HXDLIN( 213)			if (hx::IsNotNull( ret )) {
HXLINE( 213)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp4 = false;
            			}
HXDLIN( 213)			if (_hx_tmp4) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 213)				if (_this->_immutable) {
HXLINE( 213)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 213)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 213)					_this->_isimmutable();
            				}
            			}
HXDLIN( 213)			bool _hx_tmp5;
HXDLIN( 213)			if ((x == x)) {
HXLINE( 213)				_hx_tmp5 = (y != y);
            			}
            			else {
HXLINE( 213)				_hx_tmp5 = true;
            			}
HXDLIN( 213)			if (_hx_tmp5) {
HXLINE( 213)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 213)			bool _hx_tmp6;
HXDLIN( 213)			bool _hx_tmp7;
HXDLIN( 213)			if (hx::IsNotNull( ret )) {
HXLINE( 213)				_hx_tmp7 = ret->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp7 = false;
            			}
HXDLIN( 213)			if (_hx_tmp7) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 213)					_this1->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret->zpp_inner->x == x)) {
HXLINE( 213)				bool _hx_tmp8;
HXDLIN( 213)				if (hx::IsNotNull( ret )) {
HXLINE( 213)					_hx_tmp8 = ret->zpp_disp;
            				}
            				else {
HXLINE( 213)					_hx_tmp8 = false;
            				}
HXDLIN( 213)				if (_hx_tmp8) {
HXLINE( 213)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 213)						_this2->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp6 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 213)				_hx_tmp6 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp6)) {
HXLINE( 213)				{
HXLINE( 213)					ret->zpp_inner->x = x;
HXDLIN( 213)					ret->zpp_inner->y = y;
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 213)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret->zpp_inner->weak = weak;
HXDLIN( 213)		Float x1 = (x + width);
HXDLIN( 213)		bool _hx_tmp9;
HXDLIN( 213)		if ((x1 == x1)) {
HXLINE( 213)			_hx_tmp9 = (y != y);
            		}
            		else {
HXLINE( 213)			_hx_tmp9 = true;
            		}
HXDLIN( 213)		if (_hx_tmp9) {
HXLINE( 213)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 213)		 ::nape::geom::Vec2 ret2;
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 213)			ret2->zpp_pool = null();
HXDLIN( 213)			ret2->zpp_disp = false;
HXDLIN( 213)			if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 213)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 213)		if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 213)			 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 213)					ret3->next = null();
            				}
HXDLIN( 213)				ret3->weak = false;
            			}
HXDLIN( 213)			ret3->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret3->x = x1;
HXDLIN( 213)				ret3->y = y;
            			}
HXDLIN( 213)			ret2->zpp_inner = ret3;
HXDLIN( 213)			ret2->zpp_inner->outer = ret2;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp10;
HXDLIN( 213)			if (hx::IsNotNull( ret2 )) {
HXLINE( 213)				_hx_tmp10 = ret2->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp10 = false;
            			}
HXDLIN( 213)			if (_hx_tmp10) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret2->zpp_inner;
HXDLIN( 213)				if (_this4->_immutable) {
HXLINE( 213)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 213)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 213)					_this4->_isimmutable();
            				}
            			}
HXDLIN( 213)			bool _hx_tmp11;
HXDLIN( 213)			if ((x1 == x1)) {
HXLINE( 213)				_hx_tmp11 = (y != y);
            			}
            			else {
HXLINE( 213)				_hx_tmp11 = true;
            			}
HXDLIN( 213)			if (_hx_tmp11) {
HXLINE( 213)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 213)			bool _hx_tmp12;
HXDLIN( 213)			bool _hx_tmp13;
HXDLIN( 213)			if (hx::IsNotNull( ret2 )) {
HXLINE( 213)				_hx_tmp13 = ret2->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp13 = false;
            			}
HXDLIN( 213)			if (_hx_tmp13) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret2->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 213)					_this5->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret2->zpp_inner->x == x1)) {
HXLINE( 213)				bool _hx_tmp14;
HXDLIN( 213)				if (hx::IsNotNull( ret2 )) {
HXLINE( 213)					_hx_tmp14 = ret2->zpp_disp;
            				}
            				else {
HXLINE( 213)					_hx_tmp14 = false;
            				}
HXDLIN( 213)				if (_hx_tmp14) {
HXLINE( 213)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret2->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 213)						_this6->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp12 = (ret2->zpp_inner->y == y);
            			}
            			else {
HXLINE( 213)				_hx_tmp12 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp12)) {
HXLINE( 213)				{
HXLINE( 213)					ret2->zpp_inner->x = x1;
HXDLIN( 213)					ret2->zpp_inner->y = y;
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret2->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 213)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret2->zpp_inner->weak = weak;
HXDLIN( 213)		Float x2 = (x + width);
HXDLIN( 213)		Float y1 = (y + height);
HXDLIN( 213)		bool _hx_tmp15;
HXDLIN( 213)		if ((x2 == x2)) {
HXLINE( 213)			_hx_tmp15 = (y1 != y1);
            		}
            		else {
HXLINE( 213)			_hx_tmp15 = true;
            		}
HXDLIN( 213)		if (_hx_tmp15) {
HXLINE( 213)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 213)		 ::nape::geom::Vec2 ret4;
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 213)			ret4->zpp_pool = null();
HXDLIN( 213)			ret4->zpp_disp = false;
HXDLIN( 213)			if (hx::IsEq( ret4,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 213)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 213)		if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 213)			 ::zpp_nape::geom::ZPP_Vec2 ret5;
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 213)					ret5->next = null();
            				}
HXDLIN( 213)				ret5->weak = false;
            			}
HXDLIN( 213)			ret5->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret5->x = x2;
HXDLIN( 213)				ret5->y = y1;
            			}
HXDLIN( 213)			ret4->zpp_inner = ret5;
HXDLIN( 213)			ret4->zpp_inner->outer = ret4;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp16;
HXDLIN( 213)			if (hx::IsNotNull( ret4 )) {
HXLINE( 213)				_hx_tmp16 = ret4->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp16 = false;
            			}
HXDLIN( 213)			if (_hx_tmp16) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = ret4->zpp_inner;
HXDLIN( 213)				if (_this8->_immutable) {
HXLINE( 213)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 213)				if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 213)					_this8->_isimmutable();
            				}
            			}
HXDLIN( 213)			bool _hx_tmp17;
HXDLIN( 213)			if ((x2 == x2)) {
HXLINE( 213)				_hx_tmp17 = (y1 != y1);
            			}
            			else {
HXLINE( 213)				_hx_tmp17 = true;
            			}
HXDLIN( 213)			if (_hx_tmp17) {
HXLINE( 213)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 213)			bool _hx_tmp18;
HXDLIN( 213)			bool _hx_tmp19;
HXDLIN( 213)			if (hx::IsNotNull( ret4 )) {
HXLINE( 213)				_hx_tmp19 = ret4->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp19 = false;
            			}
HXDLIN( 213)			if (_hx_tmp19) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this9 = ret4->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 213)					_this9->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret4->zpp_inner->x == x2)) {
HXLINE( 213)				bool _hx_tmp20;
HXDLIN( 213)				if (hx::IsNotNull( ret4 )) {
HXLINE( 213)					_hx_tmp20 = ret4->zpp_disp;
            				}
            				else {
HXLINE( 213)					_hx_tmp20 = false;
            				}
HXDLIN( 213)				if (_hx_tmp20) {
HXLINE( 213)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this10 = ret4->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 213)						_this10->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp18 = (ret4->zpp_inner->y == y1);
            			}
            			else {
HXLINE( 213)				_hx_tmp18 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp18)) {
HXLINE( 213)				{
HXLINE( 213)					ret4->zpp_inner->x = x2;
HXDLIN( 213)					ret4->zpp_inner->y = y1;
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this11 = ret4->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 213)						_this11->_invalidate(_this11);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret4->zpp_inner->weak = weak;
HXDLIN( 213)		Float y2 = (y + height);
HXDLIN( 213)		bool _hx_tmp21;
HXDLIN( 213)		if ((x == x)) {
HXLINE( 213)			_hx_tmp21 = (y2 != y2);
            		}
            		else {
HXLINE( 213)			_hx_tmp21 = true;
            		}
HXDLIN( 213)		if (_hx_tmp21) {
HXLINE( 213)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 213)		 ::nape::geom::Vec2 ret6;
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN( 213)			ret6->zpp_pool = null();
HXDLIN( 213)			ret6->zpp_disp = false;
HXDLIN( 213)			if (hx::IsEq( ret6,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 213)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 213)		if (hx::IsNull( ret6->zpp_inner )) {
HXLINE( 213)			 ::zpp_nape::geom::ZPP_Vec2 ret7;
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN( 213)					ret7->next = null();
            				}
HXDLIN( 213)				ret7->weak = false;
            			}
HXDLIN( 213)			ret7->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret7->x = x;
HXDLIN( 213)				ret7->y = y2;
            			}
HXDLIN( 213)			ret6->zpp_inner = ret7;
HXDLIN( 213)			ret6->zpp_inner->outer = ret6;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp22;
HXDLIN( 213)			if (hx::IsNotNull( ret6 )) {
HXLINE( 213)				_hx_tmp22 = ret6->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp22 = false;
            			}
HXDLIN( 213)			if (_hx_tmp22) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this12 = ret6->zpp_inner;
HXDLIN( 213)				if (_this12->_immutable) {
HXLINE( 213)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 213)				if (hx::IsNotNull( _this12->_isimmutable )) {
HXLINE( 213)					_this12->_isimmutable();
            				}
            			}
HXDLIN( 213)			bool _hx_tmp23;
HXDLIN( 213)			if ((x == x)) {
HXLINE( 213)				_hx_tmp23 = (y2 != y2);
            			}
            			else {
HXLINE( 213)				_hx_tmp23 = true;
            			}
HXDLIN( 213)			if (_hx_tmp23) {
HXLINE( 213)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 213)			bool _hx_tmp24;
HXDLIN( 213)			bool _hx_tmp25;
HXDLIN( 213)			if (hx::IsNotNull( ret6 )) {
HXLINE( 213)				_hx_tmp25 = ret6->zpp_disp;
            			}
            			else {
HXLINE( 213)				_hx_tmp25 = false;
            			}
HXDLIN( 213)			if (_hx_tmp25) {
HXLINE( 213)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 213)			{
HXLINE( 213)				 ::zpp_nape::geom::ZPP_Vec2 _this13 = ret6->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 213)					_this13->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret6->zpp_inner->x == x)) {
HXLINE( 213)				bool _hx_tmp26;
HXDLIN( 213)				if (hx::IsNotNull( ret6 )) {
HXLINE( 213)					_hx_tmp26 = ret6->zpp_disp;
            				}
            				else {
HXLINE( 213)					_hx_tmp26 = false;
            				}
HXDLIN( 213)				if (_hx_tmp26) {
HXLINE( 213)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this14 = ret6->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 213)						_this14->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp24 = (ret6->zpp_inner->y == y2);
            			}
            			else {
HXLINE( 213)				_hx_tmp24 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp24)) {
HXLINE( 213)				{
HXLINE( 213)					ret6->zpp_inner->x = x;
HXDLIN( 213)					ret6->zpp_inner->y = y2;
            				}
HXDLIN( 213)				{
HXLINE( 213)					 ::zpp_nape::geom::ZPP_Vec2 _this15 = ret6->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this15->_invalidate )) {
HXLINE( 213)						_this15->_invalidate(_this15);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret6->zpp_inner->weak = weak;
HXDLIN( 213)		return ::Array_obj< ::Dynamic>::__new(4)->init(0,ret)->init(1,ret2)->init(2,ret4)->init(3,ret6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Polygon_obj,rect,return )

::Array< ::Dynamic> Polygon_obj::box(Float width,Float height,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_231_box)
HXLINE( 233)		bool _hx_tmp;
HXDLIN( 233)		if ((width == width)) {
HXLINE( 233)			_hx_tmp = (height != height);
            		}
            		else {
HXLINE( 233)			_hx_tmp = true;
            		}
HXDLIN( 233)		if (_hx_tmp) {
HXLINE( 233)			HX_STACK_DO_THROW(HX_("Error: Polygon.box cannot accept NaN arguments",7f,a8,a1,89));
            		}
HXLINE( 235)		return ::nape::shape::Polygon_obj::rect((-(width) / ( (Float)(2) )),(-(height) / ( (Float)(2) )),width,height,weak);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Polygon_obj,box,return )

::Array< ::Dynamic> Polygon_obj::regular(Float xRadius,Float yRadius,int edgeCount,hx::Null< Float >  __o_angleOffset,hx::Null< bool >  __o_weak){
            		Float angleOffset = __o_angleOffset.Default(((Float)0.0));
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4527d7a939562085_257_regular)
HXLINE( 259)		bool _hx_tmp;
HXDLIN( 259)		bool _hx_tmp1;
HXDLIN( 259)		if ((xRadius == xRadius)) {
HXLINE( 259)			_hx_tmp1 = (yRadius != yRadius);
            		}
            		else {
HXLINE( 259)			_hx_tmp1 = true;
            		}
HXDLIN( 259)		if (!(_hx_tmp1)) {
HXLINE( 259)			_hx_tmp = (angleOffset != angleOffset);
            		}
            		else {
HXLINE( 259)			_hx_tmp = true;
            		}
HXDLIN( 259)		if (_hx_tmp) {
HXLINE( 259)			HX_STACK_DO_THROW(HX_("Error: Polygon.regular cannot accept NaN arguments",50,6b,6b,ab));
            		}
HXLINE( 261)		::Array< ::Dynamic> ret = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 262)		Float dangle = ((::Math_obj::PI * ( (Float)(2) )) / ( (Float)(edgeCount) ));
HXLINE( 263)		{
HXLINE( 263)			int _g = 0;
HXDLIN( 263)			int _g1 = edgeCount;
HXDLIN( 263)			while((_g < _g1)){
HXLINE( 263)				_g = (_g + 1);
HXDLIN( 263)				int i = (_g - 1);
HXLINE( 264)				Float ang = ((( (Float)(i) ) * dangle) + angleOffset);
HXLINE( 265)				Float x = (::Math_obj::cos(ang) * xRadius);
HXDLIN( 265)				Float y = (::Math_obj::sin(ang) * yRadius);
HXDLIN( 265)				bool _hx_tmp2;
HXDLIN( 265)				if ((x == x)) {
HXLINE( 265)					_hx_tmp2 = (y != y);
            				}
            				else {
HXLINE( 265)					_hx_tmp2 = true;
            				}
HXDLIN( 265)				if (_hx_tmp2) {
HXLINE( 265)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 265)				 ::nape::geom::Vec2 ret1;
HXDLIN( 265)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 265)					ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 265)					ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 265)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN( 265)					ret1->zpp_pool = null();
HXDLIN( 265)					ret1->zpp_disp = false;
HXDLIN( 265)					if (hx::IsEq( ret1,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 265)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            					}
            				}
HXDLIN( 265)				if (hx::IsNull( ret1->zpp_inner )) {
HXLINE( 265)					 ::zpp_nape::geom::ZPP_Vec2 ret2;
HXDLIN( 265)					{
HXLINE( 265)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 265)							ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 265)							ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 265)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN( 265)							ret2->next = null();
            						}
HXDLIN( 265)						ret2->weak = false;
            					}
HXDLIN( 265)					ret2->_immutable = false;
HXDLIN( 265)					{
HXLINE( 265)						ret2->x = x;
HXDLIN( 265)						ret2->y = y;
            					}
HXDLIN( 265)					ret1->zpp_inner = ret2;
HXDLIN( 265)					ret1->zpp_inner->outer = ret1;
            				}
            				else {
HXLINE( 265)					bool _hx_tmp3;
HXDLIN( 265)					if (hx::IsNotNull( ret1 )) {
HXLINE( 265)						_hx_tmp3 = ret1->zpp_disp;
            					}
            					else {
HXLINE( 265)						_hx_tmp3 = false;
            					}
HXDLIN( 265)					if (_hx_tmp3) {
HXLINE( 265)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 265)					{
HXLINE( 265)						 ::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;
HXDLIN( 265)						if (_this->_immutable) {
HXLINE( 265)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 265)						if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 265)							_this->_isimmutable();
            						}
            					}
HXDLIN( 265)					bool _hx_tmp4;
HXDLIN( 265)					if ((x == x)) {
HXLINE( 265)						_hx_tmp4 = (y != y);
            					}
            					else {
HXLINE( 265)						_hx_tmp4 = true;
            					}
HXDLIN( 265)					if (_hx_tmp4) {
HXLINE( 265)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 265)					bool _hx_tmp5;
HXDLIN( 265)					bool _hx_tmp6;
HXDLIN( 265)					if (hx::IsNotNull( ret1 )) {
HXLINE( 265)						_hx_tmp6 = ret1->zpp_disp;
            					}
            					else {
HXLINE( 265)						_hx_tmp6 = false;
            					}
HXDLIN( 265)					if (_hx_tmp6) {
HXLINE( 265)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 265)					{
HXLINE( 265)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret1->zpp_inner;
HXDLIN( 265)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 265)							_this1->_validate();
            						}
            					}
HXDLIN( 265)					if ((ret1->zpp_inner->x == x)) {
HXLINE( 265)						bool _hx_tmp7;
HXDLIN( 265)						if (hx::IsNotNull( ret1 )) {
HXLINE( 265)							_hx_tmp7 = ret1->zpp_disp;
            						}
            						else {
HXLINE( 265)							_hx_tmp7 = false;
            						}
HXDLIN( 265)						if (_hx_tmp7) {
HXLINE( 265)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 265)						{
HXLINE( 265)							 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret1->zpp_inner;
HXDLIN( 265)							if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 265)								_this2->_validate();
            							}
            						}
HXDLIN( 265)						_hx_tmp5 = (ret1->zpp_inner->y == y);
            					}
            					else {
HXLINE( 265)						_hx_tmp5 = false;
            					}
HXDLIN( 265)					if (!(_hx_tmp5)) {
HXLINE( 265)						{
HXLINE( 265)							ret1->zpp_inner->x = x;
HXDLIN( 265)							ret1->zpp_inner->y = y;
            						}
HXDLIN( 265)						{
HXLINE( 265)							 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret1->zpp_inner;
HXDLIN( 265)							if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 265)								_this3->_invalidate(_this3);
            							}
            						}
            					}
            				}
HXDLIN( 265)				ret1->zpp_inner->weak = weak;
HXDLIN( 265)				 ::nape::geom::Vec2 x1 = ret1;
HXLINE( 266)				ret->push(x1);
            			}
            		}
HXLINE( 268)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Polygon_obj,regular,return )


hx::ObjectPtr< Polygon_obj > Polygon_obj::__new( ::Dynamic localVerts, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter) {
	hx::ObjectPtr< Polygon_obj > __this = new Polygon_obj();
	__this->__construct(localVerts,material,filter);
	return __this;
}

hx::ObjectPtr< Polygon_obj > Polygon_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic localVerts, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter) {
	Polygon_obj *__this = (Polygon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Polygon_obj), true, "nape.shape.Polygon"));
	*(void **)__this = Polygon_obj::_hx_vtable;
	__this->__construct(localVerts,material,filter);
	return __this;
}

Polygon_obj::Polygon_obj()
{
}

void Polygon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Polygon);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::shape::Shape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Polygon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::shape::Shape_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Polygon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"edges") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_edges() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validity") ) { return hx::Val( validity_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_edges") ) { return hx::Val( get_edges_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"localVerts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_localVerts() ); }
		if (HX_FIELD_EQ(inName,"worldVerts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_worldVerts() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_localVerts") ) { return hx::Val( get_localVerts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_worldVerts") ) { return hx::Val( get_worldVerts_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Polygon_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { outValue = box_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { outValue = rect_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"regular") ) { outValue = regular_dyn(); return true; }
	}
	return false;
}

hx::Val Polygon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::shape::ZPP_Polygon >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Polygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner_zn",22,84,fa,e0));
	outFields->push(HX_("localVerts",37,89,55,6c));
	outFields->push(HX_("worldVerts",f0,96,0e,a0));
	outFields->push(HX_("edges",96,6d,e0,69));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Polygon_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Polygon */ ,(int)offsetof(Polygon_obj,zpp_inner_zn),HX_("zpp_inner_zn",22,84,fa,e0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Polygon_obj_sStaticStorageInfo = 0;
#endif

static ::String Polygon_obj_sMemberFields[] = {
	HX_("zpp_inner_zn",22,84,fa,e0),
	HX_("get_localVerts",80,11,4b,e2),
	HX_("get_worldVerts",39,1f,04,16),
	HX_("get_edges",ed,c9,89,ad),
	HX_("validity",b2,e2,e9,04),
	::String(null()) };

hx::Class Polygon_obj::__mClass;

static ::String Polygon_obj_sStaticFields[] = {
	HX_("rect",24,4d,a7,4b),
	HX_("box",0b,be,4a,00),
	HX_("regular",5c,52,88,82),
	::String(null())
};

void Polygon_obj::__register()
{
	Polygon_obj _hx_dummy;
	Polygon_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.shape.Polygon",07,4e,19,cd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Polygon_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Polygon_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Polygon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Polygon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Polygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Polygon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace shape
