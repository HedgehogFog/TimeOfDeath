// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_204_new,"nape.geom.Vec2","new",0x3252e95c,"nape.geom.Vec2.new","nape/geom/Vec2.hx",204,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_328_dispose,"nape.geom.Vec2","dispose",0x0fb1c79b,"nape.geom.Vec2.dispose","nape/geom/Vec2.hx",328,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_425_copy,"nape.geom.Vec2","copy",0xcefb7f39,"nape.geom.Vec2.copy","nape/geom/Vec2.hx",425,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_523_get_x,"nape.geom.Vec2","get_x",0x9414f54b,"nape.geom.Vec2.get_x","nape/geom/Vec2.hx",523,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_532_set_x,"nape.geom.Vec2","set_x",0x7ce3eb57,"nape.geom.Vec2.set_x","nape/geom/Vec2.hx",532,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_559_get_y,"nape.geom.Vec2","get_y",0x9414f54c,"nape.geom.Vec2.get_y","nape/geom/Vec2.hx",559,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_568_set_y,"nape.geom.Vec2","set_y",0x7ce3eb58,"nape.geom.Vec2.set_y","nape/geom/Vec2.hx",568,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_599_get_length,"nape.geom.Vec2","get_length",0x33cb4333,"nape.geom.Vec2.get_length","nape/geom/Vec2.hx",599,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_607_set_length,"nape.geom.Vec2","set_length",0x3748e1a7,"nape.geom.Vec2.set_length","nape/geom/Vec2.hx",607,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_650_lsq,"nape.geom.Vec2","lsq",0x32517106,"nape.geom.Vec2.lsq","nape/geom/Vec2.hx",650,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_671_set,"nape.geom.Vec2","set",0x3256b49e,"nape.geom.Vec2.set","nape/geom/Vec2.hx",671,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_808_setxy,"nape.geom.Vec2","setxy",0x7ce4011f,"nape.geom.Vec2.setxy","nape/geom/Vec2.hx",808,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_861_get_angle,"nape.geom.Vec2","get_angle",0x940d9e26,"nape.geom.Vec2.get_angle","nape/geom/Vec2.hx",861,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_874_set_angle,"nape.geom.Vec2","set_angle",0x775e8a32,"nape.geom.Vec2.set_angle","nape/geom/Vec2.hx",874,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_907_rotate,"nape.geom.Vec2","rotate",0x2631f2df,"nape.geom.Vec2.rotate","nape/geom/Vec2.hx",907,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_942_reflect,"nape.geom.Vec2","reflect",0x3d8ecb39,"nape.geom.Vec2.reflect","nape/geom/Vec2.hx",942,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_984_normalise,"nape.geom.Vec2","normalise",0xd9232f70,"nape.geom.Vec2.normalise","nape/geom/Vec2.hx",984,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1035_unit,"nape.geom.Vec2","unit",0xdae08e08,"nape.geom.Vec2.unit","nape/geom/Vec2.hx",1035,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1066_add,"nape.geom.Vec2","add",0x32490b1d,"nape.geom.Vec2.add","nape/geom/Vec2.hx",1066,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1119_addMul,"nape.geom.Vec2","addMul",0xfa15d8e7,"nape.geom.Vec2.addMul","nape/geom/Vec2.hx",1119,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1165_sub,"nape.geom.Vec2","sub",0x3256c27c,"nape.geom.Vec2.sub","nape/geom/Vec2.hx",1165,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1209_mul,"nape.geom.Vec2","mul",0x32523500,"nape.geom.Vec2.mul","nape/geom/Vec2.hx",1209,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1237_addeq,"nape.geom.Vec2","addeq",0x1ef824c9,"nape.geom.Vec2.addeq","nape/geom/Vec2.hx",1237,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1283_subeq,"nape.geom.Vec2","subeq",0x8769b1e8,"nape.geom.Vec2.subeq","nape/geom/Vec2.hx",1283,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1328_muleq,"nape.geom.Vec2","muleq",0x1309cd6c,"nape.geom.Vec2.muleq","nape/geom/Vec2.hx",1328,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1359_dot,"nape.geom.Vec2","dot",0x324b5b85,"nape.geom.Vec2.dot","nape/geom/Vec2.hx",1359,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1419_cross,"nape.geom.Vec2","cross",0x4f0eaf7c,"nape.geom.Vec2.cross","nape/geom/Vec2.hx",1419,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1470_perp,"nape.geom.Vec2","perp",0xd78bb077,"nape.geom.Vec2.perp","nape/geom/Vec2.hx",1470,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_1481_toString,"nape.geom.Vec2","toString",0xbca7a630,"nape.geom.Vec2.toString","nape/geom/Vec2.hx",1481,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_257_weak,"nape.geom.Vec2","weak",0xdc2c1ffc,"nape.geom.Vec2.weak","nape/geom/Vec2.hx",257,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_273_get,"nape.geom.Vec2","get",0x324d9992,"nape.geom.Vec2.get","nape/geom/Vec2.hx",273,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_505_fromPolar,"nape.geom.Vec2","fromPolar",0xa89cd7f0,"nape.geom.Vec2.fromPolar","nape/geom/Vec2.hx",505,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_711_dsq,"nape.geom.Vec2","dsq",0x324b5efe,"nape.geom.Vec2.dsq","nape/geom/Vec2.hx",711,0x020b6534)
HX_LOCAL_STACK_FRAME(_hx_pos_7b41e6298c0d3dcf_759_distance,"nape.geom.Vec2","distance",0xf03268b9,"nape.geom.Vec2.distance","nape/geom/Vec2.hx",759,0x020b6534)
namespace nape{
namespace geom{

void Vec2_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_204_new)
HXLINE( 212)		this->zpp_pool = null();
HXLINE( 208)		this->zpp_inner = null();
HXLINE( 402)		bool _hx_tmp;
HXDLIN( 402)		if ((x == x)) {
HXLINE( 402)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 402)			_hx_tmp = true;
            		}
HXDLIN( 402)		if (_hx_tmp) {
HXLINE( 403)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXLINE( 406)		 ::zpp_nape::geom::ZPP_Vec2 ret;
HXDLIN( 406)		{
HXLINE( 406)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 406)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 406)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 406)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN( 406)				ret->next = null();
            			}
HXDLIN( 406)			ret->weak = false;
            		}
HXDLIN( 406)		ret->_immutable = false;
HXDLIN( 406)		{
HXLINE( 406)			ret->x = x;
HXDLIN( 406)			ret->y = y;
            		}
HXDLIN( 406)		this->zpp_inner = ret;
HXLINE( 407)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Vec2_obj::__CreateEmpty() { return new Vec2_obj; }

void *Vec2_obj::_hx_vtable = 0;

Dynamic Vec2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec2_obj > _hx_result = new Vec2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Vec2_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08dbfe6a;
}

void Vec2_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_328_dispose)
HXLINE( 331)		if (this->zpp_disp) {
HXLINE( 331)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 334)		{
HXLINE( 334)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 334)			if (_this->_immutable) {
HXLINE( 334)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN( 334)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 334)				_this->_isimmutable();
            			}
            		}
HXLINE( 336)		if (this->zpp_inner->_inuse) {
HXLINE( 337)			HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            		}
HXLINE( 340)		 ::zpp_nape::geom::ZPP_Vec2 inner = this->zpp_inner;
HXLINE( 341)		this->zpp_inner->outer = null();
HXLINE( 342)		this->zpp_inner = null();
HXLINE( 343)		{
HXLINE( 344)			 ::nape::geom::Vec2 o = hx::ObjectPtr<OBJ_>(this);
HXLINE( 354)			o->zpp_pool = null();
HXLINE( 355)			if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 355)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            			}
            			else {
HXLINE( 356)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            			}
HXLINE( 357)			::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXLINE( 367)			o->zpp_disp = true;
            		}
HXLINE( 370)		{
HXLINE( 371)			 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXLINE( 380)			{
HXLINE( 380)				if (hx::IsNotNull( o1->outer )) {
HXLINE( 380)					o1->outer->zpp_inner = null();
HXDLIN( 380)					o1->outer = null();
            				}
HXDLIN( 380)				o1->_isimmutable = null();
HXDLIN( 380)				o1->_validate = null();
HXDLIN( 380)				o1->_invalidate = null();
            			}
HXLINE( 381)			o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 382)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,dispose,(void))

 ::nape::geom::Vec2 Vec2_obj::copy(hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_425_copy)
HXLINE( 428)		if (this->zpp_disp) {
HXLINE( 428)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 431)		if (this->zpp_disp) {
HXLINE( 431)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 431)		{
HXLINE( 431)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 431)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 431)				_this->_validate();
            			}
            		}
HXDLIN( 431)		Float x = this->zpp_inner->x;
HXDLIN( 431)		if (this->zpp_disp) {
HXLINE( 431)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 431)		{
HXLINE( 431)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 431)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 431)				_this1->_validate();
            			}
            		}
HXDLIN( 431)		Float y = this->zpp_inner->y;
HXDLIN( 431)		bool _hx_tmp;
HXDLIN( 431)		if ((x == x)) {
HXLINE( 431)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 431)			_hx_tmp = true;
            		}
HXDLIN( 431)		if (_hx_tmp) {
HXLINE( 431)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 431)		 ::nape::geom::Vec2 ret;
HXDLIN( 431)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 431)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 431)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 431)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 431)			ret->zpp_pool = null();
HXDLIN( 431)			ret->zpp_disp = false;
HXDLIN( 431)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 431)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 431)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 431)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 431)			{
HXLINE( 431)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 431)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 431)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 431)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 431)					ret1->next = null();
            				}
HXDLIN( 431)				ret1->weak = false;
            			}
HXDLIN( 431)			ret1->_immutable = false;
HXDLIN( 431)			{
HXLINE( 431)				ret1->x = x;
HXDLIN( 431)				ret1->y = y;
            			}
HXDLIN( 431)			ret->zpp_inner = ret1;
HXDLIN( 431)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 431)			bool _hx_tmp1;
HXDLIN( 431)			if (hx::IsNotNull( ret )) {
HXLINE( 431)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 431)				_hx_tmp1 = false;
            			}
HXDLIN( 431)			if (_hx_tmp1) {
HXLINE( 431)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 431)			{
HXLINE( 431)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 431)				if (_this2->_immutable) {
HXLINE( 431)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 431)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 431)					_this2->_isimmutable();
            				}
            			}
HXDLIN( 431)			bool _hx_tmp2;
HXDLIN( 431)			if ((x == x)) {
HXLINE( 431)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 431)				_hx_tmp2 = true;
            			}
HXDLIN( 431)			if (_hx_tmp2) {
HXLINE( 431)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 431)			bool _hx_tmp3;
HXDLIN( 431)			bool _hx_tmp4;
HXDLIN( 431)			if (hx::IsNotNull( ret )) {
HXLINE( 431)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 431)				_hx_tmp4 = false;
            			}
HXDLIN( 431)			if (_hx_tmp4) {
HXLINE( 431)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 431)			{
HXLINE( 431)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 431)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 431)					_this3->_validate();
            				}
            			}
HXDLIN( 431)			if ((ret->zpp_inner->x == x)) {
HXLINE( 431)				bool _hx_tmp5;
HXDLIN( 431)				if (hx::IsNotNull( ret )) {
HXLINE( 431)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 431)					_hx_tmp5 = false;
            				}
HXDLIN( 431)				if (_hx_tmp5) {
HXLINE( 431)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 431)				{
HXLINE( 431)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN( 431)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 431)						_this4->_validate();
            					}
            				}
HXDLIN( 431)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 431)				_hx_tmp3 = false;
            			}
HXDLIN( 431)			if (!(_hx_tmp3)) {
HXLINE( 431)				{
HXLINE( 431)					ret->zpp_inner->x = x;
HXDLIN( 431)					ret->zpp_inner->y = y;
            				}
HXDLIN( 431)				{
HXLINE( 431)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN( 431)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 431)						_this5->_invalidate(_this5);
            					}
            				}
            			}
            		}
HXDLIN( 431)		ret->zpp_inner->weak = weak;
HXDLIN( 431)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,copy,return )

Float Vec2_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_523_get_x)
HXLINE( 526)		if (this->zpp_disp) {
HXLINE( 526)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 529)		{
HXLINE( 529)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 529)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 529)				_this->_validate();
            			}
            		}
HXLINE( 530)		return this->zpp_inner->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,get_x,return )

Float Vec2_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_532_set_x)
HXLINE( 533)		{
HXLINE( 536)			if (this->zpp_disp) {
HXLINE( 536)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 539)			{
HXLINE( 539)				 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 539)				if (_this->_immutable) {
HXLINE( 539)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 539)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 539)					_this->_isimmutable();
            				}
            			}
HXLINE( 540)			if (this->zpp_disp) {
HXLINE( 540)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 540)			{
HXLINE( 540)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 540)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 540)					_this1->_validate();
            				}
            			}
HXDLIN( 540)			if ((this->zpp_inner->x != x)) {
HXLINE( 542)				if ((x != x)) {
HXLINE( 543)					HX_STACK_DO_THROW(((HX_("Error: Vec2::",8c,b8,d3,ba) + HX_("x",78,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXLINE( 546)				this->zpp_inner->x = x;
HXLINE( 547)				{
HXLINE( 547)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 547)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 547)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXLINE( 550)		if (this->zpp_disp) {
HXLINE( 550)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 550)		{
HXLINE( 550)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 550)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 550)				_this3->_validate();
            			}
            		}
HXDLIN( 550)		return this->zpp_inner->x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,set_x,return )

Float Vec2_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_559_get_y)
HXLINE( 562)		if (this->zpp_disp) {
HXLINE( 562)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 565)		{
HXLINE( 565)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 565)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 565)				_this->_validate();
            			}
            		}
HXLINE( 566)		return this->zpp_inner->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,get_y,return )

Float Vec2_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_568_set_y)
HXLINE( 569)		{
HXLINE( 572)			if (this->zpp_disp) {
HXLINE( 572)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 575)			{
HXLINE( 575)				 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 575)				if (_this->_immutable) {
HXLINE( 575)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 575)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 575)					_this->_isimmutable();
            				}
            			}
HXLINE( 576)			if (this->zpp_disp) {
HXLINE( 576)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 576)			{
HXLINE( 576)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 576)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 576)					_this1->_validate();
            				}
            			}
HXDLIN( 576)			if ((this->zpp_inner->y != y)) {
HXLINE( 578)				if ((y != y)) {
HXLINE( 579)					HX_STACK_DO_THROW(((HX_("Error: Vec2::",8c,b8,d3,ba) + HX_("y",79,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXLINE( 582)				this->zpp_inner->y = y;
HXLINE( 583)				{
HXLINE( 583)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 583)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 583)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXLINE( 586)		if (this->zpp_disp) {
HXLINE( 586)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 586)		{
HXLINE( 586)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 586)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 586)				_this3->_validate();
            			}
            		}
HXDLIN( 586)		return this->zpp_inner->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,set_y,return )

Float Vec2_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_599_get_length)
HXLINE( 602)		if (this->zpp_disp) {
HXLINE( 602)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 605)		if (this->zpp_disp) {
HXLINE( 605)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 605)		{
HXLINE( 605)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 605)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 605)				_this->_validate();
            			}
            		}
HXDLIN( 605)		Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 605)		if (this->zpp_disp) {
HXLINE( 605)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 605)		{
HXLINE( 605)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 605)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 605)				_this1->_validate();
            			}
            		}
HXDLIN( 605)		Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 605)		if (this->zpp_disp) {
HXLINE( 605)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 605)		{
HXLINE( 605)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 605)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 605)				_this2->_validate();
            			}
            		}
HXDLIN( 605)		Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 605)		if (this->zpp_disp) {
HXLINE( 605)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 605)		{
HXLINE( 605)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 605)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 605)				_this3->_validate();
            			}
            		}
HXDLIN( 605)		return ::Math_obj::sqrt((_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,get_length,return )

Float Vec2_obj::set_length(Float length){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_607_set_length)
HXLINE( 608)		{
HXLINE( 611)			if (this->zpp_disp) {
HXLINE( 611)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 614)			{
HXLINE( 614)				 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 614)				if (_this->_immutable) {
HXLINE( 614)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 614)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 614)					_this->_isimmutable();
            				}
            			}
HXLINE( 616)			if ((length != length)) {
HXLINE( 617)				HX_STACK_DO_THROW(HX_("Error: Vec2::length cannot be NaN",0d,59,b0,59));
            			}
HXLINE( 619)			if (this->zpp_disp) {
HXLINE( 619)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 619)			{
HXLINE( 619)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 619)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 619)					_this1->_validate();
            				}
            			}
HXDLIN( 619)			Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 619)			if (this->zpp_disp) {
HXLINE( 619)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 619)			{
HXLINE( 619)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 619)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 619)					_this2->_validate();
            				}
            			}
HXDLIN( 619)			Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 619)			if (this->zpp_disp) {
HXLINE( 619)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 619)			{
HXLINE( 619)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 619)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 619)					_this3->_validate();
            				}
            			}
HXDLIN( 619)			Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 619)			if (this->zpp_disp) {
HXLINE( 619)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 619)			{
HXLINE( 619)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN( 619)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 619)					_this4->_validate();
            				}
            			}
HXDLIN( 619)			if (((_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y)) == 0)) {
HXLINE( 620)				HX_STACK_DO_THROW(HX_("Error: Cannot set length of a zero vector",00,7b,b2,33));
            			}
HXLINE( 623)			{
HXLINE( 624)				if (this->zpp_disp) {
HXLINE( 624)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 624)				{
HXLINE( 624)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN( 624)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 624)						_this5->_validate();
            					}
            				}
HXDLIN( 624)				Float t = this->zpp_inner->x;
HXDLIN( 624)				if (this->zpp_disp) {
HXLINE( 624)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 624)				{
HXLINE( 624)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN( 624)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 624)						_this6->_validate();
            					}
            				}
HXDLIN( 624)				Float t1 = (t * this->zpp_inner->x);
HXDLIN( 624)				if (this->zpp_disp) {
HXLINE( 624)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 624)				{
HXLINE( 624)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = this->zpp_inner;
HXDLIN( 624)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 624)						_this7->_validate();
            					}
            				}
HXDLIN( 624)				Float t2 = this->zpp_inner->y;
HXDLIN( 624)				if (this->zpp_disp) {
HXLINE( 624)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 624)				{
HXLINE( 624)					 ::zpp_nape::geom::ZPP_Vec2 _this8 = this->zpp_inner;
HXDLIN( 624)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 624)						_this8->_validate();
            					}
            				}
HXDLIN( 624)				Float t3 = (length / ::Math_obj::sqrt((t1 + (t2 * this->zpp_inner->y))));
HXLINE( 633)				{
HXLINE( 633)					 ::nape::geom::Vec2 _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 633)					{
HXLINE( 633)						bool x;
HXDLIN( 633)						if (hx::IsNotNull( _g )) {
HXLINE( 633)							x = _g->zpp_disp;
            						}
            						else {
HXLINE( 633)							x = false;
            						}
HXDLIN( 633)						if (x) {
HXLINE( 633)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 633)						{
HXLINE( 633)							 ::zpp_nape::geom::ZPP_Vec2 _this9 = _g->zpp_inner;
HXDLIN( 633)							if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 633)								_this9->_validate();
            							}
            						}
HXDLIN( 633)						Float x1 = (_g->zpp_inner->x * t3);
HXDLIN( 633)						{
HXLINE( 633)							bool _hx_tmp3;
HXDLIN( 633)							if (hx::IsNotNull( _g )) {
HXLINE( 633)								_hx_tmp3 = _g->zpp_disp;
            							}
            							else {
HXLINE( 633)								_hx_tmp3 = false;
            							}
HXDLIN( 633)							if (_hx_tmp3) {
HXLINE( 633)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 633)							{
HXLINE( 633)								 ::zpp_nape::geom::ZPP_Vec2 _this10 = _g->zpp_inner;
HXDLIN( 633)								if (_this10->_immutable) {
HXLINE( 633)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 633)								if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 633)									_this10->_isimmutable();
            								}
            							}
HXDLIN( 633)							bool _hx_tmp4;
HXDLIN( 633)							if (hx::IsNotNull( _g )) {
HXLINE( 633)								_hx_tmp4 = _g->zpp_disp;
            							}
            							else {
HXLINE( 633)								_hx_tmp4 = false;
            							}
HXDLIN( 633)							if (_hx_tmp4) {
HXLINE( 633)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 633)							{
HXLINE( 633)								 ::zpp_nape::geom::ZPP_Vec2 _this11 = _g->zpp_inner;
HXDLIN( 633)								if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 633)									_this11->_validate();
            								}
            							}
HXDLIN( 633)							if ((_g->zpp_inner->x != x1)) {
HXLINE( 633)								if ((x1 != x1)) {
HXLINE( 633)									HX_STACK_DO_THROW(((HX_("Error: Vec2::",8c,b8,d3,ba) + HX_("x",78,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            								}
HXDLIN( 633)								_g->zpp_inner->x = x1;
HXDLIN( 633)								{
HXLINE( 633)									 ::zpp_nape::geom::ZPP_Vec2 _this12 = _g->zpp_inner;
HXDLIN( 633)									if (hx::IsNotNull( _this12->_invalidate )) {
HXLINE( 633)										_this12->_invalidate(_this12);
            									}
            								}
            							}
            						}
HXDLIN( 633)						{
HXLINE( 633)							bool _hx_tmp5;
HXDLIN( 633)							if (hx::IsNotNull( _g )) {
HXLINE( 633)								_hx_tmp5 = _g->zpp_disp;
            							}
            							else {
HXLINE( 633)								_hx_tmp5 = false;
            							}
HXDLIN( 633)							if (_hx_tmp5) {
HXLINE( 633)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 633)							{
HXLINE( 633)								 ::zpp_nape::geom::ZPP_Vec2 _this13 = _g->zpp_inner;
HXDLIN( 633)								if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 633)									_this13->_validate();
            								}
            							}
            						}
            					}
            				}
HXLINE( 634)				{
HXLINE( 634)					 ::nape::geom::Vec2 _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 634)					{
HXLINE( 634)						bool y;
HXDLIN( 634)						if (hx::IsNotNull( _g1 )) {
HXLINE( 634)							y = _g1->zpp_disp;
            						}
            						else {
HXLINE( 634)							y = false;
            						}
HXDLIN( 634)						if (y) {
HXLINE( 634)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 634)						{
HXLINE( 634)							 ::zpp_nape::geom::ZPP_Vec2 _this14 = _g1->zpp_inner;
HXDLIN( 634)							if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 634)								_this14->_validate();
            							}
            						}
HXDLIN( 634)						Float y1 = (_g1->zpp_inner->y * t3);
HXDLIN( 634)						{
HXLINE( 634)							bool _hx_tmp6;
HXDLIN( 634)							if (hx::IsNotNull( _g1 )) {
HXLINE( 634)								_hx_tmp6 = _g1->zpp_disp;
            							}
            							else {
HXLINE( 634)								_hx_tmp6 = false;
            							}
HXDLIN( 634)							if (_hx_tmp6) {
HXLINE( 634)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 634)							{
HXLINE( 634)								 ::zpp_nape::geom::ZPP_Vec2 _this15 = _g1->zpp_inner;
HXDLIN( 634)								if (_this15->_immutable) {
HXLINE( 634)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 634)								if (hx::IsNotNull( _this15->_isimmutable )) {
HXLINE( 634)									_this15->_isimmutable();
            								}
            							}
HXDLIN( 634)							bool _hx_tmp7;
HXDLIN( 634)							if (hx::IsNotNull( _g1 )) {
HXLINE( 634)								_hx_tmp7 = _g1->zpp_disp;
            							}
            							else {
HXLINE( 634)								_hx_tmp7 = false;
            							}
HXDLIN( 634)							if (_hx_tmp7) {
HXLINE( 634)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 634)							{
HXLINE( 634)								 ::zpp_nape::geom::ZPP_Vec2 _this16 = _g1->zpp_inner;
HXDLIN( 634)								if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 634)									_this16->_validate();
            								}
            							}
HXDLIN( 634)							if ((_g1->zpp_inner->y != y1)) {
HXLINE( 634)								if ((y1 != y1)) {
HXLINE( 634)									HX_STACK_DO_THROW(((HX_("Error: Vec2::",8c,b8,d3,ba) + HX_("y",79,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            								}
HXDLIN( 634)								_g1->zpp_inner->y = y1;
HXDLIN( 634)								{
HXLINE( 634)									 ::zpp_nape::geom::ZPP_Vec2 _this17 = _g1->zpp_inner;
HXDLIN( 634)									if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 634)										_this17->_invalidate(_this17);
            									}
            								}
            							}
            						}
HXDLIN( 634)						{
HXLINE( 634)							bool _hx_tmp8;
HXDLIN( 634)							if (hx::IsNotNull( _g1 )) {
HXLINE( 634)								_hx_tmp8 = _g1->zpp_disp;
            							}
            							else {
HXLINE( 634)								_hx_tmp8 = false;
            							}
HXDLIN( 634)							if (_hx_tmp8) {
HXLINE( 634)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 634)							{
HXLINE( 634)								 ::zpp_nape::geom::ZPP_Vec2 _this18 = _g1->zpp_inner;
HXDLIN( 634)								if (hx::IsNotNull( _this18->_validate )) {
HXLINE( 634)									_this18->_validate();
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 636)			{
HXLINE( 636)				 ::zpp_nape::geom::ZPP_Vec2 _this19 = this->zpp_inner;
HXDLIN( 636)				if (hx::IsNotNull( _this19->_invalidate )) {
HXLINE( 636)					_this19->_invalidate(_this19);
            				}
            			}
            		}
HXLINE( 638)		if (this->zpp_disp) {
HXLINE( 638)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 638)		if (this->zpp_disp) {
HXLINE( 638)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 638)		{
HXLINE( 638)			 ::zpp_nape::geom::ZPP_Vec2 _this20 = this->zpp_inner;
HXDLIN( 638)			if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 638)				_this20->_validate();
            			}
            		}
HXDLIN( 638)		Float _hx_tmp9 = this->zpp_inner->x;
HXDLIN( 638)		if (this->zpp_disp) {
HXLINE( 638)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 638)		{
HXLINE( 638)			 ::zpp_nape::geom::ZPP_Vec2 _this21 = this->zpp_inner;
HXDLIN( 638)			if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 638)				_this21->_validate();
            			}
            		}
HXDLIN( 638)		Float _hx_tmp10 = (_hx_tmp9 * this->zpp_inner->x);
HXDLIN( 638)		if (this->zpp_disp) {
HXLINE( 638)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 638)		{
HXLINE( 638)			 ::zpp_nape::geom::ZPP_Vec2 _this22 = this->zpp_inner;
HXDLIN( 638)			if (hx::IsNotNull( _this22->_validate )) {
HXLINE( 638)				_this22->_validate();
            			}
            		}
HXDLIN( 638)		Float _hx_tmp11 = this->zpp_inner->y;
HXDLIN( 638)		if (this->zpp_disp) {
HXLINE( 638)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 638)		{
HXLINE( 638)			 ::zpp_nape::geom::ZPP_Vec2 _this23 = this->zpp_inner;
HXDLIN( 638)			if (hx::IsNotNull( _this23->_validate )) {
HXLINE( 638)				_this23->_validate();
            			}
            		}
HXDLIN( 638)		return ::Math_obj::sqrt((_hx_tmp10 + (_hx_tmp11 * this->zpp_inner->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,set_length,return )

Float Vec2_obj::lsq(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_650_lsq)
HXLINE( 653)		if (this->zpp_disp) {
HXLINE( 653)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 656)		if (this->zpp_disp) {
HXLINE( 656)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 656)		{
HXLINE( 656)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 656)				_this->_validate();
            			}
            		}
HXDLIN( 656)		Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 656)		if (this->zpp_disp) {
HXLINE( 656)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 656)		{
HXLINE( 656)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 656)				_this1->_validate();
            			}
            		}
HXDLIN( 656)		Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 656)		if (this->zpp_disp) {
HXLINE( 656)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 656)		{
HXLINE( 656)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 656)				_this2->_validate();
            			}
            		}
HXDLIN( 656)		Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 656)		if (this->zpp_disp) {
HXLINE( 656)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 656)		{
HXLINE( 656)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 656)				_this3->_validate();
            			}
            		}
HXDLIN( 656)		return (_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,lsq,return )

 ::nape::geom::Vec2 Vec2_obj::set( ::nape::geom::Vec2 vector){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_671_set)
HXLINE( 674)		if (this->zpp_disp) {
HXLINE( 674)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 679)		bool _hx_tmp;
HXDLIN( 679)		if (hx::IsNotNull( vector )) {
HXLINE( 679)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE( 679)			_hx_tmp = false;
            		}
HXDLIN( 679)		if (_hx_tmp) {
HXLINE( 679)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 682)		{
HXLINE( 682)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 682)			if (_this->_immutable) {
HXLINE( 682)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN( 682)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 682)				_this->_isimmutable();
            			}
            		}
HXLINE( 684)		if (hx::IsNull( vector )) {
HXLINE( 685)			HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            		}
HXLINE( 688)		bool _hx_tmp1;
HXDLIN( 688)		if (hx::IsNotNull( vector )) {
HXLINE( 688)			_hx_tmp1 = vector->zpp_disp;
            		}
            		else {
HXLINE( 688)			_hx_tmp1 = false;
            		}
HXDLIN( 688)		if (_hx_tmp1) {
HXLINE( 688)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 688)		{
HXLINE( 688)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vector->zpp_inner;
HXDLIN( 688)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 688)				_this1->_validate();
            			}
            		}
HXDLIN( 688)		Float x = vector->zpp_inner->x;
HXDLIN( 688)		bool _hx_tmp2;
HXDLIN( 688)		if (hx::IsNotNull( vector )) {
HXLINE( 688)			_hx_tmp2 = vector->zpp_disp;
            		}
            		else {
HXLINE( 688)			_hx_tmp2 = false;
            		}
HXDLIN( 688)		if (_hx_tmp2) {
HXLINE( 688)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 688)		{
HXLINE( 688)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = vector->zpp_inner;
HXDLIN( 688)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 688)				_this2->_validate();
            			}
            		}
HXDLIN( 688)		Float y = vector->zpp_inner->y;
HXDLIN( 688)		if (this->zpp_disp) {
HXLINE( 688)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 688)		{
HXLINE( 688)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 688)			if (_this3->_immutable) {
HXLINE( 688)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN( 688)			if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE( 688)				_this3->_isimmutable();
            			}
            		}
HXDLIN( 688)		bool _hx_tmp3;
HXDLIN( 688)		if ((x == x)) {
HXLINE( 688)			_hx_tmp3 = (y != y);
            		}
            		else {
HXLINE( 688)			_hx_tmp3 = true;
            		}
HXDLIN( 688)		if (_hx_tmp3) {
HXLINE( 688)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 688)		bool _hx_tmp4;
HXDLIN( 688)		if (this->zpp_disp) {
HXLINE( 688)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 688)		{
HXLINE( 688)			 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN( 688)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 688)				_this4->_validate();
            			}
            		}
HXDLIN( 688)		if ((this->zpp_inner->x == x)) {
HXLINE( 688)			if (this->zpp_disp) {
HXLINE( 688)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 688)			{
HXLINE( 688)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN( 688)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 688)					_this5->_validate();
            				}
            			}
HXDLIN( 688)			_hx_tmp4 = (this->zpp_inner->y == y);
            		}
            		else {
HXLINE( 688)			_hx_tmp4 = false;
            		}
HXDLIN( 688)		if (!(_hx_tmp4)) {
HXLINE( 688)			{
HXLINE( 688)				this->zpp_inner->x = x;
HXDLIN( 688)				this->zpp_inner->y = y;
            			}
HXDLIN( 688)			{
HXLINE( 688)				 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN( 688)				if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 688)					_this6->_invalidate(_this6);
            				}
            			}
            		}
HXDLIN( 688)		 ::nape::geom::Vec2 ret = hx::ObjectPtr<OBJ_>(this);
HXLINE( 689)		if (vector->zpp_inner->weak) {
HXLINE( 693)			bool _hx_tmp5;
HXDLIN( 693)			if (hx::IsNotNull( vector )) {
HXLINE( 693)				_hx_tmp5 = vector->zpp_disp;
            			}
            			else {
HXLINE( 693)				_hx_tmp5 = false;
            			}
HXDLIN( 693)			if (_hx_tmp5) {
HXLINE( 693)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 693)			{
HXLINE( 693)				 ::zpp_nape::geom::ZPP_Vec2 _this7 = vector->zpp_inner;
HXDLIN( 693)				if (_this7->_immutable) {
HXLINE( 693)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 693)				if (hx::IsNotNull( _this7->_isimmutable )) {
HXLINE( 693)					_this7->_isimmutable();
            				}
            			}
HXDLIN( 693)			if (vector->zpp_inner->_inuse) {
HXLINE( 693)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 693)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN( 693)			vector->zpp_inner->outer = null();
HXDLIN( 693)			vector->zpp_inner = null();
HXDLIN( 693)			{
HXLINE( 693)				 ::nape::geom::Vec2 o = vector;
HXDLIN( 693)				o->zpp_pool = null();
HXDLIN( 693)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 693)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 693)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 693)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 693)				o->zpp_disp = true;
            			}
HXDLIN( 693)			{
HXLINE( 693)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 693)				{
HXLINE( 693)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 693)						o1->outer->zpp_inner = null();
HXDLIN( 693)						o1->outer = null();
            					}
HXDLIN( 693)					o1->_isimmutable = null();
HXDLIN( 693)					o1->_validate = null();
HXDLIN( 693)					o1->_invalidate = null();
            				}
HXDLIN( 693)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 693)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 700)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,set,return )

 ::nape::geom::Vec2 Vec2_obj::setxy(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_808_setxy)
HXLINE( 811)		if (this->zpp_disp) {
HXLINE( 811)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 814)		{
HXLINE( 814)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 814)			if (_this->_immutable) {
HXLINE( 814)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN( 814)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 814)				_this->_isimmutable();
            			}
            		}
HXLINE( 816)		bool _hx_tmp;
HXDLIN( 816)		if ((x == x)) {
HXLINE( 816)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 816)			_hx_tmp = true;
            		}
HXDLIN( 816)		if (_hx_tmp) {
HXLINE( 817)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXLINE( 820)		bool _hx_tmp1;
HXDLIN( 820)		if (this->zpp_disp) {
HXLINE( 820)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 820)		{
HXLINE( 820)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 820)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 820)				_this1->_validate();
            			}
            		}
HXDLIN( 820)		if ((this->zpp_inner->x == x)) {
HXLINE( 820)			if (this->zpp_disp) {
HXLINE( 820)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 820)			{
HXLINE( 820)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 820)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 820)					_this2->_validate();
            				}
            			}
HXDLIN( 820)			_hx_tmp1 = (this->zpp_inner->y == y);
            		}
            		else {
HXLINE( 820)			_hx_tmp1 = false;
            		}
HXDLIN( 820)		if (!(_hx_tmp1)) {
HXLINE( 821)			{
HXLINE( 822)				this->zpp_inner->x = x;
HXLINE( 823)				this->zpp_inner->y = y;
            			}
HXLINE( 841)			{
HXLINE( 841)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 841)				if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 841)					_this3->_invalidate(_this3);
            				}
            			}
            		}
HXLINE( 843)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,setxy,return )

Float Vec2_obj::get_angle(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_861_get_angle)
HXLINE( 864)		if (this->zpp_disp) {
HXLINE( 864)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 867)		bool _hx_tmp;
HXDLIN( 867)		if (this->zpp_disp) {
HXLINE( 867)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 867)		{
HXLINE( 867)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 867)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 867)				_this->_validate();
            			}
            		}
HXDLIN( 867)		Float _hx_tmp1 = this->zpp_inner->x;
HXDLIN( 867)		if (this->zpp_disp) {
HXLINE( 867)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 867)		{
HXLINE( 867)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 867)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 867)				_this1->_validate();
            			}
            		}
HXDLIN( 867)		if ((_hx_tmp1 == this->zpp_inner->y)) {
HXLINE( 867)			if (this->zpp_disp) {
HXLINE( 867)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 867)			{
HXLINE( 867)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 867)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 867)					_this2->_validate();
            				}
            			}
HXDLIN( 867)			_hx_tmp = (this->zpp_inner->x == 0);
            		}
            		else {
HXLINE( 867)			_hx_tmp = false;
            		}
HXDLIN( 867)		if (_hx_tmp) {
HXLINE( 868)			return ((Float)0.0);
            		}
            		else {
HXLINE( 871)			if (this->zpp_disp) {
HXLINE( 871)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 871)			{
HXLINE( 871)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 871)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 871)					_this3->_validate();
            				}
            			}
HXDLIN( 871)			Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 871)			if (this->zpp_disp) {
HXLINE( 871)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 871)			{
HXLINE( 871)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN( 871)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 871)					_this4->_validate();
            				}
            			}
HXDLIN( 871)			return ::Math_obj::atan2(_hx_tmp2,this->zpp_inner->x);
            		}
HXLINE( 867)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,get_angle,return )

Float Vec2_obj::set_angle(Float angle){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_874_set_angle)
HXLINE( 875)		{
HXLINE( 878)			if (this->zpp_disp) {
HXLINE( 878)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 881)			{
HXLINE( 881)				 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 881)				if (_this->_immutable) {
HXLINE( 881)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 881)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 881)					_this->_isimmutable();
            				}
            			}
HXLINE( 883)			if ((angle != angle)) {
HXLINE( 884)				HX_STACK_DO_THROW(HX_("Error: Vec2::angle cannot be NaN",22,f5,3f,13));
            			}
HXLINE( 887)			if (this->zpp_disp) {
HXLINE( 887)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 887)			if (this->zpp_disp) {
HXLINE( 887)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 887)			{
HXLINE( 887)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 887)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 887)					_this1->_validate();
            				}
            			}
HXDLIN( 887)			Float l = this->zpp_inner->x;
HXDLIN( 887)			if (this->zpp_disp) {
HXLINE( 887)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 887)			{
HXLINE( 887)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 887)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 887)					_this2->_validate();
            				}
            			}
HXDLIN( 887)			Float l1 = (l * this->zpp_inner->x);
HXDLIN( 887)			if (this->zpp_disp) {
HXLINE( 887)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 887)			{
HXLINE( 887)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 887)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 887)					_this3->_validate();
            				}
            			}
HXDLIN( 887)			Float l2 = this->zpp_inner->y;
HXDLIN( 887)			if (this->zpp_disp) {
HXLINE( 887)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 887)			{
HXLINE( 887)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN( 887)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 887)					_this4->_validate();
            				}
            			}
HXDLIN( 887)			Float l3 = ::Math_obj::sqrt((l1 + (l2 * this->zpp_inner->y)));
HXLINE( 888)			{
HXLINE( 888)				Float x = (l3 * ::Math_obj::cos(angle));
HXDLIN( 888)				Float y = (l3 * ::Math_obj::sin(angle));
HXDLIN( 888)				if (this->zpp_disp) {
HXLINE( 888)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 888)				{
HXLINE( 888)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN( 888)					if (_this5->_immutable) {
HXLINE( 888)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 888)					if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE( 888)						_this5->_isimmutable();
            					}
            				}
HXDLIN( 888)				bool _hx_tmp;
HXDLIN( 888)				if ((x == x)) {
HXLINE( 888)					_hx_tmp = (y != y);
            				}
            				else {
HXLINE( 888)					_hx_tmp = true;
            				}
HXDLIN( 888)				if (_hx_tmp) {
HXLINE( 888)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 888)				bool _hx_tmp1;
HXDLIN( 888)				if (this->zpp_disp) {
HXLINE( 888)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 888)				{
HXLINE( 888)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN( 888)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 888)						_this6->_validate();
            					}
            				}
HXDLIN( 888)				if ((this->zpp_inner->x == x)) {
HXLINE( 888)					if (this->zpp_disp) {
HXLINE( 888)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 888)					{
HXLINE( 888)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = this->zpp_inner;
HXDLIN( 888)						if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 888)							_this7->_validate();
            						}
            					}
HXDLIN( 888)					_hx_tmp1 = (this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 888)					_hx_tmp1 = false;
            				}
HXDLIN( 888)				if (!(_hx_tmp1)) {
HXLINE( 888)					{
HXLINE( 888)						this->zpp_inner->x = x;
HXDLIN( 888)						this->zpp_inner->y = y;
            					}
HXDLIN( 888)					{
HXLINE( 888)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = this->zpp_inner;
HXDLIN( 888)						if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 888)							_this8->_invalidate(_this8);
            						}
            					}
            				}
            			}
            		}
HXLINE( 890)		if (this->zpp_disp) {
HXLINE( 890)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 890)		bool _hx_tmp2;
HXDLIN( 890)		if (this->zpp_disp) {
HXLINE( 890)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 890)		{
HXLINE( 890)			 ::zpp_nape::geom::ZPP_Vec2 _this9 = this->zpp_inner;
HXDLIN( 890)			if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 890)				_this9->_validate();
            			}
            		}
HXDLIN( 890)		Float _hx_tmp3 = this->zpp_inner->x;
HXDLIN( 890)		if (this->zpp_disp) {
HXLINE( 890)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 890)		{
HXLINE( 890)			 ::zpp_nape::geom::ZPP_Vec2 _this10 = this->zpp_inner;
HXDLIN( 890)			if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 890)				_this10->_validate();
            			}
            		}
HXDLIN( 890)		if ((_hx_tmp3 == this->zpp_inner->y)) {
HXLINE( 890)			if (this->zpp_disp) {
HXLINE( 890)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 890)			{
HXLINE( 890)				 ::zpp_nape::geom::ZPP_Vec2 _this11 = this->zpp_inner;
HXDLIN( 890)				if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 890)					_this11->_validate();
            				}
            			}
HXDLIN( 890)			_hx_tmp2 = (this->zpp_inner->x == 0);
            		}
            		else {
HXLINE( 890)			_hx_tmp2 = false;
            		}
HXDLIN( 890)		if (_hx_tmp2) {
HXLINE( 890)			return ((Float)0.0);
            		}
            		else {
HXLINE( 890)			if (this->zpp_disp) {
HXLINE( 890)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 890)			{
HXLINE( 890)				 ::zpp_nape::geom::ZPP_Vec2 _this12 = this->zpp_inner;
HXDLIN( 890)				if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 890)					_this12->_validate();
            				}
            			}
HXDLIN( 890)			Float _hx_tmp4 = this->zpp_inner->y;
HXDLIN( 890)			if (this->zpp_disp) {
HXLINE( 890)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 890)			{
HXLINE( 890)				 ::zpp_nape::geom::ZPP_Vec2 _this13 = this->zpp_inner;
HXDLIN( 890)				if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 890)					_this13->_validate();
            				}
            			}
HXDLIN( 890)			return ::Math_obj::atan2(_hx_tmp4,this->zpp_inner->x);
            		}
HXDLIN( 890)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,set_angle,return )

 ::nape::geom::Vec2 Vec2_obj::rotate(Float angle){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_907_rotate)
HXLINE( 910)		if (this->zpp_disp) {
HXLINE( 910)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 913)		{
HXLINE( 913)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 913)			if (_this->_immutable) {
HXLINE( 913)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN( 913)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 913)				_this->_isimmutable();
            			}
            		}
HXLINE( 915)		if ((angle != angle)) {
HXLINE( 916)			HX_STACK_DO_THROW(HX_("Error: Cannot rotate Vec2 by NaN",be,15,02,7a));
            		}
HXLINE( 919)		if ((hx::Mod(angle,(::Math_obj::PI * ( (Float)(2) ))) != 0)) {
HXLINE( 920)			Float ax = ::Math_obj::sin(angle);
HXLINE( 921)			Float ay = ::Math_obj::cos(angle);
HXLINE( 922)			{
HXLINE( 923)				Float t = ((ay * this->zpp_inner->x) - (ax * this->zpp_inner->y));
HXLINE( 924)				this->zpp_inner->y = ((this->zpp_inner->x * ax) + (this->zpp_inner->y * ay));
HXLINE( 925)				this->zpp_inner->x = t;
            			}
HXLINE( 927)			{
HXLINE( 927)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 927)				if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 927)					_this1->_invalidate(_this1);
            				}
            			}
            		}
HXLINE( 929)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,rotate,return )

 ::nape::geom::Vec2 Vec2_obj::reflect( ::nape::geom::Vec2 vec,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_942_reflect)
HXLINE( 945)		if (this->zpp_disp) {
HXLINE( 945)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 950)		bool _hx_tmp;
HXDLIN( 950)		if (hx::IsNotNull( vec )) {
HXLINE( 950)			_hx_tmp = vec->zpp_disp;
            		}
            		else {
HXLINE( 950)			_hx_tmp = false;
            		}
HXDLIN( 950)		if (_hx_tmp) {
HXLINE( 950)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 954)		if (this->zpp_disp) {
HXLINE( 954)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 954)		if (this->zpp_disp) {
HXLINE( 954)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 954)		{
HXLINE( 954)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 954)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 954)				_this->_validate();
            			}
            		}
HXDLIN( 954)		Float _hx_tmp1 = this->zpp_inner->x;
HXDLIN( 954)		if (this->zpp_disp) {
HXLINE( 954)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 954)		{
HXLINE( 954)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 954)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 954)				_this1->_validate();
            			}
            		}
HXDLIN( 954)		Float _hx_tmp2 = (_hx_tmp1 * this->zpp_inner->x);
HXDLIN( 954)		if (this->zpp_disp) {
HXLINE( 954)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 954)		{
HXLINE( 954)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 954)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 954)				_this2->_validate();
            			}
            		}
HXDLIN( 954)		Float _hx_tmp3 = this->zpp_inner->y;
HXDLIN( 954)		if (this->zpp_disp) {
HXLINE( 954)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 954)		{
HXLINE( 954)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 954)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 954)				_this3->_validate();
            			}
            		}
HXDLIN( 954)		if ((::Math_obj::sqrt((_hx_tmp2 + (_hx_tmp3 * this->zpp_inner->y))) == 0)) {
HXLINE( 955)			HX_STACK_DO_THROW(HX_("Error: Cannot reflect in zero vector",d2,5e,d7,3d));
            		}
HXLINE( 958)		if (this->zpp_disp) {
HXLINE( 958)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 958)		if (this->zpp_disp) {
HXLINE( 958)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 958)		{
HXLINE( 958)			 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN( 958)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 958)				_this4->_validate();
            			}
            		}
HXDLIN( 958)		Float x = this->zpp_inner->x;
HXDLIN( 958)		if (this->zpp_disp) {
HXLINE( 958)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 958)		{
HXLINE( 958)			 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN( 958)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 958)				_this5->_validate();
            			}
            		}
HXDLIN( 958)		Float y = this->zpp_inner->y;
HXDLIN( 958)		bool normal;
HXDLIN( 958)		if ((x == x)) {
HXLINE( 958)			normal = (y != y);
            		}
            		else {
HXLINE( 958)			normal = true;
            		}
HXDLIN( 958)		if (normal) {
HXLINE( 958)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 958)		 ::nape::geom::Vec2 ret;
HXDLIN( 958)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 958)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 958)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 958)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 958)			ret->zpp_pool = null();
HXDLIN( 958)			ret->zpp_disp = false;
HXDLIN( 958)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 958)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 958)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 958)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 958)			{
HXLINE( 958)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 958)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 958)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 958)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 958)					ret1->next = null();
            				}
HXDLIN( 958)				ret1->weak = false;
            			}
HXDLIN( 958)			ret1->_immutable = false;
HXDLIN( 958)			{
HXLINE( 958)				ret1->x = x;
HXDLIN( 958)				ret1->y = y;
            			}
HXDLIN( 958)			ret->zpp_inner = ret1;
HXDLIN( 958)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 958)			bool normal1;
HXDLIN( 958)			if (hx::IsNotNull( ret )) {
HXLINE( 958)				normal1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 958)				normal1 = false;
            			}
HXDLIN( 958)			if (normal1) {
HXLINE( 958)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 958)			{
HXLINE( 958)				 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret->zpp_inner;
HXDLIN( 958)				if (_this6->_immutable) {
HXLINE( 958)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 958)				if (hx::IsNotNull( _this6->_isimmutable )) {
HXLINE( 958)					_this6->_isimmutable();
            				}
            			}
HXDLIN( 958)			bool normal2;
HXDLIN( 958)			if ((x == x)) {
HXLINE( 958)				normal2 = (y != y);
            			}
            			else {
HXLINE( 958)				normal2 = true;
            			}
HXDLIN( 958)			if (normal2) {
HXLINE( 958)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 958)			bool normal3;
HXDLIN( 958)			bool normal4;
HXDLIN( 958)			if (hx::IsNotNull( ret )) {
HXLINE( 958)				normal4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 958)				normal4 = false;
            			}
HXDLIN( 958)			if (normal4) {
HXLINE( 958)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 958)			{
HXLINE( 958)				 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret->zpp_inner;
HXDLIN( 958)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 958)					_this7->_validate();
            				}
            			}
HXDLIN( 958)			if ((ret->zpp_inner->x == x)) {
HXLINE( 958)				bool normal5;
HXDLIN( 958)				if (hx::IsNotNull( ret )) {
HXLINE( 958)					normal5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 958)					normal5 = false;
            				}
HXDLIN( 958)				if (normal5) {
HXLINE( 958)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 958)				{
HXLINE( 958)					 ::zpp_nape::geom::ZPP_Vec2 _this8 = ret->zpp_inner;
HXDLIN( 958)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 958)						_this8->_validate();
            					}
            				}
HXDLIN( 958)				normal3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 958)				normal3 = false;
            			}
HXDLIN( 958)			if (!(normal3)) {
HXLINE( 958)				{
HXLINE( 958)					ret->zpp_inner->x = x;
HXDLIN( 958)					ret->zpp_inner->y = y;
            				}
HXDLIN( 958)				{
HXLINE( 958)					 ::zpp_nape::geom::ZPP_Vec2 _this9 = ret->zpp_inner;
HXDLIN( 958)					if (hx::IsNotNull( _this9->_invalidate )) {
HXLINE( 958)						_this9->_invalidate(_this9);
            					}
            				}
            			}
            		}
HXDLIN( 958)		ret->zpp_inner->weak = true;
HXDLIN( 958)		 ::nape::geom::Vec2 normal6 = ret->normalise();
HXLINE( 959)		 ::nape::geom::Vec2 ret2 = vec->sub(normal6->muleq((( (Float)(2) ) * normal6->dot(vec))),weak);
HXLINE( 960)		if (vec->zpp_inner->weak) {
HXLINE( 964)			bool _hx_tmp4;
HXDLIN( 964)			if (hx::IsNotNull( vec )) {
HXLINE( 964)				_hx_tmp4 = vec->zpp_disp;
            			}
            			else {
HXLINE( 964)				_hx_tmp4 = false;
            			}
HXDLIN( 964)			if (_hx_tmp4) {
HXLINE( 964)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 964)			{
HXLINE( 964)				 ::zpp_nape::geom::ZPP_Vec2 _this10 = vec->zpp_inner;
HXDLIN( 964)				if (_this10->_immutable) {
HXLINE( 964)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 964)				if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 964)					_this10->_isimmutable();
            				}
            			}
HXDLIN( 964)			if (vec->zpp_inner->_inuse) {
HXLINE( 964)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 964)			 ::zpp_nape::geom::ZPP_Vec2 inner = vec->zpp_inner;
HXDLIN( 964)			vec->zpp_inner->outer = null();
HXDLIN( 964)			vec->zpp_inner = null();
HXDLIN( 964)			{
HXLINE( 964)				 ::nape::geom::Vec2 o = vec;
HXDLIN( 964)				o->zpp_pool = null();
HXDLIN( 964)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 964)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 964)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 964)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 964)				o->zpp_disp = true;
            			}
HXDLIN( 964)			{
HXLINE( 964)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 964)				{
HXLINE( 964)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 964)						o1->outer->zpp_inner = null();
HXDLIN( 964)						o1->outer = null();
            					}
HXDLIN( 964)					o1->_isimmutable = null();
HXDLIN( 964)					o1->_validate = null();
HXDLIN( 964)					o1->_invalidate = null();
            				}
HXDLIN( 964)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 964)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 971)		return ret2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,reflect,return )

 ::nape::geom::Vec2 Vec2_obj::normalise(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_984_normalise)
HXLINE( 987)		if (this->zpp_disp) {
HXLINE( 987)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 990)		{
HXLINE( 990)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN( 990)			if (_this->_immutable) {
HXLINE( 990)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN( 990)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 990)				_this->_isimmutable();
            			}
            		}
HXLINE( 992)		if (this->zpp_disp) {
HXLINE( 992)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 992)		if (this->zpp_disp) {
HXLINE( 992)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 992)		{
HXLINE( 992)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN( 992)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 992)				_this1->_validate();
            			}
            		}
HXDLIN( 992)		Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 992)		if (this->zpp_disp) {
HXLINE( 992)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 992)		{
HXLINE( 992)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN( 992)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 992)				_this2->_validate();
            			}
            		}
HXDLIN( 992)		Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 992)		if (this->zpp_disp) {
HXLINE( 992)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 992)		{
HXLINE( 992)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN( 992)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 992)				_this3->_validate();
            			}
            		}
HXDLIN( 992)		Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 992)		if (this->zpp_disp) {
HXLINE( 992)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 992)		{
HXLINE( 992)			 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN( 992)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 992)				_this4->_validate();
            			}
            		}
HXDLIN( 992)		if ((::Math_obj::sqrt((_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y))) == 0)) {
HXLINE( 993)			HX_STACK_DO_THROW(HX_("Error: Cannot normalise vector of length 0",7d,68,b1,86));
            		}
HXLINE( 996)		{
HXLINE( 997)			if (this->zpp_disp) {
HXLINE( 997)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 997)			{
HXLINE( 997)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN( 997)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 997)					_this5->_validate();
            				}
            			}
HXDLIN( 997)			Float d = this->zpp_inner->x;
HXDLIN( 997)			if (this->zpp_disp) {
HXLINE( 997)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 997)			{
HXLINE( 997)				 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN( 997)				if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 997)					_this6->_validate();
            				}
            			}
HXDLIN( 997)			Float d1 = (d * this->zpp_inner->x);
HXDLIN( 997)			if (this->zpp_disp) {
HXLINE( 997)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 997)			{
HXLINE( 997)				 ::zpp_nape::geom::ZPP_Vec2 _this7 = this->zpp_inner;
HXDLIN( 997)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 997)					_this7->_validate();
            				}
            			}
HXDLIN( 997)			Float d2 = this->zpp_inner->y;
HXDLIN( 997)			if (this->zpp_disp) {
HXLINE( 997)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 997)			{
HXLINE( 997)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = this->zpp_inner;
HXDLIN( 997)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 997)					_this8->_validate();
            				}
            			}
HXDLIN( 997)			Float d3 = (d1 + (d2 * this->zpp_inner->y));
HXLINE(1006)			Float imag = (((Float)1.0) / ::Math_obj::sqrt(d3));
HXLINE(1007)			{
HXLINE(1008)				Float t = imag;
HXLINE(1017)				{
HXLINE(1017)					 ::nape::geom::Vec2 _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1017)					{
HXLINE(1017)						bool x;
HXDLIN(1017)						if (hx::IsNotNull( _g )) {
HXLINE(1017)							x = _g->zpp_disp;
            						}
            						else {
HXLINE(1017)							x = false;
            						}
HXDLIN(1017)						if (x) {
HXLINE(1017)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN(1017)						{
HXLINE(1017)							 ::zpp_nape::geom::ZPP_Vec2 _this9 = _g->zpp_inner;
HXDLIN(1017)							if (hx::IsNotNull( _this9->_validate )) {
HXLINE(1017)								_this9->_validate();
            							}
            						}
HXDLIN(1017)						Float x1 = (_g->zpp_inner->x * t);
HXDLIN(1017)						{
HXLINE(1017)							bool _hx_tmp3;
HXDLIN(1017)							if (hx::IsNotNull( _g )) {
HXLINE(1017)								_hx_tmp3 = _g->zpp_disp;
            							}
            							else {
HXLINE(1017)								_hx_tmp3 = false;
            							}
HXDLIN(1017)							if (_hx_tmp3) {
HXLINE(1017)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1017)							{
HXLINE(1017)								 ::zpp_nape::geom::ZPP_Vec2 _this10 = _g->zpp_inner;
HXDLIN(1017)								if (_this10->_immutable) {
HXLINE(1017)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(1017)								if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE(1017)									_this10->_isimmutable();
            								}
            							}
HXDLIN(1017)							bool _hx_tmp4;
HXDLIN(1017)							if (hx::IsNotNull( _g )) {
HXLINE(1017)								_hx_tmp4 = _g->zpp_disp;
            							}
            							else {
HXLINE(1017)								_hx_tmp4 = false;
            							}
HXDLIN(1017)							if (_hx_tmp4) {
HXLINE(1017)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1017)							{
HXLINE(1017)								 ::zpp_nape::geom::ZPP_Vec2 _this11 = _g->zpp_inner;
HXDLIN(1017)								if (hx::IsNotNull( _this11->_validate )) {
HXLINE(1017)									_this11->_validate();
            								}
            							}
HXDLIN(1017)							if ((_g->zpp_inner->x != x1)) {
HXLINE(1017)								if ((x1 != x1)) {
HXLINE(1017)									HX_STACK_DO_THROW(((HX_("Error: Vec2::",8c,b8,d3,ba) + HX_("x",78,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            								}
HXDLIN(1017)								_g->zpp_inner->x = x1;
HXDLIN(1017)								{
HXLINE(1017)									 ::zpp_nape::geom::ZPP_Vec2 _this12 = _g->zpp_inner;
HXDLIN(1017)									if (hx::IsNotNull( _this12->_invalidate )) {
HXLINE(1017)										_this12->_invalidate(_this12);
            									}
            								}
            							}
            						}
HXDLIN(1017)						{
HXLINE(1017)							bool _hx_tmp5;
HXDLIN(1017)							if (hx::IsNotNull( _g )) {
HXLINE(1017)								_hx_tmp5 = _g->zpp_disp;
            							}
            							else {
HXLINE(1017)								_hx_tmp5 = false;
            							}
HXDLIN(1017)							if (_hx_tmp5) {
HXLINE(1017)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1017)							{
HXLINE(1017)								 ::zpp_nape::geom::ZPP_Vec2 _this13 = _g->zpp_inner;
HXDLIN(1017)								if (hx::IsNotNull( _this13->_validate )) {
HXLINE(1017)									_this13->_validate();
            								}
            							}
            						}
            					}
            				}
HXLINE(1018)				{
HXLINE(1018)					 ::nape::geom::Vec2 _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1018)					{
HXLINE(1018)						bool y;
HXDLIN(1018)						if (hx::IsNotNull( _g1 )) {
HXLINE(1018)							y = _g1->zpp_disp;
            						}
            						else {
HXLINE(1018)							y = false;
            						}
HXDLIN(1018)						if (y) {
HXLINE(1018)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN(1018)						{
HXLINE(1018)							 ::zpp_nape::geom::ZPP_Vec2 _this14 = _g1->zpp_inner;
HXDLIN(1018)							if (hx::IsNotNull( _this14->_validate )) {
HXLINE(1018)								_this14->_validate();
            							}
            						}
HXDLIN(1018)						Float y1 = (_g1->zpp_inner->y * t);
HXDLIN(1018)						{
HXLINE(1018)							bool _hx_tmp6;
HXDLIN(1018)							if (hx::IsNotNull( _g1 )) {
HXLINE(1018)								_hx_tmp6 = _g1->zpp_disp;
            							}
            							else {
HXLINE(1018)								_hx_tmp6 = false;
            							}
HXDLIN(1018)							if (_hx_tmp6) {
HXLINE(1018)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1018)							{
HXLINE(1018)								 ::zpp_nape::geom::ZPP_Vec2 _this15 = _g1->zpp_inner;
HXDLIN(1018)								if (_this15->_immutable) {
HXLINE(1018)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(1018)								if (hx::IsNotNull( _this15->_isimmutable )) {
HXLINE(1018)									_this15->_isimmutable();
            								}
            							}
HXDLIN(1018)							bool _hx_tmp7;
HXDLIN(1018)							if (hx::IsNotNull( _g1 )) {
HXLINE(1018)								_hx_tmp7 = _g1->zpp_disp;
            							}
            							else {
HXLINE(1018)								_hx_tmp7 = false;
            							}
HXDLIN(1018)							if (_hx_tmp7) {
HXLINE(1018)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1018)							{
HXLINE(1018)								 ::zpp_nape::geom::ZPP_Vec2 _this16 = _g1->zpp_inner;
HXDLIN(1018)								if (hx::IsNotNull( _this16->_validate )) {
HXLINE(1018)									_this16->_validate();
            								}
            							}
HXDLIN(1018)							if ((_g1->zpp_inner->y != y1)) {
HXLINE(1018)								if ((y1 != y1)) {
HXLINE(1018)									HX_STACK_DO_THROW(((HX_("Error: Vec2::",8c,b8,d3,ba) + HX_("y",79,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            								}
HXDLIN(1018)								_g1->zpp_inner->y = y1;
HXDLIN(1018)								{
HXLINE(1018)									 ::zpp_nape::geom::ZPP_Vec2 _this17 = _g1->zpp_inner;
HXDLIN(1018)									if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE(1018)										_this17->_invalidate(_this17);
            									}
            								}
            							}
            						}
HXDLIN(1018)						{
HXLINE(1018)							bool _hx_tmp8;
HXDLIN(1018)							if (hx::IsNotNull( _g1 )) {
HXLINE(1018)								_hx_tmp8 = _g1->zpp_disp;
            							}
            							else {
HXLINE(1018)								_hx_tmp8 = false;
            							}
HXDLIN(1018)							if (_hx_tmp8) {
HXLINE(1018)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1018)							{
HXLINE(1018)								 ::zpp_nape::geom::ZPP_Vec2 _this18 = _g1->zpp_inner;
HXDLIN(1018)								if (hx::IsNotNull( _this18->_validate )) {
HXLINE(1018)									_this18->_validate();
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1021)		{
HXLINE(1021)			 ::zpp_nape::geom::ZPP_Vec2 _this19 = this->zpp_inner;
HXDLIN(1021)			if (hx::IsNotNull( _this19->_invalidate )) {
HXLINE(1021)				_this19->_invalidate(_this19);
            			}
            		}
HXLINE(1022)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,normalise,return )

 ::nape::geom::Vec2 Vec2_obj::unit(hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1035_unit)
HXLINE(1038)		if (this->zpp_disp) {
HXLINE(1038)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1042)		if (this->zpp_disp) {
HXLINE(1042)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1042)		if (this->zpp_disp) {
HXLINE(1042)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1042)		{
HXLINE(1042)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1042)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1042)				_this->_validate();
            			}
            		}
HXDLIN(1042)		Float _hx_tmp = this->zpp_inner->x;
HXDLIN(1042)		if (this->zpp_disp) {
HXLINE(1042)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1042)		{
HXLINE(1042)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1042)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1042)				_this1->_validate();
            			}
            		}
HXDLIN(1042)		Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN(1042)		if (this->zpp_disp) {
HXLINE(1042)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1042)		{
HXLINE(1042)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN(1042)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1042)				_this2->_validate();
            			}
            		}
HXDLIN(1042)		Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN(1042)		if (this->zpp_disp) {
HXLINE(1042)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1042)		{
HXLINE(1042)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN(1042)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1042)				_this3->_validate();
            			}
            		}
HXDLIN(1042)		if ((::Math_obj::sqrt((_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y))) == 0)) {
HXLINE(1043)			HX_STACK_DO_THROW(HX_("Error: Cannot normalise vector of length 0",7d,68,b1,86));
            		}
HXLINE(1046)		if (this->zpp_disp) {
HXLINE(1046)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1046)		{
HXLINE(1046)			 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN(1046)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1046)				_this4->_validate();
            			}
            		}
HXDLIN(1046)		Float x = this->zpp_inner->x;
HXDLIN(1046)		if (this->zpp_disp) {
HXLINE(1046)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1046)		{
HXLINE(1046)			 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN(1046)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1046)				_this5->_validate();
            			}
            		}
HXDLIN(1046)		Float x1 = (x * this->zpp_inner->x);
HXDLIN(1046)		if (this->zpp_disp) {
HXLINE(1046)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1046)		{
HXLINE(1046)			 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN(1046)			if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1046)				_this6->_validate();
            			}
            		}
HXDLIN(1046)		Float x2 = this->zpp_inner->y;
HXDLIN(1046)		if (this->zpp_disp) {
HXLINE(1046)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1046)		{
HXLINE(1046)			 ::zpp_nape::geom::ZPP_Vec2 _this7 = this->zpp_inner;
HXDLIN(1046)			if (hx::IsNotNull( _this7->_validate )) {
HXLINE(1046)				_this7->_validate();
            			}
            		}
HXDLIN(1046)		Float scale = (( (Float)(1) ) / ::Math_obj::sqrt((x1 + (x2 * this->zpp_inner->y))));
HXLINE(1047)		if (this->zpp_disp) {
HXLINE(1047)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1047)		{
HXLINE(1047)			 ::zpp_nape::geom::ZPP_Vec2 _this8 = this->zpp_inner;
HXDLIN(1047)			if (hx::IsNotNull( _this8->_validate )) {
HXLINE(1047)				_this8->_validate();
            			}
            		}
HXDLIN(1047)		Float x3 = (this->zpp_inner->x * scale);
HXDLIN(1047)		if (this->zpp_disp) {
HXLINE(1047)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1047)		{
HXLINE(1047)			 ::zpp_nape::geom::ZPP_Vec2 _this9 = this->zpp_inner;
HXDLIN(1047)			if (hx::IsNotNull( _this9->_validate )) {
HXLINE(1047)				_this9->_validate();
            			}
            		}
HXDLIN(1047)		Float y = (this->zpp_inner->y * scale);
HXDLIN(1047)		bool _hx_tmp3;
HXDLIN(1047)		if ((x3 == x3)) {
HXLINE(1047)			_hx_tmp3 = (y != y);
            		}
            		else {
HXLINE(1047)			_hx_tmp3 = true;
            		}
HXDLIN(1047)		if (_hx_tmp3) {
HXLINE(1047)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1047)		 ::nape::geom::Vec2 ret;
HXDLIN(1047)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1047)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1047)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1047)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1047)			ret->zpp_pool = null();
HXDLIN(1047)			ret->zpp_disp = false;
HXDLIN(1047)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1047)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1047)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1047)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1047)			{
HXLINE(1047)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1047)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1047)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1047)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1047)					ret1->next = null();
            				}
HXDLIN(1047)				ret1->weak = false;
            			}
HXDLIN(1047)			ret1->_immutable = false;
HXDLIN(1047)			{
HXLINE(1047)				ret1->x = x3;
HXDLIN(1047)				ret1->y = y;
            			}
HXDLIN(1047)			ret->zpp_inner = ret1;
HXDLIN(1047)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1047)			bool _hx_tmp4;
HXDLIN(1047)			if (hx::IsNotNull( ret )) {
HXLINE(1047)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE(1047)				_hx_tmp4 = false;
            			}
HXDLIN(1047)			if (_hx_tmp4) {
HXLINE(1047)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1047)			{
HXLINE(1047)				 ::zpp_nape::geom::ZPP_Vec2 _this10 = ret->zpp_inner;
HXDLIN(1047)				if (_this10->_immutable) {
HXLINE(1047)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1047)				if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE(1047)					_this10->_isimmutable();
            				}
            			}
HXDLIN(1047)			bool _hx_tmp5;
HXDLIN(1047)			if ((x3 == x3)) {
HXLINE(1047)				_hx_tmp5 = (y != y);
            			}
            			else {
HXLINE(1047)				_hx_tmp5 = true;
            			}
HXDLIN(1047)			if (_hx_tmp5) {
HXLINE(1047)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1047)			bool _hx_tmp6;
HXDLIN(1047)			bool _hx_tmp7;
HXDLIN(1047)			if (hx::IsNotNull( ret )) {
HXLINE(1047)				_hx_tmp7 = ret->zpp_disp;
            			}
            			else {
HXLINE(1047)				_hx_tmp7 = false;
            			}
HXDLIN(1047)			if (_hx_tmp7) {
HXLINE(1047)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1047)			{
HXLINE(1047)				 ::zpp_nape::geom::ZPP_Vec2 _this11 = ret->zpp_inner;
HXDLIN(1047)				if (hx::IsNotNull( _this11->_validate )) {
HXLINE(1047)					_this11->_validate();
            				}
            			}
HXDLIN(1047)			if ((ret->zpp_inner->x == x3)) {
HXLINE(1047)				bool _hx_tmp8;
HXDLIN(1047)				if (hx::IsNotNull( ret )) {
HXLINE(1047)					_hx_tmp8 = ret->zpp_disp;
            				}
            				else {
HXLINE(1047)					_hx_tmp8 = false;
            				}
HXDLIN(1047)				if (_hx_tmp8) {
HXLINE(1047)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1047)				{
HXLINE(1047)					 ::zpp_nape::geom::ZPP_Vec2 _this12 = ret->zpp_inner;
HXDLIN(1047)					if (hx::IsNotNull( _this12->_validate )) {
HXLINE(1047)						_this12->_validate();
            					}
            				}
HXDLIN(1047)				_hx_tmp6 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1047)				_hx_tmp6 = false;
            			}
HXDLIN(1047)			if (!(_hx_tmp6)) {
HXLINE(1047)				{
HXLINE(1047)					ret->zpp_inner->x = x3;
HXDLIN(1047)					ret->zpp_inner->y = y;
            				}
HXDLIN(1047)				{
HXLINE(1047)					 ::zpp_nape::geom::ZPP_Vec2 _this13 = ret->zpp_inner;
HXDLIN(1047)					if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE(1047)						_this13->_invalidate(_this13);
            					}
            				}
            			}
            		}
HXDLIN(1047)		ret->zpp_inner->weak = weak;
HXDLIN(1047)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,unit,return )

 ::nape::geom::Vec2 Vec2_obj::add( ::nape::geom::Vec2 vector,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1066_add)
HXLINE(1069)		if (this->zpp_disp) {
HXLINE(1069)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1074)		bool _hx_tmp;
HXDLIN(1074)		if (hx::IsNotNull( vector )) {
HXLINE(1074)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1074)			_hx_tmp = false;
            		}
HXDLIN(1074)		if (_hx_tmp) {
HXLINE(1074)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1078)		if (hx::IsNull( vector )) {
HXLINE(1079)			HX_STACK_DO_THROW(HX_("Error: Cannot add null vectors",25,e0,51,9f));
            		}
HXLINE(1082)		if (this->zpp_disp) {
HXLINE(1082)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1082)		{
HXLINE(1082)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1082)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1082)				_this->_validate();
            			}
            		}
HXDLIN(1082)		Float x = this->zpp_inner->x;
HXDLIN(1082)		bool x1;
HXDLIN(1082)		if (hx::IsNotNull( vector )) {
HXLINE(1082)			x1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1082)			x1 = false;
            		}
HXDLIN(1082)		if (x1) {
HXLINE(1082)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1082)		{
HXLINE(1082)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vector->zpp_inner;
HXDLIN(1082)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1082)				_this1->_validate();
            			}
            		}
HXDLIN(1082)		Float x2 = (x + vector->zpp_inner->x);
HXDLIN(1082)		if (this->zpp_disp) {
HXLINE(1082)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1082)		{
HXLINE(1082)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN(1082)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1082)				_this2->_validate();
            			}
            		}
HXDLIN(1082)		Float y = this->zpp_inner->y;
HXDLIN(1082)		bool y1;
HXDLIN(1082)		if (hx::IsNotNull( vector )) {
HXLINE(1082)			y1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1082)			y1 = false;
            		}
HXDLIN(1082)		if (y1) {
HXLINE(1082)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1082)		{
HXLINE(1082)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = vector->zpp_inner;
HXDLIN(1082)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1082)				_this3->_validate();
            			}
            		}
HXDLIN(1082)		Float y2 = (y + vector->zpp_inner->y);
HXDLIN(1082)		bool _hx_tmp1;
HXDLIN(1082)		if ((x2 == x2)) {
HXLINE(1082)			_hx_tmp1 = (y2 != y2);
            		}
            		else {
HXLINE(1082)			_hx_tmp1 = true;
            		}
HXDLIN(1082)		if (_hx_tmp1) {
HXLINE(1082)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1082)		 ::nape::geom::Vec2 ret;
HXDLIN(1082)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1082)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1082)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1082)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1082)			ret->zpp_pool = null();
HXDLIN(1082)			ret->zpp_disp = false;
HXDLIN(1082)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1082)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1082)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1082)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1082)			{
HXLINE(1082)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1082)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1082)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1082)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1082)					ret1->next = null();
            				}
HXDLIN(1082)				ret1->weak = false;
            			}
HXDLIN(1082)			ret1->_immutable = false;
HXDLIN(1082)			{
HXLINE(1082)				ret1->x = x2;
HXDLIN(1082)				ret1->y = y2;
            			}
HXDLIN(1082)			ret->zpp_inner = ret1;
HXDLIN(1082)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1082)			bool _hx_tmp2;
HXDLIN(1082)			if (hx::IsNotNull( ret )) {
HXLINE(1082)				_hx_tmp2 = ret->zpp_disp;
            			}
            			else {
HXLINE(1082)				_hx_tmp2 = false;
            			}
HXDLIN(1082)			if (_hx_tmp2) {
HXLINE(1082)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1082)			{
HXLINE(1082)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN(1082)				if (_this4->_immutable) {
HXLINE(1082)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1082)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1082)					_this4->_isimmutable();
            				}
            			}
HXDLIN(1082)			bool _hx_tmp3;
HXDLIN(1082)			if ((x2 == x2)) {
HXLINE(1082)				_hx_tmp3 = (y2 != y2);
            			}
            			else {
HXLINE(1082)				_hx_tmp3 = true;
            			}
HXDLIN(1082)			if (_hx_tmp3) {
HXLINE(1082)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1082)			bool _hx_tmp4;
HXDLIN(1082)			bool _hx_tmp5;
HXDLIN(1082)			if (hx::IsNotNull( ret )) {
HXLINE(1082)				_hx_tmp5 = ret->zpp_disp;
            			}
            			else {
HXLINE(1082)				_hx_tmp5 = false;
            			}
HXDLIN(1082)			if (_hx_tmp5) {
HXLINE(1082)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1082)			{
HXLINE(1082)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN(1082)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1082)					_this5->_validate();
            				}
            			}
HXDLIN(1082)			if ((ret->zpp_inner->x == x2)) {
HXLINE(1082)				bool _hx_tmp6;
HXDLIN(1082)				if (hx::IsNotNull( ret )) {
HXLINE(1082)					_hx_tmp6 = ret->zpp_disp;
            				}
            				else {
HXLINE(1082)					_hx_tmp6 = false;
            				}
HXDLIN(1082)				if (_hx_tmp6) {
HXLINE(1082)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1082)				{
HXLINE(1082)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret->zpp_inner;
HXDLIN(1082)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1082)						_this6->_validate();
            					}
            				}
HXDLIN(1082)				_hx_tmp4 = (ret->zpp_inner->y == y2);
            			}
            			else {
HXLINE(1082)				_hx_tmp4 = false;
            			}
HXDLIN(1082)			if (!(_hx_tmp4)) {
HXLINE(1082)				{
HXLINE(1082)					ret->zpp_inner->x = x2;
HXDLIN(1082)					ret->zpp_inner->y = y2;
            				}
HXDLIN(1082)				{
HXLINE(1082)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret->zpp_inner;
HXDLIN(1082)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1082)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(1082)		ret->zpp_inner->weak = weak;
HXDLIN(1082)		 ::nape::geom::Vec2 ret2 = ret;
HXLINE(1083)		if (vector->zpp_inner->weak) {
HXLINE(1087)			bool _hx_tmp7;
HXDLIN(1087)			if (hx::IsNotNull( vector )) {
HXLINE(1087)				_hx_tmp7 = vector->zpp_disp;
            			}
            			else {
HXLINE(1087)				_hx_tmp7 = false;
            			}
HXDLIN(1087)			if (_hx_tmp7) {
HXLINE(1087)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1087)			{
HXLINE(1087)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = vector->zpp_inner;
HXDLIN(1087)				if (_this8->_immutable) {
HXLINE(1087)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1087)				if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE(1087)					_this8->_isimmutable();
            				}
            			}
HXDLIN(1087)			if (vector->zpp_inner->_inuse) {
HXLINE(1087)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1087)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1087)			vector->zpp_inner->outer = null();
HXDLIN(1087)			vector->zpp_inner = null();
HXDLIN(1087)			{
HXLINE(1087)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1087)				o->zpp_pool = null();
HXDLIN(1087)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1087)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1087)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1087)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1087)				o->zpp_disp = true;
            			}
HXDLIN(1087)			{
HXLINE(1087)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1087)				{
HXLINE(1087)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1087)						o1->outer->zpp_inner = null();
HXDLIN(1087)						o1->outer = null();
            					}
HXDLIN(1087)					o1->_isimmutable = null();
HXDLIN(1087)					o1->_validate = null();
HXDLIN(1087)					o1->_invalidate = null();
            				}
HXDLIN(1087)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1087)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1094)		return ret2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,add,return )

 ::nape::geom::Vec2 Vec2_obj::addMul( ::nape::geom::Vec2 vector,Float scalar,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1119_addMul)
HXLINE(1122)		if (this->zpp_disp) {
HXLINE(1122)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1127)		bool _hx_tmp;
HXDLIN(1127)		if (hx::IsNotNull( vector )) {
HXLINE(1127)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1127)			_hx_tmp = false;
            		}
HXDLIN(1127)		if (_hx_tmp) {
HXLINE(1127)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1131)		if (hx::IsNull( vector )) {
HXLINE(1132)			HX_STACK_DO_THROW(HX_("Error: Cannot add null vectors",25,e0,51,9f));
            		}
HXLINE(1135)		if (this->zpp_disp) {
HXLINE(1135)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1135)		{
HXLINE(1135)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1135)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1135)				_this->_validate();
            			}
            		}
HXDLIN(1135)		Float x = this->zpp_inner->x;
HXDLIN(1135)		bool x1;
HXDLIN(1135)		if (hx::IsNotNull( vector )) {
HXLINE(1135)			x1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1135)			x1 = false;
            		}
HXDLIN(1135)		if (x1) {
HXLINE(1135)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1135)		{
HXLINE(1135)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vector->zpp_inner;
HXDLIN(1135)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1135)				_this1->_validate();
            			}
            		}
HXDLIN(1135)		Float x2 = (x + (vector->zpp_inner->x * scalar));
HXDLIN(1135)		if (this->zpp_disp) {
HXLINE(1135)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1135)		{
HXLINE(1135)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN(1135)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1135)				_this2->_validate();
            			}
            		}
HXDLIN(1135)		Float y = this->zpp_inner->y;
HXDLIN(1135)		bool y1;
HXDLIN(1135)		if (hx::IsNotNull( vector )) {
HXLINE(1135)			y1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1135)			y1 = false;
            		}
HXDLIN(1135)		if (y1) {
HXLINE(1135)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1135)		{
HXLINE(1135)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = vector->zpp_inner;
HXDLIN(1135)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1135)				_this3->_validate();
            			}
            		}
HXDLIN(1135)		Float y2 = (y + (vector->zpp_inner->y * scalar));
HXDLIN(1135)		bool _hx_tmp1;
HXDLIN(1135)		if ((x2 == x2)) {
HXLINE(1135)			_hx_tmp1 = (y2 != y2);
            		}
            		else {
HXLINE(1135)			_hx_tmp1 = true;
            		}
HXDLIN(1135)		if (_hx_tmp1) {
HXLINE(1135)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1135)		 ::nape::geom::Vec2 ret;
HXDLIN(1135)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1135)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1135)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1135)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1135)			ret->zpp_pool = null();
HXDLIN(1135)			ret->zpp_disp = false;
HXDLIN(1135)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1135)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1135)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1135)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1135)			{
HXLINE(1135)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1135)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1135)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1135)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1135)					ret1->next = null();
            				}
HXDLIN(1135)				ret1->weak = false;
            			}
HXDLIN(1135)			ret1->_immutable = false;
HXDLIN(1135)			{
HXLINE(1135)				ret1->x = x2;
HXDLIN(1135)				ret1->y = y2;
            			}
HXDLIN(1135)			ret->zpp_inner = ret1;
HXDLIN(1135)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1135)			bool _hx_tmp2;
HXDLIN(1135)			if (hx::IsNotNull( ret )) {
HXLINE(1135)				_hx_tmp2 = ret->zpp_disp;
            			}
            			else {
HXLINE(1135)				_hx_tmp2 = false;
            			}
HXDLIN(1135)			if (_hx_tmp2) {
HXLINE(1135)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1135)			{
HXLINE(1135)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN(1135)				if (_this4->_immutable) {
HXLINE(1135)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1135)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1135)					_this4->_isimmutable();
            				}
            			}
HXDLIN(1135)			bool _hx_tmp3;
HXDLIN(1135)			if ((x2 == x2)) {
HXLINE(1135)				_hx_tmp3 = (y2 != y2);
            			}
            			else {
HXLINE(1135)				_hx_tmp3 = true;
            			}
HXDLIN(1135)			if (_hx_tmp3) {
HXLINE(1135)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1135)			bool _hx_tmp4;
HXDLIN(1135)			bool _hx_tmp5;
HXDLIN(1135)			if (hx::IsNotNull( ret )) {
HXLINE(1135)				_hx_tmp5 = ret->zpp_disp;
            			}
            			else {
HXLINE(1135)				_hx_tmp5 = false;
            			}
HXDLIN(1135)			if (_hx_tmp5) {
HXLINE(1135)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1135)			{
HXLINE(1135)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN(1135)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1135)					_this5->_validate();
            				}
            			}
HXDLIN(1135)			if ((ret->zpp_inner->x == x2)) {
HXLINE(1135)				bool _hx_tmp6;
HXDLIN(1135)				if (hx::IsNotNull( ret )) {
HXLINE(1135)					_hx_tmp6 = ret->zpp_disp;
            				}
            				else {
HXLINE(1135)					_hx_tmp6 = false;
            				}
HXDLIN(1135)				if (_hx_tmp6) {
HXLINE(1135)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1135)				{
HXLINE(1135)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret->zpp_inner;
HXDLIN(1135)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1135)						_this6->_validate();
            					}
            				}
HXDLIN(1135)				_hx_tmp4 = (ret->zpp_inner->y == y2);
            			}
            			else {
HXLINE(1135)				_hx_tmp4 = false;
            			}
HXDLIN(1135)			if (!(_hx_tmp4)) {
HXLINE(1135)				{
HXLINE(1135)					ret->zpp_inner->x = x2;
HXDLIN(1135)					ret->zpp_inner->y = y2;
            				}
HXDLIN(1135)				{
HXLINE(1135)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret->zpp_inner;
HXDLIN(1135)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1135)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(1135)		ret->zpp_inner->weak = weak;
HXDLIN(1135)		 ::nape::geom::Vec2 ret2 = ret;
HXLINE(1136)		if (vector->zpp_inner->weak) {
HXLINE(1140)			bool _hx_tmp7;
HXDLIN(1140)			if (hx::IsNotNull( vector )) {
HXLINE(1140)				_hx_tmp7 = vector->zpp_disp;
            			}
            			else {
HXLINE(1140)				_hx_tmp7 = false;
            			}
HXDLIN(1140)			if (_hx_tmp7) {
HXLINE(1140)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1140)			{
HXLINE(1140)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = vector->zpp_inner;
HXDLIN(1140)				if (_this8->_immutable) {
HXLINE(1140)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1140)				if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE(1140)					_this8->_isimmutable();
            				}
            			}
HXDLIN(1140)			if (vector->zpp_inner->_inuse) {
HXLINE(1140)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1140)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1140)			vector->zpp_inner->outer = null();
HXDLIN(1140)			vector->zpp_inner = null();
HXDLIN(1140)			{
HXLINE(1140)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1140)				o->zpp_pool = null();
HXDLIN(1140)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1140)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1140)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1140)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1140)				o->zpp_disp = true;
            			}
HXDLIN(1140)			{
HXLINE(1140)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1140)				{
HXLINE(1140)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1140)						o1->outer->zpp_inner = null();
HXDLIN(1140)						o1->outer = null();
            					}
HXDLIN(1140)					o1->_isimmutable = null();
HXDLIN(1140)					o1->_validate = null();
HXDLIN(1140)					o1->_invalidate = null();
            				}
HXDLIN(1140)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1140)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1147)		return ret2;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec2_obj,addMul,return )

 ::nape::geom::Vec2 Vec2_obj::sub( ::nape::geom::Vec2 vector,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1165_sub)
HXLINE(1168)		if (this->zpp_disp) {
HXLINE(1168)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1173)		bool _hx_tmp;
HXDLIN(1173)		if (hx::IsNotNull( vector )) {
HXLINE(1173)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1173)			_hx_tmp = false;
            		}
HXDLIN(1173)		if (_hx_tmp) {
HXLINE(1173)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1177)		if (hx::IsNull( vector )) {
HXLINE(1178)			HX_STACK_DO_THROW(HX_("Error: Cannot subtract null vectors",d4,7c,91,74));
            		}
HXLINE(1181)		if (this->zpp_disp) {
HXLINE(1181)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1181)		{
HXLINE(1181)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1181)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1181)				_this->_validate();
            			}
            		}
HXDLIN(1181)		Float x = this->zpp_inner->x;
HXDLIN(1181)		bool x1;
HXDLIN(1181)		if (hx::IsNotNull( vector )) {
HXLINE(1181)			x1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1181)			x1 = false;
            		}
HXDLIN(1181)		if (x1) {
HXLINE(1181)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1181)		{
HXLINE(1181)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vector->zpp_inner;
HXDLIN(1181)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1181)				_this1->_validate();
            			}
            		}
HXDLIN(1181)		Float x2 = (x - vector->zpp_inner->x);
HXDLIN(1181)		if (this->zpp_disp) {
HXLINE(1181)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1181)		{
HXLINE(1181)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN(1181)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1181)				_this2->_validate();
            			}
            		}
HXDLIN(1181)		Float y = this->zpp_inner->y;
HXDLIN(1181)		bool y1;
HXDLIN(1181)		if (hx::IsNotNull( vector )) {
HXLINE(1181)			y1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1181)			y1 = false;
            		}
HXDLIN(1181)		if (y1) {
HXLINE(1181)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1181)		{
HXLINE(1181)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = vector->zpp_inner;
HXDLIN(1181)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1181)				_this3->_validate();
            			}
            		}
HXDLIN(1181)		Float y2 = (y - vector->zpp_inner->y);
HXDLIN(1181)		bool _hx_tmp1;
HXDLIN(1181)		if ((x2 == x2)) {
HXLINE(1181)			_hx_tmp1 = (y2 != y2);
            		}
            		else {
HXLINE(1181)			_hx_tmp1 = true;
            		}
HXDLIN(1181)		if (_hx_tmp1) {
HXLINE(1181)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1181)		 ::nape::geom::Vec2 ret;
HXDLIN(1181)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1181)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1181)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1181)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1181)			ret->zpp_pool = null();
HXDLIN(1181)			ret->zpp_disp = false;
HXDLIN(1181)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1181)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1181)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1181)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1181)			{
HXLINE(1181)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1181)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1181)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1181)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1181)					ret1->next = null();
            				}
HXDLIN(1181)				ret1->weak = false;
            			}
HXDLIN(1181)			ret1->_immutable = false;
HXDLIN(1181)			{
HXLINE(1181)				ret1->x = x2;
HXDLIN(1181)				ret1->y = y2;
            			}
HXDLIN(1181)			ret->zpp_inner = ret1;
HXDLIN(1181)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1181)			bool _hx_tmp2;
HXDLIN(1181)			if (hx::IsNotNull( ret )) {
HXLINE(1181)				_hx_tmp2 = ret->zpp_disp;
            			}
            			else {
HXLINE(1181)				_hx_tmp2 = false;
            			}
HXDLIN(1181)			if (_hx_tmp2) {
HXLINE(1181)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1181)			{
HXLINE(1181)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN(1181)				if (_this4->_immutable) {
HXLINE(1181)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1181)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1181)					_this4->_isimmutable();
            				}
            			}
HXDLIN(1181)			bool _hx_tmp3;
HXDLIN(1181)			if ((x2 == x2)) {
HXLINE(1181)				_hx_tmp3 = (y2 != y2);
            			}
            			else {
HXLINE(1181)				_hx_tmp3 = true;
            			}
HXDLIN(1181)			if (_hx_tmp3) {
HXLINE(1181)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1181)			bool _hx_tmp4;
HXDLIN(1181)			bool _hx_tmp5;
HXDLIN(1181)			if (hx::IsNotNull( ret )) {
HXLINE(1181)				_hx_tmp5 = ret->zpp_disp;
            			}
            			else {
HXLINE(1181)				_hx_tmp5 = false;
            			}
HXDLIN(1181)			if (_hx_tmp5) {
HXLINE(1181)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1181)			{
HXLINE(1181)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN(1181)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1181)					_this5->_validate();
            				}
            			}
HXDLIN(1181)			if ((ret->zpp_inner->x == x2)) {
HXLINE(1181)				bool _hx_tmp6;
HXDLIN(1181)				if (hx::IsNotNull( ret )) {
HXLINE(1181)					_hx_tmp6 = ret->zpp_disp;
            				}
            				else {
HXLINE(1181)					_hx_tmp6 = false;
            				}
HXDLIN(1181)				if (_hx_tmp6) {
HXLINE(1181)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1181)				{
HXLINE(1181)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret->zpp_inner;
HXDLIN(1181)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1181)						_this6->_validate();
            					}
            				}
HXDLIN(1181)				_hx_tmp4 = (ret->zpp_inner->y == y2);
            			}
            			else {
HXLINE(1181)				_hx_tmp4 = false;
            			}
HXDLIN(1181)			if (!(_hx_tmp4)) {
HXLINE(1181)				{
HXLINE(1181)					ret->zpp_inner->x = x2;
HXDLIN(1181)					ret->zpp_inner->y = y2;
            				}
HXDLIN(1181)				{
HXLINE(1181)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret->zpp_inner;
HXDLIN(1181)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1181)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(1181)		ret->zpp_inner->weak = weak;
HXDLIN(1181)		 ::nape::geom::Vec2 ret2 = ret;
HXLINE(1182)		if (vector->zpp_inner->weak) {
HXLINE(1186)			bool _hx_tmp7;
HXDLIN(1186)			if (hx::IsNotNull( vector )) {
HXLINE(1186)				_hx_tmp7 = vector->zpp_disp;
            			}
            			else {
HXLINE(1186)				_hx_tmp7 = false;
            			}
HXDLIN(1186)			if (_hx_tmp7) {
HXLINE(1186)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1186)			{
HXLINE(1186)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = vector->zpp_inner;
HXDLIN(1186)				if (_this8->_immutable) {
HXLINE(1186)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1186)				if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE(1186)					_this8->_isimmutable();
            				}
            			}
HXDLIN(1186)			if (vector->zpp_inner->_inuse) {
HXLINE(1186)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1186)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1186)			vector->zpp_inner->outer = null();
HXDLIN(1186)			vector->zpp_inner = null();
HXDLIN(1186)			{
HXLINE(1186)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1186)				o->zpp_pool = null();
HXDLIN(1186)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1186)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1186)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1186)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1186)				o->zpp_disp = true;
            			}
HXDLIN(1186)			{
HXLINE(1186)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1186)				{
HXLINE(1186)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1186)						o1->outer->zpp_inner = null();
HXDLIN(1186)						o1->outer = null();
            					}
HXDLIN(1186)					o1->_isimmutable = null();
HXDLIN(1186)					o1->_validate = null();
HXDLIN(1186)					o1->_invalidate = null();
            				}
HXDLIN(1186)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1186)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1193)		return ret2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,sub,return )

 ::nape::geom::Vec2 Vec2_obj::mul(Float scalar,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1209_mul)
HXLINE(1212)		if (this->zpp_disp) {
HXLINE(1212)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1216)		if ((scalar != scalar)) {
HXLINE(1217)			HX_STACK_DO_THROW(HX_("Error: Cannot multiply with NaN",0e,e9,6e,5b));
            		}
HXLINE(1220)		if (this->zpp_disp) {
HXLINE(1220)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1220)		{
HXLINE(1220)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1220)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1220)				_this->_validate();
            			}
            		}
HXDLIN(1220)		Float x = (this->zpp_inner->x * scalar);
HXDLIN(1220)		if (this->zpp_disp) {
HXLINE(1220)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1220)		{
HXLINE(1220)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1220)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1220)				_this1->_validate();
            			}
            		}
HXDLIN(1220)		Float y = (this->zpp_inner->y * scalar);
HXDLIN(1220)		bool _hx_tmp;
HXDLIN(1220)		if ((x == x)) {
HXLINE(1220)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE(1220)			_hx_tmp = true;
            		}
HXDLIN(1220)		if (_hx_tmp) {
HXLINE(1220)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1220)		 ::nape::geom::Vec2 ret;
HXDLIN(1220)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1220)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1220)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1220)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1220)			ret->zpp_pool = null();
HXDLIN(1220)			ret->zpp_disp = false;
HXDLIN(1220)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1220)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1220)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1220)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1220)			{
HXLINE(1220)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1220)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1220)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1220)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1220)					ret1->next = null();
            				}
HXDLIN(1220)				ret1->weak = false;
            			}
HXDLIN(1220)			ret1->_immutable = false;
HXDLIN(1220)			{
HXLINE(1220)				ret1->x = x;
HXDLIN(1220)				ret1->y = y;
            			}
HXDLIN(1220)			ret->zpp_inner = ret1;
HXDLIN(1220)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1220)			bool _hx_tmp1;
HXDLIN(1220)			if (hx::IsNotNull( ret )) {
HXLINE(1220)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE(1220)				_hx_tmp1 = false;
            			}
HXDLIN(1220)			if (_hx_tmp1) {
HXLINE(1220)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1220)			{
HXLINE(1220)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(1220)				if (_this2->_immutable) {
HXLINE(1220)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1220)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE(1220)					_this2->_isimmutable();
            				}
            			}
HXDLIN(1220)			bool _hx_tmp2;
HXDLIN(1220)			if ((x == x)) {
HXLINE(1220)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE(1220)				_hx_tmp2 = true;
            			}
HXDLIN(1220)			if (_hx_tmp2) {
HXLINE(1220)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1220)			bool _hx_tmp3;
HXDLIN(1220)			bool _hx_tmp4;
HXDLIN(1220)			if (hx::IsNotNull( ret )) {
HXLINE(1220)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE(1220)				_hx_tmp4 = false;
            			}
HXDLIN(1220)			if (_hx_tmp4) {
HXLINE(1220)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1220)			{
HXLINE(1220)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(1220)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1220)					_this3->_validate();
            				}
            			}
HXDLIN(1220)			if ((ret->zpp_inner->x == x)) {
HXLINE(1220)				bool _hx_tmp5;
HXDLIN(1220)				if (hx::IsNotNull( ret )) {
HXLINE(1220)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE(1220)					_hx_tmp5 = false;
            				}
HXDLIN(1220)				if (_hx_tmp5) {
HXLINE(1220)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1220)				{
HXLINE(1220)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN(1220)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1220)						_this4->_validate();
            					}
            				}
HXDLIN(1220)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1220)				_hx_tmp3 = false;
            			}
HXDLIN(1220)			if (!(_hx_tmp3)) {
HXLINE(1220)				{
HXLINE(1220)					ret->zpp_inner->x = x;
HXDLIN(1220)					ret->zpp_inner->y = y;
            				}
HXDLIN(1220)				{
HXLINE(1220)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN(1220)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE(1220)						_this5->_invalidate(_this5);
            					}
            				}
            			}
            		}
HXDLIN(1220)		ret->zpp_inner->weak = weak;
HXDLIN(1220)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,mul,return )

 ::nape::geom::Vec2 Vec2_obj::addeq( ::nape::geom::Vec2 vector){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1237_addeq)
HXLINE(1240)		if (this->zpp_disp) {
HXLINE(1240)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1245)		bool _hx_tmp;
HXDLIN(1245)		if (hx::IsNotNull( vector )) {
HXLINE(1245)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1245)			_hx_tmp = false;
            		}
HXDLIN(1245)		if (_hx_tmp) {
HXLINE(1245)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1248)		{
HXLINE(1248)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1248)			if (_this->_immutable) {
HXLINE(1248)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN(1248)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1248)				_this->_isimmutable();
            			}
            		}
HXLINE(1250)		if (hx::IsNull( vector )) {
HXLINE(1251)			HX_STACK_DO_THROW(HX_("Error: Cannot add null vectors",25,e0,51,9f));
            		}
HXLINE(1254)		{
HXLINE(1254)			if (this->zpp_disp) {
HXLINE(1254)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1254)			{
HXLINE(1254)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1254)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1254)					_this1->_validate();
            				}
            			}
HXDLIN(1254)			Float x = this->zpp_inner->x;
HXDLIN(1254)			bool x1;
HXDLIN(1254)			if (hx::IsNotNull( vector )) {
HXLINE(1254)				x1 = vector->zpp_disp;
            			}
            			else {
HXLINE(1254)				x1 = false;
            			}
HXDLIN(1254)			if (x1) {
HXLINE(1254)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1254)			{
HXLINE(1254)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = vector->zpp_inner;
HXDLIN(1254)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1254)					_this2->_validate();
            				}
            			}
HXDLIN(1254)			Float x2 = (x + vector->zpp_inner->x);
HXDLIN(1254)			if (this->zpp_disp) {
HXLINE(1254)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1254)			{
HXLINE(1254)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN(1254)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1254)					_this3->_validate();
            				}
            			}
HXDLIN(1254)			Float y = this->zpp_inner->y;
HXDLIN(1254)			bool y1;
HXDLIN(1254)			if (hx::IsNotNull( vector )) {
HXLINE(1254)				y1 = vector->zpp_disp;
            			}
            			else {
HXLINE(1254)				y1 = false;
            			}
HXDLIN(1254)			if (y1) {
HXLINE(1254)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1254)			{
HXLINE(1254)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = vector->zpp_inner;
HXDLIN(1254)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1254)					_this4->_validate();
            				}
            			}
HXDLIN(1254)			Float y2 = (y + vector->zpp_inner->y);
HXDLIN(1254)			if (this->zpp_disp) {
HXLINE(1254)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1254)			{
HXLINE(1254)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN(1254)				if (_this5->_immutable) {
HXLINE(1254)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1254)				if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE(1254)					_this5->_isimmutable();
            				}
            			}
HXDLIN(1254)			bool _hx_tmp1;
HXDLIN(1254)			if ((x2 == x2)) {
HXLINE(1254)				_hx_tmp1 = (y2 != y2);
            			}
            			else {
HXLINE(1254)				_hx_tmp1 = true;
            			}
HXDLIN(1254)			if (_hx_tmp1) {
HXLINE(1254)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1254)			bool _hx_tmp2;
HXDLIN(1254)			if (this->zpp_disp) {
HXLINE(1254)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1254)			{
HXLINE(1254)				 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN(1254)				if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1254)					_this6->_validate();
            				}
            			}
HXDLIN(1254)			if ((this->zpp_inner->x == x2)) {
HXLINE(1254)				if (this->zpp_disp) {
HXLINE(1254)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1254)				{
HXLINE(1254)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = this->zpp_inner;
HXDLIN(1254)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE(1254)						_this7->_validate();
            					}
            				}
HXDLIN(1254)				_hx_tmp2 = (this->zpp_inner->y == y2);
            			}
            			else {
HXLINE(1254)				_hx_tmp2 = false;
            			}
HXDLIN(1254)			if (!(_hx_tmp2)) {
HXLINE(1254)				{
HXLINE(1254)					this->zpp_inner->x = x2;
HXDLIN(1254)					this->zpp_inner->y = y2;
            				}
HXDLIN(1254)				{
HXLINE(1254)					 ::zpp_nape::geom::ZPP_Vec2 _this8 = this->zpp_inner;
HXDLIN(1254)					if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE(1254)						_this8->_invalidate(_this8);
            					}
            				}
            			}
            		}
HXLINE(1255)		if (vector->zpp_inner->weak) {
HXLINE(1259)			bool _hx_tmp3;
HXDLIN(1259)			if (hx::IsNotNull( vector )) {
HXLINE(1259)				_hx_tmp3 = vector->zpp_disp;
            			}
            			else {
HXLINE(1259)				_hx_tmp3 = false;
            			}
HXDLIN(1259)			if (_hx_tmp3) {
HXLINE(1259)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1259)			{
HXLINE(1259)				 ::zpp_nape::geom::ZPP_Vec2 _this9 = vector->zpp_inner;
HXDLIN(1259)				if (_this9->_immutable) {
HXLINE(1259)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1259)				if (hx::IsNotNull( _this9->_isimmutable )) {
HXLINE(1259)					_this9->_isimmutable();
            				}
            			}
HXDLIN(1259)			if (vector->zpp_inner->_inuse) {
HXLINE(1259)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1259)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1259)			vector->zpp_inner->outer = null();
HXDLIN(1259)			vector->zpp_inner = null();
HXDLIN(1259)			{
HXLINE(1259)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1259)				o->zpp_pool = null();
HXDLIN(1259)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1259)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1259)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1259)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1259)				o->zpp_disp = true;
            			}
HXDLIN(1259)			{
HXLINE(1259)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1259)				{
HXLINE(1259)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1259)						o1->outer->zpp_inner = null();
HXDLIN(1259)						o1->outer = null();
            					}
HXDLIN(1259)					o1->_isimmutable = null();
HXDLIN(1259)					o1->_validate = null();
HXDLIN(1259)					o1->_invalidate = null();
            				}
HXDLIN(1259)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1259)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1266)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,addeq,return )

 ::nape::geom::Vec2 Vec2_obj::subeq( ::nape::geom::Vec2 vector){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1283_subeq)
HXLINE(1286)		if (this->zpp_disp) {
HXLINE(1286)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1291)		bool _hx_tmp;
HXDLIN(1291)		if (hx::IsNotNull( vector )) {
HXLINE(1291)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1291)			_hx_tmp = false;
            		}
HXDLIN(1291)		if (_hx_tmp) {
HXLINE(1291)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1294)		{
HXLINE(1294)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1294)			if (_this->_immutable) {
HXLINE(1294)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN(1294)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1294)				_this->_isimmutable();
            			}
            		}
HXLINE(1296)		if (hx::IsNull( vector )) {
HXLINE(1297)			HX_STACK_DO_THROW(HX_("Error: Cannot subtract null vectors",d4,7c,91,74));
            		}
HXLINE(1300)		{
HXLINE(1300)			if (this->zpp_disp) {
HXLINE(1300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1300)			{
HXLINE(1300)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1300)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1300)					_this1->_validate();
            				}
            			}
HXDLIN(1300)			Float x = this->zpp_inner->x;
HXDLIN(1300)			bool x1;
HXDLIN(1300)			if (hx::IsNotNull( vector )) {
HXLINE(1300)				x1 = vector->zpp_disp;
            			}
            			else {
HXLINE(1300)				x1 = false;
            			}
HXDLIN(1300)			if (x1) {
HXLINE(1300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1300)			{
HXLINE(1300)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = vector->zpp_inner;
HXDLIN(1300)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1300)					_this2->_validate();
            				}
            			}
HXDLIN(1300)			Float x2 = (x - vector->zpp_inner->x);
HXDLIN(1300)			if (this->zpp_disp) {
HXLINE(1300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1300)			{
HXLINE(1300)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN(1300)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1300)					_this3->_validate();
            				}
            			}
HXDLIN(1300)			Float y = this->zpp_inner->y;
HXDLIN(1300)			bool y1;
HXDLIN(1300)			if (hx::IsNotNull( vector )) {
HXLINE(1300)				y1 = vector->zpp_disp;
            			}
            			else {
HXLINE(1300)				y1 = false;
            			}
HXDLIN(1300)			if (y1) {
HXLINE(1300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1300)			{
HXLINE(1300)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = vector->zpp_inner;
HXDLIN(1300)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1300)					_this4->_validate();
            				}
            			}
HXDLIN(1300)			Float y2 = (y - vector->zpp_inner->y);
HXDLIN(1300)			if (this->zpp_disp) {
HXLINE(1300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1300)			{
HXLINE(1300)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN(1300)				if (_this5->_immutable) {
HXLINE(1300)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1300)				if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE(1300)					_this5->_isimmutable();
            				}
            			}
HXDLIN(1300)			bool _hx_tmp1;
HXDLIN(1300)			if ((x2 == x2)) {
HXLINE(1300)				_hx_tmp1 = (y2 != y2);
            			}
            			else {
HXLINE(1300)				_hx_tmp1 = true;
            			}
HXDLIN(1300)			if (_hx_tmp1) {
HXLINE(1300)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1300)			bool _hx_tmp2;
HXDLIN(1300)			if (this->zpp_disp) {
HXLINE(1300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1300)			{
HXLINE(1300)				 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN(1300)				if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1300)					_this6->_validate();
            				}
            			}
HXDLIN(1300)			if ((this->zpp_inner->x == x2)) {
HXLINE(1300)				if (this->zpp_disp) {
HXLINE(1300)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1300)				{
HXLINE(1300)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = this->zpp_inner;
HXDLIN(1300)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE(1300)						_this7->_validate();
            					}
            				}
HXDLIN(1300)				_hx_tmp2 = (this->zpp_inner->y == y2);
            			}
            			else {
HXLINE(1300)				_hx_tmp2 = false;
            			}
HXDLIN(1300)			if (!(_hx_tmp2)) {
HXLINE(1300)				{
HXLINE(1300)					this->zpp_inner->x = x2;
HXDLIN(1300)					this->zpp_inner->y = y2;
            				}
HXDLIN(1300)				{
HXLINE(1300)					 ::zpp_nape::geom::ZPP_Vec2 _this8 = this->zpp_inner;
HXDLIN(1300)					if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE(1300)						_this8->_invalidate(_this8);
            					}
            				}
            			}
            		}
HXLINE(1301)		if (vector->zpp_inner->weak) {
HXLINE(1305)			bool _hx_tmp3;
HXDLIN(1305)			if (hx::IsNotNull( vector )) {
HXLINE(1305)				_hx_tmp3 = vector->zpp_disp;
            			}
            			else {
HXLINE(1305)				_hx_tmp3 = false;
            			}
HXDLIN(1305)			if (_hx_tmp3) {
HXLINE(1305)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1305)			{
HXLINE(1305)				 ::zpp_nape::geom::ZPP_Vec2 _this9 = vector->zpp_inner;
HXDLIN(1305)				if (_this9->_immutable) {
HXLINE(1305)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1305)				if (hx::IsNotNull( _this9->_isimmutable )) {
HXLINE(1305)					_this9->_isimmutable();
            				}
            			}
HXDLIN(1305)			if (vector->zpp_inner->_inuse) {
HXLINE(1305)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1305)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1305)			vector->zpp_inner->outer = null();
HXDLIN(1305)			vector->zpp_inner = null();
HXDLIN(1305)			{
HXLINE(1305)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1305)				o->zpp_pool = null();
HXDLIN(1305)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1305)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1305)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1305)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1305)				o->zpp_disp = true;
            			}
HXDLIN(1305)			{
HXLINE(1305)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1305)				{
HXLINE(1305)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1305)						o1->outer->zpp_inner = null();
HXDLIN(1305)						o1->outer = null();
            					}
HXDLIN(1305)					o1->_isimmutable = null();
HXDLIN(1305)					o1->_validate = null();
HXDLIN(1305)					o1->_invalidate = null();
            				}
HXDLIN(1305)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1305)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1312)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,subeq,return )

 ::nape::geom::Vec2 Vec2_obj::muleq(Float scalar){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1328_muleq)
HXLINE(1331)		if (this->zpp_disp) {
HXLINE(1331)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1334)		{
HXLINE(1334)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1334)			if (_this->_immutable) {
HXLINE(1334)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN(1334)			if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1334)				_this->_isimmutable();
            			}
            		}
HXLINE(1336)		if ((scalar != scalar)) {
HXLINE(1337)			HX_STACK_DO_THROW(HX_("Error: Cannot multiply with NaN",0e,e9,6e,5b));
            		}
HXLINE(1340)		if (this->zpp_disp) {
HXLINE(1340)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1340)		{
HXLINE(1340)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1340)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1340)				_this1->_validate();
            			}
            		}
HXDLIN(1340)		Float x = (this->zpp_inner->x * scalar);
HXDLIN(1340)		if (this->zpp_disp) {
HXLINE(1340)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1340)		{
HXLINE(1340)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN(1340)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1340)				_this2->_validate();
            			}
            		}
HXDLIN(1340)		Float y = (this->zpp_inner->y * scalar);
HXDLIN(1340)		if (this->zpp_disp) {
HXLINE(1340)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1340)		{
HXLINE(1340)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN(1340)			if (_this3->_immutable) {
HXLINE(1340)				HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            			}
HXDLIN(1340)			if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE(1340)				_this3->_isimmutable();
            			}
            		}
HXDLIN(1340)		bool _hx_tmp;
HXDLIN(1340)		if ((x == x)) {
HXLINE(1340)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE(1340)			_hx_tmp = true;
            		}
HXDLIN(1340)		if (_hx_tmp) {
HXLINE(1340)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1340)		bool _hx_tmp1;
HXDLIN(1340)		if (this->zpp_disp) {
HXLINE(1340)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1340)		{
HXLINE(1340)			 ::zpp_nape::geom::ZPP_Vec2 _this4 = this->zpp_inner;
HXDLIN(1340)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1340)				_this4->_validate();
            			}
            		}
HXDLIN(1340)		if ((this->zpp_inner->x == x)) {
HXLINE(1340)			if (this->zpp_disp) {
HXLINE(1340)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1340)			{
HXLINE(1340)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = this->zpp_inner;
HXDLIN(1340)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1340)					_this5->_validate();
            				}
            			}
HXDLIN(1340)			_hx_tmp1 = (this->zpp_inner->y == y);
            		}
            		else {
HXLINE(1340)			_hx_tmp1 = false;
            		}
HXDLIN(1340)		if (!(_hx_tmp1)) {
HXLINE(1340)			{
HXLINE(1340)				this->zpp_inner->x = x;
HXDLIN(1340)				this->zpp_inner->y = y;
            			}
HXDLIN(1340)			{
HXLINE(1340)				 ::zpp_nape::geom::ZPP_Vec2 _this6 = this->zpp_inner;
HXDLIN(1340)				if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE(1340)					_this6->_invalidate(_this6);
            				}
            			}
            		}
HXDLIN(1340)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,muleq,return )

Float Vec2_obj::dot( ::nape::geom::Vec2 vector){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1359_dot)
HXLINE(1362)		if (this->zpp_disp) {
HXLINE(1362)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1367)		bool _hx_tmp;
HXDLIN(1367)		if (hx::IsNotNull( vector )) {
HXLINE(1367)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1367)			_hx_tmp = false;
            		}
HXDLIN(1367)		if (_hx_tmp) {
HXLINE(1367)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1371)		if (hx::IsNull( vector )) {
HXLINE(1372)			HX_STACK_DO_THROW(HX_("Error: Cannot take dot product with null vector",34,b4,1f,c6));
            		}
HXLINE(1375)		if (this->zpp_disp) {
HXLINE(1375)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1375)		{
HXLINE(1375)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1375)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1375)				_this->_validate();
            			}
            		}
HXDLIN(1375)		Float ret = this->zpp_inner->x;
HXDLIN(1375)		bool ret1;
HXDLIN(1375)		if (hx::IsNotNull( vector )) {
HXLINE(1375)			ret1 = vector->zpp_disp;
            		}
            		else {
HXLINE(1375)			ret1 = false;
            		}
HXDLIN(1375)		if (ret1) {
HXLINE(1375)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1375)		{
HXLINE(1375)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vector->zpp_inner;
HXDLIN(1375)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1375)				_this1->_validate();
            			}
            		}
HXDLIN(1375)		Float ret2 = (ret * vector->zpp_inner->x);
HXDLIN(1375)		if (this->zpp_disp) {
HXLINE(1375)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1375)		{
HXLINE(1375)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = this->zpp_inner;
HXDLIN(1375)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1375)				_this2->_validate();
            			}
            		}
HXDLIN(1375)		Float ret3 = this->zpp_inner->y;
HXDLIN(1375)		bool ret4;
HXDLIN(1375)		if (hx::IsNotNull( vector )) {
HXLINE(1375)			ret4 = vector->zpp_disp;
            		}
            		else {
HXLINE(1375)			ret4 = false;
            		}
HXDLIN(1375)		if (ret4) {
HXLINE(1375)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1375)		{
HXLINE(1375)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = vector->zpp_inner;
HXDLIN(1375)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1375)				_this3->_validate();
            			}
            		}
HXDLIN(1375)		Float ret5 = (ret2 + (ret3 * vector->zpp_inner->y));
HXLINE(1376)		if (vector->zpp_inner->weak) {
HXLINE(1380)			bool _hx_tmp1;
HXDLIN(1380)			if (hx::IsNotNull( vector )) {
HXLINE(1380)				_hx_tmp1 = vector->zpp_disp;
            			}
            			else {
HXLINE(1380)				_hx_tmp1 = false;
            			}
HXDLIN(1380)			if (_hx_tmp1) {
HXLINE(1380)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1380)			{
HXLINE(1380)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = vector->zpp_inner;
HXDLIN(1380)				if (_this4->_immutable) {
HXLINE(1380)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1380)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1380)					_this4->_isimmutable();
            				}
            			}
HXDLIN(1380)			if (vector->zpp_inner->_inuse) {
HXLINE(1380)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1380)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1380)			vector->zpp_inner->outer = null();
HXDLIN(1380)			vector->zpp_inner = null();
HXDLIN(1380)			{
HXLINE(1380)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1380)				o->zpp_pool = null();
HXDLIN(1380)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1380)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1380)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1380)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1380)				o->zpp_disp = true;
            			}
HXDLIN(1380)			{
HXLINE(1380)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1380)				{
HXLINE(1380)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1380)						o1->outer->zpp_inner = null();
HXDLIN(1380)						o1->outer = null();
            					}
HXDLIN(1380)					o1->_isimmutable = null();
HXDLIN(1380)					o1->_validate = null();
HXDLIN(1380)					o1->_invalidate = null();
            				}
HXDLIN(1380)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1380)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1387)		return ret5;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,dot,return )

Float Vec2_obj::cross( ::nape::geom::Vec2 vector){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1419_cross)
HXLINE(1422)		if (this->zpp_disp) {
HXLINE(1422)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1427)		bool _hx_tmp;
HXDLIN(1427)		if (hx::IsNotNull( vector )) {
HXLINE(1427)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE(1427)			_hx_tmp = false;
            		}
HXDLIN(1427)		if (_hx_tmp) {
HXLINE(1427)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1431)		if (hx::IsNull( vector )) {
HXLINE(1432)			HX_STACK_DO_THROW(HX_("Error: Cannot take cross product with null vector",dd,58,fb,6c));
            		}
HXLINE(1435)		bool ret;
HXDLIN(1435)		if (hx::IsNotNull( vector )) {
HXLINE(1435)			ret = vector->zpp_disp;
            		}
            		else {
HXLINE(1435)			ret = false;
            		}
HXDLIN(1435)		if (ret) {
HXLINE(1435)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1435)		{
HXLINE(1435)			 ::zpp_nape::geom::ZPP_Vec2 _this = vector->zpp_inner;
HXDLIN(1435)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1435)				_this->_validate();
            			}
            		}
HXDLIN(1435)		Float ret1 = vector->zpp_inner->y;
HXDLIN(1435)		if (this->zpp_disp) {
HXLINE(1435)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1435)		{
HXLINE(1435)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1435)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1435)				_this1->_validate();
            			}
            		}
HXDLIN(1435)		Float ret2 = (ret1 * this->zpp_inner->x);
HXDLIN(1435)		bool ret3;
HXDLIN(1435)		if (hx::IsNotNull( vector )) {
HXLINE(1435)			ret3 = vector->zpp_disp;
            		}
            		else {
HXLINE(1435)			ret3 = false;
            		}
HXDLIN(1435)		if (ret3) {
HXLINE(1435)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1435)		{
HXLINE(1435)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = vector->zpp_inner;
HXDLIN(1435)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1435)				_this2->_validate();
            			}
            		}
HXDLIN(1435)		Float ret4 = vector->zpp_inner->x;
HXDLIN(1435)		if (this->zpp_disp) {
HXLINE(1435)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1435)		{
HXLINE(1435)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = this->zpp_inner;
HXDLIN(1435)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1435)				_this3->_validate();
            			}
            		}
HXDLIN(1435)		Float ret5 = (ret2 - (ret4 * this->zpp_inner->y));
HXLINE(1436)		if (vector->zpp_inner->weak) {
HXLINE(1440)			bool _hx_tmp1;
HXDLIN(1440)			if (hx::IsNotNull( vector )) {
HXLINE(1440)				_hx_tmp1 = vector->zpp_disp;
            			}
            			else {
HXLINE(1440)				_hx_tmp1 = false;
            			}
HXDLIN(1440)			if (_hx_tmp1) {
HXLINE(1440)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1440)			{
HXLINE(1440)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = vector->zpp_inner;
HXDLIN(1440)				if (_this4->_immutable) {
HXLINE(1440)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1440)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1440)					_this4->_isimmutable();
            				}
            			}
HXDLIN(1440)			if (vector->zpp_inner->_inuse) {
HXLINE(1440)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1440)			 ::zpp_nape::geom::ZPP_Vec2 inner = vector->zpp_inner;
HXDLIN(1440)			vector->zpp_inner->outer = null();
HXDLIN(1440)			vector->zpp_inner = null();
HXDLIN(1440)			{
HXLINE(1440)				 ::nape::geom::Vec2 o = vector;
HXDLIN(1440)				o->zpp_pool = null();
HXDLIN(1440)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1440)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1440)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1440)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1440)				o->zpp_disp = true;
            			}
HXDLIN(1440)			{
HXLINE(1440)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1440)				{
HXLINE(1440)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1440)						o1->outer->zpp_inner = null();
HXDLIN(1440)						o1->outer = null();
            					}
HXDLIN(1440)					o1->_isimmutable = null();
HXDLIN(1440)					o1->_validate = null();
HXDLIN(1440)					o1->_invalidate = null();
            				}
HXDLIN(1440)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1440)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1447)		return ret5;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,cross,return )

 ::nape::geom::Vec2 Vec2_obj::perp(hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1470_perp)
HXLINE(1473)		if (this->zpp_disp) {
HXLINE(1473)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1476)		if (this->zpp_disp) {
HXLINE(1476)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1476)		{
HXLINE(1476)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1476)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1476)				_this->_validate();
            			}
            		}
HXDLIN(1476)		Float x = -(this->zpp_inner->y);
HXDLIN(1476)		if (this->zpp_disp) {
HXLINE(1476)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1476)		{
HXLINE(1476)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = this->zpp_inner;
HXDLIN(1476)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1476)				_this1->_validate();
            			}
            		}
HXDLIN(1476)		Float y = this->zpp_inner->x;
HXDLIN(1476)		bool _hx_tmp;
HXDLIN(1476)		if ((x == x)) {
HXLINE(1476)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE(1476)			_hx_tmp = true;
            		}
HXDLIN(1476)		if (_hx_tmp) {
HXLINE(1476)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1476)		 ::nape::geom::Vec2 ret;
HXDLIN(1476)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1476)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1476)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1476)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1476)			ret->zpp_pool = null();
HXDLIN(1476)			ret->zpp_disp = false;
HXDLIN(1476)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1476)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1476)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1476)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1476)			{
HXLINE(1476)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1476)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1476)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1476)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1476)					ret1->next = null();
            				}
HXDLIN(1476)				ret1->weak = false;
            			}
HXDLIN(1476)			ret1->_immutable = false;
HXDLIN(1476)			{
HXLINE(1476)				ret1->x = x;
HXDLIN(1476)				ret1->y = y;
            			}
HXDLIN(1476)			ret->zpp_inner = ret1;
HXDLIN(1476)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1476)			bool _hx_tmp1;
HXDLIN(1476)			if (hx::IsNotNull( ret )) {
HXLINE(1476)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE(1476)				_hx_tmp1 = false;
            			}
HXDLIN(1476)			if (_hx_tmp1) {
HXLINE(1476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1476)			{
HXLINE(1476)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(1476)				if (_this2->_immutable) {
HXLINE(1476)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1476)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE(1476)					_this2->_isimmutable();
            				}
            			}
HXDLIN(1476)			bool _hx_tmp2;
HXDLIN(1476)			if ((x == x)) {
HXLINE(1476)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE(1476)				_hx_tmp2 = true;
            			}
HXDLIN(1476)			if (_hx_tmp2) {
HXLINE(1476)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1476)			bool _hx_tmp3;
HXDLIN(1476)			bool _hx_tmp4;
HXDLIN(1476)			if (hx::IsNotNull( ret )) {
HXLINE(1476)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE(1476)				_hx_tmp4 = false;
            			}
HXDLIN(1476)			if (_hx_tmp4) {
HXLINE(1476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1476)			{
HXLINE(1476)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(1476)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1476)					_this3->_validate();
            				}
            			}
HXDLIN(1476)			if ((ret->zpp_inner->x == x)) {
HXLINE(1476)				bool _hx_tmp5;
HXDLIN(1476)				if (hx::IsNotNull( ret )) {
HXLINE(1476)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE(1476)					_hx_tmp5 = false;
            				}
HXDLIN(1476)				if (_hx_tmp5) {
HXLINE(1476)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1476)				{
HXLINE(1476)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN(1476)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1476)						_this4->_validate();
            					}
            				}
HXDLIN(1476)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1476)				_hx_tmp3 = false;
            			}
HXDLIN(1476)			if (!(_hx_tmp3)) {
HXLINE(1476)				{
HXLINE(1476)					ret->zpp_inner->x = x;
HXDLIN(1476)					ret->zpp_inner->y = y;
            				}
HXDLIN(1476)				{
HXLINE(1476)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN(1476)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE(1476)						_this5->_invalidate(_this5);
            					}
            				}
            			}
            		}
HXDLIN(1476)		ret->zpp_inner->weak = weak;
HXDLIN(1476)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,perp,return )

::String Vec2_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_1481_toString)
HXLINE(1484)		if (this->zpp_disp) {
HXLINE(1484)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1487)		{
HXLINE(1487)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner;
HXDLIN(1487)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1487)				_this->_validate();
            			}
            		}
HXLINE(1488)		return this->zpp_inner->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,toString,return )

 ::nape::geom::Vec2 Vec2_obj::weak(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_257_weak)
HXDLIN( 257)		bool _hx_tmp;
HXDLIN( 257)		if ((x == x)) {
HXDLIN( 257)			_hx_tmp = (y != y);
            		}
            		else {
HXDLIN( 257)			_hx_tmp = true;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXDLIN( 257)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 257)		 ::nape::geom::Vec2 ret;
HXDLIN( 257)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXDLIN( 257)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXDLIN( 257)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 257)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 257)			ret->zpp_pool = null();
HXDLIN( 257)			ret->zpp_disp = false;
HXDLIN( 257)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXDLIN( 257)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 257)		if (hx::IsNull( ret->zpp_inner )) {
HXDLIN( 257)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 257)			{
HXDLIN( 257)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXDLIN( 257)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXDLIN( 257)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 257)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 257)					ret1->next = null();
            				}
HXDLIN( 257)				ret1->weak = false;
            			}
HXDLIN( 257)			ret1->_immutable = false;
HXDLIN( 257)			{
HXDLIN( 257)				ret1->x = x;
HXDLIN( 257)				ret1->y = y;
            			}
HXDLIN( 257)			ret->zpp_inner = ret1;
HXDLIN( 257)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXDLIN( 257)			bool _hx_tmp1;
HXDLIN( 257)			if (hx::IsNotNull( ret )) {
HXDLIN( 257)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXDLIN( 257)				_hx_tmp1 = false;
            			}
HXDLIN( 257)			if (_hx_tmp1) {
HXDLIN( 257)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 257)			{
HXDLIN( 257)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 257)				if (_this->_immutable) {
HXDLIN( 257)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 257)				if (hx::IsNotNull( _this->_isimmutable )) {
HXDLIN( 257)					_this->_isimmutable();
            				}
            			}
HXDLIN( 257)			bool _hx_tmp2;
HXDLIN( 257)			if ((x == x)) {
HXDLIN( 257)				_hx_tmp2 = (y != y);
            			}
            			else {
HXDLIN( 257)				_hx_tmp2 = true;
            			}
HXDLIN( 257)			if (_hx_tmp2) {
HXDLIN( 257)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 257)			bool _hx_tmp3;
HXDLIN( 257)			bool _hx_tmp4;
HXDLIN( 257)			if (hx::IsNotNull( ret )) {
HXDLIN( 257)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXDLIN( 257)				_hx_tmp4 = false;
            			}
HXDLIN( 257)			if (_hx_tmp4) {
HXDLIN( 257)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 257)			{
HXDLIN( 257)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 257)				if (hx::IsNotNull( _this1->_validate )) {
HXDLIN( 257)					_this1->_validate();
            				}
            			}
HXDLIN( 257)			if ((ret->zpp_inner->x == x)) {
HXDLIN( 257)				bool _hx_tmp5;
HXDLIN( 257)				if (hx::IsNotNull( ret )) {
HXDLIN( 257)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXDLIN( 257)					_hx_tmp5 = false;
            				}
HXDLIN( 257)				if (_hx_tmp5) {
HXDLIN( 257)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 257)				{
HXDLIN( 257)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 257)					if (hx::IsNotNull( _this2->_validate )) {
HXDLIN( 257)						_this2->_validate();
            					}
            				}
HXDLIN( 257)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXDLIN( 257)				_hx_tmp3 = false;
            			}
HXDLIN( 257)			if (!(_hx_tmp3)) {
HXDLIN( 257)				{
HXDLIN( 257)					ret->zpp_inner->x = x;
HXDLIN( 257)					ret->zpp_inner->y = y;
            				}
HXDLIN( 257)				{
HXDLIN( 257)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 257)					if (hx::IsNotNull( _this3->_invalidate )) {
HXDLIN( 257)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 257)		ret->zpp_inner->weak = true;
HXDLIN( 257)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,weak,return )

 ::nape::geom::Vec2 Vec2_obj::get(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< bool >  __o_weak){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_273_get)
HXLINE( 275)		bool _hx_tmp;
HXDLIN( 275)		if ((x == x)) {
HXLINE( 275)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 275)			_hx_tmp = true;
            		}
HXDLIN( 275)		if (_hx_tmp) {
HXLINE( 276)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXLINE( 279)		 ::nape::geom::Vec2 ret;
HXLINE( 281)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 282)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 288)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXLINE( 289)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXLINE( 290)			ret->zpp_pool = null();
HXLINE( 292)			ret->zpp_disp = false;
HXLINE( 293)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 293)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXLINE( 300)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 301)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 301)			{
HXLINE( 301)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 301)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 301)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 301)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 301)					ret1->next = null();
            				}
HXDLIN( 301)				ret1->weak = false;
            			}
HXDLIN( 301)			ret1->_immutable = false;
HXDLIN( 301)			{
HXLINE( 301)				ret1->x = x;
HXDLIN( 301)				ret1->y = y;
            			}
HXDLIN( 301)			ret->zpp_inner = ret1;
HXLINE( 302)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 305)			bool _hx_tmp1;
HXDLIN( 305)			if (hx::IsNotNull( ret )) {
HXLINE( 305)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 305)				_hx_tmp1 = false;
            			}
HXDLIN( 305)			if (_hx_tmp1) {
HXLINE( 305)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 305)			{
HXLINE( 305)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 305)				if (_this->_immutable) {
HXLINE( 305)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 305)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 305)					_this->_isimmutable();
            				}
            			}
HXDLIN( 305)			bool _hx_tmp2;
HXDLIN( 305)			if ((x == x)) {
HXLINE( 305)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 305)				_hx_tmp2 = true;
            			}
HXDLIN( 305)			if (_hx_tmp2) {
HXLINE( 305)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 305)			bool _hx_tmp3;
HXDLIN( 305)			bool _hx_tmp4;
HXDLIN( 305)			if (hx::IsNotNull( ret )) {
HXLINE( 305)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 305)				_hx_tmp4 = false;
            			}
HXDLIN( 305)			if (_hx_tmp4) {
HXLINE( 305)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 305)			{
HXLINE( 305)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 305)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 305)					_this1->_validate();
            				}
            			}
HXDLIN( 305)			if ((ret->zpp_inner->x == x)) {
HXLINE( 305)				bool _hx_tmp5;
HXDLIN( 305)				if (hx::IsNotNull( ret )) {
HXLINE( 305)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 305)					_hx_tmp5 = false;
            				}
HXDLIN( 305)				if (_hx_tmp5) {
HXLINE( 305)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 305)				{
HXLINE( 305)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 305)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 305)						_this2->_validate();
            					}
            				}
HXDLIN( 305)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 305)				_hx_tmp3 = false;
            			}
HXDLIN( 305)			if (!(_hx_tmp3)) {
HXLINE( 305)				{
HXLINE( 305)					ret->zpp_inner->x = x;
HXDLIN( 305)					ret->zpp_inner->y = y;
            				}
HXDLIN( 305)				{
HXLINE( 305)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 305)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 305)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXLINE( 307)		ret->zpp_inner->weak = weak;
HXLINE( 308)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec2_obj,get,return )

 ::nape::geom::Vec2 Vec2_obj::fromPolar(Float length,Float angle,hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_505_fromPolar)
HXLINE( 507)		if ((length != length)) {
HXLINE( 508)			HX_STACK_DO_THROW(HX_("Error: Vec2::length cannot be NaN",0d,59,b0,59));
            		}
HXLINE( 510)		if ((angle != angle)) {
HXLINE( 511)			HX_STACK_DO_THROW(HX_("Error: Vec2::angle cannot be NaN",22,f5,3f,13));
            		}
HXLINE( 514)		Float x = (length * ::Math_obj::cos(angle));
HXDLIN( 514)		Float y = (length * ::Math_obj::sin(angle));
HXDLIN( 514)		bool _hx_tmp;
HXDLIN( 514)		if ((x == x)) {
HXLINE( 514)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 514)			_hx_tmp = true;
            		}
HXDLIN( 514)		if (_hx_tmp) {
HXLINE( 514)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 514)		 ::nape::geom::Vec2 ret;
HXDLIN( 514)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 514)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 514)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 514)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 514)			ret->zpp_pool = null();
HXDLIN( 514)			ret->zpp_disp = false;
HXDLIN( 514)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 514)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 514)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 514)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 514)			{
HXLINE( 514)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 514)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 514)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 514)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 514)					ret1->next = null();
            				}
HXDLIN( 514)				ret1->weak = false;
            			}
HXDLIN( 514)			ret1->_immutable = false;
HXDLIN( 514)			{
HXLINE( 514)				ret1->x = x;
HXDLIN( 514)				ret1->y = y;
            			}
HXDLIN( 514)			ret->zpp_inner = ret1;
HXDLIN( 514)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 514)			bool _hx_tmp1;
HXDLIN( 514)			if (hx::IsNotNull( ret )) {
HXLINE( 514)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 514)				_hx_tmp1 = false;
            			}
HXDLIN( 514)			if (_hx_tmp1) {
HXLINE( 514)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 514)			{
HXLINE( 514)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 514)				if (_this->_immutable) {
HXLINE( 514)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 514)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 514)					_this->_isimmutable();
            				}
            			}
HXDLIN( 514)			bool _hx_tmp2;
HXDLIN( 514)			if ((x == x)) {
HXLINE( 514)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 514)				_hx_tmp2 = true;
            			}
HXDLIN( 514)			if (_hx_tmp2) {
HXLINE( 514)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 514)			bool _hx_tmp3;
HXDLIN( 514)			bool _hx_tmp4;
HXDLIN( 514)			if (hx::IsNotNull( ret )) {
HXLINE( 514)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 514)				_hx_tmp4 = false;
            			}
HXDLIN( 514)			if (_hx_tmp4) {
HXLINE( 514)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 514)			{
HXLINE( 514)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 514)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 514)					_this1->_validate();
            				}
            			}
HXDLIN( 514)			if ((ret->zpp_inner->x == x)) {
HXLINE( 514)				bool _hx_tmp5;
HXDLIN( 514)				if (hx::IsNotNull( ret )) {
HXLINE( 514)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 514)					_hx_tmp5 = false;
            				}
HXDLIN( 514)				if (_hx_tmp5) {
HXLINE( 514)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 514)				{
HXLINE( 514)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 514)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 514)						_this2->_validate();
            					}
            				}
HXDLIN( 514)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 514)				_hx_tmp3 = false;
            			}
HXDLIN( 514)			if (!(_hx_tmp3)) {
HXLINE( 514)				{
HXLINE( 514)					ret->zpp_inner->x = x;
HXDLIN( 514)					ret->zpp_inner->y = y;
            				}
HXDLIN( 514)				{
HXLINE( 514)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 514)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 514)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 514)		ret->zpp_inner->weak = weak;
HXDLIN( 514)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec2_obj,fromPolar,return )

Float Vec2_obj::dsq( ::nape::geom::Vec2 a, ::nape::geom::Vec2 b){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_711_dsq)
HXLINE( 714)		bool _hx_tmp;
HXDLIN( 714)		if (hx::IsNotNull( a )) {
HXLINE( 714)			_hx_tmp = a->zpp_disp;
            		}
            		else {
HXLINE( 714)			_hx_tmp = false;
            		}
HXDLIN( 714)		if (_hx_tmp) {
HXLINE( 714)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 719)		bool _hx_tmp1;
HXDLIN( 719)		if (hx::IsNotNull( b )) {
HXLINE( 719)			_hx_tmp1 = b->zpp_disp;
            		}
            		else {
HXLINE( 719)			_hx_tmp1 = false;
            		}
HXDLIN( 719)		if (_hx_tmp1) {
HXLINE( 719)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 723)		bool _hx_tmp2;
HXDLIN( 723)		if (hx::IsNotNull( a )) {
HXLINE( 723)			_hx_tmp2 = hx::IsNull( b );
            		}
            		else {
HXLINE( 723)			_hx_tmp2 = true;
            		}
HXDLIN( 723)		if (_hx_tmp2) {
HXLINE( 723)			HX_STACK_DO_THROW(HX_("Error: Cannot compute squared distance between null Vec2",e5,2e,c5,64));
            		}
HXLINE( 725)		bool _hx_tmp3;
HXDLIN( 725)		if (hx::IsNotNull( a )) {
HXLINE( 725)			_hx_tmp3 = a->zpp_disp;
            		}
            		else {
HXLINE( 725)			_hx_tmp3 = false;
            		}
HXDLIN( 725)		if (_hx_tmp3) {
HXLINE( 725)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 725)		{
HXLINE( 725)			 ::zpp_nape::geom::ZPP_Vec2 _this = a->zpp_inner;
HXDLIN( 725)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 725)				_this->_validate();
            			}
            		}
HXDLIN( 725)		Float ax = a->zpp_inner->x;
HXDLIN( 725)		bool _hx_tmp4;
HXDLIN( 725)		if (hx::IsNotNull( a )) {
HXLINE( 725)			_hx_tmp4 = a->zpp_disp;
            		}
            		else {
HXLINE( 725)			_hx_tmp4 = false;
            		}
HXDLIN( 725)		if (_hx_tmp4) {
HXLINE( 725)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 725)		{
HXLINE( 725)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = a->zpp_inner;
HXDLIN( 725)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 725)				_this1->_validate();
            			}
            		}
HXDLIN( 725)		Float ay = a->zpp_inner->y;
HXDLIN( 725)		bool _hx_tmp5;
HXDLIN( 725)		if (hx::IsNotNull( b )) {
HXLINE( 725)			_hx_tmp5 = b->zpp_disp;
            		}
            		else {
HXLINE( 725)			_hx_tmp5 = false;
            		}
HXDLIN( 725)		if (_hx_tmp5) {
HXLINE( 725)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 725)		{
HXLINE( 725)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = b->zpp_inner;
HXDLIN( 725)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 725)				_this2->_validate();
            			}
            		}
HXDLIN( 725)		Float bx = b->zpp_inner->x;
HXDLIN( 725)		bool _hx_tmp6;
HXDLIN( 725)		if (hx::IsNotNull( b )) {
HXLINE( 725)			_hx_tmp6 = b->zpp_disp;
            		}
            		else {
HXLINE( 725)			_hx_tmp6 = false;
            		}
HXDLIN( 725)		if (_hx_tmp6) {
HXLINE( 725)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 725)		{
HXLINE( 725)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = b->zpp_inner;
HXDLIN( 725)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 725)				_this3->_validate();
            			}
            		}
HXDLIN( 725)		Float dx = ((Float)0.0);
HXDLIN( 725)		Float dy = ((Float)0.0);
HXDLIN( 725)		{
HXLINE( 725)			dx = (ax - bx);
HXDLIN( 725)			dy = (ay - b->zpp_inner->y);
            		}
HXDLIN( 725)		Float ret = ((dx * dx) + (dy * dy));
HXLINE( 726)		if (a->zpp_inner->weak) {
HXLINE( 730)			bool _hx_tmp7;
HXDLIN( 730)			if (hx::IsNotNull( a )) {
HXLINE( 730)				_hx_tmp7 = a->zpp_disp;
            			}
            			else {
HXLINE( 730)				_hx_tmp7 = false;
            			}
HXDLIN( 730)			if (_hx_tmp7) {
HXLINE( 730)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 730)			{
HXLINE( 730)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = a->zpp_inner;
HXDLIN( 730)				if (_this4->_immutable) {
HXLINE( 730)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 730)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 730)					_this4->_isimmutable();
            				}
            			}
HXDLIN( 730)			if (a->zpp_inner->_inuse) {
HXLINE( 730)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 730)			 ::zpp_nape::geom::ZPP_Vec2 inner = a->zpp_inner;
HXDLIN( 730)			a->zpp_inner->outer = null();
HXDLIN( 730)			a->zpp_inner = null();
HXDLIN( 730)			{
HXLINE( 730)				 ::nape::geom::Vec2 o = a;
HXDLIN( 730)				o->zpp_pool = null();
HXDLIN( 730)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 730)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 730)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 730)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 730)				o->zpp_disp = true;
            			}
HXDLIN( 730)			{
HXLINE( 730)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 730)				{
HXLINE( 730)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 730)						o1->outer->zpp_inner = null();
HXDLIN( 730)						o1->outer = null();
            					}
HXDLIN( 730)					o1->_isimmutable = null();
HXDLIN( 730)					o1->_validate = null();
HXDLIN( 730)					o1->_invalidate = null();
            				}
HXDLIN( 730)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 730)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 737)		if (b->zpp_inner->weak) {
HXLINE( 741)			bool _hx_tmp8;
HXDLIN( 741)			if (hx::IsNotNull( b )) {
HXLINE( 741)				_hx_tmp8 = b->zpp_disp;
            			}
            			else {
HXLINE( 741)				_hx_tmp8 = false;
            			}
HXDLIN( 741)			if (_hx_tmp8) {
HXLINE( 741)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 741)			{
HXLINE( 741)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = b->zpp_inner;
HXDLIN( 741)				if (_this5->_immutable) {
HXLINE( 741)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 741)				if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE( 741)					_this5->_isimmutable();
            				}
            			}
HXDLIN( 741)			if (b->zpp_inner->_inuse) {
HXLINE( 741)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 741)			 ::zpp_nape::geom::ZPP_Vec2 inner1 = b->zpp_inner;
HXDLIN( 741)			b->zpp_inner->outer = null();
HXDLIN( 741)			b->zpp_inner = null();
HXDLIN( 741)			{
HXLINE( 741)				 ::nape::geom::Vec2 o2 = b;
HXDLIN( 741)				o2->zpp_pool = null();
HXDLIN( 741)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 741)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            				}
            				else {
HXLINE( 741)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            				}
HXDLIN( 741)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 741)				o2->zpp_disp = true;
            			}
HXDLIN( 741)			{
HXLINE( 741)				 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 741)				{
HXLINE( 741)					if (hx::IsNotNull( o3->outer )) {
HXLINE( 741)						o3->outer->zpp_inner = null();
HXDLIN( 741)						o3->outer = null();
            					}
HXDLIN( 741)					o3->_isimmutable = null();
HXDLIN( 741)					o3->_validate = null();
HXDLIN( 741)					o3->_invalidate = null();
            				}
HXDLIN( 741)				o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 741)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            			}
            		}
HXLINE( 748)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,dsq,return )

Float Vec2_obj::distance( ::nape::geom::Vec2 a, ::nape::geom::Vec2 b){
            	HX_STACKFRAME(&_hx_pos_7b41e6298c0d3dcf_759_distance)
HXLINE( 762)		bool _hx_tmp;
HXDLIN( 762)		if (hx::IsNotNull( a )) {
HXLINE( 762)			_hx_tmp = a->zpp_disp;
            		}
            		else {
HXLINE( 762)			_hx_tmp = false;
            		}
HXDLIN( 762)		if (_hx_tmp) {
HXLINE( 762)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 767)		bool _hx_tmp1;
HXDLIN( 767)		if (hx::IsNotNull( b )) {
HXLINE( 767)			_hx_tmp1 = b->zpp_disp;
            		}
            		else {
HXLINE( 767)			_hx_tmp1 = false;
            		}
HXDLIN( 767)		if (_hx_tmp1) {
HXLINE( 767)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 771)		bool _hx_tmp2;
HXDLIN( 771)		if (hx::IsNotNull( a )) {
HXLINE( 771)			_hx_tmp2 = hx::IsNull( b );
            		}
            		else {
HXLINE( 771)			_hx_tmp2 = true;
            		}
HXDLIN( 771)		if (_hx_tmp2) {
HXLINE( 771)			HX_STACK_DO_THROW(HX_("Error: Cannot compute squared distance between null Vec2",e5,2e,c5,64));
            		}
HXLINE( 773)		bool ret;
HXDLIN( 773)		if (hx::IsNotNull( a )) {
HXLINE( 773)			ret = a->zpp_disp;
            		}
            		else {
HXLINE( 773)			ret = false;
            		}
HXDLIN( 773)		if (ret) {
HXLINE( 773)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 773)		{
HXLINE( 773)			 ::zpp_nape::geom::ZPP_Vec2 _this = a->zpp_inner;
HXDLIN( 773)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 773)				_this->_validate();
            			}
            		}
HXDLIN( 773)		Float ax = a->zpp_inner->x;
HXDLIN( 773)		bool ret1;
HXDLIN( 773)		if (hx::IsNotNull( a )) {
HXLINE( 773)			ret1 = a->zpp_disp;
            		}
            		else {
HXLINE( 773)			ret1 = false;
            		}
HXDLIN( 773)		if (ret1) {
HXLINE( 773)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 773)		{
HXLINE( 773)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = a->zpp_inner;
HXDLIN( 773)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 773)				_this1->_validate();
            			}
            		}
HXDLIN( 773)		Float ay = a->zpp_inner->y;
HXDLIN( 773)		bool ret2;
HXDLIN( 773)		if (hx::IsNotNull( b )) {
HXLINE( 773)			ret2 = b->zpp_disp;
            		}
            		else {
HXLINE( 773)			ret2 = false;
            		}
HXDLIN( 773)		if (ret2) {
HXLINE( 773)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 773)		{
HXLINE( 773)			 ::zpp_nape::geom::ZPP_Vec2 _this2 = b->zpp_inner;
HXDLIN( 773)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 773)				_this2->_validate();
            			}
            		}
HXDLIN( 773)		Float bx = b->zpp_inner->x;
HXDLIN( 773)		bool ret3;
HXDLIN( 773)		if (hx::IsNotNull( b )) {
HXLINE( 773)			ret3 = b->zpp_disp;
            		}
            		else {
HXLINE( 773)			ret3 = false;
            		}
HXDLIN( 773)		if (ret3) {
HXLINE( 773)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 773)		{
HXLINE( 773)			 ::zpp_nape::geom::ZPP_Vec2 _this3 = b->zpp_inner;
HXDLIN( 773)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 773)				_this3->_validate();
            			}
            		}
HXDLIN( 773)		Float dx = ((Float)0.0);
HXDLIN( 773)		Float dy = ((Float)0.0);
HXDLIN( 773)		{
HXLINE( 773)			dx = (ax - bx);
HXDLIN( 773)			dy = (ay - b->zpp_inner->y);
            		}
HXDLIN( 773)		Float ret4 = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE( 774)		if (a->zpp_inner->weak) {
HXLINE( 778)			bool _hx_tmp3;
HXDLIN( 778)			if (hx::IsNotNull( a )) {
HXLINE( 778)				_hx_tmp3 = a->zpp_disp;
            			}
            			else {
HXLINE( 778)				_hx_tmp3 = false;
            			}
HXDLIN( 778)			if (_hx_tmp3) {
HXLINE( 778)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 778)			{
HXLINE( 778)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = a->zpp_inner;
HXDLIN( 778)				if (_this4->_immutable) {
HXLINE( 778)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 778)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 778)					_this4->_isimmutable();
            				}
            			}
HXDLIN( 778)			if (a->zpp_inner->_inuse) {
HXLINE( 778)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 778)			 ::zpp_nape::geom::ZPP_Vec2 inner = a->zpp_inner;
HXDLIN( 778)			a->zpp_inner->outer = null();
HXDLIN( 778)			a->zpp_inner = null();
HXDLIN( 778)			{
HXLINE( 778)				 ::nape::geom::Vec2 o = a;
HXDLIN( 778)				o->zpp_pool = null();
HXDLIN( 778)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 778)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 778)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 778)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 778)				o->zpp_disp = true;
            			}
HXDLIN( 778)			{
HXLINE( 778)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 778)				{
HXLINE( 778)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 778)						o1->outer->zpp_inner = null();
HXDLIN( 778)						o1->outer = null();
            					}
HXDLIN( 778)					o1->_isimmutable = null();
HXDLIN( 778)					o1->_validate = null();
HXDLIN( 778)					o1->_invalidate = null();
            				}
HXDLIN( 778)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 778)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 785)		if (b->zpp_inner->weak) {
HXLINE( 789)			bool _hx_tmp4;
HXDLIN( 789)			if (hx::IsNotNull( b )) {
HXLINE( 789)				_hx_tmp4 = b->zpp_disp;
            			}
            			else {
HXLINE( 789)				_hx_tmp4 = false;
            			}
HXDLIN( 789)			if (_hx_tmp4) {
HXLINE( 789)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 789)			{
HXLINE( 789)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = b->zpp_inner;
HXDLIN( 789)				if (_this5->_immutable) {
HXLINE( 789)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 789)				if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE( 789)					_this5->_isimmutable();
            				}
            			}
HXDLIN( 789)			if (b->zpp_inner->_inuse) {
HXLINE( 789)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 789)			 ::zpp_nape::geom::ZPP_Vec2 inner1 = b->zpp_inner;
HXDLIN( 789)			b->zpp_inner->outer = null();
HXDLIN( 789)			b->zpp_inner = null();
HXDLIN( 789)			{
HXLINE( 789)				 ::nape::geom::Vec2 o2 = b;
HXDLIN( 789)				o2->zpp_pool = null();
HXDLIN( 789)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 789)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            				}
            				else {
HXLINE( 789)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            				}
HXDLIN( 789)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 789)				o2->zpp_disp = true;
            			}
HXDLIN( 789)			{
HXLINE( 789)				 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 789)				{
HXLINE( 789)					if (hx::IsNotNull( o3->outer )) {
HXLINE( 789)						o3->outer->zpp_inner = null();
HXDLIN( 789)						o3->outer = null();
            					}
HXDLIN( 789)					o3->_isimmutable = null();
HXDLIN( 789)					o3->_validate = null();
HXDLIN( 789)					o3->_invalidate = null();
            				}
HXDLIN( 789)				o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 789)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            			}
            		}
HXLINE( 796)		return ret4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,distance,return )


hx::ObjectPtr< Vec2_obj > Vec2_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y) {
	hx::ObjectPtr< Vec2_obj > __this = new Vec2_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

hx::ObjectPtr< Vec2_obj > Vec2_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y) {
	Vec2_obj *__this = (Vec2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vec2_obj), true, "nape.geom.Vec2"));
	*(void **)__this = Vec2_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Vec2_obj::Vec2_obj()
{
}

void Vec2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Vec2);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_MEMBER_NAME(zpp_pool,"zpp_pool");
	HX_MARK_MEMBER_NAME(zpp_disp,"zpp_disp");
	HX_MARK_END_CLASS();
}

void Vec2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_VISIT_MEMBER_NAME(zpp_pool,"zpp_pool");
	HX_VISIT_MEMBER_NAME(zpp_disp,"zpp_disp");
}

hx::Val Vec2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"lsq") ) { return hx::Val( lsq_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub_dyn() ); }
		if (HX_FIELD_EQ(inName,"mul") ) { return hx::Val( mul_dyn() ); }
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"unit") ) { return hx::Val( unit_dyn() ); }
		if (HX_FIELD_EQ(inName,"perp") ) { return hx::Val( perp_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"setxy") ) { return hx::Val( setxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_angle() ); }
		if (HX_FIELD_EQ(inName,"addeq") ) { return hx::Val( addeq_dyn() ); }
		if (HX_FIELD_EQ(inName,"subeq") ) { return hx::Val( subeq_dyn() ); }
		if (HX_FIELD_EQ(inName,"muleq") ) { return hx::Val( muleq_dyn() ); }
		if (HX_FIELD_EQ(inName,"cross") ) { return hx::Val( cross_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		if (HX_FIELD_EQ(inName,"addMul") ) { return hx::Val( addMul_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"reflect") ) { return hx::Val( reflect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { return hx::Val( zpp_pool ); }
		if (HX_FIELD_EQ(inName,"zpp_disp") ) { return hx::Val( zpp_disp ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"get_angle") ) { return hx::Val( get_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"normalise") ) { return hx::Val( normalise_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vec2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dsq") ) { outValue = dsq_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"weak") ) { outValue = weak_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromPolar") ) { outValue = fromPolar_dyn(); return true; }
	}
	return false;
}

hx::Val Vec2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zpp_disp") ) { zpp_disp=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vec2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("zpp_pool",81,5d,d4,38));
	outFields->push(HX_("zpp_disp",07,44,e1,30));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("angle",d3,43,e2,22));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Vec2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_Vec2 */ ,(int)offsetof(Vec2_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(Vec2_obj,zpp_pool),HX_("zpp_pool",81,5d,d4,38)},
	{hx::fsBool,(int)offsetof(Vec2_obj,zpp_disp),HX_("zpp_disp",07,44,e1,30)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vec2_obj_sStaticStorageInfo = 0;
#endif

static ::String Vec2_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("zpp_pool",81,5d,d4,38),
	HX_("zpp_disp",07,44,e1,30),
	HX_("dispose",9f,80,4c,bb),
	HX_("copy",b5,bb,c4,41),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("get_length",af,04,8f,8f),
	HX_("set_length",23,a3,0c,93),
	HX_("lsq",0a,58,52,00),
	HX_("set",a2,9b,57,00),
	HX_("setxy",23,b1,2f,7a),
	HX_("get_angle",2a,a0,8b,66),
	HX_("set_angle",36,8c,dc,49),
	HX_("rotate",5b,46,20,cb),
	HX_("reflect",3d,84,29,e9),
	HX_("normalise",74,31,a1,ab),
	HX_("unit",84,ca,a9,4d),
	HX_("add",21,f2,49,00),
	HX_("addMul",63,2c,04,9f),
	HX_("sub",80,a9,57,00),
	HX_("mul",04,1c,53,00),
	HX_("addeq",cd,d4,43,1c),
	HX_("subeq",ec,61,b5,84),
	HX_("muleq",70,7d,55,10),
	HX_("dot",89,42,4c,00),
	HX_("cross",80,5f,5a,4c),
	HX_("perp",f3,ec,54,4a),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Vec2_obj::__mClass;

static ::String Vec2_obj_sStaticFields[] = {
	HX_("weak",78,5c,f5,4e),
	HX_("get",96,80,4e,00),
	HX_("fromPolar",f4,d9,1a,7b),
	HX_("dsq",02,46,4c,00),
	HX_("distance",35,93,f9,6b),
	::String(null())
};

void Vec2_obj::__register()
{
	Vec2_obj _hx_dummy;
	Vec2_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.Vec2",6a,4b,9c,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec2_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vec2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vec2_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
