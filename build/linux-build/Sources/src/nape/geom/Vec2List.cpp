// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2Iterator
#include <hxinc/nape/geom/Vec2Iterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <hxinc/nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Vec2
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Vec2List
#include <hxinc/zpp_nape/util/ZPP_Vec2List.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_234_new,"nape.geom.Vec2List","new",0xfaddc5da,"nape.geom.Vec2List.new","nape/geom/Vec2List.hx",234,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_264_get_length,"nape.geom.Vec2List","get_length",0x71681275,"nape.geom.Vec2List.get_length","nape/geom/Vec2List.hx",264,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_269_zpp_gl,"nape.geom.Vec2List","zpp_gl",0x51bc8650,"nape.geom.Vec2List.zpp_gl","nape/geom/Vec2List.hx",269,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_292_zpp_vm,"nape.geom.Vec2List","zpp_vm",0x51bc9362,"nape.geom.Vec2List.zpp_vm","nape/geom/Vec2List.hx",292,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_346_has,"nape.geom.Vec2List","has",0xfad934d4,"nape.geom.Vec2List.has","nape/geom/Vec2List.hx",346,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_363_at,"nape.geom.Vec2List","at",0xb9f32cb9,"nape.geom.Vec2List.at","nape/geom/Vec2List.hx",363,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_416_push,"nape.geom.Vec2List","push",0x888de720,"nape.geom.Vec2List.push","nape/geom/Vec2List.hx",416,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_447_unshift,"nape.geom.Vec2List","unshift",0x56bf1e03,"nape.geom.Vec2List.unshift","nape/geom/Vec2List.hx",447,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_478_pop,"nape.geom.Vec2List","pop",0xfadf530b,"nape.geom.Vec2List.pop","nape/geom/Vec2List.hx",478,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_519_shift,"nape.geom.Vec2List","shift",0xa530b47c,"nape.geom.Vec2List.shift","nape/geom/Vec2List.hx",519,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_564_add,"nape.geom.Vec2List","add",0xfad3e79b,"nape.geom.Vec2List.add","nape/geom/Vec2List.hx",564,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_576_remove,"nape.geom.Vec2List","remove",0xc789cf0a,"nape.geom.Vec2List.remove","nape/geom/Vec2List.hx",576,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_614_clear,"nape.geom.Vec2List","clear",0x71693987,"nape.geom.Vec2List.clear","nape/geom/Vec2List.hx",614,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_634_empty,"nape.geom.Vec2List","empty",0x98e80287,"nape.geom.Vec2List.empty","nape/geom/Vec2List.hx",634,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_647_iterator,"nape.geom.Vec2List","iterator",0xff623a34,"nape.geom.Vec2List.iterator","nape/geom/Vec2List.hx",647,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_662_copy,"nape.geom.Vec2List","copy",0x7ff190fb,"nape.geom.Vec2List.copy","nape/geom/Vec2List.hx",662,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_678_merge,"nape.geom.Vec2List","merge",0x2ed46ab2,"nape.geom.Vec2List.merge","nape/geom/Vec2List.hx",678,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_696_toString,"nape.geom.Vec2List","toString",0xa436c0f2,"nape.geom.Vec2List.toString","nape/geom/Vec2List.hx",696,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_726_foreach,"nape.geom.Vec2List","foreach",0xb7f03804,"nape.geom.Vec2List.foreach","nape/geom/Vec2List.hx",726,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_773_filter,"nape.geom.Vec2List","filter",0x4836527e,"nape.geom.Vec2List.filter","nape/geom/Vec2List.hx",773,0x7ea67276)
HX_LOCAL_STACK_FRAME(_hx_pos_cc33316b0a9b6ea3_304_fromArray,"nape.geom.Vec2List","fromArray",0xbd42a4c9,"nape.geom.Vec2List.fromArray","nape/geom/Vec2List.hx",304,0x7ea67276)
namespace nape{
namespace geom{

void Vec2List_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_234_new)
HXLINE( 238)		this->zpp_inner = null();
HXLINE( 690)		this->zpp_inner =  ::zpp_nape::util::ZPP_Vec2List_obj::__alloc( HX_CTX );
HXLINE( 691)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Vec2List_obj::__CreateEmpty() { return new Vec2List_obj; }

void *Vec2List_obj::_hx_vtable = 0;

Dynamic Vec2List_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec2List_obj > _hx_result = new Vec2List_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Vec2List_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x46d0af20;
}

int Vec2List_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_264_get_length)
HXDLIN( 264)		return this->zpp_gl();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,get_length,return )

int Vec2List_obj::zpp_gl(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_269_zpp_gl)
HXLINE( 270)		this->zpp_inner->valmod();
HXLINE( 271)		if (this->zpp_inner->zip_length) {
HXLINE( 272)			this->zpp_inner->zip_length = false;
HXLINE( 284)			this->zpp_inner->user_length = this->zpp_inner->inner->length;
            		}
HXLINE( 286)		return this->zpp_inner->user_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,zpp_gl,return )

void Vec2List_obj::zpp_vm(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_292_zpp_vm)
HXDLIN( 292)		this->zpp_inner->valmod();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,zpp_vm,(void))

bool Vec2List_obj::has( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_346_has)
HXLINE( 348)		this->zpp_vm();
HXLINE( 350)		return this->zpp_inner->inner->has(obj->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,has,return )

 ::nape::geom::Vec2 Vec2List_obj::at(int index){
            	HX_GC_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_363_at)
HXLINE( 365)		this->zpp_vm();
HXLINE( 368)		bool _hx_tmp;
HXDLIN( 368)		if ((index >= 0)) {
HXLINE( 368)			_hx_tmp = (index >= this->zpp_gl());
            		}
            		else {
HXLINE( 368)			_hx_tmp = true;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 368)			HX_STACK_DO_THROW(HX_("Error: Index out of bounds",10,f3,5b,3f));
            		}
HXLINE( 370)		if (this->zpp_inner->reverse_flag) {
HXLINE( 370)			index = ((this->zpp_gl() - 1) - index);
            		}
HXLINE( 372)		bool _hx_tmp1;
HXDLIN( 372)		if ((index >= this->zpp_inner->at_index)) {
HXLINE( 372)			_hx_tmp1 = hx::IsNull( this->zpp_inner->at_ite );
            		}
            		else {
HXLINE( 372)			_hx_tmp1 = true;
            		}
HXDLIN( 372)		if (_hx_tmp1) {
HXLINE( 373)			this->zpp_inner->at_index = index;
HXLINE( 374)			this->zpp_inner->at_ite = this->zpp_inner->inner->iterator_at(index);
            		}
            		else {
HXLINE( 377)			while((this->zpp_inner->at_index != index)){
HXLINE( 378)				this->zpp_inner->at_index++;
HXLINE( 379)				this->zpp_inner->at_ite = this->zpp_inner->at_ite->next;
            			}
            		}
HXLINE( 403)		 ::zpp_nape::geom::ZPP_Vec2 _this = this->zpp_inner->at_ite->elt;
HXDLIN( 403)		if (hx::IsNull( _this->outer )) {
HXLINE( 403)			_this->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 403)			{
HXLINE( 403)				 ::zpp_nape::geom::ZPP_Vec2 o = _this->outer->zpp_inner;
HXDLIN( 403)				{
HXLINE( 403)					if (hx::IsNotNull( o->outer )) {
HXLINE( 403)						o->outer->zpp_inner = null();
HXDLIN( 403)						o->outer = null();
            					}
HXDLIN( 403)					o->_isimmutable = null();
HXDLIN( 403)					o->_validate = null();
HXDLIN( 403)					o->_invalidate = null();
            				}
HXDLIN( 403)				o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 403)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            			}
HXDLIN( 403)			_this->outer->zpp_inner = _this;
            		}
HXDLIN( 403)		return _this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,at,return )

bool Vec2List_obj::push( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_416_push)
HXLINE( 418)		if (this->zpp_inner->immutable) {
HXLINE( 418)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 420)		this->zpp_inner->modify_test();
HXLINE( 422)		this->zpp_vm();
HXLINE( 424)		bool cont;
HXDLIN( 424)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 424)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 424)			cont = true;
            		}
HXLINE( 425)		if (cont) {
HXLINE( 426)			if (this->zpp_inner->reverse_flag) {
HXLINE( 426)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
            			else {
HXLINE( 428)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 428)					 ::zpp_nape::util::ZNPNode_ZPP_Vec2 _hx_tmp;
HXDLIN( 428)					if (this->empty()) {
HXLINE( 428)						_hx_tmp = null();
            					}
            					else {
HXLINE( 428)						 ::zpp_nape::util::ZNPList_ZPP_Vec2 _hx_tmp1 = this->zpp_inner->inner;
HXDLIN( 428)						_hx_tmp = _hx_tmp1->iterator_at((this->zpp_gl() - 1));
            					}
HXDLIN( 428)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 429)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
HXLINE( 431)			this->zpp_inner->invalidate();
HXLINE( 432)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 432)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 434)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,push,return )

bool Vec2List_obj::unshift( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_447_unshift)
HXLINE( 449)		if (this->zpp_inner->immutable) {
HXLINE( 449)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 451)		this->zpp_inner->modify_test();
HXLINE( 453)		this->zpp_vm();
HXLINE( 455)		bool cont;
HXDLIN( 455)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 455)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 455)			cont = true;
            		}
HXLINE( 456)		if (cont) {
HXLINE( 457)			if (this->zpp_inner->reverse_flag) {
HXLINE( 458)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 458)					 ::zpp_nape::util::ZNPNode_ZPP_Vec2 _hx_tmp;
HXDLIN( 458)					if (this->empty()) {
HXLINE( 458)						_hx_tmp = null();
            					}
            					else {
HXLINE( 458)						 ::zpp_nape::util::ZNPList_ZPP_Vec2 _hx_tmp1 = this->zpp_inner->inner;
HXDLIN( 458)						_hx_tmp = _hx_tmp1->iterator_at((this->zpp_gl() - 1));
            					}
HXDLIN( 458)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 459)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
            			else {
HXLINE( 461)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
HXLINE( 462)			this->zpp_inner->invalidate();
HXLINE( 463)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 463)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 465)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,unshift,return )

 ::nape::geom::Vec2 Vec2List_obj::pop(){
            	HX_GC_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_478_pop)
HXLINE( 480)		if (this->zpp_inner->immutable) {
HXLINE( 480)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 482)		this->zpp_inner->modify_test();
HXLINE( 484)		if (this->empty()) {
HXLINE( 484)			HX_STACK_DO_THROW(HX_("Error: Cannot remove from empty list",3a,7e,61,8d));
            		}
HXLINE( 487)		this->zpp_vm();
HXLINE( 489)		 ::zpp_nape::geom::ZPP_Vec2 ret = null();
HXLINE( 490)		if (this->zpp_inner->reverse_flag) {
HXLINE( 491)			ret = this->zpp_inner->inner->head->elt;
HXLINE( 492)			if (hx::IsNull( ret->outer )) {
HXLINE( 492)				ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 492)				{
HXLINE( 492)					 ::zpp_nape::geom::ZPP_Vec2 o = ret->outer->zpp_inner;
HXDLIN( 492)					{
HXLINE( 492)						if (hx::IsNotNull( o->outer )) {
HXLINE( 492)							o->outer->zpp_inner = null();
HXDLIN( 492)							o->outer = null();
            						}
HXDLIN( 492)						o->_isimmutable = null();
HXDLIN( 492)						o->_validate = null();
HXDLIN( 492)						o->_invalidate = null();
            					}
HXDLIN( 492)					o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 492)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            				}
HXDLIN( 492)				ret->outer->zpp_inner = ret;
            			}
HXDLIN( 492)			 ::nape::geom::Vec2 retx = ret->outer;
HXLINE( 493)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 493)				this->zpp_inner->subber(retx);
            			}
HXLINE( 494)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 494)				this->zpp_inner->inner->pop();
            			}
            		}
            		else {
HXLINE( 497)			bool _hx_tmp;
HXDLIN( 497)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 497)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 497)				_hx_tmp = false;
            			}
HXDLIN( 497)			if (_hx_tmp) {
HXLINE( 497)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 498)			 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ite;
HXDLIN( 498)			if ((this->zpp_gl() == 1)) {
HXLINE( 498)				ite = null();
            			}
            			else {
HXLINE( 498)				 ::zpp_nape::util::ZNPList_ZPP_Vec2 ite1 = this->zpp_inner->inner;
HXDLIN( 498)				ite = ite1->iterator_at((this->zpp_gl() - 2));
            			}
HXLINE( 499)			if (hx::IsNull( ite )) {
HXLINE( 499)				ret = this->zpp_inner->inner->head->elt;
            			}
            			else {
HXLINE( 499)				ret = ite->next->elt;
            			}
HXLINE( 500)			if (hx::IsNull( ret->outer )) {
HXLINE( 500)				ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 500)				{
HXLINE( 500)					 ::zpp_nape::geom::ZPP_Vec2 o1 = ret->outer->zpp_inner;
HXDLIN( 500)					{
HXLINE( 500)						if (hx::IsNotNull( o1->outer )) {
HXLINE( 500)							o1->outer->zpp_inner = null();
HXDLIN( 500)							o1->outer = null();
            						}
HXDLIN( 500)						o1->_isimmutable = null();
HXDLIN( 500)						o1->_validate = null();
HXDLIN( 500)						o1->_invalidate = null();
            					}
HXDLIN( 500)					o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 500)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            				}
HXDLIN( 500)				ret->outer->zpp_inner = ret;
            			}
HXDLIN( 500)			 ::nape::geom::Vec2 retx1 = ret->outer;
HXLINE( 501)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 501)				this->zpp_inner->subber(retx1);
            			}
HXLINE( 502)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 502)				this->zpp_inner->inner->erase(ite);
            			}
            		}
HXLINE( 504)		this->zpp_inner->invalidate();
HXLINE( 505)		if (hx::IsNull( ret->outer )) {
HXLINE( 505)			ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 505)			{
HXLINE( 505)				 ::zpp_nape::geom::ZPP_Vec2 o2 = ret->outer->zpp_inner;
HXDLIN( 505)				{
HXLINE( 505)					if (hx::IsNotNull( o2->outer )) {
HXLINE( 505)						o2->outer->zpp_inner = null();
HXDLIN( 505)						o2->outer = null();
            					}
HXDLIN( 505)					o2->_isimmutable = null();
HXDLIN( 505)					o2->_validate = null();
HXDLIN( 505)					o2->_invalidate = null();
            				}
HXDLIN( 505)				o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 505)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            			}
HXDLIN( 505)			ret->outer->zpp_inner = ret;
            		}
HXDLIN( 505)		 ::nape::geom::Vec2 retx2 = ret->outer;
HXLINE( 506)		return retx2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,pop,return )

 ::nape::geom::Vec2 Vec2List_obj::shift(){
            	HX_GC_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_519_shift)
HXLINE( 521)		if (this->zpp_inner->immutable) {
HXLINE( 521)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 523)		this->zpp_inner->modify_test();
HXLINE( 525)		if (this->empty()) {
HXLINE( 525)			HX_STACK_DO_THROW(HX_("Error: Cannot remove from empty list",3a,7e,61,8d));
            		}
HXLINE( 528)		this->zpp_vm();
HXLINE( 530)		 ::zpp_nape::geom::ZPP_Vec2 ret = null();
HXLINE( 531)		if (this->zpp_inner->reverse_flag) {
HXLINE( 532)			bool _hx_tmp;
HXDLIN( 532)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 532)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 532)				_hx_tmp = false;
            			}
HXDLIN( 532)			if (_hx_tmp) {
HXLINE( 532)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 533)			 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ite;
HXDLIN( 533)			if ((this->zpp_gl() == 1)) {
HXLINE( 533)				ite = null();
            			}
            			else {
HXLINE( 533)				 ::zpp_nape::util::ZNPList_ZPP_Vec2 ite1 = this->zpp_inner->inner;
HXDLIN( 533)				ite = ite1->iterator_at((this->zpp_gl() - 2));
            			}
HXLINE( 534)			if (hx::IsNull( ite )) {
HXLINE( 534)				ret = this->zpp_inner->inner->head->elt;
            			}
            			else {
HXLINE( 534)				ret = ite->next->elt;
            			}
HXLINE( 535)			if (hx::IsNull( ret->outer )) {
HXLINE( 535)				ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 535)				{
HXLINE( 535)					 ::zpp_nape::geom::ZPP_Vec2 o = ret->outer->zpp_inner;
HXDLIN( 535)					{
HXLINE( 535)						if (hx::IsNotNull( o->outer )) {
HXLINE( 535)							o->outer->zpp_inner = null();
HXDLIN( 535)							o->outer = null();
            						}
HXDLIN( 535)						o->_isimmutable = null();
HXDLIN( 535)						o->_validate = null();
HXDLIN( 535)						o->_invalidate = null();
            					}
HXDLIN( 535)					o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 535)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            				}
HXDLIN( 535)				ret->outer->zpp_inner = ret;
            			}
HXDLIN( 535)			 ::nape::geom::Vec2 retx = ret->outer;
HXLINE( 536)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 536)				this->zpp_inner->subber(retx);
            			}
HXLINE( 537)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 537)				this->zpp_inner->inner->erase(ite);
            			}
            		}
            		else {
HXLINE( 540)			ret = this->zpp_inner->inner->head->elt;
HXLINE( 541)			if (hx::IsNull( ret->outer )) {
HXLINE( 541)				ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 541)				{
HXLINE( 541)					 ::zpp_nape::geom::ZPP_Vec2 o1 = ret->outer->zpp_inner;
HXDLIN( 541)					{
HXLINE( 541)						if (hx::IsNotNull( o1->outer )) {
HXLINE( 541)							o1->outer->zpp_inner = null();
HXDLIN( 541)							o1->outer = null();
            						}
HXDLIN( 541)						o1->_isimmutable = null();
HXDLIN( 541)						o1->_validate = null();
HXDLIN( 541)						o1->_invalidate = null();
            					}
HXDLIN( 541)					o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 541)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            				}
HXDLIN( 541)				ret->outer->zpp_inner = ret;
            			}
HXDLIN( 541)			 ::nape::geom::Vec2 retx1 = ret->outer;
HXLINE( 542)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 542)				this->zpp_inner->subber(retx1);
            			}
HXLINE( 543)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 543)				this->zpp_inner->inner->pop();
            			}
            		}
HXLINE( 545)		this->zpp_inner->invalidate();
HXLINE( 546)		if (hx::IsNull( ret->outer )) {
HXLINE( 546)			ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 546)			{
HXLINE( 546)				 ::zpp_nape::geom::ZPP_Vec2 o2 = ret->outer->zpp_inner;
HXDLIN( 546)				{
HXLINE( 546)					if (hx::IsNotNull( o2->outer )) {
HXLINE( 546)						o2->outer->zpp_inner = null();
HXDLIN( 546)						o2->outer = null();
            					}
HXDLIN( 546)					o2->_isimmutable = null();
HXDLIN( 546)					o2->_validate = null();
HXDLIN( 546)					o2->_invalidate = null();
            				}
HXDLIN( 546)				o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 546)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            			}
HXDLIN( 546)			ret->outer->zpp_inner = ret;
            		}
HXDLIN( 546)		 ::nape::geom::Vec2 retx2 = ret->outer;
HXLINE( 547)		return retx2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,shift,return )

bool Vec2List_obj::add( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_564_add)
HXDLIN( 564)		if (this->zpp_inner->reverse_flag) {
HXDLIN( 564)			return this->push(obj);
            		}
            		else {
HXDLIN( 564)			return this->unshift(obj);
            		}
HXDLIN( 564)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,add,return )

bool Vec2List_obj::remove( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_576_remove)
HXLINE( 578)		if (this->zpp_inner->immutable) {
HXLINE( 578)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 580)		this->zpp_inner->modify_test();
HXLINE( 582)		this->zpp_vm();
HXLINE( 584)		bool ret;
HXLINE( 585)		{
HXLINE( 586)			ret = false;
HXLINE( 587)			{
HXLINE( 588)				 ::zpp_nape::util::ZNPNode_ZPP_Vec2 cx_ite = this->zpp_inner->inner->head;
HXLINE( 589)				while(hx::IsNotNull( cx_ite )){
HXLINE( 590)					 ::zpp_nape::geom::ZPP_Vec2 x = cx_ite->elt;
HXLINE( 592)					if (hx::IsEq( x,obj->zpp_inner )) {
HXLINE( 593)						ret = true;
HXLINE( 594)						goto _hx_goto_12;
            					}
HXLINE( 597)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_12:;
            			}
            		}
HXLINE( 601)		if (ret) {
HXLINE( 602)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 602)				this->zpp_inner->subber(obj);
            			}
HXLINE( 603)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 603)				this->zpp_inner->inner->remove(obj->zpp_inner);
            			}
HXLINE( 604)			this->zpp_inner->invalidate();
            		}
HXLINE( 606)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,remove,return )

void Vec2List_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_614_clear)
HXLINE( 616)		if (this->zpp_inner->immutable) {
HXLINE( 616)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_("List is immutable",6e,b9,49,ba)));
            		}
HXLINE( 618)		if (this->zpp_inner->reverse_flag) {
HXLINE( 619)			while(!(this->empty())){
HXLINE( 619)				this->pop();
            			}
            		}
            		else {
HXLINE( 622)			while(!(this->empty())){
HXLINE( 622)				this->shift();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,clear,(void))

bool Vec2List_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_634_empty)
HXDLIN( 634)		return (this->zpp_gl() == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,empty,return )

 ::nape::geom::Vec2Iterator Vec2List_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_647_iterator)
HXLINE( 649)		this->zpp_vm();
HXLINE( 651)		return ::nape::geom::Vec2Iterator_obj::get(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,iterator,return )

 ::nape::geom::Vec2List Vec2List_obj::copy(hx::Null< bool >  __o_deep){
            		bool deep = __o_deep.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_662_copy)
HXLINE( 663)		 ::nape::geom::Vec2List ret =  ::nape::geom::Vec2List_obj::__alloc( HX_CTX );
HXLINE( 664)		{
HXLINE( 664)			 ::nape::geom::Vec2Iterator _g = this->iterator();
HXDLIN( 664)			while(true){
HXLINE( 664)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 664)				int length = _g->zpp_inner->zpp_gl();
HXDLIN( 664)				_g->zpp_critical = true;
HXDLIN( 664)				bool _hx_tmp;
HXDLIN( 664)				if ((_g->zpp_i < length)) {
HXLINE( 664)					_hx_tmp = true;
            				}
            				else {
HXLINE( 664)					{
HXLINE( 664)						_g->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN( 664)						::nape::geom::Vec2Iterator_obj::zpp_pool = _g;
HXDLIN( 664)						_g->zpp_inner = null();
            					}
HXDLIN( 664)					_hx_tmp = false;
            				}
HXDLIN( 664)				if (!(_hx_tmp)) {
HXLINE( 664)					goto _hx_goto_19;
            				}
HXDLIN( 664)				_g->zpp_critical = false;
HXDLIN( 664)				 ::nape::geom::Vec2 i = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 664)				 ::nape::geom::Vec2 _hx_tmp1;
HXDLIN( 664)				if (deep) {
HXLINE( 664)					bool _hx_tmp2;
HXDLIN( 664)					if (hx::IsNotNull( i )) {
HXLINE( 664)						_hx_tmp2 = i->zpp_disp;
            					}
            					else {
HXLINE( 664)						_hx_tmp2 = false;
            					}
HXDLIN( 664)					if (_hx_tmp2) {
HXLINE( 664)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 664)					if (i->zpp_disp) {
HXLINE( 664)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 664)					{
HXLINE( 664)						 ::zpp_nape::geom::ZPP_Vec2 _this = i->zpp_inner;
HXDLIN( 664)						if (hx::IsNotNull( _this->_validate )) {
HXLINE( 664)							_this->_validate();
            						}
            					}
HXDLIN( 664)					Float x = i->zpp_inner->x;
HXDLIN( 664)					if (i->zpp_disp) {
HXLINE( 664)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 664)					{
HXLINE( 664)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = i->zpp_inner;
HXDLIN( 664)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 664)							_this1->_validate();
            						}
            					}
HXDLIN( 664)					Float y = i->zpp_inner->y;
HXDLIN( 664)					bool _hx_tmp3;
HXDLIN( 664)					if ((x == x)) {
HXLINE( 664)						_hx_tmp3 = (y != y);
            					}
            					else {
HXLINE( 664)						_hx_tmp3 = true;
            					}
HXDLIN( 664)					if (_hx_tmp3) {
HXLINE( 664)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 664)					 ::nape::geom::Vec2 ret1;
HXDLIN( 664)					if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 664)						ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            					}
            					else {
HXLINE( 664)						ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 664)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN( 664)						ret1->zpp_pool = null();
HXDLIN( 664)						ret1->zpp_disp = false;
HXDLIN( 664)						if (hx::IsEq( ret1,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 664)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            						}
            					}
HXDLIN( 664)					if (hx::IsNull( ret1->zpp_inner )) {
HXLINE( 664)						 ::zpp_nape::geom::ZPP_Vec2 ret2;
HXDLIN( 664)						{
HXLINE( 664)							if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 664)								ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 664)								ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 664)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN( 664)								ret2->next = null();
            							}
HXDLIN( 664)							ret2->weak = false;
            						}
HXDLIN( 664)						ret2->_immutable = false;
HXDLIN( 664)						{
HXLINE( 664)							ret2->x = x;
HXDLIN( 664)							ret2->y = y;
            						}
HXDLIN( 664)						ret1->zpp_inner = ret2;
HXDLIN( 664)						ret1->zpp_inner->outer = ret1;
            					}
            					else {
HXLINE( 664)						bool _hx_tmp4;
HXDLIN( 664)						if (hx::IsNotNull( ret1 )) {
HXLINE( 664)							_hx_tmp4 = ret1->zpp_disp;
            						}
            						else {
HXLINE( 664)							_hx_tmp4 = false;
            						}
HXDLIN( 664)						if (_hx_tmp4) {
HXLINE( 664)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 664)						{
HXLINE( 664)							 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret1->zpp_inner;
HXDLIN( 664)							if (_this2->_immutable) {
HXLINE( 664)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 664)							if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 664)								_this2->_isimmutable();
            							}
            						}
HXDLIN( 664)						bool _hx_tmp5;
HXDLIN( 664)						if ((x == x)) {
HXLINE( 664)							_hx_tmp5 = (y != y);
            						}
            						else {
HXLINE( 664)							_hx_tmp5 = true;
            						}
HXDLIN( 664)						if (_hx_tmp5) {
HXLINE( 664)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN( 664)						bool _hx_tmp6;
HXDLIN( 664)						bool _hx_tmp7;
HXDLIN( 664)						if (hx::IsNotNull( ret1 )) {
HXLINE( 664)							_hx_tmp7 = ret1->zpp_disp;
            						}
            						else {
HXLINE( 664)							_hx_tmp7 = false;
            						}
HXDLIN( 664)						if (_hx_tmp7) {
HXLINE( 664)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 664)						{
HXLINE( 664)							 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret1->zpp_inner;
HXDLIN( 664)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 664)								_this3->_validate();
            							}
            						}
HXDLIN( 664)						if ((ret1->zpp_inner->x == x)) {
HXLINE( 664)							bool _hx_tmp8;
HXDLIN( 664)							if (hx::IsNotNull( ret1 )) {
HXLINE( 664)								_hx_tmp8 = ret1->zpp_disp;
            							}
            							else {
HXLINE( 664)								_hx_tmp8 = false;
            							}
HXDLIN( 664)							if (_hx_tmp8) {
HXLINE( 664)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 664)							{
HXLINE( 664)								 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret1->zpp_inner;
HXDLIN( 664)								if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 664)									_this4->_validate();
            								}
            							}
HXDLIN( 664)							_hx_tmp6 = (ret1->zpp_inner->y == y);
            						}
            						else {
HXLINE( 664)							_hx_tmp6 = false;
            						}
HXDLIN( 664)						if (!(_hx_tmp6)) {
HXLINE( 664)							{
HXLINE( 664)								ret1->zpp_inner->x = x;
HXDLIN( 664)								ret1->zpp_inner->y = y;
            							}
HXDLIN( 664)							{
HXLINE( 664)								 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret1->zpp_inner;
HXDLIN( 664)								if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 664)									_this5->_invalidate(_this5);
            								}
            							}
            						}
            					}
HXDLIN( 664)					ret1->zpp_inner->weak = false;
HXDLIN( 664)					_hx_tmp1 = ret1;
            				}
            				else {
HXLINE( 664)					_hx_tmp1 = i;
            				}
HXDLIN( 664)				ret->push(_hx_tmp1);
            			}
            			_hx_goto_19:;
            		}
HXLINE( 665)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,copy,return )

void Vec2List_obj::merge( ::nape::geom::Vec2List xs){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_678_merge)
HXLINE( 680)		if (hx::IsNull( xs )) {
HXLINE( 680)			HX_STACK_DO_THROW(HX_("Error: Cannot merge with null list",f4,38,16,fb));
            		}
HXLINE( 682)		{
HXLINE( 682)			 ::nape::geom::Vec2Iterator _g = xs->iterator();
HXDLIN( 682)			while(true){
HXLINE( 682)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 682)				int length = _g->zpp_inner->zpp_gl();
HXDLIN( 682)				_g->zpp_critical = true;
HXDLIN( 682)				bool _hx_tmp;
HXDLIN( 682)				if ((_g->zpp_i < length)) {
HXLINE( 682)					_hx_tmp = true;
            				}
            				else {
HXLINE( 682)					{
HXLINE( 682)						_g->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN( 682)						::nape::geom::Vec2Iterator_obj::zpp_pool = _g;
HXDLIN( 682)						_g->zpp_inner = null();
            					}
HXDLIN( 682)					_hx_tmp = false;
            				}
HXDLIN( 682)				if (!(_hx_tmp)) {
HXLINE( 682)					goto _hx_goto_21;
            				}
HXDLIN( 682)				_g->zpp_critical = false;
HXDLIN( 682)				 ::nape::geom::Vec2 x = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 683)				if (!(this->has(x))) {
HXLINE( 683)					this->add(x);
            				}
            			}
            			_hx_goto_21:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,merge,(void))

::String Vec2List_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_696_toString)
HXLINE( 697)		::String ret = HX_("[",5b,00,00,00);
HXLINE( 698)		bool fst = true;
HXLINE( 699)		{
HXLINE( 699)			 ::nape::geom::Vec2Iterator _g = this->iterator();
HXDLIN( 699)			while(true){
HXLINE( 699)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 699)				int length = _g->zpp_inner->zpp_gl();
HXDLIN( 699)				_g->zpp_critical = true;
HXDLIN( 699)				bool _hx_tmp;
HXDLIN( 699)				if ((_g->zpp_i < length)) {
HXLINE( 699)					_hx_tmp = true;
            				}
            				else {
HXLINE( 699)					{
HXLINE( 699)						_g->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN( 699)						::nape::geom::Vec2Iterator_obj::zpp_pool = _g;
HXDLIN( 699)						_g->zpp_inner = null();
            					}
HXDLIN( 699)					_hx_tmp = false;
            				}
HXDLIN( 699)				if (!(_hx_tmp)) {
HXLINE( 699)					goto _hx_goto_23;
            				}
HXDLIN( 699)				_g->zpp_critical = false;
HXDLIN( 699)				 ::nape::geom::Vec2 i = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 700)				if (!(fst)) {
HXLINE( 700)					ret = (ret + HX_(",",2c,00,00,00));
            				}
HXLINE( 701)				::String ret1;
HXDLIN( 701)				if (hx::IsNull( i )) {
HXLINE( 701)					ret1 = HX_("NULL",87,66,cf,33);
            				}
            				else {
HXLINE( 701)					ret1 = i->toString();
            				}
HXDLIN( 701)				ret = (ret + ret1);
HXLINE( 702)				fst = false;
            			}
            			_hx_goto_23:;
            		}
HXLINE( 704)		return (ret + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2List_obj,toString,return )

 ::nape::geom::Vec2List Vec2List_obj::foreach( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_726_foreach)
HXLINE( 728)		if (hx::IsNull( lambda )) {
HXLINE( 728)			HX_STACK_DO_THROW(HX_("Error: Cannot execute null on list elements",97,fe,61,00));
            		}
HXLINE( 730)		 ::nape::geom::Vec2Iterator it = this->iterator();
HXLINE( 731)		while(true){
HXLINE( 731)			it->zpp_inner->zpp_inner->valmod();
HXDLIN( 731)			int length = it->zpp_inner->zpp_gl();
HXDLIN( 731)			it->zpp_critical = true;
HXDLIN( 731)			bool _hx_tmp;
HXDLIN( 731)			if ((it->zpp_i < length)) {
HXLINE( 731)				_hx_tmp = true;
            			}
            			else {
HXLINE( 731)				{
HXLINE( 731)					it->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN( 731)					::nape::geom::Vec2Iterator_obj::zpp_pool = it;
HXDLIN( 731)					it->zpp_inner = null();
            				}
HXDLIN( 731)				_hx_tmp = false;
            			}
HXDLIN( 731)			if (!(_hx_tmp)) {
HXLINE( 731)				goto _hx_goto_25;
            			}
HXLINE( 732)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 733)				it->zpp_critical = false;
HXDLIN( 733)				lambda(it->zpp_inner->at(it->zpp_i++));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 736)					{
HXLINE( 737)						it->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXLINE( 738)						::nape::geom::Vec2Iterator_obj::zpp_pool = it;
HXLINE( 739)						it->zpp_inner = null();
            					}
HXLINE( 741)					goto _hx_goto_25;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_25:;
HXLINE( 744)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,foreach,return )

 ::nape::geom::Vec2List Vec2List_obj::filter( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_773_filter)
HXLINE( 775)		if (hx::IsNull( lambda )) {
HXLINE( 775)			HX_STACK_DO_THROW(HX_("Error: Cannot select elements of list with null",14,a8,f1,3b));
            		}
HXLINE( 777)		int i = 0;
HXLINE( 778)		while((i < this->zpp_gl())){
HXLINE( 779)			 ::nape::geom::Vec2 x = this->at(i);
HXLINE( 780)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 781)				if (( (bool)(lambda(x)) )) {
HXLINE( 781)					i = (i + 1);
            				}
            				else {
HXLINE( 782)					this->remove(x);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 785)					goto _hx_goto_27;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_27:;
HXLINE( 788)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,filter,return )

 ::nape::geom::Vec2List Vec2List_obj::fromArray(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_cc33316b0a9b6ea3_304_fromArray)
HXLINE( 306)		if (hx::IsNull( array )) {
HXLINE( 307)			HX_STACK_DO_THROW(HX_("Error: Cannot convert null Array to Nape list",35,f1,7a,22));
            		}
HXLINE( 310)		 ::nape::geom::Vec2List ret =  ::nape::geom::Vec2List_obj::__alloc( HX_CTX );
HXLINE( 311)		{
HXLINE( 311)			int _g = 0;
HXDLIN( 311)			while((_g < array->length)){
HXLINE( 311)				 ::nape::geom::Vec2 i = array->__get(_g).StaticCast<  ::nape::geom::Vec2 >();
HXDLIN( 311)				_g = (_g + 1);
HXLINE( 316)				ret->push(i);
            			}
            		}
HXLINE( 318)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec2List_obj,fromArray,return )


hx::ObjectPtr< Vec2List_obj > Vec2List_obj::__new() {
	hx::ObjectPtr< Vec2List_obj > __this = new Vec2List_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Vec2List_obj > Vec2List_obj::__alloc(hx::Ctx *_hx_ctx) {
	Vec2List_obj *__this = (Vec2List_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vec2List_obj), true, "nape.geom.Vec2List"));
	*(void **)__this = Vec2List_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Vec2List_obj::Vec2List_obj()
{
}

void Vec2List_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Vec2List);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Vec2List_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Vec2List_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"zpp_gl") ) { return hx::Val( zpp_gl_dyn() ); }
		if (HX_FIELD_EQ(inName,"zpp_vm") ) { return hx::Val( zpp_vm_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn() ); }
		if (HX_FIELD_EQ(inName,"foreach") ) { return hx::Val( foreach_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vec2List_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
	}
	return false;
}

hx::Val Vec2List_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::util::ZPP_Vec2List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vec2List_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Vec2List_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZPP_Vec2List */ ,(int)offsetof(Vec2List_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vec2List_obj_sStaticStorageInfo = 0;
#endif

static ::String Vec2List_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_length",af,04,8f,8f),
	HX_("zpp_gl",8a,53,bb,8e),
	HX_("zpp_vm",9c,60,bb,8e),
	HX_("has",5a,3f,4f,00),
	HX_("at",f3,54,00,00),
	HX_("push",da,11,61,4a),
	HX_("unshift",89,e3,b3,78),
	HX_("pop",91,5d,55,00),
	HX_("shift",82,ec,22,7c),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("clear",8d,71,5b,48),
	HX_("empty",8d,3a,da,6f),
	HX_("iterator",ee,49,9a,93),
	HX_("copy",b5,bb,c4,41),
	HX_("merge",b8,a2,c6,05),
	HX_("toString",ac,d0,6e,38),
	HX_("foreach",8a,fd,e4,d9),
	HX_("filter",b8,1f,35,85),
	::String(null()) };

hx::Class Vec2List_obj::__mClass;

static ::String Vec2List_obj_sStaticFields[] = {
	HX_("fromArray",cf,57,18,da),
	::String(null())
};

void Vec2List_obj::__register()
{
	Vec2List_obj _hx_dummy;
	Vec2List_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.Vec2List",e8,90,23,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec2List_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec2List_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vec2List_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vec2List_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec2List_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec2List_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
