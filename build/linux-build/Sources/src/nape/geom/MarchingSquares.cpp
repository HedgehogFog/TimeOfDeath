// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <hxinc/nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPolyList
#include <hxinc/nape/geom/GeomPolyList.h>
#endif
#ifndef INCLUDED_nape_geom_MarchingSquares
#include <hxinc/nape/geom/MarchingSquares.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchingSquares
#include <hxinc/zpp_nape/geom/ZPP_MarchingSquares.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8d69bf442350a137_269_run,"nape.geom.MarchingSquares","run",0xa143a3c8,"nape.geom.MarchingSquares.run","nape/geom/MarchingSquares.hx",269,0x5f5b7193)
namespace nape{
namespace geom{

void MarchingSquares_obj::__construct() { }

Dynamic MarchingSquares_obj::__CreateEmpty() { return new MarchingSquares_obj; }

void *MarchingSquares_obj::_hx_vtable = 0;

Dynamic MarchingSquares_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MarchingSquares_obj > _hx_result = new MarchingSquares_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MarchingSquares_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03c13d4f;
}

 ::nape::geom::GeomPolyList MarchingSquares_obj::run( ::Dynamic iso, ::nape::geom::AABB bounds, ::nape::geom::Vec2 cellsize,hx::Null< int >  __o_quality, ::nape::geom::Vec2 subgrid,hx::Null< bool >  __o_combine, ::nape::geom::GeomPolyList output){
            		int quality = __o_quality.Default(2);
            		bool combine = __o_combine.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_8d69bf442350a137_269_run)
HXLINE( 272)		bool _hx_tmp;
HXDLIN( 272)		if (hx::IsNotNull( cellsize )) {
HXLINE( 272)			_hx_tmp = cellsize->zpp_disp;
            		}
            		else {
HXLINE( 272)			_hx_tmp = false;
            		}
HXDLIN( 272)		if (_hx_tmp) {
HXLINE( 272)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 277)		bool _hx_tmp1;
HXDLIN( 277)		if (hx::IsNotNull( subgrid )) {
HXLINE( 277)			_hx_tmp1 = subgrid->zpp_disp;
            		}
            		else {
HXLINE( 277)			_hx_tmp1 = false;
            		}
HXDLIN( 277)		if (_hx_tmp1) {
HXLINE( 277)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 281)		if (hx::IsNull( iso )) {
HXLINE( 282)			HX_STACK_DO_THROW(HX_("Error: MarchingSquares requires an iso function to operate",f4,56,6a,7a));
            		}
HXLINE( 284)		if (hx::IsNull( bounds )) {
HXLINE( 285)			HX_STACK_DO_THROW(HX_("Error: MarchingSquares requires an AABB to define bounds of surface extraction",00,8b,b3,0e));
            		}
HXLINE( 287)		if (hx::IsNull( cellsize )) {
HXLINE( 288)			HX_STACK_DO_THROW(HX_("Error: MarchingSquares requires a Vec2 to define cell size for surface extraction",ba,d7,23,d9));
            		}
HXLINE( 290)		bool _hx_tmp2;
HXDLIN( 290)		bool _hx_tmp3;
HXDLIN( 290)		if (hx::IsNotNull( cellsize )) {
HXLINE( 290)			_hx_tmp3 = cellsize->zpp_disp;
            		}
            		else {
HXLINE( 290)			_hx_tmp3 = false;
            		}
HXDLIN( 290)		if (_hx_tmp3) {
HXLINE( 290)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 290)		{
HXLINE( 290)			 ::zpp_nape::geom::ZPP_Vec2 _this = cellsize->zpp_inner;
HXDLIN( 290)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 290)				_this->_validate();
            			}
            		}
HXDLIN( 290)		if (!((cellsize->zpp_inner->x <= 0))) {
HXLINE( 290)			bool _hx_tmp4;
HXDLIN( 290)			if (hx::IsNotNull( cellsize )) {
HXLINE( 290)				_hx_tmp4 = cellsize->zpp_disp;
            			}
            			else {
HXLINE( 290)				_hx_tmp4 = false;
            			}
HXDLIN( 290)			if (_hx_tmp4) {
HXLINE( 290)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 290)			{
HXLINE( 290)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = cellsize->zpp_inner;
HXDLIN( 290)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 290)					_this1->_validate();
            				}
            			}
HXDLIN( 290)			_hx_tmp2 = (cellsize->zpp_inner->y <= 0);
            		}
            		else {
HXLINE( 290)			_hx_tmp2 = true;
            		}
HXDLIN( 290)		if (_hx_tmp2) {
HXLINE( 291)			HX_STACK_DO_THROW(HX_("Error: MarchingSquares cannot operate with non-positive cell dimensions",bc,7b,09,8f));
            		}
HXLINE( 293)		if ((quality < 0)) {
HXLINE( 294)			HX_STACK_DO_THROW(HX_("Error: MarchingSquares cannot use a negative quality value for interpolation",90,91,13,e0));
            		}
HXLINE( 296)		bool _hx_tmp5;
HXDLIN( 296)		if (hx::IsNotNull( subgrid )) {
HXLINE( 296)			bool _hx_tmp6;
HXDLIN( 296)			if (hx::IsNotNull( subgrid )) {
HXLINE( 296)				_hx_tmp6 = subgrid->zpp_disp;
            			}
            			else {
HXLINE( 296)				_hx_tmp6 = false;
            			}
HXDLIN( 296)			if (_hx_tmp6) {
HXLINE( 296)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = subgrid->zpp_inner;
HXDLIN( 296)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 296)					_this2->_validate();
            				}
            			}
HXDLIN( 296)			if (!((subgrid->zpp_inner->x <= 0))) {
HXLINE( 296)				bool _hx_tmp7;
HXDLIN( 296)				if (hx::IsNotNull( subgrid )) {
HXLINE( 296)					_hx_tmp7 = subgrid->zpp_disp;
            				}
            				else {
HXLINE( 296)					_hx_tmp7 = false;
            				}
HXDLIN( 296)				if (_hx_tmp7) {
HXLINE( 296)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 296)				{
HXLINE( 296)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = subgrid->zpp_inner;
HXDLIN( 296)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 296)						_this3->_validate();
            					}
            				}
HXDLIN( 296)				_hx_tmp5 = (subgrid->zpp_inner->y <= 0);
            			}
            			else {
HXLINE( 296)				_hx_tmp5 = true;
            			}
            		}
            		else {
HXLINE( 296)			_hx_tmp5 = false;
            		}
HXDLIN( 296)		if (_hx_tmp5) {
HXLINE( 297)			HX_STACK_DO_THROW(HX_("Error: MarchingSquares cannot with non-positive sub-grid dimensions",a7,6f,f2,98));
            		}
HXLINE( 300)		 ::nape::geom::GeomPolyList ret;
HXDLIN( 300)		if (hx::IsNotNull( output )) {
HXLINE( 300)			ret = output;
            		}
            		else {
HXLINE( 300)			ret =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
HXLINE( 301)		if (hx::IsNull( subgrid )) {
HXLINE( 302)			{
HXLINE( 302)				 ::zpp_nape::geom::ZPP_AABB _this4 = bounds->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 302)					_this4->_validate();
            				}
            			}
HXDLIN( 302)			Float _hx_tmp8 = bounds->zpp_inner->minx;
HXDLIN( 302)			{
HXLINE( 302)				 ::zpp_nape::geom::ZPP_AABB _this5 = bounds->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 302)					_this5->_validate();
            				}
            			}
HXDLIN( 302)			Float _hx_tmp9 = bounds->zpp_inner->miny;
HXDLIN( 302)			 ::nape::geom::Vec2 _this6 = bounds->zpp_inner->getmax();
HXDLIN( 302)			bool _hx_tmp10;
HXDLIN( 302)			if (hx::IsNotNull( _this6 )) {
HXLINE( 302)				_hx_tmp10 = _this6->zpp_disp;
            			}
            			else {
HXLINE( 302)				_hx_tmp10 = false;
            			}
HXDLIN( 302)			if (_hx_tmp10) {
HXLINE( 302)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 302)			{
HXLINE( 302)				 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this6->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 302)					_this7->_validate();
            				}
            			}
HXDLIN( 302)			Float _hx_tmp11 = _this6->zpp_inner->x;
HXDLIN( 302)			 ::nape::geom::Vec2 _this8 = bounds->zpp_inner->getmax();
HXDLIN( 302)			bool _hx_tmp12;
HXDLIN( 302)			if (hx::IsNotNull( _this8 )) {
HXLINE( 302)				_hx_tmp12 = _this8->zpp_disp;
            			}
            			else {
HXLINE( 302)				_hx_tmp12 = false;
            			}
HXDLIN( 302)			if (_hx_tmp12) {
HXLINE( 302)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 302)			{
HXLINE( 302)				 ::zpp_nape::geom::ZPP_Vec2 _this9 = _this8->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 302)					_this9->_validate();
            				}
            			}
HXDLIN( 302)			::zpp_nape::geom::ZPP_MarchingSquares_obj::run(iso,_hx_tmp8,_hx_tmp9,_hx_tmp11,_this8->zpp_inner->y,cellsize,quality,combine,ret);
            		}
            		else {
HXLINE( 305)			{
HXLINE( 305)				 ::zpp_nape::geom::ZPP_AABB _this10 = bounds->zpp_inner;
HXDLIN( 305)				if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 305)					_this10->_validate();
            				}
            			}
HXDLIN( 305)			 ::zpp_nape::geom::ZPP_AABB _this11 = bounds->zpp_inner;
HXDLIN( 305)			Float xp = (_this11->maxx - _this11->minx);
HXDLIN( 305)			bool xp1;
HXDLIN( 305)			if (hx::IsNotNull( subgrid )) {
HXLINE( 305)				xp1 = subgrid->zpp_disp;
            			}
            			else {
HXLINE( 305)				xp1 = false;
            			}
HXDLIN( 305)			if (xp1) {
HXLINE( 305)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 305)			{
HXLINE( 305)				 ::zpp_nape::geom::ZPP_Vec2 _this12 = subgrid->zpp_inner;
HXDLIN( 305)				if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 305)					_this12->_validate();
            				}
            			}
HXDLIN( 305)			Float xp2 = (xp / subgrid->zpp_inner->x);
HXLINE( 306)			{
HXLINE( 306)				 ::zpp_nape::geom::ZPP_AABB _this13 = bounds->zpp_inner;
HXDLIN( 306)				if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 306)					_this13->_validate();
            				}
            			}
HXDLIN( 306)			 ::zpp_nape::geom::ZPP_AABB _this14 = bounds->zpp_inner;
HXDLIN( 306)			Float yp = (_this14->maxy - _this14->miny);
HXDLIN( 306)			bool yp1;
HXDLIN( 306)			if (hx::IsNotNull( subgrid )) {
HXLINE( 306)				yp1 = subgrid->zpp_disp;
            			}
            			else {
HXLINE( 306)				yp1 = false;
            			}
HXDLIN( 306)			if (yp1) {
HXLINE( 306)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 306)			{
HXLINE( 306)				 ::zpp_nape::geom::ZPP_Vec2 _this15 = subgrid->zpp_inner;
HXDLIN( 306)				if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 306)					_this15->_validate();
            				}
            			}
HXDLIN( 306)			Float yp2 = (yp / subgrid->zpp_inner->y);
HXLINE( 307)			int xn = ::Std_obj::_hx_int(xp2);
HXLINE( 308)			int yn = ::Std_obj::_hx_int(yp2);
HXLINE( 309)			if ((xn != xp2)) {
HXLINE( 309)				xn = (xn + 1);
            			}
HXLINE( 310)			if ((yn != yp2)) {
HXLINE( 310)				yn = (yn + 1);
            			}
HXLINE( 311)			{
HXLINE( 311)				int _g = 0;
HXDLIN( 311)				int _g1 = xn;
HXDLIN( 311)				while((_g < _g1)){
HXLINE( 311)					_g = (_g + 1);
HXDLIN( 311)					int x = (_g - 1);
HXLINE( 312)					{
HXLINE( 312)						 ::zpp_nape::geom::ZPP_AABB _this16 = bounds->zpp_inner;
HXDLIN( 312)						if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 312)							_this16->_validate();
            						}
            					}
HXDLIN( 312)					Float x0 = bounds->zpp_inner->minx;
HXDLIN( 312)					bool x01;
HXDLIN( 312)					if (hx::IsNotNull( subgrid )) {
HXLINE( 312)						x01 = subgrid->zpp_disp;
            					}
            					else {
HXLINE( 312)						x01 = false;
            					}
HXDLIN( 312)					if (x01) {
HXLINE( 312)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 312)					{
HXLINE( 312)						 ::zpp_nape::geom::ZPP_Vec2 _this17 = subgrid->zpp_inner;
HXDLIN( 312)						if (hx::IsNotNull( _this17->_validate )) {
HXLINE( 312)							_this17->_validate();
            						}
            					}
HXDLIN( 312)					Float x02 = (x0 + (subgrid->zpp_inner->x * ( (Float)(x) )));
HXLINE( 313)					Float x1;
HXDLIN( 313)					if ((x == (xn - 1))) {
HXLINE( 313)						 ::nape::geom::Vec2 _this18 = bounds->zpp_inner->getmax();
HXDLIN( 313)						bool x11;
HXDLIN( 313)						if (hx::IsNotNull( _this18 )) {
HXLINE( 313)							x11 = _this18->zpp_disp;
            						}
            						else {
HXLINE( 313)							x11 = false;
            						}
HXDLIN( 313)						if (x11) {
HXLINE( 313)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 313)						{
HXLINE( 313)							 ::zpp_nape::geom::ZPP_Vec2 _this19 = _this18->zpp_inner;
HXDLIN( 313)							if (hx::IsNotNull( _this19->_validate )) {
HXLINE( 313)								_this19->_validate();
            							}
            						}
HXDLIN( 313)						x1 = _this18->zpp_inner->x;
            					}
            					else {
HXLINE( 313)						bool x12;
HXDLIN( 313)						if (hx::IsNotNull( subgrid )) {
HXLINE( 313)							x12 = subgrid->zpp_disp;
            						}
            						else {
HXLINE( 313)							x12 = false;
            						}
HXDLIN( 313)						if (x12) {
HXLINE( 313)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 313)						{
HXLINE( 313)							 ::zpp_nape::geom::ZPP_Vec2 _this20 = subgrid->zpp_inner;
HXDLIN( 313)							if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 313)								_this20->_validate();
            							}
            						}
HXDLIN( 313)						x1 = (x02 + subgrid->zpp_inner->x);
            					}
HXLINE( 314)					{
HXLINE( 314)						int _g2 = 0;
HXDLIN( 314)						int _g11 = yn;
HXDLIN( 314)						while((_g2 < _g11)){
HXLINE( 314)							_g2 = (_g2 + 1);
HXDLIN( 314)							int y = (_g2 - 1);
HXLINE( 315)							{
HXLINE( 315)								 ::zpp_nape::geom::ZPP_AABB _this21 = bounds->zpp_inner;
HXDLIN( 315)								if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 315)									_this21->_validate();
            								}
            							}
HXDLIN( 315)							Float y0 = bounds->zpp_inner->miny;
HXDLIN( 315)							bool y01;
HXDLIN( 315)							if (hx::IsNotNull( subgrid )) {
HXLINE( 315)								y01 = subgrid->zpp_disp;
            							}
            							else {
HXLINE( 315)								y01 = false;
            							}
HXDLIN( 315)							if (y01) {
HXLINE( 315)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 315)							{
HXLINE( 315)								 ::zpp_nape::geom::ZPP_Vec2 _this22 = subgrid->zpp_inner;
HXDLIN( 315)								if (hx::IsNotNull( _this22->_validate )) {
HXLINE( 315)									_this22->_validate();
            								}
            							}
HXDLIN( 315)							Float y02 = (y0 + (subgrid->zpp_inner->y * ( (Float)(y) )));
HXLINE( 316)							Float y1;
HXDLIN( 316)							if ((y == (yn - 1))) {
HXLINE( 316)								 ::nape::geom::Vec2 _this23 = bounds->zpp_inner->getmax();
HXDLIN( 316)								bool y11;
HXDLIN( 316)								if (hx::IsNotNull( _this23 )) {
HXLINE( 316)									y11 = _this23->zpp_disp;
            								}
            								else {
HXLINE( 316)									y11 = false;
            								}
HXDLIN( 316)								if (y11) {
HXLINE( 316)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 316)								{
HXLINE( 316)									 ::zpp_nape::geom::ZPP_Vec2 _this24 = _this23->zpp_inner;
HXDLIN( 316)									if (hx::IsNotNull( _this24->_validate )) {
HXLINE( 316)										_this24->_validate();
            									}
            								}
HXDLIN( 316)								y1 = _this23->zpp_inner->y;
            							}
            							else {
HXLINE( 316)								bool y12;
HXDLIN( 316)								if (hx::IsNotNull( subgrid )) {
HXLINE( 316)									y12 = subgrid->zpp_disp;
            								}
            								else {
HXLINE( 316)									y12 = false;
            								}
HXDLIN( 316)								if (y12) {
HXLINE( 316)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 316)								{
HXLINE( 316)									 ::zpp_nape::geom::ZPP_Vec2 _this25 = subgrid->zpp_inner;
HXDLIN( 316)									if (hx::IsNotNull( _this25->_validate )) {
HXLINE( 316)										_this25->_validate();
            									}
            								}
HXDLIN( 316)								y1 = (y02 + subgrid->zpp_inner->y);
            							}
HXLINE( 317)							::zpp_nape::geom::ZPP_MarchingSquares_obj::run(iso,x02,y02,x1,y1,cellsize,quality,combine,ret);
            						}
            					}
            				}
            			}
            		}
HXLINE( 321)		if (cellsize->zpp_inner->weak) {
HXLINE( 325)			bool _hx_tmp13;
HXDLIN( 325)			if (hx::IsNotNull( cellsize )) {
HXLINE( 325)				_hx_tmp13 = cellsize->zpp_disp;
            			}
            			else {
HXLINE( 325)				_hx_tmp13 = false;
            			}
HXDLIN( 325)			if (_hx_tmp13) {
HXLINE( 325)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::zpp_nape::geom::ZPP_Vec2 _this26 = cellsize->zpp_inner;
HXDLIN( 325)				if (_this26->_immutable) {
HXLINE( 325)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 325)				if (hx::IsNotNull( _this26->_isimmutable )) {
HXLINE( 325)					_this26->_isimmutable();
            				}
            			}
HXDLIN( 325)			if (cellsize->zpp_inner->_inuse) {
HXLINE( 325)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 325)			 ::zpp_nape::geom::ZPP_Vec2 inner = cellsize->zpp_inner;
HXDLIN( 325)			cellsize->zpp_inner->outer = null();
HXDLIN( 325)			cellsize->zpp_inner = null();
HXDLIN( 325)			{
HXLINE( 325)				 ::nape::geom::Vec2 o = cellsize;
HXDLIN( 325)				o->zpp_pool = null();
HXDLIN( 325)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 325)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 325)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 325)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 325)				o->zpp_disp = true;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 325)				{
HXLINE( 325)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 325)						o1->outer->zpp_inner = null();
HXDLIN( 325)						o1->outer = null();
            					}
HXDLIN( 325)					o1->_isimmutable = null();
HXDLIN( 325)					o1->_validate = null();
HXDLIN( 325)					o1->_invalidate = null();
            				}
HXDLIN( 325)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 325)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 332)		if (hx::IsNotNull( subgrid )) {
HXLINE( 333)			if (subgrid->zpp_inner->weak) {
HXLINE( 337)				bool _hx_tmp14;
HXDLIN( 337)				if (hx::IsNotNull( subgrid )) {
HXLINE( 337)					_hx_tmp14 = subgrid->zpp_disp;
            				}
            				else {
HXLINE( 337)					_hx_tmp14 = false;
            				}
HXDLIN( 337)				if (_hx_tmp14) {
HXLINE( 337)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 337)				{
HXLINE( 337)					 ::zpp_nape::geom::ZPP_Vec2 _this27 = subgrid->zpp_inner;
HXDLIN( 337)					if (_this27->_immutable) {
HXLINE( 337)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 337)					if (hx::IsNotNull( _this27->_isimmutable )) {
HXLINE( 337)						_this27->_isimmutable();
            					}
            				}
HXDLIN( 337)				if (subgrid->zpp_inner->_inuse) {
HXLINE( 337)					HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            				}
HXDLIN( 337)				 ::zpp_nape::geom::ZPP_Vec2 inner1 = subgrid->zpp_inner;
HXDLIN( 337)				subgrid->zpp_inner->outer = null();
HXDLIN( 337)				subgrid->zpp_inner = null();
HXDLIN( 337)				{
HXLINE( 337)					 ::nape::geom::Vec2 o2 = subgrid;
HXDLIN( 337)					o2->zpp_pool = null();
HXDLIN( 337)					if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 337)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            					}
            					else {
HXLINE( 337)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            					}
HXDLIN( 337)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 337)					o2->zpp_disp = true;
            				}
HXDLIN( 337)				{
HXLINE( 337)					 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 337)					{
HXLINE( 337)						if (hx::IsNotNull( o3->outer )) {
HXLINE( 337)							o3->outer->zpp_inner = null();
HXDLIN( 337)							o3->outer = null();
            						}
HXDLIN( 337)						o3->_isimmutable = null();
HXDLIN( 337)						o3->_validate = null();
HXDLIN( 337)						o3->_invalidate = null();
            					}
HXDLIN( 337)					o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 337)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            				}
            			}
            		}
HXLINE( 345)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(MarchingSquares_obj,run,return )


MarchingSquares_obj::MarchingSquares_obj()
{
}

bool MarchingSquares_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *MarchingSquares_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MarchingSquares_obj_sStaticStorageInfo = 0;
#endif

hx::Class MarchingSquares_obj::__mClass;

static ::String MarchingSquares_obj_sStaticFields[] = {
	HX_("run",4b,e7,56,00),
	::String(null())
};

void MarchingSquares_obj::__register()
{
	MarchingSquares_obj _hx_dummy;
	MarchingSquares_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.MarchingSquares",6b,da,af,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MarchingSquares_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MarchingSquares_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MarchingSquares_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MarchingSquares_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MarchingSquares_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
