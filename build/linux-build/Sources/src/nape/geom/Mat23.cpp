// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <hxinc/nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <hxinc/zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_187_new,"nape.geom.Mat23","new",0x0099b447,"nape.geom.Mat23.new","nape/geom/Mat23.hx",187,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_205_get_a,"nape.geom.Mat23","get_a",0x99d490df,"nape.geom.Mat23.get_a","nape/geom/Mat23.hx",205,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_207_set_a,"nape.geom.Mat23","set_a",0x82a386eb,"nape.geom.Mat23.set_a","nape/geom/Mat23.hx",207,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_232_get_b,"nape.geom.Mat23","get_b",0x99d490e0,"nape.geom.Mat23.get_b","nape/geom/Mat23.hx",232,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_234_set_b,"nape.geom.Mat23","set_b",0x82a386ec,"nape.geom.Mat23.set_b","nape/geom/Mat23.hx",234,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_259_get_c,"nape.geom.Mat23","get_c",0x99d490e1,"nape.geom.Mat23.get_c","nape/geom/Mat23.hx",259,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_261_set_c,"nape.geom.Mat23","set_c",0x82a386ed,"nape.geom.Mat23.set_c","nape/geom/Mat23.hx",261,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_286_get_d,"nape.geom.Mat23","get_d",0x99d490e2,"nape.geom.Mat23.get_d","nape/geom/Mat23.hx",286,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_288_set_d,"nape.geom.Mat23","set_d",0x82a386ee,"nape.geom.Mat23.set_d","nape/geom/Mat23.hx",288,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_313_get_tx,"nape.geom.Mat23","get_tx",0x002a4346,"nape.geom.Mat23.get_tx","nape/geom/Mat23.hx",313,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_315_set_tx,"nape.geom.Mat23","set_tx",0xcc7297ba,"nape.geom.Mat23.set_tx","nape/geom/Mat23.hx",315,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_340_get_ty,"nape.geom.Mat23","get_ty",0x002a4347,"nape.geom.Mat23.get_ty","nape/geom/Mat23.hx",340,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_342_set_ty,"nape.geom.Mat23","set_ty",0xcc7297bb,"nape.geom.Mat23.set_ty","nape/geom/Mat23.hx",342,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_387_copy,"nape.geom.Mat23","copy",0x7ea641ee,"nape.geom.Mat23.copy","nape/geom/Mat23.hx",387,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_396_set,"nape.geom.Mat23","set",0x009d7f89,"nape.geom.Mat23.set","nape/geom/Mat23.hx",396,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_420_setAs,"nape.geom.Mat23","setAs",0x82a36cdb,"nape.geom.Mat23.setAs","nape/geom/Mat23.hx",420,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_434_reset,"nape.geom.Mat23","reset",0xef3c3576,"nape.geom.Mat23.reset","nape/geom/Mat23.hx",434,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_548_get_determinant,"nape.geom.Mat23","get_determinant",0x66b6b793,"nape.geom.Mat23.get_determinant","nape/geom/Mat23.hx",548,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_560_singular,"nape.geom.Mat23","singular",0x9c1a3f90,"nape.geom.Mat23.singular","nape/geom/Mat23.hx",560,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_577_inverse,"nape.geom.Mat23","inverse",0x3bf4af17,"nape.geom.Mat23.inverse","nape/geom/Mat23.hx",577,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_607_transpose,"nape.geom.Mat23","transpose",0x5c5f9ba0,"nape.geom.Mat23.transpose","nape/geom/Mat23.hx",607,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_622_concat,"nape.geom.Mat23","concat",0x24ca4f8d,"nape.geom.Mat23.concat","nape/geom/Mat23.hx",622,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_648_transform,"nape.geom.Mat23","transform",0x55c37893,"nape.geom.Mat23.transform","nape/geom/Mat23.hx",648,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_702_inverseTransform,"nape.geom.Mat23","inverseTransform",0xbb944355,"nape.geom.Mat23.inverseTransform","nape/geom/Mat23.hx",702,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_743_toString,"nape.geom.Mat23","toString",0x7d626765,"nape.geom.Mat23.toString","nape/geom/Mat23.hx",743,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_767_equiorthogonal,"nape.geom.Mat23","equiorthogonal",0x36cf42b2,"nape.geom.Mat23.equiorthogonal","nape/geom/Mat23.hx",767,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_794_orthogonal,"nape.geom.Mat23","orthogonal",0x33057072,"nape.geom.Mat23.orthogonal","nape/geom/Mat23.hx",794,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_817_equiorthogonalise,"nape.geom.Mat23","equiorthogonalise",0xca9e09c9,"nape.geom.Mat23.equiorthogonalise","nape/geom/Mat23.hx",817,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_862_orthogonalise,"nape.geom.Mat23","orthogonalise",0x11aaf409,"nape.geom.Mat23.orthogonalise","nape/geom/Mat23.hx",862,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_490_rotation,"nape.geom.Mat23","rotation",0x4d79d3f7,"nape.geom.Mat23.rotation","nape/geom/Mat23.hx",490,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_514_translation,"nape.geom.Mat23","translation",0x3fd8d3d8,"nape.geom.Mat23.translation","nape/geom/Mat23.hx",514,0xee046d69)
HX_LOCAL_STACK_FRAME(_hx_pos_7545a35db7efdc4e_530_scale,"nape.geom.Mat23","scale",0x8142ba31,"nape.geom.Mat23.scale","nape/geom/Mat23.hx",530,0xee046d69)
namespace nape{
namespace geom{

void Mat23_obj::__construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
            		Float a = __o_a.Default(((Float)1.0));
            		Float b = __o_b.Default(((Float)0.0));
            		Float c = __o_c.Default(((Float)0.0));
            		Float d = __o_d.Default(((Float)1.0));
            		Float tx = __o_tx.Default(((Float)0.0));
            		Float ty = __o_ty.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_187_new)
HXLINE( 191)		this->zpp_inner = null();
HXLINE( 371)		this->zpp_inner = ::zpp_nape::geom::ZPP_Mat23_obj::get();
HXLINE( 372)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 373)		{
HXLINE( 373)			if ((a != a)) {
HXLINE( 373)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 373)			this->zpp_inner->a = a;
HXDLIN( 373)			{
HXLINE( 373)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 373)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 373)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 374)		{
HXLINE( 374)			if ((b != b)) {
HXLINE( 374)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 374)			this->zpp_inner->b = b;
HXDLIN( 374)			{
HXLINE( 374)				 ::zpp_nape::geom::ZPP_Mat23 _this1 = this->zpp_inner;
HXDLIN( 374)				if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 374)					_this1->_invalidate();
            				}
            			}
            		}
HXLINE( 375)		{
HXLINE( 375)			if ((tx != tx)) {
HXLINE( 375)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("tx",84,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 375)			this->zpp_inner->tx = tx;
HXDLIN( 375)			{
HXLINE( 375)				 ::zpp_nape::geom::ZPP_Mat23 _this2 = this->zpp_inner;
HXDLIN( 375)				if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 375)					_this2->_invalidate();
            				}
            			}
            		}
HXLINE( 376)		{
HXLINE( 376)			if ((c != c)) {
HXLINE( 376)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("c",63,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 376)			this->zpp_inner->c = c;
HXDLIN( 376)			{
HXLINE( 376)				 ::zpp_nape::geom::ZPP_Mat23 _this3 = this->zpp_inner;
HXDLIN( 376)				if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 376)					_this3->_invalidate();
            				}
            			}
            		}
HXLINE( 377)		{
HXLINE( 377)			if ((d != d)) {
HXLINE( 377)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 377)			this->zpp_inner->d = d;
HXDLIN( 377)			{
HXLINE( 377)				 ::zpp_nape::geom::ZPP_Mat23 _this4 = this->zpp_inner;
HXDLIN( 377)				if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 377)					_this4->_invalidate();
            				}
            			}
            		}
HXLINE( 378)		{
HXLINE( 378)			if ((ty != ty)) {
HXLINE( 378)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("ty",85,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXDLIN( 378)			this->zpp_inner->ty = ty;
HXDLIN( 378)			{
HXLINE( 378)				 ::zpp_nape::geom::ZPP_Mat23 _this5 = this->zpp_inner;
HXDLIN( 378)				if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 378)					_this5->_invalidate();
            				}
            			}
            		}
            	}

Dynamic Mat23_obj::__CreateEmpty() { return new Mat23_obj; }

void *Mat23_obj::_hx_vtable = 0;

Dynamic Mat23_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mat23_obj > _hx_result = new Mat23_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Mat23_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x285cd39d;
}

Float Mat23_obj::get_a(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_205_get_a)
HXDLIN( 205)		return this->zpp_inner->a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_a,return )

Float Mat23_obj::set_a(Float a){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_207_set_a)
HXLINE( 208)		{
HXLINE( 210)			if ((a != a)) {
HXLINE( 211)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 214)			this->zpp_inner->a = a;
HXLINE( 215)			{
HXLINE( 215)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 215)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 215)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 217)		return this->zpp_inner->a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_a,return )

Float Mat23_obj::get_b(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_232_get_b)
HXDLIN( 232)		return this->zpp_inner->b;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_b,return )

Float Mat23_obj::set_b(Float b){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_234_set_b)
HXLINE( 235)		{
HXLINE( 237)			if ((b != b)) {
HXLINE( 238)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 241)			this->zpp_inner->b = b;
HXLINE( 242)			{
HXLINE( 242)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 242)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 242)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 244)		return this->zpp_inner->b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_b,return )

Float Mat23_obj::get_c(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_259_get_c)
HXDLIN( 259)		return this->zpp_inner->c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_c,return )

Float Mat23_obj::set_c(Float c){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_261_set_c)
HXLINE( 262)		{
HXLINE( 264)			if ((c != c)) {
HXLINE( 265)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("c",63,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 268)			this->zpp_inner->c = c;
HXLINE( 269)			{
HXLINE( 269)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 269)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 269)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 271)		return this->zpp_inner->c;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_c,return )

Float Mat23_obj::get_d(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_286_get_d)
HXDLIN( 286)		return this->zpp_inner->d;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_d,return )

Float Mat23_obj::set_d(Float d){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_288_set_d)
HXLINE( 289)		{
HXLINE( 291)			if ((d != d)) {
HXLINE( 292)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 295)			this->zpp_inner->d = d;
HXLINE( 296)			{
HXLINE( 296)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 296)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 296)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 298)		return this->zpp_inner->d;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_d,return )

Float Mat23_obj::get_tx(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_313_get_tx)
HXDLIN( 313)		return this->zpp_inner->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_tx,return )

Float Mat23_obj::set_tx(Float tx){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_315_set_tx)
HXLINE( 316)		{
HXLINE( 318)			if ((tx != tx)) {
HXLINE( 319)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("tx",84,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 322)			this->zpp_inner->tx = tx;
HXLINE( 323)			{
HXLINE( 323)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 323)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 323)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 325)		return this->zpp_inner->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_tx,return )

Float Mat23_obj::get_ty(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_340_get_ty)
HXDLIN( 340)		return this->zpp_inner->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_ty,return )

Float Mat23_obj::set_ty(Float ty){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_342_set_ty)
HXLINE( 343)		{
HXLINE( 345)			if ((ty != ty)) {
HXLINE( 346)				HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("ty",85,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            			}
HXLINE( 349)			this->zpp_inner->ty = ty;
HXLINE( 350)			{
HXLINE( 350)				 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 350)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 350)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 352)		return this->zpp_inner->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_ty,return )

 ::nape::geom::Mat23 Mat23_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_387_copy)
HXDLIN( 387)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,this->zpp_inner->a,this->zpp_inner->b,this->zpp_inner->c,this->zpp_inner->d,this->zpp_inner->tx,this->zpp_inner->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,copy,return )

 ::nape::geom::Mat23 Mat23_obj::set( ::nape::geom::Mat23 matrix){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_396_set)
HXLINE( 398)		if (hx::IsNull( matrix )) {
HXLINE( 399)			HX_STACK_DO_THROW(HX_("Error: Cannot set form null matrix",ab,52,e0,61));
            		}
HXLINE( 402)		{
HXLINE( 402)			 ::zpp_nape::geom::ZPP_Mat23 m = matrix->zpp_inner;
HXDLIN( 402)			this->zpp_inner->setas(m->a,m->b,m->c,m->d,m->tx,m->ty);
            		}
HXLINE( 403)		{
HXLINE( 403)			 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 403)			if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 403)				_this->_invalidate();
            			}
            		}
HXLINE( 404)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set,return )

 ::nape::geom::Mat23 Mat23_obj::setAs(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
            		Float a = __o_a.Default(((Float)1.0));
            		Float b = __o_b.Default(((Float)0.0));
            		Float c = __o_c.Default(((Float)0.0));
            		Float d = __o_d.Default(((Float)1.0));
            		Float tx = __o_tx.Default(((Float)0.0));
            		Float ty = __o_ty.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_420_setAs)
HXLINE( 421)		this->zpp_inner->setas(a,b,c,d,tx,ty);
HXLINE( 422)		{
HXLINE( 422)			 ::zpp_nape::geom::ZPP_Mat23 _this = this->zpp_inner;
HXDLIN( 422)			if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 422)				_this->_invalidate();
            			}
            		}
HXLINE( 423)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mat23_obj,setAs,return )

 ::nape::geom::Mat23 Mat23_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_434_reset)
HXDLIN( 434)		return this->setAs(null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,reset,return )

Float Mat23_obj::get_determinant(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_548_get_determinant)
HXDLIN( 548)		return ((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_determinant,return )

bool Mat23_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_560_singular)
HXLINE( 561)		Float norm = ((((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->b * this->zpp_inner->b)) + (this->zpp_inner->c * this->zpp_inner->c)) + (this->zpp_inner->d * this->zpp_inner->d));
HXLINE( 562)		Float limit = ((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c));
HXLINE( 563)		if ((limit < 0)) {
HXLINE( 563)			limit = -(limit);
            		}
HXLINE( 564)		return (norm > (::nape::Config_obj::illConditionedThreshold * limit));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,singular,return )

 ::nape::geom::Mat23 Mat23_obj::inverse(){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_577_inverse)
HXLINE( 579)		if (this->singular()) {
HXLINE( 580)			HX_STACK_DO_THROW(HX_("Error: Matrix is singular and cannot be inverted",42,5a,3f,95));
            		}
HXLINE( 583)		Float idet = (((Float)1.0) / ((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)));
HXLINE( 584)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,(this->zpp_inner->d * idet),(-(this->zpp_inner->b) * idet),(-(this->zpp_inner->c) * idet),(this->zpp_inner->a * idet),(((this->zpp_inner->b * this->zpp_inner->ty) - (this->zpp_inner->d * this->zpp_inner->tx)) * idet),(((this->zpp_inner->c * this->zpp_inner->tx) - (this->zpp_inner->a * this->zpp_inner->ty)) * idet));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,inverse,return )

 ::nape::geom::Mat23 Mat23_obj::transpose(){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_607_transpose)
HXDLIN( 607)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,this->zpp_inner->a,this->zpp_inner->c,this->zpp_inner->b,this->zpp_inner->d,((-(this->zpp_inner->a) * this->zpp_inner->tx) - (this->zpp_inner->c * this->zpp_inner->ty)),((-(this->zpp_inner->b) * this->zpp_inner->tx) - (this->zpp_inner->d * this->zpp_inner->ty)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,transpose,return )

 ::nape::geom::Mat23 Mat23_obj::concat( ::nape::geom::Mat23 matrix){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_622_concat)
HXLINE( 623)		 ::nape::geom::Mat23 m = matrix;
HXLINE( 625)		if (hx::IsNull( m )) {
HXLINE( 626)			HX_STACK_DO_THROW(HX_("Error: Cannot concatenate with null Mat23",a8,bc,02,b2));
            		}
HXLINE( 629)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,((m->zpp_inner->a * this->zpp_inner->a) + (m->zpp_inner->b * this->zpp_inner->c)),((m->zpp_inner->a * this->zpp_inner->b) + (m->zpp_inner->b * this->zpp_inner->d)),((m->zpp_inner->c * this->zpp_inner->a) + (m->zpp_inner->d * this->zpp_inner->c)),((m->zpp_inner->c * this->zpp_inner->b) + (m->zpp_inner->d * this->zpp_inner->d)),(((m->zpp_inner->a * this->zpp_inner->tx) + (m->zpp_inner->b * this->zpp_inner->ty)) + m->zpp_inner->tx),(((m->zpp_inner->c * this->zpp_inner->tx) + (m->zpp_inner->d * this->zpp_inner->ty)) + m->zpp_inner->ty));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,concat,return )

 ::nape::geom::Vec2 Mat23_obj::transform( ::nape::geom::Vec2 point,hx::Null< bool >  __o_noTranslation,hx::Null< bool >  __o_weak){
            		bool noTranslation = __o_noTranslation.Default(false);
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_648_transform)
HXLINE( 651)		bool _hx_tmp;
HXDLIN( 651)		if (hx::IsNotNull( point )) {
HXLINE( 651)			_hx_tmp = point->zpp_disp;
            		}
            		else {
HXLINE( 651)			_hx_tmp = false;
            		}
HXDLIN( 651)		if (_hx_tmp) {
HXLINE( 651)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 655)		if (hx::IsNull( point )) {
HXLINE( 656)			HX_STACK_DO_THROW(HX_("Error: Cannot transform null Vec2",54,10,c3,67));
            		}
HXLINE( 659)		 ::nape::geom::Vec2 ret;
HXLINE( 660)		if (noTranslation) {
HXLINE( 661)			bool x;
HXDLIN( 661)			if (hx::IsNotNull( point )) {
HXLINE( 661)				x = point->zpp_disp;
            			}
            			else {
HXLINE( 661)				x = false;
            			}
HXDLIN( 661)			if (x) {
HXLINE( 661)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 661)			{
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 _this = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 661)					_this->_validate();
            				}
            			}
HXDLIN( 661)			Float x1 = (point->zpp_inner->x * this->zpp_inner->a);
HXDLIN( 661)			bool x2;
HXDLIN( 661)			if (hx::IsNotNull( point )) {
HXLINE( 661)				x2 = point->zpp_disp;
            			}
            			else {
HXLINE( 661)				x2 = false;
            			}
HXDLIN( 661)			if (x2) {
HXLINE( 661)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 661)			{
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 661)					_this1->_validate();
            				}
            			}
HXDLIN( 661)			Float x3 = (x1 + (point->zpp_inner->y * this->zpp_inner->b));
HXDLIN( 661)			bool y;
HXDLIN( 661)			if (hx::IsNotNull( point )) {
HXLINE( 661)				y = point->zpp_disp;
            			}
            			else {
HXLINE( 661)				y = false;
            			}
HXDLIN( 661)			if (y) {
HXLINE( 661)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 661)			{
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 661)					_this2->_validate();
            				}
            			}
HXDLIN( 661)			Float y1 = (point->zpp_inner->x * this->zpp_inner->c);
HXDLIN( 661)			bool y2;
HXDLIN( 661)			if (hx::IsNotNull( point )) {
HXLINE( 661)				y2 = point->zpp_disp;
            			}
            			else {
HXLINE( 661)				y2 = false;
            			}
HXDLIN( 661)			if (y2) {
HXLINE( 661)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 661)			{
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 661)					_this3->_validate();
            				}
            			}
HXDLIN( 661)			Float y3 = (y1 + (point->zpp_inner->y * this->zpp_inner->d));
HXDLIN( 661)			bool ret1;
HXDLIN( 661)			if ((x3 == x3)) {
HXLINE( 661)				ret1 = (y3 != y3);
            			}
            			else {
HXLINE( 661)				ret1 = true;
            			}
HXDLIN( 661)			if (ret1) {
HXLINE( 661)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 661)			 ::nape::geom::Vec2 ret2;
HXDLIN( 661)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 661)				ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 661)				ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 661)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 661)				ret2->zpp_pool = null();
HXDLIN( 661)				ret2->zpp_disp = false;
HXDLIN( 661)				if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 661)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN( 661)			if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 661)				 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN( 661)				{
HXLINE( 661)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 661)						ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 661)						ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 661)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 661)						ret3->next = null();
            					}
HXDLIN( 661)					ret3->weak = false;
            				}
HXDLIN( 661)				ret3->_immutable = false;
HXDLIN( 661)				{
HXLINE( 661)					ret3->x = x3;
HXDLIN( 661)					ret3->y = y3;
            				}
HXDLIN( 661)				ret2->zpp_inner = ret3;
HXDLIN( 661)				ret2->zpp_inner->outer = ret2;
            			}
            			else {
HXLINE( 661)				bool ret4;
HXDLIN( 661)				if (hx::IsNotNull( ret2 )) {
HXLINE( 661)					ret4 = ret2->zpp_disp;
            				}
            				else {
HXLINE( 661)					ret4 = false;
            				}
HXDLIN( 661)				if (ret4) {
HXLINE( 661)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 661)				{
HXLINE( 661)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret2->zpp_inner;
HXDLIN( 661)					if (_this4->_immutable) {
HXLINE( 661)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 661)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 661)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 661)				bool ret5;
HXDLIN( 661)				if ((x3 == x3)) {
HXLINE( 661)					ret5 = (y3 != y3);
            				}
            				else {
HXLINE( 661)					ret5 = true;
            				}
HXDLIN( 661)				if (ret5) {
HXLINE( 661)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 661)				bool ret6;
HXDLIN( 661)				bool ret7;
HXDLIN( 661)				if (hx::IsNotNull( ret2 )) {
HXLINE( 661)					ret7 = ret2->zpp_disp;
            				}
            				else {
HXLINE( 661)					ret7 = false;
            				}
HXDLIN( 661)				if (ret7) {
HXLINE( 661)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 661)				{
HXLINE( 661)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret2->zpp_inner;
HXDLIN( 661)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 661)						_this5->_validate();
            					}
            				}
HXDLIN( 661)				if ((ret2->zpp_inner->x == x3)) {
HXLINE( 661)					bool ret8;
HXDLIN( 661)					if (hx::IsNotNull( ret2 )) {
HXLINE( 661)						ret8 = ret2->zpp_disp;
            					}
            					else {
HXLINE( 661)						ret8 = false;
            					}
HXDLIN( 661)					if (ret8) {
HXLINE( 661)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 661)					{
HXLINE( 661)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret2->zpp_inner;
HXDLIN( 661)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 661)							_this6->_validate();
            						}
            					}
HXDLIN( 661)					ret6 = (ret2->zpp_inner->y == y3);
            				}
            				else {
HXLINE( 661)					ret6 = false;
            				}
HXDLIN( 661)				if (!(ret6)) {
HXLINE( 661)					{
HXLINE( 661)						ret2->zpp_inner->x = x3;
HXDLIN( 661)						ret2->zpp_inner->y = y3;
            					}
HXDLIN( 661)					{
HXLINE( 661)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret2->zpp_inner;
HXDLIN( 661)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 661)							_this7->_invalidate(_this7);
            						}
            					}
            				}
            			}
HXDLIN( 661)			ret2->zpp_inner->weak = weak;
HXDLIN( 661)			ret = ret2;
            		}
            		else {
HXLINE( 664)			bool x4;
HXDLIN( 664)			if (hx::IsNotNull( point )) {
HXLINE( 664)				x4 = point->zpp_disp;
            			}
            			else {
HXLINE( 664)				x4 = false;
            			}
HXDLIN( 664)			if (x4) {
HXLINE( 664)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 664)			{
HXLINE( 664)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 664)					_this8->_validate();
            				}
            			}
HXDLIN( 664)			Float x5 = (point->zpp_inner->x * this->zpp_inner->a);
HXDLIN( 664)			bool x6;
HXDLIN( 664)			if (hx::IsNotNull( point )) {
HXLINE( 664)				x6 = point->zpp_disp;
            			}
            			else {
HXLINE( 664)				x6 = false;
            			}
HXDLIN( 664)			if (x6) {
HXLINE( 664)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 664)			{
HXLINE( 664)				 ::zpp_nape::geom::ZPP_Vec2 _this9 = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 664)					_this9->_validate();
            				}
            			}
HXDLIN( 664)			Float x7 = ((x5 + (point->zpp_inner->y * this->zpp_inner->b)) + this->zpp_inner->tx);
HXDLIN( 664)			bool y4;
HXDLIN( 664)			if (hx::IsNotNull( point )) {
HXLINE( 664)				y4 = point->zpp_disp;
            			}
            			else {
HXLINE( 664)				y4 = false;
            			}
HXDLIN( 664)			if (y4) {
HXLINE( 664)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 664)			{
HXLINE( 664)				 ::zpp_nape::geom::ZPP_Vec2 _this10 = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 664)					_this10->_validate();
            				}
            			}
HXDLIN( 664)			Float y5 = (point->zpp_inner->x * this->zpp_inner->c);
HXDLIN( 664)			bool y6;
HXDLIN( 664)			if (hx::IsNotNull( point )) {
HXLINE( 664)				y6 = point->zpp_disp;
            			}
            			else {
HXLINE( 664)				y6 = false;
            			}
HXDLIN( 664)			if (y6) {
HXLINE( 664)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 664)			{
HXLINE( 664)				 ::zpp_nape::geom::ZPP_Vec2 _this11 = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 664)					_this11->_validate();
            				}
            			}
HXDLIN( 664)			Float y7 = ((y5 + (point->zpp_inner->y * this->zpp_inner->d)) + this->zpp_inner->ty);
HXDLIN( 664)			bool ret9;
HXDLIN( 664)			if ((x7 == x7)) {
HXLINE( 664)				ret9 = (y7 != y7);
            			}
            			else {
HXLINE( 664)				ret9 = true;
            			}
HXDLIN( 664)			if (ret9) {
HXLINE( 664)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 664)			 ::nape::geom::Vec2 ret10;
HXDLIN( 664)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 664)				ret10 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 664)				ret10 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 664)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret10->zpp_pool;
HXDLIN( 664)				ret10->zpp_pool = null();
HXDLIN( 664)				ret10->zpp_disp = false;
HXDLIN( 664)				if (hx::IsEq( ret10,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 664)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN( 664)			if (hx::IsNull( ret10->zpp_inner )) {
HXLINE( 664)				 ::zpp_nape::geom::ZPP_Vec2 ret11;
HXDLIN( 664)				{
HXLINE( 664)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 664)						ret11 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 664)						ret11 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 664)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret11->next;
HXDLIN( 664)						ret11->next = null();
            					}
HXDLIN( 664)					ret11->weak = false;
            				}
HXDLIN( 664)				ret11->_immutable = false;
HXDLIN( 664)				{
HXLINE( 664)					ret11->x = x7;
HXDLIN( 664)					ret11->y = y7;
            				}
HXDLIN( 664)				ret10->zpp_inner = ret11;
HXDLIN( 664)				ret10->zpp_inner->outer = ret10;
            			}
            			else {
HXLINE( 664)				bool ret12;
HXDLIN( 664)				if (hx::IsNotNull( ret10 )) {
HXLINE( 664)					ret12 = ret10->zpp_disp;
            				}
            				else {
HXLINE( 664)					ret12 = false;
            				}
HXDLIN( 664)				if (ret12) {
HXLINE( 664)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 664)				{
HXLINE( 664)					 ::zpp_nape::geom::ZPP_Vec2 _this12 = ret10->zpp_inner;
HXDLIN( 664)					if (_this12->_immutable) {
HXLINE( 664)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 664)					if (hx::IsNotNull( _this12->_isimmutable )) {
HXLINE( 664)						_this12->_isimmutable();
            					}
            				}
HXDLIN( 664)				bool ret13;
HXDLIN( 664)				if ((x7 == x7)) {
HXLINE( 664)					ret13 = (y7 != y7);
            				}
            				else {
HXLINE( 664)					ret13 = true;
            				}
HXDLIN( 664)				if (ret13) {
HXLINE( 664)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 664)				bool ret14;
HXDLIN( 664)				bool ret15;
HXDLIN( 664)				if (hx::IsNotNull( ret10 )) {
HXLINE( 664)					ret15 = ret10->zpp_disp;
            				}
            				else {
HXLINE( 664)					ret15 = false;
            				}
HXDLIN( 664)				if (ret15) {
HXLINE( 664)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 664)				{
HXLINE( 664)					 ::zpp_nape::geom::ZPP_Vec2 _this13 = ret10->zpp_inner;
HXDLIN( 664)					if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 664)						_this13->_validate();
            					}
            				}
HXDLIN( 664)				if ((ret10->zpp_inner->x == x7)) {
HXLINE( 664)					bool ret16;
HXDLIN( 664)					if (hx::IsNotNull( ret10 )) {
HXLINE( 664)						ret16 = ret10->zpp_disp;
            					}
            					else {
HXLINE( 664)						ret16 = false;
            					}
HXDLIN( 664)					if (ret16) {
HXLINE( 664)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 664)					{
HXLINE( 664)						 ::zpp_nape::geom::ZPP_Vec2 _this14 = ret10->zpp_inner;
HXDLIN( 664)						if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 664)							_this14->_validate();
            						}
            					}
HXDLIN( 664)					ret14 = (ret10->zpp_inner->y == y7);
            				}
            				else {
HXLINE( 664)					ret14 = false;
            				}
HXDLIN( 664)				if (!(ret14)) {
HXLINE( 664)					{
HXLINE( 664)						ret10->zpp_inner->x = x7;
HXDLIN( 664)						ret10->zpp_inner->y = y7;
            					}
HXDLIN( 664)					{
HXLINE( 664)						 ::zpp_nape::geom::ZPP_Vec2 _this15 = ret10->zpp_inner;
HXDLIN( 664)						if (hx::IsNotNull( _this15->_invalidate )) {
HXLINE( 664)							_this15->_invalidate(_this15);
            						}
            					}
            				}
            			}
HXDLIN( 664)			ret10->zpp_inner->weak = weak;
HXDLIN( 664)			ret = ret10;
            		}
HXLINE( 666)		if (point->zpp_inner->weak) {
HXLINE( 670)			bool _hx_tmp1;
HXDLIN( 670)			if (hx::IsNotNull( point )) {
HXLINE( 670)				_hx_tmp1 = point->zpp_disp;
            			}
            			else {
HXLINE( 670)				_hx_tmp1 = false;
            			}
HXDLIN( 670)			if (_hx_tmp1) {
HXLINE( 670)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 670)			{
HXLINE( 670)				 ::zpp_nape::geom::ZPP_Vec2 _this16 = point->zpp_inner;
HXDLIN( 670)				if (_this16->_immutable) {
HXLINE( 670)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 670)				if (hx::IsNotNull( _this16->_isimmutable )) {
HXLINE( 670)					_this16->_isimmutable();
            				}
            			}
HXDLIN( 670)			if (point->zpp_inner->_inuse) {
HXLINE( 670)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 670)			 ::zpp_nape::geom::ZPP_Vec2 inner = point->zpp_inner;
HXDLIN( 670)			point->zpp_inner->outer = null();
HXDLIN( 670)			point->zpp_inner = null();
HXDLIN( 670)			{
HXLINE( 670)				 ::nape::geom::Vec2 o = point;
HXDLIN( 670)				o->zpp_pool = null();
HXDLIN( 670)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 670)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 670)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 670)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 670)				o->zpp_disp = true;
            			}
HXDLIN( 670)			{
HXLINE( 670)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 670)				{
HXLINE( 670)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 670)						o1->outer->zpp_inner = null();
HXDLIN( 670)						o1->outer = null();
            					}
HXDLIN( 670)					o1->_isimmutable = null();
HXDLIN( 670)					o1->_validate = null();
HXDLIN( 670)					o1->_invalidate = null();
            				}
HXDLIN( 670)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 670)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 677)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mat23_obj,transform,return )

 ::nape::geom::Vec2 Mat23_obj::inverseTransform( ::nape::geom::Vec2 point,hx::Null< bool >  __o_noTranslation,hx::Null< bool >  __o_weak){
            		bool noTranslation = __o_noTranslation.Default(false);
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_702_inverseTransform)
HXLINE( 705)		bool _hx_tmp;
HXDLIN( 705)		if (hx::IsNotNull( point )) {
HXLINE( 705)			_hx_tmp = point->zpp_disp;
            		}
            		else {
HXLINE( 705)			_hx_tmp = false;
            		}
HXDLIN( 705)		if (_hx_tmp) {
HXLINE( 705)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 709)		if (hx::IsNull( point )) {
HXLINE( 710)			HX_STACK_DO_THROW(HX_("Error: Cannot transform null Vec2",54,10,c3,67));
            		}
HXLINE( 712)		if (this->singular()) {
HXLINE( 713)			HX_STACK_DO_THROW(HX_("Error: Matrix is singular and inverse transformation cannot be performed",66,f3,57,5f));
            		}
HXLINE( 716)		Float idet = (((Float)1.0) / ((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)));
HXLINE( 717)		 ::nape::geom::Vec2 ret;
HXLINE( 718)		if (noTranslation) {
HXLINE( 719)			bool x;
HXDLIN( 719)			if (hx::IsNotNull( point )) {
HXLINE( 719)				x = point->zpp_disp;
            			}
            			else {
HXLINE( 719)				x = false;
            			}
HXDLIN( 719)			if (x) {
HXLINE( 719)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 719)			{
HXLINE( 719)				 ::zpp_nape::geom::ZPP_Vec2 _this = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 719)					_this->_validate();
            				}
            			}
HXDLIN( 719)			Float x1 = (point->zpp_inner->x * this->zpp_inner->d);
HXDLIN( 719)			bool x2;
HXDLIN( 719)			if (hx::IsNotNull( point )) {
HXLINE( 719)				x2 = point->zpp_disp;
            			}
            			else {
HXLINE( 719)				x2 = false;
            			}
HXDLIN( 719)			if (x2) {
HXLINE( 719)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 719)			{
HXLINE( 719)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 719)					_this1->_validate();
            				}
            			}
HXDLIN( 719)			Float x3 = ((x1 - (point->zpp_inner->y * this->zpp_inner->b)) * idet);
HXDLIN( 719)			bool y;
HXDLIN( 719)			if (hx::IsNotNull( point )) {
HXLINE( 719)				y = point->zpp_disp;
            			}
            			else {
HXLINE( 719)				y = false;
            			}
HXDLIN( 719)			if (y) {
HXLINE( 719)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 719)			{
HXLINE( 719)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 719)					_this2->_validate();
            				}
            			}
HXDLIN( 719)			Float y1 = (point->zpp_inner->y * this->zpp_inner->a);
HXDLIN( 719)			bool y2;
HXDLIN( 719)			if (hx::IsNotNull( point )) {
HXLINE( 719)				y2 = point->zpp_disp;
            			}
            			else {
HXLINE( 719)				y2 = false;
            			}
HXDLIN( 719)			if (y2) {
HXLINE( 719)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 719)			{
HXLINE( 719)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 719)					_this3->_validate();
            				}
            			}
HXDLIN( 719)			Float y3 = ((y1 - (point->zpp_inner->x * this->zpp_inner->c)) * idet);
HXDLIN( 719)			bool ret1;
HXDLIN( 719)			if ((x3 == x3)) {
HXLINE( 719)				ret1 = (y3 != y3);
            			}
            			else {
HXLINE( 719)				ret1 = true;
            			}
HXDLIN( 719)			if (ret1) {
HXLINE( 719)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 719)			 ::nape::geom::Vec2 ret2;
HXDLIN( 719)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 719)				ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 719)				ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 719)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 719)				ret2->zpp_pool = null();
HXDLIN( 719)				ret2->zpp_disp = false;
HXDLIN( 719)				if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 719)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN( 719)			if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 719)				 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN( 719)				{
HXLINE( 719)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 719)						ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 719)						ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 719)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 719)						ret3->next = null();
            					}
HXDLIN( 719)					ret3->weak = false;
            				}
HXDLIN( 719)				ret3->_immutable = false;
HXDLIN( 719)				{
HXLINE( 719)					ret3->x = x3;
HXDLIN( 719)					ret3->y = y3;
            				}
HXDLIN( 719)				ret2->zpp_inner = ret3;
HXDLIN( 719)				ret2->zpp_inner->outer = ret2;
            			}
            			else {
HXLINE( 719)				bool ret4;
HXDLIN( 719)				if (hx::IsNotNull( ret2 )) {
HXLINE( 719)					ret4 = ret2->zpp_disp;
            				}
            				else {
HXLINE( 719)					ret4 = false;
            				}
HXDLIN( 719)				if (ret4) {
HXLINE( 719)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 719)				{
HXLINE( 719)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret2->zpp_inner;
HXDLIN( 719)					if (_this4->_immutable) {
HXLINE( 719)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 719)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 719)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 719)				bool ret5;
HXDLIN( 719)				if ((x3 == x3)) {
HXLINE( 719)					ret5 = (y3 != y3);
            				}
            				else {
HXLINE( 719)					ret5 = true;
            				}
HXDLIN( 719)				if (ret5) {
HXLINE( 719)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 719)				bool ret6;
HXDLIN( 719)				bool ret7;
HXDLIN( 719)				if (hx::IsNotNull( ret2 )) {
HXLINE( 719)					ret7 = ret2->zpp_disp;
            				}
            				else {
HXLINE( 719)					ret7 = false;
            				}
HXDLIN( 719)				if (ret7) {
HXLINE( 719)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 719)				{
HXLINE( 719)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret2->zpp_inner;
HXDLIN( 719)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 719)						_this5->_validate();
            					}
            				}
HXDLIN( 719)				if ((ret2->zpp_inner->x == x3)) {
HXLINE( 719)					bool ret8;
HXDLIN( 719)					if (hx::IsNotNull( ret2 )) {
HXLINE( 719)						ret8 = ret2->zpp_disp;
            					}
            					else {
HXLINE( 719)						ret8 = false;
            					}
HXDLIN( 719)					if (ret8) {
HXLINE( 719)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 719)					{
HXLINE( 719)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret2->zpp_inner;
HXDLIN( 719)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 719)							_this6->_validate();
            						}
            					}
HXDLIN( 719)					ret6 = (ret2->zpp_inner->y == y3);
            				}
            				else {
HXLINE( 719)					ret6 = false;
            				}
HXDLIN( 719)				if (!(ret6)) {
HXLINE( 719)					{
HXLINE( 719)						ret2->zpp_inner->x = x3;
HXDLIN( 719)						ret2->zpp_inner->y = y3;
            					}
HXDLIN( 719)					{
HXLINE( 719)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret2->zpp_inner;
HXDLIN( 719)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 719)							_this7->_invalidate(_this7);
            						}
            					}
            				}
            			}
HXDLIN( 719)			ret2->zpp_inner->weak = weak;
HXDLIN( 719)			ret = ret2;
            		}
            		else {
HXLINE( 722)			bool dx;
HXDLIN( 722)			if (hx::IsNotNull( point )) {
HXLINE( 722)				dx = point->zpp_disp;
            			}
            			else {
HXLINE( 722)				dx = false;
            			}
HXDLIN( 722)			if (dx) {
HXLINE( 722)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 722)			{
HXLINE( 722)				 ::zpp_nape::geom::ZPP_Vec2 _this8 = point->zpp_inner;
HXDLIN( 722)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 722)					_this8->_validate();
            				}
            			}
HXDLIN( 722)			Float dx1 = (point->zpp_inner->x - this->zpp_inner->tx);
HXLINE( 723)			bool dy;
HXDLIN( 723)			if (hx::IsNotNull( point )) {
HXLINE( 723)				dy = point->zpp_disp;
            			}
            			else {
HXLINE( 723)				dy = false;
            			}
HXDLIN( 723)			if (dy) {
HXLINE( 723)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 723)			{
HXLINE( 723)				 ::zpp_nape::geom::ZPP_Vec2 _this9 = point->zpp_inner;
HXDLIN( 723)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 723)					_this9->_validate();
            				}
            			}
HXDLIN( 723)			Float dy1 = (point->zpp_inner->y - this->zpp_inner->ty);
HXLINE( 724)			Float x4 = (((dx1 * this->zpp_inner->d) - (dy1 * this->zpp_inner->b)) * idet);
HXDLIN( 724)			Float y4 = (((dy1 * this->zpp_inner->a) - (dx1 * this->zpp_inner->c)) * idet);
HXDLIN( 724)			bool ret9;
HXDLIN( 724)			if ((x4 == x4)) {
HXLINE( 724)				ret9 = (y4 != y4);
            			}
            			else {
HXLINE( 724)				ret9 = true;
            			}
HXDLIN( 724)			if (ret9) {
HXLINE( 724)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 724)			 ::nape::geom::Vec2 ret10;
HXDLIN( 724)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 724)				ret10 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 724)				ret10 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 724)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret10->zpp_pool;
HXDLIN( 724)				ret10->zpp_pool = null();
HXDLIN( 724)				ret10->zpp_disp = false;
HXDLIN( 724)				if (hx::IsEq( ret10,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 724)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN( 724)			if (hx::IsNull( ret10->zpp_inner )) {
HXLINE( 724)				 ::zpp_nape::geom::ZPP_Vec2 ret11;
HXDLIN( 724)				{
HXLINE( 724)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 724)						ret11 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 724)						ret11 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 724)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret11->next;
HXDLIN( 724)						ret11->next = null();
            					}
HXDLIN( 724)					ret11->weak = false;
            				}
HXDLIN( 724)				ret11->_immutable = false;
HXDLIN( 724)				{
HXLINE( 724)					ret11->x = x4;
HXDLIN( 724)					ret11->y = y4;
            				}
HXDLIN( 724)				ret10->zpp_inner = ret11;
HXDLIN( 724)				ret10->zpp_inner->outer = ret10;
            			}
            			else {
HXLINE( 724)				bool ret12;
HXDLIN( 724)				if (hx::IsNotNull( ret10 )) {
HXLINE( 724)					ret12 = ret10->zpp_disp;
            				}
            				else {
HXLINE( 724)					ret12 = false;
            				}
HXDLIN( 724)				if (ret12) {
HXLINE( 724)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 724)				{
HXLINE( 724)					 ::zpp_nape::geom::ZPP_Vec2 _this10 = ret10->zpp_inner;
HXDLIN( 724)					if (_this10->_immutable) {
HXLINE( 724)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 724)					if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 724)						_this10->_isimmutable();
            					}
            				}
HXDLIN( 724)				bool ret13;
HXDLIN( 724)				if ((x4 == x4)) {
HXLINE( 724)					ret13 = (y4 != y4);
            				}
            				else {
HXLINE( 724)					ret13 = true;
            				}
HXDLIN( 724)				if (ret13) {
HXLINE( 724)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 724)				bool ret14;
HXDLIN( 724)				bool ret15;
HXDLIN( 724)				if (hx::IsNotNull( ret10 )) {
HXLINE( 724)					ret15 = ret10->zpp_disp;
            				}
            				else {
HXLINE( 724)					ret15 = false;
            				}
HXDLIN( 724)				if (ret15) {
HXLINE( 724)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 724)				{
HXLINE( 724)					 ::zpp_nape::geom::ZPP_Vec2 _this11 = ret10->zpp_inner;
HXDLIN( 724)					if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 724)						_this11->_validate();
            					}
            				}
HXDLIN( 724)				if ((ret10->zpp_inner->x == x4)) {
HXLINE( 724)					bool ret16;
HXDLIN( 724)					if (hx::IsNotNull( ret10 )) {
HXLINE( 724)						ret16 = ret10->zpp_disp;
            					}
            					else {
HXLINE( 724)						ret16 = false;
            					}
HXDLIN( 724)					if (ret16) {
HXLINE( 724)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 724)					{
HXLINE( 724)						 ::zpp_nape::geom::ZPP_Vec2 _this12 = ret10->zpp_inner;
HXDLIN( 724)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 724)							_this12->_validate();
            						}
            					}
HXDLIN( 724)					ret14 = (ret10->zpp_inner->y == y4);
            				}
            				else {
HXLINE( 724)					ret14 = false;
            				}
HXDLIN( 724)				if (!(ret14)) {
HXLINE( 724)					{
HXLINE( 724)						ret10->zpp_inner->x = x4;
HXDLIN( 724)						ret10->zpp_inner->y = y4;
            					}
HXDLIN( 724)					{
HXLINE( 724)						 ::zpp_nape::geom::ZPP_Vec2 _this13 = ret10->zpp_inner;
HXDLIN( 724)						if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE( 724)							_this13->_invalidate(_this13);
            						}
            					}
            				}
            			}
HXDLIN( 724)			ret10->zpp_inner->weak = weak;
HXDLIN( 724)			ret = ret10;
            		}
HXLINE( 726)		if (point->zpp_inner->weak) {
HXLINE( 730)			bool _hx_tmp1;
HXDLIN( 730)			if (hx::IsNotNull( point )) {
HXLINE( 730)				_hx_tmp1 = point->zpp_disp;
            			}
            			else {
HXLINE( 730)				_hx_tmp1 = false;
            			}
HXDLIN( 730)			if (_hx_tmp1) {
HXLINE( 730)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 730)			{
HXLINE( 730)				 ::zpp_nape::geom::ZPP_Vec2 _this14 = point->zpp_inner;
HXDLIN( 730)				if (_this14->_immutable) {
HXLINE( 730)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 730)				if (hx::IsNotNull( _this14->_isimmutable )) {
HXLINE( 730)					_this14->_isimmutable();
            				}
            			}
HXDLIN( 730)			if (point->zpp_inner->_inuse) {
HXLINE( 730)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 730)			 ::zpp_nape::geom::ZPP_Vec2 inner = point->zpp_inner;
HXDLIN( 730)			point->zpp_inner->outer = null();
HXDLIN( 730)			point->zpp_inner = null();
HXDLIN( 730)			{
HXLINE( 730)				 ::nape::geom::Vec2 o = point;
HXDLIN( 730)				o->zpp_pool = null();
HXDLIN( 730)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 730)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 730)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 730)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 730)				o->zpp_disp = true;
            			}
HXDLIN( 730)			{
HXLINE( 730)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 730)				{
HXLINE( 730)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 730)						o1->outer->zpp_inner = null();
HXDLIN( 730)						o1->outer = null();
            					}
HXDLIN( 730)					o1->_isimmutable = null();
HXDLIN( 730)					o1->_validate = null();
HXDLIN( 730)					o1->_invalidate = null();
            				}
HXDLIN( 730)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 730)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 737)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mat23_obj,inverseTransform,return )

::String Mat23_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_743_toString)
HXDLIN( 743)		return ((((((((((((HX_("{ a: ",22,fb,b9,e7) + this->zpp_inner->a) + HX_(" b: ",68,63,71,15)) + this->zpp_inner->b) + HX_(" c: ",a9,25,72,15)) + this->zpp_inner->c) + HX_(" d: ",ea,e7,72,15)) + this->zpp_inner->d) + HX_(" tx: ",4a,91,da,b9)) + this->zpp_inner->tx) + HX_(" ty: ",8b,53,db,b9)) + this->zpp_inner->ty) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,toString,return )

bool Mat23_obj::equiorthogonal(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_767_equiorthogonal)
HXDLIN( 767)		if (this->singular()) {
HXLINE( 768)			return false;
            		}
            		else {
HXLINE( 771)			Float x = ((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d));
HXLINE( 772)			if (((x * x) < ::nape::Config_obj::epsilon)) {
HXLINE( 773)				Float y = ((((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->b * this->zpp_inner->b)) - (this->zpp_inner->c * this->zpp_inner->c)) - (this->zpp_inner->d * this->zpp_inner->d));
HXLINE( 774)				return ((y * y) < ::nape::Config_obj::epsilon);
            			}
            			else {
HXLINE( 777)				return false;
            			}
            		}
HXLINE( 767)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,equiorthogonal,return )

bool Mat23_obj::orthogonal(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_794_orthogonal)
HXLINE( 795)		Float x = ((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d));
HXLINE( 796)		if (((x * x) < ::nape::Config_obj::epsilon)) {
HXLINE( 797)			Float y = (((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->b * this->zpp_inner->b)) - ( (Float)(1) ));
HXLINE( 798)			Float z = (((this->zpp_inner->c * this->zpp_inner->c) + (this->zpp_inner->d * this->zpp_inner->d)) - ( (Float)(1) ));
HXLINE( 799)			if (((y * y) < ::nape::Config_obj::epsilon)) {
HXLINE( 799)				return ((z * z) < ::nape::Config_obj::epsilon);
            			}
            			else {
HXLINE( 799)				return false;
            			}
            		}
            		else {
HXLINE( 802)			return false;
            		}
HXLINE( 796)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,orthogonal,return )

 ::nape::geom::Mat23 Mat23_obj::equiorthogonalise(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_817_equiorthogonalise)
HXLINE( 818)		if (!(this->equiorthogonal())) {
HXLINE( 819)			Float k1 = ::Math_obj::sqrt(((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->c * this->zpp_inner->c)));
HXLINE( 820)			Float k2 = ::Math_obj::sqrt(((this->zpp_inner->b * this->zpp_inner->b) + (this->zpp_inner->d * this->zpp_inner->d)));
HXLINE( 822)			bool _hx_tmp;
HXDLIN( 822)			if (!(((k1 * k1) < ::nape::Config_obj::epsilon))) {
HXLINE( 822)				_hx_tmp = ((k2 * k2) < ::nape::Config_obj::epsilon);
            			}
            			else {
HXLINE( 822)				_hx_tmp = true;
            			}
HXDLIN( 822)			if (_hx_tmp) {
HXLINE( 823)				HX_STACK_DO_THROW(((HX_("Error: Matrix is singular and cannot be ",4d,14,3d,4c) + HX_("equiorthogonal",39,5b,04,99)) + HX_("ised",c9,02,bf,45)));
            			}
HXLINE( 826)			Float k = ((k1 + k2) / ( (Float)(2) ));
HXLINE( 827)			k1 = (k / k1);
HXLINE( 828)			k2 = (k / k2);
HXLINE( 829)			{
HXLINE( 829)				 ::nape::geom::Mat23 _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 829)				{
HXLINE( 829)					Float a = (_g->zpp_inner->a * k1);
HXDLIN( 829)					{
HXLINE( 829)						if ((a != a)) {
HXLINE( 829)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 829)						_g->zpp_inner->a = a;
HXDLIN( 829)						{
HXLINE( 829)							 ::zpp_nape::geom::ZPP_Mat23 _this = _g->zpp_inner;
HXDLIN( 829)							if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 829)								_this->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 830)			{
HXLINE( 830)				 ::nape::geom::Mat23 _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 830)				{
HXLINE( 830)					Float c = (_g1->zpp_inner->c * k1);
HXDLIN( 830)					{
HXLINE( 830)						if ((c != c)) {
HXLINE( 830)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("c",63,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 830)						_g1->zpp_inner->c = c;
HXDLIN( 830)						{
HXLINE( 830)							 ::zpp_nape::geom::ZPP_Mat23 _this1 = _g1->zpp_inner;
HXDLIN( 830)							if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 830)								_this1->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 831)			{
HXLINE( 831)				 ::nape::geom::Mat23 _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 831)				{
HXLINE( 831)					Float b = (_g2->zpp_inner->b * k2);
HXDLIN( 831)					{
HXLINE( 831)						if ((b != b)) {
HXLINE( 831)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 831)						_g2->zpp_inner->b = b;
HXDLIN( 831)						{
HXLINE( 831)							 ::zpp_nape::geom::ZPP_Mat23 _this2 = _g2->zpp_inner;
HXDLIN( 831)							if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 831)								_this2->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 832)			{
HXLINE( 832)				 ::nape::geom::Mat23 _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 832)				{
HXLINE( 832)					Float d = (_g3->zpp_inner->d * k2);
HXDLIN( 832)					{
HXLINE( 832)						if ((d != d)) {
HXLINE( 832)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 832)						_g3->zpp_inner->d = d;
HXDLIN( 832)						{
HXLINE( 832)							 ::zpp_nape::geom::ZPP_Mat23 _this3 = _g3->zpp_inner;
HXDLIN( 832)							if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 832)								_this3->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 833)			Float dot = ((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d));
HXLINE( 834)			Float ang = ((((Float)0.25) * ::Math_obj::PI) - (((Float)0.5) * ::Math_obj::acos((dot / (k * k)))));
HXLINE( 835)			if ((((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)) > 0)) {
HXLINE( 836)				ang = -(ang);
            			}
HXLINE( 838)			Float sin = ::Math_obj::sin(ang);
HXLINE( 839)			Float cos = ::Math_obj::cos(ang);
HXLINE( 840)			Float a2 = ((this->zpp_inner->a * cos) - (this->zpp_inner->c * sin));
HXLINE( 841)			Float b2 = ((this->zpp_inner->b * cos) + (this->zpp_inner->d * sin));
HXLINE( 842)			{
HXLINE( 842)				Float c1 = ((this->zpp_inner->c * cos) + (this->zpp_inner->a * sin));
HXDLIN( 842)				{
HXLINE( 842)					if ((c1 != c1)) {
HXLINE( 842)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("c",63,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 842)					this->zpp_inner->c = c1;
HXDLIN( 842)					{
HXLINE( 842)						 ::zpp_nape::geom::ZPP_Mat23 _this4 = this->zpp_inner;
HXDLIN( 842)						if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 842)							_this4->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 843)			{
HXLINE( 843)				if ((a2 != a2)) {
HXLINE( 843)					HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXDLIN( 843)				this->zpp_inner->a = a2;
HXDLIN( 843)				{
HXLINE( 843)					 ::zpp_nape::geom::ZPP_Mat23 _this5 = this->zpp_inner;
HXDLIN( 843)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 843)						_this5->_invalidate();
            					}
            				}
            			}
HXLINE( 844)			{
HXLINE( 844)				Float d1 = ((this->zpp_inner->d * cos) - (this->zpp_inner->b * sin));
HXDLIN( 844)				{
HXLINE( 844)					if ((d1 != d1)) {
HXLINE( 844)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 844)					this->zpp_inner->d = d1;
HXDLIN( 844)					{
HXLINE( 844)						 ::zpp_nape::geom::ZPP_Mat23 _this6 = this->zpp_inner;
HXDLIN( 844)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 844)							_this6->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 845)			{
HXLINE( 845)				if ((b2 != b2)) {
HXLINE( 845)					HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXDLIN( 845)				this->zpp_inner->b = b2;
HXDLIN( 845)				{
HXLINE( 845)					 ::zpp_nape::geom::ZPP_Mat23 _this7 = this->zpp_inner;
HXDLIN( 845)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 845)						_this7->_invalidate();
            					}
            				}
            			}
HXLINE( 846)			{
HXLINE( 846)				 ::zpp_nape::geom::ZPP_Mat23 _this8 = this->zpp_inner;
HXDLIN( 846)				if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 846)					_this8->_invalidate();
            				}
            			}
            		}
HXLINE( 848)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,equiorthogonalise,return )

 ::nape::geom::Mat23 Mat23_obj::orthogonalise(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_862_orthogonalise)
HXLINE( 863)		if (!(this->orthogonal())) {
HXLINE( 864)			Float k1 = ::Math_obj::sqrt(((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->c * this->zpp_inner->c)));
HXLINE( 865)			Float k2 = ::Math_obj::sqrt(((this->zpp_inner->b * this->zpp_inner->b) + (this->zpp_inner->d * this->zpp_inner->d)));
HXLINE( 867)			bool _hx_tmp;
HXDLIN( 867)			if (!(((k1 * k1) < ::nape::Config_obj::epsilon))) {
HXLINE( 867)				_hx_tmp = ((k2 * k2) < ::nape::Config_obj::epsilon);
            			}
            			else {
HXLINE( 867)				_hx_tmp = true;
            			}
HXDLIN( 867)			if (_hx_tmp) {
HXLINE( 868)				HX_STACK_DO_THROW(((HX_("Error: Matrix is singular and cannot be ",4d,14,3d,4c) + HX_("orthogonal",79,f9,f3,18)) + HX_("ised",c9,02,bf,45)));
            			}
HXLINE( 871)			int k = 1;
HXLINE( 872)			k1 = (( (Float)(k) ) / k1);
HXLINE( 873)			k2 = (( (Float)(k) ) / k2);
HXLINE( 874)			{
HXLINE( 874)				 ::nape::geom::Mat23 _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 874)				{
HXLINE( 874)					Float a = (_g->zpp_inner->a * k1);
HXDLIN( 874)					{
HXLINE( 874)						if ((a != a)) {
HXLINE( 874)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 874)						_g->zpp_inner->a = a;
HXDLIN( 874)						{
HXLINE( 874)							 ::zpp_nape::geom::ZPP_Mat23 _this = _g->zpp_inner;
HXDLIN( 874)							if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 874)								_this->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 875)			{
HXLINE( 875)				 ::nape::geom::Mat23 _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 875)				{
HXLINE( 875)					Float c = (_g1->zpp_inner->c * k1);
HXDLIN( 875)					{
HXLINE( 875)						if ((c != c)) {
HXLINE( 875)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("c",63,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 875)						_g1->zpp_inner->c = c;
HXDLIN( 875)						{
HXLINE( 875)							 ::zpp_nape::geom::ZPP_Mat23 _this1 = _g1->zpp_inner;
HXDLIN( 875)							if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 875)								_this1->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 876)			{
HXLINE( 876)				 ::nape::geom::Mat23 _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 876)				{
HXLINE( 876)					Float b = (_g2->zpp_inner->b * k2);
HXDLIN( 876)					{
HXLINE( 876)						if ((b != b)) {
HXLINE( 876)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 876)						_g2->zpp_inner->b = b;
HXDLIN( 876)						{
HXLINE( 876)							 ::zpp_nape::geom::ZPP_Mat23 _this2 = _g2->zpp_inner;
HXDLIN( 876)							if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 876)								_this2->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 877)			{
HXLINE( 877)				 ::nape::geom::Mat23 _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 877)				{
HXLINE( 877)					Float d = (_g3->zpp_inner->d * k2);
HXDLIN( 877)					{
HXLINE( 877)						if ((d != d)) {
HXLINE( 877)							HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            						}
HXDLIN( 877)						_g3->zpp_inner->d = d;
HXDLIN( 877)						{
HXLINE( 877)							 ::zpp_nape::geom::ZPP_Mat23 _this3 = _g3->zpp_inner;
HXDLIN( 877)							if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 877)								_this3->_invalidate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 878)			Float dot = ((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d));
HXLINE( 879)			Float ang = ((((Float)0.25) * ::Math_obj::PI) - (((Float)0.5) * ::Math_obj::acos((dot / ( (Float)((k * k)) )))));
HXLINE( 880)			if ((((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)) > 0)) {
HXLINE( 881)				ang = -(ang);
            			}
HXLINE( 883)			Float sin = ::Math_obj::sin(ang);
HXLINE( 884)			Float cos = ::Math_obj::cos(ang);
HXLINE( 885)			Float a2 = ((this->zpp_inner->a * cos) - (this->zpp_inner->c * sin));
HXLINE( 886)			Float b2 = ((this->zpp_inner->b * cos) + (this->zpp_inner->d * sin));
HXLINE( 887)			{
HXLINE( 887)				Float c1 = ((this->zpp_inner->c * cos) + (this->zpp_inner->a * sin));
HXDLIN( 887)				{
HXLINE( 887)					if ((c1 != c1)) {
HXLINE( 887)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("c",63,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 887)					this->zpp_inner->c = c1;
HXDLIN( 887)					{
HXLINE( 887)						 ::zpp_nape::geom::ZPP_Mat23 _this4 = this->zpp_inner;
HXDLIN( 887)						if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 887)							_this4->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 888)			{
HXLINE( 888)				if ((a2 != a2)) {
HXLINE( 888)					HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXDLIN( 888)				this->zpp_inner->a = a2;
HXDLIN( 888)				{
HXLINE( 888)					 ::zpp_nape::geom::ZPP_Mat23 _this5 = this->zpp_inner;
HXDLIN( 888)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 888)						_this5->_invalidate();
            					}
            				}
            			}
HXLINE( 889)			{
HXLINE( 889)				Float d1 = ((this->zpp_inner->d * cos) - (this->zpp_inner->b * sin));
HXDLIN( 889)				{
HXLINE( 889)					if ((d1 != d1)) {
HXLINE( 889)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 889)					this->zpp_inner->d = d1;
HXDLIN( 889)					{
HXLINE( 889)						 ::zpp_nape::geom::ZPP_Mat23 _this6 = this->zpp_inner;
HXDLIN( 889)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 889)							_this6->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 890)			{
HXLINE( 890)				if ((b2 != b2)) {
HXLINE( 890)					HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXDLIN( 890)				this->zpp_inner->b = b2;
HXDLIN( 890)				{
HXLINE( 890)					 ::zpp_nape::geom::ZPP_Mat23 _this7 = this->zpp_inner;
HXDLIN( 890)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 890)						_this7->_invalidate();
            					}
            				}
            			}
HXLINE( 891)			{
HXLINE( 891)				 ::zpp_nape::geom::ZPP_Mat23 _this8 = this->zpp_inner;
HXDLIN( 891)				if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 891)					_this8->_invalidate();
            				}
            			}
            		}
HXLINE( 893)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,orthogonalise,return )

 ::nape::geom::Mat23 Mat23_obj::rotation(Float angle){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_490_rotation)
HXLINE( 492)		if ((angle != angle)) {
HXLINE( 493)			HX_STACK_DO_THROW(HX_("Error: Cannot create rotation matrix with NaN angle",c6,73,05,1f));
            		}
HXLINE( 496)		Float cos = ::Math_obj::cos(angle);
HXLINE( 497)		Float sin = ::Math_obj::sin(angle);
HXLINE( 498)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,cos,-(sin),sin,cos,0,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,rotation,return )

 ::nape::geom::Mat23 Mat23_obj::translation(Float tx,Float ty){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_514_translation)
HXDLIN( 514)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,1,0,0,1,tx,ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mat23_obj,translation,return )

 ::nape::geom::Mat23 Mat23_obj::scale(Float sx,Float sy){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_530_scale)
HXDLIN( 530)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,sx,0,0,sy,0,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mat23_obj,scale,return )


hx::ObjectPtr< Mat23_obj > Mat23_obj::__new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	hx::ObjectPtr< Mat23_obj > __this = new Mat23_obj();
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

hx::ObjectPtr< Mat23_obj > Mat23_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	Mat23_obj *__this = (Mat23_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mat23_obj), true, "nape.geom.Mat23"));
	*(void **)__this = Mat23_obj::_hx_vtable;
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

Mat23_obj::Mat23_obj()
{
}

void Mat23_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mat23);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Mat23_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Mat23_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_a() ); }
		if (HX_FIELD_EQ(inName,"b") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_b() ); }
		if (HX_FIELD_EQ(inName,"c") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_c() ); }
		if (HX_FIELD_EQ(inName,"d") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_d() ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tx() ); }
		if (HX_FIELD_EQ(inName,"ty") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ty() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_a") ) { return hx::Val( get_a_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_a") ) { return hx::Val( set_a_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_b") ) { return hx::Val( get_b_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_b") ) { return hx::Val( set_b_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_c") ) { return hx::Val( get_c_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_c") ) { return hx::Val( set_c_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_d") ) { return hx::Val( get_d_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_d") ) { return hx::Val( set_d_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAs") ) { return hx::Val( setAs_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_tx") ) { return hx::Val( get_tx_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tx") ) { return hx::Val( set_tx_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ty") ) { return hx::Val( get_ty_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ty") ) { return hx::Val( set_ty_dyn() ); }
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inverse") ) { return hx::Val( inverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn() ); }
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"orthogonal") ) { return hx::Val( orthogonal_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_determinant() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"orthogonalise") ) { return hx::Val( orthogonalise_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"equiorthogonal") ) { return hx::Val( equiorthogonal_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"inverseTransform") ) { return hx::Val( inverseTransform_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"equiorthogonalise") ) { return hx::Val( equiorthogonalise_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mat23_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { outValue = rotation_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"translation") ) { outValue = translation_dyn(); return true; }
	}
	return false;
}

hx::Val Mat23_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_a(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"b") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_b(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"c") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_c(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"d") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_d(inValue.Cast< Float >()) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tx(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"ty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ty(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_Mat23 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mat23_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("a",61,00,00,00));
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("d",64,00,00,00));
	outFields->push(HX_("tx",84,65,00,00));
	outFields->push(HX_("ty",85,65,00,00));
	outFields->push(HX_("determinant",95,5d,15,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Mat23_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_Mat23 */ ,(int)offsetof(Mat23_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mat23_obj_sStaticStorageInfo = 0;
#endif

static ::String Mat23_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_a",38,a5,60,91),
	HX_("set_a",44,9b,2f,7a),
	HX_("get_b",39,a5,60,91),
	HX_("set_b",45,9b,2f,7a),
	HX_("get_c",3a,a5,60,91),
	HX_("set_c",46,9b,2f,7a),
	HX_("get_d",3b,a5,60,91),
	HX_("set_d",47,9b,2f,7a),
	HX_("get_tx",cd,fc,2f,a3),
	HX_("set_tx",41,51,78,6f),
	HX_("get_ty",ce,fc,2f,a3),
	HX_("set_ty",42,51,78,6f),
	HX_("copy",b5,bb,c4,41),
	HX_("set",a2,9b,57,00),
	HX_("setAs",34,81,2f,7a),
	HX_("reset",cf,49,c8,e6),
	HX_("get_determinant",2c,15,f7,f2),
	HX_("singular",d7,a8,26,57),
	HX_("inverse",b0,4b,f1,3d),
	HX_("transpose",79,50,2f,4c),
	HX_("concat",14,09,d0,c7),
	HX_("transform",6c,2d,93,45),
	HX_("inverseTransform",9c,cb,a5,e7),
	HX_("toString",ac,d0,6e,38),
	HX_("equiorthogonal",39,5b,04,99),
	HX_("orthogonal",79,f9,f3,18),
	HX_("equiorthogonalise",a2,bf,e3,2d),
	HX_("orthogonalise",62,89,58,a7),
	::String(null()) };

hx::Class Mat23_obj::__mClass;

static ::String Mat23_obj_sStaticFields[] = {
	HX_("rotation",3e,3d,86,08),
	HX_("translation",f1,30,a2,8a),
	HX_("scale",8a,ce,ce,78),
	::String(null())
};

void Mat23_obj::__register()
{
	Mat23_obj _hx_dummy;
	Mat23_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.Mat23",d5,84,f2,77);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mat23_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mat23_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mat23_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mat23_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mat23_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mat23_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
