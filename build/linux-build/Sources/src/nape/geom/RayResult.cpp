// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <hxinc/zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_758dc196110a59f4_180_new,"nape.geom.RayResult","new",0x9f3d594d,"nape.geom.RayResult.new","nape/geom/RayResult.hx",180,0xc2787b23)
HX_LOCAL_STACK_FRAME(_hx_pos_758dc196110a59f4_190_get_normal,"nape.geom.RayResult","get_normal",0xe17c00a3,"nape.geom.RayResult.get_normal","nape/geom/RayResult.hx",190,0xc2787b23)
HX_LOCAL_STACK_FRAME(_hx_pos_758dc196110a59f4_201_get_distance,"nape.geom.RayResult","get_distance",0x71a9b8b1,"nape.geom.RayResult.get_distance","nape/geom/RayResult.hx",201,0xc2787b23)
HX_LOCAL_STACK_FRAME(_hx_pos_758dc196110a59f4_212_get_inner,"nape.geom.RayResult","get_inner",0x1be4069a,"nape.geom.RayResult.get_inner","nape/geom/RayResult.hx",212,0xc2787b23)
HX_LOCAL_STACK_FRAME(_hx_pos_758dc196110a59f4_223_get_shape,"nape.geom.RayResult","get_shape",0xd9e4b825,"nape.geom.RayResult.get_shape","nape/geom/RayResult.hx",223,0xc2787b23)
HX_LOCAL_STACK_FRAME(_hx_pos_758dc196110a59f4_243_dispose,"nape.geom.RayResult","dispose",0x7791840c,"nape.geom.RayResult.dispose","nape/geom/RayResult.hx",243,0xc2787b23)
HX_LOCAL_STACK_FRAME(_hx_pos_758dc196110a59f4_252_toString,"nape.geom.RayResult","toString",0x388ccc9f,"nape.geom.RayResult.toString","nape/geom/RayResult.hx",252,0xc2787b23)
namespace nape{
namespace geom{

void RayResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_180_new)
HXLINE( 184)		this->zpp_inner = null();
HXLINE( 236)		if (!(::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal)) {
HXLINE( 236)			HX_STACK_DO_THROW(HX_("Error: RayResult cannot be instantiated derp!",43,d7,fd,23));
            		}
            	}

Dynamic RayResult_obj::__CreateEmpty() { return new RayResult_obj; }

void *RayResult_obj::_hx_vtable = 0;

Dynamic RayResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RayResult_obj > _hx_result = new RayResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RayResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x491f01a3;
}

 ::nape::geom::Vec2 RayResult_obj::get_normal(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_190_get_normal)
HXLINE( 192)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXLINE( 194)		return this->zpp_inner->normal;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayResult_obj,get_normal,return )

Float RayResult_obj::get_distance(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_201_get_distance)
HXLINE( 203)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 203)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXLINE( 205)		return this->zpp_inner->toiDistance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayResult_obj,get_distance,return )

bool RayResult_obj::get_inner(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_212_get_inner)
HXLINE( 214)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 214)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXLINE( 216)		return this->zpp_inner->inner;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayResult_obj,get_inner,return )

 ::nape::shape::Shape RayResult_obj::get_shape(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_223_get_shape)
HXLINE( 225)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 225)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXLINE( 227)		return this->zpp_inner->shape;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayResult_obj,get_shape,return )

void RayResult_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_243_dispose)
HXLINE( 245)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 245)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXLINE( 247)		this->zpp_inner->free();
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayResult_obj,dispose,(void))

::String RayResult_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_758dc196110a59f4_252_toString)
HXLINE( 254)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 254)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXLINE( 256)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 256)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXDLIN( 256)		::String _hx_tmp = ((HX_("{ shape: ",62,97,c0,e7) + ::Std_obj::string(this->zpp_inner->shape)) + HX_(" distance: ",3b,25,ba,a7));
HXDLIN( 256)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 256)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXDLIN( 256)		::String _hx_tmp1 = ((_hx_tmp + this->zpp_inner->toiDistance) + HX_(" ?inner: ",7d,ab,53,14));
HXDLIN( 256)		if (hx::IsNotNull( this->zpp_inner->next )) {
HXLINE( 256)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
HXDLIN( 256)		return ((_hx_tmp1 + ::Std_obj::string(this->zpp_inner->inner)) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayResult_obj,toString,return )


hx::ObjectPtr< RayResult_obj > RayResult_obj::__new() {
	hx::ObjectPtr< RayResult_obj > __this = new RayResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RayResult_obj > RayResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	RayResult_obj *__this = (RayResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RayResult_obj), true, "nape.geom.RayResult"));
	*(void **)__this = RayResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RayResult_obj::RayResult_obj()
{
}

void RayResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RayResult);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void RayResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val RayResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"inner") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_inner() ); }
		if (HX_FIELD_EQ(inName,"shape") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shape() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_normal() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_distance() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"get_inner") ) { return hx::Val( get_inner_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shape") ) { return hx::Val( get_shape_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_normal") ) { return hx::Val( get_normal_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_distance") ) { return hx::Val( get_distance_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RayResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RayResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("normal",27,72,69,30));
	outFields->push(HX_("distance",35,93,f9,6b));
	outFields->push(HX_("inner",96,31,1c,be));
	outFields->push(HX_("shape",21,e3,1c,7c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo RayResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_ConvexRayResult */ ,(int)offsetof(RayResult_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RayResult_obj_sStaticStorageInfo = 0;
#endif

static ::String RayResult_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_normal",f0,e1,f0,20),
	HX_("get_distance",3e,47,13,21),
	HX_("get_inner",ed,8d,c5,01),
	HX_("get_shape",78,3f,c6,bf),
	HX_("dispose",9f,80,4c,bb),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class RayResult_obj::__mClass;

void RayResult_obj::__register()
{
	RayResult_obj _hx_dummy;
	RayResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.RayResult",db,ae,51,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RayResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RayResult_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RayResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RayResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
