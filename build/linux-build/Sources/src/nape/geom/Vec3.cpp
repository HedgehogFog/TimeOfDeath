// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <hxinc/zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d61f69a7c0e91333_181_new,"nape.geom.Vec3","new",0xc5b97ddd,"nape.geom.Vec3.new","nape/geom/Vec3.hx",181,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_225_get_x,"nape.geom.Vec3","get_x",0xbdaa6c0c,"nape.geom.Vec3.get_x","nape/geom/Vec3.hx",225,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_234_set_x,"nape.geom.Vec3","set_x",0xa6796218,"nape.geom.Vec3.set_x","nape/geom/Vec3.hx",234,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_256_get_y,"nape.geom.Vec3","get_y",0xbdaa6c0d,"nape.geom.Vec3.get_y","nape/geom/Vec3.hx",256,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_265_set_y,"nape.geom.Vec3","set_y",0xa6796219,"nape.geom.Vec3.set_y","nape/geom/Vec3.hx",265,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_287_get_z,"nape.geom.Vec3","get_z",0xbdaa6c0e,"nape.geom.Vec3.get_z","nape/geom/Vec3.hx",287,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_296_set_z,"nape.geom.Vec3","set_z",0xa679621a,"nape.geom.Vec3.set_z","nape/geom/Vec3.hx",296,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_406_dispose,"nape.geom.Vec3","dispose",0xe2a3309c,"nape.geom.Vec3.dispose","nape/geom/Vec3.hx",406,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_457_get_length,"nape.geom.Vec3","get_length",0x758ab0d2,"nape.geom.Vec3.get_length","nape/geom/Vec3.hx",457,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_465_set_length,"nape.geom.Vec3","set_length",0x79084f46,"nape.geom.Vec3.set_length","nape/geom/Vec3.hx",465,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_507_lsq,"nape.geom.Vec3","lsq",0xc5b80587,"nape.geom.Vec3.lsq","nape/geom/Vec3.hx",507,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_524_set,"nape.geom.Vec3","set",0xc5bd491f,"nape.geom.Vec3.set","nape/geom/Vec3.hx",524,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_552_setxyz,"nape.geom.Vec3","setxyz",0x03cf6c9a,"nape.geom.Vec3.setxyz","nape/geom/Vec3.hx",552,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_597_xy,"nape.geom.Vec3","xy",0x83c1ba24,"nape.geom.Vec3.xy","nape/geom/Vec3.hx",597,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_608_toString,"nape.geom.Vec3","toString",0x7cf21e0f,"nape.geom.Vec3.toString","nape/geom/Vec3.hx",608,0x02b49bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_d61f69a7c0e91333_322_get,"nape.geom.Vec3","get",0xc5b42e13,"nape.geom.Vec3.get","nape/geom/Vec3.hx",322,0x02b49bd3)
namespace nape{
namespace geom{

void Vec3_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float z = __o_z.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d61f69a7c0e91333_181_new)
HXLINE( 189)		this->zpp_pool = null();
HXLINE( 185)		this->zpp_inner = null();
HXLINE( 361)		this->zpp_inner =  ::zpp_nape::geom::ZPP_Vec3_obj::__alloc( HX_CTX );
HXLINE( 362)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 363)		{
HXLINE( 364)			{
HXLINE( 365)				{
HXLINE( 365)					{
HXLINE( 365)						if (this->zpp_disp) {
HXLINE( 365)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 365)						if (this->zpp_inner->immutable) {
HXLINE( 365)							HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            						}
HXDLIN( 365)						this->zpp_inner->x = x;
            					}
HXDLIN( 365)					{
HXLINE( 365)						if (this->zpp_disp) {
HXLINE( 365)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 365)						{
HXLINE( 365)							 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 365)							if (hx::IsNotNull( _this->_validate )) {
HXLINE( 365)								_this->_validate();
            							}
            						}
            					}
            				}
HXLINE( 366)				{
HXLINE( 366)					{
HXLINE( 366)						if (this->zpp_disp) {
HXLINE( 366)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 366)						if (this->zpp_inner->immutable) {
HXLINE( 366)							HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            						}
HXDLIN( 366)						this->zpp_inner->y = y;
            					}
HXDLIN( 366)					{
HXLINE( 366)						if (this->zpp_disp) {
HXLINE( 366)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 366)						{
HXLINE( 366)							 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 366)							if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 366)								_this1->_validate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 384)			{
HXLINE( 384)				{
HXLINE( 384)					if (this->zpp_disp) {
HXLINE( 384)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 384)					if (this->zpp_inner->immutable) {
HXLINE( 384)						HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            					}
HXDLIN( 384)					this->zpp_inner->z = z;
            				}
HXDLIN( 384)				{
HXLINE( 384)					if (this->zpp_disp) {
HXLINE( 384)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 384)					{
HXLINE( 384)						 ::zpp_nape::geom::ZPP_Vec3 _this2 = this->zpp_inner;
HXDLIN( 384)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 384)							_this2->_validate();
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic Vec3_obj::__CreateEmpty() { return new Vec3_obj; }

void *Vec3_obj::_hx_vtable = 0;

Dynamic Vec3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec3_obj > _hx_result = new Vec3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Vec3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08dbfe6b;
}

Float Vec3_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_225_get_x)
HXLINE( 228)		if (this->zpp_disp) {
HXLINE( 228)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 231)		{
HXLINE( 231)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 231)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 231)				_this->_validate();
            			}
            		}
HXLINE( 232)		return this->zpp_inner->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,get_x,return )

Float Vec3_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_234_set_x)
HXLINE( 235)		{
HXLINE( 238)			if (this->zpp_disp) {
HXLINE( 238)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 242)			if (this->zpp_inner->immutable) {
HXLINE( 243)				HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            			}
HXLINE( 246)			this->zpp_inner->x = x;
            		}
HXLINE( 248)		if (this->zpp_disp) {
HXLINE( 248)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 248)		{
HXLINE( 248)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 248)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 248)				_this->_validate();
            			}
            		}
HXDLIN( 248)		return this->zpp_inner->x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,set_x,return )

Float Vec3_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_256_get_y)
HXLINE( 259)		if (this->zpp_disp) {
HXLINE( 259)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 262)		{
HXLINE( 262)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 262)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 262)				_this->_validate();
            			}
            		}
HXLINE( 263)		return this->zpp_inner->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,get_y,return )

Float Vec3_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_265_set_y)
HXLINE( 266)		{
HXLINE( 269)			if (this->zpp_disp) {
HXLINE( 269)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 273)			if (this->zpp_inner->immutable) {
HXLINE( 274)				HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            			}
HXLINE( 277)			this->zpp_inner->y = y;
            		}
HXLINE( 279)		if (this->zpp_disp) {
HXLINE( 279)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 279)		{
HXLINE( 279)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 279)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 279)				_this->_validate();
            			}
            		}
HXDLIN( 279)		return this->zpp_inner->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,set_y,return )

Float Vec3_obj::get_z(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_287_get_z)
HXLINE( 290)		if (this->zpp_disp) {
HXLINE( 290)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 293)		{
HXLINE( 293)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 293)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 293)				_this->_validate();
            			}
            		}
HXLINE( 294)		return this->zpp_inner->z;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,get_z,return )

Float Vec3_obj::set_z(Float z){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_296_set_z)
HXLINE( 297)		{
HXLINE( 300)			if (this->zpp_disp) {
HXLINE( 300)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 304)			if (this->zpp_inner->immutable) {
HXLINE( 305)				HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            			}
HXLINE( 308)			this->zpp_inner->z = z;
            		}
HXLINE( 310)		if (this->zpp_disp) {
HXLINE( 310)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 310)		{
HXLINE( 310)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 310)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 310)				_this->_validate();
            			}
            		}
HXDLIN( 310)		return this->zpp_inner->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,set_z,return )

void Vec3_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_406_dispose)
HXLINE( 409)		if (this->zpp_disp) {
HXLINE( 409)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 413)		if (this->zpp_inner->immutable) {
HXLINE( 414)			HX_STACK_DO_THROW(HX_("Error: This Vec3 is not disposable",f6,e5,de,dd));
            		}
HXLINE( 417)		{
HXLINE( 418)			 ::nape::geom::Vec3 o = hx::ObjectPtr<OBJ_>(this);
HXLINE( 428)			o->zpp_pool = null();
HXLINE( 429)			if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec3 )) {
HXLINE( 429)				::zpp_nape::util::ZPP_PubPool_obj::nextVec3->zpp_pool = o;
            			}
            			else {
HXLINE( 430)				::zpp_nape::util::ZPP_PubPool_obj::poolVec3 = o;
            			}
HXLINE( 431)			::zpp_nape::util::ZPP_PubPool_obj::nextVec3 = o;
HXLINE( 441)			o->zpp_disp = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,dispose,(void))

Float Vec3_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_457_get_length)
HXLINE( 460)		if (this->zpp_disp) {
HXLINE( 460)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 463)		if (this->zpp_disp) {
HXLINE( 463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 463)		{
HXLINE( 463)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 463)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 463)				_this->_validate();
            			}
            		}
HXDLIN( 463)		Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 463)		if (this->zpp_disp) {
HXLINE( 463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 463)		{
HXLINE( 463)			 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 463)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 463)				_this1->_validate();
            			}
            		}
HXDLIN( 463)		Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 463)		if (this->zpp_disp) {
HXLINE( 463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 463)		{
HXLINE( 463)			 ::zpp_nape::geom::ZPP_Vec3 _this2 = this->zpp_inner;
HXDLIN( 463)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 463)				_this2->_validate();
            			}
            		}
HXDLIN( 463)		Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 463)		if (this->zpp_disp) {
HXLINE( 463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 463)		{
HXLINE( 463)			 ::zpp_nape::geom::ZPP_Vec3 _this3 = this->zpp_inner;
HXDLIN( 463)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 463)				_this3->_validate();
            			}
            		}
HXDLIN( 463)		Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y));
HXDLIN( 463)		if (this->zpp_disp) {
HXLINE( 463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 463)		{
HXLINE( 463)			 ::zpp_nape::geom::ZPP_Vec3 _this4 = this->zpp_inner;
HXDLIN( 463)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 463)				_this4->_validate();
            			}
            		}
HXDLIN( 463)		Float _hx_tmp4 = this->zpp_inner->z;
HXDLIN( 463)		if (this->zpp_disp) {
HXLINE( 463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 463)		{
HXLINE( 463)			 ::zpp_nape::geom::ZPP_Vec3 _this5 = this->zpp_inner;
HXDLIN( 463)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 463)				_this5->_validate();
            			}
            		}
HXDLIN( 463)		return ::Math_obj::sqrt((_hx_tmp3 + (_hx_tmp4 * this->zpp_inner->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,get_length,return )

Float Vec3_obj::set_length(Float length){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_465_set_length)
HXLINE( 466)		{
HXLINE( 469)			if (this->zpp_disp) {
HXLINE( 469)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 473)			if ((length != length)) {
HXLINE( 474)				HX_STACK_DO_THROW(HX_("Error: Vec3::length cannot be NaN",ce,21,e3,d9));
            			}
HXLINE( 476)			if (this->zpp_disp) {
HXLINE( 476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 476)			{
HXLINE( 476)				 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 476)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 476)					_this->_validate();
            				}
            			}
HXDLIN( 476)			Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 476)			if (this->zpp_disp) {
HXLINE( 476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 476)			{
HXLINE( 476)				 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 476)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 476)					_this1->_validate();
            				}
            			}
HXDLIN( 476)			Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 476)			if (this->zpp_disp) {
HXLINE( 476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 476)			{
HXLINE( 476)				 ::zpp_nape::geom::ZPP_Vec3 _this2 = this->zpp_inner;
HXDLIN( 476)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 476)					_this2->_validate();
            				}
            			}
HXDLIN( 476)			Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 476)			if (this->zpp_disp) {
HXLINE( 476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 476)			{
HXLINE( 476)				 ::zpp_nape::geom::ZPP_Vec3 _this3 = this->zpp_inner;
HXDLIN( 476)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 476)					_this3->_validate();
            				}
            			}
HXDLIN( 476)			Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y));
HXDLIN( 476)			if (this->zpp_disp) {
HXLINE( 476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 476)			{
HXLINE( 476)				 ::zpp_nape::geom::ZPP_Vec3 _this4 = this->zpp_inner;
HXDLIN( 476)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 476)					_this4->_validate();
            				}
            			}
HXDLIN( 476)			Float _hx_tmp4 = this->zpp_inner->z;
HXDLIN( 476)			if (this->zpp_disp) {
HXLINE( 476)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 476)			{
HXLINE( 476)				 ::zpp_nape::geom::ZPP_Vec3 _this5 = this->zpp_inner;
HXDLIN( 476)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 476)					_this5->_validate();
            				}
            			}
HXDLIN( 476)			if (((_hx_tmp3 + (_hx_tmp4 * this->zpp_inner->z)) == 0)) {
HXLINE( 477)				HX_STACK_DO_THROW(HX_("Error: Cannot set length of a zero vector",00,7b,b2,33));
            			}
HXLINE( 480)			{
HXLINE( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				{
HXLINE( 481)					 ::zpp_nape::geom::ZPP_Vec3 _this6 = this->zpp_inner;
HXDLIN( 481)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 481)						_this6->_validate();
            					}
            				}
HXDLIN( 481)				Float t = this->zpp_inner->x;
HXDLIN( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				{
HXLINE( 481)					 ::zpp_nape::geom::ZPP_Vec3 _this7 = this->zpp_inner;
HXDLIN( 481)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 481)						_this7->_validate();
            					}
            				}
HXDLIN( 481)				Float t1 = (t * this->zpp_inner->x);
HXDLIN( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				{
HXLINE( 481)					 ::zpp_nape::geom::ZPP_Vec3 _this8 = this->zpp_inner;
HXDLIN( 481)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 481)						_this8->_validate();
            					}
            				}
HXDLIN( 481)				Float t2 = this->zpp_inner->y;
HXDLIN( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				{
HXLINE( 481)					 ::zpp_nape::geom::ZPP_Vec3 _this9 = this->zpp_inner;
HXDLIN( 481)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 481)						_this9->_validate();
            					}
            				}
HXDLIN( 481)				Float t3 = (t1 + (t2 * this->zpp_inner->y));
HXDLIN( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				{
HXLINE( 481)					 ::zpp_nape::geom::ZPP_Vec3 _this10 = this->zpp_inner;
HXDLIN( 481)					if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 481)						_this10->_validate();
            					}
            				}
HXDLIN( 481)				Float t4 = this->zpp_inner->z;
HXDLIN( 481)				if (this->zpp_disp) {
HXLINE( 481)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 481)				{
HXLINE( 481)					 ::zpp_nape::geom::ZPP_Vec3 _this11 = this->zpp_inner;
HXDLIN( 481)					if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 481)						_this11->_validate();
            					}
            				}
HXDLIN( 481)				Float t5 = (length / ::Math_obj::sqrt((t3 + (t4 * this->zpp_inner->z))));
HXLINE( 482)				{
HXLINE( 483)					Float t6 = t5;
HXLINE( 492)					{
HXLINE( 492)						 ::nape::geom::Vec3 _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 492)						{
HXLINE( 492)							bool x;
HXDLIN( 492)							if (hx::IsNotNull( _g )) {
HXLINE( 492)								x = _g->zpp_disp;
            							}
            							else {
HXLINE( 492)								x = false;
            							}
HXDLIN( 492)							if (x) {
HXLINE( 492)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 492)							{
HXLINE( 492)								 ::zpp_nape::geom::ZPP_Vec3 _this12 = _g->zpp_inner;
HXDLIN( 492)								if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 492)									_this12->_validate();
            								}
            							}
HXDLIN( 492)							{
HXLINE( 492)								bool _hx_tmp5;
HXDLIN( 492)								if (hx::IsNotNull( _g )) {
HXLINE( 492)									_hx_tmp5 = _g->zpp_disp;
            								}
            								else {
HXLINE( 492)									_hx_tmp5 = false;
            								}
HXDLIN( 492)								if (_hx_tmp5) {
HXLINE( 492)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 492)								if (_g->zpp_inner->immutable) {
HXLINE( 492)									HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            								}
HXDLIN( 492)								_g->zpp_inner->x = (_g->zpp_inner->x * t6);
            							}
HXDLIN( 492)							{
HXLINE( 492)								bool _hx_tmp6;
HXDLIN( 492)								if (hx::IsNotNull( _g )) {
HXLINE( 492)									_hx_tmp6 = _g->zpp_disp;
            								}
            								else {
HXLINE( 492)									_hx_tmp6 = false;
            								}
HXDLIN( 492)								if (_hx_tmp6) {
HXLINE( 492)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 492)								{
HXLINE( 492)									 ::zpp_nape::geom::ZPP_Vec3 _this13 = _g->zpp_inner;
HXDLIN( 492)									if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 492)										_this13->_validate();
            									}
            								}
            							}
            						}
            					}
HXLINE( 493)					{
HXLINE( 493)						 ::nape::geom::Vec3 _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 493)						{
HXLINE( 493)							bool y;
HXDLIN( 493)							if (hx::IsNotNull( _g1 )) {
HXLINE( 493)								y = _g1->zpp_disp;
            							}
            							else {
HXLINE( 493)								y = false;
            							}
HXDLIN( 493)							if (y) {
HXLINE( 493)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 493)							{
HXLINE( 493)								 ::zpp_nape::geom::ZPP_Vec3 _this14 = _g1->zpp_inner;
HXDLIN( 493)								if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 493)									_this14->_validate();
            								}
            							}
HXDLIN( 493)							{
HXLINE( 493)								bool _hx_tmp7;
HXDLIN( 493)								if (hx::IsNotNull( _g1 )) {
HXLINE( 493)									_hx_tmp7 = _g1->zpp_disp;
            								}
            								else {
HXLINE( 493)									_hx_tmp7 = false;
            								}
HXDLIN( 493)								if (_hx_tmp7) {
HXLINE( 493)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 493)								if (_g1->zpp_inner->immutable) {
HXLINE( 493)									HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            								}
HXDLIN( 493)								_g1->zpp_inner->y = (_g1->zpp_inner->y * t6);
            							}
HXDLIN( 493)							{
HXLINE( 493)								bool _hx_tmp8;
HXDLIN( 493)								if (hx::IsNotNull( _g1 )) {
HXLINE( 493)									_hx_tmp8 = _g1->zpp_disp;
            								}
            								else {
HXLINE( 493)									_hx_tmp8 = false;
            								}
HXDLIN( 493)								if (_hx_tmp8) {
HXLINE( 493)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 493)								{
HXLINE( 493)									 ::zpp_nape::geom::ZPP_Vec3 _this15 = _g1->zpp_inner;
HXDLIN( 493)									if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 493)										_this15->_validate();
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE( 495)				{
HXLINE( 495)					 ::nape::geom::Vec3 _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 495)					{
HXLINE( 495)						bool z;
HXDLIN( 495)						if (hx::IsNotNull( _g2 )) {
HXLINE( 495)							z = _g2->zpp_disp;
            						}
            						else {
HXLINE( 495)							z = false;
            						}
HXDLIN( 495)						if (z) {
HXLINE( 495)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 495)						{
HXLINE( 495)							 ::zpp_nape::geom::ZPP_Vec3 _this16 = _g2->zpp_inner;
HXDLIN( 495)							if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 495)								_this16->_validate();
            							}
            						}
HXDLIN( 495)						{
HXLINE( 495)							bool _hx_tmp9;
HXDLIN( 495)							if (hx::IsNotNull( _g2 )) {
HXLINE( 495)								_hx_tmp9 = _g2->zpp_disp;
            							}
            							else {
HXLINE( 495)								_hx_tmp9 = false;
            							}
HXDLIN( 495)							if (_hx_tmp9) {
HXLINE( 495)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 495)							if (_g2->zpp_inner->immutable) {
HXLINE( 495)								HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            							}
HXDLIN( 495)							_g2->zpp_inner->z = (_g2->zpp_inner->z * t5);
            						}
HXDLIN( 495)						{
HXLINE( 495)							bool _hx_tmp10;
HXDLIN( 495)							if (hx::IsNotNull( _g2 )) {
HXLINE( 495)								_hx_tmp10 = _g2->zpp_disp;
            							}
            							else {
HXLINE( 495)								_hx_tmp10 = false;
            							}
HXDLIN( 495)							if (_hx_tmp10) {
HXLINE( 495)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 495)							{
HXLINE( 495)								 ::zpp_nape::geom::ZPP_Vec3 _this17 = _g2->zpp_inner;
HXDLIN( 495)								if (hx::IsNotNull( _this17->_validate )) {
HXLINE( 495)									_this17->_validate();
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::zpp_nape::geom::ZPP_Vec3 _this18 = this->zpp_inner;
HXDLIN( 498)			if (hx::IsNotNull( _this18->_validate )) {
HXLINE( 498)				_this18->_validate();
            			}
            		}
HXDLIN( 498)		Float _hx_tmp11 = this->zpp_inner->x;
HXDLIN( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::zpp_nape::geom::ZPP_Vec3 _this19 = this->zpp_inner;
HXDLIN( 498)			if (hx::IsNotNull( _this19->_validate )) {
HXLINE( 498)				_this19->_validate();
            			}
            		}
HXDLIN( 498)		Float _hx_tmp12 = (_hx_tmp11 * this->zpp_inner->x);
HXDLIN( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::zpp_nape::geom::ZPP_Vec3 _this20 = this->zpp_inner;
HXDLIN( 498)			if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 498)				_this20->_validate();
            			}
            		}
HXDLIN( 498)		Float _hx_tmp13 = this->zpp_inner->y;
HXDLIN( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::zpp_nape::geom::ZPP_Vec3 _this21 = this->zpp_inner;
HXDLIN( 498)			if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 498)				_this21->_validate();
            			}
            		}
HXDLIN( 498)		Float _hx_tmp14 = (_hx_tmp12 + (_hx_tmp13 * this->zpp_inner->y));
HXDLIN( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::zpp_nape::geom::ZPP_Vec3 _this22 = this->zpp_inner;
HXDLIN( 498)			if (hx::IsNotNull( _this22->_validate )) {
HXLINE( 498)				_this22->_validate();
            			}
            		}
HXDLIN( 498)		Float _hx_tmp15 = this->zpp_inner->z;
HXDLIN( 498)		if (this->zpp_disp) {
HXLINE( 498)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::zpp_nape::geom::ZPP_Vec3 _this23 = this->zpp_inner;
HXDLIN( 498)			if (hx::IsNotNull( _this23->_validate )) {
HXLINE( 498)				_this23->_validate();
            			}
            		}
HXDLIN( 498)		return ::Math_obj::sqrt((_hx_tmp14 + (_hx_tmp15 * this->zpp_inner->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,set_length,return )

Float Vec3_obj::lsq(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_507_lsq)
HXLINE( 510)		if (this->zpp_disp) {
HXLINE( 510)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 513)		if (this->zpp_disp) {
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 513)		{
HXLINE( 513)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 513)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 513)				_this->_validate();
            			}
            		}
HXDLIN( 513)		Float _hx_tmp = this->zpp_inner->x;
HXDLIN( 513)		if (this->zpp_disp) {
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 513)		{
HXLINE( 513)			 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 513)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 513)				_this1->_validate();
            			}
            		}
HXDLIN( 513)		Float _hx_tmp1 = (_hx_tmp * this->zpp_inner->x);
HXDLIN( 513)		if (this->zpp_disp) {
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 513)		{
HXLINE( 513)			 ::zpp_nape::geom::ZPP_Vec3 _this2 = this->zpp_inner;
HXDLIN( 513)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 513)				_this2->_validate();
            			}
            		}
HXDLIN( 513)		Float _hx_tmp2 = this->zpp_inner->y;
HXDLIN( 513)		if (this->zpp_disp) {
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 513)		{
HXLINE( 513)			 ::zpp_nape::geom::ZPP_Vec3 _this3 = this->zpp_inner;
HXDLIN( 513)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 513)				_this3->_validate();
            			}
            		}
HXDLIN( 513)		Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * this->zpp_inner->y));
HXDLIN( 513)		if (this->zpp_disp) {
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 513)		{
HXLINE( 513)			 ::zpp_nape::geom::ZPP_Vec3 _this4 = this->zpp_inner;
HXDLIN( 513)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 513)				_this4->_validate();
            			}
            		}
HXDLIN( 513)		Float _hx_tmp4 = this->zpp_inner->z;
HXDLIN( 513)		if (this->zpp_disp) {
HXLINE( 513)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 513)		{
HXLINE( 513)			 ::zpp_nape::geom::ZPP_Vec3 _this5 = this->zpp_inner;
HXDLIN( 513)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 513)				_this5->_validate();
            			}
            		}
HXDLIN( 513)		return (_hx_tmp3 + (_hx_tmp4 * this->zpp_inner->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,lsq,return )

 ::nape::geom::Vec3 Vec3_obj::set( ::nape::geom::Vec3 vector){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_524_set)
HXLINE( 527)		if (this->zpp_disp) {
HXLINE( 527)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 532)		bool _hx_tmp;
HXDLIN( 532)		if (hx::IsNotNull( vector )) {
HXLINE( 532)			_hx_tmp = vector->zpp_disp;
            		}
            		else {
HXLINE( 532)			_hx_tmp = false;
            		}
HXDLIN( 532)		if (_hx_tmp) {
HXLINE( 532)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 536)		if (hx::IsNull( vector )) {
HXLINE( 537)			HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec3",96,15,46,66));
            		}
HXLINE( 540)		bool _hx_tmp1;
HXDLIN( 540)		if (hx::IsNotNull( vector )) {
HXLINE( 540)			_hx_tmp1 = vector->zpp_disp;
            		}
            		else {
HXLINE( 540)			_hx_tmp1 = false;
            		}
HXDLIN( 540)		if (_hx_tmp1) {
HXLINE( 540)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 540)		{
HXLINE( 540)			 ::zpp_nape::geom::ZPP_Vec3 _this = vector->zpp_inner;
HXDLIN( 540)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 540)				_this->_validate();
            			}
            		}
HXDLIN( 540)		Float _hx_tmp2 = vector->zpp_inner->x;
HXDLIN( 540)		bool _hx_tmp3;
HXDLIN( 540)		if (hx::IsNotNull( vector )) {
HXLINE( 540)			_hx_tmp3 = vector->zpp_disp;
            		}
            		else {
HXLINE( 540)			_hx_tmp3 = false;
            		}
HXDLIN( 540)		if (_hx_tmp3) {
HXLINE( 540)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 540)		{
HXLINE( 540)			 ::zpp_nape::geom::ZPP_Vec3 _this1 = vector->zpp_inner;
HXDLIN( 540)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 540)				_this1->_validate();
            			}
            		}
HXDLIN( 540)		Float _hx_tmp4 = vector->zpp_inner->y;
HXDLIN( 540)		bool _hx_tmp5;
HXDLIN( 540)		if (hx::IsNotNull( vector )) {
HXLINE( 540)			_hx_tmp5 = vector->zpp_disp;
            		}
            		else {
HXLINE( 540)			_hx_tmp5 = false;
            		}
HXDLIN( 540)		if (_hx_tmp5) {
HXLINE( 540)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 540)		{
HXLINE( 540)			 ::zpp_nape::geom::ZPP_Vec3 _this2 = vector->zpp_inner;
HXDLIN( 540)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 540)				_this2->_validate();
            			}
            		}
HXDLIN( 540)		return this->setxyz(_hx_tmp2,_hx_tmp4,vector->zpp_inner->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,set,return )

 ::nape::geom::Vec3 Vec3_obj::setxyz(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_552_setxyz)
HXLINE( 555)		if (this->zpp_disp) {
HXLINE( 555)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 558)		{
HXLINE( 559)			{
HXLINE( 560)				{
HXLINE( 560)					{
HXLINE( 560)						if (this->zpp_disp) {
HXLINE( 560)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 560)						if (this->zpp_inner->immutable) {
HXLINE( 560)							HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            						}
HXDLIN( 560)						this->zpp_inner->x = x;
            					}
HXDLIN( 560)					{
HXLINE( 560)						if (this->zpp_disp) {
HXLINE( 560)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 560)						{
HXLINE( 560)							 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 560)							if (hx::IsNotNull( _this->_validate )) {
HXLINE( 560)								_this->_validate();
            							}
            						}
            					}
            				}
HXLINE( 561)				{
HXLINE( 561)					{
HXLINE( 561)						if (this->zpp_disp) {
HXLINE( 561)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 561)						if (this->zpp_inner->immutable) {
HXLINE( 561)							HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            						}
HXDLIN( 561)						this->zpp_inner->y = y;
            					}
HXDLIN( 561)					{
HXLINE( 561)						if (this->zpp_disp) {
HXLINE( 561)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 561)						{
HXLINE( 561)							 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 561)							if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 561)								_this1->_validate();
            							}
            						}
            					}
            				}
            			}
HXLINE( 579)			{
HXLINE( 579)				{
HXLINE( 579)					if (this->zpp_disp) {
HXLINE( 579)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 579)					if (this->zpp_inner->immutable) {
HXLINE( 579)						HX_STACK_DO_THROW(HX_("Error: Vec3 is immutable",bf,41,cd,7e));
            					}
HXDLIN( 579)					this->zpp_inner->z = z;
            				}
HXDLIN( 579)				{
HXLINE( 579)					if (this->zpp_disp) {
HXLINE( 579)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 579)					{
HXLINE( 579)						 ::zpp_nape::geom::ZPP_Vec3 _this2 = this->zpp_inner;
HXDLIN( 579)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 579)							_this2->_validate();
            						}
            					}
            				}
            			}
            		}
HXLINE( 581)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec3_obj,setxyz,return )

 ::nape::geom::Vec2 Vec3_obj::xy(hx::Null< bool >  __o_weak){
            		bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d61f69a7c0e91333_597_xy)
HXLINE( 600)		if (this->zpp_disp) {
HXLINE( 600)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 603)		if (this->zpp_disp) {
HXLINE( 603)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 603)		{
HXLINE( 603)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 603)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 603)				_this->_validate();
            			}
            		}
HXDLIN( 603)		Float x = this->zpp_inner->x;
HXDLIN( 603)		if (this->zpp_disp) {
HXLINE( 603)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 603)		{
HXLINE( 603)			 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 603)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 603)				_this1->_validate();
            			}
            		}
HXDLIN( 603)		Float y = this->zpp_inner->y;
HXDLIN( 603)		bool _hx_tmp;
HXDLIN( 603)		if ((x == x)) {
HXLINE( 603)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 603)			_hx_tmp = true;
            		}
HXDLIN( 603)		if (_hx_tmp) {
HXLINE( 603)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 603)		 ::nape::geom::Vec2 ret;
HXDLIN( 603)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 603)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 603)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 603)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 603)			ret->zpp_pool = null();
HXDLIN( 603)			ret->zpp_disp = false;
HXDLIN( 603)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 603)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 603)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 603)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 603)			{
HXLINE( 603)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 603)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 603)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 603)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 603)					ret1->next = null();
            				}
HXDLIN( 603)				ret1->weak = false;
            			}
HXDLIN( 603)			ret1->_immutable = false;
HXDLIN( 603)			{
HXLINE( 603)				ret1->x = x;
HXDLIN( 603)				ret1->y = y;
            			}
HXDLIN( 603)			ret->zpp_inner = ret1;
HXDLIN( 603)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 603)			bool _hx_tmp1;
HXDLIN( 603)			if (hx::IsNotNull( ret )) {
HXLINE( 603)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 603)				_hx_tmp1 = false;
            			}
HXDLIN( 603)			if (_hx_tmp1) {
HXLINE( 603)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 603)			{
HXLINE( 603)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 603)				if (_this2->_immutable) {
HXLINE( 603)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 603)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 603)					_this2->_isimmutable();
            				}
            			}
HXDLIN( 603)			bool _hx_tmp2;
HXDLIN( 603)			if ((x == x)) {
HXLINE( 603)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 603)				_hx_tmp2 = true;
            			}
HXDLIN( 603)			if (_hx_tmp2) {
HXLINE( 603)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 603)			bool _hx_tmp3;
HXDLIN( 603)			bool _hx_tmp4;
HXDLIN( 603)			if (hx::IsNotNull( ret )) {
HXLINE( 603)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 603)				_hx_tmp4 = false;
            			}
HXDLIN( 603)			if (_hx_tmp4) {
HXLINE( 603)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 603)			{
HXLINE( 603)				 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 603)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 603)					_this3->_validate();
            				}
            			}
HXDLIN( 603)			if ((ret->zpp_inner->x == x)) {
HXLINE( 603)				bool _hx_tmp5;
HXDLIN( 603)				if (hx::IsNotNull( ret )) {
HXLINE( 603)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 603)					_hx_tmp5 = false;
            				}
HXDLIN( 603)				if (_hx_tmp5) {
HXLINE( 603)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 603)				{
HXLINE( 603)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN( 603)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 603)						_this4->_validate();
            					}
            				}
HXDLIN( 603)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 603)				_hx_tmp3 = false;
            			}
HXDLIN( 603)			if (!(_hx_tmp3)) {
HXLINE( 603)				{
HXLINE( 603)					ret->zpp_inner->x = x;
HXDLIN( 603)					ret->zpp_inner->y = y;
            				}
HXDLIN( 603)				{
HXLINE( 603)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret->zpp_inner;
HXDLIN( 603)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 603)						_this5->_invalidate(_this5);
            					}
            				}
            			}
            		}
HXDLIN( 603)		ret->zpp_inner->weak = weak;
HXDLIN( 603)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,xy,return )

::String Vec3_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d61f69a7c0e91333_608_toString)
HXLINE( 611)		if (this->zpp_disp) {
HXLINE( 611)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 614)		if (this->zpp_disp) {
HXLINE( 614)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 614)		{
HXLINE( 614)			 ::zpp_nape::geom::ZPP_Vec3 _this = this->zpp_inner;
HXDLIN( 614)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 614)				_this->_validate();
            			}
            		}
HXDLIN( 614)		::String _hx_tmp = ((HX_("{ x: ",f9,6e,cb,e7) + this->zpp_inner->x) + HX_(" y: ",3f,d7,82,15));
HXDLIN( 614)		if (this->zpp_disp) {
HXLINE( 614)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 614)		{
HXLINE( 614)			 ::zpp_nape::geom::ZPP_Vec3 _this1 = this->zpp_inner;
HXDLIN( 614)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 614)				_this1->_validate();
            			}
            		}
HXDLIN( 614)		::String _hx_tmp1 = ((_hx_tmp + this->zpp_inner->y) + HX_(" z: ",80,99,83,15));
HXDLIN( 614)		if (this->zpp_disp) {
HXLINE( 614)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec3",7f,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 614)		{
HXLINE( 614)			 ::zpp_nape::geom::ZPP_Vec3 _this2 = this->zpp_inner;
HXDLIN( 614)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 614)				_this2->_validate();
            			}
            		}
HXDLIN( 614)		return ((_hx_tmp1 + this->zpp_inner->z) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,toString,return )

 ::nape::geom::Vec3 Vec3_obj::get(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float z = __o_z.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d61f69a7c0e91333_322_get)
HXLINE( 323)		 ::nape::geom::Vec3 ret;
HXLINE( 325)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec3 )) {
HXLINE( 326)			ret =  ::nape::geom::Vec3_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
            		else {
HXLINE( 332)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec3;
HXLINE( 333)			::zpp_nape::util::ZPP_PubPool_obj::poolVec3 = ret->zpp_pool;
HXLINE( 334)			ret->zpp_pool = null();
HXLINE( 336)			ret->zpp_disp = false;
HXLINE( 337)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec3 )) {
HXLINE( 337)				::zpp_nape::util::ZPP_PubPool_obj::nextVec3 = null();
            			}
            		}
HXLINE( 344)		ret->setxyz(x,y,z);
HXLINE( 345)		ret->zpp_inner->immutable = false;
HXLINE( 346)		ret->zpp_inner->_validate = null();
HXLINE( 347)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec3_obj,get,return )


hx::ObjectPtr< Vec3_obj > Vec3_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z) {
	hx::ObjectPtr< Vec3_obj > __this = new Vec3_obj();
	__this->__construct(__o_x,__o_y,__o_z);
	return __this;
}

hx::ObjectPtr< Vec3_obj > Vec3_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z) {
	Vec3_obj *__this = (Vec3_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vec3_obj), true, "nape.geom.Vec3"));
	*(void **)__this = Vec3_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z);
	return __this;
}

Vec3_obj::Vec3_obj()
{
}

void Vec3_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Vec3);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_MEMBER_NAME(zpp_pool,"zpp_pool");
	HX_MARK_MEMBER_NAME(zpp_disp,"zpp_disp");
	HX_MARK_END_CLASS();
}

void Vec3_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_VISIT_MEMBER_NAME(zpp_pool,"zpp_pool");
	HX_VISIT_MEMBER_NAME(zpp_disp,"zpp_disp");
}

hx::Val Vec3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_z() ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"xy") ) { return hx::Val( xy_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"lsq") ) { return hx::Val( lsq_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_z") ) { return hx::Val( get_z_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_z") ) { return hx::Val( set_z_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"setxyz") ) { return hx::Val( setxyz_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { return hx::Val( zpp_pool ); }
		if (HX_FIELD_EQ(inName,"zpp_disp") ) { return hx::Val( zpp_disp ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vec3_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
	}
	return false;
}

hx::Val Vec3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_z(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=inValue.Cast<  ::nape::geom::Vec3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zpp_disp") ) { zpp_disp=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec3 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vec3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("zpp_pool",81,5d,d4,38));
	outFields->push(HX_("zpp_disp",07,44,e1,30));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Vec3_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_Vec3 */ ,(int)offsetof(Vec3_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{hx::fsObject /*  ::nape::geom::Vec3 */ ,(int)offsetof(Vec3_obj,zpp_pool),HX_("zpp_pool",81,5d,d4,38)},
	{hx::fsBool,(int)offsetof(Vec3_obj,zpp_disp),HX_("zpp_disp",07,44,e1,30)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vec3_obj_sStaticStorageInfo = 0;
#endif

static ::String Vec3_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("zpp_pool",81,5d,d4,38),
	HX_("zpp_disp",07,44,e1,30),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("get_z",51,a5,60,91),
	HX_("set_z",5d,9b,2f,7a),
	HX_("dispose",9f,80,4c,bb),
	HX_("get_length",af,04,8f,8f),
	HX_("set_length",23,a3,0c,93),
	HX_("lsq",0a,58,52,00),
	HX_("set",a2,9b,57,00),
	HX_("setxyz",f7,4d,8b,6f),
	HX_("xy",01,69,00,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Vec3_obj::__mClass;

static ::String Vec3_obj_sStaticFields[] = {
	HX_("get",96,80,4e,00),
	::String(null())
};

void Vec3_obj::__register()
{
	Vec3_obj _hx_dummy;
	Vec3_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.Vec3",6b,4b,9c,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec3_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec3_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vec3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vec3_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
