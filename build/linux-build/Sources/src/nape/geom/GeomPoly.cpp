// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <hxinc/nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPoly
#include <hxinc/nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPolyList
#include <hxinc/nape/geom/GeomPolyList.h>
#endif
#ifndef INCLUDED_nape_geom_GeomVertexIterator
#include <hxinc/nape/geom/GeomVertexIterator.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <hxinc/nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2Iterator
#include <hxinc/nape/geom/Vec2Iterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <hxinc/nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_nape_geom_Winding
#include <hxinc/nape/geom/Winding.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Convex
#include <hxinc/zpp_nape/geom/ZPP_Convex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Cutter
#include <hxinc/zpp_nape/geom/ZPP_Cutter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <hxinc/zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <hxinc/zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVertexIterator
#include <hxinc/zpp_nape/geom/ZPP_GeomVertexIterator.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <hxinc/zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Monotone
#include <hxinc/zpp_nape/geom/ZPP_Monotone.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <hxinc/zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Simple
#include <hxinc/zpp_nape/geom/ZPP_Simple.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Simplify
#include <hxinc/zpp_nape/geom/ZPP_Simplify.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Triangular
#include <hxinc/zpp_nape/geom/ZPP_Triangular.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_GeomVert
#include <hxinc/zpp_nape/util/ZNPList_ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionedPoly
#include <hxinc/zpp_nape/util/ZNPList_ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Vec2
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_GeomVert
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionedPoly
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_GeomPolyList
#include <hxinc/zpp_nape/util/ZPP_GeomPolyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Vec2List
#include <hxinc/zpp_nape/util/ZPP_Vec2List.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1ae86dd092a9f416_184_new,"nape.geom.GeomPoly","new",0xb4931c26,"nape.geom.GeomPoly.new","nape/geom/GeomPoly.hx",184,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_229_empty,"nape.geom.GeomPoly","empty",0x2b5883d3,"nape.geom.GeomPoly.empty","nape/geom/GeomPoly.hx",229,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_243_size,"nape.geom.GeomPoly","size",0x4f76a23b,"nape.geom.GeomPoly.size","nape/geom/GeomPoly.hx",243,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_276_iterator,"nape.geom.GeomPoly","iterator",0x09b49068,"nape.geom.GeomPoly.iterator","nape/geom/GeomPoly.hx",276,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_292_forwardIterator,"nape.geom.GeomPoly","forwardIterator",0x9c8a9199,"nape.geom.GeomPoly.forwardIterator","nape/geom/GeomPoly.hx",292,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_308_backwardsIterator,"nape.geom.GeomPoly","backwardsIterator",0x93245b84,"nape.geom.GeomPoly.backwardsIterator","nape/geom/GeomPoly.hx",308,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_334_current,"nape.geom.GeomPoly","current",0x1a7b42ff,"nape.geom.GeomPoly.current","nape/geom/GeomPoly.hx",334,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_374_push,"nape.geom.GeomPoly","push",0x4d841354,"nape.geom.GeomPoly.push","nape/geom/GeomPoly.hx",374,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_436_pop,"nape.geom.GeomPoly","pop",0xb494a957,"nape.geom.GeomPoly.pop","nape/geom/GeomPoly.hx",436,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_518_unshift,"nape.geom.GeomPoly","unshift",0xc74b8a4f,"nape.geom.GeomPoly.unshift","nape/geom/GeomPoly.hx",518,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_576_shift,"nape.geom.GeomPoly","shift",0x37a135c8,"nape.geom.GeomPoly.shift","nape/geom/GeomPoly.hx",576,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_656_skipForward,"nape.geom.GeomPoly","skipForward",0xecf5d2cc,"nape.geom.GeomPoly.skipForward","nape/geom/GeomPoly.hx",656,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_698_skipBackwards,"nape.geom.GeomPoly","skipBackwards",0x6b360bf7,"nape.geom.GeomPoly.skipBackwards","nape/geom/GeomPoly.hx",698,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_737_erase,"nape.geom.GeomPoly","erase",0x2e9b322c,"nape.geom.GeomPoly.erase","nape/geom/GeomPoly.hx",737,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_827_clear,"nape.geom.GeomPoly","clear",0x03d9bad3,"nape.geom.GeomPoly.clear","nape/geom/GeomPoly.hx",827,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_902_copy,"nape.geom.GeomPoly","copy",0x44e7bd2f,"nape.geom.GeomPoly.copy","nape/geom/GeomPoly.hx",902,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1416_dispose,"nape.geom.GeomPoly","dispose",0x09e42765,"nape.geom.GeomPoly.dispose","nape/geom/GeomPoly.hx",1416,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1454_toString,"nape.geom.GeomPoly","toString",0xae891726,"nape.geom.GeomPoly.toString","nape/geom/GeomPoly.hx",1454,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1487_area,"nape.geom.GeomPoly","area",0x43978d07,"nape.geom.GeomPoly.area","nape/geom/GeomPoly.hx",1487,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1565_winding,"nape.geom.GeomPoly","winding",0x3707efe0,"nape.geom.GeomPoly.winding","nape/geom/GeomPoly.hx",1565,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1641_contains,"nape.geom.GeomPoly","contains",0xa295a099,"nape.geom.GeomPoly.contains","nape/geom/GeomPoly.hx",1641,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1708_isClockwise,"nape.geom.GeomPoly","isClockwise",0x86d9b66e,"nape.geom.GeomPoly.isClockwise","nape/geom/GeomPoly.hx",1708,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1735_isConvex,"nape.geom.GeomPoly","isConvex",0x9662596b,"nape.geom.GeomPoly.isConvex","nape/geom/GeomPoly.hx",1735,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1844_isSimple,"nape.geom.GeomPoly","isSimple",0x8702e636,"nape.geom.GeomPoly.isSimple","nape/geom/GeomPoly.hx",1844,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1875_isMonotone,"nape.geom.GeomPoly","isMonotone",0xf4c9ef19,"nape.geom.GeomPoly.isMonotone","nape/geom/GeomPoly.hx",1875,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1895_isDegenerate,"nape.geom.GeomPoly","isDegenerate",0xd8aed3ba,"nape.geom.GeomPoly.isDegenerate","nape/geom/GeomPoly.hx",1895,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1931_simplify,"nape.geom.GeomPoly","simplify",0x8f8b9d83,"nape.geom.GeomPoly.simplify","nape/geom/GeomPoly.hx",1931,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1973_simpleDecomposition,"nape.geom.GeomPoly","simpleDecomposition",0xc25bdc3d,"nape.geom.GeomPoly.simpleDecomposition","nape/geom/GeomPoly.hx",1973,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2019_monotoneDecomposition,"nape.geom.GeomPoly","monotoneDecomposition",0xee33e7fa,"nape.geom.GeomPoly.monotoneDecomposition","nape/geom/GeomPoly.hx",2019,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2075_convexDecomposition,"nape.geom.GeomPoly","convexDecomposition",0x6df2cbe8,"nape.geom.GeomPoly.convexDecomposition","nape/geom/GeomPoly.hx",2075,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2154_triangularDecomposition,"nape.geom.GeomPoly","triangularDecomposition",0x1e7bbf38,"nape.geom.GeomPoly.triangularDecomposition","nape/geom/GeomPoly.hx",2154,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2227_inflate,"nape.geom.GeomPoly","inflate",0x5ab3434d,"nape.geom.GeomPoly.inflate","nape/geom/GeomPoly.hx",2227,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2460_cut,"nape.geom.GeomPoly","cut",0xb48ad148,"nape.geom.GeomPoly.cut","nape/geom/GeomPoly.hx",2460,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2521_transform,"nape.geom.GeomPoly","transform",0x267691b2,"nape.geom.GeomPoly.transform","nape/geom/GeomPoly.hx",2521,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2562_bounds,"nape.geom.GeomPoly","bounds",0xb91f5a6f,"nape.geom.GeomPoly.bounds","nape/geom/GeomPoly.hx",2562,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2644_top,"nape.geom.GeomPoly","top",0xb497b25b,"nape.geom.GeomPoly.top","nape/geom/GeomPoly.hx",2644,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2686_bottom,"nape.geom.GeomPoly","bottom",0xb87abae5,"nape.geom.GeomPoly.bottom","nape/geom/GeomPoly.hx",2686,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2728_left,"nape.geom.GeomPoly","left",0x4ad30981,"nape.geom.GeomPoly.left","nape/geom/GeomPoly.hx",2728,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_2770_right,"nape.geom.GeomPoly","right",0xa4e25522,"nape.geom.GeomPoly.right","nape/geom/GeomPoly.hx",2770,0x0b8969aa)
HX_LOCAL_STACK_FRAME(_hx_pos_1ae86dd092a9f416_1175_get,"nape.geom.GeomPoly","get",0xb48dcc5c,"nape.geom.GeomPoly.get","nape/geom/GeomPoly.hx",1175,0x0b8969aa)
namespace nape{
namespace geom{

void GeomPoly_obj::__construct( ::Dynamic vertices){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_184_new)
HXLINE( 221)		this->zpp_inner = null();
HXLINE( 188)		this->zpp_pool = null();
HXLINE( 955)		this->zpp_inner =  ::zpp_nape::geom::ZPP_GeomPoly_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 956)		if (hx::IsNotNull( vertices )) {
HXLINE( 958)			if (::Std_obj::is(vertices,hx::ArrayBase::__mClass)) {
HXLINE( 959)				::cpp::VirtualArray lv = ( (::cpp::VirtualArray)(vertices) );
HXLINE( 960)				{
HXLINE( 960)					int _g = 0;
HXDLIN( 960)					while((_g < lv->get_length())){
HXLINE( 960)						 ::Dynamic vite = lv->__get(_g);
HXDLIN( 960)						_g = (_g + 1);
HXLINE( 962)						if (hx::IsNull( vite )) {
HXLINE( 962)							HX_STACK_DO_THROW(HX_("Error: Array<Vec2> contains null objects",eb,2d,26,50));
            						}
HXLINE( 965)						if (!(::Std_obj::is(vite,hx::ClassOf< ::nape::geom::Vec2 >()))) {
HXLINE( 965)							HX_STACK_DO_THROW(HX_("Error: Array<Vec2> contains non Vec2 objects",d5,3c,56,e0));
            						}
HXLINE( 967)						 ::nape::geom::Vec2 v = ( ( ::nape::geom::Vec2)(vite) );
HXLINE( 970)						bool _hx_tmp;
HXDLIN( 970)						if (hx::IsNotNull( v )) {
HXLINE( 970)							_hx_tmp = v->zpp_disp;
            						}
            						else {
HXLINE( 970)							_hx_tmp = false;
            						}
HXDLIN( 970)						if (_hx_tmp) {
HXLINE( 970)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXLINE( 975)						bool _hx_tmp1;
HXDLIN( 975)						if (hx::IsNotNull( v )) {
HXLINE( 975)							_hx_tmp1 = v->zpp_disp;
            						}
            						else {
HXLINE( 975)							_hx_tmp1 = false;
            						}
HXDLIN( 975)						if (_hx_tmp1) {
HXLINE( 975)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 975)						{
HXLINE( 975)							 ::zpp_nape::geom::ZPP_Vec2 _this = v->zpp_inner;
HXDLIN( 975)							if (hx::IsNotNull( _this->_validate )) {
HXLINE( 975)								_this->_validate();
            							}
            						}
HXDLIN( 975)						Float x = v->zpp_inner->x;
HXDLIN( 975)						bool _hx_tmp2;
HXDLIN( 975)						if (hx::IsNotNull( v )) {
HXLINE( 975)							_hx_tmp2 = v->zpp_disp;
            						}
            						else {
HXLINE( 975)							_hx_tmp2 = false;
            						}
HXDLIN( 975)						if (_hx_tmp2) {
HXLINE( 975)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 975)						{
HXLINE( 975)							 ::zpp_nape::geom::ZPP_Vec2 _this1 = v->zpp_inner;
HXDLIN( 975)							if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 975)								_this1->_validate();
            							}
            						}
HXDLIN( 975)						Float y = v->zpp_inner->y;
HXDLIN( 975)						 ::zpp_nape::geom::ZPP_GeomVert ret;
HXDLIN( 975)						{
HXLINE( 975)							if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 975)								ret =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 975)								ret = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 975)								::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret->next;
HXDLIN( 975)								ret->next = null();
            							}
HXDLIN( 975)							ret->forced = false;
            						}
HXDLIN( 975)						{
HXLINE( 975)							ret->x = x;
HXDLIN( 975)							ret->y = y;
            						}
HXDLIN( 975)						 ::zpp_nape::geom::ZPP_GeomVert obj = ret;
HXLINE( 976)						if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE( 976)							this->zpp_inner->vertices = (obj->prev = (obj->next = obj));
            						}
            						else {
HXLINE( 978)							obj->prev = this->zpp_inner->vertices;
HXLINE( 979)							obj->next = this->zpp_inner->vertices->next;
HXLINE( 980)							this->zpp_inner->vertices->next->prev = obj;
HXLINE( 981)							this->zpp_inner->vertices->next = obj;
            						}
HXLINE( 974)						this->zpp_inner->vertices = obj;
            					}
            				}
            			}
            			else {
HXLINE(1016)				if (::Std_obj::is(vertices,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE(1017)					 ::nape::geom::Vec2List lv1 = ( ( ::nape::geom::Vec2List)(vertices) );
HXLINE(1018)					{
HXLINE(1018)						 ::nape::geom::Vec2Iterator _g1 = lv1->iterator();
HXDLIN(1018)						while(true){
HXLINE(1018)							_g1->zpp_inner->zpp_inner->valmod();
HXDLIN(1018)							int length = _g1->zpp_inner->zpp_gl();
HXDLIN(1018)							_g1->zpp_critical = true;
HXDLIN(1018)							bool _hx_tmp3;
HXDLIN(1018)							if ((_g1->zpp_i < length)) {
HXLINE(1018)								_hx_tmp3 = true;
            							}
            							else {
HXLINE(1018)								{
HXLINE(1018)									_g1->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN(1018)									::nape::geom::Vec2Iterator_obj::zpp_pool = _g1;
HXDLIN(1018)									_g1->zpp_inner = null();
            								}
HXDLIN(1018)								_hx_tmp3 = false;
            							}
HXDLIN(1018)							if (!(_hx_tmp3)) {
HXLINE(1018)								goto _hx_goto_1;
            							}
HXDLIN(1018)							_g1->zpp_critical = false;
HXDLIN(1018)							 ::nape::geom::Vec2 v1 = _g1->zpp_inner->at(_g1->zpp_i++);
HXLINE(1020)							if (hx::IsNull( v1 )) {
HXLINE(1020)								HX_STACK_DO_THROW(HX_("Error: Vec2List contains null objects",86,c5,d1,3e));
            							}
HXLINE(1024)							bool _hx_tmp4;
HXDLIN(1024)							if (hx::IsNotNull( v1 )) {
HXLINE(1024)								_hx_tmp4 = v1->zpp_disp;
            							}
            							else {
HXLINE(1024)								_hx_tmp4 = false;
            							}
HXDLIN(1024)							if (_hx_tmp4) {
HXLINE(1024)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXLINE(1029)							bool _hx_tmp5;
HXDLIN(1029)							if (hx::IsNotNull( v1 )) {
HXLINE(1029)								_hx_tmp5 = v1->zpp_disp;
            							}
            							else {
HXLINE(1029)								_hx_tmp5 = false;
            							}
HXDLIN(1029)							if (_hx_tmp5) {
HXLINE(1029)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::zpp_nape::geom::ZPP_Vec2 _this2 = v1->zpp_inner;
HXDLIN(1029)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1029)									_this2->_validate();
            								}
            							}
HXDLIN(1029)							Float x1 = v1->zpp_inner->x;
HXDLIN(1029)							bool _hx_tmp6;
HXDLIN(1029)							if (hx::IsNotNull( v1 )) {
HXLINE(1029)								_hx_tmp6 = v1->zpp_disp;
            							}
            							else {
HXLINE(1029)								_hx_tmp6 = false;
            							}
HXDLIN(1029)							if (_hx_tmp6) {
HXLINE(1029)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::zpp_nape::geom::ZPP_Vec2 _this3 = v1->zpp_inner;
HXDLIN(1029)								if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1029)									_this3->_validate();
            								}
            							}
HXDLIN(1029)							Float y1 = v1->zpp_inner->y;
HXDLIN(1029)							 ::zpp_nape::geom::ZPP_GeomVert ret1;
HXDLIN(1029)							{
HXLINE(1029)								if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1029)									ret1 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1029)									ret1 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1029)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret1->next;
HXDLIN(1029)									ret1->next = null();
            								}
HXDLIN(1029)								ret1->forced = false;
            							}
HXDLIN(1029)							{
HXLINE(1029)								ret1->x = x1;
HXDLIN(1029)								ret1->y = y1;
            							}
HXDLIN(1029)							 ::zpp_nape::geom::ZPP_GeomVert obj1 = ret1;
HXLINE(1030)							if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(1030)								this->zpp_inner->vertices = (obj1->prev = (obj1->next = obj1));
            							}
            							else {
HXLINE(1032)								obj1->prev = this->zpp_inner->vertices;
HXLINE(1033)								obj1->next = this->zpp_inner->vertices->next;
HXLINE(1034)								this->zpp_inner->vertices->next->prev = obj1;
HXLINE(1035)								this->zpp_inner->vertices->next = obj1;
            							}
HXLINE(1028)							this->zpp_inner->vertices = obj1;
            						}
            						_hx_goto_1:;
            					}
            				}
            				else {
HXLINE(1042)					if (::Std_obj::is(vertices,hx::ClassOf< ::nape::geom::GeomPoly >())) {
HXLINE(1043)						 ::nape::geom::GeomPoly lv2 = ( ( ::nape::geom::GeomPoly)(vertices) );
HXLINE(1046)						bool _hx_tmp7;
HXDLIN(1046)						if (hx::IsNotNull( lv2 )) {
HXLINE(1046)							_hx_tmp7 = lv2->zpp_disp;
            						}
            						else {
HXLINE(1046)							_hx_tmp7 = false;
            						}
HXDLIN(1046)						if (_hx_tmp7) {
HXLINE(1046)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXLINE(1049)						 ::zpp_nape::geom::ZPP_GeomVert verts = lv2->zpp_inner->vertices;
HXLINE(1050)						if (hx::IsNotNull( verts )) {
HXLINE(1051)							 ::zpp_nape::geom::ZPP_GeomVert vite1 = verts;
HXLINE(1052)							while(true){
HXLINE(1053)								Float x2 = vite1->x;
HXDLIN(1053)								Float y2 = vite1->y;
HXDLIN(1053)								bool _hx_tmp8;
HXDLIN(1053)								if ((x2 == x2)) {
HXLINE(1053)									_hx_tmp8 = (y2 != y2);
            								}
            								else {
HXLINE(1053)									_hx_tmp8 = true;
            								}
HXDLIN(1053)								if (_hx_tmp8) {
HXLINE(1053)									HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            								}
HXDLIN(1053)								 ::nape::geom::Vec2 ret2;
HXDLIN(1053)								if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1053)									ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            								}
            								else {
HXLINE(1053)									ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1053)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN(1053)									ret2->zpp_pool = null();
HXDLIN(1053)									ret2->zpp_disp = false;
HXDLIN(1053)									if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1053)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            									}
            								}
HXDLIN(1053)								if (hx::IsNull( ret2->zpp_inner )) {
HXLINE(1053)									 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN(1053)									{
HXLINE(1053)										if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1053)											ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(1053)											ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1053)											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN(1053)											ret3->next = null();
            										}
HXDLIN(1053)										ret3->weak = false;
            									}
HXDLIN(1053)									ret3->_immutable = false;
HXDLIN(1053)									{
HXLINE(1053)										ret3->x = x2;
HXDLIN(1053)										ret3->y = y2;
            									}
HXDLIN(1053)									ret2->zpp_inner = ret3;
HXDLIN(1053)									ret2->zpp_inner->outer = ret2;
            								}
            								else {
HXLINE(1053)									bool _hx_tmp9;
HXDLIN(1053)									if (hx::IsNotNull( ret2 )) {
HXLINE(1053)										_hx_tmp9 = ret2->zpp_disp;
            									}
            									else {
HXLINE(1053)										_hx_tmp9 = false;
            									}
HXDLIN(1053)									if (_hx_tmp9) {
HXLINE(1053)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN(1053)									{
HXLINE(1053)										 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret2->zpp_inner;
HXDLIN(1053)										if (_this4->_immutable) {
HXLINE(1053)											HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            										}
HXDLIN(1053)										if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1053)											_this4->_isimmutable();
            										}
            									}
HXDLIN(1053)									bool _hx_tmp10;
HXDLIN(1053)									if ((x2 == x2)) {
HXLINE(1053)										_hx_tmp10 = (y2 != y2);
            									}
            									else {
HXLINE(1053)										_hx_tmp10 = true;
            									}
HXDLIN(1053)									if (_hx_tmp10) {
HXLINE(1053)										HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            									}
HXDLIN(1053)									bool _hx_tmp11;
HXDLIN(1053)									bool _hx_tmp12;
HXDLIN(1053)									if (hx::IsNotNull( ret2 )) {
HXLINE(1053)										_hx_tmp12 = ret2->zpp_disp;
            									}
            									else {
HXLINE(1053)										_hx_tmp12 = false;
            									}
HXDLIN(1053)									if (_hx_tmp12) {
HXLINE(1053)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN(1053)									{
HXLINE(1053)										 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret2->zpp_inner;
HXDLIN(1053)										if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1053)											_this5->_validate();
            										}
            									}
HXDLIN(1053)									if ((ret2->zpp_inner->x == x2)) {
HXLINE(1053)										bool _hx_tmp13;
HXDLIN(1053)										if (hx::IsNotNull( ret2 )) {
HXLINE(1053)											_hx_tmp13 = ret2->zpp_disp;
            										}
            										else {
HXLINE(1053)											_hx_tmp13 = false;
            										}
HXDLIN(1053)										if (_hx_tmp13) {
HXLINE(1053)											HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            										}
HXDLIN(1053)										{
HXLINE(1053)											 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret2->zpp_inner;
HXDLIN(1053)											if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1053)												_this6->_validate();
            											}
            										}
HXDLIN(1053)										_hx_tmp11 = (ret2->zpp_inner->y == y2);
            									}
            									else {
HXLINE(1053)										_hx_tmp11 = false;
            									}
HXDLIN(1053)									if (!(_hx_tmp11)) {
HXLINE(1053)										{
HXLINE(1053)											ret2->zpp_inner->x = x2;
HXDLIN(1053)											ret2->zpp_inner->y = y2;
            										}
HXDLIN(1053)										{
HXLINE(1053)											 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret2->zpp_inner;
HXDLIN(1053)											if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1053)												_this7->_invalidate(_this7);
            											}
            										}
            									}
            								}
HXDLIN(1053)								ret2->zpp_inner->weak = false;
HXDLIN(1053)								 ::nape::geom::Vec2 v2 = ret2;
HXLINE(1054)								vite1 = vite1->next;
HXLINE(1057)								bool _hx_tmp14;
HXDLIN(1057)								if (hx::IsNotNull( v2 )) {
HXLINE(1057)									_hx_tmp14 = v2->zpp_disp;
            								}
            								else {
HXLINE(1057)									_hx_tmp14 = false;
            								}
HXDLIN(1057)								if (_hx_tmp14) {
HXLINE(1057)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(1057)								{
HXLINE(1057)									 ::zpp_nape::geom::ZPP_Vec2 _this8 = v2->zpp_inner;
HXDLIN(1057)									if (hx::IsNotNull( _this8->_validate )) {
HXLINE(1057)										_this8->_validate();
            									}
            								}
HXDLIN(1057)								Float x3 = v2->zpp_inner->x;
HXDLIN(1057)								bool _hx_tmp15;
HXDLIN(1057)								if (hx::IsNotNull( v2 )) {
HXLINE(1057)									_hx_tmp15 = v2->zpp_disp;
            								}
            								else {
HXLINE(1057)									_hx_tmp15 = false;
            								}
HXDLIN(1057)								if (_hx_tmp15) {
HXLINE(1057)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(1057)								{
HXLINE(1057)									 ::zpp_nape::geom::ZPP_Vec2 _this9 = v2->zpp_inner;
HXDLIN(1057)									if (hx::IsNotNull( _this9->_validate )) {
HXLINE(1057)										_this9->_validate();
            									}
            								}
HXDLIN(1057)								Float y3 = v2->zpp_inner->y;
HXDLIN(1057)								 ::zpp_nape::geom::ZPP_GeomVert ret4;
HXDLIN(1057)								{
HXLINE(1057)									if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1057)										ret4 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1057)										ret4 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1057)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret4->next;
HXDLIN(1057)										ret4->next = null();
            									}
HXDLIN(1057)									ret4->forced = false;
            								}
HXDLIN(1057)								{
HXLINE(1057)									ret4->x = x3;
HXDLIN(1057)									ret4->y = y3;
            								}
HXDLIN(1057)								 ::zpp_nape::geom::ZPP_GeomVert obj2 = ret4;
HXLINE(1058)								if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(1058)									this->zpp_inner->vertices = (obj2->prev = (obj2->next = obj2));
            								}
            								else {
HXLINE(1060)									obj2->prev = this->zpp_inner->vertices;
HXLINE(1061)									obj2->next = this->zpp_inner->vertices->next;
HXLINE(1062)									this->zpp_inner->vertices->next->prev = obj2;
HXLINE(1063)									this->zpp_inner->vertices->next = obj2;
            								}
HXLINE(1056)								this->zpp_inner->vertices = obj2;
HXLINE(1068)								{
HXLINE(1068)									bool _hx_tmp16;
HXDLIN(1068)									if (hx::IsNotNull( v2 )) {
HXLINE(1068)										_hx_tmp16 = v2->zpp_disp;
            									}
            									else {
HXLINE(1068)										_hx_tmp16 = false;
            									}
HXDLIN(1068)									if (_hx_tmp16) {
HXLINE(1068)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN(1068)									{
HXLINE(1068)										 ::zpp_nape::geom::ZPP_Vec2 _this10 = v2->zpp_inner;
HXDLIN(1068)										if (_this10->_immutable) {
HXLINE(1068)											HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            										}
HXDLIN(1068)										if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE(1068)											_this10->_isimmutable();
            										}
            									}
HXDLIN(1068)									if (v2->zpp_inner->_inuse) {
HXLINE(1068)										HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            									}
HXDLIN(1068)									 ::zpp_nape::geom::ZPP_Vec2 inner = v2->zpp_inner;
HXDLIN(1068)									v2->zpp_inner->outer = null();
HXDLIN(1068)									v2->zpp_inner = null();
HXDLIN(1068)									{
HXLINE(1068)										 ::nape::geom::Vec2 o = v2;
HXDLIN(1068)										o->zpp_pool = null();
HXDLIN(1068)										if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1068)											::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            										}
            										else {
HXLINE(1068)											::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            										}
HXDLIN(1068)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1068)										o->zpp_disp = true;
            									}
HXDLIN(1068)									{
HXLINE(1068)										 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1068)										{
HXLINE(1068)											if (hx::IsNotNull( o1->outer )) {
HXLINE(1068)												o1->outer->zpp_inner = null();
HXDLIN(1068)												o1->outer = null();
            											}
HXDLIN(1068)											o1->_isimmutable = null();
HXDLIN(1068)											o1->_validate = null();
HXDLIN(1068)											o1->_invalidate = null();
            										}
HXDLIN(1068)										o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1068)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            									}
            								}
HXLINE(1052)								if (hx::IsEq( vite1,verts )) {
HXLINE(1052)									goto _hx_goto_2;
            								}
            							}
            							_hx_goto_2:;
            						}
            					}
            					else {
HXLINE(1075)						HX_STACK_DO_THROW(HX_("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>",bb,80,45,90));
            					}
            				}
            			}
HXLINE(1079)			this->skipForward(1);
HXLINE(1081)			if (::Std_obj::is(vertices,hx::ArrayBase::__mClass)) {
HXLINE(1082)				::Array< ::Dynamic> lv3 = ( (::Array< ::Dynamic>)(vertices) );
HXLINE(1083)				int i = 0;
HXLINE(1084)				while((i < lv3->length)){
HXLINE(1085)					 ::nape::geom::Vec2 cur = lv3->__get(i).StaticCast<  ::nape::geom::Vec2 >();
HXLINE(1086)					bool _hx_tmp17;
HXDLIN(1086)					if (cur->zpp_inner->weak) {
HXLINE(1090)						{
HXLINE(1090)							bool _hx_tmp18;
HXDLIN(1090)							if (hx::IsNotNull( cur )) {
HXLINE(1090)								_hx_tmp18 = cur->zpp_disp;
            							}
            							else {
HXLINE(1090)								_hx_tmp18 = false;
            							}
HXDLIN(1090)							if (_hx_tmp18) {
HXLINE(1090)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1090)							{
HXLINE(1090)								 ::zpp_nape::geom::ZPP_Vec2 _this11 = cur->zpp_inner;
HXDLIN(1090)								if (_this11->_immutable) {
HXLINE(1090)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(1090)								if (hx::IsNotNull( _this11->_isimmutable )) {
HXLINE(1090)									_this11->_isimmutable();
            								}
            							}
HXDLIN(1090)							if (cur->zpp_inner->_inuse) {
HXLINE(1090)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN(1090)							 ::zpp_nape::geom::ZPP_Vec2 inner1 = cur->zpp_inner;
HXDLIN(1090)							cur->zpp_inner->outer = null();
HXDLIN(1090)							cur->zpp_inner = null();
HXDLIN(1090)							{
HXLINE(1090)								 ::nape::geom::Vec2 o2 = cur;
HXDLIN(1090)								o2->zpp_pool = null();
HXDLIN(1090)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1090)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            								}
            								else {
HXLINE(1090)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            								}
HXDLIN(1090)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN(1090)								o2->zpp_disp = true;
            							}
HXDLIN(1090)							{
HXLINE(1090)								 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN(1090)								{
HXLINE(1090)									if (hx::IsNotNull( o3->outer )) {
HXLINE(1090)										o3->outer->zpp_inner = null();
HXDLIN(1090)										o3->outer = null();
            									}
HXDLIN(1090)									o3->_isimmutable = null();
HXDLIN(1090)									o3->_validate = null();
HXDLIN(1090)									o3->_invalidate = null();
            								}
HXDLIN(1090)								o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1090)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            							}
            						}
HXLINE(1086)						_hx_tmp17 = true;
            					}
            					else {
HXLINE(1086)						_hx_tmp17 = false;
            					}
HXDLIN(1086)					if (_hx_tmp17) {
HXLINE(1097)						lv3->removeRange(i,1);
HXLINE(1098)						continue;
            					}
HXLINE(1100)					i = (i + 1);
            				}
            			}
            			else {
HXLINE(1128)				if (::Std_obj::is(vertices,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE(1129)					 ::nape::geom::Vec2List lv4 = ( ( ::nape::geom::Vec2List)(vertices) );
HXLINE(1130)					if (hx::IsNotNull( lv4->zpp_inner->_validate )) {
HXLINE(1130)						lv4->zpp_inner->_validate();
            					}
HXLINE(1131)					 ::zpp_nape::util::ZNPList_ZPP_Vec2 ins = lv4->zpp_inner->inner;
HXLINE(1132)					 ::zpp_nape::util::ZNPNode_ZPP_Vec2 pre = null();
HXLINE(1133)					 ::zpp_nape::util::ZNPNode_ZPP_Vec2 cur1 = ins->head;
HXLINE(1134)					while(hx::IsNotNull( cur1 )){
HXLINE(1135)						 ::zpp_nape::geom::ZPP_Vec2 x4 = cur1->elt;
HXLINE(1136)						if (x4->outer->zpp_inner->weak) {
HXLINE(1139)							cur1 = ins->erase(pre);
HXLINE(1140)							if (x4->outer->zpp_inner->weak) {
HXLINE(1144)								 ::nape::geom::Vec2 _this12 = x4->outer;
HXDLIN(1144)								bool _hx_tmp19;
HXDLIN(1144)								if (hx::IsNotNull( _this12 )) {
HXLINE(1144)									_hx_tmp19 = _this12->zpp_disp;
            								}
            								else {
HXLINE(1144)									_hx_tmp19 = false;
            								}
HXDLIN(1144)								if (_hx_tmp19) {
HXLINE(1144)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(1144)								{
HXLINE(1144)									 ::zpp_nape::geom::ZPP_Vec2 _this13 = _this12->zpp_inner;
HXDLIN(1144)									if (_this13->_immutable) {
HXLINE(1144)										HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            									}
HXDLIN(1144)									if (hx::IsNotNull( _this13->_isimmutable )) {
HXLINE(1144)										_this13->_isimmutable();
            									}
            								}
HXDLIN(1144)								if (_this12->zpp_inner->_inuse) {
HXLINE(1144)									HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            								}
HXDLIN(1144)								 ::zpp_nape::geom::ZPP_Vec2 inner2 = _this12->zpp_inner;
HXDLIN(1144)								_this12->zpp_inner->outer = null();
HXDLIN(1144)								_this12->zpp_inner = null();
HXDLIN(1144)								{
HXLINE(1144)									 ::nape::geom::Vec2 o4 = _this12;
HXDLIN(1144)									o4->zpp_pool = null();
HXDLIN(1144)									if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1144)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o4;
            									}
            									else {
HXLINE(1144)										::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o4;
            									}
HXDLIN(1144)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o4;
HXDLIN(1144)									o4->zpp_disp = true;
            								}
HXDLIN(1144)								{
HXLINE(1144)									 ::zpp_nape::geom::ZPP_Vec2 o5 = inner2;
HXDLIN(1144)									{
HXLINE(1144)										if (hx::IsNotNull( o5->outer )) {
HXLINE(1144)											o5->outer->zpp_inner = null();
HXDLIN(1144)											o5->outer = null();
            										}
HXDLIN(1144)										o5->_isimmutable = null();
HXDLIN(1144)										o5->_validate = null();
HXDLIN(1144)										o5->_invalidate = null();
            									}
HXDLIN(1144)									o5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1144)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o5;
            								}
            							}
            						}
            						else {
HXLINE(1153)							pre = cur1;
HXLINE(1154)							cur1 = cur1->next;
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic GeomPoly_obj::__CreateEmpty() { return new GeomPoly_obj; }

void *GeomPoly_obj::_hx_vtable = 0;

Dynamic GeomPoly_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GeomPoly_obj > _hx_result = new GeomPoly_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GeomPoly_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b65f9d0;
}

bool GeomPoly_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_229_empty)
HXLINE( 232)		if (this->zpp_disp) {
HXLINE( 232)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 235)		return hx::IsNull( this->zpp_inner->vertices );
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,empty,return )

int GeomPoly_obj::size(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_243_size)
HXLINE( 246)		if (this->zpp_disp) {
HXLINE( 246)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 250)		int ret = 0;
HXLINE( 251)		{
HXLINE( 252)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE( 253)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE( 254)			if (hx::IsNotNull( F )) {
HXLINE( 255)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE( 256)				while(true){
HXLINE( 257)					 ::zpp_nape::geom::ZPP_GeomVert i = nite;
HXLINE( 259)					ret = (ret + 1);
HXLINE( 261)					nite = nite->next;
HXLINE( 256)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 256)						goto _hx_goto_7;
            					}
            				}
            				_hx_goto_7:;
            			}
            		}
HXLINE( 266)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,size,return )

 ::nape::geom::GeomVertexIterator GeomPoly_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_276_iterator)
HXLINE( 279)		if (this->zpp_disp) {
HXLINE( 279)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 282)		return ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::get(this->zpp_inner->vertices,true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,iterator,return )

 ::nape::geom::GeomVertexIterator GeomPoly_obj::forwardIterator(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_292_forwardIterator)
HXLINE( 295)		if (this->zpp_disp) {
HXLINE( 295)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 298)		return ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::get(this->zpp_inner->vertices,true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,forwardIterator,return )

 ::nape::geom::GeomVertexIterator GeomPoly_obj::backwardsIterator(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_308_backwardsIterator)
HXLINE( 311)		if (this->zpp_disp) {
HXLINE( 311)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 314)		return ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::get(this->zpp_inner->vertices,false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,backwardsIterator,return )

 ::nape::geom::Vec2 GeomPoly_obj::current(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_334_current)
HXLINE( 337)		if (this->zpp_disp) {
HXLINE( 337)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 341)		if (this->zpp_disp) {
HXLINE( 341)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 341)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE( 342)			HX_STACK_DO_THROW(HX_("Error: GeomPoly is empty",a1,11,78,32));
            		}
HXLINE( 345)		 ::zpp_nape::geom::ZPP_GeomVert _this = this->zpp_inner->vertices;
HXDLIN( 345)		if (hx::IsNull( _this->wrap )) {
HXLINE( 345)			Float x = _this->x;
HXDLIN( 345)			Float y = _this->y;
HXDLIN( 345)			bool _hx_tmp;
HXDLIN( 345)			if ((x == x)) {
HXLINE( 345)				_hx_tmp = (y != y);
            			}
            			else {
HXLINE( 345)				_hx_tmp = true;
            			}
HXDLIN( 345)			if (_hx_tmp) {
HXLINE( 345)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 345)			 ::nape::geom::Vec2 ret;
HXDLIN( 345)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 345)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 345)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 345)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 345)				ret->zpp_pool = null();
HXDLIN( 345)				ret->zpp_disp = false;
HXDLIN( 345)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 345)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN( 345)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 345)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 345)				{
HXLINE( 345)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 345)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 345)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 345)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 345)						ret1->next = null();
            					}
HXDLIN( 345)					ret1->weak = false;
            				}
HXDLIN( 345)				ret1->_immutable = false;
HXDLIN( 345)				{
HXLINE( 345)					ret1->x = x;
HXDLIN( 345)					ret1->y = y;
            				}
HXDLIN( 345)				ret->zpp_inner = ret1;
HXDLIN( 345)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE( 345)				bool _hx_tmp1;
HXDLIN( 345)				if (hx::IsNotNull( ret )) {
HXLINE( 345)					_hx_tmp1 = ret->zpp_disp;
            				}
            				else {
HXLINE( 345)					_hx_tmp1 = false;
            				}
HXDLIN( 345)				if (_hx_tmp1) {
HXLINE( 345)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 345)				{
HXLINE( 345)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 345)					if (_this1->_immutable) {
HXLINE( 345)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 345)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 345)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 345)				bool _hx_tmp2;
HXDLIN( 345)				if ((x == x)) {
HXLINE( 345)					_hx_tmp2 = (y != y);
            				}
            				else {
HXLINE( 345)					_hx_tmp2 = true;
            				}
HXDLIN( 345)				if (_hx_tmp2) {
HXLINE( 345)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 345)				bool _hx_tmp3;
HXDLIN( 345)				bool _hx_tmp4;
HXDLIN( 345)				if (hx::IsNotNull( ret )) {
HXLINE( 345)					_hx_tmp4 = ret->zpp_disp;
            				}
            				else {
HXLINE( 345)					_hx_tmp4 = false;
            				}
HXDLIN( 345)				if (_hx_tmp4) {
HXLINE( 345)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 345)				{
HXLINE( 345)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 345)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 345)						_this2->_validate();
            					}
            				}
HXDLIN( 345)				if ((ret->zpp_inner->x == x)) {
HXLINE( 345)					bool _hx_tmp5;
HXDLIN( 345)					if (hx::IsNotNull( ret )) {
HXLINE( 345)						_hx_tmp5 = ret->zpp_disp;
            					}
            					else {
HXLINE( 345)						_hx_tmp5 = false;
            					}
HXDLIN( 345)					if (_hx_tmp5) {
HXLINE( 345)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 345)					{
HXLINE( 345)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 345)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 345)							_this3->_validate();
            						}
            					}
HXDLIN( 345)					_hx_tmp3 = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE( 345)					_hx_tmp3 = false;
            				}
HXDLIN( 345)				if (!(_hx_tmp3)) {
HXLINE( 345)					{
HXLINE( 345)						ret->zpp_inner->x = x;
HXDLIN( 345)						ret->zpp_inner->y = y;
            					}
HXDLIN( 345)					{
HXLINE( 345)						 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN( 345)						if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 345)							_this4->_invalidate(_this4);
            						}
            					}
            				}
            			}
HXDLIN( 345)			ret->zpp_inner->weak = false;
HXDLIN( 345)			_this->wrap = ret;
HXDLIN( 345)			_this->wrap->zpp_inner->_inuse = true;
HXDLIN( 345)			_this->wrap->zpp_inner->_invalidate = _this->modwrap_dyn();
HXDLIN( 345)			_this->wrap->zpp_inner->_validate = _this->getwrap_dyn();
            		}
HXDLIN( 345)		return _this->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,current,return )

 ::nape::geom::GeomPoly GeomPoly_obj::push( ::nape::geom::Vec2 vertex){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_374_push)
HXLINE( 377)		if (this->zpp_disp) {
HXLINE( 377)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 382)		bool _hx_tmp;
HXDLIN( 382)		if (hx::IsNotNull( vertex )) {
HXLINE( 382)			_hx_tmp = vertex->zpp_disp;
            		}
            		else {
HXLINE( 382)			_hx_tmp = false;
            		}
HXDLIN( 382)		if (_hx_tmp) {
HXLINE( 382)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 386)		if (hx::IsNull( vertex )) {
HXLINE( 387)			HX_STACK_DO_THROW(HX_("Error: Cannot push null vertex",a6,8f,ae,5e));
            		}
HXLINE( 391)		bool _hx_tmp1;
HXDLIN( 391)		if (hx::IsNotNull( vertex )) {
HXLINE( 391)			_hx_tmp1 = vertex->zpp_disp;
            		}
            		else {
HXLINE( 391)			_hx_tmp1 = false;
            		}
HXDLIN( 391)		if (_hx_tmp1) {
HXLINE( 391)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 391)		{
HXLINE( 391)			 ::zpp_nape::geom::ZPP_Vec2 _this = vertex->zpp_inner;
HXDLIN( 391)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 391)				_this->_validate();
            			}
            		}
HXDLIN( 391)		Float x = vertex->zpp_inner->x;
HXDLIN( 391)		bool _hx_tmp2;
HXDLIN( 391)		if (hx::IsNotNull( vertex )) {
HXLINE( 391)			_hx_tmp2 = vertex->zpp_disp;
            		}
            		else {
HXLINE( 391)			_hx_tmp2 = false;
            		}
HXDLIN( 391)		if (_hx_tmp2) {
HXLINE( 391)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 391)		{
HXLINE( 391)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vertex->zpp_inner;
HXDLIN( 391)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 391)				_this1->_validate();
            			}
            		}
HXDLIN( 391)		Float y = vertex->zpp_inner->y;
HXDLIN( 391)		 ::zpp_nape::geom::ZPP_GeomVert ret;
HXDLIN( 391)		{
HXLINE( 391)			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 391)				ret =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 391)				ret = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 391)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret->next;
HXDLIN( 391)				ret->next = null();
            			}
HXDLIN( 391)			ret->forced = false;
            		}
HXDLIN( 391)		{
HXLINE( 391)			ret->x = x;
HXDLIN( 391)			ret->y = y;
            		}
HXDLIN( 391)		 ::zpp_nape::geom::ZPP_GeomVert obj = ret;
HXLINE( 392)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE( 392)			this->zpp_inner->vertices = (obj->prev = (obj->next = obj));
            		}
            		else {
HXLINE( 394)			obj->prev = this->zpp_inner->vertices;
HXLINE( 395)			obj->next = this->zpp_inner->vertices->next;
HXLINE( 396)			this->zpp_inner->vertices->next->prev = obj;
HXLINE( 397)			this->zpp_inner->vertices->next = obj;
            		}
HXLINE( 390)		this->zpp_inner->vertices = obj;
HXLINE( 401)		if (vertex->zpp_inner->weak) {
HXLINE( 405)			bool _hx_tmp3;
HXDLIN( 405)			if (hx::IsNotNull( vertex )) {
HXLINE( 405)				_hx_tmp3 = vertex->zpp_disp;
            			}
            			else {
HXLINE( 405)				_hx_tmp3 = false;
            			}
HXDLIN( 405)			if (_hx_tmp3) {
HXLINE( 405)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 405)			{
HXLINE( 405)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = vertex->zpp_inner;
HXDLIN( 405)				if (_this2->_immutable) {
HXLINE( 405)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 405)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 405)					_this2->_isimmutable();
            				}
            			}
HXDLIN( 405)			if (vertex->zpp_inner->_inuse) {
HXLINE( 405)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 405)			 ::zpp_nape::geom::ZPP_Vec2 inner = vertex->zpp_inner;
HXDLIN( 405)			vertex->zpp_inner->outer = null();
HXDLIN( 405)			vertex->zpp_inner = null();
HXDLIN( 405)			{
HXLINE( 405)				 ::nape::geom::Vec2 o = vertex;
HXDLIN( 405)				o->zpp_pool = null();
HXDLIN( 405)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 405)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 405)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 405)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 405)				o->zpp_disp = true;
            			}
HXDLIN( 405)			{
HXLINE( 405)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 405)				{
HXLINE( 405)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 405)						o1->outer->zpp_inner = null();
HXDLIN( 405)						o1->outer = null();
            					}
HXDLIN( 405)					o1->_isimmutable = null();
HXDLIN( 405)					o1->_validate = null();
HXDLIN( 405)					o1->_invalidate = null();
            				}
HXDLIN( 405)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 405)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 412)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,push,return )

 ::nape::geom::GeomPoly GeomPoly_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_436_pop)
HXLINE( 439)		if (this->zpp_disp) {
HXLINE( 439)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 443)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE( 444)			HX_STACK_DO_THROW(HX_("Error: Cannot pop from empty polygon",2f,72,01,42));
            		}
HXLINE( 447)		 ::zpp_nape::geom::ZPP_GeomVert retv = this->zpp_inner->vertices;
HXLINE( 457)		 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp;
HXDLIN( 457)		bool _hx_tmp1;
HXDLIN( 457)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE( 457)			_hx_tmp1 = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices );
            		}
            		else {
HXLINE( 457)			_hx_tmp1 = false;
            		}
HXDLIN( 457)		if (_hx_tmp1) {
HXLINE( 458)			this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 457)			_hx_tmp = null();
            		}
            		else {
HXLINE( 463)			 ::zpp_nape::geom::ZPP_GeomVert retnodes = this->zpp_inner->vertices->prev;
HXLINE( 464)			this->zpp_inner->vertices->prev->next = this->zpp_inner->vertices->next;
HXLINE( 465)			this->zpp_inner->vertices->next->prev = this->zpp_inner->vertices->prev;
HXLINE( 466)			this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 468)			this->zpp_inner->vertices = null();
HXLINE( 457)			_hx_tmp = retnodes;
            		}
HXLINE( 448)		this->zpp_inner->vertices = _hx_tmp;
HXLINE( 472)		{
HXLINE( 473)			 ::zpp_nape::geom::ZPP_GeomVert o = retv;
HXLINE( 482)			{
HXLINE( 482)				if (hx::IsNotNull( o->wrap )) {
HXLINE( 482)					o->wrap->zpp_inner->_inuse = false;
HXDLIN( 482)					{
HXLINE( 482)						 ::nape::geom::Vec2 _this = o->wrap;
HXDLIN( 482)						bool _hx_tmp2;
HXDLIN( 482)						if (hx::IsNotNull( _this )) {
HXLINE( 482)							_hx_tmp2 = _this->zpp_disp;
            						}
            						else {
HXLINE( 482)							_hx_tmp2 = false;
            						}
HXDLIN( 482)						if (_hx_tmp2) {
HXLINE( 482)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 482)						{
HXLINE( 482)							 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 482)							if (_this1->_immutable) {
HXLINE( 482)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 482)							if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 482)								_this1->_isimmutable();
            							}
            						}
HXDLIN( 482)						if (_this->zpp_inner->_inuse) {
HXLINE( 482)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 482)						 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 482)						_this->zpp_inner->outer = null();
HXDLIN( 482)						_this->zpp_inner = null();
HXDLIN( 482)						{
HXLINE( 482)							 ::nape::geom::Vec2 o1 = _this;
HXDLIN( 482)							o1->zpp_pool = null();
HXDLIN( 482)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 482)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o1;
            							}
            							else {
HXLINE( 482)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            							}
HXDLIN( 482)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o1;
HXDLIN( 482)							o1->zpp_disp = true;
            						}
HXDLIN( 482)						{
HXLINE( 482)							 ::zpp_nape::geom::ZPP_Vec2 o2 = inner;
HXDLIN( 482)							{
HXLINE( 482)								if (hx::IsNotNull( o2->outer )) {
HXLINE( 482)									o2->outer->zpp_inner = null();
HXDLIN( 482)									o2->outer = null();
            								}
HXDLIN( 482)								o2->_isimmutable = null();
HXDLIN( 482)								o2->_validate = null();
HXDLIN( 482)								o2->_invalidate = null();
            							}
HXDLIN( 482)							o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 482)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            						}
            					}
HXDLIN( 482)					o->wrap = null();
            				}
HXDLIN( 482)				o->prev = (o->next = null());
            			}
HXLINE( 483)			o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 484)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            		}
HXLINE( 489)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,pop,return )

 ::nape::geom::GeomPoly GeomPoly_obj::unshift( ::nape::geom::Vec2 vertex){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_518_unshift)
HXLINE( 521)		bool _hx_tmp;
HXDLIN( 521)		if (hx::IsNotNull( vertex )) {
HXLINE( 521)			_hx_tmp = vertex->zpp_disp;
            		}
            		else {
HXLINE( 521)			_hx_tmp = false;
            		}
HXDLIN( 521)		if (_hx_tmp) {
HXLINE( 521)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 525)		if (hx::IsNull( vertex )) {
HXLINE( 526)			HX_STACK_DO_THROW(HX_("Error: Cannot unshift null vertex",17,71,36,4e));
            		}
HXLINE( 530)		bool _hx_tmp1;
HXDLIN( 530)		if (hx::IsNotNull( vertex )) {
HXLINE( 530)			_hx_tmp1 = vertex->zpp_disp;
            		}
            		else {
HXLINE( 530)			_hx_tmp1 = false;
            		}
HXDLIN( 530)		if (_hx_tmp1) {
HXLINE( 530)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 530)		{
HXLINE( 530)			 ::zpp_nape::geom::ZPP_Vec2 _this = vertex->zpp_inner;
HXDLIN( 530)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 530)				_this->_validate();
            			}
            		}
HXDLIN( 530)		Float x = vertex->zpp_inner->x;
HXDLIN( 530)		bool _hx_tmp2;
HXDLIN( 530)		if (hx::IsNotNull( vertex )) {
HXLINE( 530)			_hx_tmp2 = vertex->zpp_disp;
            		}
            		else {
HXLINE( 530)			_hx_tmp2 = false;
            		}
HXDLIN( 530)		if (_hx_tmp2) {
HXLINE( 530)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 530)		{
HXLINE( 530)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = vertex->zpp_inner;
HXDLIN( 530)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 530)				_this1->_validate();
            			}
            		}
HXDLIN( 530)		Float y = vertex->zpp_inner->y;
HXDLIN( 530)		 ::zpp_nape::geom::ZPP_GeomVert ret;
HXDLIN( 530)		{
HXLINE( 530)			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 530)				ret =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 530)				ret = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 530)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret->next;
HXDLIN( 530)				ret->next = null();
            			}
HXDLIN( 530)			ret->forced = false;
            		}
HXDLIN( 530)		{
HXLINE( 530)			ret->x = x;
HXDLIN( 530)			ret->y = y;
            		}
HXDLIN( 530)		 ::zpp_nape::geom::ZPP_GeomVert obj = ret;
HXLINE( 531)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE( 531)			this->zpp_inner->vertices = (obj->prev = (obj->next = obj));
            		}
            		else {
HXLINE( 533)			obj->next = this->zpp_inner->vertices;
HXLINE( 534)			obj->prev = this->zpp_inner->vertices->prev;
HXLINE( 535)			this->zpp_inner->vertices->prev->next = obj;
HXLINE( 536)			this->zpp_inner->vertices->prev = obj;
            		}
HXLINE( 529)		this->zpp_inner->vertices = obj;
HXLINE( 540)		if (vertex->zpp_inner->weak) {
HXLINE( 544)			bool _hx_tmp3;
HXDLIN( 544)			if (hx::IsNotNull( vertex )) {
HXLINE( 544)				_hx_tmp3 = vertex->zpp_disp;
            			}
            			else {
HXLINE( 544)				_hx_tmp3 = false;
            			}
HXDLIN( 544)			if (_hx_tmp3) {
HXLINE( 544)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 544)			{
HXLINE( 544)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = vertex->zpp_inner;
HXDLIN( 544)				if (_this2->_immutable) {
HXLINE( 544)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 544)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE( 544)					_this2->_isimmutable();
            				}
            			}
HXDLIN( 544)			if (vertex->zpp_inner->_inuse) {
HXLINE( 544)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 544)			 ::zpp_nape::geom::ZPP_Vec2 inner = vertex->zpp_inner;
HXDLIN( 544)			vertex->zpp_inner->outer = null();
HXDLIN( 544)			vertex->zpp_inner = null();
HXDLIN( 544)			{
HXLINE( 544)				 ::nape::geom::Vec2 o = vertex;
HXDLIN( 544)				o->zpp_pool = null();
HXDLIN( 544)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 544)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 544)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 544)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 544)				o->zpp_disp = true;
            			}
HXDLIN( 544)			{
HXLINE( 544)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 544)				{
HXLINE( 544)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 544)						o1->outer->zpp_inner = null();
HXDLIN( 544)						o1->outer = null();
            					}
HXDLIN( 544)					o1->_isimmutable = null();
HXDLIN( 544)					o1->_validate = null();
HXDLIN( 544)					o1->_invalidate = null();
            				}
HXDLIN( 544)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 544)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 551)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,unshift,return )

 ::nape::geom::GeomPoly GeomPoly_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_576_shift)
HXLINE( 579)		if (this->zpp_disp) {
HXLINE( 579)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 583)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE( 584)			HX_STACK_DO_THROW(HX_("Error: Cannot shift from empty polygon",9e,8f,7e,a2));
            		}
HXLINE( 587)		 ::zpp_nape::geom::ZPP_GeomVert retv = this->zpp_inner->vertices;
HXLINE( 597)		 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp;
HXDLIN( 597)		bool _hx_tmp1;
HXDLIN( 597)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE( 597)			_hx_tmp1 = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices );
            		}
            		else {
HXLINE( 597)			_hx_tmp1 = false;
            		}
HXDLIN( 597)		if (_hx_tmp1) {
HXLINE( 598)			this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 597)			_hx_tmp = (this->zpp_inner->vertices = null());
            		}
            		else {
HXLINE( 603)			 ::zpp_nape::geom::ZPP_GeomVert retnodes = this->zpp_inner->vertices->next;
HXLINE( 604)			this->zpp_inner->vertices->prev->next = this->zpp_inner->vertices->next;
HXLINE( 605)			this->zpp_inner->vertices->next->prev = this->zpp_inner->vertices->prev;
HXLINE( 606)			this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 608)			this->zpp_inner->vertices = null();
HXLINE( 597)			_hx_tmp = retnodes;
            		}
HXLINE( 588)		this->zpp_inner->vertices = _hx_tmp;
HXLINE( 612)		{
HXLINE( 613)			 ::zpp_nape::geom::ZPP_GeomVert o = retv;
HXLINE( 622)			{
HXLINE( 622)				if (hx::IsNotNull( o->wrap )) {
HXLINE( 622)					o->wrap->zpp_inner->_inuse = false;
HXDLIN( 622)					{
HXLINE( 622)						 ::nape::geom::Vec2 _this = o->wrap;
HXDLIN( 622)						bool _hx_tmp2;
HXDLIN( 622)						if (hx::IsNotNull( _this )) {
HXLINE( 622)							_hx_tmp2 = _this->zpp_disp;
            						}
            						else {
HXLINE( 622)							_hx_tmp2 = false;
            						}
HXDLIN( 622)						if (_hx_tmp2) {
HXLINE( 622)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 622)						{
HXLINE( 622)							 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 622)							if (_this1->_immutable) {
HXLINE( 622)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 622)							if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 622)								_this1->_isimmutable();
            							}
            						}
HXDLIN( 622)						if (_this->zpp_inner->_inuse) {
HXLINE( 622)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 622)						 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 622)						_this->zpp_inner->outer = null();
HXDLIN( 622)						_this->zpp_inner = null();
HXDLIN( 622)						{
HXLINE( 622)							 ::nape::geom::Vec2 o1 = _this;
HXDLIN( 622)							o1->zpp_pool = null();
HXDLIN( 622)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 622)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o1;
            							}
            							else {
HXLINE( 622)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            							}
HXDLIN( 622)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o1;
HXDLIN( 622)							o1->zpp_disp = true;
            						}
HXDLIN( 622)						{
HXLINE( 622)							 ::zpp_nape::geom::ZPP_Vec2 o2 = inner;
HXDLIN( 622)							{
HXLINE( 622)								if (hx::IsNotNull( o2->outer )) {
HXLINE( 622)									o2->outer->zpp_inner = null();
HXDLIN( 622)									o2->outer = null();
            								}
HXDLIN( 622)								o2->_isimmutable = null();
HXDLIN( 622)								o2->_validate = null();
HXDLIN( 622)								o2->_invalidate = null();
            							}
HXDLIN( 622)							o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 622)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            						}
            					}
HXDLIN( 622)					o->wrap = null();
            				}
HXDLIN( 622)				o->prev = (o->next = null());
            			}
HXLINE( 623)			o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 624)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            		}
HXLINE( 629)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,shift,return )

 ::nape::geom::GeomPoly GeomPoly_obj::skipForward(int times){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_656_skipForward)
HXLINE( 659)		if (this->zpp_disp) {
HXLINE( 659)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 662)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE( 663)			if ((times > 0)) {
HXLINE( 664)				while(true){
HXLINE( 664)					times = (times - 1);
HXDLIN( 664)					if (!(((times + 1) > 0))) {
HXLINE( 664)						goto _hx_goto_17;
            					}
HXDLIN( 664)					this->zpp_inner->vertices = this->zpp_inner->vertices->next;
            				}
            				_hx_goto_17:;
            			}
            			else {
HXLINE( 666)				if ((times < 0)) {
HXLINE( 667)					while(true){
HXLINE( 667)						times = (times + 1);
HXDLIN( 667)						if (!(((times - 1) < 0))) {
HXLINE( 667)							goto _hx_goto_18;
            						}
HXDLIN( 667)						this->zpp_inner->vertices = this->zpp_inner->vertices->prev;
            					}
            					_hx_goto_18:;
            				}
            			}
            		}
HXLINE( 670)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,skipForward,return )

 ::nape::geom::GeomPoly GeomPoly_obj::skipBackwards(int times){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_698_skipBackwards)
HXLINE( 701)		if (this->zpp_disp) {
HXLINE( 701)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 704)		return this->skipForward(-(times));
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,skipBackwards,return )

 ::nape::geom::GeomPoly GeomPoly_obj::erase(int count){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_737_erase)
HXLINE( 740)		if (this->zpp_disp) {
HXLINE( 740)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 743)		while(true){
HXLINE( 743)			bool _hx_tmp;
HXDLIN( 743)			if ((count != 0)) {
HXLINE( 743)				_hx_tmp = hx::IsNotNull( this->zpp_inner->vertices );
            			}
            			else {
HXLINE( 743)				_hx_tmp = false;
            			}
HXDLIN( 743)			if (!(_hx_tmp)) {
HXLINE( 743)				goto _hx_goto_21;
            			}
HXLINE( 744)			 ::zpp_nape::geom::ZPP_GeomVert retv = this->zpp_inner->vertices;
HXLINE( 745)			if ((count > 0)) {
HXLINE( 755)				 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp1;
HXDLIN( 755)				bool _hx_tmp2;
HXDLIN( 755)				if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE( 755)					_hx_tmp2 = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices );
            				}
            				else {
HXLINE( 755)					_hx_tmp2 = false;
            				}
HXDLIN( 755)				if (_hx_tmp2) {
HXLINE( 756)					this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 755)					_hx_tmp1 = (this->zpp_inner->vertices = null());
            				}
            				else {
HXLINE( 761)					 ::zpp_nape::geom::ZPP_GeomVert retnodes = this->zpp_inner->vertices->next;
HXLINE( 762)					this->zpp_inner->vertices->prev->next = this->zpp_inner->vertices->next;
HXLINE( 763)					this->zpp_inner->vertices->next->prev = this->zpp_inner->vertices->prev;
HXLINE( 764)					this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 766)					this->zpp_inner->vertices = null();
HXLINE( 755)					_hx_tmp1 = retnodes;
            				}
HXLINE( 746)				this->zpp_inner->vertices = _hx_tmp1;
HXLINE( 770)				count = (count - 1);
            			}
            			else {
HXLINE( 772)				if ((count < 0)) {
HXLINE( 782)					 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp3;
HXDLIN( 782)					bool _hx_tmp4;
HXDLIN( 782)					if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE( 782)						_hx_tmp4 = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices );
            					}
            					else {
HXLINE( 782)						_hx_tmp4 = false;
            					}
HXDLIN( 782)					if (_hx_tmp4) {
HXLINE( 783)						this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 782)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 788)						 ::zpp_nape::geom::ZPP_GeomVert retnodes1 = this->zpp_inner->vertices->prev;
HXLINE( 789)						this->zpp_inner->vertices->prev->next = this->zpp_inner->vertices->next;
HXLINE( 790)						this->zpp_inner->vertices->next->prev = this->zpp_inner->vertices->prev;
HXLINE( 791)						this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 793)						this->zpp_inner->vertices = null();
HXLINE( 782)						_hx_tmp3 = retnodes1;
            					}
HXLINE( 773)					this->zpp_inner->vertices = _hx_tmp3;
HXLINE( 797)					count = (count + 1);
            				}
            			}
HXLINE( 799)			{
HXLINE( 800)				 ::zpp_nape::geom::ZPP_GeomVert o = retv;
HXLINE( 809)				{
HXLINE( 809)					if (hx::IsNotNull( o->wrap )) {
HXLINE( 809)						o->wrap->zpp_inner->_inuse = false;
HXDLIN( 809)						{
HXLINE( 809)							 ::nape::geom::Vec2 _this = o->wrap;
HXDLIN( 809)							bool _hx_tmp5;
HXDLIN( 809)							if (hx::IsNotNull( _this )) {
HXLINE( 809)								_hx_tmp5 = _this->zpp_disp;
            							}
            							else {
HXLINE( 809)								_hx_tmp5 = false;
            							}
HXDLIN( 809)							if (_hx_tmp5) {
HXLINE( 809)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 809)							{
HXLINE( 809)								 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 809)								if (_this1->_immutable) {
HXLINE( 809)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 809)								if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 809)									_this1->_isimmutable();
            								}
            							}
HXDLIN( 809)							if (_this->zpp_inner->_inuse) {
HXLINE( 809)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN( 809)							 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 809)							_this->zpp_inner->outer = null();
HXDLIN( 809)							_this->zpp_inner = null();
HXDLIN( 809)							{
HXLINE( 809)								 ::nape::geom::Vec2 o1 = _this;
HXDLIN( 809)								o1->zpp_pool = null();
HXDLIN( 809)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 809)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o1;
            								}
            								else {
HXLINE( 809)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            								}
HXDLIN( 809)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o1;
HXDLIN( 809)								o1->zpp_disp = true;
            							}
HXDLIN( 809)							{
HXLINE( 809)								 ::zpp_nape::geom::ZPP_Vec2 o2 = inner;
HXDLIN( 809)								{
HXLINE( 809)									if (hx::IsNotNull( o2->outer )) {
HXLINE( 809)										o2->outer->zpp_inner = null();
HXDLIN( 809)										o2->outer = null();
            									}
HXDLIN( 809)									o2->_isimmutable = null();
HXDLIN( 809)									o2->_validate = null();
HXDLIN( 809)									o2->_invalidate = null();
            								}
HXDLIN( 809)								o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 809)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            							}
            						}
HXDLIN( 809)						o->wrap = null();
            					}
HXDLIN( 809)					o->prev = (o->next = null());
            				}
HXLINE( 810)				o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 811)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            			}
            		}
            		_hx_goto_21:;
HXLINE( 817)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,erase,return )

 ::nape::geom::GeomPoly GeomPoly_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_827_clear)
HXLINE( 830)		if (this->zpp_disp) {
HXLINE( 830)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 834)		while(hx::IsNotNull( this->zpp_inner->vertices )){
HXLINE( 835)			 ::zpp_nape::geom::ZPP_GeomVert tmp = this->zpp_inner->vertices;
HXLINE( 845)			 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp;
HXDLIN( 845)			bool _hx_tmp1;
HXDLIN( 845)			if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE( 845)				_hx_tmp1 = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices );
            			}
            			else {
HXLINE( 845)				_hx_tmp1 = false;
            			}
HXDLIN( 845)			if (_hx_tmp1) {
HXLINE( 846)				this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 845)				_hx_tmp = (this->zpp_inner->vertices = null());
            			}
            			else {
HXLINE( 851)				 ::zpp_nape::geom::ZPP_GeomVert retnodes = this->zpp_inner->vertices->next;
HXLINE( 852)				this->zpp_inner->vertices->prev->next = this->zpp_inner->vertices->next;
HXLINE( 853)				this->zpp_inner->vertices->next->prev = this->zpp_inner->vertices->prev;
HXLINE( 854)				this->zpp_inner->vertices->next = (this->zpp_inner->vertices->prev = null());
HXLINE( 856)				this->zpp_inner->vertices = null();
HXLINE( 845)				_hx_tmp = retnodes;
            			}
HXLINE( 836)			this->zpp_inner->vertices = _hx_tmp;
HXLINE( 860)			{
HXLINE( 861)				 ::zpp_nape::geom::ZPP_GeomVert o = tmp;
HXLINE( 870)				{
HXLINE( 870)					if (hx::IsNotNull( o->wrap )) {
HXLINE( 870)						o->wrap->zpp_inner->_inuse = false;
HXDLIN( 870)						{
HXLINE( 870)							 ::nape::geom::Vec2 _this = o->wrap;
HXDLIN( 870)							bool _hx_tmp2;
HXDLIN( 870)							if (hx::IsNotNull( _this )) {
HXLINE( 870)								_hx_tmp2 = _this->zpp_disp;
            							}
            							else {
HXLINE( 870)								_hx_tmp2 = false;
            							}
HXDLIN( 870)							if (_hx_tmp2) {
HXLINE( 870)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 870)							{
HXLINE( 870)								 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 870)								if (_this1->_immutable) {
HXLINE( 870)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 870)								if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 870)									_this1->_isimmutable();
            								}
            							}
HXDLIN( 870)							if (_this->zpp_inner->_inuse) {
HXLINE( 870)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN( 870)							 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 870)							_this->zpp_inner->outer = null();
HXDLIN( 870)							_this->zpp_inner = null();
HXDLIN( 870)							{
HXLINE( 870)								 ::nape::geom::Vec2 o1 = _this;
HXDLIN( 870)								o1->zpp_pool = null();
HXDLIN( 870)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 870)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o1;
            								}
            								else {
HXLINE( 870)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            								}
HXDLIN( 870)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o1;
HXDLIN( 870)								o1->zpp_disp = true;
            							}
HXDLIN( 870)							{
HXLINE( 870)								 ::zpp_nape::geom::ZPP_Vec2 o2 = inner;
HXDLIN( 870)								{
HXLINE( 870)									if (hx::IsNotNull( o2->outer )) {
HXLINE( 870)										o2->outer->zpp_inner = null();
HXDLIN( 870)										o2->outer = null();
            									}
HXDLIN( 870)									o2->_isimmutable = null();
HXDLIN( 870)									o2->_validate = null();
HXDLIN( 870)									o2->_invalidate = null();
            								}
HXDLIN( 870)								o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 870)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            							}
            						}
HXDLIN( 870)						o->wrap = null();
            					}
HXDLIN( 870)					o->prev = (o->next = null());
            				}
HXLINE( 871)				o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 872)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            			}
            		}
HXLINE( 879)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,clear,return )

 ::nape::geom::GeomPoly GeomPoly_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_902_copy)
HXLINE( 905)		if (this->zpp_disp) {
HXLINE( 905)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE( 908)		 ::nape::geom::GeomPoly ret = ::nape::geom::GeomPoly_obj::get(null());
HXLINE( 909)		{
HXLINE( 910)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE( 911)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE( 912)			if (hx::IsNotNull( F )) {
HXLINE( 913)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE( 914)				while(true){
HXLINE( 915)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE( 919)					Float x = v->x;
HXDLIN( 919)					Float y = v->y;
HXDLIN( 919)					 ::zpp_nape::geom::ZPP_GeomVert ret1;
HXDLIN( 919)					{
HXLINE( 919)						if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 919)							ret1 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 919)							ret1 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 919)							::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret1->next;
HXDLIN( 919)							ret1->next = null();
            						}
HXDLIN( 919)						ret1->forced = false;
            					}
HXDLIN( 919)					{
HXLINE( 919)						ret1->x = x;
HXDLIN( 919)						ret1->y = y;
            					}
HXDLIN( 919)					 ::zpp_nape::geom::ZPP_GeomVert obj = ret1;
HXLINE( 920)					if (hx::IsNull( ret->zpp_inner->vertices )) {
HXLINE( 920)						ret->zpp_inner->vertices = (obj->prev = (obj->next = obj));
            					}
            					else {
HXLINE( 922)						obj->prev = ret->zpp_inner->vertices;
HXLINE( 923)						obj->next = ret->zpp_inner->vertices->next;
HXLINE( 924)						ret->zpp_inner->vertices->next->prev = obj;
HXLINE( 925)						ret->zpp_inner->vertices->next = obj;
            					}
HXLINE( 918)					ret->zpp_inner->vertices = obj;
HXLINE( 931)					nite = nite->next;
HXLINE( 914)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 914)						goto _hx_goto_25;
            					}
            				}
            				_hx_goto_25:;
            			}
            		}
HXLINE( 936)		return ret->skipForward(1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,copy,return )

void GeomPoly_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1416_dispose)
HXLINE(1419)		if (this->zpp_disp) {
HXLINE(1419)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1422)		this->clear();
HXLINE(1423)		{
HXLINE(1424)			 ::nape::geom::GeomPoly o = hx::ObjectPtr<OBJ_>(this);
HXLINE(1434)			o->zpp_pool = null();
HXLINE(1435)			if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextGeomPoly )) {
HXLINE(1435)				::zpp_nape::util::ZPP_PubPool_obj::nextGeomPoly->zpp_pool = o;
            			}
            			else {
HXLINE(1436)				::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly = o;
            			}
HXLINE(1437)			::zpp_nape::util::ZPP_PubPool_obj::nextGeomPoly = o;
HXLINE(1447)			o->zpp_disp = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,dispose,(void))

::String GeomPoly_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1454_toString)
HXLINE(1455)		::String ret = HX_("GeomPoly[",13,6c,4f,08);
HXLINE(1457)		{
HXLINE(1458)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(1459)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(1460)			if (hx::IsNotNull( F )) {
HXLINE(1461)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(1462)				while(true){
HXLINE(1463)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(1465)					{
HXLINE(1466)						if (hx::IsNotEq( v,this->zpp_inner->vertices )) {
HXLINE(1466)							ret = (ret + HX_(",",2c,00,00,00));
            						}
HXLINE(1467)						ret = (ret + ((((HX_("{",7b,00,00,00) + v->x) + HX_(",",2c,00,00,00)) + v->y) + HX_("}",7d,00,00,00)));
            					}
HXLINE(1470)					nite = nite->next;
HXLINE(1462)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1462)						goto _hx_goto_28;
            					}
            				}
            				_hx_goto_28:;
            			}
            		}
HXLINE(1476)		return (ret + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,toString,return )

Float GeomPoly_obj::area(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1487_area)
HXLINE(1490)		if (this->zpp_disp) {
HXLINE(1490)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1493)		bool _hx_tmp;
HXLINE(1494)		bool _hx_tmp1;
HXDLIN(1494)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1494)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1494)			_hx_tmp1 = true;
            		}
HXLINE(1493)		if (!(_hx_tmp1)) {
HXLINE(1493)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1493)			_hx_tmp = true;
            		}
HXDLIN(1493)		if (_hx_tmp) {
HXLINE(1495)			return ((Float)0.0);
            		}
            		else {
HXLINE(1521)			Float area = ((Float)0.0);
HXLINE(1522)			{
HXLINE(1523)				 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(1524)				 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(1525)				if (hx::IsNotNull( F )) {
HXLINE(1526)					 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(1527)					while(true){
HXLINE(1528)						 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(1531)						area = (area + (v->x * (v->next->y - v->prev->y)));
HXLINE(1534)						nite = nite->next;
HXLINE(1527)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1527)							goto _hx_goto_30;
            						}
            					}
            					_hx_goto_30:;
            				}
            			}
HXLINE(1496)			Float ret = (area * ((Float)0.5));
HXLINE(1541)			if ((ret < 0)) {
HXLINE(1541)				return -(ret);
            			}
            			else {
HXLINE(1541)				return ret;
            			}
            		}
HXLINE(1493)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,area,return )

 ::nape::geom::Winding GeomPoly_obj::winding(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1565_winding)
HXLINE(1568)		if (this->zpp_disp) {
HXLINE(1568)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1571)		bool _hx_tmp;
HXLINE(1572)		bool _hx_tmp1;
HXDLIN(1572)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1572)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1572)			_hx_tmp1 = true;
            		}
HXLINE(1571)		if (!(_hx_tmp1)) {
HXLINE(1571)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1571)			_hx_tmp = true;
            		}
HXDLIN(1571)		if (_hx_tmp) {
HXLINE(1574)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED )) {
HXLINE(1574)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1574)				::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN(1574)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN(1574)			return ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED;
            		}
            		else {
HXLINE(1602)			Float area = ((Float)0.0);
HXLINE(1603)			{
HXLINE(1604)				 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(1605)				 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(1606)				if (hx::IsNotNull( F )) {
HXLINE(1607)					 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(1608)					while(true){
HXLINE(1609)						 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(1612)						area = (area + (v->x * (v->next->y - v->prev->y)));
HXLINE(1615)						nite = nite->next;
HXLINE(1608)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1608)							goto _hx_goto_32;
            						}
            					}
            					_hx_goto_32:;
            				}
            			}
HXLINE(1577)			Float area1 = (area * ((Float)0.5));
HXLINE(1622)			if ((area1 > 0)) {
HXLINE(1622)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXLINE(1622)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1622)					::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN(1622)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN(1622)				return ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE;
            			}
            			else {
HXLINE(1622)				if ((area1 == 0)) {
HXLINE(1622)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED )) {
HXLINE(1622)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1622)						::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN(1622)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN(1622)					return ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED;
            				}
            				else {
HXLINE(1622)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE )) {
HXLINE(1622)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1622)						::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN(1622)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN(1622)					return ::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE;
            				}
            			}
            		}
HXLINE(1571)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,winding,return )

bool GeomPoly_obj::contains( ::nape::geom::Vec2 point){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1641_contains)
HXLINE(1644)		if (this->zpp_disp) {
HXLINE(1644)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1649)		bool _hx_tmp;
HXDLIN(1649)		if (hx::IsNotNull( point )) {
HXLINE(1649)			_hx_tmp = point->zpp_disp;
            		}
            		else {
HXLINE(1649)			_hx_tmp = false;
            		}
HXDLIN(1649)		if (_hx_tmp) {
HXLINE(1649)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1653)		if (hx::IsNull( point )) {
HXLINE(1654)			HX_STACK_DO_THROW(HX_("Error: GeomPoly::contains point cannot be null",c2,e1,10,9f));
            		}
HXLINE(1658)		bool _hx_tmp1;
HXDLIN(1658)		if (hx::IsNotNull( point )) {
HXLINE(1658)			_hx_tmp1 = point->zpp_disp;
            		}
            		else {
HXLINE(1658)			_hx_tmp1 = false;
            		}
HXDLIN(1658)		if (_hx_tmp1) {
HXLINE(1658)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1658)		{
HXLINE(1658)			 ::zpp_nape::geom::ZPP_Vec2 _this = point->zpp_inner;
HXDLIN(1658)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(1658)				_this->_validate();
            			}
            		}
HXDLIN(1658)		Float x = point->zpp_inner->x;
HXLINE(1659)		bool _hx_tmp2;
HXDLIN(1659)		if (hx::IsNotNull( point )) {
HXLINE(1659)			_hx_tmp2 = point->zpp_disp;
            		}
            		else {
HXLINE(1659)			_hx_tmp2 = false;
            		}
HXDLIN(1659)		if (_hx_tmp2) {
HXLINE(1659)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(1659)		{
HXLINE(1659)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = point->zpp_inner;
HXDLIN(1659)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1659)				_this1->_validate();
            			}
            		}
HXDLIN(1659)		Float y = point->zpp_inner->y;
HXLINE(1660)		bool ret = false;
HXLINE(1661)		{
HXLINE(1662)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(1663)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(1664)			if (hx::IsNotNull( F )) {
HXLINE(1665)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(1666)				while(true){
HXLINE(1667)					 ::zpp_nape::geom::ZPP_GeomVert p = nite;
HXLINE(1669)					{
HXLINE(1670)						 ::zpp_nape::geom::ZPP_GeomVert q = p->prev;
HXLINE(1671)						bool _hx_tmp3;
HXDLIN(1671)						bool _hx_tmp4;
HXDLIN(1671)						bool _hx_tmp5;
HXDLIN(1671)						if ((p->y < y)) {
HXLINE(1671)							_hx_tmp5 = (q->y >= y);
            						}
            						else {
HXLINE(1671)							_hx_tmp5 = false;
            						}
HXDLIN(1671)						if (!(_hx_tmp5)) {
HXLINE(1671)							if ((q->y < y)) {
HXLINE(1671)								_hx_tmp4 = (p->y >= y);
            							}
            							else {
HXLINE(1671)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(1671)							_hx_tmp4 = true;
            						}
HXDLIN(1671)						if (_hx_tmp4) {
HXLINE(1671)							if (!((p->x <= x))) {
HXLINE(1671)								_hx_tmp3 = (q->x <= x);
            							}
            							else {
HXLINE(1671)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1671)							_hx_tmp3 = false;
            						}
HXDLIN(1671)						if (_hx_tmp3) {
HXLINE(1672)							if (((p->x + (((y - p->y) / (q->y - p->y)) * (q->x - p->x))) < x)) {
HXLINE(1673)								ret = !(ret);
            							}
            						}
            					}
HXLINE(1678)					nite = nite->next;
HXLINE(1666)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1666)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
            		}
HXLINE(1657)		bool ret1 = ret;
HXLINE(1685)		if (point->zpp_inner->weak) {
HXLINE(1689)			bool _hx_tmp6;
HXDLIN(1689)			if (hx::IsNotNull( point )) {
HXLINE(1689)				_hx_tmp6 = point->zpp_disp;
            			}
            			else {
HXLINE(1689)				_hx_tmp6 = false;
            			}
HXDLIN(1689)			if (_hx_tmp6) {
HXLINE(1689)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1689)			{
HXLINE(1689)				 ::zpp_nape::geom::ZPP_Vec2 _this2 = point->zpp_inner;
HXDLIN(1689)				if (_this2->_immutable) {
HXLINE(1689)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1689)				if (hx::IsNotNull( _this2->_isimmutable )) {
HXLINE(1689)					_this2->_isimmutable();
            				}
            			}
HXDLIN(1689)			if (point->zpp_inner->_inuse) {
HXLINE(1689)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(1689)			 ::zpp_nape::geom::ZPP_Vec2 inner = point->zpp_inner;
HXDLIN(1689)			point->zpp_inner->outer = null();
HXDLIN(1689)			point->zpp_inner = null();
HXDLIN(1689)			{
HXLINE(1689)				 ::nape::geom::Vec2 o = point;
HXDLIN(1689)				o->zpp_pool = null();
HXDLIN(1689)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1689)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(1689)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(1689)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1689)				o->zpp_disp = true;
            			}
HXDLIN(1689)			{
HXLINE(1689)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1689)				{
HXLINE(1689)					if (hx::IsNotNull( o1->outer )) {
HXLINE(1689)						o1->outer->zpp_inner = null();
HXDLIN(1689)						o1->outer = null();
            					}
HXDLIN(1689)					o1->_isimmutable = null();
HXDLIN(1689)					o1->_validate = null();
HXDLIN(1689)					o1->_invalidate = null();
            				}
HXDLIN(1689)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1689)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(1696)		return ret1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,contains,return )

bool GeomPoly_obj::isClockwise(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1708_isClockwise)
HXDLIN(1708)		 ::nape::geom::Winding _hx_tmp = this->winding();
HXDLIN(1708)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXDLIN(1708)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1708)			::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN(1708)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1708)		return hx::IsEq( _hx_tmp,::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE );
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,isClockwise,return )

bool GeomPoly_obj::isConvex(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1735_isConvex)
HXLINE(1738)		if (this->zpp_disp) {
HXLINE(1738)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1741)		bool _hx_tmp;
HXLINE(1742)		bool _hx_tmp1;
HXDLIN(1742)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1742)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1742)			_hx_tmp1 = true;
            		}
HXLINE(1741)		if (!(_hx_tmp1)) {
HXLINE(1741)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1741)			_hx_tmp = true;
            		}
HXDLIN(1741)		if (_hx_tmp) {
HXLINE(1743)			return true;
            		}
            		else {
HXLINE(1768)			bool neg = false;
HXLINE(1769)			bool pos = false;
HXLINE(1770)			bool ret = true;
HXLINE(1771)			{
HXLINE(1772)				 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(1773)				 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(1774)				if (hx::IsNotNull( F )) {
HXLINE(1775)					 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(1776)					while(true){
HXLINE(1777)						 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(1779)						{
HXLINE(1780)							 ::zpp_nape::geom::ZPP_GeomVert u = v->prev;
HXLINE(1781)							 ::zpp_nape::geom::ZPP_GeomVert w = v->next;
HXLINE(1782)							Float ax = ((Float)0.0);
HXLINE(1783)							Float ay = ((Float)0.0);
HXLINE(1784)							{
HXLINE(1785)								ax = (w->x - v->x);
HXLINE(1786)								ay = (w->y - v->y);
            							}
HXLINE(1788)							Float bx = ((Float)0.0);
HXLINE(1789)							Float by = ((Float)0.0);
HXLINE(1790)							{
HXLINE(1791)								bx = (v->x - u->x);
HXLINE(1792)								by = (v->y - u->y);
            							}
HXLINE(1794)							Float dot = ((by * ax) - (bx * ay));
HXLINE(1795)							if ((dot > ((Float)0.0))) {
HXLINE(1796)								pos = true;
            							}
            							else {
HXLINE(1798)								if ((dot < ((Float)0.0))) {
HXLINE(1799)									neg = true;
            								}
            							}
HXLINE(1801)							bool _hx_tmp2;
HXDLIN(1801)							if (pos) {
HXLINE(1801)								_hx_tmp2 = neg;
            							}
            							else {
HXLINE(1801)								_hx_tmp2 = false;
            							}
HXDLIN(1801)							if (_hx_tmp2) {
HXLINE(1802)								ret = false;
HXLINE(1803)								goto _hx_goto_37;
            							}
            						}
HXLINE(1807)						nite = nite->next;
HXLINE(1776)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1776)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
            			}
HXLINE(1812)			return ret;
            		}
HXLINE(1741)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,isConvex,return )

bool GeomPoly_obj::isSimple(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1844_isSimple)
HXLINE(1847)		if (this->zpp_disp) {
HXLINE(1847)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1850)		bool _hx_tmp;
HXLINE(1851)		bool _hx_tmp1;
HXDLIN(1851)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1851)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1851)			_hx_tmp1 = true;
            		}
HXLINE(1850)		if (!(_hx_tmp1)) {
HXLINE(1850)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1850)			_hx_tmp = true;
            		}
HXDLIN(1850)		if (_hx_tmp) {
HXLINE(1852)			return true;
            		}
            		else {
HXLINE(1852)			return ::zpp_nape::geom::ZPP_Simple_obj::isSimple(this->zpp_inner->vertices);
            		}
HXLINE(1850)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,isSimple,return )

bool GeomPoly_obj::isMonotone(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1875_isMonotone)
HXLINE(1878)		if (this->zpp_disp) {
HXLINE(1878)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1881)		bool _hx_tmp;
HXLINE(1882)		bool _hx_tmp1;
HXDLIN(1882)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1882)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1882)			_hx_tmp1 = true;
            		}
HXLINE(1881)		if (!(_hx_tmp1)) {
HXLINE(1881)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1881)			_hx_tmp = true;
            		}
HXDLIN(1881)		if (_hx_tmp) {
HXLINE(1883)			return true;
            		}
            		else {
HXLINE(1883)			return ::zpp_nape::geom::ZPP_Monotone_obj::isMonotone(this->zpp_inner->vertices);
            		}
HXLINE(1881)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,isMonotone,return )

bool GeomPoly_obj::isDegenerate(){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1895_isDegenerate)
HXLINE(1898)		if (this->zpp_disp) {
HXLINE(1898)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1901)		bool _hx_tmp;
HXLINE(1902)		bool _hx_tmp1;
HXDLIN(1902)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1902)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1902)			_hx_tmp1 = true;
            		}
HXLINE(1901)		if (!(_hx_tmp1)) {
HXLINE(1901)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1901)			_hx_tmp = true;
            		}
HXDLIN(1901)		if (_hx_tmp) {
HXLINE(1903)			return true;
            		}
            		else {
HXLINE(1903)			Float _hx_tmp2 = this->area();
HXDLIN(1903)			return (_hx_tmp2 < ::nape::Config_obj::epsilon);
            		}
HXLINE(1901)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,isDegenerate,return )

 ::nape::geom::GeomPoly GeomPoly_obj::simplify(Float epsilon){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1931_simplify)
HXLINE(1934)		if (this->zpp_disp) {
HXLINE(1934)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1938)		if ((epsilon <= ((Float)0.0))) {
HXLINE(1939)			HX_STACK_DO_THROW(HX_("Error: Epsilon should be > 0 for simplifying a GeomPoly",eb,c3,a2,75));
            		}
HXLINE(1942)		bool _hx_tmp;
HXLINE(1943)		bool _hx_tmp1;
HXDLIN(1943)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1943)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1943)			_hx_tmp1 = true;
            		}
HXLINE(1942)		if (!(_hx_tmp1)) {
HXLINE(1942)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1942)			_hx_tmp = true;
            		}
HXDLIN(1942)		if (_hx_tmp) {
HXLINE(1945)			return this->copy();
            		}
            		else {
HXLINE(1948)			 ::zpp_nape::geom::ZPP_GeomVert x = ::zpp_nape::geom::ZPP_Simplify_obj::simplify(this->zpp_inner->vertices,epsilon);
HXLINE(1949)			 ::nape::geom::GeomPoly ret = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(1950)			ret->zpp_inner->vertices = x;
HXLINE(1951)			return ret;
            		}
HXLINE(1942)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,simplify,return )

 ::nape::geom::GeomPolyList GeomPoly_obj::simpleDecomposition( ::nape::geom::GeomPolyList output){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1973_simpleDecomposition)
HXLINE(1976)		if (this->zpp_disp) {
HXLINE(1976)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(1980)		bool _hx_tmp;
HXLINE(1981)		bool _hx_tmp1;
HXDLIN(1981)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(1981)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1981)			_hx_tmp1 = true;
            		}
HXLINE(1980)		if (!(_hx_tmp1)) {
HXLINE(1980)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(1980)			_hx_tmp = true;
            		}
HXDLIN(1980)		if (_hx_tmp) {
HXLINE(1983)			HX_STACK_DO_THROW(HX_("Error: Cannot decompose a degenerate polygon",8d,10,53,f2));
            		}
HXLINE(1986)		 ::zpp_nape::geom::ZPP_GeomVert MPs = this->zpp_inner->vertices;
HXDLIN(1986)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList )) {
HXLINE(1986)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            		}
HXDLIN(1986)		 ::zpp_nape::util::ZNPList_ZPP_GeomVert MPs1 = ::zpp_nape::geom::ZPP_Simple_obj::decompose(MPs,::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList);
HXLINE(1987)		 ::nape::geom::GeomPolyList ret;
HXDLIN(1987)		if (hx::IsNull( output )) {
HXLINE(1987)			ret =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1987)			ret = output;
            		}
HXLINE(1988)		while(hx::IsNotNull( MPs1->head )){
HXLINE(1989)			 ::zpp_nape::geom::ZPP_GeomVert MP = MPs1->pop_unsafe();
HXLINE(1990)			 ::nape::geom::GeomPoly x = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(1991)			x->zpp_inner->vertices = MP;
HXLINE(1992)			if (ret->zpp_inner->reverse_flag) {
HXLINE(1992)				ret->push(x);
            			}
            			else {
HXLINE(1992)				ret->unshift(x);
            			}
            		}
HXLINE(1994)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,simpleDecomposition,return )

 ::nape::geom::GeomPolyList GeomPoly_obj::monotoneDecomposition( ::nape::geom::GeomPolyList output){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2019_monotoneDecomposition)
HXLINE(2022)		if (this->zpp_disp) {
HXLINE(2022)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2026)		bool _hx_tmp;
HXLINE(2027)		bool _hx_tmp1;
HXDLIN(2027)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(2027)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2027)			_hx_tmp1 = true;
            		}
HXLINE(2026)		if (!(_hx_tmp1)) {
HXLINE(2026)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2026)			_hx_tmp = true;
            		}
HXDLIN(2026)		if (_hx_tmp) {
HXLINE(2029)			HX_STACK_DO_THROW(HX_("Error: Cannot decompose a degenerate polygon",8d,10,53,f2));
            		}
HXLINE(2032)		 ::zpp_nape::geom::ZPP_GeomVert poly = this->zpp_inner->vertices;
HXDLIN(2032)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly )) {
HXLINE(2032)			::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly =  ::zpp_nape::geom::ZPP_PartitionedPoly_obj::__alloc( HX_CTX ,null());
            		}
HXDLIN(2032)		 ::zpp_nape::geom::ZPP_PartitionedPoly poly1 = ::zpp_nape::geom::ZPP_Monotone_obj::decompose(poly,::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly);
HXLINE(2033)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList )) {
HXLINE(2033)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            		}
HXDLIN(2033)		 ::zpp_nape::util::ZNPList_ZPP_GeomVert MPs = poly1->extract(::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList);
HXLINE(2034)		 ::nape::geom::GeomPolyList ret;
HXDLIN(2034)		if (hx::IsNull( output )) {
HXLINE(2034)			ret =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2034)			ret = output;
            		}
HXLINE(2035)		while(hx::IsNotNull( MPs->head )){
HXLINE(2036)			 ::zpp_nape::geom::ZPP_GeomVert MP = MPs->pop_unsafe();
HXLINE(2037)			 ::nape::geom::GeomPoly x = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(2038)			x->zpp_inner->vertices = MP;
HXLINE(2039)			if (ret->zpp_inner->reverse_flag) {
HXLINE(2039)				ret->push(x);
            			}
            			else {
HXLINE(2039)				ret->unshift(x);
            			}
            		}
HXLINE(2049)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,monotoneDecomposition,return )

 ::nape::geom::GeomPolyList GeomPoly_obj::convexDecomposition(hx::Null< bool >  __o_delaunay, ::nape::geom::GeomPolyList output){
            		bool delaunay = __o_delaunay.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2075_convexDecomposition)
HXLINE(2078)		if (this->zpp_disp) {
HXLINE(2078)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2082)		bool _hx_tmp;
HXLINE(2083)		bool _hx_tmp1;
HXDLIN(2083)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(2083)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2083)			_hx_tmp1 = true;
            		}
HXLINE(2082)		if (!(_hx_tmp1)) {
HXLINE(2082)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2082)			_hx_tmp = true;
            		}
HXDLIN(2082)		if (_hx_tmp) {
HXLINE(2085)			HX_STACK_DO_THROW(HX_("Error: Cannot decompose a degenerate polygon",8d,10,53,f2));
            		}
HXLINE(2088)		 ::zpp_nape::geom::ZPP_GeomVert poly = this->zpp_inner->vertices;
HXDLIN(2088)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly )) {
HXLINE(2088)			::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly =  ::zpp_nape::geom::ZPP_PartitionedPoly_obj::__alloc( HX_CTX ,null());
            		}
HXDLIN(2088)		 ::zpp_nape::geom::ZPP_PartitionedPoly poly1 = ::zpp_nape::geom::ZPP_Monotone_obj::decompose(poly,::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly);
HXLINE(2089)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList )) {
HXLINE(2089)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList =  ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
HXDLIN(2089)		 ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly MPs = poly1->extract_partitions(::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList);
HXLINE(2090)		 ::nape::geom::GeomPolyList ret;
HXDLIN(2090)		if (hx::IsNull( output )) {
HXLINE(2090)			ret =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2090)			ret = output;
            		}
HXLINE(2091)		while(hx::IsNotNull( MPs->head )){
HXLINE(2092)			 ::zpp_nape::geom::ZPP_PartitionedPoly MP = MPs->pop_unsafe();
HXLINE(2093)			::zpp_nape::geom::ZPP_Triangular_obj::triangulate(MP);
HXLINE(2094)			if (delaunay) {
HXLINE(2095)				::zpp_nape::geom::ZPP_Triangular_obj::optimise(MP);
            			}
HXLINE(2097)			::zpp_nape::geom::ZPP_Convex_obj::optimise(MP);
HXLINE(2098)			if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList )) {
HXLINE(2098)				::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            			}
HXDLIN(2098)			 ::zpp_nape::util::ZNPList_ZPP_GeomVert MQs = MP->extract(::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList);
HXLINE(2099)			{
HXLINE(2100)				 ::zpp_nape::geom::ZPP_PartitionedPoly o = MP;
HXLINE(2110)				o->next = ::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(2111)				::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool = o;
            			}
HXLINE(2116)			while(hx::IsNotNull( MQs->head )){
HXLINE(2117)				 ::zpp_nape::geom::ZPP_GeomVert MQ = MQs->pop_unsafe();
HXLINE(2118)				 ::nape::geom::GeomPoly x = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(2119)				x->zpp_inner->vertices = MQ;
HXLINE(2120)				if (ret->zpp_inner->reverse_flag) {
HXLINE(2120)					ret->push(x);
            				}
            				else {
HXLINE(2120)					ret->unshift(x);
            				}
            			}
            		}
HXLINE(2131)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GeomPoly_obj,convexDecomposition,return )

 ::nape::geom::GeomPolyList GeomPoly_obj::triangularDecomposition(hx::Null< bool >  __o_delaunay, ::nape::geom::GeomPolyList output){
            		bool delaunay = __o_delaunay.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2154_triangularDecomposition)
HXLINE(2157)		if (this->zpp_disp) {
HXLINE(2157)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2161)		bool _hx_tmp;
HXLINE(2162)		bool _hx_tmp1;
HXDLIN(2162)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(2162)			_hx_tmp1 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2162)			_hx_tmp1 = true;
            		}
HXLINE(2161)		if (!(_hx_tmp1)) {
HXLINE(2161)			_hx_tmp = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2161)			_hx_tmp = true;
            		}
HXDLIN(2161)		if (_hx_tmp) {
HXLINE(2164)			HX_STACK_DO_THROW(HX_("Error: Cannot decompose a degenerate polygon",8d,10,53,f2));
            		}
HXLINE(2167)		 ::zpp_nape::geom::ZPP_GeomVert poly = this->zpp_inner->vertices;
HXDLIN(2167)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly )) {
HXLINE(2167)			::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly =  ::zpp_nape::geom::ZPP_PartitionedPoly_obj::__alloc( HX_CTX ,null());
            		}
HXDLIN(2167)		 ::zpp_nape::geom::ZPP_PartitionedPoly poly1 = ::zpp_nape::geom::ZPP_Monotone_obj::decompose(poly,::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly);
HXLINE(2168)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList )) {
HXLINE(2168)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList =  ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
HXDLIN(2168)		 ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly MPs = poly1->extract_partitions(::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList);
HXLINE(2169)		 ::nape::geom::GeomPolyList ret;
HXDLIN(2169)		if (hx::IsNull( output )) {
HXLINE(2169)			ret =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2169)			ret = output;
            		}
HXLINE(2170)		while(hx::IsNotNull( MPs->head )){
HXLINE(2171)			 ::zpp_nape::geom::ZPP_PartitionedPoly MP = MPs->pop_unsafe();
HXLINE(2172)			::zpp_nape::geom::ZPP_Triangular_obj::triangulate(MP);
HXLINE(2173)			if (delaunay) {
HXLINE(2174)				::zpp_nape::geom::ZPP_Triangular_obj::optimise(MP);
            			}
HXLINE(2176)			if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList )) {
HXLINE(2176)				::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            			}
HXDLIN(2176)			 ::zpp_nape::util::ZNPList_ZPP_GeomVert MQs = MP->extract(::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList);
HXLINE(2177)			{
HXLINE(2178)				 ::zpp_nape::geom::ZPP_PartitionedPoly o = MP;
HXLINE(2188)				o->next = ::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(2189)				::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool = o;
            			}
HXLINE(2194)			while(hx::IsNotNull( MQs->head )){
HXLINE(2195)				 ::zpp_nape::geom::ZPP_GeomVert MQ = MQs->pop_unsafe();
HXLINE(2196)				 ::nape::geom::GeomPoly x = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(2197)				x->zpp_inner->vertices = MQ;
HXLINE(2198)				if (ret->zpp_inner->reverse_flag) {
HXLINE(2198)					ret->push(x);
            				}
            				else {
HXLINE(2198)					ret->unshift(x);
            				}
            			}
            		}
HXLINE(2209)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GeomPoly_obj,triangularDecomposition,return )

 ::nape::geom::GeomPoly GeomPoly_obj::inflate(Float inflation){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2227_inflate)
HXLINE(2230)		if (this->zpp_disp) {
HXLINE(2230)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2233)		 ::nape::geom::GeomPoly ret = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(2234)		 ::nape::geom::Winding _hx_tmp = this->winding();
HXDLIN(2234)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXLINE(2234)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(2234)			::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN(2234)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(2234)		if (hx::IsEq( _hx_tmp,::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXLINE(2234)			inflation = -(inflation);
            		}
HXLINE(2235)		{
HXLINE(2236)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(2237)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2238)			if (hx::IsNotNull( F )) {
HXLINE(2239)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2240)				while(true){
HXLINE(2241)					 ::zpp_nape::geom::ZPP_GeomVert p = nite;
HXLINE(2243)					{
HXLINE(2244)						 ::zpp_nape::geom::ZPP_GeomVert prev = p->prev;
HXLINE(2245)						 ::zpp_nape::geom::ZPP_GeomVert next = p->next;
HXLINE(2246)						Float ax = ((Float)0.0);
HXLINE(2247)						Float ay = ((Float)0.0);
HXLINE(2248)						Float bx = ((Float)0.0);
HXLINE(2249)						Float by = ((Float)0.0);
HXLINE(2250)						{
HXLINE(2251)							ax = (p->x - prev->x);
HXLINE(2252)							ay = (p->y - prev->y);
            						}
HXLINE(2254)						{
HXLINE(2255)							bx = (next->x - p->x);
HXLINE(2256)							by = (next->y - p->y);
            						}
HXLINE(2258)						Float apx = ((Float)0.0);
HXLINE(2259)						Float apy = ((Float)0.0);
HXLINE(2260)						Float bpx = ((Float)0.0);
HXLINE(2261)						Float bpy = ((Float)0.0);
HXLINE(2262)						{
HXLINE(2263)							apx = ax;
HXLINE(2264)							apy = ay;
            						}
HXLINE(2282)						{
HXLINE(2283)							{
HXLINE(2284)								Float d = ((apx * apx) + (apy * apy));
HXLINE(2293)								Float imag = (((Float)1.0) / ::Math_obj::sqrt(d));
HXLINE(2294)								{
HXLINE(2295)									Float t = imag;
HXLINE(2304)									apx = (apx * t);
HXLINE(2305)									apy = (apy * t);
            								}
            							}
HXLINE(2308)							{
HXLINE(2309)								Float t1 = apx;
HXLINE(2310)								apx = -(apy);
HXLINE(2311)								apy = t1;
            							}
            						}
HXLINE(2314)						{
HXLINE(2315)							Float t2 = inflation;
HXLINE(2324)							apx = (apx * t2);
HXLINE(2325)							apy = (apy * t2);
            						}
HXLINE(2327)						{
HXLINE(2328)							bpx = bx;
HXLINE(2329)							bpy = by;
            						}
HXLINE(2347)						{
HXLINE(2348)							{
HXLINE(2349)								Float d1 = ((bpx * bpx) + (bpy * bpy));
HXLINE(2358)								Float imag1 = (((Float)1.0) / ::Math_obj::sqrt(d1));
HXLINE(2359)								{
HXLINE(2360)									Float t3 = imag1;
HXLINE(2369)									bpx = (bpx * t3);
HXLINE(2370)									bpy = (bpy * t3);
            								}
            							}
HXLINE(2373)							{
HXLINE(2374)								Float t4 = bpx;
HXLINE(2375)								bpx = -(bpy);
HXLINE(2376)								bpy = t4;
            							}
            						}
HXLINE(2379)						{
HXLINE(2380)							Float t5 = inflation;
HXLINE(2389)							bpx = (bpx * t5);
HXLINE(2390)							bpy = (bpy * t5);
            						}
HXLINE(2392)						Float bapx = ((Float)0.0);
HXLINE(2393)						Float bapy = ((Float)0.0);
HXLINE(2394)						{
HXLINE(2395)							bapx = (bpx - apx);
HXLINE(2396)							bapy = (bpy - apy);
            						}
HXLINE(2398)						Float num = ((by * bapx) - (bx * bapy));
HXLINE(2399)						Float t6;
HXDLIN(2399)						if ((num == 0)) {
HXLINE(2399)							t6 = ( (Float)(0) );
            						}
            						else {
HXLINE(2399)							t6 = (num / ((by * ax) - (bx * ay)));
            						}
HXLINE(2400)						Float px = ((Float)0.0);
HXLINE(2401)						Float py = ((Float)0.0);
HXLINE(2402)						{
HXLINE(2403)							px = (p->x + apx);
HXLINE(2404)							py = (p->y + apy);
            						}
HXLINE(2406)						{
HXLINE(2407)							Float t7 = t6;
HXLINE(2416)							px = (px + (ax * t7));
HXLINE(2417)							py = (py + (ay * t7));
            						}
HXLINE(2419)						bool _hx_tmp1;
HXDLIN(2419)						if ((px == px)) {
HXLINE(2419)							_hx_tmp1 = (py != py);
            						}
            						else {
HXLINE(2419)							_hx_tmp1 = true;
            						}
HXDLIN(2419)						if (_hx_tmp1) {
HXLINE(2419)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN(2419)						 ::nape::geom::Vec2 ret1;
HXDLIN(2419)						if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2419)							ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            						}
            						else {
HXLINE(2419)							ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2419)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN(2419)							ret1->zpp_pool = null();
HXDLIN(2419)							ret1->zpp_disp = false;
HXDLIN(2419)							if (hx::IsEq( ret1,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2419)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            							}
            						}
HXDLIN(2419)						if (hx::IsNull( ret1->zpp_inner )) {
HXLINE(2419)							 ::zpp_nape::geom::ZPP_Vec2 ret2;
HXDLIN(2419)							{
HXLINE(2419)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2419)									ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(2419)									ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2419)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN(2419)									ret2->next = null();
            								}
HXDLIN(2419)								ret2->weak = false;
            							}
HXDLIN(2419)							ret2->_immutable = false;
HXDLIN(2419)							{
HXLINE(2419)								ret2->x = px;
HXDLIN(2419)								ret2->y = py;
            							}
HXDLIN(2419)							ret1->zpp_inner = ret2;
HXDLIN(2419)							ret1->zpp_inner->outer = ret1;
            						}
            						else {
HXLINE(2419)							bool _hx_tmp2;
HXDLIN(2419)							if (hx::IsNotNull( ret1 )) {
HXLINE(2419)								_hx_tmp2 = ret1->zpp_disp;
            							}
            							else {
HXLINE(2419)								_hx_tmp2 = false;
            							}
HXDLIN(2419)							if (_hx_tmp2) {
HXLINE(2419)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(2419)							{
HXLINE(2419)								 ::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;
HXDLIN(2419)								if (_this->_immutable) {
HXLINE(2419)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(2419)								if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(2419)									_this->_isimmutable();
            								}
            							}
HXDLIN(2419)							bool _hx_tmp3;
HXDLIN(2419)							if ((px == px)) {
HXLINE(2419)								_hx_tmp3 = (py != py);
            							}
            							else {
HXLINE(2419)								_hx_tmp3 = true;
            							}
HXDLIN(2419)							if (_hx_tmp3) {
HXLINE(2419)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN(2419)							bool _hx_tmp4;
HXDLIN(2419)							bool _hx_tmp5;
HXDLIN(2419)							if (hx::IsNotNull( ret1 )) {
HXLINE(2419)								_hx_tmp5 = ret1->zpp_disp;
            							}
            							else {
HXLINE(2419)								_hx_tmp5 = false;
            							}
HXDLIN(2419)							if (_hx_tmp5) {
HXLINE(2419)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(2419)							{
HXLINE(2419)								 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret1->zpp_inner;
HXDLIN(2419)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2419)									_this1->_validate();
            								}
            							}
HXDLIN(2419)							if ((ret1->zpp_inner->x == px)) {
HXLINE(2419)								bool _hx_tmp6;
HXDLIN(2419)								if (hx::IsNotNull( ret1 )) {
HXLINE(2419)									_hx_tmp6 = ret1->zpp_disp;
            								}
            								else {
HXLINE(2419)									_hx_tmp6 = false;
            								}
HXDLIN(2419)								if (_hx_tmp6) {
HXLINE(2419)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(2419)								{
HXLINE(2419)									 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret1->zpp_inner;
HXDLIN(2419)									if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2419)										_this2->_validate();
            									}
            								}
HXDLIN(2419)								_hx_tmp4 = (ret1->zpp_inner->y == py);
            							}
            							else {
HXLINE(2419)								_hx_tmp4 = false;
            							}
HXDLIN(2419)							if (!(_hx_tmp4)) {
HXLINE(2419)								{
HXLINE(2419)									ret1->zpp_inner->x = px;
HXDLIN(2419)									ret1->zpp_inner->y = py;
            								}
HXDLIN(2419)								{
HXLINE(2419)									 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret1->zpp_inner;
HXDLIN(2419)									if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(2419)										_this3->_invalidate(_this3);
            									}
            								}
            							}
            						}
HXDLIN(2419)						ret1->zpp_inner->weak = false;
HXDLIN(2419)						ret->push(ret1);
            					}
HXLINE(2422)					nite = nite->next;
HXLINE(2240)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2240)						goto _hx_goto_53;
            					}
            				}
            				_hx_goto_53:;
            			}
            		}
HXLINE(2427)		return ret->skipForward(1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,inflate,return )

 ::nape::geom::GeomPolyList GeomPoly_obj::cut( ::nape::geom::Vec2 start, ::nape::geom::Vec2 end,hx::Null< bool >  __o_boundedStart,hx::Null< bool >  __o_boundedEnd, ::nape::geom::GeomPolyList output){
            		bool boundedStart = __o_boundedStart.Default(false);
            		bool boundedEnd = __o_boundedEnd.Default(false);
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2460_cut)
HXLINE(2463)		if (this->zpp_disp) {
HXLINE(2463)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2467)		if (this->zpp_disp) {
HXLINE(2467)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2467)		bool _hx_tmp;
HXDLIN(2467)		bool _hx_tmp1;
HXDLIN(2467)		bool _hx_tmp2;
HXDLIN(2467)		if (hx::IsNotNull( this->zpp_inner->vertices )) {
HXLINE(2467)			_hx_tmp2 = hx::IsNull( this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2467)			_hx_tmp2 = true;
            		}
HXDLIN(2467)		if (!(_hx_tmp2)) {
HXLINE(2467)			_hx_tmp1 = hx::IsEq( this->zpp_inner->vertices->prev,this->zpp_inner->vertices->next );
            		}
            		else {
HXLINE(2467)			_hx_tmp1 = true;
            		}
HXDLIN(2467)		if (_hx_tmp1) {
HXLINE(2467)			_hx_tmp = true;
            		}
            		else {
HXLINE(2467)			_hx_tmp = ::zpp_nape::geom::ZPP_Simple_obj::isSimple(this->zpp_inner->vertices);
            		}
HXDLIN(2467)		if (!(_hx_tmp)) {
HXLINE(2468)			HX_STACK_DO_THROW(HX_("Error: Cut requires a truly simple polygon",ed,75,98,d4));
            		}
HXLINE(2470)		bool _hx_tmp3;
HXDLIN(2470)		if (hx::IsNotNull( start )) {
HXLINE(2470)			_hx_tmp3 = hx::IsNull( end );
            		}
            		else {
HXLINE(2470)			_hx_tmp3 = true;
            		}
HXDLIN(2470)		if (_hx_tmp3) {
HXLINE(2471)			HX_STACK_DO_THROW(HX_("Error: Cannot cut with null start/end's",8e,58,ef,e8));
            		}
HXLINE(2476)		bool _hx_tmp4;
HXDLIN(2476)		if (hx::IsNotNull( start )) {
HXLINE(2476)			_hx_tmp4 = start->zpp_disp;
            		}
            		else {
HXLINE(2476)			_hx_tmp4 = false;
            		}
HXDLIN(2476)		if (_hx_tmp4) {
HXLINE(2476)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2481)		bool _hx_tmp5;
HXDLIN(2481)		if (hx::IsNotNull( end )) {
HXLINE(2481)			_hx_tmp5 = end->zpp_disp;
            		}
            		else {
HXLINE(2481)			_hx_tmp5 = false;
            		}
HXDLIN(2481)		if (_hx_tmp5) {
HXLINE(2481)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2484)		 ::nape::geom::GeomPolyList ret = ::zpp_nape::geom::ZPP_Cutter_obj::run(this->zpp_inner->vertices,start,end,boundedStart,boundedEnd,output);
HXLINE(2485)		if (start->zpp_inner->weak) {
HXLINE(2489)			bool _hx_tmp6;
HXDLIN(2489)			if (hx::IsNotNull( start )) {
HXLINE(2489)				_hx_tmp6 = start->zpp_disp;
            			}
            			else {
HXLINE(2489)				_hx_tmp6 = false;
            			}
HXDLIN(2489)			if (_hx_tmp6) {
HXLINE(2489)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(2489)			{
HXLINE(2489)				 ::zpp_nape::geom::ZPP_Vec2 _this = start->zpp_inner;
HXDLIN(2489)				if (_this->_immutable) {
HXLINE(2489)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(2489)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(2489)					_this->_isimmutable();
            				}
            			}
HXDLIN(2489)			if (start->zpp_inner->_inuse) {
HXLINE(2489)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(2489)			 ::zpp_nape::geom::ZPP_Vec2 inner = start->zpp_inner;
HXDLIN(2489)			start->zpp_inner->outer = null();
HXDLIN(2489)			start->zpp_inner = null();
HXDLIN(2489)			{
HXLINE(2489)				 ::nape::geom::Vec2 o = start;
HXDLIN(2489)				o->zpp_pool = null();
HXDLIN(2489)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2489)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE(2489)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN(2489)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(2489)				o->zpp_disp = true;
            			}
HXDLIN(2489)			{
HXLINE(2489)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(2489)				{
HXLINE(2489)					if (hx::IsNotNull( o1->outer )) {
HXLINE(2489)						o1->outer->zpp_inner = null();
HXDLIN(2489)						o1->outer = null();
            					}
HXDLIN(2489)					o1->_isimmutable = null();
HXDLIN(2489)					o1->_validate = null();
HXDLIN(2489)					o1->_invalidate = null();
            				}
HXDLIN(2489)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2489)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE(2496)		if (end->zpp_inner->weak) {
HXLINE(2500)			bool _hx_tmp7;
HXDLIN(2500)			if (hx::IsNotNull( end )) {
HXLINE(2500)				_hx_tmp7 = end->zpp_disp;
            			}
            			else {
HXLINE(2500)				_hx_tmp7 = false;
            			}
HXDLIN(2500)			if (_hx_tmp7) {
HXLINE(2500)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(2500)			{
HXLINE(2500)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = end->zpp_inner;
HXDLIN(2500)				if (_this1->_immutable) {
HXLINE(2500)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(2500)				if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE(2500)					_this1->_isimmutable();
            				}
            			}
HXDLIN(2500)			if (end->zpp_inner->_inuse) {
HXLINE(2500)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN(2500)			 ::zpp_nape::geom::ZPP_Vec2 inner1 = end->zpp_inner;
HXDLIN(2500)			end->zpp_inner->outer = null();
HXDLIN(2500)			end->zpp_inner = null();
HXDLIN(2500)			{
HXLINE(2500)				 ::nape::geom::Vec2 o2 = end;
HXDLIN(2500)				o2->zpp_pool = null();
HXDLIN(2500)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2500)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            				}
            				else {
HXLINE(2500)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            				}
HXDLIN(2500)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN(2500)				o2->zpp_disp = true;
            			}
HXDLIN(2500)			{
HXLINE(2500)				 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN(2500)				{
HXLINE(2500)					if (hx::IsNotNull( o3->outer )) {
HXLINE(2500)						o3->outer->zpp_inner = null();
HXDLIN(2500)						o3->outer = null();
            					}
HXDLIN(2500)					o3->_isimmutable = null();
HXDLIN(2500)					o3->_validate = null();
HXDLIN(2500)					o3->_invalidate = null();
            				}
HXDLIN(2500)				o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2500)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            			}
            		}
HXLINE(2507)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC5(GeomPoly_obj,cut,return )

 ::nape::geom::GeomPoly GeomPoly_obj::transform( ::nape::geom::Mat23 matrix){
            	HX_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2521_transform)
HXLINE(2524)		if (this->zpp_disp) {
HXLINE(2524)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2528)		if (hx::IsNull( matrix )) {
HXLINE(2529)			HX_STACK_DO_THROW(HX_("Error: Cannot transform by null matrix",34,a1,93,ba));
            		}
HXLINE(2532)		{
HXLINE(2533)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(2534)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2535)			if (hx::IsNotNull( F )) {
HXLINE(2536)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2537)				while(true){
HXLINE(2538)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(2541)					{
HXLINE(2542)						Float t = (((matrix->zpp_inner->a * v->x) + (matrix->zpp_inner->b * v->y)) + matrix->zpp_inner->tx);
HXLINE(2543)						v->y = (((matrix->zpp_inner->c * v->x) + (matrix->zpp_inner->d * v->y)) + matrix->zpp_inner->ty);
HXLINE(2544)						v->x = t;
            					}
HXLINE(2548)					nite = nite->next;
HXLINE(2537)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2537)						goto _hx_goto_56;
            					}
            				}
            				_hx_goto_56:;
            			}
            		}
HXLINE(2553)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,transform,return )

 ::nape::geom::AABB GeomPoly_obj::bounds(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2562_bounds)
HXLINE(2565)		if (this->zpp_disp) {
HXLINE(2565)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2569)		if (this->zpp_disp) {
HXLINE(2569)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2569)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(2570)			HX_STACK_DO_THROW(HX_("Error: empty GeomPoly has no defineable bounds",be,37,f0,63));
            		}
HXLINE(2573)		Float minx = ((Float)1e100);
HXLINE(2574)		Float miny = ((Float)1e100);
HXLINE(2591)		Float maxx = ((Float)-1e+100);
HXLINE(2592)		Float maxy = ((Float)-1e+100);
HXLINE(2609)		{
HXLINE(2610)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices;
HXLINE(2611)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2612)			if (hx::IsNotNull( F )) {
HXLINE(2613)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2614)				while(true){
HXLINE(2615)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(2617)					{
HXLINE(2618)						if ((v->x < minx)) {
HXLINE(2618)							minx = v->x;
            						}
HXLINE(2619)						if ((v->y < miny)) {
HXLINE(2619)							miny = v->y;
            						}
HXLINE(2620)						if ((v->x > maxx)) {
HXLINE(2620)							maxx = v->x;
            						}
HXLINE(2621)						if ((v->y > maxy)) {
HXLINE(2621)							maxy = v->y;
            						}
            					}
HXLINE(2624)					nite = nite->next;
HXLINE(2614)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2614)						goto _hx_goto_58;
            					}
            				}
            				_hx_goto_58:;
            			}
            		}
HXLINE(2629)		return  ::nape::geom::AABB_obj::__alloc( HX_CTX ,minx,miny,(maxx - minx),(maxy - miny));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,bounds,return )

 ::nape::geom::Vec2 GeomPoly_obj::top(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2644_top)
HXLINE(2647)		if (this->zpp_disp) {
HXLINE(2647)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2651)		if (this->zpp_disp) {
HXLINE(2651)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2651)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(2652)			HX_STACK_DO_THROW(HX_("Error: empty GeomPoly has no defineable topmost vertex",35,03,45,29));
            		}
HXLINE(2655)		 ::zpp_nape::geom::ZPP_GeomVert min = this->zpp_inner->vertices;
HXLINE(2656)		{
HXLINE(2657)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices->next;
HXLINE(2658)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2659)			if (hx::IsNotNull( F )) {
HXLINE(2660)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2661)				while(true){
HXLINE(2662)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(2664)					if ((v->y < min->y)) {
HXLINE(2664)						min = v;
            					}
HXLINE(2666)					nite = nite->next;
HXLINE(2661)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2661)						goto _hx_goto_60;
            					}
            				}
            				_hx_goto_60:;
            			}
            		}
HXLINE(2671)		if (hx::IsNull( min->wrap )) {
HXLINE(2671)			Float x = min->x;
HXDLIN(2671)			Float y = min->y;
HXDLIN(2671)			bool _hx_tmp;
HXDLIN(2671)			if ((x == x)) {
HXLINE(2671)				_hx_tmp = (y != y);
            			}
            			else {
HXLINE(2671)				_hx_tmp = true;
            			}
HXDLIN(2671)			if (_hx_tmp) {
HXLINE(2671)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(2671)			 ::nape::geom::Vec2 ret;
HXDLIN(2671)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2671)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(2671)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2671)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(2671)				ret->zpp_pool = null();
HXDLIN(2671)				ret->zpp_disp = false;
HXDLIN(2671)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2671)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(2671)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(2671)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(2671)				{
HXLINE(2671)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2671)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2671)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2671)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(2671)						ret1->next = null();
            					}
HXDLIN(2671)					ret1->weak = false;
            				}
HXDLIN(2671)				ret1->_immutable = false;
HXDLIN(2671)				{
HXLINE(2671)					ret1->x = x;
HXDLIN(2671)					ret1->y = y;
            				}
HXDLIN(2671)				ret->zpp_inner = ret1;
HXDLIN(2671)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(2671)				bool _hx_tmp1;
HXDLIN(2671)				if (hx::IsNotNull( ret )) {
HXLINE(2671)					_hx_tmp1 = ret->zpp_disp;
            				}
            				else {
HXLINE(2671)					_hx_tmp1 = false;
            				}
HXDLIN(2671)				if (_hx_tmp1) {
HXLINE(2671)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2671)				{
HXLINE(2671)					 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(2671)					if (_this->_immutable) {
HXLINE(2671)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(2671)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(2671)						_this->_isimmutable();
            					}
            				}
HXDLIN(2671)				bool _hx_tmp2;
HXDLIN(2671)				if ((x == x)) {
HXLINE(2671)					_hx_tmp2 = (y != y);
            				}
            				else {
HXLINE(2671)					_hx_tmp2 = true;
            				}
HXDLIN(2671)				if (_hx_tmp2) {
HXLINE(2671)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(2671)				bool _hx_tmp3;
HXDLIN(2671)				bool _hx_tmp4;
HXDLIN(2671)				if (hx::IsNotNull( ret )) {
HXLINE(2671)					_hx_tmp4 = ret->zpp_disp;
            				}
            				else {
HXLINE(2671)					_hx_tmp4 = false;
            				}
HXDLIN(2671)				if (_hx_tmp4) {
HXLINE(2671)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2671)				{
HXLINE(2671)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(2671)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2671)						_this1->_validate();
            					}
            				}
HXDLIN(2671)				if ((ret->zpp_inner->x == x)) {
HXLINE(2671)					bool _hx_tmp5;
HXDLIN(2671)					if (hx::IsNotNull( ret )) {
HXLINE(2671)						_hx_tmp5 = ret->zpp_disp;
            					}
            					else {
HXLINE(2671)						_hx_tmp5 = false;
            					}
HXDLIN(2671)					if (_hx_tmp5) {
HXLINE(2671)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(2671)					{
HXLINE(2671)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(2671)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2671)							_this2->_validate();
            						}
            					}
HXDLIN(2671)					_hx_tmp3 = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE(2671)					_hx_tmp3 = false;
            				}
HXDLIN(2671)				if (!(_hx_tmp3)) {
HXLINE(2671)					{
HXLINE(2671)						ret->zpp_inner->x = x;
HXDLIN(2671)						ret->zpp_inner->y = y;
            					}
HXDLIN(2671)					{
HXLINE(2671)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(2671)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(2671)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN(2671)			ret->zpp_inner->weak = false;
HXDLIN(2671)			min->wrap = ret;
HXDLIN(2671)			min->wrap->zpp_inner->_inuse = true;
HXDLIN(2671)			min->wrap->zpp_inner->_invalidate = min->modwrap_dyn();
HXDLIN(2671)			min->wrap->zpp_inner->_validate = min->getwrap_dyn();
            		}
HXDLIN(2671)		return min->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,top,return )

 ::nape::geom::Vec2 GeomPoly_obj::bottom(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2686_bottom)
HXLINE(2689)		if (this->zpp_disp) {
HXLINE(2689)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2693)		if (this->zpp_disp) {
HXLINE(2693)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2693)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(2694)			HX_STACK_DO_THROW(HX_("Error: empty GeomPoly has no defineable bottommost vertex",ad,e5,cf,5e));
            		}
HXLINE(2697)		 ::zpp_nape::geom::ZPP_GeomVert max = this->zpp_inner->vertices;
HXLINE(2698)		{
HXLINE(2699)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices->next;
HXLINE(2700)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2701)			if (hx::IsNotNull( F )) {
HXLINE(2702)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2703)				while(true){
HXLINE(2704)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(2706)					if ((v->y > max->y)) {
HXLINE(2706)						max = v;
            					}
HXLINE(2708)					nite = nite->next;
HXLINE(2703)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2703)						goto _hx_goto_62;
            					}
            				}
            				_hx_goto_62:;
            			}
            		}
HXLINE(2713)		if (hx::IsNull( max->wrap )) {
HXLINE(2713)			Float x = max->x;
HXDLIN(2713)			Float y = max->y;
HXDLIN(2713)			bool _hx_tmp;
HXDLIN(2713)			if ((x == x)) {
HXLINE(2713)				_hx_tmp = (y != y);
            			}
            			else {
HXLINE(2713)				_hx_tmp = true;
            			}
HXDLIN(2713)			if (_hx_tmp) {
HXLINE(2713)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(2713)			 ::nape::geom::Vec2 ret;
HXDLIN(2713)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2713)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(2713)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2713)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(2713)				ret->zpp_pool = null();
HXDLIN(2713)				ret->zpp_disp = false;
HXDLIN(2713)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2713)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(2713)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(2713)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(2713)				{
HXLINE(2713)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2713)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2713)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2713)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(2713)						ret1->next = null();
            					}
HXDLIN(2713)					ret1->weak = false;
            				}
HXDLIN(2713)				ret1->_immutable = false;
HXDLIN(2713)				{
HXLINE(2713)					ret1->x = x;
HXDLIN(2713)					ret1->y = y;
            				}
HXDLIN(2713)				ret->zpp_inner = ret1;
HXDLIN(2713)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(2713)				bool _hx_tmp1;
HXDLIN(2713)				if (hx::IsNotNull( ret )) {
HXLINE(2713)					_hx_tmp1 = ret->zpp_disp;
            				}
            				else {
HXLINE(2713)					_hx_tmp1 = false;
            				}
HXDLIN(2713)				if (_hx_tmp1) {
HXLINE(2713)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2713)				{
HXLINE(2713)					 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(2713)					if (_this->_immutable) {
HXLINE(2713)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(2713)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(2713)						_this->_isimmutable();
            					}
            				}
HXDLIN(2713)				bool _hx_tmp2;
HXDLIN(2713)				if ((x == x)) {
HXLINE(2713)					_hx_tmp2 = (y != y);
            				}
            				else {
HXLINE(2713)					_hx_tmp2 = true;
            				}
HXDLIN(2713)				if (_hx_tmp2) {
HXLINE(2713)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(2713)				bool _hx_tmp3;
HXDLIN(2713)				bool _hx_tmp4;
HXDLIN(2713)				if (hx::IsNotNull( ret )) {
HXLINE(2713)					_hx_tmp4 = ret->zpp_disp;
            				}
            				else {
HXLINE(2713)					_hx_tmp4 = false;
            				}
HXDLIN(2713)				if (_hx_tmp4) {
HXLINE(2713)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2713)				{
HXLINE(2713)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(2713)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2713)						_this1->_validate();
            					}
            				}
HXDLIN(2713)				if ((ret->zpp_inner->x == x)) {
HXLINE(2713)					bool _hx_tmp5;
HXDLIN(2713)					if (hx::IsNotNull( ret )) {
HXLINE(2713)						_hx_tmp5 = ret->zpp_disp;
            					}
            					else {
HXLINE(2713)						_hx_tmp5 = false;
            					}
HXDLIN(2713)					if (_hx_tmp5) {
HXLINE(2713)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(2713)					{
HXLINE(2713)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(2713)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2713)							_this2->_validate();
            						}
            					}
HXDLIN(2713)					_hx_tmp3 = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE(2713)					_hx_tmp3 = false;
            				}
HXDLIN(2713)				if (!(_hx_tmp3)) {
HXLINE(2713)					{
HXLINE(2713)						ret->zpp_inner->x = x;
HXDLIN(2713)						ret->zpp_inner->y = y;
            					}
HXDLIN(2713)					{
HXLINE(2713)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(2713)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(2713)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN(2713)			ret->zpp_inner->weak = false;
HXDLIN(2713)			max->wrap = ret;
HXDLIN(2713)			max->wrap->zpp_inner->_inuse = true;
HXDLIN(2713)			max->wrap->zpp_inner->_invalidate = max->modwrap_dyn();
HXDLIN(2713)			max->wrap->zpp_inner->_validate = max->getwrap_dyn();
            		}
HXDLIN(2713)		return max->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,bottom,return )

 ::nape::geom::Vec2 GeomPoly_obj::left(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2728_left)
HXLINE(2731)		if (this->zpp_disp) {
HXLINE(2731)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2735)		if (this->zpp_disp) {
HXLINE(2735)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2735)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(2736)			HX_STACK_DO_THROW(HX_("Error: empty GeomPoly has no defineable leftmost vertex",51,8e,46,08));
            		}
HXLINE(2739)		 ::zpp_nape::geom::ZPP_GeomVert min = this->zpp_inner->vertices;
HXLINE(2740)		{
HXLINE(2741)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices->next;
HXLINE(2742)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2743)			if (hx::IsNotNull( F )) {
HXLINE(2744)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2745)				while(true){
HXLINE(2746)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(2748)					if ((v->x < min->x)) {
HXLINE(2748)						min = v;
            					}
HXLINE(2750)					nite = nite->next;
HXLINE(2745)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2745)						goto _hx_goto_64;
            					}
            				}
            				_hx_goto_64:;
            			}
            		}
HXLINE(2755)		if (hx::IsNull( min->wrap )) {
HXLINE(2755)			Float x = min->x;
HXDLIN(2755)			Float y = min->y;
HXDLIN(2755)			bool _hx_tmp;
HXDLIN(2755)			if ((x == x)) {
HXLINE(2755)				_hx_tmp = (y != y);
            			}
            			else {
HXLINE(2755)				_hx_tmp = true;
            			}
HXDLIN(2755)			if (_hx_tmp) {
HXLINE(2755)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(2755)			 ::nape::geom::Vec2 ret;
HXDLIN(2755)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2755)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(2755)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2755)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(2755)				ret->zpp_pool = null();
HXDLIN(2755)				ret->zpp_disp = false;
HXDLIN(2755)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2755)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(2755)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(2755)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(2755)				{
HXLINE(2755)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2755)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2755)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2755)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(2755)						ret1->next = null();
            					}
HXDLIN(2755)					ret1->weak = false;
            				}
HXDLIN(2755)				ret1->_immutable = false;
HXDLIN(2755)				{
HXLINE(2755)					ret1->x = x;
HXDLIN(2755)					ret1->y = y;
            				}
HXDLIN(2755)				ret->zpp_inner = ret1;
HXDLIN(2755)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(2755)				bool _hx_tmp1;
HXDLIN(2755)				if (hx::IsNotNull( ret )) {
HXLINE(2755)					_hx_tmp1 = ret->zpp_disp;
            				}
            				else {
HXLINE(2755)					_hx_tmp1 = false;
            				}
HXDLIN(2755)				if (_hx_tmp1) {
HXLINE(2755)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2755)				{
HXLINE(2755)					 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(2755)					if (_this->_immutable) {
HXLINE(2755)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(2755)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(2755)						_this->_isimmutable();
            					}
            				}
HXDLIN(2755)				bool _hx_tmp2;
HXDLIN(2755)				if ((x == x)) {
HXLINE(2755)					_hx_tmp2 = (y != y);
            				}
            				else {
HXLINE(2755)					_hx_tmp2 = true;
            				}
HXDLIN(2755)				if (_hx_tmp2) {
HXLINE(2755)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(2755)				bool _hx_tmp3;
HXDLIN(2755)				bool _hx_tmp4;
HXDLIN(2755)				if (hx::IsNotNull( ret )) {
HXLINE(2755)					_hx_tmp4 = ret->zpp_disp;
            				}
            				else {
HXLINE(2755)					_hx_tmp4 = false;
            				}
HXDLIN(2755)				if (_hx_tmp4) {
HXLINE(2755)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2755)				{
HXLINE(2755)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(2755)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2755)						_this1->_validate();
            					}
            				}
HXDLIN(2755)				if ((ret->zpp_inner->x == x)) {
HXLINE(2755)					bool _hx_tmp5;
HXDLIN(2755)					if (hx::IsNotNull( ret )) {
HXLINE(2755)						_hx_tmp5 = ret->zpp_disp;
            					}
            					else {
HXLINE(2755)						_hx_tmp5 = false;
            					}
HXDLIN(2755)					if (_hx_tmp5) {
HXLINE(2755)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(2755)					{
HXLINE(2755)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(2755)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2755)							_this2->_validate();
            						}
            					}
HXDLIN(2755)					_hx_tmp3 = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE(2755)					_hx_tmp3 = false;
            				}
HXDLIN(2755)				if (!(_hx_tmp3)) {
HXLINE(2755)					{
HXLINE(2755)						ret->zpp_inner->x = x;
HXDLIN(2755)						ret->zpp_inner->y = y;
            					}
HXDLIN(2755)					{
HXLINE(2755)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(2755)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(2755)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN(2755)			ret->zpp_inner->weak = false;
HXDLIN(2755)			min->wrap = ret;
HXDLIN(2755)			min->wrap->zpp_inner->_inuse = true;
HXDLIN(2755)			min->wrap->zpp_inner->_invalidate = min->modwrap_dyn();
HXDLIN(2755)			min->wrap->zpp_inner->_validate = min->getwrap_dyn();
            		}
HXDLIN(2755)		return min->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,left,return )

 ::nape::geom::Vec2 GeomPoly_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_2770_right)
HXLINE(2773)		if (this->zpp_disp) {
HXLINE(2773)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXLINE(2777)		if (this->zpp_disp) {
HXLINE(2777)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2777)		if (hx::IsNull( this->zpp_inner->vertices )) {
HXLINE(2778)			HX_STACK_DO_THROW(HX_("Error: empty GeomPoly has no defineable rightmmost vertex",47,7d,c7,8e));
            		}
HXLINE(2781)		 ::zpp_nape::geom::ZPP_GeomVert max = this->zpp_inner->vertices;
HXLINE(2782)		{
HXLINE(2783)			 ::zpp_nape::geom::ZPP_GeomVert F = this->zpp_inner->vertices->next;
HXLINE(2784)			 ::zpp_nape::geom::ZPP_GeomVert L = this->zpp_inner->vertices;
HXLINE(2785)			if (hx::IsNotNull( F )) {
HXLINE(2786)				 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE(2787)				while(true){
HXLINE(2788)					 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE(2790)					if ((v->x > max->x)) {
HXLINE(2790)						max = v;
            					}
HXLINE(2792)					nite = nite->next;
HXLINE(2787)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(2787)						goto _hx_goto_66;
            					}
            				}
            				_hx_goto_66:;
            			}
            		}
HXLINE(2797)		if (hx::IsNull( max->wrap )) {
HXLINE(2797)			Float x = max->x;
HXDLIN(2797)			Float y = max->y;
HXDLIN(2797)			bool _hx_tmp;
HXDLIN(2797)			if ((x == x)) {
HXLINE(2797)				_hx_tmp = (y != y);
            			}
            			else {
HXLINE(2797)				_hx_tmp = true;
            			}
HXDLIN(2797)			if (_hx_tmp) {
HXLINE(2797)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(2797)			 ::nape::geom::Vec2 ret;
HXDLIN(2797)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2797)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(2797)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2797)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(2797)				ret->zpp_pool = null();
HXDLIN(2797)				ret->zpp_disp = false;
HXDLIN(2797)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2797)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(2797)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(2797)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(2797)				{
HXLINE(2797)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2797)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2797)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2797)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(2797)						ret1->next = null();
            					}
HXDLIN(2797)					ret1->weak = false;
            				}
HXDLIN(2797)				ret1->_immutable = false;
HXDLIN(2797)				{
HXLINE(2797)					ret1->x = x;
HXDLIN(2797)					ret1->y = y;
            				}
HXDLIN(2797)				ret->zpp_inner = ret1;
HXDLIN(2797)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(2797)				bool _hx_tmp1;
HXDLIN(2797)				if (hx::IsNotNull( ret )) {
HXLINE(2797)					_hx_tmp1 = ret->zpp_disp;
            				}
            				else {
HXLINE(2797)					_hx_tmp1 = false;
            				}
HXDLIN(2797)				if (_hx_tmp1) {
HXLINE(2797)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2797)				{
HXLINE(2797)					 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(2797)					if (_this->_immutable) {
HXLINE(2797)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(2797)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(2797)						_this->_isimmutable();
            					}
            				}
HXDLIN(2797)				bool _hx_tmp2;
HXDLIN(2797)				if ((x == x)) {
HXLINE(2797)					_hx_tmp2 = (y != y);
            				}
            				else {
HXLINE(2797)					_hx_tmp2 = true;
            				}
HXDLIN(2797)				if (_hx_tmp2) {
HXLINE(2797)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(2797)				bool _hx_tmp3;
HXDLIN(2797)				bool _hx_tmp4;
HXDLIN(2797)				if (hx::IsNotNull( ret )) {
HXLINE(2797)					_hx_tmp4 = ret->zpp_disp;
            				}
            				else {
HXLINE(2797)					_hx_tmp4 = false;
            				}
HXDLIN(2797)				if (_hx_tmp4) {
HXLINE(2797)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2797)				{
HXLINE(2797)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(2797)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2797)						_this1->_validate();
            					}
            				}
HXDLIN(2797)				if ((ret->zpp_inner->x == x)) {
HXLINE(2797)					bool _hx_tmp5;
HXDLIN(2797)					if (hx::IsNotNull( ret )) {
HXLINE(2797)						_hx_tmp5 = ret->zpp_disp;
            					}
            					else {
HXLINE(2797)						_hx_tmp5 = false;
            					}
HXDLIN(2797)					if (_hx_tmp5) {
HXLINE(2797)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(2797)					{
HXLINE(2797)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(2797)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2797)							_this2->_validate();
            						}
            					}
HXDLIN(2797)					_hx_tmp3 = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE(2797)					_hx_tmp3 = false;
            				}
HXDLIN(2797)				if (!(_hx_tmp3)) {
HXLINE(2797)					{
HXLINE(2797)						ret->zpp_inner->x = x;
HXDLIN(2797)						ret->zpp_inner->y = y;
            					}
HXDLIN(2797)					{
HXLINE(2797)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(2797)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(2797)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN(2797)			ret->zpp_inner->weak = false;
HXDLIN(2797)			max->wrap = ret;
HXDLIN(2797)			max->wrap->zpp_inner->_inuse = true;
HXDLIN(2797)			max->wrap->zpp_inner->_invalidate = max->modwrap_dyn();
HXDLIN(2797)			max->wrap->zpp_inner->_validate = max->getwrap_dyn();
            		}
HXDLIN(2797)		return max->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomPoly_obj,right,return )

 ::nape::geom::GeomPoly GeomPoly_obj::get( ::Dynamic vertices){
            	HX_GC_STACKFRAME(&_hx_pos_1ae86dd092a9f416_1175_get)
HXLINE(1176)		 ::nape::geom::GeomPoly ret;
HXLINE(1178)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly )) {
HXLINE(1179)			ret =  ::nape::geom::GeomPoly_obj::__alloc( HX_CTX ,null());
            		}
            		else {
HXLINE(1185)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly;
HXLINE(1186)			::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly = ret->zpp_pool;
HXLINE(1187)			ret->zpp_pool = null();
HXLINE(1189)			ret->zpp_disp = false;
HXLINE(1190)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextGeomPoly )) {
HXLINE(1190)				::zpp_nape::util::ZPP_PubPool_obj::nextGeomPoly = null();
            			}
            		}
HXLINE(1197)		if (hx::IsNotNull( vertices )) {
HXLINE(1199)			if (::Std_obj::is(vertices,hx::ArrayBase::__mClass)) {
HXLINE(1200)				::cpp::VirtualArray lv = ( (::cpp::VirtualArray)(vertices) );
HXLINE(1201)				{
HXLINE(1201)					int _g = 0;
HXDLIN(1201)					while((_g < lv->get_length())){
HXLINE(1201)						 ::Dynamic vite = lv->__get(_g);
HXDLIN(1201)						_g = (_g + 1);
HXLINE(1203)						if (hx::IsNull( vite )) {
HXLINE(1203)							HX_STACK_DO_THROW(HX_("Error: Array<Vec2> contains null objects",eb,2d,26,50));
            						}
HXLINE(1206)						if (!(::Std_obj::is(vite,hx::ClassOf< ::nape::geom::Vec2 >()))) {
HXLINE(1206)							HX_STACK_DO_THROW(HX_("Error: Array<Vec2> contains non Vec2 objects",d5,3c,56,e0));
            						}
HXLINE(1208)						 ::nape::geom::Vec2 v = ( ( ::nape::geom::Vec2)(vite) );
HXLINE(1211)						bool _hx_tmp;
HXDLIN(1211)						if (hx::IsNotNull( v )) {
HXLINE(1211)							_hx_tmp = v->zpp_disp;
            						}
            						else {
HXLINE(1211)							_hx_tmp = false;
            						}
HXDLIN(1211)						if (_hx_tmp) {
HXLINE(1211)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXLINE(1216)						bool _hx_tmp1;
HXDLIN(1216)						if (hx::IsNotNull( v )) {
HXLINE(1216)							_hx_tmp1 = v->zpp_disp;
            						}
            						else {
HXLINE(1216)							_hx_tmp1 = false;
            						}
HXDLIN(1216)						if (_hx_tmp1) {
HXLINE(1216)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN(1216)						{
HXLINE(1216)							 ::zpp_nape::geom::ZPP_Vec2 _this = v->zpp_inner;
HXDLIN(1216)							if (hx::IsNotNull( _this->_validate )) {
HXLINE(1216)								_this->_validate();
            							}
            						}
HXDLIN(1216)						Float x = v->zpp_inner->x;
HXDLIN(1216)						bool _hx_tmp2;
HXDLIN(1216)						if (hx::IsNotNull( v )) {
HXLINE(1216)							_hx_tmp2 = v->zpp_disp;
            						}
            						else {
HXLINE(1216)							_hx_tmp2 = false;
            						}
HXDLIN(1216)						if (_hx_tmp2) {
HXLINE(1216)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN(1216)						{
HXLINE(1216)							 ::zpp_nape::geom::ZPP_Vec2 _this1 = v->zpp_inner;
HXDLIN(1216)							if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1216)								_this1->_validate();
            							}
            						}
HXDLIN(1216)						Float y = v->zpp_inner->y;
HXDLIN(1216)						 ::zpp_nape::geom::ZPP_GeomVert ret1;
HXDLIN(1216)						{
HXLINE(1216)							if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1216)								ret1 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(1216)								ret1 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1216)								::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret1->next;
HXDLIN(1216)								ret1->next = null();
            							}
HXDLIN(1216)							ret1->forced = false;
            						}
HXDLIN(1216)						{
HXLINE(1216)							ret1->x = x;
HXDLIN(1216)							ret1->y = y;
            						}
HXDLIN(1216)						 ::zpp_nape::geom::ZPP_GeomVert obj = ret1;
HXLINE(1217)						if (hx::IsNull( ret->zpp_inner->vertices )) {
HXLINE(1217)							ret->zpp_inner->vertices = (obj->prev = (obj->next = obj));
            						}
            						else {
HXLINE(1219)							obj->prev = ret->zpp_inner->vertices;
HXLINE(1220)							obj->next = ret->zpp_inner->vertices->next;
HXLINE(1221)							ret->zpp_inner->vertices->next->prev = obj;
HXLINE(1222)							ret->zpp_inner->vertices->next = obj;
            						}
HXLINE(1215)						ret->zpp_inner->vertices = obj;
            					}
            				}
            			}
            			else {
HXLINE(1257)				if (::Std_obj::is(vertices,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE(1258)					 ::nape::geom::Vec2List lv1 = ( ( ::nape::geom::Vec2List)(vertices) );
HXLINE(1259)					{
HXLINE(1259)						 ::nape::geom::Vec2Iterator _g1 = lv1->iterator();
HXDLIN(1259)						while(true){
HXLINE(1259)							_g1->zpp_inner->zpp_inner->valmod();
HXDLIN(1259)							int length = _g1->zpp_inner->zpp_gl();
HXDLIN(1259)							_g1->zpp_critical = true;
HXDLIN(1259)							bool _hx_tmp3;
HXDLIN(1259)							if ((_g1->zpp_i < length)) {
HXLINE(1259)								_hx_tmp3 = true;
            							}
            							else {
HXLINE(1259)								{
HXLINE(1259)									_g1->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN(1259)									::nape::geom::Vec2Iterator_obj::zpp_pool = _g1;
HXDLIN(1259)									_g1->zpp_inner = null();
            								}
HXDLIN(1259)								_hx_tmp3 = false;
            							}
HXDLIN(1259)							if (!(_hx_tmp3)) {
HXLINE(1259)								goto _hx_goto_69;
            							}
HXDLIN(1259)							_g1->zpp_critical = false;
HXDLIN(1259)							 ::nape::geom::Vec2 v1 = _g1->zpp_inner->at(_g1->zpp_i++);
HXLINE(1261)							if (hx::IsNull( v1 )) {
HXLINE(1261)								HX_STACK_DO_THROW(HX_("Error: Vec2List contains null objects",86,c5,d1,3e));
            							}
HXLINE(1265)							bool _hx_tmp4;
HXDLIN(1265)							if (hx::IsNotNull( v1 )) {
HXLINE(1265)								_hx_tmp4 = v1->zpp_disp;
            							}
            							else {
HXLINE(1265)								_hx_tmp4 = false;
            							}
HXDLIN(1265)							if (_hx_tmp4) {
HXLINE(1265)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXLINE(1270)							bool _hx_tmp5;
HXDLIN(1270)							if (hx::IsNotNull( v1 )) {
HXLINE(1270)								_hx_tmp5 = v1->zpp_disp;
            							}
            							else {
HXLINE(1270)								_hx_tmp5 = false;
            							}
HXDLIN(1270)							if (_hx_tmp5) {
HXLINE(1270)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1270)							{
HXLINE(1270)								 ::zpp_nape::geom::ZPP_Vec2 _this2 = v1->zpp_inner;
HXDLIN(1270)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1270)									_this2->_validate();
            								}
            							}
HXDLIN(1270)							Float x1 = v1->zpp_inner->x;
HXDLIN(1270)							bool _hx_tmp6;
HXDLIN(1270)							if (hx::IsNotNull( v1 )) {
HXLINE(1270)								_hx_tmp6 = v1->zpp_disp;
            							}
            							else {
HXLINE(1270)								_hx_tmp6 = false;
            							}
HXDLIN(1270)							if (_hx_tmp6) {
HXLINE(1270)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1270)							{
HXLINE(1270)								 ::zpp_nape::geom::ZPP_Vec2 _this3 = v1->zpp_inner;
HXDLIN(1270)								if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1270)									_this3->_validate();
            								}
            							}
HXDLIN(1270)							Float y1 = v1->zpp_inner->y;
HXDLIN(1270)							 ::zpp_nape::geom::ZPP_GeomVert ret2;
HXDLIN(1270)							{
HXLINE(1270)								if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1270)									ret2 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1270)									ret2 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1270)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret2->next;
HXDLIN(1270)									ret2->next = null();
            								}
HXDLIN(1270)								ret2->forced = false;
            							}
HXDLIN(1270)							{
HXLINE(1270)								ret2->x = x1;
HXDLIN(1270)								ret2->y = y1;
            							}
HXDLIN(1270)							 ::zpp_nape::geom::ZPP_GeomVert obj1 = ret2;
HXLINE(1271)							if (hx::IsNull( ret->zpp_inner->vertices )) {
HXLINE(1271)								ret->zpp_inner->vertices = (obj1->prev = (obj1->next = obj1));
            							}
            							else {
HXLINE(1273)								obj1->prev = ret->zpp_inner->vertices;
HXLINE(1274)								obj1->next = ret->zpp_inner->vertices->next;
HXLINE(1275)								ret->zpp_inner->vertices->next->prev = obj1;
HXLINE(1276)								ret->zpp_inner->vertices->next = obj1;
            							}
HXLINE(1269)							ret->zpp_inner->vertices = obj1;
            						}
            						_hx_goto_69:;
            					}
            				}
            				else {
HXLINE(1283)					if (::Std_obj::is(vertices,hx::ClassOf< ::nape::geom::GeomPoly >())) {
HXLINE(1284)						 ::nape::geom::GeomPoly lv2 = ( ( ::nape::geom::GeomPoly)(vertices) );
HXLINE(1287)						bool _hx_tmp7;
HXDLIN(1287)						if (hx::IsNotNull( lv2 )) {
HXLINE(1287)							_hx_tmp7 = lv2->zpp_disp;
            						}
            						else {
HXLINE(1287)							_hx_tmp7 = false;
            						}
HXDLIN(1287)						if (_hx_tmp7) {
HXLINE(1287)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("GeomPoly",48,73,75,9e)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXLINE(1290)						 ::zpp_nape::geom::ZPP_GeomVert verts = lv2->zpp_inner->vertices;
HXLINE(1291)						if (hx::IsNotNull( verts )) {
HXLINE(1292)							 ::zpp_nape::geom::ZPP_GeomVert vite1 = verts;
HXLINE(1293)							while(true){
HXLINE(1294)								Float x2 = vite1->x;
HXDLIN(1294)								Float y2 = vite1->y;
HXDLIN(1294)								bool _hx_tmp8;
HXDLIN(1294)								if ((x2 == x2)) {
HXLINE(1294)									_hx_tmp8 = (y2 != y2);
            								}
            								else {
HXLINE(1294)									_hx_tmp8 = true;
            								}
HXDLIN(1294)								if (_hx_tmp8) {
HXLINE(1294)									HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            								}
HXDLIN(1294)								 ::nape::geom::Vec2 ret3;
HXDLIN(1294)								if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1294)									ret3 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            								}
            								else {
HXLINE(1294)									ret3 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1294)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret3->zpp_pool;
HXDLIN(1294)									ret3->zpp_pool = null();
HXDLIN(1294)									ret3->zpp_disp = false;
HXDLIN(1294)									if (hx::IsEq( ret3,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1294)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            									}
            								}
HXDLIN(1294)								if (hx::IsNull( ret3->zpp_inner )) {
HXLINE(1294)									 ::zpp_nape::geom::ZPP_Vec2 ret4;
HXDLIN(1294)									{
HXLINE(1294)										if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1294)											ret4 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(1294)											ret4 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1294)											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret4->next;
HXDLIN(1294)											ret4->next = null();
            										}
HXDLIN(1294)										ret4->weak = false;
            									}
HXDLIN(1294)									ret4->_immutable = false;
HXDLIN(1294)									{
HXLINE(1294)										ret4->x = x2;
HXDLIN(1294)										ret4->y = y2;
            									}
HXDLIN(1294)									ret3->zpp_inner = ret4;
HXDLIN(1294)									ret3->zpp_inner->outer = ret3;
            								}
            								else {
HXLINE(1294)									bool _hx_tmp9;
HXDLIN(1294)									if (hx::IsNotNull( ret3 )) {
HXLINE(1294)										_hx_tmp9 = ret3->zpp_disp;
            									}
            									else {
HXLINE(1294)										_hx_tmp9 = false;
            									}
HXDLIN(1294)									if (_hx_tmp9) {
HXLINE(1294)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN(1294)									{
HXLINE(1294)										 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret3->zpp_inner;
HXDLIN(1294)										if (_this4->_immutable) {
HXLINE(1294)											HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            										}
HXDLIN(1294)										if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE(1294)											_this4->_isimmutable();
            										}
            									}
HXDLIN(1294)									bool _hx_tmp10;
HXDLIN(1294)									if ((x2 == x2)) {
HXLINE(1294)										_hx_tmp10 = (y2 != y2);
            									}
            									else {
HXLINE(1294)										_hx_tmp10 = true;
            									}
HXDLIN(1294)									if (_hx_tmp10) {
HXLINE(1294)										HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            									}
HXDLIN(1294)									bool _hx_tmp11;
HXDLIN(1294)									bool _hx_tmp12;
HXDLIN(1294)									if (hx::IsNotNull( ret3 )) {
HXLINE(1294)										_hx_tmp12 = ret3->zpp_disp;
            									}
            									else {
HXLINE(1294)										_hx_tmp12 = false;
            									}
HXDLIN(1294)									if (_hx_tmp12) {
HXLINE(1294)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN(1294)									{
HXLINE(1294)										 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret3->zpp_inner;
HXDLIN(1294)										if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1294)											_this5->_validate();
            										}
            									}
HXDLIN(1294)									if ((ret3->zpp_inner->x == x2)) {
HXLINE(1294)										bool _hx_tmp13;
HXDLIN(1294)										if (hx::IsNotNull( ret3 )) {
HXLINE(1294)											_hx_tmp13 = ret3->zpp_disp;
            										}
            										else {
HXLINE(1294)											_hx_tmp13 = false;
            										}
HXDLIN(1294)										if (_hx_tmp13) {
HXLINE(1294)											HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            										}
HXDLIN(1294)										{
HXLINE(1294)											 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret3->zpp_inner;
HXDLIN(1294)											if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1294)												_this6->_validate();
            											}
            										}
HXDLIN(1294)										_hx_tmp11 = (ret3->zpp_inner->y == y2);
            									}
            									else {
HXLINE(1294)										_hx_tmp11 = false;
            									}
HXDLIN(1294)									if (!(_hx_tmp11)) {
HXLINE(1294)										{
HXLINE(1294)											ret3->zpp_inner->x = x2;
HXDLIN(1294)											ret3->zpp_inner->y = y2;
            										}
HXDLIN(1294)										{
HXLINE(1294)											 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret3->zpp_inner;
HXDLIN(1294)											if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1294)												_this7->_invalidate(_this7);
            											}
            										}
            									}
            								}
HXDLIN(1294)								ret3->zpp_inner->weak = false;
HXDLIN(1294)								 ::nape::geom::Vec2 v2 = ret3;
HXLINE(1295)								vite1 = vite1->next;
HXLINE(1298)								bool _hx_tmp14;
HXDLIN(1298)								if (hx::IsNotNull( v2 )) {
HXLINE(1298)									_hx_tmp14 = v2->zpp_disp;
            								}
            								else {
HXLINE(1298)									_hx_tmp14 = false;
            								}
HXDLIN(1298)								if (_hx_tmp14) {
HXLINE(1298)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(1298)								{
HXLINE(1298)									 ::zpp_nape::geom::ZPP_Vec2 _this8 = v2->zpp_inner;
HXDLIN(1298)									if (hx::IsNotNull( _this8->_validate )) {
HXLINE(1298)										_this8->_validate();
            									}
            								}
HXDLIN(1298)								Float x3 = v2->zpp_inner->x;
HXDLIN(1298)								bool _hx_tmp15;
HXDLIN(1298)								if (hx::IsNotNull( v2 )) {
HXLINE(1298)									_hx_tmp15 = v2->zpp_disp;
            								}
            								else {
HXLINE(1298)									_hx_tmp15 = false;
            								}
HXDLIN(1298)								if (_hx_tmp15) {
HXLINE(1298)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(1298)								{
HXLINE(1298)									 ::zpp_nape::geom::ZPP_Vec2 _this9 = v2->zpp_inner;
HXDLIN(1298)									if (hx::IsNotNull( _this9->_validate )) {
HXLINE(1298)										_this9->_validate();
            									}
            								}
HXDLIN(1298)								Float y3 = v2->zpp_inner->y;
HXDLIN(1298)								 ::zpp_nape::geom::ZPP_GeomVert ret5;
HXDLIN(1298)								{
HXLINE(1298)									if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1298)										ret5 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1298)										ret5 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1298)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret5->next;
HXDLIN(1298)										ret5->next = null();
            									}
HXDLIN(1298)									ret5->forced = false;
            								}
HXDLIN(1298)								{
HXLINE(1298)									ret5->x = x3;
HXDLIN(1298)									ret5->y = y3;
            								}
HXDLIN(1298)								 ::zpp_nape::geom::ZPP_GeomVert obj2 = ret5;
HXLINE(1299)								if (hx::IsNull( ret->zpp_inner->vertices )) {
HXLINE(1299)									ret->zpp_inner->vertices = (obj2->prev = (obj2->next = obj2));
            								}
            								else {
HXLINE(1301)									obj2->prev = ret->zpp_inner->vertices;
HXLINE(1302)									obj2->next = ret->zpp_inner->vertices->next;
HXLINE(1303)									ret->zpp_inner->vertices->next->prev = obj2;
HXLINE(1304)									ret->zpp_inner->vertices->next = obj2;
            								}
HXLINE(1297)								ret->zpp_inner->vertices = obj2;
HXLINE(1309)								{
HXLINE(1309)									bool _hx_tmp16;
HXDLIN(1309)									if (hx::IsNotNull( v2 )) {
HXLINE(1309)										_hx_tmp16 = v2->zpp_disp;
            									}
            									else {
HXLINE(1309)										_hx_tmp16 = false;
            									}
HXDLIN(1309)									if (_hx_tmp16) {
HXLINE(1309)										HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            									}
HXDLIN(1309)									{
HXLINE(1309)										 ::zpp_nape::geom::ZPP_Vec2 _this10 = v2->zpp_inner;
HXDLIN(1309)										if (_this10->_immutable) {
HXLINE(1309)											HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            										}
HXDLIN(1309)										if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE(1309)											_this10->_isimmutable();
            										}
            									}
HXDLIN(1309)									if (v2->zpp_inner->_inuse) {
HXLINE(1309)										HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            									}
HXDLIN(1309)									 ::zpp_nape::geom::ZPP_Vec2 inner = v2->zpp_inner;
HXDLIN(1309)									v2->zpp_inner->outer = null();
HXDLIN(1309)									v2->zpp_inner = null();
HXDLIN(1309)									{
HXLINE(1309)										 ::nape::geom::Vec2 o = v2;
HXDLIN(1309)										o->zpp_pool = null();
HXDLIN(1309)										if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1309)											::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            										}
            										else {
HXLINE(1309)											::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            										}
HXDLIN(1309)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN(1309)										o->zpp_disp = true;
            									}
HXDLIN(1309)									{
HXLINE(1309)										 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN(1309)										{
HXLINE(1309)											if (hx::IsNotNull( o1->outer )) {
HXLINE(1309)												o1->outer->zpp_inner = null();
HXDLIN(1309)												o1->outer = null();
            											}
HXDLIN(1309)											o1->_isimmutable = null();
HXDLIN(1309)											o1->_validate = null();
HXDLIN(1309)											o1->_invalidate = null();
            										}
HXDLIN(1309)										o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1309)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            									}
            								}
HXLINE(1293)								if (!(hx::IsNotEq( vite1,verts ))) {
HXLINE(1293)									goto _hx_goto_70;
            								}
            							}
            							_hx_goto_70:;
            						}
            					}
            					else {
HXLINE(1316)						HX_STACK_DO_THROW(HX_("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>",bb,80,45,90));
            					}
            				}
            			}
HXLINE(1320)			ret->skipForward(1);
HXLINE(1322)			if (::Std_obj::is(vertices,hx::ArrayBase::__mClass)) {
HXLINE(1323)				::Array< ::Dynamic> lv3 = ( (::Array< ::Dynamic>)(vertices) );
HXLINE(1324)				int i = 0;
HXLINE(1325)				while((i < lv3->length)){
HXLINE(1326)					 ::nape::geom::Vec2 cur = lv3->__get(i).StaticCast<  ::nape::geom::Vec2 >();
HXLINE(1327)					bool _hx_tmp17;
HXDLIN(1327)					if (cur->zpp_inner->weak) {
HXLINE(1331)						{
HXLINE(1331)							bool _hx_tmp18;
HXDLIN(1331)							if (hx::IsNotNull( cur )) {
HXLINE(1331)								_hx_tmp18 = cur->zpp_disp;
            							}
            							else {
HXLINE(1331)								_hx_tmp18 = false;
            							}
HXDLIN(1331)							if (_hx_tmp18) {
HXLINE(1331)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(1331)							{
HXLINE(1331)								 ::zpp_nape::geom::ZPP_Vec2 _this11 = cur->zpp_inner;
HXDLIN(1331)								if (_this11->_immutable) {
HXLINE(1331)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(1331)								if (hx::IsNotNull( _this11->_isimmutable )) {
HXLINE(1331)									_this11->_isimmutable();
            								}
            							}
HXDLIN(1331)							if (cur->zpp_inner->_inuse) {
HXLINE(1331)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN(1331)							 ::zpp_nape::geom::ZPP_Vec2 inner1 = cur->zpp_inner;
HXDLIN(1331)							cur->zpp_inner->outer = null();
HXDLIN(1331)							cur->zpp_inner = null();
HXDLIN(1331)							{
HXLINE(1331)								 ::nape::geom::Vec2 o2 = cur;
HXDLIN(1331)								o2->zpp_pool = null();
HXDLIN(1331)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1331)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            								}
            								else {
HXLINE(1331)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            								}
HXDLIN(1331)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN(1331)								o2->zpp_disp = true;
            							}
HXDLIN(1331)							{
HXLINE(1331)								 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN(1331)								{
HXLINE(1331)									if (hx::IsNotNull( o3->outer )) {
HXLINE(1331)										o3->outer->zpp_inner = null();
HXDLIN(1331)										o3->outer = null();
            									}
HXDLIN(1331)									o3->_isimmutable = null();
HXDLIN(1331)									o3->_validate = null();
HXDLIN(1331)									o3->_invalidate = null();
            								}
HXDLIN(1331)								o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1331)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            							}
            						}
HXLINE(1327)						_hx_tmp17 = true;
            					}
            					else {
HXLINE(1327)						_hx_tmp17 = false;
            					}
HXDLIN(1327)					if (_hx_tmp17) {
HXLINE(1338)						lv3->removeRange(i,1);
HXLINE(1339)						continue;
            					}
HXLINE(1341)					i = (i + 1);
            				}
            			}
            			else {
HXLINE(1369)				if (::Std_obj::is(vertices,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE(1370)					 ::nape::geom::Vec2List lv4 = ( ( ::nape::geom::Vec2List)(vertices) );
HXLINE(1371)					if (hx::IsNotNull( lv4->zpp_inner->_validate )) {
HXLINE(1371)						lv4->zpp_inner->_validate();
            					}
HXLINE(1372)					 ::zpp_nape::util::ZNPList_ZPP_Vec2 ins = lv4->zpp_inner->inner;
HXLINE(1373)					 ::zpp_nape::util::ZNPNode_ZPP_Vec2 pre = null();
HXLINE(1374)					 ::zpp_nape::util::ZNPNode_ZPP_Vec2 cur1 = ins->head;
HXLINE(1375)					while(hx::IsNotNull( cur1 )){
HXLINE(1376)						 ::zpp_nape::geom::ZPP_Vec2 x4 = cur1->elt;
HXLINE(1377)						if (x4->outer->zpp_inner->weak) {
HXLINE(1380)							cur1 = ins->erase(pre);
HXLINE(1381)							if (x4->outer->zpp_inner->weak) {
HXLINE(1385)								 ::nape::geom::Vec2 _this12 = x4->outer;
HXDLIN(1385)								bool _hx_tmp19;
HXDLIN(1385)								if (hx::IsNotNull( _this12 )) {
HXLINE(1385)									_hx_tmp19 = _this12->zpp_disp;
            								}
            								else {
HXLINE(1385)									_hx_tmp19 = false;
            								}
HXDLIN(1385)								if (_hx_tmp19) {
HXLINE(1385)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(1385)								{
HXLINE(1385)									 ::zpp_nape::geom::ZPP_Vec2 _this13 = _this12->zpp_inner;
HXDLIN(1385)									if (_this13->_immutable) {
HXLINE(1385)										HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            									}
HXDLIN(1385)									if (hx::IsNotNull( _this13->_isimmutable )) {
HXLINE(1385)										_this13->_isimmutable();
            									}
            								}
HXDLIN(1385)								if (_this12->zpp_inner->_inuse) {
HXLINE(1385)									HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            								}
HXDLIN(1385)								 ::zpp_nape::geom::ZPP_Vec2 inner2 = _this12->zpp_inner;
HXDLIN(1385)								_this12->zpp_inner->outer = null();
HXDLIN(1385)								_this12->zpp_inner = null();
HXDLIN(1385)								{
HXLINE(1385)									 ::nape::geom::Vec2 o4 = _this12;
HXDLIN(1385)									o4->zpp_pool = null();
HXDLIN(1385)									if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1385)										::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o4;
            									}
            									else {
HXLINE(1385)										::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o4;
            									}
HXDLIN(1385)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o4;
HXDLIN(1385)									o4->zpp_disp = true;
            								}
HXDLIN(1385)								{
HXLINE(1385)									 ::zpp_nape::geom::ZPP_Vec2 o5 = inner2;
HXDLIN(1385)									{
HXLINE(1385)										if (hx::IsNotNull( o5->outer )) {
HXLINE(1385)											o5->outer->zpp_inner = null();
HXDLIN(1385)											o5->outer = null();
            										}
HXDLIN(1385)										o5->_isimmutable = null();
HXDLIN(1385)										o5->_validate = null();
HXDLIN(1385)										o5->_invalidate = null();
            									}
HXDLIN(1385)									o5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1385)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o5;
            								}
            							}
            						}
            						else {
HXLINE(1394)							pre = cur1;
HXLINE(1395)							cur1 = cur1->next;
            						}
            					}
            				}
            			}
            		}
HXLINE(1401)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GeomPoly_obj,get,return )


hx::ObjectPtr< GeomPoly_obj > GeomPoly_obj::__new( ::Dynamic vertices) {
	hx::ObjectPtr< GeomPoly_obj > __this = new GeomPoly_obj();
	__this->__construct(vertices);
	return __this;
}

hx::ObjectPtr< GeomPoly_obj > GeomPoly_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic vertices) {
	GeomPoly_obj *__this = (GeomPoly_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GeomPoly_obj), true, "nape.geom.GeomPoly"));
	*(void **)__this = GeomPoly_obj::_hx_vtable;
	__this->__construct(vertices);
	return __this;
}

GeomPoly_obj::GeomPoly_obj()
{
}

void GeomPoly_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GeomPoly);
	HX_MARK_MEMBER_NAME(zpp_pool,"zpp_pool");
	HX_MARK_MEMBER_NAME(zpp_disp,"zpp_disp");
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void GeomPoly_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_pool,"zpp_pool");
	HX_VISIT_MEMBER_NAME(zpp_disp,"zpp_disp");
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val GeomPoly_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"cut") ) { return hx::Val( cut_dyn() ); }
		if (HX_FIELD_EQ(inName,"top") ) { return hx::Val( top_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"area") ) { return hx::Val( area_dyn() ); }
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"bottom") ) { return hx::Val( bottom_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current_dyn() ); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"winding") ) { return hx::Val( winding_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { return hx::Val( zpp_pool ); }
		if (HX_FIELD_EQ(inName,"zpp_disp") ) { return hx::Val( zpp_disp ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"isConvex") ) { return hx::Val( isConvex_dyn() ); }
		if (HX_FIELD_EQ(inName,"isSimple") ) { return hx::Val( isSimple_dyn() ); }
		if (HX_FIELD_EQ(inName,"simplify") ) { return hx::Val( simplify_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isMonotone") ) { return hx::Val( isMonotone_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"skipForward") ) { return hx::Val( skipForward_dyn() ); }
		if (HX_FIELD_EQ(inName,"isClockwise") ) { return hx::Val( isClockwise_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isDegenerate") ) { return hx::Val( isDegenerate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skipBackwards") ) { return hx::Val( skipBackwards_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"forwardIterator") ) { return hx::Val( forwardIterator_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"backwardsIterator") ) { return hx::Val( backwardsIterator_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"simpleDecomposition") ) { return hx::Val( simpleDecomposition_dyn() ); }
		if (HX_FIELD_EQ(inName,"convexDecomposition") ) { return hx::Val( convexDecomposition_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"monotoneDecomposition") ) { return hx::Val( monotoneDecomposition_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"triangularDecomposition") ) { return hx::Val( triangularDecomposition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GeomPoly_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
	}
	return false;
}

hx::Val GeomPoly_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=inValue.Cast<  ::nape::geom::GeomPoly >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zpp_disp") ) { zpp_disp=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomPoly >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GeomPoly_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_pool",81,5d,d4,38));
	outFields->push(HX_("zpp_disp",07,44,e1,30));
	outFields->push(HX_("zpp_inner",51,65,85,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo GeomPoly_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::geom::GeomPoly */ ,(int)offsetof(GeomPoly_obj,zpp_pool),HX_("zpp_pool",81,5d,d4,38)},
	{hx::fsBool,(int)offsetof(GeomPoly_obj,zpp_disp),HX_("zpp_disp",07,44,e1,30)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomPoly */ ,(int)offsetof(GeomPoly_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GeomPoly_obj_sStaticStorageInfo = 0;
#endif

static ::String GeomPoly_obj_sMemberFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	HX_("zpp_disp",07,44,e1,30),
	HX_("zpp_inner",51,65,85,78),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("iterator",ee,49,9a,93),
	HX_("forwardIterator",d3,b4,25,ae),
	HX_("backwardsIterator",3e,41,3a,9c),
	HX_("current",39,9c,e3,cb),
	HX_("push",da,11,61,4a),
	HX_("pop",91,5d,55,00),
	HX_("unshift",89,e3,b3,78),
	HX_("shift",82,ec,22,7c),
	HX_("skipForward",06,51,3c,81),
	HX_("skipBackwards",b1,0c,c4,7c),
	HX_("erase",e6,e8,1c,73),
	HX_("clear",8d,71,5b,48),
	HX_("copy",b5,bb,c4,41),
	HX_("dispose",9f,80,4c,bb),
	HX_("toString",ac,d0,6e,38),
	HX_("area",8d,8b,74,40),
	HX_("winding",1a,49,70,e8),
	HX_("contains",1f,5a,7b,2c),
	HX_("isClockwise",a8,34,20,1b),
	HX_("isConvex",f1,12,48,20),
	HX_("isSimple",bc,9f,e8,10),
	HX_("isMonotone",1f,96,b5,0e),
	HX_("isDegenerate",40,c8,16,02),
	HX_("simplify",09,57,71,19),
	HX_("simpleDecomposition",77,24,02,a9),
	HX_("monotoneDecomposition",b4,32,28,81),
	HX_("convexDecomposition",22,14,99,54),
	HX_("triangularDecomposition",72,ac,23,8f),
	HX_("inflate",87,9c,1b,0c),
	HX_("cut",82,85,4b,00),
	HX_("transform",6c,2d,93,45),
	HX_("bounds",75,86,1d,66),
	HX_("top",95,66,58,00),
	HX_("bottom",eb,e6,78,65),
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	::String(null()) };

hx::Class GeomPoly_obj::__mClass;

static ::String GeomPoly_obj_sStaticFields[] = {
	HX_("get",96,80,4e,00),
	::String(null())
};

void GeomPoly_obj::__register()
{
	GeomPoly_obj _hx_dummy;
	GeomPoly_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.GeomPoly",34,d1,c4,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GeomPoly_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GeomPoly_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GeomPoly_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GeomPoly_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GeomPoly_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GeomPoly_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
