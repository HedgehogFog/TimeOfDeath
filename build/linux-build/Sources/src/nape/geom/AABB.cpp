// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_AABB
#include <hxinc/nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_182_new,"nape.geom.AABB","new",0xaccd397e,"nape.geom.AABB.new","nape/geom/AABB.hx",182,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_226_copy,"nape.geom.AABB","copy",0x7f874cd7,"nape.geom.AABB.copy","nape/geom/AABB.hx",226,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_281_get_min,"nape.geom.AABB","get_min",0x5caf2a47,"nape.geom.AABB.get_min","nape/geom/AABB.hx",281,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_283_set_min,"nape.geom.AABB","set_min",0x4fb0bb53,"nape.geom.AABB.set_min","nape/geom/AABB.hx",283,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_330_get_max,"nape.geom.AABB","get_max",0x5caf2359,"nape.geom.AABB.get_max","nape/geom/AABB.hx",330,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_332_set_max,"nape.geom.AABB","set_max",0x4fb0b465,"nape.geom.AABB.set_max","nape/geom/AABB.hx",332,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_370_get_x,"nape.geom.AABB","get_x",0x5ddd11ed,"nape.geom.AABB.get_x","nape/geom/AABB.hx",370,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_374_set_x,"nape.geom.AABB","set_x",0x46ac07f9,"nape.geom.AABB.set_x","nape/geom/AABB.hx",374,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_400_get_y,"nape.geom.AABB","get_y",0x5ddd11ee,"nape.geom.AABB.get_y","nape/geom/AABB.hx",400,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_404_set_y,"nape.geom.AABB","set_y",0x46ac07fa,"nape.geom.AABB.set_y","nape/geom/AABB.hx",404,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_430_get_width,"nape.geom.AABB","get_width",0x087e25fb,"nape.geom.AABB.get_width","nape/geom/AABB.hx",430,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_434_set_width,"nape.geom.AABB","set_width",0xebcf1207,"nape.geom.AABB.set_width","nape/geom/AABB.hx",434,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_464_get_height,"nape.geom.AABB","get_height",0x1c328e52,"nape.geom.AABB.get_height","nape/geom/AABB.hx",464,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_468_set_height,"nape.geom.AABB","set_height",0x1fb02cc6,"nape.geom.AABB.set_height","nape/geom/AABB.hx",468,0x3e49ef52)
HX_LOCAL_STACK_FRAME(_hx_pos_841f2e948d01b503_493_toString,"nape.geom.AABB","toString",0x2ced9ace,"nape.geom.AABB.toString","nape/geom/AABB.hx",493,0x3e49ef52)
namespace nape{
namespace geom{

void AABB_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_841f2e948d01b503_182_new)
HXLINE( 186)		this->zpp_inner = null();
HXLINE( 207)		bool _hx_tmp;
HXDLIN( 207)		if ((x == x)) {
HXLINE( 207)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 207)			_hx_tmp = true;
            		}
HXDLIN( 207)		if (_hx_tmp) {
HXLINE( 208)			HX_STACK_DO_THROW(HX_("Error: AABB position cannot be NaN",76,d1,f1,dc));
            		}
HXLINE( 210)		bool _hx_tmp1;
HXDLIN( 210)		if ((width == width)) {
HXLINE( 210)			_hx_tmp1 = (height != height);
            		}
            		else {
HXLINE( 210)			_hx_tmp1 = true;
            		}
HXDLIN( 210)		if (_hx_tmp1) {
HXLINE( 211)			HX_STACK_DO_THROW(HX_("Error: AABB dimensions cannot be NaN",9a,66,b0,5f));
            		}
HXLINE( 214)		 ::zpp_nape::geom::ZPP_AABB ret;
HXDLIN( 214)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 214)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 214)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 214)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 214)			ret->next = null();
            		}
HXDLIN( 214)		{
HXLINE( 214)			ret->minx = x;
HXDLIN( 214)			ret->miny = y;
            		}
HXDLIN( 214)		{
HXLINE( 214)			ret->maxx = (x + width);
HXDLIN( 214)			ret->maxy = (y + height);
            		}
HXDLIN( 214)		this->zpp_inner = ret;
HXLINE( 215)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic AABB_obj::__CreateEmpty() { return new AABB_obj; }

void *AABB_obj::_hx_vtable = 0;

Dynamic AABB_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AABB_obj > _hx_result = new AABB_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool AABB_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x221d1df0;
}

 ::nape::geom::AABB AABB_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_841f2e948d01b503_226_copy)
HXLINE( 227)		{
HXLINE( 227)			 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 227)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 227)				_this->_validate();
            			}
            		}
HXLINE( 228)		 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 228)		Float minx = _this1->minx;
HXDLIN( 228)		Float miny = _this1->miny;
HXDLIN( 228)		Float maxx = _this1->maxx;
HXDLIN( 228)		Float maxy = _this1->maxy;
HXDLIN( 228)		 ::zpp_nape::geom::ZPP_AABB ret;
HXDLIN( 228)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 228)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 228)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 228)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 228)			ret->next = null();
            		}
HXDLIN( 228)		{
HXLINE( 228)			ret->minx = minx;
HXDLIN( 228)			ret->miny = miny;
            		}
HXDLIN( 228)		{
HXLINE( 228)			ret->maxx = maxx;
HXDLIN( 228)			ret->maxy = maxy;
            		}
HXDLIN( 228)		return ret->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,copy,return )

 ::nape::geom::Vec2 AABB_obj::get_min(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_281_get_min)
HXDLIN( 281)		return this->zpp_inner->getmin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_min,return )

 ::nape::geom::Vec2 AABB_obj::set_min( ::nape::geom::Vec2 min){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_283_set_min)
HXLINE( 284)		{
HXLINE( 287)			bool _hx_tmp;
HXDLIN( 287)			if (hx::IsNotNull( min )) {
HXLINE( 287)				_hx_tmp = min->zpp_disp;
            			}
            			else {
HXLINE( 287)				_hx_tmp = false;
            			}
HXDLIN( 287)			if (_hx_tmp) {
HXLINE( 287)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 291)			if (this->zpp_inner->_immutable) {
HXLINE( 292)				HX_STACK_DO_THROW(HX_("Error: AABB is immutable",fe,89,bf,f1));
            			}
HXLINE( 294)			if (hx::IsNull( min )) {
HXLINE( 295)				HX_STACK_DO_THROW((HX_("Error: Cannot assign null to AABB::",ee,b7,17,d8) + HX_("min",92,11,53,00)));
            			}
HXLINE( 297)			bool _hx_tmp1;
HXDLIN( 297)			{
HXLINE( 297)				 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 297)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 297)					_this->_validate();
            				}
            			}
HXDLIN( 297)			Float _hx_tmp2 = this->zpp_inner->minx;
HXDLIN( 297)			{
HXLINE( 297)				 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 297)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 297)					_this1->_validate();
            				}
            			}
HXDLIN( 297)			if ((_hx_tmp2 == this->zpp_inner->minx)) {
HXLINE( 297)				{
HXLINE( 297)					 ::zpp_nape::geom::ZPP_AABB _this2 = this->zpp_inner;
HXDLIN( 297)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 297)						_this2->_validate();
            					}
            				}
HXDLIN( 297)				Float _hx_tmp3 = this->zpp_inner->miny;
HXDLIN( 297)				{
HXLINE( 297)					 ::zpp_nape::geom::ZPP_AABB _this3 = this->zpp_inner;
HXDLIN( 297)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 297)						_this3->_validate();
            					}
            				}
HXDLIN( 297)				_hx_tmp1 = (_hx_tmp3 != this->zpp_inner->miny);
            			}
            			else {
HXLINE( 297)				_hx_tmp1 = true;
            			}
HXDLIN( 297)			if (_hx_tmp1) {
HXLINE( 298)				HX_STACK_DO_THROW(((HX_("Error: AABB::",2e,5c,24,85) + HX_("min",92,11,53,00)) + HX_(" components cannot be NaN",d1,06,59,a1)));
            			}
HXLINE( 300)			{
HXLINE( 301)				bool _hx_tmp4;
HXDLIN( 301)				if (hx::IsNotNull( min )) {
HXLINE( 301)					_hx_tmp4 = min->zpp_disp;
            				}
            				else {
HXLINE( 301)					_hx_tmp4 = false;
            				}
HXDLIN( 301)				if (_hx_tmp4) {
HXLINE( 301)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 301)				{
HXLINE( 301)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = min->zpp_inner;
HXDLIN( 301)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 301)						_this4->_validate();
            					}
            				}
HXDLIN( 301)				Float _hx_tmp5 = min->zpp_inner->x;
HXDLIN( 301)				 ::nape::geom::Vec2 _this5 = this->zpp_inner->getmax();
HXDLIN( 301)				bool _hx_tmp6;
HXDLIN( 301)				if (hx::IsNotNull( _this5 )) {
HXLINE( 301)					_hx_tmp6 = _this5->zpp_disp;
            				}
            				else {
HXLINE( 301)					_hx_tmp6 = false;
            				}
HXDLIN( 301)				if (_hx_tmp6) {
HXLINE( 301)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 301)				{
HXLINE( 301)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this5->zpp_inner;
HXDLIN( 301)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 301)						_this6->_validate();
            					}
            				}
HXDLIN( 301)				if ((_hx_tmp5 > _this5->zpp_inner->x)) {
HXLINE( 301)					HX_STACK_DO_THROW(HX_("Error: Assignment would cause negative width",a2,e1,0a,41));
            				}
HXLINE( 302)				bool _hx_tmp7;
HXDLIN( 302)				if (hx::IsNotNull( min )) {
HXLINE( 302)					_hx_tmp7 = min->zpp_disp;
            				}
            				else {
HXLINE( 302)					_hx_tmp7 = false;
            				}
HXDLIN( 302)				if (_hx_tmp7) {
HXLINE( 302)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 302)				{
HXLINE( 302)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = min->zpp_inner;
HXDLIN( 302)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 302)						_this7->_validate();
            					}
            				}
HXDLIN( 302)				Float _hx_tmp8 = min->zpp_inner->y;
HXDLIN( 302)				 ::nape::geom::Vec2 _this8 = this->zpp_inner->getmax();
HXDLIN( 302)				bool _hx_tmp9;
HXDLIN( 302)				if (hx::IsNotNull( _this8 )) {
HXLINE( 302)					_hx_tmp9 = _this8->zpp_disp;
            				}
            				else {
HXLINE( 302)					_hx_tmp9 = false;
            				}
HXDLIN( 302)				if (_hx_tmp9) {
HXLINE( 302)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 302)				{
HXLINE( 302)					 ::zpp_nape::geom::ZPP_Vec2 _this9 = _this8->zpp_inner;
HXDLIN( 302)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 302)						_this9->_validate();
            					}
            				}
HXDLIN( 302)				if ((_hx_tmp8 > _this8->zpp_inner->y)) {
HXLINE( 302)					HX_STACK_DO_THROW(HX_("Error: Assignment would cause negative height",cb,04,ca,5e));
            				}
            			}
HXLINE( 309)			{
HXLINE( 309)				 ::nape::geom::Vec2 _this10 = this->zpp_inner->getmin();
HXDLIN( 309)				bool _hx_tmp10;
HXDLIN( 309)				if (hx::IsNotNull( _this10 )) {
HXLINE( 309)					_hx_tmp10 = _this10->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp10 = false;
            				}
HXDLIN( 309)				if (_hx_tmp10) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				bool _hx_tmp11;
HXDLIN( 309)				if (hx::IsNotNull( min )) {
HXLINE( 309)					_hx_tmp11 = min->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp11 = false;
            				}
HXDLIN( 309)				if (_hx_tmp11) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this11 = _this10->zpp_inner;
HXDLIN( 309)					if (_this11->_immutable) {
HXLINE( 309)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 309)					if (hx::IsNotNull( _this11->_isimmutable )) {
HXLINE( 309)						_this11->_isimmutable();
            					}
            				}
HXDLIN( 309)				if (hx::IsNull( min )) {
HXLINE( 309)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 309)				bool _hx_tmp12;
HXDLIN( 309)				if (hx::IsNotNull( min )) {
HXLINE( 309)					_hx_tmp12 = min->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp12 = false;
            				}
HXDLIN( 309)				if (_hx_tmp12) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this12 = min->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 309)						_this12->_validate();
            					}
            				}
HXDLIN( 309)				Float x = min->zpp_inner->x;
HXDLIN( 309)				bool _hx_tmp13;
HXDLIN( 309)				if (hx::IsNotNull( min )) {
HXLINE( 309)					_hx_tmp13 = min->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp13 = false;
            				}
HXDLIN( 309)				if (_hx_tmp13) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this13 = min->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 309)						_this13->_validate();
            					}
            				}
HXDLIN( 309)				Float y = min->zpp_inner->y;
HXDLIN( 309)				bool _hx_tmp14;
HXDLIN( 309)				if (hx::IsNotNull( _this10 )) {
HXLINE( 309)					_hx_tmp14 = _this10->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp14 = false;
            				}
HXDLIN( 309)				if (_hx_tmp14) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this14 = _this10->zpp_inner;
HXDLIN( 309)					if (_this14->_immutable) {
HXLINE( 309)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 309)					if (hx::IsNotNull( _this14->_isimmutable )) {
HXLINE( 309)						_this14->_isimmutable();
            					}
            				}
HXDLIN( 309)				bool _hx_tmp15;
HXDLIN( 309)				if ((x == x)) {
HXLINE( 309)					_hx_tmp15 = (y != y);
            				}
            				else {
HXLINE( 309)					_hx_tmp15 = true;
            				}
HXDLIN( 309)				if (_hx_tmp15) {
HXLINE( 309)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 309)				bool _hx_tmp16;
HXDLIN( 309)				bool _hx_tmp17;
HXDLIN( 309)				if (hx::IsNotNull( _this10 )) {
HXLINE( 309)					_hx_tmp17 = _this10->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp17 = false;
            				}
HXDLIN( 309)				if (_hx_tmp17) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this15 = _this10->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 309)						_this15->_validate();
            					}
            				}
HXDLIN( 309)				if ((_this10->zpp_inner->x == x)) {
HXLINE( 309)					bool _hx_tmp18;
HXDLIN( 309)					if (hx::IsNotNull( _this10 )) {
HXLINE( 309)						_hx_tmp18 = _this10->zpp_disp;
            					}
            					else {
HXLINE( 309)						_hx_tmp18 = false;
            					}
HXDLIN( 309)					if (_hx_tmp18) {
HXLINE( 309)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 309)					{
HXLINE( 309)						 ::zpp_nape::geom::ZPP_Vec2 _this16 = _this10->zpp_inner;
HXDLIN( 309)						if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 309)							_this16->_validate();
            						}
            					}
HXDLIN( 309)					_hx_tmp16 = (_this10->zpp_inner->y == y);
            				}
            				else {
HXLINE( 309)					_hx_tmp16 = false;
            				}
HXDLIN( 309)				if (!(_hx_tmp16)) {
HXLINE( 309)					{
HXLINE( 309)						_this10->zpp_inner->x = x;
HXDLIN( 309)						_this10->zpp_inner->y = y;
            					}
HXDLIN( 309)					{
HXLINE( 309)						 ::zpp_nape::geom::ZPP_Vec2 _this17 = _this10->zpp_inner;
HXDLIN( 309)						if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 309)							_this17->_invalidate(_this17);
            						}
            					}
            				}
HXDLIN( 309)				 ::nape::geom::Vec2 ret = _this10;
HXDLIN( 309)				if (min->zpp_inner->weak) {
HXLINE( 309)					bool _hx_tmp19;
HXDLIN( 309)					if (hx::IsNotNull( min )) {
HXLINE( 309)						_hx_tmp19 = min->zpp_disp;
            					}
            					else {
HXLINE( 309)						_hx_tmp19 = false;
            					}
HXDLIN( 309)					if (_hx_tmp19) {
HXLINE( 309)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 309)					{
HXLINE( 309)						 ::zpp_nape::geom::ZPP_Vec2 _this18 = min->zpp_inner;
HXDLIN( 309)						if (_this18->_immutable) {
HXLINE( 309)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 309)						if (hx::IsNotNull( _this18->_isimmutable )) {
HXLINE( 309)							_this18->_isimmutable();
            						}
            					}
HXDLIN( 309)					if (min->zpp_inner->_inuse) {
HXLINE( 309)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 309)					 ::zpp_nape::geom::ZPP_Vec2 inner = min->zpp_inner;
HXDLIN( 309)					min->zpp_inner->outer = null();
HXDLIN( 309)					min->zpp_inner = null();
HXDLIN( 309)					{
HXLINE( 309)						 ::nape::geom::Vec2 o = min;
HXDLIN( 309)						o->zpp_pool = null();
HXDLIN( 309)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 309)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 309)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 309)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 309)						o->zpp_disp = true;
            					}
HXDLIN( 309)					{
HXLINE( 309)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 309)						{
HXLINE( 309)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 309)								o1->outer->zpp_inner = null();
HXDLIN( 309)								o1->outer = null();
            							}
HXDLIN( 309)							o1->_isimmutable = null();
HXDLIN( 309)							o1->_validate = null();
HXDLIN( 309)							o1->_invalidate = null();
            						}
HXDLIN( 309)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 309)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 311)		return this->zpp_inner->getmin();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_min,return )

 ::nape::geom::Vec2 AABB_obj::get_max(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_330_get_max)
HXDLIN( 330)		return this->zpp_inner->getmax();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_max,return )

 ::nape::geom::Vec2 AABB_obj::set_max( ::nape::geom::Vec2 max){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_332_set_max)
HXLINE( 333)		{
HXLINE( 336)			bool _hx_tmp;
HXDLIN( 336)			if (hx::IsNotNull( max )) {
HXLINE( 336)				_hx_tmp = max->zpp_disp;
            			}
            			else {
HXLINE( 336)				_hx_tmp = false;
            			}
HXDLIN( 336)			if (_hx_tmp) {
HXLINE( 336)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 340)			if (this->zpp_inner->_immutable) {
HXLINE( 341)				HX_STACK_DO_THROW(HX_("Error: AABB is immutable",fe,89,bf,f1));
            			}
HXLINE( 343)			if (hx::IsNull( max )) {
HXLINE( 344)				HX_STACK_DO_THROW((HX_("Error: Cannot assign null to AABB::",ee,b7,17,d8) + HX_("max",a4,0a,53,00)));
            			}
HXLINE( 346)			bool _hx_tmp1;
HXDLIN( 346)			{
HXLINE( 346)				 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 346)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 346)					_this->_validate();
            				}
            			}
HXDLIN( 346)			Float _hx_tmp2 = this->zpp_inner->minx;
HXDLIN( 346)			{
HXLINE( 346)				 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 346)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 346)					_this1->_validate();
            				}
            			}
HXDLIN( 346)			if ((_hx_tmp2 == this->zpp_inner->minx)) {
HXLINE( 346)				{
HXLINE( 346)					 ::zpp_nape::geom::ZPP_AABB _this2 = this->zpp_inner;
HXDLIN( 346)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 346)						_this2->_validate();
            					}
            				}
HXDLIN( 346)				Float _hx_tmp3 = this->zpp_inner->miny;
HXDLIN( 346)				{
HXLINE( 346)					 ::zpp_nape::geom::ZPP_AABB _this3 = this->zpp_inner;
HXDLIN( 346)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 346)						_this3->_validate();
            					}
            				}
HXDLIN( 346)				_hx_tmp1 = (_hx_tmp3 != this->zpp_inner->miny);
            			}
            			else {
HXLINE( 346)				_hx_tmp1 = true;
            			}
HXDLIN( 346)			if (_hx_tmp1) {
HXLINE( 347)				HX_STACK_DO_THROW(((HX_("Error: AABB::",2e,5c,24,85) + HX_("max",a4,0a,53,00)) + HX_(" components cannot be NaN",d1,06,59,a1)));
            			}
HXLINE( 353)			{
HXLINE( 354)				bool _hx_tmp4;
HXDLIN( 354)				if (hx::IsNotNull( max )) {
HXLINE( 354)					_hx_tmp4 = max->zpp_disp;
            				}
            				else {
HXLINE( 354)					_hx_tmp4 = false;
            				}
HXDLIN( 354)				if (_hx_tmp4) {
HXLINE( 354)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 354)				{
HXLINE( 354)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = max->zpp_inner;
HXDLIN( 354)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 354)						_this4->_validate();
            					}
            				}
HXDLIN( 354)				Float _hx_tmp5 = max->zpp_inner->x;
HXDLIN( 354)				 ::nape::geom::Vec2 _this5 = this->zpp_inner->getmin();
HXDLIN( 354)				bool _hx_tmp6;
HXDLIN( 354)				if (hx::IsNotNull( _this5 )) {
HXLINE( 354)					_hx_tmp6 = _this5->zpp_disp;
            				}
            				else {
HXLINE( 354)					_hx_tmp6 = false;
            				}
HXDLIN( 354)				if (_hx_tmp6) {
HXLINE( 354)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 354)				{
HXLINE( 354)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this5->zpp_inner;
HXDLIN( 354)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 354)						_this6->_validate();
            					}
            				}
HXDLIN( 354)				if ((_hx_tmp5 < _this5->zpp_inner->x)) {
HXLINE( 354)					HX_STACK_DO_THROW(HX_("Error: Assignment would cause negative width",a2,e1,0a,41));
            				}
HXLINE( 355)				bool _hx_tmp7;
HXDLIN( 355)				if (hx::IsNotNull( max )) {
HXLINE( 355)					_hx_tmp7 = max->zpp_disp;
            				}
            				else {
HXLINE( 355)					_hx_tmp7 = false;
            				}
HXDLIN( 355)				if (_hx_tmp7) {
HXLINE( 355)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 355)				{
HXLINE( 355)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = max->zpp_inner;
HXDLIN( 355)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 355)						_this7->_validate();
            					}
            				}
HXDLIN( 355)				Float _hx_tmp8 = max->zpp_inner->y;
HXDLIN( 355)				 ::nape::geom::Vec2 _this8 = this->zpp_inner->getmin();
HXDLIN( 355)				bool _hx_tmp9;
HXDLIN( 355)				if (hx::IsNotNull( _this8 )) {
HXLINE( 355)					_hx_tmp9 = _this8->zpp_disp;
            				}
            				else {
HXLINE( 355)					_hx_tmp9 = false;
            				}
HXDLIN( 355)				if (_hx_tmp9) {
HXLINE( 355)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 355)				{
HXLINE( 355)					 ::zpp_nape::geom::ZPP_Vec2 _this9 = _this8->zpp_inner;
HXDLIN( 355)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 355)						_this9->_validate();
            					}
            				}
HXDLIN( 355)				if ((_hx_tmp8 < _this8->zpp_inner->y)) {
HXLINE( 355)					HX_STACK_DO_THROW(HX_("Error: Assignment would cause negative height",cb,04,ca,5e));
            				}
            			}
HXLINE( 358)			{
HXLINE( 358)				 ::nape::geom::Vec2 _this10 = this->zpp_inner->getmax();
HXDLIN( 358)				bool _hx_tmp10;
HXDLIN( 358)				if (hx::IsNotNull( _this10 )) {
HXLINE( 358)					_hx_tmp10 = _this10->zpp_disp;
            				}
            				else {
HXLINE( 358)					_hx_tmp10 = false;
            				}
HXDLIN( 358)				if (_hx_tmp10) {
HXLINE( 358)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 358)				bool _hx_tmp11;
HXDLIN( 358)				if (hx::IsNotNull( max )) {
HXLINE( 358)					_hx_tmp11 = max->zpp_disp;
            				}
            				else {
HXLINE( 358)					_hx_tmp11 = false;
            				}
HXDLIN( 358)				if (_hx_tmp11) {
HXLINE( 358)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 358)				{
HXLINE( 358)					 ::zpp_nape::geom::ZPP_Vec2 _this11 = _this10->zpp_inner;
HXDLIN( 358)					if (_this11->_immutable) {
HXLINE( 358)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 358)					if (hx::IsNotNull( _this11->_isimmutable )) {
HXLINE( 358)						_this11->_isimmutable();
            					}
            				}
HXDLIN( 358)				if (hx::IsNull( max )) {
HXLINE( 358)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 358)				bool _hx_tmp12;
HXDLIN( 358)				if (hx::IsNotNull( max )) {
HXLINE( 358)					_hx_tmp12 = max->zpp_disp;
            				}
            				else {
HXLINE( 358)					_hx_tmp12 = false;
            				}
HXDLIN( 358)				if (_hx_tmp12) {
HXLINE( 358)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 358)				{
HXLINE( 358)					 ::zpp_nape::geom::ZPP_Vec2 _this12 = max->zpp_inner;
HXDLIN( 358)					if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 358)						_this12->_validate();
            					}
            				}
HXDLIN( 358)				Float x = max->zpp_inner->x;
HXDLIN( 358)				bool _hx_tmp13;
HXDLIN( 358)				if (hx::IsNotNull( max )) {
HXLINE( 358)					_hx_tmp13 = max->zpp_disp;
            				}
            				else {
HXLINE( 358)					_hx_tmp13 = false;
            				}
HXDLIN( 358)				if (_hx_tmp13) {
HXLINE( 358)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 358)				{
HXLINE( 358)					 ::zpp_nape::geom::ZPP_Vec2 _this13 = max->zpp_inner;
HXDLIN( 358)					if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 358)						_this13->_validate();
            					}
            				}
HXDLIN( 358)				Float y = max->zpp_inner->y;
HXDLIN( 358)				bool _hx_tmp14;
HXDLIN( 358)				if (hx::IsNotNull( _this10 )) {
HXLINE( 358)					_hx_tmp14 = _this10->zpp_disp;
            				}
            				else {
HXLINE( 358)					_hx_tmp14 = false;
            				}
HXDLIN( 358)				if (_hx_tmp14) {
HXLINE( 358)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 358)				{
HXLINE( 358)					 ::zpp_nape::geom::ZPP_Vec2 _this14 = _this10->zpp_inner;
HXDLIN( 358)					if (_this14->_immutable) {
HXLINE( 358)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 358)					if (hx::IsNotNull( _this14->_isimmutable )) {
HXLINE( 358)						_this14->_isimmutable();
            					}
            				}
HXDLIN( 358)				bool _hx_tmp15;
HXDLIN( 358)				if ((x == x)) {
HXLINE( 358)					_hx_tmp15 = (y != y);
            				}
            				else {
HXLINE( 358)					_hx_tmp15 = true;
            				}
HXDLIN( 358)				if (_hx_tmp15) {
HXLINE( 358)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 358)				bool _hx_tmp16;
HXDLIN( 358)				bool _hx_tmp17;
HXDLIN( 358)				if (hx::IsNotNull( _this10 )) {
HXLINE( 358)					_hx_tmp17 = _this10->zpp_disp;
            				}
            				else {
HXLINE( 358)					_hx_tmp17 = false;
            				}
HXDLIN( 358)				if (_hx_tmp17) {
HXLINE( 358)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 358)				{
HXLINE( 358)					 ::zpp_nape::geom::ZPP_Vec2 _this15 = _this10->zpp_inner;
HXDLIN( 358)					if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 358)						_this15->_validate();
            					}
            				}
HXDLIN( 358)				if ((_this10->zpp_inner->x == x)) {
HXLINE( 358)					bool _hx_tmp18;
HXDLIN( 358)					if (hx::IsNotNull( _this10 )) {
HXLINE( 358)						_hx_tmp18 = _this10->zpp_disp;
            					}
            					else {
HXLINE( 358)						_hx_tmp18 = false;
            					}
HXDLIN( 358)					if (_hx_tmp18) {
HXLINE( 358)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 358)					{
HXLINE( 358)						 ::zpp_nape::geom::ZPP_Vec2 _this16 = _this10->zpp_inner;
HXDLIN( 358)						if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 358)							_this16->_validate();
            						}
            					}
HXDLIN( 358)					_hx_tmp16 = (_this10->zpp_inner->y == y);
            				}
            				else {
HXLINE( 358)					_hx_tmp16 = false;
            				}
HXDLIN( 358)				if (!(_hx_tmp16)) {
HXLINE( 358)					{
HXLINE( 358)						_this10->zpp_inner->x = x;
HXDLIN( 358)						_this10->zpp_inner->y = y;
            					}
HXDLIN( 358)					{
HXLINE( 358)						 ::zpp_nape::geom::ZPP_Vec2 _this17 = _this10->zpp_inner;
HXDLIN( 358)						if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 358)							_this17->_invalidate(_this17);
            						}
            					}
            				}
HXDLIN( 358)				 ::nape::geom::Vec2 ret = _this10;
HXDLIN( 358)				if (max->zpp_inner->weak) {
HXLINE( 358)					bool _hx_tmp19;
HXDLIN( 358)					if (hx::IsNotNull( max )) {
HXLINE( 358)						_hx_tmp19 = max->zpp_disp;
            					}
            					else {
HXLINE( 358)						_hx_tmp19 = false;
            					}
HXDLIN( 358)					if (_hx_tmp19) {
HXLINE( 358)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 358)					{
HXLINE( 358)						 ::zpp_nape::geom::ZPP_Vec2 _this18 = max->zpp_inner;
HXDLIN( 358)						if (_this18->_immutable) {
HXLINE( 358)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 358)						if (hx::IsNotNull( _this18->_isimmutable )) {
HXLINE( 358)							_this18->_isimmutable();
            						}
            					}
HXDLIN( 358)					if (max->zpp_inner->_inuse) {
HXLINE( 358)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 358)					 ::zpp_nape::geom::ZPP_Vec2 inner = max->zpp_inner;
HXDLIN( 358)					max->zpp_inner->outer = null();
HXDLIN( 358)					max->zpp_inner = null();
HXDLIN( 358)					{
HXLINE( 358)						 ::nape::geom::Vec2 o = max;
HXDLIN( 358)						o->zpp_pool = null();
HXDLIN( 358)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 358)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 358)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 358)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 358)						o->zpp_disp = true;
            					}
HXDLIN( 358)					{
HXLINE( 358)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 358)						{
HXLINE( 358)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 358)								o1->outer->zpp_inner = null();
HXDLIN( 358)								o1->outer = null();
            							}
HXDLIN( 358)							o1->_isimmutable = null();
HXDLIN( 358)							o1->_validate = null();
HXDLIN( 358)							o1->_invalidate = null();
            						}
HXDLIN( 358)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 358)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 360)		return this->zpp_inner->getmax();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_max,return )

Float AABB_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_370_get_x)
HXLINE( 371)		{
HXLINE( 371)			 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 371)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 371)				_this->_validate();
            			}
            		}
HXLINE( 372)		return this->zpp_inner->minx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_x,return )

Float AABB_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_374_set_x)
HXLINE( 375)		{
HXLINE( 377)			if (this->zpp_inner->_immutable) {
HXLINE( 378)				HX_STACK_DO_THROW(HX_("Error: AABB is immutable",fe,89,bf,f1));
            			}
HXLINE( 381)			{
HXLINE( 381)				 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 381)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 381)					_this->_validate();
            				}
            			}
HXDLIN( 381)			if ((this->zpp_inner->minx != x)) {
HXLINE( 383)				if ((x != x)) {
HXLINE( 383)					HX_STACK_DO_THROW(((HX_("Error: AABB::",2e,5c,24,85) + HX_("x",78,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXLINE( 385)				 ::zpp_nape::geom::ZPP_AABB _hx_tmp = this->zpp_inner;
HXDLIN( 385)				_hx_tmp->maxx = (_hx_tmp->maxx + (x - this->zpp_inner->minx));
HXLINE( 386)				this->zpp_inner->minx = x;
HXLINE( 387)				{
HXLINE( 387)					 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 387)					if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 387)						_this1->_invalidate(_this1);
            					}
            				}
            			}
            		}
HXLINE( 390)		{
HXLINE( 390)			 ::zpp_nape::geom::ZPP_AABB _this2 = this->zpp_inner;
HXDLIN( 390)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 390)				_this2->_validate();
            			}
            		}
HXDLIN( 390)		return this->zpp_inner->minx;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_x,return )

Float AABB_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_400_get_y)
HXLINE( 401)		{
HXLINE( 401)			 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 401)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 401)				_this->_validate();
            			}
            		}
HXLINE( 402)		return this->zpp_inner->miny;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_y,return )

Float AABB_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_404_set_y)
HXLINE( 405)		{
HXLINE( 407)			if (this->zpp_inner->_immutable) {
HXLINE( 408)				HX_STACK_DO_THROW(HX_("Error: AABB is immutable",fe,89,bf,f1));
            			}
HXLINE( 411)			{
HXLINE( 411)				 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 411)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 411)					_this->_validate();
            				}
            			}
HXDLIN( 411)			if ((this->zpp_inner->miny != y)) {
HXLINE( 413)				if ((y != y)) {
HXLINE( 413)					HX_STACK_DO_THROW(((HX_("Error: AABB::",2e,5c,24,85) + HX_("y",79,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXLINE( 415)				 ::zpp_nape::geom::ZPP_AABB _hx_tmp = this->zpp_inner;
HXDLIN( 415)				_hx_tmp->maxy = (_hx_tmp->maxy + (y - this->zpp_inner->miny));
HXLINE( 416)				this->zpp_inner->miny = y;
HXLINE( 417)				{
HXLINE( 417)					 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 417)					if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 417)						_this1->_invalidate(_this1);
            					}
            				}
            			}
            		}
HXLINE( 420)		{
HXLINE( 420)			 ::zpp_nape::geom::ZPP_AABB _this2 = this->zpp_inner;
HXDLIN( 420)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 420)				_this2->_validate();
            			}
            		}
HXDLIN( 420)		return this->zpp_inner->miny;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_y,return )

Float AABB_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_430_get_width)
HXLINE( 431)		{
HXLINE( 431)			 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 431)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 431)				_this->_validate();
            			}
            		}
HXLINE( 432)		 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 432)		return (_this1->maxx - _this1->minx);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_width,return )

Float AABB_obj::set_width(Float width){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_434_set_width)
HXLINE( 435)		{
HXLINE( 437)			if (this->zpp_inner->_immutable) {
HXLINE( 438)				HX_STACK_DO_THROW(HX_("Error: AABB is immutable",fe,89,bf,f1));
            			}
HXLINE( 441)			{
HXLINE( 441)				 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 441)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 441)					_this->_validate();
            				}
            			}
HXDLIN( 441)			 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 441)			if (((_this1->maxx - _this1->minx) != width)) {
HXLINE( 443)				if ((width != width)) {
HXLINE( 444)					HX_STACK_DO_THROW(((HX_("Error: AABB::",2e,5c,24,85) + HX_("width",06,b6,62,ca)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXLINE( 446)				if ((width < 0)) {
HXLINE( 447)					HX_STACK_DO_THROW(((((HX_("Error: AABB::",2e,5c,24,85) + HX_("width",06,b6,62,ca)) + HX_(" (",08,1c,00,00)) + width) + HX_(") must be >= 0",cc,84,5f,ca)));
            				}
HXLINE( 450)				{
HXLINE( 450)					 ::zpp_nape::geom::ZPP_AABB _this2 = this->zpp_inner;
HXDLIN( 450)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 450)						_this2->_validate();
            					}
            				}
HXDLIN( 450)				this->zpp_inner->maxx = (this->zpp_inner->minx + width);
HXLINE( 451)				{
HXLINE( 451)					 ::zpp_nape::geom::ZPP_AABB _this3 = this->zpp_inner;
HXDLIN( 451)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 451)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXLINE( 454)		{
HXLINE( 454)			 ::zpp_nape::geom::ZPP_AABB _this4 = this->zpp_inner;
HXDLIN( 454)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 454)				_this4->_validate();
            			}
            		}
HXDLIN( 454)		 ::zpp_nape::geom::ZPP_AABB _this5 = this->zpp_inner;
HXDLIN( 454)		return (_this5->maxx - _this5->minx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_width,return )

Float AABB_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_464_get_height)
HXLINE( 465)		{
HXLINE( 465)			 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 465)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 465)				_this->_validate();
            			}
            		}
HXLINE( 466)		 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 466)		return (_this1->maxy - _this1->miny);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_height,return )

Float AABB_obj::set_height(Float height){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_468_set_height)
HXLINE( 469)		{
HXLINE( 471)			if (this->zpp_inner->_immutable) {
HXLINE( 472)				HX_STACK_DO_THROW(HX_("Error: AABB is immutable",fe,89,bf,f1));
            			}
HXLINE( 475)			{
HXLINE( 475)				 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 475)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 475)					_this->_validate();
            				}
            			}
HXDLIN( 475)			 ::zpp_nape::geom::ZPP_AABB _this1 = this->zpp_inner;
HXDLIN( 475)			if (((_this1->maxy - _this1->miny) != height)) {
HXLINE( 477)				if ((height != height)) {
HXLINE( 478)					HX_STACK_DO_THROW(((HX_("Error: AABB::",2e,5c,24,85) + HX_("height",e7,07,4c,02)) + HX_(" cannot be NaN",1b,77,40,38)));
            				}
HXLINE( 480)				if ((height < 0)) {
HXLINE( 481)					HX_STACK_DO_THROW(((((HX_("Error: AABB::",2e,5c,24,85) + HX_("height",e7,07,4c,02)) + HX_(" (",08,1c,00,00)) + height) + HX_(") must be >= 0",cc,84,5f,ca)));
            				}
HXLINE( 484)				{
HXLINE( 484)					 ::zpp_nape::geom::ZPP_AABB _this2 = this->zpp_inner;
HXDLIN( 484)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 484)						_this2->_validate();
            					}
            				}
HXDLIN( 484)				this->zpp_inner->maxy = (this->zpp_inner->miny + height);
HXLINE( 485)				{
HXLINE( 485)					 ::zpp_nape::geom::ZPP_AABB _this3 = this->zpp_inner;
HXDLIN( 485)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 485)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXLINE( 488)		{
HXLINE( 488)			 ::zpp_nape::geom::ZPP_AABB _this4 = this->zpp_inner;
HXDLIN( 488)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 488)				_this4->_validate();
            			}
            		}
HXDLIN( 488)		 ::zpp_nape::geom::ZPP_AABB _this5 = this->zpp_inner;
HXDLIN( 488)		return (_this5->maxy - _this5->miny);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_height,return )

::String AABB_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_493_toString)
HXLINE( 494)		{
HXLINE( 494)			 ::zpp_nape::geom::ZPP_AABB _this = this->zpp_inner;
HXDLIN( 494)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 494)				_this->_validate();
            			}
            		}
HXLINE( 495)		return this->zpp_inner->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,toString,return )


hx::ObjectPtr< AABB_obj > AABB_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< AABB_obj > __this = new AABB_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< AABB_obj > AABB_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	AABB_obj *__this = (AABB_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AABB_obj), true, "nape.geom.AABB"));
	*(void **)__this = AABB_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

AABB_obj::AABB_obj()
{
}

void AABB_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AABB);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void AABB_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val AABB_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_min() ); }
		if (HX_FIELD_EQ(inName,"max") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_max() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_min") ) { return hx::Val( get_min_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_min") ) { return hx::Val( set_min_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_max") ) { return hx::Val( get_max_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_max") ) { return hx::Val( set_max_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AABB_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_min(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		if (HX_FIELD_EQ(inName,"max") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_max(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AABB_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AABB_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_AABB */ ,(int)offsetof(AABB_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AABB_obj_sStaticStorageInfo = 0;
#endif

static ::String AABB_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("copy",b5,bb,c4,41),
	HX_("get_min",29,da,c7,26),
	HX_("set_min",35,6b,c9,19),
	HX_("get_max",3b,d3,c7,26),
	HX_("set_max",47,64,c9,19),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class AABB_obj::__mClass;

void AABB_obj::__register()
{
	AABB_obj _hx_dummy;
	AABB_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.geom.AABB",8c,62,9f,f1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AABB_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AABB_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AABB_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AABB_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
