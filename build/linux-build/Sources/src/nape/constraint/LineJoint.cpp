// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_LineJoint
#include <hxinc/nape/constraint/LineJoint.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <hxinc/nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_LineJoint
#include <hxinc/zpp_nape/constraint/ZPP_LineJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <hxinc/zpp_nape/geom/ZPP_MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_208_new,"nape.constraint.LineJoint","new",0xe137bcfd,"nape.constraint.LineJoint.new","nape/constraint/LineJoint.hx",208,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_222_get_body1,"nape.constraint.LineJoint","get_body1",0x71dff003,"nape.constraint.LineJoint.get_body1","nape/constraint/LineJoint.hx",222,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_224_set_body1,"nape.constraint.LineJoint","set_body1",0x5530dc0f,"nape.constraint.LineJoint.set_body1","nape/constraint/LineJoint.hx",224,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_260_get_body2,"nape.constraint.LineJoint","get_body2",0x71dff004,"nape.constraint.LineJoint.get_body2","nape/constraint/LineJoint.hx",260,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_262_set_body2,"nape.constraint.LineJoint","set_body2",0x5530dc10,"nape.constraint.LineJoint.set_body2","nape/constraint/LineJoint.hx",262,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_296_get_anchor1,"nape.constraint.LineJoint","get_anchor1",0x6f599dd0,"nape.constraint.LineJoint.get_anchor1","nape/constraint/LineJoint.hx",296,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_300_set_anchor1,"nape.constraint.LineJoint","set_anchor1",0x79c6a4dc,"nape.constraint.LineJoint.set_anchor1","nape/constraint/LineJoint.hx",300,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_321_get_anchor2,"nape.constraint.LineJoint","get_anchor2",0x6f599dd1,"nape.constraint.LineJoint.get_anchor2","nape/constraint/LineJoint.hx",321,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_325_set_anchor2,"nape.constraint.LineJoint","set_anchor2",0x79c6a4dd,"nape.constraint.LineJoint.set_anchor2","nape/constraint/LineJoint.hx",325,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_347_get_direction,"nape.constraint.LineJoint","get_direction",0xdf8ee8f3,"nape.constraint.LineJoint.get_direction","nape/constraint/LineJoint.hx",347,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_351_set_direction,"nape.constraint.LineJoint","set_direction",0x2494caff,"nape.constraint.LineJoint.set_direction","nape/constraint/LineJoint.hx",351,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_373_get_jointMin,"nape.constraint.LineJoint","get_jointMin",0x0929c634,"nape.constraint.LineJoint.get_jointMin","nape/constraint/LineJoint.hx",373,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_375_set_jointMin,"nape.constraint.LineJoint","set_jointMin",0x1e22e9a8,"nape.constraint.LineJoint.set_jointMin","nape/constraint/LineJoint.hx",375,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_398_get_jointMax,"nape.constraint.LineJoint","get_jointMax",0x0929bf46,"nape.constraint.LineJoint.get_jointMax","nape/constraint/LineJoint.hx",398,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_400_set_jointMax,"nape.constraint.LineJoint","set_jointMax",0x1e22e2ba,"nape.constraint.LineJoint.set_jointMax","nape/constraint/LineJoint.hx",400,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_455_impulse,"nape.constraint.LineJoint","impulse",0xf2f04fd2,"nape.constraint.LineJoint.impulse","nape/constraint/LineJoint.hx",455,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_464_bodyImpulse,"nape.constraint.LineJoint","bodyImpulse",0x465fc7d0,"nape.constraint.LineJoint.bodyImpulse","nape/constraint/LineJoint.hx",464,0xe7850eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_09c49cc38fbc8a37_483_visitBodies,"nape.constraint.LineJoint","visitBodies",0xcb1c4548,"nape.constraint.LineJoint.visitBodies","nape/constraint/LineJoint.hx",483,0xe7850eb3)
namespace nape{
namespace constraint{

void LineJoint_obj::__construct( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2, ::nape::geom::Vec2 direction,Float jointMin,Float jointMax){
            	HX_GC_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_208_new)
HXLINE( 212)		this->zpp_inner_zn = null();
HXLINE( 430)		this->zpp_inner_zn =  ::zpp_nape::constraint::ZPP_LineJoint_obj::__alloc( HX_CTX );
HXLINE( 431)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 432)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 433)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 435)		::nape::constraint::Constraint_obj::zpp_internalAlloc = true;
HXLINE( 436)		super::__construct();
HXLINE( 437)		::nape::constraint::Constraint_obj::zpp_internalAlloc = false;
HXLINE( 442)		{
HXLINE( 442)			{
HXLINE( 442)				this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body1",4f,d3,ef,b6)));
HXDLIN( 442)				 ::zpp_nape::phys::ZPP_Body inbody1;
HXDLIN( 442)				if (hx::IsNull( body1 )) {
HXLINE( 442)					inbody1 = null();
            				}
            				else {
HXLINE( 442)					inbody1 = body1->zpp_inner;
            				}
HXDLIN( 442)				if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 442)					if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 442)						bool _hx_tmp;
HXDLIN( 442)						 ::nape::space::Space _hx_tmp1;
HXDLIN( 442)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 442)							_hx_tmp1 = null();
            						}
            						else {
HXLINE( 442)							_hx_tmp1 = this->zpp_inner->space->outer;
            						}
HXDLIN( 442)						if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 442)							_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            						}
            						else {
HXLINE( 442)							_hx_tmp = false;
            						}
HXDLIN( 442)						if (_hx_tmp) {
HXLINE( 442)							if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 442)								this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            							}
            						}
HXDLIN( 442)						bool _hx_tmp2;
HXDLIN( 442)						if (this->zpp_inner->active) {
HXLINE( 442)							 ::nape::space::Space _hx_tmp3;
HXDLIN( 442)							if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 442)								_hx_tmp3 = null();
            							}
            							else {
HXLINE( 442)								_hx_tmp3 = this->zpp_inner->space->outer;
            							}
HXDLIN( 442)							_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            						}
            						else {
HXLINE( 442)							_hx_tmp2 = false;
            						}
HXDLIN( 442)						if (_hx_tmp2) {
HXLINE( 442)							this->zpp_inner_zn->b1->wake();
            						}
            					}
HXDLIN( 442)					this->zpp_inner_zn->b1 = inbody1;
HXDLIN( 442)					bool _hx_tmp4;
HXDLIN( 442)					bool _hx_tmp5;
HXDLIN( 442)					 ::nape::space::Space _hx_tmp6;
HXDLIN( 442)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 442)						_hx_tmp6 = null();
            					}
            					else {
HXLINE( 442)						_hx_tmp6 = this->zpp_inner->space->outer;
            					}
HXDLIN( 442)					if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 442)						_hx_tmp5 = hx::IsNotNull( inbody1 );
            					}
            					else {
HXLINE( 442)						_hx_tmp5 = false;
            					}
HXDLIN( 442)					if (_hx_tmp5) {
HXLINE( 442)						_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            					}
            					else {
HXLINE( 442)						_hx_tmp4 = false;
            					}
HXDLIN( 442)					if (_hx_tmp4) {
HXLINE( 442)						if (hx::IsNotNull( inbody1 )) {
HXLINE( 442)							inbody1->constraints->add(this->zpp_inner);
            						}
            					}
HXDLIN( 442)					bool _hx_tmp7;
HXDLIN( 442)					if (this->zpp_inner->active) {
HXLINE( 442)						 ::nape::space::Space _hx_tmp8;
HXDLIN( 442)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 442)							_hx_tmp8 = null();
            						}
            						else {
HXLINE( 442)							_hx_tmp8 = this->zpp_inner->space->outer;
            						}
HXDLIN( 442)						_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            					}
            					else {
HXLINE( 442)						_hx_tmp7 = false;
            					}
HXDLIN( 442)					if (_hx_tmp7) {
HXLINE( 442)						this->zpp_inner->wake();
HXDLIN( 442)						if (hx::IsNotNull( inbody1 )) {
HXLINE( 442)							inbody1->wake();
            						}
            					}
            				}
            			}
HXDLIN( 442)			bool _hx_tmp9 = hx::IsNull( this->zpp_inner_zn->b1 );
            		}
HXLINE( 443)		{
HXLINE( 443)			{
HXLINE( 443)				this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body2",50,d3,ef,b6)));
HXDLIN( 443)				 ::zpp_nape::phys::ZPP_Body inbody2;
HXDLIN( 443)				if (hx::IsNull( body2 )) {
HXLINE( 443)					inbody2 = null();
            				}
            				else {
HXLINE( 443)					inbody2 = body2->zpp_inner;
            				}
HXDLIN( 443)				if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 443)					if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 443)						bool _hx_tmp10;
HXDLIN( 443)						 ::nape::space::Space _hx_tmp11;
HXDLIN( 443)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 443)							_hx_tmp11 = null();
            						}
            						else {
HXLINE( 443)							_hx_tmp11 = this->zpp_inner->space->outer;
            						}
HXDLIN( 443)						if (hx::IsNotNull( _hx_tmp11 )) {
HXLINE( 443)							_hx_tmp10 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            						}
            						else {
HXLINE( 443)							_hx_tmp10 = false;
            						}
HXDLIN( 443)						if (_hx_tmp10) {
HXLINE( 443)							if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 443)								this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            							}
            						}
HXDLIN( 443)						bool _hx_tmp12;
HXDLIN( 443)						if (this->zpp_inner->active) {
HXLINE( 443)							 ::nape::space::Space _hx_tmp13;
HXDLIN( 443)							if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 443)								_hx_tmp13 = null();
            							}
            							else {
HXLINE( 443)								_hx_tmp13 = this->zpp_inner->space->outer;
            							}
HXDLIN( 443)							_hx_tmp12 = hx::IsNotNull( _hx_tmp13 );
            						}
            						else {
HXLINE( 443)							_hx_tmp12 = false;
            						}
HXDLIN( 443)						if (_hx_tmp12) {
HXLINE( 443)							this->zpp_inner_zn->b2->wake();
            						}
            					}
HXDLIN( 443)					this->zpp_inner_zn->b2 = inbody2;
HXDLIN( 443)					bool _hx_tmp14;
HXDLIN( 443)					bool _hx_tmp15;
HXDLIN( 443)					 ::nape::space::Space _hx_tmp16;
HXDLIN( 443)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 443)						_hx_tmp16 = null();
            					}
            					else {
HXLINE( 443)						_hx_tmp16 = this->zpp_inner->space->outer;
            					}
HXDLIN( 443)					if (hx::IsNotNull( _hx_tmp16 )) {
HXLINE( 443)						_hx_tmp15 = hx::IsNotNull( inbody2 );
            					}
            					else {
HXLINE( 443)						_hx_tmp15 = false;
            					}
HXDLIN( 443)					if (_hx_tmp15) {
HXLINE( 443)						_hx_tmp14 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            					}
            					else {
HXLINE( 443)						_hx_tmp14 = false;
            					}
HXDLIN( 443)					if (_hx_tmp14) {
HXLINE( 443)						if (hx::IsNotNull( inbody2 )) {
HXLINE( 443)							inbody2->constraints->add(this->zpp_inner);
            						}
            					}
HXDLIN( 443)					bool _hx_tmp17;
HXDLIN( 443)					if (this->zpp_inner->active) {
HXLINE( 443)						 ::nape::space::Space _hx_tmp18;
HXDLIN( 443)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 443)							_hx_tmp18 = null();
            						}
            						else {
HXLINE( 443)							_hx_tmp18 = this->zpp_inner->space->outer;
            						}
HXDLIN( 443)						_hx_tmp17 = hx::IsNotNull( _hx_tmp18 );
            					}
            					else {
HXLINE( 443)						_hx_tmp17 = false;
            					}
HXDLIN( 443)					if (_hx_tmp17) {
HXLINE( 443)						this->zpp_inner->wake();
HXDLIN( 443)						if (hx::IsNotNull( inbody2 )) {
HXLINE( 443)							inbody2->wake();
            						}
            					}
            				}
            			}
HXDLIN( 443)			bool _hx_tmp19 = hx::IsNull( this->zpp_inner_zn->b2 );
            		}
HXLINE( 444)		{
HXLINE( 444)			{
HXLINE( 444)				bool _hx_tmp20;
HXDLIN( 444)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 444)					_hx_tmp20 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 444)					_hx_tmp20 = false;
            				}
HXDLIN( 444)				if (_hx_tmp20) {
HXLINE( 444)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 444)				if (hx::IsNull( anchor1 )) {
HXLINE( 444)					HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor1",1c,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            				}
HXDLIN( 444)				{
HXLINE( 444)					if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 444)						this->zpp_inner_zn->setup_a1();
            					}
HXDLIN( 444)					 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_a1;
HXDLIN( 444)					bool _hx_tmp21;
HXDLIN( 444)					if (hx::IsNotNull( _this )) {
HXLINE( 444)						_hx_tmp21 = _this->zpp_disp;
            					}
            					else {
HXLINE( 444)						_hx_tmp21 = false;
            					}
HXDLIN( 444)					if (_hx_tmp21) {
HXLINE( 444)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 444)					bool _hx_tmp22;
HXDLIN( 444)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 444)						_hx_tmp22 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 444)						_hx_tmp22 = false;
            					}
HXDLIN( 444)					if (_hx_tmp22) {
HXLINE( 444)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 444)					{
HXLINE( 444)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 444)						if (_this1->_immutable) {
HXLINE( 444)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 444)						if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 444)							_this1->_isimmutable();
            						}
            					}
HXDLIN( 444)					if (hx::IsNull( anchor1 )) {
HXLINE( 444)						HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            					}
HXDLIN( 444)					bool _hx_tmp23;
HXDLIN( 444)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 444)						_hx_tmp23 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 444)						_hx_tmp23 = false;
            					}
HXDLIN( 444)					if (_hx_tmp23) {
HXLINE( 444)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 444)					{
HXLINE( 444)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = anchor1->zpp_inner;
HXDLIN( 444)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 444)							_this2->_validate();
            						}
            					}
HXDLIN( 444)					Float x = anchor1->zpp_inner->x;
HXDLIN( 444)					bool _hx_tmp24;
HXDLIN( 444)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 444)						_hx_tmp24 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 444)						_hx_tmp24 = false;
            					}
HXDLIN( 444)					if (_hx_tmp24) {
HXLINE( 444)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 444)					{
HXLINE( 444)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = anchor1->zpp_inner;
HXDLIN( 444)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 444)							_this3->_validate();
            						}
            					}
HXDLIN( 444)					Float y = anchor1->zpp_inner->y;
HXDLIN( 444)					bool _hx_tmp25;
HXDLIN( 444)					if (hx::IsNotNull( _this )) {
HXLINE( 444)						_hx_tmp25 = _this->zpp_disp;
            					}
            					else {
HXLINE( 444)						_hx_tmp25 = false;
            					}
HXDLIN( 444)					if (_hx_tmp25) {
HXLINE( 444)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 444)					{
HXLINE( 444)						 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 444)						if (_this4->_immutable) {
HXLINE( 444)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 444)						if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 444)							_this4->_isimmutable();
            						}
            					}
HXDLIN( 444)					bool _hx_tmp26;
HXDLIN( 444)					if ((x == x)) {
HXLINE( 444)						_hx_tmp26 = (y != y);
            					}
            					else {
HXLINE( 444)						_hx_tmp26 = true;
            					}
HXDLIN( 444)					if (_hx_tmp26) {
HXLINE( 444)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 444)					bool _hx_tmp27;
HXDLIN( 444)					bool _hx_tmp28;
HXDLIN( 444)					if (hx::IsNotNull( _this )) {
HXLINE( 444)						_hx_tmp28 = _this->zpp_disp;
            					}
            					else {
HXLINE( 444)						_hx_tmp28 = false;
            					}
HXDLIN( 444)					if (_hx_tmp28) {
HXLINE( 444)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 444)					{
HXLINE( 444)						 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 444)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 444)							_this5->_validate();
            						}
            					}
HXDLIN( 444)					if ((_this->zpp_inner->x == x)) {
HXLINE( 444)						bool _hx_tmp29;
HXDLIN( 444)						if (hx::IsNotNull( _this )) {
HXLINE( 444)							_hx_tmp29 = _this->zpp_disp;
            						}
            						else {
HXLINE( 444)							_hx_tmp29 = false;
            						}
HXDLIN( 444)						if (_hx_tmp29) {
HXLINE( 444)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 444)						{
HXLINE( 444)							 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 444)							if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 444)								_this6->_validate();
            							}
            						}
HXDLIN( 444)						_hx_tmp27 = (_this->zpp_inner->y == y);
            					}
            					else {
HXLINE( 444)						_hx_tmp27 = false;
            					}
HXDLIN( 444)					if (!(_hx_tmp27)) {
HXLINE( 444)						{
HXLINE( 444)							_this->zpp_inner->x = x;
HXDLIN( 444)							_this->zpp_inner->y = y;
            						}
HXDLIN( 444)						{
HXLINE( 444)							 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 444)							if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 444)								_this7->_invalidate(_this7);
            							}
            						}
            					}
HXDLIN( 444)					 ::nape::geom::Vec2 ret = _this;
HXDLIN( 444)					if (anchor1->zpp_inner->weak) {
HXLINE( 444)						bool _hx_tmp30;
HXDLIN( 444)						if (hx::IsNotNull( anchor1 )) {
HXLINE( 444)							_hx_tmp30 = anchor1->zpp_disp;
            						}
            						else {
HXLINE( 444)							_hx_tmp30 = false;
            						}
HXDLIN( 444)						if (_hx_tmp30) {
HXLINE( 444)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 444)						{
HXLINE( 444)							 ::zpp_nape::geom::ZPP_Vec2 _this8 = anchor1->zpp_inner;
HXDLIN( 444)							if (_this8->_immutable) {
HXLINE( 444)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 444)							if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 444)								_this8->_isimmutable();
            							}
            						}
HXDLIN( 444)						if (anchor1->zpp_inner->_inuse) {
HXLINE( 444)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 444)						 ::zpp_nape::geom::ZPP_Vec2 inner = anchor1->zpp_inner;
HXDLIN( 444)						anchor1->zpp_inner->outer = null();
HXDLIN( 444)						anchor1->zpp_inner = null();
HXDLIN( 444)						{
HXLINE( 444)							 ::nape::geom::Vec2 o = anchor1;
HXDLIN( 444)							o->zpp_pool = null();
HXDLIN( 444)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 444)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            							}
            							else {
HXLINE( 444)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            							}
HXDLIN( 444)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 444)							o->zpp_disp = true;
            						}
HXDLIN( 444)						{
HXLINE( 444)							 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 444)							{
HXLINE( 444)								if (hx::IsNotNull( o1->outer )) {
HXLINE( 444)									o1->outer->zpp_inner = null();
HXDLIN( 444)									o1->outer = null();
            								}
HXDLIN( 444)								o1->_isimmutable = null();
HXDLIN( 444)								o1->_validate = null();
HXDLIN( 444)								o1->_invalidate = null();
            							}
HXDLIN( 444)							o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 444)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            						}
            					}
            				}
            			}
HXDLIN( 444)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 444)				this->zpp_inner_zn->setup_a1();
            			}
            		}
HXLINE( 445)		{
HXLINE( 445)			{
HXLINE( 445)				bool _hx_tmp31;
HXDLIN( 445)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 445)					_hx_tmp31 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 445)					_hx_tmp31 = false;
            				}
HXDLIN( 445)				if (_hx_tmp31) {
HXLINE( 445)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 445)				if (hx::IsNull( anchor2 )) {
HXLINE( 445)					HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor2",1d,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            				}
HXDLIN( 445)				{
HXLINE( 445)					if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 445)						this->zpp_inner_zn->setup_a2();
            					}
HXDLIN( 445)					 ::nape::geom::Vec2 _this9 = this->zpp_inner_zn->wrap_a2;
HXDLIN( 445)					bool _hx_tmp32;
HXDLIN( 445)					if (hx::IsNotNull( _this9 )) {
HXLINE( 445)						_hx_tmp32 = _this9->zpp_disp;
            					}
            					else {
HXLINE( 445)						_hx_tmp32 = false;
            					}
HXDLIN( 445)					if (_hx_tmp32) {
HXLINE( 445)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 445)					bool _hx_tmp33;
HXDLIN( 445)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 445)						_hx_tmp33 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 445)						_hx_tmp33 = false;
            					}
HXDLIN( 445)					if (_hx_tmp33) {
HXLINE( 445)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 445)					{
HXLINE( 445)						 ::zpp_nape::geom::ZPP_Vec2 _this10 = _this9->zpp_inner;
HXDLIN( 445)						if (_this10->_immutable) {
HXLINE( 445)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 445)						if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 445)							_this10->_isimmutable();
            						}
            					}
HXDLIN( 445)					if (hx::IsNull( anchor2 )) {
HXLINE( 445)						HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            					}
HXDLIN( 445)					bool _hx_tmp34;
HXDLIN( 445)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 445)						_hx_tmp34 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 445)						_hx_tmp34 = false;
            					}
HXDLIN( 445)					if (_hx_tmp34) {
HXLINE( 445)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 445)					{
HXLINE( 445)						 ::zpp_nape::geom::ZPP_Vec2 _this11 = anchor2->zpp_inner;
HXDLIN( 445)						if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 445)							_this11->_validate();
            						}
            					}
HXDLIN( 445)					Float x1 = anchor2->zpp_inner->x;
HXDLIN( 445)					bool _hx_tmp35;
HXDLIN( 445)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 445)						_hx_tmp35 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 445)						_hx_tmp35 = false;
            					}
HXDLIN( 445)					if (_hx_tmp35) {
HXLINE( 445)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 445)					{
HXLINE( 445)						 ::zpp_nape::geom::ZPP_Vec2 _this12 = anchor2->zpp_inner;
HXDLIN( 445)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 445)							_this12->_validate();
            						}
            					}
HXDLIN( 445)					Float y1 = anchor2->zpp_inner->y;
HXDLIN( 445)					bool _hx_tmp36;
HXDLIN( 445)					if (hx::IsNotNull( _this9 )) {
HXLINE( 445)						_hx_tmp36 = _this9->zpp_disp;
            					}
            					else {
HXLINE( 445)						_hx_tmp36 = false;
            					}
HXDLIN( 445)					if (_hx_tmp36) {
HXLINE( 445)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 445)					{
HXLINE( 445)						 ::zpp_nape::geom::ZPP_Vec2 _this13 = _this9->zpp_inner;
HXDLIN( 445)						if (_this13->_immutable) {
HXLINE( 445)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 445)						if (hx::IsNotNull( _this13->_isimmutable )) {
HXLINE( 445)							_this13->_isimmutable();
            						}
            					}
HXDLIN( 445)					bool _hx_tmp37;
HXDLIN( 445)					if ((x1 == x1)) {
HXLINE( 445)						_hx_tmp37 = (y1 != y1);
            					}
            					else {
HXLINE( 445)						_hx_tmp37 = true;
            					}
HXDLIN( 445)					if (_hx_tmp37) {
HXLINE( 445)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 445)					bool _hx_tmp38;
HXDLIN( 445)					bool _hx_tmp39;
HXDLIN( 445)					if (hx::IsNotNull( _this9 )) {
HXLINE( 445)						_hx_tmp39 = _this9->zpp_disp;
            					}
            					else {
HXLINE( 445)						_hx_tmp39 = false;
            					}
HXDLIN( 445)					if (_hx_tmp39) {
HXLINE( 445)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 445)					{
HXLINE( 445)						 ::zpp_nape::geom::ZPP_Vec2 _this14 = _this9->zpp_inner;
HXDLIN( 445)						if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 445)							_this14->_validate();
            						}
            					}
HXDLIN( 445)					if ((_this9->zpp_inner->x == x1)) {
HXLINE( 445)						bool _hx_tmp40;
HXDLIN( 445)						if (hx::IsNotNull( _this9 )) {
HXLINE( 445)							_hx_tmp40 = _this9->zpp_disp;
            						}
            						else {
HXLINE( 445)							_hx_tmp40 = false;
            						}
HXDLIN( 445)						if (_hx_tmp40) {
HXLINE( 445)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 445)						{
HXLINE( 445)							 ::zpp_nape::geom::ZPP_Vec2 _this15 = _this9->zpp_inner;
HXDLIN( 445)							if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 445)								_this15->_validate();
            							}
            						}
HXDLIN( 445)						_hx_tmp38 = (_this9->zpp_inner->y == y1);
            					}
            					else {
HXLINE( 445)						_hx_tmp38 = false;
            					}
HXDLIN( 445)					if (!(_hx_tmp38)) {
HXLINE( 445)						{
HXLINE( 445)							_this9->zpp_inner->x = x1;
HXDLIN( 445)							_this9->zpp_inner->y = y1;
            						}
HXDLIN( 445)						{
HXLINE( 445)							 ::zpp_nape::geom::ZPP_Vec2 _this16 = _this9->zpp_inner;
HXDLIN( 445)							if (hx::IsNotNull( _this16->_invalidate )) {
HXLINE( 445)								_this16->_invalidate(_this16);
            							}
            						}
            					}
HXDLIN( 445)					 ::nape::geom::Vec2 ret1 = _this9;
HXDLIN( 445)					if (anchor2->zpp_inner->weak) {
HXLINE( 445)						bool _hx_tmp41;
HXDLIN( 445)						if (hx::IsNotNull( anchor2 )) {
HXLINE( 445)							_hx_tmp41 = anchor2->zpp_disp;
            						}
            						else {
HXLINE( 445)							_hx_tmp41 = false;
            						}
HXDLIN( 445)						if (_hx_tmp41) {
HXLINE( 445)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 445)						{
HXLINE( 445)							 ::zpp_nape::geom::ZPP_Vec2 _this17 = anchor2->zpp_inner;
HXDLIN( 445)							if (_this17->_immutable) {
HXLINE( 445)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 445)							if (hx::IsNotNull( _this17->_isimmutable )) {
HXLINE( 445)								_this17->_isimmutable();
            							}
            						}
HXDLIN( 445)						if (anchor2->zpp_inner->_inuse) {
HXLINE( 445)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 445)						 ::zpp_nape::geom::ZPP_Vec2 inner1 = anchor2->zpp_inner;
HXDLIN( 445)						anchor2->zpp_inner->outer = null();
HXDLIN( 445)						anchor2->zpp_inner = null();
HXDLIN( 445)						{
HXLINE( 445)							 ::nape::geom::Vec2 o2 = anchor2;
HXDLIN( 445)							o2->zpp_pool = null();
HXDLIN( 445)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 445)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            							}
            							else {
HXLINE( 445)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            							}
HXDLIN( 445)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 445)							o2->zpp_disp = true;
            						}
HXDLIN( 445)						{
HXLINE( 445)							 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 445)							{
HXLINE( 445)								if (hx::IsNotNull( o3->outer )) {
HXLINE( 445)									o3->outer->zpp_inner = null();
HXDLIN( 445)									o3->outer = null();
            								}
HXDLIN( 445)								o3->_isimmutable = null();
HXDLIN( 445)								o3->_validate = null();
HXDLIN( 445)								o3->_invalidate = null();
            							}
HXDLIN( 445)							o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 445)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            						}
            					}
            				}
            			}
HXDLIN( 445)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 445)				this->zpp_inner_zn->setup_a2();
            			}
            		}
HXLINE( 446)		{
HXLINE( 446)			{
HXLINE( 446)				bool _hx_tmp42;
HXDLIN( 446)				if (hx::IsNotNull( direction )) {
HXLINE( 446)					_hx_tmp42 = direction->zpp_disp;
            				}
            				else {
HXLINE( 446)					_hx_tmp42 = false;
            				}
HXDLIN( 446)				if (_hx_tmp42) {
HXLINE( 446)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 446)				if (hx::IsNull( direction )) {
HXLINE( 446)					HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("direction",3f,62,40,10)) + HX_(" cannot be null",07,dc,5d,15)));
            				}
HXDLIN( 446)				{
HXLINE( 446)					if (hx::IsNull( this->zpp_inner_zn->wrap_n )) {
HXLINE( 446)						this->zpp_inner_zn->setup_n();
            					}
HXDLIN( 446)					 ::nape::geom::Vec2 _this18 = this->zpp_inner_zn->wrap_n;
HXDLIN( 446)					bool _hx_tmp43;
HXDLIN( 446)					if (hx::IsNotNull( _this18 )) {
HXLINE( 446)						_hx_tmp43 = _this18->zpp_disp;
            					}
            					else {
HXLINE( 446)						_hx_tmp43 = false;
            					}
HXDLIN( 446)					if (_hx_tmp43) {
HXLINE( 446)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 446)					bool _hx_tmp44;
HXDLIN( 446)					if (hx::IsNotNull( direction )) {
HXLINE( 446)						_hx_tmp44 = direction->zpp_disp;
            					}
            					else {
HXLINE( 446)						_hx_tmp44 = false;
            					}
HXDLIN( 446)					if (_hx_tmp44) {
HXLINE( 446)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 446)					{
HXLINE( 446)						 ::zpp_nape::geom::ZPP_Vec2 _this19 = _this18->zpp_inner;
HXDLIN( 446)						if (_this19->_immutable) {
HXLINE( 446)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 446)						if (hx::IsNotNull( _this19->_isimmutable )) {
HXLINE( 446)							_this19->_isimmutable();
            						}
            					}
HXDLIN( 446)					if (hx::IsNull( direction )) {
HXLINE( 446)						HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            					}
HXDLIN( 446)					bool _hx_tmp45;
HXDLIN( 446)					if (hx::IsNotNull( direction )) {
HXLINE( 446)						_hx_tmp45 = direction->zpp_disp;
            					}
            					else {
HXLINE( 446)						_hx_tmp45 = false;
            					}
HXDLIN( 446)					if (_hx_tmp45) {
HXLINE( 446)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 446)					{
HXLINE( 446)						 ::zpp_nape::geom::ZPP_Vec2 _this20 = direction->zpp_inner;
HXDLIN( 446)						if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 446)							_this20->_validate();
            						}
            					}
HXDLIN( 446)					Float x2 = direction->zpp_inner->x;
HXDLIN( 446)					bool _hx_tmp46;
HXDLIN( 446)					if (hx::IsNotNull( direction )) {
HXLINE( 446)						_hx_tmp46 = direction->zpp_disp;
            					}
            					else {
HXLINE( 446)						_hx_tmp46 = false;
            					}
HXDLIN( 446)					if (_hx_tmp46) {
HXLINE( 446)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 446)					{
HXLINE( 446)						 ::zpp_nape::geom::ZPP_Vec2 _this21 = direction->zpp_inner;
HXDLIN( 446)						if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 446)							_this21->_validate();
            						}
            					}
HXDLIN( 446)					Float y2 = direction->zpp_inner->y;
HXDLIN( 446)					bool _hx_tmp47;
HXDLIN( 446)					if (hx::IsNotNull( _this18 )) {
HXLINE( 446)						_hx_tmp47 = _this18->zpp_disp;
            					}
            					else {
HXLINE( 446)						_hx_tmp47 = false;
            					}
HXDLIN( 446)					if (_hx_tmp47) {
HXLINE( 446)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 446)					{
HXLINE( 446)						 ::zpp_nape::geom::ZPP_Vec2 _this22 = _this18->zpp_inner;
HXDLIN( 446)						if (_this22->_immutable) {
HXLINE( 446)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 446)						if (hx::IsNotNull( _this22->_isimmutable )) {
HXLINE( 446)							_this22->_isimmutable();
            						}
            					}
HXDLIN( 446)					bool _hx_tmp48;
HXDLIN( 446)					if ((x2 == x2)) {
HXLINE( 446)						_hx_tmp48 = (y2 != y2);
            					}
            					else {
HXLINE( 446)						_hx_tmp48 = true;
            					}
HXDLIN( 446)					if (_hx_tmp48) {
HXLINE( 446)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 446)					bool _hx_tmp49;
HXDLIN( 446)					bool _hx_tmp50;
HXDLIN( 446)					if (hx::IsNotNull( _this18 )) {
HXLINE( 446)						_hx_tmp50 = _this18->zpp_disp;
            					}
            					else {
HXLINE( 446)						_hx_tmp50 = false;
            					}
HXDLIN( 446)					if (_hx_tmp50) {
HXLINE( 446)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 446)					{
HXLINE( 446)						 ::zpp_nape::geom::ZPP_Vec2 _this23 = _this18->zpp_inner;
HXDLIN( 446)						if (hx::IsNotNull( _this23->_validate )) {
HXLINE( 446)							_this23->_validate();
            						}
            					}
HXDLIN( 446)					if ((_this18->zpp_inner->x == x2)) {
HXLINE( 446)						bool _hx_tmp51;
HXDLIN( 446)						if (hx::IsNotNull( _this18 )) {
HXLINE( 446)							_hx_tmp51 = _this18->zpp_disp;
            						}
            						else {
HXLINE( 446)							_hx_tmp51 = false;
            						}
HXDLIN( 446)						if (_hx_tmp51) {
HXLINE( 446)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 446)						{
HXLINE( 446)							 ::zpp_nape::geom::ZPP_Vec2 _this24 = _this18->zpp_inner;
HXDLIN( 446)							if (hx::IsNotNull( _this24->_validate )) {
HXLINE( 446)								_this24->_validate();
            							}
            						}
HXDLIN( 446)						_hx_tmp49 = (_this18->zpp_inner->y == y2);
            					}
            					else {
HXLINE( 446)						_hx_tmp49 = false;
            					}
HXDLIN( 446)					if (!(_hx_tmp49)) {
HXLINE( 446)						{
HXLINE( 446)							_this18->zpp_inner->x = x2;
HXDLIN( 446)							_this18->zpp_inner->y = y2;
            						}
HXDLIN( 446)						{
HXLINE( 446)							 ::zpp_nape::geom::ZPP_Vec2 _this25 = _this18->zpp_inner;
HXDLIN( 446)							if (hx::IsNotNull( _this25->_invalidate )) {
HXLINE( 446)								_this25->_invalidate(_this25);
            							}
            						}
            					}
HXDLIN( 446)					 ::nape::geom::Vec2 ret2 = _this18;
HXDLIN( 446)					if (direction->zpp_inner->weak) {
HXLINE( 446)						bool _hx_tmp52;
HXDLIN( 446)						if (hx::IsNotNull( direction )) {
HXLINE( 446)							_hx_tmp52 = direction->zpp_disp;
            						}
            						else {
HXLINE( 446)							_hx_tmp52 = false;
            						}
HXDLIN( 446)						if (_hx_tmp52) {
HXLINE( 446)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 446)						{
HXLINE( 446)							 ::zpp_nape::geom::ZPP_Vec2 _this26 = direction->zpp_inner;
HXDLIN( 446)							if (_this26->_immutable) {
HXLINE( 446)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 446)							if (hx::IsNotNull( _this26->_isimmutable )) {
HXLINE( 446)								_this26->_isimmutable();
            							}
            						}
HXDLIN( 446)						if (direction->zpp_inner->_inuse) {
HXLINE( 446)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 446)						 ::zpp_nape::geom::ZPP_Vec2 inner2 = direction->zpp_inner;
HXDLIN( 446)						direction->zpp_inner->outer = null();
HXDLIN( 446)						direction->zpp_inner = null();
HXDLIN( 446)						{
HXLINE( 446)							 ::nape::geom::Vec2 o4 = direction;
HXDLIN( 446)							o4->zpp_pool = null();
HXDLIN( 446)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 446)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o4;
            							}
            							else {
HXLINE( 446)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o4;
            							}
HXDLIN( 446)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o4;
HXDLIN( 446)							o4->zpp_disp = true;
            						}
HXDLIN( 446)						{
HXLINE( 446)							 ::zpp_nape::geom::ZPP_Vec2 o5 = inner2;
HXDLIN( 446)							{
HXLINE( 446)								if (hx::IsNotNull( o5->outer )) {
HXLINE( 446)									o5->outer->zpp_inner = null();
HXDLIN( 446)									o5->outer = null();
            								}
HXDLIN( 446)								o5->_isimmutable = null();
HXDLIN( 446)								o5->_validate = null();
HXDLIN( 446)								o5->_invalidate = null();
            							}
HXDLIN( 446)							o5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 446)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o5;
            						}
            					}
            				}
            			}
HXDLIN( 446)			if (hx::IsNull( this->zpp_inner_zn->wrap_n )) {
HXLINE( 446)				this->zpp_inner_zn->setup_n();
            			}
            		}
HXLINE( 447)		{
HXLINE( 447)			this->zpp_inner->immutable_midstep(HX_("LineJoint::jointMin",3e,e1,3a,51));
HXDLIN( 447)			if ((jointMin != jointMin)) {
HXLINE( 447)				HX_STACK_DO_THROW(HX_("Error: AngleJoint::jointMin cannot be NaN",a8,63,9e,8c));
            			}
HXDLIN( 447)			if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 447)				this->zpp_inner_zn->jointMin = jointMin;
HXDLIN( 447)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 448)		{
HXLINE( 448)			this->zpp_inner->immutable_midstep(HX_("LineJoint::jointMax",50,da,3a,51));
HXDLIN( 448)			if ((jointMax != jointMax)) {
HXLINE( 448)				HX_STACK_DO_THROW(HX_("Error: AngleJoint::jointMax cannot be NaN",3a,58,f1,24));
            			}
HXDLIN( 448)			if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 448)				this->zpp_inner_zn->jointMax = jointMax;
HXDLIN( 448)				this->zpp_inner->wake();
            			}
            		}
            	}

Dynamic LineJoint_obj::__CreateEmpty() { return new LineJoint_obj; }

void *LineJoint_obj::_hx_vtable = 0;

Dynamic LineJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LineJoint_obj > _hx_result = new LineJoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool LineJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00e9fd26) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
	} else {
		return inClassId==(int)0x4a50e1f1;
	}
}

 ::nape::phys::Body LineJoint_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_222_get_body1)
HXDLIN( 222)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXDLIN( 222)			return null();
            		}
            		else {
HXDLIN( 222)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 222)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_body1,return )

 ::nape::phys::Body LineJoint_obj::set_body1( ::nape::phys::Body body1){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_224_set_body1)
HXLINE( 225)		{
HXLINE( 226)			this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body1",4f,d3,ef,b6)));
HXLINE( 227)			 ::zpp_nape::phys::ZPP_Body inbody1;
HXDLIN( 227)			if (hx::IsNull( body1 )) {
HXLINE( 227)				inbody1 = null();
            			}
            			else {
HXLINE( 227)				inbody1 = body1->zpp_inner;
            			}
HXLINE( 228)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 229)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 230)					bool _hx_tmp;
HXDLIN( 230)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 230)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 230)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 230)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 230)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 230)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 230)						_hx_tmp = false;
            					}
HXDLIN( 230)					if (_hx_tmp) {
HXLINE( 232)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 232)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 235)					bool _hx_tmp2;
HXDLIN( 235)					if (this->zpp_inner->active) {
HXLINE( 235)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 235)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 235)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 235)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 235)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 235)						_hx_tmp2 = false;
            					}
HXDLIN( 235)					if (_hx_tmp2) {
HXLINE( 235)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXLINE( 237)				this->zpp_inner_zn->b1 = inbody1;
HXLINE( 238)				bool _hx_tmp4;
HXDLIN( 238)				bool _hx_tmp5;
HXDLIN( 238)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 238)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 238)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 238)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 238)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 238)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 238)					_hx_tmp5 = false;
            				}
HXDLIN( 238)				if (_hx_tmp5) {
HXLINE( 238)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 238)					_hx_tmp4 = false;
            				}
HXDLIN( 238)				if (_hx_tmp4) {
HXLINE( 240)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 240)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 243)				bool _hx_tmp7;
HXDLIN( 243)				if (this->zpp_inner->active) {
HXLINE( 243)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 243)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 243)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 243)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 243)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 243)					_hx_tmp7 = false;
            				}
HXDLIN( 243)				if (_hx_tmp7) {
HXLINE( 244)					this->zpp_inner->wake();
HXLINE( 245)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 245)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 249)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 249)			return null();
            		}
            		else {
HXLINE( 249)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 249)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_body1,return )

 ::nape::phys::Body LineJoint_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_260_get_body2)
HXDLIN( 260)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXDLIN( 260)			return null();
            		}
            		else {
HXDLIN( 260)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 260)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_body2,return )

 ::nape::phys::Body LineJoint_obj::set_body2( ::nape::phys::Body body2){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_262_set_body2)
HXLINE( 263)		{
HXLINE( 264)			this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body2",50,d3,ef,b6)));
HXLINE( 265)			 ::zpp_nape::phys::ZPP_Body inbody2;
HXDLIN( 265)			if (hx::IsNull( body2 )) {
HXLINE( 265)				inbody2 = null();
            			}
            			else {
HXLINE( 265)				inbody2 = body2->zpp_inner;
            			}
HXLINE( 266)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 267)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 268)					bool _hx_tmp;
HXDLIN( 268)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 268)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 268)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 268)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 268)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 268)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 268)						_hx_tmp = false;
            					}
HXDLIN( 268)					if (_hx_tmp) {
HXLINE( 270)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 270)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 273)					bool _hx_tmp2;
HXDLIN( 273)					if (this->zpp_inner->active) {
HXLINE( 273)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 273)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 273)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 273)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 273)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 273)						_hx_tmp2 = false;
            					}
HXDLIN( 273)					if (_hx_tmp2) {
HXLINE( 273)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXLINE( 275)				this->zpp_inner_zn->b2 = inbody2;
HXLINE( 276)				bool _hx_tmp4;
HXDLIN( 276)				bool _hx_tmp5;
HXDLIN( 276)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 276)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 276)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 276)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 276)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 276)					_hx_tmp5 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 276)					_hx_tmp5 = false;
            				}
HXDLIN( 276)				if (_hx_tmp5) {
HXLINE( 276)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 276)					_hx_tmp4 = false;
            				}
HXDLIN( 276)				if (_hx_tmp4) {
HXLINE( 278)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 278)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 281)				bool _hx_tmp7;
HXDLIN( 281)				if (this->zpp_inner->active) {
HXLINE( 281)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 281)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 281)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 281)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 281)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 281)					_hx_tmp7 = false;
            				}
HXDLIN( 281)				if (_hx_tmp7) {
HXLINE( 282)					this->zpp_inner->wake();
HXLINE( 283)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 283)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 287)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 287)			return null();
            		}
            		else {
HXLINE( 287)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 287)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_body2,return )

 ::nape::geom::Vec2 LineJoint_obj::get_anchor1(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_296_get_anchor1)
HXLINE( 297)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 297)			this->zpp_inner_zn->setup_a1();
            		}
HXLINE( 298)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_anchor1,return )

 ::nape::geom::Vec2 LineJoint_obj::set_anchor1( ::nape::geom::Vec2 anchor1){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_300_set_anchor1)
HXLINE( 301)		{
HXLINE( 304)			bool _hx_tmp;
HXDLIN( 304)			if (hx::IsNotNull( anchor1 )) {
HXLINE( 304)				_hx_tmp = anchor1->zpp_disp;
            			}
            			else {
HXLINE( 304)				_hx_tmp = false;
            			}
HXDLIN( 304)			if (_hx_tmp) {
HXLINE( 304)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 308)			if (hx::IsNull( anchor1 )) {
HXLINE( 308)				HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor1",1c,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            			}
HXLINE( 310)			{
HXLINE( 310)				if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 310)					this->zpp_inner_zn->setup_a1();
            				}
HXDLIN( 310)				 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_a1;
HXDLIN( 310)				bool _hx_tmp1;
HXDLIN( 310)				if (hx::IsNotNull( _this )) {
HXLINE( 310)					_hx_tmp1 = _this->zpp_disp;
            				}
            				else {
HXLINE( 310)					_hx_tmp1 = false;
            				}
HXDLIN( 310)				if (_hx_tmp1) {
HXLINE( 310)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 310)				bool _hx_tmp2;
HXDLIN( 310)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 310)					_hx_tmp2 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 310)					_hx_tmp2 = false;
            				}
HXDLIN( 310)				if (_hx_tmp2) {
HXLINE( 310)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 310)				{
HXLINE( 310)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 310)					if (_this1->_immutable) {
HXLINE( 310)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 310)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 310)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 310)				if (hx::IsNull( anchor1 )) {
HXLINE( 310)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 310)				bool _hx_tmp3;
HXDLIN( 310)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 310)					_hx_tmp3 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 310)					_hx_tmp3 = false;
            				}
HXDLIN( 310)				if (_hx_tmp3) {
HXLINE( 310)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 310)				{
HXLINE( 310)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = anchor1->zpp_inner;
HXDLIN( 310)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 310)						_this2->_validate();
            					}
            				}
HXDLIN( 310)				Float x = anchor1->zpp_inner->x;
HXDLIN( 310)				bool _hx_tmp4;
HXDLIN( 310)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 310)					_hx_tmp4 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 310)					_hx_tmp4 = false;
            				}
HXDLIN( 310)				if (_hx_tmp4) {
HXLINE( 310)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 310)				{
HXLINE( 310)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = anchor1->zpp_inner;
HXDLIN( 310)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 310)						_this3->_validate();
            					}
            				}
HXDLIN( 310)				Float y = anchor1->zpp_inner->y;
HXDLIN( 310)				bool _hx_tmp5;
HXDLIN( 310)				if (hx::IsNotNull( _this )) {
HXLINE( 310)					_hx_tmp5 = _this->zpp_disp;
            				}
            				else {
HXLINE( 310)					_hx_tmp5 = false;
            				}
HXDLIN( 310)				if (_hx_tmp5) {
HXLINE( 310)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 310)				{
HXLINE( 310)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 310)					if (_this4->_immutable) {
HXLINE( 310)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 310)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 310)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 310)				bool _hx_tmp6;
HXDLIN( 310)				if ((x == x)) {
HXLINE( 310)					_hx_tmp6 = (y != y);
            				}
            				else {
HXLINE( 310)					_hx_tmp6 = true;
            				}
HXDLIN( 310)				if (_hx_tmp6) {
HXLINE( 310)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 310)				bool _hx_tmp7;
HXDLIN( 310)				bool _hx_tmp8;
HXDLIN( 310)				if (hx::IsNotNull( _this )) {
HXLINE( 310)					_hx_tmp8 = _this->zpp_disp;
            				}
            				else {
HXLINE( 310)					_hx_tmp8 = false;
            				}
HXDLIN( 310)				if (_hx_tmp8) {
HXLINE( 310)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 310)				{
HXLINE( 310)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 310)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 310)						_this5->_validate();
            					}
            				}
HXDLIN( 310)				if ((_this->zpp_inner->x == x)) {
HXLINE( 310)					bool _hx_tmp9;
HXDLIN( 310)					if (hx::IsNotNull( _this )) {
HXLINE( 310)						_hx_tmp9 = _this->zpp_disp;
            					}
            					else {
HXLINE( 310)						_hx_tmp9 = false;
            					}
HXDLIN( 310)					if (_hx_tmp9) {
HXLINE( 310)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 310)					{
HXLINE( 310)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 310)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 310)							_this6->_validate();
            						}
            					}
HXDLIN( 310)					_hx_tmp7 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 310)					_hx_tmp7 = false;
            				}
HXDLIN( 310)				if (!(_hx_tmp7)) {
HXLINE( 310)					{
HXLINE( 310)						_this->zpp_inner->x = x;
HXDLIN( 310)						_this->zpp_inner->y = y;
            					}
HXDLIN( 310)					{
HXLINE( 310)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 310)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 310)							_this7->_invalidate(_this7);
            						}
            					}
            				}
HXDLIN( 310)				 ::nape::geom::Vec2 ret = _this;
HXDLIN( 310)				if (anchor1->zpp_inner->weak) {
HXLINE( 310)					bool _hx_tmp10;
HXDLIN( 310)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 310)						_hx_tmp10 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 310)						_hx_tmp10 = false;
            					}
HXDLIN( 310)					if (_hx_tmp10) {
HXLINE( 310)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 310)					{
HXLINE( 310)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = anchor1->zpp_inner;
HXDLIN( 310)						if (_this8->_immutable) {
HXLINE( 310)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 310)						if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 310)							_this8->_isimmutable();
            						}
            					}
HXDLIN( 310)					if (anchor1->zpp_inner->_inuse) {
HXLINE( 310)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 310)					 ::zpp_nape::geom::ZPP_Vec2 inner = anchor1->zpp_inner;
HXDLIN( 310)					anchor1->zpp_inner->outer = null();
HXDLIN( 310)					anchor1->zpp_inner = null();
HXDLIN( 310)					{
HXLINE( 310)						 ::nape::geom::Vec2 o = anchor1;
HXDLIN( 310)						o->zpp_pool = null();
HXDLIN( 310)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 310)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 310)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 310)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 310)						o->zpp_disp = true;
            					}
HXDLIN( 310)					{
HXLINE( 310)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 310)						{
HXLINE( 310)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 310)								o1->outer->zpp_inner = null();
HXDLIN( 310)								o1->outer = null();
            							}
HXDLIN( 310)							o1->_isimmutable = null();
HXDLIN( 310)							o1->_validate = null();
HXDLIN( 310)							o1->_invalidate = null();
            						}
HXDLIN( 310)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 310)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 312)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 312)			this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 312)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_anchor1,return )

 ::nape::geom::Vec2 LineJoint_obj::get_anchor2(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_321_get_anchor2)
HXLINE( 322)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 322)			this->zpp_inner_zn->setup_a2();
            		}
HXLINE( 323)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_anchor2,return )

 ::nape::geom::Vec2 LineJoint_obj::set_anchor2( ::nape::geom::Vec2 anchor2){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_325_set_anchor2)
HXLINE( 326)		{
HXLINE( 329)			bool _hx_tmp;
HXDLIN( 329)			if (hx::IsNotNull( anchor2 )) {
HXLINE( 329)				_hx_tmp = anchor2->zpp_disp;
            			}
            			else {
HXLINE( 329)				_hx_tmp = false;
            			}
HXDLIN( 329)			if (_hx_tmp) {
HXLINE( 329)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 333)			if (hx::IsNull( anchor2 )) {
HXLINE( 333)				HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor2",1d,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            			}
HXLINE( 335)			{
HXLINE( 335)				if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 335)					this->zpp_inner_zn->setup_a2();
            				}
HXDLIN( 335)				 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_a2;
HXDLIN( 335)				bool _hx_tmp1;
HXDLIN( 335)				if (hx::IsNotNull( _this )) {
HXLINE( 335)					_hx_tmp1 = _this->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp1 = false;
            				}
HXDLIN( 335)				if (_hx_tmp1) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				bool _hx_tmp2;
HXDLIN( 335)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 335)					_hx_tmp2 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp2 = false;
            				}
HXDLIN( 335)				if (_hx_tmp2) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 335)					if (_this1->_immutable) {
HXLINE( 335)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 335)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 335)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 335)				if (hx::IsNull( anchor2 )) {
HXLINE( 335)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 335)				bool _hx_tmp3;
HXDLIN( 335)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 335)					_hx_tmp3 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp3 = false;
            				}
HXDLIN( 335)				if (_hx_tmp3) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = anchor2->zpp_inner;
HXDLIN( 335)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 335)						_this2->_validate();
            					}
            				}
HXDLIN( 335)				Float x = anchor2->zpp_inner->x;
HXDLIN( 335)				bool _hx_tmp4;
HXDLIN( 335)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 335)					_hx_tmp4 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp4 = false;
            				}
HXDLIN( 335)				if (_hx_tmp4) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = anchor2->zpp_inner;
HXDLIN( 335)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 335)						_this3->_validate();
            					}
            				}
HXDLIN( 335)				Float y = anchor2->zpp_inner->y;
HXDLIN( 335)				bool _hx_tmp5;
HXDLIN( 335)				if (hx::IsNotNull( _this )) {
HXLINE( 335)					_hx_tmp5 = _this->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp5 = false;
            				}
HXDLIN( 335)				if (_hx_tmp5) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 335)					if (_this4->_immutable) {
HXLINE( 335)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 335)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 335)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 335)				bool _hx_tmp6;
HXDLIN( 335)				if ((x == x)) {
HXLINE( 335)					_hx_tmp6 = (y != y);
            				}
            				else {
HXLINE( 335)					_hx_tmp6 = true;
            				}
HXDLIN( 335)				if (_hx_tmp6) {
HXLINE( 335)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 335)				bool _hx_tmp7;
HXDLIN( 335)				bool _hx_tmp8;
HXDLIN( 335)				if (hx::IsNotNull( _this )) {
HXLINE( 335)					_hx_tmp8 = _this->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp8 = false;
            				}
HXDLIN( 335)				if (_hx_tmp8) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 335)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 335)						_this5->_validate();
            					}
            				}
HXDLIN( 335)				if ((_this->zpp_inner->x == x)) {
HXLINE( 335)					bool _hx_tmp9;
HXDLIN( 335)					if (hx::IsNotNull( _this )) {
HXLINE( 335)						_hx_tmp9 = _this->zpp_disp;
            					}
            					else {
HXLINE( 335)						_hx_tmp9 = false;
            					}
HXDLIN( 335)					if (_hx_tmp9) {
HXLINE( 335)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 335)					{
HXLINE( 335)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 335)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 335)							_this6->_validate();
            						}
            					}
HXDLIN( 335)					_hx_tmp7 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 335)					_hx_tmp7 = false;
            				}
HXDLIN( 335)				if (!(_hx_tmp7)) {
HXLINE( 335)					{
HXLINE( 335)						_this->zpp_inner->x = x;
HXDLIN( 335)						_this->zpp_inner->y = y;
            					}
HXDLIN( 335)					{
HXLINE( 335)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 335)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 335)							_this7->_invalidate(_this7);
            						}
            					}
            				}
HXDLIN( 335)				 ::nape::geom::Vec2 ret = _this;
HXDLIN( 335)				if (anchor2->zpp_inner->weak) {
HXLINE( 335)					bool _hx_tmp10;
HXDLIN( 335)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 335)						_hx_tmp10 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 335)						_hx_tmp10 = false;
            					}
HXDLIN( 335)					if (_hx_tmp10) {
HXLINE( 335)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 335)					{
HXLINE( 335)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = anchor2->zpp_inner;
HXDLIN( 335)						if (_this8->_immutable) {
HXLINE( 335)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 335)						if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 335)							_this8->_isimmutable();
            						}
            					}
HXDLIN( 335)					if (anchor2->zpp_inner->_inuse) {
HXLINE( 335)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 335)					 ::zpp_nape::geom::ZPP_Vec2 inner = anchor2->zpp_inner;
HXDLIN( 335)					anchor2->zpp_inner->outer = null();
HXDLIN( 335)					anchor2->zpp_inner = null();
HXDLIN( 335)					{
HXLINE( 335)						 ::nape::geom::Vec2 o = anchor2;
HXDLIN( 335)						o->zpp_pool = null();
HXDLIN( 335)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 335)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 335)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 335)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 335)						o->zpp_disp = true;
            					}
HXDLIN( 335)					{
HXLINE( 335)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 335)						{
HXLINE( 335)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 335)								o1->outer->zpp_inner = null();
HXDLIN( 335)								o1->outer = null();
            							}
HXDLIN( 335)							o1->_isimmutable = null();
HXDLIN( 335)							o1->_validate = null();
HXDLIN( 335)							o1->_invalidate = null();
            						}
HXDLIN( 335)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 335)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 337)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 337)			this->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 337)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_anchor2,return )

 ::nape::geom::Vec2 LineJoint_obj::get_direction(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_347_get_direction)
HXLINE( 348)		if (hx::IsNull( this->zpp_inner_zn->wrap_n )) {
HXLINE( 348)			this->zpp_inner_zn->setup_n();
            		}
HXLINE( 349)		return this->zpp_inner_zn->wrap_n;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_direction,return )

 ::nape::geom::Vec2 LineJoint_obj::set_direction( ::nape::geom::Vec2 direction){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_351_set_direction)
HXLINE( 352)		{
HXLINE( 355)			bool _hx_tmp;
HXDLIN( 355)			if (hx::IsNotNull( direction )) {
HXLINE( 355)				_hx_tmp = direction->zpp_disp;
            			}
            			else {
HXLINE( 355)				_hx_tmp = false;
            			}
HXDLIN( 355)			if (_hx_tmp) {
HXLINE( 355)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 359)			if (hx::IsNull( direction )) {
HXLINE( 359)				HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("direction",3f,62,40,10)) + HX_(" cannot be null",07,dc,5d,15)));
            			}
HXLINE( 361)			{
HXLINE( 361)				if (hx::IsNull( this->zpp_inner_zn->wrap_n )) {
HXLINE( 361)					this->zpp_inner_zn->setup_n();
            				}
HXDLIN( 361)				 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_n;
HXDLIN( 361)				bool _hx_tmp1;
HXDLIN( 361)				if (hx::IsNotNull( _this )) {
HXLINE( 361)					_hx_tmp1 = _this->zpp_disp;
            				}
            				else {
HXLINE( 361)					_hx_tmp1 = false;
            				}
HXDLIN( 361)				if (_hx_tmp1) {
HXLINE( 361)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 361)				bool _hx_tmp2;
HXDLIN( 361)				if (hx::IsNotNull( direction )) {
HXLINE( 361)					_hx_tmp2 = direction->zpp_disp;
            				}
            				else {
HXLINE( 361)					_hx_tmp2 = false;
            				}
HXDLIN( 361)				if (_hx_tmp2) {
HXLINE( 361)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 361)				{
HXLINE( 361)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 361)					if (_this1->_immutable) {
HXLINE( 361)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 361)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 361)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 361)				if (hx::IsNull( direction )) {
HXLINE( 361)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 361)				bool _hx_tmp3;
HXDLIN( 361)				if (hx::IsNotNull( direction )) {
HXLINE( 361)					_hx_tmp3 = direction->zpp_disp;
            				}
            				else {
HXLINE( 361)					_hx_tmp3 = false;
            				}
HXDLIN( 361)				if (_hx_tmp3) {
HXLINE( 361)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 361)				{
HXLINE( 361)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = direction->zpp_inner;
HXDLIN( 361)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 361)						_this2->_validate();
            					}
            				}
HXDLIN( 361)				Float x = direction->zpp_inner->x;
HXDLIN( 361)				bool _hx_tmp4;
HXDLIN( 361)				if (hx::IsNotNull( direction )) {
HXLINE( 361)					_hx_tmp4 = direction->zpp_disp;
            				}
            				else {
HXLINE( 361)					_hx_tmp4 = false;
            				}
HXDLIN( 361)				if (_hx_tmp4) {
HXLINE( 361)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 361)				{
HXLINE( 361)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = direction->zpp_inner;
HXDLIN( 361)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 361)						_this3->_validate();
            					}
            				}
HXDLIN( 361)				Float y = direction->zpp_inner->y;
HXDLIN( 361)				bool _hx_tmp5;
HXDLIN( 361)				if (hx::IsNotNull( _this )) {
HXLINE( 361)					_hx_tmp5 = _this->zpp_disp;
            				}
            				else {
HXLINE( 361)					_hx_tmp5 = false;
            				}
HXDLIN( 361)				if (_hx_tmp5) {
HXLINE( 361)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 361)				{
HXLINE( 361)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 361)					if (_this4->_immutable) {
HXLINE( 361)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 361)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 361)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 361)				bool _hx_tmp6;
HXDLIN( 361)				if ((x == x)) {
HXLINE( 361)					_hx_tmp6 = (y != y);
            				}
            				else {
HXLINE( 361)					_hx_tmp6 = true;
            				}
HXDLIN( 361)				if (_hx_tmp6) {
HXLINE( 361)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 361)				bool _hx_tmp7;
HXDLIN( 361)				bool _hx_tmp8;
HXDLIN( 361)				if (hx::IsNotNull( _this )) {
HXLINE( 361)					_hx_tmp8 = _this->zpp_disp;
            				}
            				else {
HXLINE( 361)					_hx_tmp8 = false;
            				}
HXDLIN( 361)				if (_hx_tmp8) {
HXLINE( 361)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 361)				{
HXLINE( 361)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 361)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 361)						_this5->_validate();
            					}
            				}
HXDLIN( 361)				if ((_this->zpp_inner->x == x)) {
HXLINE( 361)					bool _hx_tmp9;
HXDLIN( 361)					if (hx::IsNotNull( _this )) {
HXLINE( 361)						_hx_tmp9 = _this->zpp_disp;
            					}
            					else {
HXLINE( 361)						_hx_tmp9 = false;
            					}
HXDLIN( 361)					if (_hx_tmp9) {
HXLINE( 361)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 361)					{
HXLINE( 361)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 361)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 361)							_this6->_validate();
            						}
            					}
HXDLIN( 361)					_hx_tmp7 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 361)					_hx_tmp7 = false;
            				}
HXDLIN( 361)				if (!(_hx_tmp7)) {
HXLINE( 361)					{
HXLINE( 361)						_this->zpp_inner->x = x;
HXDLIN( 361)						_this->zpp_inner->y = y;
            					}
HXDLIN( 361)					{
HXLINE( 361)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 361)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 361)							_this7->_invalidate(_this7);
            						}
            					}
            				}
HXDLIN( 361)				 ::nape::geom::Vec2 ret = _this;
HXDLIN( 361)				if (direction->zpp_inner->weak) {
HXLINE( 361)					bool _hx_tmp10;
HXDLIN( 361)					if (hx::IsNotNull( direction )) {
HXLINE( 361)						_hx_tmp10 = direction->zpp_disp;
            					}
            					else {
HXLINE( 361)						_hx_tmp10 = false;
            					}
HXDLIN( 361)					if (_hx_tmp10) {
HXLINE( 361)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 361)					{
HXLINE( 361)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = direction->zpp_inner;
HXDLIN( 361)						if (_this8->_immutable) {
HXLINE( 361)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 361)						if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 361)							_this8->_isimmutable();
            						}
            					}
HXDLIN( 361)					if (direction->zpp_inner->_inuse) {
HXLINE( 361)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 361)					 ::zpp_nape::geom::ZPP_Vec2 inner = direction->zpp_inner;
HXDLIN( 361)					direction->zpp_inner->outer = null();
HXDLIN( 361)					direction->zpp_inner = null();
HXDLIN( 361)					{
HXLINE( 361)						 ::nape::geom::Vec2 o = direction;
HXDLIN( 361)						o->zpp_pool = null();
HXDLIN( 361)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 361)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 361)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 361)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 361)						o->zpp_disp = true;
            					}
HXDLIN( 361)					{
HXLINE( 361)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 361)						{
HXLINE( 361)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 361)								o1->outer->zpp_inner = null();
HXDLIN( 361)								o1->outer = null();
            							}
HXDLIN( 361)							o1->_isimmutable = null();
HXDLIN( 361)							o1->_validate = null();
HXDLIN( 361)							o1->_invalidate = null();
            						}
HXDLIN( 361)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 361)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 363)		if (hx::IsNull( this->zpp_inner_zn->wrap_n )) {
HXLINE( 363)			this->zpp_inner_zn->setup_n();
            		}
HXDLIN( 363)		return this->zpp_inner_zn->wrap_n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_direction,return )

Float LineJoint_obj::get_jointMin(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_373_get_jointMin)
HXDLIN( 373)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_jointMin,return )

Float LineJoint_obj::set_jointMin(Float jointMin){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_375_set_jointMin)
HXLINE( 376)		{
HXLINE( 377)			this->zpp_inner->immutable_midstep(HX_("LineJoint::jointMin",3e,e1,3a,51));
HXLINE( 379)			if ((jointMin != jointMin)) {
HXLINE( 380)				HX_STACK_DO_THROW(HX_("Error: AngleJoint::jointMin cannot be NaN",a8,63,9e,8c));
            			}
HXLINE( 383)			if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 384)				this->zpp_inner_zn->jointMin = jointMin;
HXLINE( 385)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 388)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_jointMin,return )

Float LineJoint_obj::get_jointMax(){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_398_get_jointMax)
HXDLIN( 398)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LineJoint_obj,get_jointMax,return )

Float LineJoint_obj::set_jointMax(Float jointMax){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_400_set_jointMax)
HXLINE( 401)		{
HXLINE( 402)			this->zpp_inner->immutable_midstep(HX_("LineJoint::jointMax",50,da,3a,51));
HXLINE( 404)			if ((jointMax != jointMax)) {
HXLINE( 405)				HX_STACK_DO_THROW(HX_("Error: AngleJoint::jointMax cannot be NaN",3a,58,f1,24));
            			}
HXLINE( 408)			if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 409)				this->zpp_inner_zn->jointMax = jointMax;
HXLINE( 410)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 413)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineJoint_obj,set_jointMax,return )

 ::nape::geom::MatMN LineJoint_obj::impulse(){
            	HX_GC_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_455_impulse)
HXLINE( 456)		 ::nape::geom::MatMN ret =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,2,1);
HXLINE( 457)		{
HXLINE( 457)			bool _hx_tmp;
HXDLIN( 457)			if ((0 < ret->zpp_inner->m)) {
HXLINE( 457)				_hx_tmp = (0 >= ret->zpp_inner->n);
            			}
            			else {
HXLINE( 457)				_hx_tmp = true;
            			}
HXDLIN( 457)			if (_hx_tmp) {
HXLINE( 457)				HX_STACK_DO_THROW(HX_("Error: MatMN indices out of range",cc,72,58,e6));
            			}
HXDLIN( 457)			ret->zpp_inner->x[(0 * ret->zpp_inner->n)] = this->zpp_inner_zn->jAccx;
            		}
HXLINE( 458)		{
HXLINE( 458)			bool _hx_tmp1;
HXDLIN( 458)			if ((1 < ret->zpp_inner->m)) {
HXLINE( 458)				_hx_tmp1 = (0 >= ret->zpp_inner->n);
            			}
            			else {
HXLINE( 458)				_hx_tmp1 = true;
            			}
HXDLIN( 458)			if (_hx_tmp1) {
HXLINE( 458)				HX_STACK_DO_THROW(HX_("Error: MatMN indices out of range",cc,72,58,e6));
            			}
HXDLIN( 458)			ret->zpp_inner->x[ret->zpp_inner->n] = this->zpp_inner_zn->jAccy;
            		}
HXLINE( 459)		return ret;
            	}


 ::nape::geom::Vec3 LineJoint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_464_bodyImpulse)
HXLINE( 466)		if (hx::IsNull( body )) {
HXLINE( 467)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate impulse on null body",9d,b5,dc,16));
            		}
HXLINE( 469)		bool _hx_tmp;
HXDLIN( 469)		 ::nape::phys::Body _hx_tmp1;
HXDLIN( 469)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 469)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 469)			_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 469)		if (hx::IsNotEq( body,_hx_tmp1 )) {
HXLINE( 469)			 ::nape::phys::Body _hx_tmp2;
HXDLIN( 469)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 469)				_hx_tmp2 = null();
            			}
            			else {
HXLINE( 469)				_hx_tmp2 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 469)			_hx_tmp = hx::IsNotEq( body,_hx_tmp2 );
            		}
            		else {
HXLINE( 469)			_hx_tmp = false;
            		}
HXDLIN( 469)		if (_hx_tmp) {
HXLINE( 470)			HX_STACK_DO_THROW(HX_("Error: Body is not linked to this constraint",2e,e5,48,bf));
            		}
HXLINE( 473)		if (!(this->zpp_inner->active)) {
HXLINE( 474)			return ::nape::geom::Vec3_obj::get(null(),null(),null());
            		}
            		else {
HXLINE( 477)			return this->zpp_inner_zn->bodyImpulse(body->zpp_inner);
            		}
HXLINE( 473)		return null();
            	}


void LineJoint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_09c49cc38fbc8a37_483_visitBodies)
HXLINE( 484)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 484)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 484)			_hx_tmp = null();
            		}
            		else {
HXLINE( 484)			_hx_tmp = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 484)		if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 485)			 ::nape::phys::Body _hx_tmp1;
HXDLIN( 485)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 485)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 485)				_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 485)			lambda(_hx_tmp1);
            		}
HXLINE( 487)		bool _hx_tmp2;
HXDLIN( 487)		 ::nape::phys::Body _hx_tmp3;
HXDLIN( 487)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 487)			_hx_tmp3 = null();
            		}
            		else {
HXLINE( 487)			_hx_tmp3 = this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 487)		if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 487)			 ::nape::phys::Body _hx_tmp4;
HXDLIN( 487)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 487)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 487)				_hx_tmp4 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 487)			 ::nape::phys::Body _hx_tmp5;
HXDLIN( 487)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 487)				_hx_tmp5 = null();
            			}
            			else {
HXLINE( 487)				_hx_tmp5 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 487)			_hx_tmp2 = hx::IsNotEq( _hx_tmp4,_hx_tmp5 );
            		}
            		else {
HXLINE( 487)			_hx_tmp2 = false;
            		}
HXDLIN( 487)		if (_hx_tmp2) {
HXLINE( 488)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 488)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 488)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 488)				_hx_tmp6 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 488)			lambda(_hx_tmp6);
            		}
            	}



hx::ObjectPtr< LineJoint_obj > LineJoint_obj::__new( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2, ::nape::geom::Vec2 direction,Float jointMin,Float jointMax) {
	hx::ObjectPtr< LineJoint_obj > __this = new LineJoint_obj();
	__this->__construct(body1,body2,anchor1,anchor2,direction,jointMin,jointMax);
	return __this;
}

hx::ObjectPtr< LineJoint_obj > LineJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2, ::nape::geom::Vec2 direction,Float jointMin,Float jointMax) {
	LineJoint_obj *__this = (LineJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LineJoint_obj), true, "nape.constraint.LineJoint"));
	*(void **)__this = LineJoint_obj::_hx_vtable;
	__this->__construct(body1,body2,anchor1,anchor2,direction,jointMin,jointMax);
	return __this;
}

LineJoint_obj::LineJoint_obj()
{
}

void LineJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LineJoint);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LineJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LineJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_body1() ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_body2() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_anchor1() ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_anchor2() ); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_jointMin() ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_jointMax() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_body1") ) { return hx::Val( set_body1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_body2") ) { return hx::Val( set_body2_dyn() ); }
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_direction() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_anchor1") ) { return hx::Val( get_anchor1_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_anchor1") ) { return hx::Val( set_anchor1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_anchor2") ) { return hx::Val( get_anchor2_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_anchor2") ) { return hx::Val( set_anchor2_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn ); }
		if (HX_FIELD_EQ(inName,"get_jointMin") ) { return hx::Val( get_jointMin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_jointMin") ) { return hx::Val( set_jointMin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_jointMax") ) { return hx::Val( get_jointMax_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_jointMax") ) { return hx::Val( set_jointMax_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_direction") ) { return hx::Val( get_direction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_direction") ) { return hx::Val( set_direction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LineJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body1(inValue.Cast<  ::nape::phys::Body >()) ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body2(inValue.Cast<  ::nape::phys::Body >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor1(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor2(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMin(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMax(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_direction(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::constraint::ZPP_LineJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner_zn",22,84,fa,e0));
	outFields->push(HX_("body1",4f,d3,ef,b6));
	outFields->push(HX_("body2",50,d3,ef,b6));
	outFields->push(HX_("anchor1",1c,ec,a1,02));
	outFields->push(HX_("anchor2",1d,ec,a1,02));
	outFields->push(HX_("direction",3f,62,40,10));
	outFields->push(HX_("jointMin",68,fa,25,55));
	outFields->push(HX_("jointMax",7a,f3,25,55));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LineJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::constraint::ZPP_LineJoint */ ,(int)offsetof(LineJoint_obj,zpp_inner_zn),HX_("zpp_inner_zn",22,84,fa,e0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LineJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String LineJoint_obj_sMemberFields[] = {
	HX_("zpp_inner_zn",22,84,fa,e0),
	HX_("get_body1",a6,2f,99,fa),
	HX_("set_body1",b2,1b,ea,dd),
	HX_("get_body2",a7,2f,99,fa),
	HX_("set_body2",b3,1b,ea,dd),
	HX_("get_anchor1",33,4c,9c,88),
	HX_("set_anchor1",3f,53,09,93),
	HX_("get_anchor2",34,4c,9c,88),
	HX_("set_anchor2",40,53,09,93),
	HX_("get_direction",16,36,a4,d1),
	HX_("set_direction",22,18,aa,16),
	HX_("get_jointMin",71,ae,3f,0a),
	HX_("set_jointMin",e5,d1,38,1f),
	HX_("get_jointMax",83,a7,3f,0a),
	HX_("set_jointMax",f7,ca,38,1f),
	HX_("impulse",b5,50,bd,6d),
	HX_("bodyImpulse",33,76,a2,5f),
	HX_("visitBodies",ab,f3,5e,e4),
	::String(null()) };

hx::Class LineJoint_obj::__mClass;

void LineJoint_obj::__register()
{
	LineJoint_obj _hx_dummy;
	LineJoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.constraint.LineJoint",8b,7a,04,05);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LineJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LineJoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace constraint
