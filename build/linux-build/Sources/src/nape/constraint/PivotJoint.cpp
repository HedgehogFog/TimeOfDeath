// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_PivotJoint
#include <hxinc/nape/constraint/PivotJoint.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <hxinc/nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_PivotJoint
#include <hxinc/zpp_nape/constraint/ZPP_PivotJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <hxinc/zpp_nape/geom/ZPP_MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_186_new,"nape.constraint.PivotJoint","new",0xa526f225,"nape.constraint.PivotJoint.new","nape/constraint/PivotJoint.hx",186,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_200_get_body1,"nape.constraint.PivotJoint","get_body1",0xc3ff732b,"nape.constraint.PivotJoint.get_body1","nape/constraint/PivotJoint.hx",200,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_202_set_body1,"nape.constraint.PivotJoint","set_body1",0xa7505f37,"nape.constraint.PivotJoint.set_body1","nape/constraint/PivotJoint.hx",202,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_238_get_body2,"nape.constraint.PivotJoint","get_body2",0xc3ff732c,"nape.constraint.PivotJoint.get_body2","nape/constraint/PivotJoint.hx",238,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_240_set_body2,"nape.constraint.PivotJoint","set_body2",0xa7505f38,"nape.constraint.PivotJoint.set_body2","nape/constraint/PivotJoint.hx",240,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_274_get_anchor1,"nape.constraint.PivotJoint","get_anchor1",0x2abe3af8,"nape.constraint.PivotJoint.get_anchor1","nape/constraint/PivotJoint.hx",274,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_278_set_anchor1,"nape.constraint.PivotJoint","set_anchor1",0x352b4204,"nape.constraint.PivotJoint.set_anchor1","nape/constraint/PivotJoint.hx",278,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_299_get_anchor2,"nape.constraint.PivotJoint","get_anchor2",0x2abe3af9,"nape.constraint.PivotJoint.get_anchor2","nape/constraint/PivotJoint.hx",299,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_303_set_anchor2,"nape.constraint.PivotJoint","set_anchor2",0x352b4205,"nape.constraint.PivotJoint.set_anchor2","nape/constraint/PivotJoint.hx",303,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_351_impulse,"nape.constraint.PivotJoint","impulse",0x1f2538fa,"nape.constraint.PivotJoint.impulse","nape/constraint/PivotJoint.hx",351,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_360_bodyImpulse,"nape.constraint.PivotJoint","bodyImpulse",0x01c464f8,"nape.constraint.PivotJoint.bodyImpulse","nape/constraint/PivotJoint.hx",360,0x587fe74b)
HX_LOCAL_STACK_FRAME(_hx_pos_88f610feb8c6ea2e_379_visitBodies,"nape.constraint.PivotJoint","visitBodies",0x8680e270,"nape.constraint.PivotJoint.visitBodies","nape/constraint/PivotJoint.hx",379,0x587fe74b)
namespace nape{
namespace constraint{

void PivotJoint_obj::__construct( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2){
            	HX_GC_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_186_new)
HXLINE( 190)		this->zpp_inner_zn = null();
HXLINE( 329)		this->zpp_inner_zn =  ::zpp_nape::constraint::ZPP_PivotJoint_obj::__alloc( HX_CTX );
HXLINE( 330)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 331)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 332)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 334)		::nape::constraint::Constraint_obj::zpp_internalAlloc = true;
HXLINE( 335)		super::__construct();
HXLINE( 336)		::nape::constraint::Constraint_obj::zpp_internalAlloc = false;
HXLINE( 341)		{
HXLINE( 341)			{
HXLINE( 341)				this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body1",4f,d3,ef,b6)));
HXDLIN( 341)				 ::zpp_nape::phys::ZPP_Body inbody1;
HXDLIN( 341)				if (hx::IsNull( body1 )) {
HXLINE( 341)					inbody1 = null();
            				}
            				else {
HXLINE( 341)					inbody1 = body1->zpp_inner;
            				}
HXDLIN( 341)				if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 341)					if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 341)						bool _hx_tmp;
HXDLIN( 341)						 ::nape::space::Space _hx_tmp1;
HXDLIN( 341)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 341)							_hx_tmp1 = null();
            						}
            						else {
HXLINE( 341)							_hx_tmp1 = this->zpp_inner->space->outer;
            						}
HXDLIN( 341)						if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 341)							_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            						}
            						else {
HXLINE( 341)							_hx_tmp = false;
            						}
HXDLIN( 341)						if (_hx_tmp) {
HXLINE( 341)							if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 341)								this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            							}
            						}
HXDLIN( 341)						bool _hx_tmp2;
HXDLIN( 341)						if (this->zpp_inner->active) {
HXLINE( 341)							 ::nape::space::Space _hx_tmp3;
HXDLIN( 341)							if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 341)								_hx_tmp3 = null();
            							}
            							else {
HXLINE( 341)								_hx_tmp3 = this->zpp_inner->space->outer;
            							}
HXDLIN( 341)							_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            						}
            						else {
HXLINE( 341)							_hx_tmp2 = false;
            						}
HXDLIN( 341)						if (_hx_tmp2) {
HXLINE( 341)							this->zpp_inner_zn->b1->wake();
            						}
            					}
HXDLIN( 341)					this->zpp_inner_zn->b1 = inbody1;
HXDLIN( 341)					bool _hx_tmp4;
HXDLIN( 341)					bool _hx_tmp5;
HXDLIN( 341)					 ::nape::space::Space _hx_tmp6;
HXDLIN( 341)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 341)						_hx_tmp6 = null();
            					}
            					else {
HXLINE( 341)						_hx_tmp6 = this->zpp_inner->space->outer;
            					}
HXDLIN( 341)					if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 341)						_hx_tmp5 = hx::IsNotNull( inbody1 );
            					}
            					else {
HXLINE( 341)						_hx_tmp5 = false;
            					}
HXDLIN( 341)					if (_hx_tmp5) {
HXLINE( 341)						_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            					}
            					else {
HXLINE( 341)						_hx_tmp4 = false;
            					}
HXDLIN( 341)					if (_hx_tmp4) {
HXLINE( 341)						if (hx::IsNotNull( inbody1 )) {
HXLINE( 341)							inbody1->constraints->add(this->zpp_inner);
            						}
            					}
HXDLIN( 341)					bool _hx_tmp7;
HXDLIN( 341)					if (this->zpp_inner->active) {
HXLINE( 341)						 ::nape::space::Space _hx_tmp8;
HXDLIN( 341)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 341)							_hx_tmp8 = null();
            						}
            						else {
HXLINE( 341)							_hx_tmp8 = this->zpp_inner->space->outer;
            						}
HXDLIN( 341)						_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            					}
            					else {
HXLINE( 341)						_hx_tmp7 = false;
            					}
HXDLIN( 341)					if (_hx_tmp7) {
HXLINE( 341)						this->zpp_inner->wake();
HXDLIN( 341)						if (hx::IsNotNull( inbody1 )) {
HXLINE( 341)							inbody1->wake();
            						}
            					}
            				}
            			}
HXDLIN( 341)			bool _hx_tmp9 = hx::IsNull( this->zpp_inner_zn->b1 );
            		}
HXLINE( 342)		{
HXLINE( 342)			{
HXLINE( 342)				this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body2",50,d3,ef,b6)));
HXDLIN( 342)				 ::zpp_nape::phys::ZPP_Body inbody2;
HXDLIN( 342)				if (hx::IsNull( body2 )) {
HXLINE( 342)					inbody2 = null();
            				}
            				else {
HXLINE( 342)					inbody2 = body2->zpp_inner;
            				}
HXDLIN( 342)				if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 342)					if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 342)						bool _hx_tmp10;
HXDLIN( 342)						 ::nape::space::Space _hx_tmp11;
HXDLIN( 342)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 342)							_hx_tmp11 = null();
            						}
            						else {
HXLINE( 342)							_hx_tmp11 = this->zpp_inner->space->outer;
            						}
HXDLIN( 342)						if (hx::IsNotNull( _hx_tmp11 )) {
HXLINE( 342)							_hx_tmp10 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            						}
            						else {
HXLINE( 342)							_hx_tmp10 = false;
            						}
HXDLIN( 342)						if (_hx_tmp10) {
HXLINE( 342)							if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 342)								this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            							}
            						}
HXDLIN( 342)						bool _hx_tmp12;
HXDLIN( 342)						if (this->zpp_inner->active) {
HXLINE( 342)							 ::nape::space::Space _hx_tmp13;
HXDLIN( 342)							if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 342)								_hx_tmp13 = null();
            							}
            							else {
HXLINE( 342)								_hx_tmp13 = this->zpp_inner->space->outer;
            							}
HXDLIN( 342)							_hx_tmp12 = hx::IsNotNull( _hx_tmp13 );
            						}
            						else {
HXLINE( 342)							_hx_tmp12 = false;
            						}
HXDLIN( 342)						if (_hx_tmp12) {
HXLINE( 342)							this->zpp_inner_zn->b2->wake();
            						}
            					}
HXDLIN( 342)					this->zpp_inner_zn->b2 = inbody2;
HXDLIN( 342)					bool _hx_tmp14;
HXDLIN( 342)					bool _hx_tmp15;
HXDLIN( 342)					 ::nape::space::Space _hx_tmp16;
HXDLIN( 342)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 342)						_hx_tmp16 = null();
            					}
            					else {
HXLINE( 342)						_hx_tmp16 = this->zpp_inner->space->outer;
            					}
HXDLIN( 342)					if (hx::IsNotNull( _hx_tmp16 )) {
HXLINE( 342)						_hx_tmp15 = hx::IsNotNull( inbody2 );
            					}
            					else {
HXLINE( 342)						_hx_tmp15 = false;
            					}
HXDLIN( 342)					if (_hx_tmp15) {
HXLINE( 342)						_hx_tmp14 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            					}
            					else {
HXLINE( 342)						_hx_tmp14 = false;
            					}
HXDLIN( 342)					if (_hx_tmp14) {
HXLINE( 342)						if (hx::IsNotNull( inbody2 )) {
HXLINE( 342)							inbody2->constraints->add(this->zpp_inner);
            						}
            					}
HXDLIN( 342)					bool _hx_tmp17;
HXDLIN( 342)					if (this->zpp_inner->active) {
HXLINE( 342)						 ::nape::space::Space _hx_tmp18;
HXDLIN( 342)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 342)							_hx_tmp18 = null();
            						}
            						else {
HXLINE( 342)							_hx_tmp18 = this->zpp_inner->space->outer;
            						}
HXDLIN( 342)						_hx_tmp17 = hx::IsNotNull( _hx_tmp18 );
            					}
            					else {
HXLINE( 342)						_hx_tmp17 = false;
            					}
HXDLIN( 342)					if (_hx_tmp17) {
HXLINE( 342)						this->zpp_inner->wake();
HXDLIN( 342)						if (hx::IsNotNull( inbody2 )) {
HXLINE( 342)							inbody2->wake();
            						}
            					}
            				}
            			}
HXDLIN( 342)			bool _hx_tmp19 = hx::IsNull( this->zpp_inner_zn->b2 );
            		}
HXLINE( 343)		{
HXLINE( 343)			{
HXLINE( 343)				bool _hx_tmp20;
HXDLIN( 343)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 343)					_hx_tmp20 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 343)					_hx_tmp20 = false;
            				}
HXDLIN( 343)				if (_hx_tmp20) {
HXLINE( 343)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 343)				if (hx::IsNull( anchor1 )) {
HXLINE( 343)					HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor1",1c,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            				}
HXDLIN( 343)				{
HXLINE( 343)					if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 343)						this->zpp_inner_zn->setup_a1();
            					}
HXDLIN( 343)					 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_a1;
HXDLIN( 343)					bool _hx_tmp21;
HXDLIN( 343)					if (hx::IsNotNull( _this )) {
HXLINE( 343)						_hx_tmp21 = _this->zpp_disp;
            					}
            					else {
HXLINE( 343)						_hx_tmp21 = false;
            					}
HXDLIN( 343)					if (_hx_tmp21) {
HXLINE( 343)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 343)					bool _hx_tmp22;
HXDLIN( 343)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 343)						_hx_tmp22 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 343)						_hx_tmp22 = false;
            					}
HXDLIN( 343)					if (_hx_tmp22) {
HXLINE( 343)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 343)					{
HXLINE( 343)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 343)						if (_this1->_immutable) {
HXLINE( 343)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 343)						if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 343)							_this1->_isimmutable();
            						}
            					}
HXDLIN( 343)					if (hx::IsNull( anchor1 )) {
HXLINE( 343)						HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            					}
HXDLIN( 343)					bool _hx_tmp23;
HXDLIN( 343)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 343)						_hx_tmp23 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 343)						_hx_tmp23 = false;
            					}
HXDLIN( 343)					if (_hx_tmp23) {
HXLINE( 343)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 343)					{
HXLINE( 343)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = anchor1->zpp_inner;
HXDLIN( 343)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 343)							_this2->_validate();
            						}
            					}
HXDLIN( 343)					Float x = anchor1->zpp_inner->x;
HXDLIN( 343)					bool _hx_tmp24;
HXDLIN( 343)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 343)						_hx_tmp24 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 343)						_hx_tmp24 = false;
            					}
HXDLIN( 343)					if (_hx_tmp24) {
HXLINE( 343)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 343)					{
HXLINE( 343)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = anchor1->zpp_inner;
HXDLIN( 343)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 343)							_this3->_validate();
            						}
            					}
HXDLIN( 343)					Float y = anchor1->zpp_inner->y;
HXDLIN( 343)					bool _hx_tmp25;
HXDLIN( 343)					if (hx::IsNotNull( _this )) {
HXLINE( 343)						_hx_tmp25 = _this->zpp_disp;
            					}
            					else {
HXLINE( 343)						_hx_tmp25 = false;
            					}
HXDLIN( 343)					if (_hx_tmp25) {
HXLINE( 343)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 343)					{
HXLINE( 343)						 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 343)						if (_this4->_immutable) {
HXLINE( 343)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 343)						if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 343)							_this4->_isimmutable();
            						}
            					}
HXDLIN( 343)					bool _hx_tmp26;
HXDLIN( 343)					if ((x == x)) {
HXLINE( 343)						_hx_tmp26 = (y != y);
            					}
            					else {
HXLINE( 343)						_hx_tmp26 = true;
            					}
HXDLIN( 343)					if (_hx_tmp26) {
HXLINE( 343)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 343)					bool _hx_tmp27;
HXDLIN( 343)					bool _hx_tmp28;
HXDLIN( 343)					if (hx::IsNotNull( _this )) {
HXLINE( 343)						_hx_tmp28 = _this->zpp_disp;
            					}
            					else {
HXLINE( 343)						_hx_tmp28 = false;
            					}
HXDLIN( 343)					if (_hx_tmp28) {
HXLINE( 343)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 343)					{
HXLINE( 343)						 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 343)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 343)							_this5->_validate();
            						}
            					}
HXDLIN( 343)					if ((_this->zpp_inner->x == x)) {
HXLINE( 343)						bool _hx_tmp29;
HXDLIN( 343)						if (hx::IsNotNull( _this )) {
HXLINE( 343)							_hx_tmp29 = _this->zpp_disp;
            						}
            						else {
HXLINE( 343)							_hx_tmp29 = false;
            						}
HXDLIN( 343)						if (_hx_tmp29) {
HXLINE( 343)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 343)						{
HXLINE( 343)							 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 343)							if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 343)								_this6->_validate();
            							}
            						}
HXDLIN( 343)						_hx_tmp27 = (_this->zpp_inner->y == y);
            					}
            					else {
HXLINE( 343)						_hx_tmp27 = false;
            					}
HXDLIN( 343)					if (!(_hx_tmp27)) {
HXLINE( 343)						{
HXLINE( 343)							_this->zpp_inner->x = x;
HXDLIN( 343)							_this->zpp_inner->y = y;
            						}
HXDLIN( 343)						{
HXLINE( 343)							 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 343)							if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 343)								_this7->_invalidate(_this7);
            							}
            						}
            					}
HXDLIN( 343)					 ::nape::geom::Vec2 ret = _this;
HXDLIN( 343)					if (anchor1->zpp_inner->weak) {
HXLINE( 343)						bool _hx_tmp30;
HXDLIN( 343)						if (hx::IsNotNull( anchor1 )) {
HXLINE( 343)							_hx_tmp30 = anchor1->zpp_disp;
            						}
            						else {
HXLINE( 343)							_hx_tmp30 = false;
            						}
HXDLIN( 343)						if (_hx_tmp30) {
HXLINE( 343)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 343)						{
HXLINE( 343)							 ::zpp_nape::geom::ZPP_Vec2 _this8 = anchor1->zpp_inner;
HXDLIN( 343)							if (_this8->_immutable) {
HXLINE( 343)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 343)							if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 343)								_this8->_isimmutable();
            							}
            						}
HXDLIN( 343)						if (anchor1->zpp_inner->_inuse) {
HXLINE( 343)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 343)						 ::zpp_nape::geom::ZPP_Vec2 inner = anchor1->zpp_inner;
HXDLIN( 343)						anchor1->zpp_inner->outer = null();
HXDLIN( 343)						anchor1->zpp_inner = null();
HXDLIN( 343)						{
HXLINE( 343)							 ::nape::geom::Vec2 o = anchor1;
HXDLIN( 343)							o->zpp_pool = null();
HXDLIN( 343)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 343)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            							}
            							else {
HXLINE( 343)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            							}
HXDLIN( 343)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 343)							o->zpp_disp = true;
            						}
HXDLIN( 343)						{
HXLINE( 343)							 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 343)							{
HXLINE( 343)								if (hx::IsNotNull( o1->outer )) {
HXLINE( 343)									o1->outer->zpp_inner = null();
HXDLIN( 343)									o1->outer = null();
            								}
HXDLIN( 343)								o1->_isimmutable = null();
HXDLIN( 343)								o1->_validate = null();
HXDLIN( 343)								o1->_invalidate = null();
            							}
HXDLIN( 343)							o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 343)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            						}
            					}
            				}
            			}
HXDLIN( 343)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 343)				this->zpp_inner_zn->setup_a1();
            			}
            		}
HXLINE( 344)		{
HXLINE( 344)			{
HXLINE( 344)				bool _hx_tmp31;
HXDLIN( 344)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 344)					_hx_tmp31 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 344)					_hx_tmp31 = false;
            				}
HXDLIN( 344)				if (_hx_tmp31) {
HXLINE( 344)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 344)				if (hx::IsNull( anchor2 )) {
HXLINE( 344)					HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor2",1d,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            				}
HXDLIN( 344)				{
HXLINE( 344)					if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 344)						this->zpp_inner_zn->setup_a2();
            					}
HXDLIN( 344)					 ::nape::geom::Vec2 _this9 = this->zpp_inner_zn->wrap_a2;
HXDLIN( 344)					bool _hx_tmp32;
HXDLIN( 344)					if (hx::IsNotNull( _this9 )) {
HXLINE( 344)						_hx_tmp32 = _this9->zpp_disp;
            					}
            					else {
HXLINE( 344)						_hx_tmp32 = false;
            					}
HXDLIN( 344)					if (_hx_tmp32) {
HXLINE( 344)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 344)					bool _hx_tmp33;
HXDLIN( 344)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 344)						_hx_tmp33 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 344)						_hx_tmp33 = false;
            					}
HXDLIN( 344)					if (_hx_tmp33) {
HXLINE( 344)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 344)					{
HXLINE( 344)						 ::zpp_nape::geom::ZPP_Vec2 _this10 = _this9->zpp_inner;
HXDLIN( 344)						if (_this10->_immutable) {
HXLINE( 344)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 344)						if (hx::IsNotNull( _this10->_isimmutable )) {
HXLINE( 344)							_this10->_isimmutable();
            						}
            					}
HXDLIN( 344)					if (hx::IsNull( anchor2 )) {
HXLINE( 344)						HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            					}
HXDLIN( 344)					bool _hx_tmp34;
HXDLIN( 344)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 344)						_hx_tmp34 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 344)						_hx_tmp34 = false;
            					}
HXDLIN( 344)					if (_hx_tmp34) {
HXLINE( 344)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 344)					{
HXLINE( 344)						 ::zpp_nape::geom::ZPP_Vec2 _this11 = anchor2->zpp_inner;
HXDLIN( 344)						if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 344)							_this11->_validate();
            						}
            					}
HXDLIN( 344)					Float x1 = anchor2->zpp_inner->x;
HXDLIN( 344)					bool _hx_tmp35;
HXDLIN( 344)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 344)						_hx_tmp35 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 344)						_hx_tmp35 = false;
            					}
HXDLIN( 344)					if (_hx_tmp35) {
HXLINE( 344)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 344)					{
HXLINE( 344)						 ::zpp_nape::geom::ZPP_Vec2 _this12 = anchor2->zpp_inner;
HXDLIN( 344)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 344)							_this12->_validate();
            						}
            					}
HXDLIN( 344)					Float y1 = anchor2->zpp_inner->y;
HXDLIN( 344)					bool _hx_tmp36;
HXDLIN( 344)					if (hx::IsNotNull( _this9 )) {
HXLINE( 344)						_hx_tmp36 = _this9->zpp_disp;
            					}
            					else {
HXLINE( 344)						_hx_tmp36 = false;
            					}
HXDLIN( 344)					if (_hx_tmp36) {
HXLINE( 344)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 344)					{
HXLINE( 344)						 ::zpp_nape::geom::ZPP_Vec2 _this13 = _this9->zpp_inner;
HXDLIN( 344)						if (_this13->_immutable) {
HXLINE( 344)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 344)						if (hx::IsNotNull( _this13->_isimmutable )) {
HXLINE( 344)							_this13->_isimmutable();
            						}
            					}
HXDLIN( 344)					bool _hx_tmp37;
HXDLIN( 344)					if ((x1 == x1)) {
HXLINE( 344)						_hx_tmp37 = (y1 != y1);
            					}
            					else {
HXLINE( 344)						_hx_tmp37 = true;
            					}
HXDLIN( 344)					if (_hx_tmp37) {
HXLINE( 344)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 344)					bool _hx_tmp38;
HXDLIN( 344)					bool _hx_tmp39;
HXDLIN( 344)					if (hx::IsNotNull( _this9 )) {
HXLINE( 344)						_hx_tmp39 = _this9->zpp_disp;
            					}
            					else {
HXLINE( 344)						_hx_tmp39 = false;
            					}
HXDLIN( 344)					if (_hx_tmp39) {
HXLINE( 344)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 344)					{
HXLINE( 344)						 ::zpp_nape::geom::ZPP_Vec2 _this14 = _this9->zpp_inner;
HXDLIN( 344)						if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 344)							_this14->_validate();
            						}
            					}
HXDLIN( 344)					if ((_this9->zpp_inner->x == x1)) {
HXLINE( 344)						bool _hx_tmp40;
HXDLIN( 344)						if (hx::IsNotNull( _this9 )) {
HXLINE( 344)							_hx_tmp40 = _this9->zpp_disp;
            						}
            						else {
HXLINE( 344)							_hx_tmp40 = false;
            						}
HXDLIN( 344)						if (_hx_tmp40) {
HXLINE( 344)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 344)						{
HXLINE( 344)							 ::zpp_nape::geom::ZPP_Vec2 _this15 = _this9->zpp_inner;
HXDLIN( 344)							if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 344)								_this15->_validate();
            							}
            						}
HXDLIN( 344)						_hx_tmp38 = (_this9->zpp_inner->y == y1);
            					}
            					else {
HXLINE( 344)						_hx_tmp38 = false;
            					}
HXDLIN( 344)					if (!(_hx_tmp38)) {
HXLINE( 344)						{
HXLINE( 344)							_this9->zpp_inner->x = x1;
HXDLIN( 344)							_this9->zpp_inner->y = y1;
            						}
HXDLIN( 344)						{
HXLINE( 344)							 ::zpp_nape::geom::ZPP_Vec2 _this16 = _this9->zpp_inner;
HXDLIN( 344)							if (hx::IsNotNull( _this16->_invalidate )) {
HXLINE( 344)								_this16->_invalidate(_this16);
            							}
            						}
            					}
HXDLIN( 344)					 ::nape::geom::Vec2 ret1 = _this9;
HXDLIN( 344)					if (anchor2->zpp_inner->weak) {
HXLINE( 344)						bool _hx_tmp41;
HXDLIN( 344)						if (hx::IsNotNull( anchor2 )) {
HXLINE( 344)							_hx_tmp41 = anchor2->zpp_disp;
            						}
            						else {
HXLINE( 344)							_hx_tmp41 = false;
            						}
HXDLIN( 344)						if (_hx_tmp41) {
HXLINE( 344)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 344)						{
HXLINE( 344)							 ::zpp_nape::geom::ZPP_Vec2 _this17 = anchor2->zpp_inner;
HXDLIN( 344)							if (_this17->_immutable) {
HXLINE( 344)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 344)							if (hx::IsNotNull( _this17->_isimmutable )) {
HXLINE( 344)								_this17->_isimmutable();
            							}
            						}
HXDLIN( 344)						if (anchor2->zpp_inner->_inuse) {
HXLINE( 344)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 344)						 ::zpp_nape::geom::ZPP_Vec2 inner1 = anchor2->zpp_inner;
HXDLIN( 344)						anchor2->zpp_inner->outer = null();
HXDLIN( 344)						anchor2->zpp_inner = null();
HXDLIN( 344)						{
HXLINE( 344)							 ::nape::geom::Vec2 o2 = anchor2;
HXDLIN( 344)							o2->zpp_pool = null();
HXDLIN( 344)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 344)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            							}
            							else {
HXLINE( 344)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            							}
HXDLIN( 344)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 344)							o2->zpp_disp = true;
            						}
HXDLIN( 344)						{
HXLINE( 344)							 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 344)							{
HXLINE( 344)								if (hx::IsNotNull( o3->outer )) {
HXLINE( 344)									o3->outer->zpp_inner = null();
HXDLIN( 344)									o3->outer = null();
            								}
HXDLIN( 344)								o3->_isimmutable = null();
HXDLIN( 344)								o3->_validate = null();
HXDLIN( 344)								o3->_invalidate = null();
            							}
HXDLIN( 344)							o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 344)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            						}
            					}
            				}
            			}
HXDLIN( 344)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 344)				this->zpp_inner_zn->setup_a2();
            			}
            		}
            	}

Dynamic PivotJoint_obj::__CreateEmpty() { return new PivotJoint_obj; }

void *PivotJoint_obj::_hx_vtable = 0;

Dynamic PivotJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PivotJoint_obj > _hx_result = new PivotJoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool PivotJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00e9fd26) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
	} else {
		return inClassId==(int)0x46dc2a55;
	}
}

 ::nape::phys::Body PivotJoint_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_200_get_body1)
HXDLIN( 200)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXDLIN( 200)			return null();
            		}
            		else {
HXDLIN( 200)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 200)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PivotJoint_obj,get_body1,return )

 ::nape::phys::Body PivotJoint_obj::set_body1( ::nape::phys::Body body1){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_202_set_body1)
HXLINE( 203)		{
HXLINE( 204)			this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body1",4f,d3,ef,b6)));
HXLINE( 205)			 ::zpp_nape::phys::ZPP_Body inbody1;
HXDLIN( 205)			if (hx::IsNull( body1 )) {
HXLINE( 205)				inbody1 = null();
            			}
            			else {
HXLINE( 205)				inbody1 = body1->zpp_inner;
            			}
HXLINE( 206)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 207)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 208)					bool _hx_tmp;
HXDLIN( 208)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 208)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 208)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 208)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 208)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 208)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 208)						_hx_tmp = false;
            					}
HXDLIN( 208)					if (_hx_tmp) {
HXLINE( 210)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 210)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 213)					bool _hx_tmp2;
HXDLIN( 213)					if (this->zpp_inner->active) {
HXLINE( 213)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 213)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 213)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 213)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 213)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 213)						_hx_tmp2 = false;
            					}
HXDLIN( 213)					if (_hx_tmp2) {
HXLINE( 213)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXLINE( 215)				this->zpp_inner_zn->b1 = inbody1;
HXLINE( 216)				bool _hx_tmp4;
HXDLIN( 216)				bool _hx_tmp5;
HXDLIN( 216)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 216)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 216)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 216)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 216)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 216)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 216)					_hx_tmp5 = false;
            				}
HXDLIN( 216)				if (_hx_tmp5) {
HXLINE( 216)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 216)					_hx_tmp4 = false;
            				}
HXDLIN( 216)				if (_hx_tmp4) {
HXLINE( 218)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 218)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 221)				bool _hx_tmp7;
HXDLIN( 221)				if (this->zpp_inner->active) {
HXLINE( 221)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 221)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 221)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 221)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 221)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 221)					_hx_tmp7 = false;
            				}
HXDLIN( 221)				if (_hx_tmp7) {
HXLINE( 222)					this->zpp_inner->wake();
HXLINE( 223)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 223)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 227)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 227)			return null();
            		}
            		else {
HXLINE( 227)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 227)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PivotJoint_obj,set_body1,return )

 ::nape::phys::Body PivotJoint_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_238_get_body2)
HXDLIN( 238)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXDLIN( 238)			return null();
            		}
            		else {
HXDLIN( 238)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 238)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PivotJoint_obj,get_body2,return )

 ::nape::phys::Body PivotJoint_obj::set_body2( ::nape::phys::Body body2){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_240_set_body2)
HXLINE( 241)		{
HXLINE( 242)			this->zpp_inner->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("body2",50,d3,ef,b6)));
HXLINE( 243)			 ::zpp_nape::phys::ZPP_Body inbody2;
HXDLIN( 243)			if (hx::IsNull( body2 )) {
HXLINE( 243)				inbody2 = null();
            			}
            			else {
HXLINE( 243)				inbody2 = body2->zpp_inner;
            			}
HXLINE( 244)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 245)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 246)					bool _hx_tmp;
HXDLIN( 246)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 246)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 246)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 246)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 246)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 246)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 246)						_hx_tmp = false;
            					}
HXDLIN( 246)					if (_hx_tmp) {
HXLINE( 248)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 248)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 251)					bool _hx_tmp2;
HXDLIN( 251)					if (this->zpp_inner->active) {
HXLINE( 251)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 251)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 251)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 251)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 251)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 251)						_hx_tmp2 = false;
            					}
HXDLIN( 251)					if (_hx_tmp2) {
HXLINE( 251)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXLINE( 253)				this->zpp_inner_zn->b2 = inbody2;
HXLINE( 254)				bool _hx_tmp4;
HXDLIN( 254)				bool _hx_tmp5;
HXDLIN( 254)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 254)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 254)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 254)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 254)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 254)					_hx_tmp5 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 254)					_hx_tmp5 = false;
            				}
HXDLIN( 254)				if (_hx_tmp5) {
HXLINE( 254)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 254)					_hx_tmp4 = false;
            				}
HXDLIN( 254)				if (_hx_tmp4) {
HXLINE( 256)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 256)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 259)				bool _hx_tmp7;
HXDLIN( 259)				if (this->zpp_inner->active) {
HXLINE( 259)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 259)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 259)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 259)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 259)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 259)					_hx_tmp7 = false;
            				}
HXDLIN( 259)				if (_hx_tmp7) {
HXLINE( 260)					this->zpp_inner->wake();
HXLINE( 261)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 261)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 265)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 265)			return null();
            		}
            		else {
HXLINE( 265)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 265)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PivotJoint_obj,set_body2,return )

 ::nape::geom::Vec2 PivotJoint_obj::get_anchor1(){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_274_get_anchor1)
HXLINE( 275)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 275)			this->zpp_inner_zn->setup_a1();
            		}
HXLINE( 276)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PivotJoint_obj,get_anchor1,return )

 ::nape::geom::Vec2 PivotJoint_obj::set_anchor1( ::nape::geom::Vec2 anchor1){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_278_set_anchor1)
HXLINE( 279)		{
HXLINE( 282)			bool _hx_tmp;
HXDLIN( 282)			if (hx::IsNotNull( anchor1 )) {
HXLINE( 282)				_hx_tmp = anchor1->zpp_disp;
            			}
            			else {
HXLINE( 282)				_hx_tmp = false;
            			}
HXDLIN( 282)			if (_hx_tmp) {
HXLINE( 282)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 286)			if (hx::IsNull( anchor1 )) {
HXLINE( 286)				HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor1",1c,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            			}
HXLINE( 288)			{
HXLINE( 288)				if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 288)					this->zpp_inner_zn->setup_a1();
            				}
HXDLIN( 288)				 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_a1;
HXDLIN( 288)				bool _hx_tmp1;
HXDLIN( 288)				if (hx::IsNotNull( _this )) {
HXLINE( 288)					_hx_tmp1 = _this->zpp_disp;
            				}
            				else {
HXLINE( 288)					_hx_tmp1 = false;
            				}
HXDLIN( 288)				if (_hx_tmp1) {
HXLINE( 288)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 288)				bool _hx_tmp2;
HXDLIN( 288)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 288)					_hx_tmp2 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 288)					_hx_tmp2 = false;
            				}
HXDLIN( 288)				if (_hx_tmp2) {
HXLINE( 288)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 288)				{
HXLINE( 288)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 288)					if (_this1->_immutable) {
HXLINE( 288)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 288)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 288)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 288)				if (hx::IsNull( anchor1 )) {
HXLINE( 288)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 288)				bool _hx_tmp3;
HXDLIN( 288)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 288)					_hx_tmp3 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 288)					_hx_tmp3 = false;
            				}
HXDLIN( 288)				if (_hx_tmp3) {
HXLINE( 288)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 288)				{
HXLINE( 288)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = anchor1->zpp_inner;
HXDLIN( 288)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 288)						_this2->_validate();
            					}
            				}
HXDLIN( 288)				Float x = anchor1->zpp_inner->x;
HXDLIN( 288)				bool _hx_tmp4;
HXDLIN( 288)				if (hx::IsNotNull( anchor1 )) {
HXLINE( 288)					_hx_tmp4 = anchor1->zpp_disp;
            				}
            				else {
HXLINE( 288)					_hx_tmp4 = false;
            				}
HXDLIN( 288)				if (_hx_tmp4) {
HXLINE( 288)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 288)				{
HXLINE( 288)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = anchor1->zpp_inner;
HXDLIN( 288)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 288)						_this3->_validate();
            					}
            				}
HXDLIN( 288)				Float y = anchor1->zpp_inner->y;
HXDLIN( 288)				bool _hx_tmp5;
HXDLIN( 288)				if (hx::IsNotNull( _this )) {
HXLINE( 288)					_hx_tmp5 = _this->zpp_disp;
            				}
            				else {
HXLINE( 288)					_hx_tmp5 = false;
            				}
HXDLIN( 288)				if (_hx_tmp5) {
HXLINE( 288)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 288)				{
HXLINE( 288)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 288)					if (_this4->_immutable) {
HXLINE( 288)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 288)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 288)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 288)				bool _hx_tmp6;
HXDLIN( 288)				if ((x == x)) {
HXLINE( 288)					_hx_tmp6 = (y != y);
            				}
            				else {
HXLINE( 288)					_hx_tmp6 = true;
            				}
HXDLIN( 288)				if (_hx_tmp6) {
HXLINE( 288)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 288)				bool _hx_tmp7;
HXDLIN( 288)				bool _hx_tmp8;
HXDLIN( 288)				if (hx::IsNotNull( _this )) {
HXLINE( 288)					_hx_tmp8 = _this->zpp_disp;
            				}
            				else {
HXLINE( 288)					_hx_tmp8 = false;
            				}
HXDLIN( 288)				if (_hx_tmp8) {
HXLINE( 288)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 288)				{
HXLINE( 288)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 288)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 288)						_this5->_validate();
            					}
            				}
HXDLIN( 288)				if ((_this->zpp_inner->x == x)) {
HXLINE( 288)					bool _hx_tmp9;
HXDLIN( 288)					if (hx::IsNotNull( _this )) {
HXLINE( 288)						_hx_tmp9 = _this->zpp_disp;
            					}
            					else {
HXLINE( 288)						_hx_tmp9 = false;
            					}
HXDLIN( 288)					if (_hx_tmp9) {
HXLINE( 288)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 288)					{
HXLINE( 288)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 288)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 288)							_this6->_validate();
            						}
            					}
HXDLIN( 288)					_hx_tmp7 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 288)					_hx_tmp7 = false;
            				}
HXDLIN( 288)				if (!(_hx_tmp7)) {
HXLINE( 288)					{
HXLINE( 288)						_this->zpp_inner->x = x;
HXDLIN( 288)						_this->zpp_inner->y = y;
            					}
HXDLIN( 288)					{
HXLINE( 288)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 288)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 288)							_this7->_invalidate(_this7);
            						}
            					}
            				}
HXDLIN( 288)				 ::nape::geom::Vec2 ret = _this;
HXDLIN( 288)				if (anchor1->zpp_inner->weak) {
HXLINE( 288)					bool _hx_tmp10;
HXDLIN( 288)					if (hx::IsNotNull( anchor1 )) {
HXLINE( 288)						_hx_tmp10 = anchor1->zpp_disp;
            					}
            					else {
HXLINE( 288)						_hx_tmp10 = false;
            					}
HXDLIN( 288)					if (_hx_tmp10) {
HXLINE( 288)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 288)					{
HXLINE( 288)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = anchor1->zpp_inner;
HXDLIN( 288)						if (_this8->_immutable) {
HXLINE( 288)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 288)						if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 288)							_this8->_isimmutable();
            						}
            					}
HXDLIN( 288)					if (anchor1->zpp_inner->_inuse) {
HXLINE( 288)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 288)					 ::zpp_nape::geom::ZPP_Vec2 inner = anchor1->zpp_inner;
HXDLIN( 288)					anchor1->zpp_inner->outer = null();
HXDLIN( 288)					anchor1->zpp_inner = null();
HXDLIN( 288)					{
HXLINE( 288)						 ::nape::geom::Vec2 o = anchor1;
HXDLIN( 288)						o->zpp_pool = null();
HXDLIN( 288)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 288)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 288)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 288)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 288)						o->zpp_disp = true;
            					}
HXDLIN( 288)					{
HXLINE( 288)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 288)						{
HXLINE( 288)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 288)								o1->outer->zpp_inner = null();
HXDLIN( 288)								o1->outer = null();
            							}
HXDLIN( 288)							o1->_isimmutable = null();
HXDLIN( 288)							o1->_validate = null();
HXDLIN( 288)							o1->_invalidate = null();
            						}
HXDLIN( 288)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 288)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 290)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 290)			this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 290)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PivotJoint_obj,set_anchor1,return )

 ::nape::geom::Vec2 PivotJoint_obj::get_anchor2(){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_299_get_anchor2)
HXLINE( 300)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 300)			this->zpp_inner_zn->setup_a2();
            		}
HXLINE( 301)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PivotJoint_obj,get_anchor2,return )

 ::nape::geom::Vec2 PivotJoint_obj::set_anchor2( ::nape::geom::Vec2 anchor2){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_303_set_anchor2)
HXLINE( 304)		{
HXLINE( 307)			bool _hx_tmp;
HXDLIN( 307)			if (hx::IsNotNull( anchor2 )) {
HXLINE( 307)				_hx_tmp = anchor2->zpp_disp;
            			}
            			else {
HXLINE( 307)				_hx_tmp = false;
            			}
HXDLIN( 307)			if (_hx_tmp) {
HXLINE( 307)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXLINE( 311)			if (hx::IsNull( anchor2 )) {
HXLINE( 311)				HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + HX_("anchor2",1d,ec,a1,02)) + HX_(" cannot be null",07,dc,5d,15)));
            			}
HXLINE( 313)			{
HXLINE( 313)				if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 313)					this->zpp_inner_zn->setup_a2();
            				}
HXDLIN( 313)				 ::nape::geom::Vec2 _this = this->zpp_inner_zn->wrap_a2;
HXDLIN( 313)				bool _hx_tmp1;
HXDLIN( 313)				if (hx::IsNotNull( _this )) {
HXLINE( 313)					_hx_tmp1 = _this->zpp_disp;
            				}
            				else {
HXLINE( 313)					_hx_tmp1 = false;
            				}
HXDLIN( 313)				if (_hx_tmp1) {
HXLINE( 313)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 313)				bool _hx_tmp2;
HXDLIN( 313)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 313)					_hx_tmp2 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 313)					_hx_tmp2 = false;
            				}
HXDLIN( 313)				if (_hx_tmp2) {
HXLINE( 313)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 313)				{
HXLINE( 313)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 313)					if (_this1->_immutable) {
HXLINE( 313)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 313)					if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 313)						_this1->_isimmutable();
            					}
            				}
HXDLIN( 313)				if (hx::IsNull( anchor2 )) {
HXLINE( 313)					HX_STACK_DO_THROW(HX_("Error: Cannot assign null Vec2",95,15,46,66));
            				}
HXDLIN( 313)				bool _hx_tmp3;
HXDLIN( 313)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 313)					_hx_tmp3 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 313)					_hx_tmp3 = false;
            				}
HXDLIN( 313)				if (_hx_tmp3) {
HXLINE( 313)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 313)				{
HXLINE( 313)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = anchor2->zpp_inner;
HXDLIN( 313)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 313)						_this2->_validate();
            					}
            				}
HXDLIN( 313)				Float x = anchor2->zpp_inner->x;
HXDLIN( 313)				bool _hx_tmp4;
HXDLIN( 313)				if (hx::IsNotNull( anchor2 )) {
HXLINE( 313)					_hx_tmp4 = anchor2->zpp_disp;
            				}
            				else {
HXLINE( 313)					_hx_tmp4 = false;
            				}
HXDLIN( 313)				if (_hx_tmp4) {
HXLINE( 313)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 313)				{
HXLINE( 313)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = anchor2->zpp_inner;
HXDLIN( 313)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 313)						_this3->_validate();
            					}
            				}
HXDLIN( 313)				Float y = anchor2->zpp_inner->y;
HXDLIN( 313)				bool _hx_tmp5;
HXDLIN( 313)				if (hx::IsNotNull( _this )) {
HXLINE( 313)					_hx_tmp5 = _this->zpp_disp;
            				}
            				else {
HXLINE( 313)					_hx_tmp5 = false;
            				}
HXDLIN( 313)				if (_hx_tmp5) {
HXLINE( 313)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 313)				{
HXLINE( 313)					 ::zpp_nape::geom::ZPP_Vec2 _this4 = _this->zpp_inner;
HXDLIN( 313)					if (_this4->_immutable) {
HXLINE( 313)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 313)					if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 313)						_this4->_isimmutable();
            					}
            				}
HXDLIN( 313)				bool _hx_tmp6;
HXDLIN( 313)				if ((x == x)) {
HXLINE( 313)					_hx_tmp6 = (y != y);
            				}
            				else {
HXLINE( 313)					_hx_tmp6 = true;
            				}
HXDLIN( 313)				if (_hx_tmp6) {
HXLINE( 313)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 313)				bool _hx_tmp7;
HXDLIN( 313)				bool _hx_tmp8;
HXDLIN( 313)				if (hx::IsNotNull( _this )) {
HXLINE( 313)					_hx_tmp8 = _this->zpp_disp;
            				}
            				else {
HXLINE( 313)					_hx_tmp8 = false;
            				}
HXDLIN( 313)				if (_hx_tmp8) {
HXLINE( 313)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 313)				{
HXLINE( 313)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this->zpp_inner;
HXDLIN( 313)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 313)						_this5->_validate();
            					}
            				}
HXDLIN( 313)				if ((_this->zpp_inner->x == x)) {
HXLINE( 313)					bool _hx_tmp9;
HXDLIN( 313)					if (hx::IsNotNull( _this )) {
HXLINE( 313)						_hx_tmp9 = _this->zpp_disp;
            					}
            					else {
HXLINE( 313)						_hx_tmp9 = false;
            					}
HXDLIN( 313)					if (_hx_tmp9) {
HXLINE( 313)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 313)					{
HXLINE( 313)						 ::zpp_nape::geom::ZPP_Vec2 _this6 = _this->zpp_inner;
HXDLIN( 313)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 313)							_this6->_validate();
            						}
            					}
HXDLIN( 313)					_hx_tmp7 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 313)					_hx_tmp7 = false;
            				}
HXDLIN( 313)				if (!(_hx_tmp7)) {
HXLINE( 313)					{
HXLINE( 313)						_this->zpp_inner->x = x;
HXDLIN( 313)						_this->zpp_inner->y = y;
            					}
HXDLIN( 313)					{
HXLINE( 313)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this->zpp_inner;
HXDLIN( 313)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 313)							_this7->_invalidate(_this7);
            						}
            					}
            				}
HXDLIN( 313)				 ::nape::geom::Vec2 ret = _this;
HXDLIN( 313)				if (anchor2->zpp_inner->weak) {
HXLINE( 313)					bool _hx_tmp10;
HXDLIN( 313)					if (hx::IsNotNull( anchor2 )) {
HXLINE( 313)						_hx_tmp10 = anchor2->zpp_disp;
            					}
            					else {
HXLINE( 313)						_hx_tmp10 = false;
            					}
HXDLIN( 313)					if (_hx_tmp10) {
HXLINE( 313)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 313)					{
HXLINE( 313)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = anchor2->zpp_inner;
HXDLIN( 313)						if (_this8->_immutable) {
HXLINE( 313)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 313)						if (hx::IsNotNull( _this8->_isimmutable )) {
HXLINE( 313)							_this8->_isimmutable();
            						}
            					}
HXDLIN( 313)					if (anchor2->zpp_inner->_inuse) {
HXLINE( 313)						HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            					}
HXDLIN( 313)					 ::zpp_nape::geom::ZPP_Vec2 inner = anchor2->zpp_inner;
HXDLIN( 313)					anchor2->zpp_inner->outer = null();
HXDLIN( 313)					anchor2->zpp_inner = null();
HXDLIN( 313)					{
HXLINE( 313)						 ::nape::geom::Vec2 o = anchor2;
HXDLIN( 313)						o->zpp_pool = null();
HXDLIN( 313)						if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 313)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            						}
            						else {
HXLINE( 313)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            						}
HXDLIN( 313)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 313)						o->zpp_disp = true;
            					}
HXDLIN( 313)					{
HXLINE( 313)						 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 313)						{
HXLINE( 313)							if (hx::IsNotNull( o1->outer )) {
HXLINE( 313)								o1->outer->zpp_inner = null();
HXDLIN( 313)								o1->outer = null();
            							}
HXDLIN( 313)							o1->_isimmutable = null();
HXDLIN( 313)							o1->_validate = null();
HXDLIN( 313)							o1->_invalidate = null();
            						}
HXDLIN( 313)						o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 313)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            					}
            				}
            			}
            		}
HXLINE( 315)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 315)			this->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 315)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PivotJoint_obj,set_anchor2,return )

 ::nape::geom::MatMN PivotJoint_obj::impulse(){
            	HX_GC_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_351_impulse)
HXLINE( 352)		 ::nape::geom::MatMN ret =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,2,1);
HXLINE( 353)		{
HXLINE( 353)			bool _hx_tmp;
HXDLIN( 353)			if ((0 < ret->zpp_inner->m)) {
HXLINE( 353)				_hx_tmp = (0 >= ret->zpp_inner->n);
            			}
            			else {
HXLINE( 353)				_hx_tmp = true;
            			}
HXDLIN( 353)			if (_hx_tmp) {
HXLINE( 353)				HX_STACK_DO_THROW(HX_("Error: MatMN indices out of range",cc,72,58,e6));
            			}
HXDLIN( 353)			ret->zpp_inner->x[(0 * ret->zpp_inner->n)] = this->zpp_inner_zn->jAccx;
            		}
HXLINE( 354)		{
HXLINE( 354)			bool _hx_tmp1;
HXDLIN( 354)			if ((1 < ret->zpp_inner->m)) {
HXLINE( 354)				_hx_tmp1 = (0 >= ret->zpp_inner->n);
            			}
            			else {
HXLINE( 354)				_hx_tmp1 = true;
            			}
HXDLIN( 354)			if (_hx_tmp1) {
HXLINE( 354)				HX_STACK_DO_THROW(HX_("Error: MatMN indices out of range",cc,72,58,e6));
            			}
HXDLIN( 354)			ret->zpp_inner->x[ret->zpp_inner->n] = this->zpp_inner_zn->jAccy;
            		}
HXLINE( 355)		return ret;
            	}


 ::nape::geom::Vec3 PivotJoint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_360_bodyImpulse)
HXLINE( 362)		if (hx::IsNull( body )) {
HXLINE( 363)			HX_STACK_DO_THROW(HX_("Error: Cannot evaluate impulse on null body",9d,b5,dc,16));
            		}
HXLINE( 365)		bool _hx_tmp;
HXDLIN( 365)		 ::nape::phys::Body _hx_tmp1;
HXDLIN( 365)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 365)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 365)			_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 365)		if (hx::IsNotEq( body,_hx_tmp1 )) {
HXLINE( 365)			 ::nape::phys::Body _hx_tmp2;
HXDLIN( 365)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 365)				_hx_tmp2 = null();
            			}
            			else {
HXLINE( 365)				_hx_tmp2 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 365)			_hx_tmp = hx::IsNotEq( body,_hx_tmp2 );
            		}
            		else {
HXLINE( 365)			_hx_tmp = false;
            		}
HXDLIN( 365)		if (_hx_tmp) {
HXLINE( 366)			HX_STACK_DO_THROW(HX_("Error: Body is not linked to this constraint",2e,e5,48,bf));
            		}
HXLINE( 369)		if (!(this->zpp_inner->active)) {
HXLINE( 370)			return ::nape::geom::Vec3_obj::get(null(),null(),null());
            		}
            		else {
HXLINE( 373)			return this->zpp_inner_zn->bodyImpulse(body->zpp_inner);
            		}
HXLINE( 369)		return null();
            	}


void PivotJoint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_88f610feb8c6ea2e_379_visitBodies)
HXLINE( 380)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 380)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 380)			_hx_tmp = null();
            		}
            		else {
HXLINE( 380)			_hx_tmp = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 380)		if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 381)			 ::nape::phys::Body _hx_tmp1;
HXDLIN( 381)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 381)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 381)				_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 381)			lambda(_hx_tmp1);
            		}
HXLINE( 383)		bool _hx_tmp2;
HXDLIN( 383)		 ::nape::phys::Body _hx_tmp3;
HXDLIN( 383)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 383)			_hx_tmp3 = null();
            		}
            		else {
HXLINE( 383)			_hx_tmp3 = this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 383)		if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 383)			 ::nape::phys::Body _hx_tmp4;
HXDLIN( 383)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 383)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 383)				_hx_tmp4 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 383)			 ::nape::phys::Body _hx_tmp5;
HXDLIN( 383)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 383)				_hx_tmp5 = null();
            			}
            			else {
HXLINE( 383)				_hx_tmp5 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 383)			_hx_tmp2 = hx::IsNotEq( _hx_tmp4,_hx_tmp5 );
            		}
            		else {
HXLINE( 383)			_hx_tmp2 = false;
            		}
HXDLIN( 383)		if (_hx_tmp2) {
HXLINE( 384)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 384)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 384)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 384)				_hx_tmp6 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 384)			lambda(_hx_tmp6);
            		}
            	}



hx::ObjectPtr< PivotJoint_obj > PivotJoint_obj::__new( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2) {
	hx::ObjectPtr< PivotJoint_obj > __this = new PivotJoint_obj();
	__this->__construct(body1,body2,anchor1,anchor2);
	return __this;
}

hx::ObjectPtr< PivotJoint_obj > PivotJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2) {
	PivotJoint_obj *__this = (PivotJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PivotJoint_obj), true, "nape.constraint.PivotJoint"));
	*(void **)__this = PivotJoint_obj::_hx_vtable;
	__this->__construct(body1,body2,anchor1,anchor2);
	return __this;
}

PivotJoint_obj::PivotJoint_obj()
{
}

void PivotJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PivotJoint);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PivotJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PivotJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_body1() ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_body2() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_anchor1() ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_anchor2() ); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_body1") ) { return hx::Val( set_body1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_body2") ) { return hx::Val( set_body2_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_anchor1") ) { return hx::Val( get_anchor1_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_anchor1") ) { return hx::Val( set_anchor1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_anchor2") ) { return hx::Val( get_anchor2_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_anchor2") ) { return hx::Val( set_anchor2_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PivotJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body1(inValue.Cast<  ::nape::phys::Body >()) ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body2(inValue.Cast<  ::nape::phys::Body >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor1(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor2(inValue.Cast<  ::nape::geom::Vec2 >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::constraint::ZPP_PivotJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PivotJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner_zn",22,84,fa,e0));
	outFields->push(HX_("body1",4f,d3,ef,b6));
	outFields->push(HX_("body2",50,d3,ef,b6));
	outFields->push(HX_("anchor1",1c,ec,a1,02));
	outFields->push(HX_("anchor2",1d,ec,a1,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PivotJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::constraint::ZPP_PivotJoint */ ,(int)offsetof(PivotJoint_obj,zpp_inner_zn),HX_("zpp_inner_zn",22,84,fa,e0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PivotJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String PivotJoint_obj_sMemberFields[] = {
	HX_("zpp_inner_zn",22,84,fa,e0),
	HX_("get_body1",a6,2f,99,fa),
	HX_("set_body1",b2,1b,ea,dd),
	HX_("get_body2",a7,2f,99,fa),
	HX_("set_body2",b3,1b,ea,dd),
	HX_("get_anchor1",33,4c,9c,88),
	HX_("set_anchor1",3f,53,09,93),
	HX_("get_anchor2",34,4c,9c,88),
	HX_("set_anchor2",40,53,09,93),
	HX_("impulse",b5,50,bd,6d),
	HX_("bodyImpulse",33,76,a2,5f),
	HX_("visitBodies",ab,f3,5e,e4),
	::String(null()) };

hx::Class PivotJoint_obj::__mClass;

void PivotJoint_obj::__register()
{
	PivotJoint_obj _hx_dummy;
	PivotJoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.constraint.PivotJoint",b3,fb,97,4a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PivotJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PivotJoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PivotJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PivotJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace constraint
