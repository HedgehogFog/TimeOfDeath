// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_CbType
#include <hxinc/nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeList
#include <hxinc/nape/callbacks/CbTypeList.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <hxinc/nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <hxinc/nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <hxinc/nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <hxinc/zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <hxinc/zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <hxinc/zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <hxinc/zpp_nape/util/ZPP_ConstraintList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_177_new,"nape.constraint.Constraint","new",0x2f5111da,"nape.constraint.Constraint.new","nape/constraint/Constraint.hx",177,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_195_get_userData,"nape.constraint.Constraint","get_userData",0xcf920964,"nape.constraint.Constraint.get_userData","nape/constraint/Constraint.hx",195,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_220_get_compound,"nape.constraint.Constraint","get_compound",0x4c3936ba,"nape.constraint.Constraint.get_compound","nape/constraint/Constraint.hx",220,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_222_set_compound,"nape.constraint.Constraint","set_compound",0x61325a2e,"nape.constraint.Constraint.set_compound","nape/constraint/Constraint.hx",222,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_249_get_space,"nape.constraint.Constraint","get_space",0x942e8217,"nape.constraint.Constraint.get_space","nape/constraint/Constraint.hx",249,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_251_set_space,"nape.constraint.Constraint","set_space",0x777f6e23,"nape.constraint.Constraint.set_space","nape/constraint/Constraint.hx",251,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_290_get_isSleeping,"nape.constraint.Constraint","get_isSleeping",0xd96a8f44,"nape.constraint.Constraint.get_isSleeping","nape/constraint/Constraint.hx",290,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_310_get_active,"nape.constraint.Constraint","get_active",0x7274f355,"nape.constraint.Constraint.get_active","nape/constraint/Constraint.hx",310,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_312_set_active,"nape.constraint.Constraint","set_active",0x75f291c9,"nape.constraint.Constraint.set_active","nape/constraint/Constraint.hx",312,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_348_get_ignore,"nape.constraint.Constraint","get_ignore",0xeef76aa1,"nape.constraint.Constraint.get_ignore","nape/constraint/Constraint.hx",348,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_350_set_ignore,"nape.constraint.Constraint","set_ignore",0xf2750915,"nape.constraint.Constraint.set_ignore","nape/constraint/Constraint.hx",350,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_377_get_stiff,"nape.constraint.Constraint","get_stiff",0x96d97139,"nape.constraint.Constraint.get_stiff","nape/constraint/Constraint.hx",377,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_379_set_stiff,"nape.constraint.Constraint","set_stiff",0x7a2a5d45,"nape.constraint.Constraint.set_stiff","nape/constraint/Constraint.hx",379,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_403_get_frequency,"nape.constraint.Constraint","get_frequency",0x0dc5f46d,"nape.constraint.Constraint.get_frequency","nape/constraint/Constraint.hx",403,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_405_set_frequency,"nape.constraint.Constraint","set_frequency",0x52cbd679,"nape.constraint.Constraint.set_frequency","nape/constraint/Constraint.hx",405,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_440_get_damping,"nape.constraint.Constraint","get_damping",0x60b23c53,"nape.constraint.Constraint.get_damping","nape/constraint/Constraint.hx",440,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_442_set_damping,"nape.constraint.Constraint","set_damping",0x6b1f435f,"nape.constraint.Constraint.set_damping","nape/constraint/Constraint.hx",442,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_476_get_maxForce,"nape.constraint.Constraint","get_maxForce",0x791b77f6,"nape.constraint.Constraint.get_maxForce","nape/constraint/Constraint.hx",476,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_478_set_maxForce,"nape.constraint.Constraint","set_maxForce",0x8e149b6a,"nape.constraint.Constraint.set_maxForce","nape/constraint/Constraint.hx",478,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_510_get_maxError,"nape.constraint.Constraint","get_maxError",0xe7b091d3,"nape.constraint.Constraint.get_maxError","nape/constraint/Constraint.hx",510,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_512_set_maxError,"nape.constraint.Constraint","set_maxError",0xfca9b547,"nape.constraint.Constraint.set_maxError","nape/constraint/Constraint.hx",512,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_541_get_breakUnderForce,"nape.constraint.Constraint","get_breakUnderForce",0x0211ebe3,"nape.constraint.Constraint.get_breakUnderForce","nape/constraint/Constraint.hx",541,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_543_set_breakUnderForce,"nape.constraint.Constraint","set_breakUnderForce",0x3eaedeef,"nape.constraint.Constraint.set_breakUnderForce","nape/constraint/Constraint.hx",543,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_562_get_breakUnderError,"nape.constraint.Constraint","get_breakUnderError",0x70a705c0,"nape.constraint.Constraint.get_breakUnderError","nape/constraint/Constraint.hx",562,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_564_set_breakUnderError,"nape.constraint.Constraint","set_breakUnderError",0xad43f8cc,"nape.constraint.Constraint.set_breakUnderError","nape/constraint/Constraint.hx",564,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_584_get_removeOnBreak,"nape.constraint.Constraint","get_removeOnBreak",0xa18b4d8d,"nape.constraint.Constraint.get_removeOnBreak","nape/constraint/Constraint.hx",584,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_586_set_removeOnBreak,"nape.constraint.Constraint","set_removeOnBreak",0xc4f92599,"nape.constraint.Constraint.set_removeOnBreak","nape/constraint/Constraint.hx",586,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_598_impulse,"nape.constraint.Constraint","impulse",0xa9d1d72f,"nape.constraint.Constraint.impulse","nape/constraint/Constraint.hx",598,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_611_bodyImpulse,"nape.constraint.Constraint","bodyImpulse",0x2654c1ad,"nape.constraint.Constraint.bodyImpulse","nape/constraint/Constraint.hx",611,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_622_visitBodies,"nape.constraint.Constraint","visitBodies",0xab113f25,"nape.constraint.Constraint.visitBodies","nape/constraint/Constraint.hx",622,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_632_get_cbTypes,"nape.constraint.Constraint","get_cbTypes",0x3e6bd4eb,"nape.constraint.Constraint.get_cbTypes","nape/constraint/Constraint.hx",632,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_654_toString,"nape.constraint.Constraint","toString",0x8e4ff4f2,"nape.constraint.Constraint.toString","nape/constraint/Constraint.hx",654,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_665_copy,"nape.constraint.Constraint","copy",0x3060c4fb,"nape.constraint.Constraint.copy","nape/constraint/Constraint.hx",665,0xfc21f536)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea3983b8ffdc043_642_boot,"nape.constraint.Constraint","boot",0x2fb78d78,"nape.constraint.Constraint.boot","nape/constraint/Constraint.hx",642,0xfc21f536)
namespace nape{
namespace constraint{

void Constraint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_177_new)
HXLINE( 208)		this->debugDraw = true;
HXLINE( 645)		this->zpp_inner->insert_cbtype(::zpp_nape::callbacks::ZPP_CbType_obj::ANY_CONSTRAINT->zpp_inner);
HXLINE( 647)		if (!(::nape::constraint::Constraint_obj::zpp_internalAlloc)) {
HXLINE( 647)			HX_STACK_DO_THROW(HX_("Error: Constraint cannot be instantiated derp!",f1,11,c7,fc));
            		}
            	}

Dynamic Constraint_obj::__CreateEmpty() { return new Constraint_obj; }

void *Constraint_obj::_hx_vtable = 0;

Dynamic Constraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Constraint_obj > _hx_result = new Constraint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Constraint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
}

 ::Dynamic Constraint_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_195_get_userData)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_userData,return )

 ::nape::phys::Compound Constraint_obj::get_compound(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_220_get_compound)
HXDLIN( 220)		if (hx::IsNull( this->zpp_inner->compound )) {
HXDLIN( 220)			return null();
            		}
            		else {
HXDLIN( 220)			return this->zpp_inner->compound->outer;
            		}
HXDLIN( 220)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_compound,return )

 ::nape::phys::Compound Constraint_obj::set_compound( ::nape::phys::Compound compound){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_222_set_compound)
HXLINE( 224)		 ::nape::phys::Compound _hx_tmp;
HXDLIN( 224)		if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 224)			_hx_tmp = null();
            		}
            		else {
HXLINE( 224)			_hx_tmp = this->zpp_inner->compound->outer;
            		}
HXDLIN( 224)		if (hx::IsNotEq( _hx_tmp,compound )) {
HXLINE( 225)			 ::nape::phys::Compound _hx_tmp1;
HXDLIN( 225)			if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 225)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 225)				_hx_tmp1 = this->zpp_inner->compound->outer;
            			}
HXDLIN( 225)			if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 226)				 ::nape::phys::Compound _hx_tmp2;
HXDLIN( 226)				if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 226)					_hx_tmp2 = null();
            				}
            				else {
HXLINE( 226)					_hx_tmp2 = this->zpp_inner->compound->outer;
            				}
HXDLIN( 226)				_hx_tmp2->zpp_inner->wrap_constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 228)			if (hx::IsNotNull( compound )) {
HXLINE( 229)				 ::nape::constraint::ConstraintList _this = compound->zpp_inner->wrap_constraints;
HXDLIN( 229)				if (_this->zpp_inner->reverse_flag) {
HXLINE( 229)					_this->push(hx::ObjectPtr<OBJ_>(this));
            				}
            				else {
HXLINE( 229)					_this->unshift(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE( 233)		if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 233)			return null();
            		}
            		else {
HXLINE( 233)			return this->zpp_inner->compound->outer;
            		}
HXDLIN( 233)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_compound,return )

 ::nape::space::Space Constraint_obj::get_space(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_249_get_space)
HXDLIN( 249)		if (hx::IsNull( this->zpp_inner->space )) {
HXDLIN( 249)			return null();
            		}
            		else {
HXDLIN( 249)			return this->zpp_inner->space->outer;
            		}
HXDLIN( 249)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_space,return )

 ::nape::space::Space Constraint_obj::set_space( ::nape::space::Space space){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_251_set_space)
HXLINE( 252)		{
HXLINE( 254)			if (hx::IsNotNull( this->zpp_inner->compound )) {
HXLINE( 255)				HX_STACK_DO_THROW((HX_("Error: Cannot set the space of a Constraint belonging to",e9,08,ed,61) + HX_(" a Compound, only the root Compound space can be set",2b,a5,ef,1c)));
            			}
HXLINE( 258)			 ::nape::space::Space _hx_tmp;
HXDLIN( 258)			if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 258)				_hx_tmp = null();
            			}
            			else {
HXLINE( 258)				_hx_tmp = this->zpp_inner->space->outer;
            			}
HXDLIN( 258)			if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE( 259)				if (hx::IsNotNull( this->zpp_inner->component )) {
HXLINE( 259)					this->zpp_inner->component->woken = false;
            				}
HXLINE( 260)				this->zpp_inner->clearcache();
HXLINE( 261)				if (hx::IsNotNull( this->zpp_inner->space )) {
HXLINE( 262)					this->zpp_inner->space->outer->zpp_inner->wrap_constraints->remove(hx::ObjectPtr<OBJ_>(this));
            				}
HXLINE( 264)				if (hx::IsNotNull( space )) {
HXLINE( 265)					 ::nape::constraint::ConstraintList _this = space->zpp_inner->wrap_constraints;
HXDLIN( 265)					if (_this->zpp_inner->reverse_flag) {
HXLINE( 265)						_this->push(hx::ObjectPtr<OBJ_>(this));
            					}
            					else {
HXLINE( 265)						_this->unshift(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            				else {
HXLINE( 268)					this->zpp_inner->space = null();
            				}
            			}
            		}
HXLINE( 272)		if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 272)			return null();
            		}
            		else {
HXLINE( 272)			return this->zpp_inner->space->outer;
            		}
HXDLIN( 272)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_space,return )

bool Constraint_obj::get_isSleeping(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_290_get_isSleeping)
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		if (hx::IsNotNull( this->zpp_inner->space )) {
HXLINE( 292)			_hx_tmp = !(this->zpp_inner->active);
            		}
            		else {
HXLINE( 292)			_hx_tmp = true;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 293)			HX_STACK_DO_THROW((HX_("Error: isSleeping only makes sense if constraint is",4e,e1,a1,6a) + HX_(" active and inside a space",c6,b4,4f,24)));
            		}
HXLINE( 296)		return this->zpp_inner->component->sleeping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_isSleeping,return )

bool Constraint_obj::get_active(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_310_get_active)
HXDLIN( 310)		return this->zpp_inner->active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_active,return )

bool Constraint_obj::set_active(bool active){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_312_set_active)
HXLINE( 314)		if ((this->zpp_inner->active != active)) {
HXLINE( 315)			if (hx::IsNotNull( this->zpp_inner->component )) {
HXLINE( 315)				this->zpp_inner->component->woken = false;
            			}
HXLINE( 316)			this->zpp_inner->clearcache();
HXLINE( 317)			if (active) {
HXLINE( 318)				this->zpp_inner->active = active;
HXLINE( 319)				this->zpp_inner->activate();
HXLINE( 320)				if (hx::IsNotNull( this->zpp_inner->space )) {
HXLINE( 321)					if (hx::IsNotNull( this->zpp_inner->component )) {
HXLINE( 321)						this->zpp_inner->component->sleeping = true;
            					}
HXLINE( 322)					this->zpp_inner->space->wake_constraint(this->zpp_inner,true);
            				}
            			}
            			else {
HXLINE( 326)				if (hx::IsNotNull( this->zpp_inner->space )) {
HXLINE( 327)					this->zpp_inner->wake();
HXLINE( 328)					this->zpp_inner->space->live_constraints->remove(this->zpp_inner);
            				}
HXLINE( 330)				this->zpp_inner->active = active;
HXLINE( 331)				this->zpp_inner->deactivate();
            			}
            		}
HXLINE( 335)		return this->zpp_inner->active;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_active,return )

bool Constraint_obj::get_ignore(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_348_get_ignore)
HXDLIN( 348)		return this->zpp_inner->ignore;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_ignore,return )

bool Constraint_obj::set_ignore(bool ignore){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_350_set_ignore)
HXLINE( 352)		if ((this->zpp_inner->ignore != ignore)) {
HXLINE( 353)			this->zpp_inner->ignore = ignore;
HXLINE( 354)			this->zpp_inner->wake();
            		}
HXLINE( 357)		return this->zpp_inner->ignore;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_ignore,return )

bool Constraint_obj::get_stiff(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_377_get_stiff)
HXDLIN( 377)		return this->zpp_inner->stiff;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_stiff,return )

bool Constraint_obj::set_stiff(bool stiff){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_379_set_stiff)
HXLINE( 381)		if ((this->zpp_inner->stiff != stiff)) {
HXLINE( 382)			this->zpp_inner->stiff = stiff;
HXLINE( 383)			this->zpp_inner->wake();
            		}
HXLINE( 386)		return this->zpp_inner->stiff;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_stiff,return )

Float Constraint_obj::get_frequency(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_403_get_frequency)
HXDLIN( 403)		return this->zpp_inner->frequency;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_frequency,return )

Float Constraint_obj::set_frequency(Float frequency){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_405_set_frequency)
HXLINE( 406)		{
HXLINE( 408)			if ((frequency != frequency)) {
HXLINE( 409)				HX_STACK_DO_THROW(HX_("Error: Constraint::Frequency cannot be NaN",2c,1e,c8,25));
            			}
HXLINE( 411)			if ((frequency <= 0)) {
HXLINE( 412)				HX_STACK_DO_THROW(HX_("Error: Constraint::Frequency must be >0",87,a7,de,c8));
            			}
HXLINE( 415)			if ((this->zpp_inner->frequency != frequency)) {
HXLINE( 416)				this->zpp_inner->frequency = frequency;
HXLINE( 417)				if (!(this->zpp_inner->stiff)) {
HXLINE( 418)					this->zpp_inner->wake();
            				}
            			}
            		}
HXLINE( 422)		return this->zpp_inner->frequency;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_frequency,return )

Float Constraint_obj::get_damping(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_440_get_damping)
HXDLIN( 440)		return this->zpp_inner->damping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_damping,return )

Float Constraint_obj::set_damping(Float damping){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_442_set_damping)
HXLINE( 443)		{
HXLINE( 445)			if ((damping != damping)) {
HXLINE( 446)				HX_STACK_DO_THROW(HX_("Error: Constraint::Damping cannot be Nan",b2,2b,24,5d));
            			}
HXLINE( 448)			if ((damping < 0)) {
HXLINE( 449)				HX_STACK_DO_THROW(HX_("Error: Constraint::Damping must be >=0",02,c2,61,64));
            			}
HXLINE( 452)			if ((this->zpp_inner->damping != damping)) {
HXLINE( 453)				this->zpp_inner->damping = damping;
HXLINE( 454)				if (!(this->zpp_inner->stiff)) {
HXLINE( 455)					this->zpp_inner->wake();
            				}
            			}
            		}
HXLINE( 459)		return this->zpp_inner->damping;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_damping,return )

Float Constraint_obj::get_maxForce(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_476_get_maxForce)
HXDLIN( 476)		return this->zpp_inner->maxForce;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_maxForce,return )

Float Constraint_obj::set_maxForce(Float maxForce){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_478_set_maxForce)
HXLINE( 479)		{
HXLINE( 481)			if ((maxForce != maxForce)) {
HXLINE( 482)				HX_STACK_DO_THROW(HX_("Error: Constraint::maxForce cannot be NaN",0d,98,fe,01));
            			}
HXLINE( 484)			if ((maxForce < 0)) {
HXLINE( 485)				HX_STACK_DO_THROW(HX_("Error: Constraint::maxForce must be >=0",bd,89,ae,46));
            			}
HXLINE( 488)			if ((this->zpp_inner->maxForce != maxForce)) {
HXLINE( 489)				this->zpp_inner->maxForce = maxForce;
HXLINE( 490)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 493)		return this->zpp_inner->maxForce;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_maxForce,return )

Float Constraint_obj::get_maxError(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_510_get_maxError)
HXDLIN( 510)		return this->zpp_inner->maxError;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_maxError,return )

Float Constraint_obj::set_maxError(Float maxError){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_512_set_maxError)
HXLINE( 513)		{
HXLINE( 515)			if ((maxError != maxError)) {
HXLINE( 516)				HX_STACK_DO_THROW(HX_("Error: Constraint::maxError cannot be NaN",aa,5a,26,1b));
            			}
HXLINE( 518)			if ((maxError < 0)) {
HXLINE( 519)				HX_STACK_DO_THROW(HX_("Error: Constraint::maxError must be >=0",1a,7b,31,c4));
            			}
HXLINE( 522)			if ((this->zpp_inner->maxError != maxError)) {
HXLINE( 523)				this->zpp_inner->maxError = maxError;
HXLINE( 524)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 527)		return this->zpp_inner->maxError;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_maxError,return )

bool Constraint_obj::get_breakUnderForce(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_541_get_breakUnderForce)
HXDLIN( 541)		return this->zpp_inner->breakUnderForce;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_breakUnderForce,return )

bool Constraint_obj::set_breakUnderForce(bool breakUnderForce){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_543_set_breakUnderForce)
HXLINE( 545)		if ((this->zpp_inner->breakUnderForce != breakUnderForce)) {
HXLINE( 546)			this->zpp_inner->breakUnderForce = breakUnderForce;
HXLINE( 547)			this->zpp_inner->wake();
            		}
HXLINE( 550)		return this->zpp_inner->breakUnderForce;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_breakUnderForce,return )

bool Constraint_obj::get_breakUnderError(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_562_get_breakUnderError)
HXDLIN( 562)		return this->zpp_inner->breakUnderError;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_breakUnderError,return )

bool Constraint_obj::set_breakUnderError(bool breakUnderError){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_564_set_breakUnderError)
HXLINE( 566)		if ((this->zpp_inner->breakUnderError != breakUnderError)) {
HXLINE( 567)			this->zpp_inner->breakUnderError = breakUnderError;
HXLINE( 568)			this->zpp_inner->wake();
            		}
HXLINE( 571)		return this->zpp_inner->breakUnderError;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_breakUnderError,return )

bool Constraint_obj::get_removeOnBreak(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_584_get_removeOnBreak)
HXDLIN( 584)		return this->zpp_inner->removeOnBreak;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_removeOnBreak,return )

bool Constraint_obj::set_removeOnBreak(bool removeOnBreak){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_586_set_removeOnBreak)
HXLINE( 588)		this->zpp_inner->removeOnBreak = removeOnBreak;
HXLINE( 590)		return this->zpp_inner->removeOnBreak;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,set_removeOnBreak,return )

 ::nape::geom::MatMN Constraint_obj::impulse(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_598_impulse)
HXDLIN( 598)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,impulse,return )

 ::nape::geom::Vec3 Constraint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_611_bodyImpulse)
HXDLIN( 611)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,bodyImpulse,return )

void Constraint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_622_visitBodies)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,visitBodies,(void))

 ::nape::callbacks::CbTypeList Constraint_obj::get_cbTypes(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_632_get_cbTypes)
HXLINE( 633)		if (hx::IsNull( this->zpp_inner->wrap_cbTypes )) {
HXLINE( 634)			this->zpp_inner->setupcbTypes();
            		}
HXLINE( 636)		return this->zpp_inner->wrap_cbTypes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,get_cbTypes,return )

::String Constraint_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_654_toString)
HXDLIN( 654)		return HX_("{Constraint}",c5,94,e0,92);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,toString,return )

 ::nape::constraint::Constraint Constraint_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_665_copy)
HXDLIN( 665)		return this->zpp_inner->copy(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Constraint_obj,copy,return )

bool Constraint_obj::zpp_internalAlloc;


hx::ObjectPtr< Constraint_obj > Constraint_obj::__new() {
	hx::ObjectPtr< Constraint_obj > __this = new Constraint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Constraint_obj > Constraint_obj::__alloc(hx::Ctx *_hx_ctx) {
	Constraint_obj *__this = (Constraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Constraint_obj), true, "nape.constraint.Constraint"));
	*(void **)__this = Constraint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Constraint_obj::Constraint_obj()
{
}

void Constraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Constraint);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_MEMBER_NAME(debugDraw,"debugDraw");
	HX_MARK_END_CLASS();
}

void Constraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_VISIT_MEMBER_NAME(debugDraw,"debugDraw");
}

hx::Val Constraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_space() ); }
		if (HX_FIELD_EQ(inName,"stiff") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stiff() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_active() ); }
		if (HX_FIELD_EQ(inName,"ignore") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ignore() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"damping") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_damping() ); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"cbTypes") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cbTypes() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_userData() ); }
		if (HX_FIELD_EQ(inName,"compound") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_compound() ); }
		if (HX_FIELD_EQ(inName,"maxForce") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxForce() ); }
		if (HX_FIELD_EQ(inName,"maxError") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxError() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner ); }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { return hx::Val( debugDraw ); }
		if (HX_FIELD_EQ(inName,"get_space") ) { return hx::Val( get_space_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_space") ) { return hx::Val( set_space_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stiff") ) { return hx::Val( get_stiff_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stiff") ) { return hx::Val( set_stiff_dyn() ); }
		if (HX_FIELD_EQ(inName,"frequency") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frequency() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isSleeping") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isSleeping() ); }
		if (HX_FIELD_EQ(inName,"get_active") ) { return hx::Val( get_active_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_active") ) { return hx::Val( set_active_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ignore") ) { return hx::Val( get_ignore_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ignore") ) { return hx::Val( set_ignore_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_damping") ) { return hx::Val( get_damping_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_damping") ) { return hx::Val( set_damping_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cbTypes") ) { return hx::Val( get_cbTypes_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_compound") ) { return hx::Val( get_compound_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_compound") ) { return hx::Val( set_compound_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxForce") ) { return hx::Val( get_maxForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxForce") ) { return hx::Val( set_maxForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxError") ) { return hx::Val( get_maxError_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxError") ) { return hx::Val( set_maxError_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_frequency") ) { return hx::Val( get_frequency_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frequency") ) { return hx::Val( set_frequency_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeOnBreak") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_removeOnBreak() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_isSleeping") ) { return hx::Val( get_isSleeping_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"breakUnderForce") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_breakUnderForce() ); }
		if (HX_FIELD_EQ(inName,"breakUnderError") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_breakUnderError() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_removeOnBreak") ) { return hx::Val( get_removeOnBreak_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_removeOnBreak") ) { return hx::Val( set_removeOnBreak_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_breakUnderForce") ) { return hx::Val( get_breakUnderForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_breakUnderForce") ) { return hx::Val( set_breakUnderForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_breakUnderError") ) { return hx::Val( get_breakUnderError_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_breakUnderError") ) { return hx::Val( set_breakUnderError_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Constraint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"zpp_internalAlloc") ) { outValue = ( zpp_internalAlloc ); return true; }
	}
	return false;
}

hx::Val Constraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_space(inValue.Cast<  ::nape::space::Space >()) ); }
		if (HX_FIELD_EQ(inName,"stiff") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stiff(inValue.Cast< bool >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_active(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"ignore") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ignore(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"damping") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_damping(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"compound") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_compound(inValue.Cast<  ::nape::phys::Compound >()) ); }
		if (HX_FIELD_EQ(inName,"maxForce") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxForce(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"maxError") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxError(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::constraint::ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { debugDraw=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frequency") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frequency(inValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeOnBreak") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_removeOnBreak(inValue.Cast< bool >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"breakUnderForce") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_breakUnderForce(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"breakUnderError") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_breakUnderError(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Constraint_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"zpp_internalAlloc") ) { zpp_internalAlloc=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Constraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zpp_inner",51,65,85,78));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("debugDraw",f7,cf,bb,25));
	outFields->push(HX_("compound",6b,c3,cf,81));
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("isSleeping",35,6a,42,8b));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("ignore",12,b9,c8,92));
	outFields->push(HX_("stiff",e8,7b,11,84));
	outFields->push(HX_("frequency",9c,82,ea,bb));
	outFields->push(HX_("damping",c2,90,05,14));
	outFields->push(HX_("maxForce",a7,04,b2,ae));
	outFields->push(HX_("maxError",84,1e,47,1d));
	outFields->push(HX_("breakUnderForce",52,c7,85,6d));
	outFields->push(HX_("breakUnderError",2f,e1,1a,dc));
	outFields->push(HX_("removeOnBreak",3c,1f,e4,27));
	outFields->push(HX_("cbTypes",5a,29,bf,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Constraint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::constraint::ZPP_Constraint */ ,(int)offsetof(Constraint_obj,zpp_inner),HX_("zpp_inner",51,65,85,78)},
	{hx::fsBool,(int)offsetof(Constraint_obj,debugDraw),HX_("debugDraw",f7,cf,bb,25)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Constraint_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Constraint_obj::zpp_internalAlloc,HX_("zpp_internalAlloc",b3,36,26,40)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Constraint_obj_sMemberFields[] = {
	HX_("zpp_inner",51,65,85,78),
	HX_("get_userData",1e,4a,42,ba),
	HX_("debugDraw",f7,cf,bb,25),
	HX_("get_compound",74,77,e9,36),
	HX_("set_compound",e8,9a,e2,4b),
	HX_("get_space",1d,e9,0f,c5),
	HX_("set_space",29,d5,60,a8),
	HX_("get_isSleeping",7e,f2,37,01),
	HX_("get_active",8f,b1,cd,06),
	HX_("set_active",03,50,4b,0a),
	HX_("get_ignore",db,28,50,83),
	HX_("set_ignore",4f,c7,cd,86),
	HX_("get_stiff",3f,d8,ba,c7),
	HX_("set_stiff",4b,c4,0b,ab),
	HX_("get_frequency",73,56,4e,7d),
	HX_("set_frequency",7f,38,54,c2),
	HX_("get_damping",d9,f0,ff,99),
	HX_("set_damping",e5,f7,6c,a4),
	HX_("get_maxForce",b0,b8,cb,63),
	HX_("set_maxForce",24,dc,c4,78),
	HX_("get_maxError",8d,d2,60,d2),
	HX_("set_maxError",01,f6,59,e7),
	HX_("get_breakUnderForce",69,96,90,f8),
	HX_("set_breakUnderForce",75,89,2d,35),
	HX_("get_breakUnderError",46,b0,25,67),
	HX_("set_breakUnderError",52,a3,c2,a3),
	HX_("get_removeOnBreak",93,2a,54,2e),
	HX_("set_removeOnBreak",9f,02,c2,51),
	HX_("impulse",b5,50,bd,6d),
	HX_("bodyImpulse",33,76,a2,5f),
	HX_("visitBodies",ab,f3,5e,e4),
	HX_("get_cbTypes",71,89,b9,77),
	HX_("toString",ac,d0,6e,38),
	HX_("copy",b5,bb,c4,41),
	::String(null()) };

static void Constraint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Constraint_obj::zpp_internalAlloc,"zpp_internalAlloc");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Constraint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Constraint_obj::zpp_internalAlloc,"zpp_internalAlloc");
};

#endif

hx::Class Constraint_obj::__mClass;

static ::String Constraint_obj_sStaticFields[] = {
	HX_("zpp_internalAlloc",b3,36,26,40),
	::String(null())
};

void Constraint_obj::__register()
{
	Constraint_obj _hx_dummy;
	Constraint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.constraint.Constraint",e8,dc,00,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Constraint_obj::__GetStatic;
	__mClass->mSetStaticField = &Constraint_obj::__SetStatic;
	__mClass->mMarkFunc = Constraint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Constraint_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Constraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Constraint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Constraint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Constraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Constraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Constraint_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0ea3983b8ffdc043_642_boot)
HXDLIN( 642)		zpp_internalAlloc = false;
            	}
}

} // end namespace nape
} // end namespace constraint
