// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <hxinc/nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <hxinc/nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <hxinc/nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <hxinc/zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_78f850d72f392f8a_185_new,"nape.callbacks.ConstraintCallback","new",0x7f5608fa,"nape.callbacks.ConstraintCallback.new","nape/callbacks/ConstraintCallback.hx",185,0xe2929534)
HX_LOCAL_STACK_FRAME(_hx_pos_78f850d72f392f8a_193_get_constraint,"nape.callbacks.ConstraintCallback","get_constraint",0xfa22424c,"nape.callbacks.ConstraintCallback.get_constraint","nape/callbacks/ConstraintCallback.hx",193,0xe2929534)
HX_LOCAL_STACK_FRAME(_hx_pos_78f850d72f392f8a_198_toString,"nape.callbacks.ConstraintCallback","toString",0xa15729d2,"nape.callbacks.ConstraintCallback.toString","nape/callbacks/ConstraintCallback.hx",198,0xe2929534)
static const ::String _hx_array_data_a633c408_3[] = {
	HX_("WAKE",24,24,b3,39),HX_("SLEEP",f7,f4,b2,fc),HX_("BREAK",9f,5c,da,36),
};
namespace nape{
namespace callbacks{

void ConstraintCallback_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_78f850d72f392f8a_185_new)
HXDLIN( 185)		super::__construct();
            	}

Dynamic ConstraintCallback_obj::__CreateEmpty() { return new ConstraintCallback_obj; }

void *ConstraintCallback_obj::_hx_vtable = 0;

Dynamic ConstraintCallback_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConstraintCallback_obj > _hx_result = new ConstraintCallback_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ConstraintCallback_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1e829ba7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1e829ba7;
	} else {
		return inClassId==(int)0x3270b1c0;
	}
}

 ::nape::constraint::Constraint ConstraintCallback_obj::get_constraint(){
            	HX_STACKFRAME(&_hx_pos_78f850d72f392f8a_193_get_constraint)
HXDLIN( 193)		return this->zpp_inner->constraint->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConstraintCallback_obj,get_constraint,return )

::String ConstraintCallback_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_78f850d72f392f8a_198_toString)
HXLINE( 199)		::String ret = HX_("Cb:",9b,2c,33,00);
HXLINE( 200)		ret = (ret + ::Array_obj< ::String >::fromData( _hx_array_data_a633c408_3,3)->__get((this->zpp_inner->event - 2)));
HXLINE( 201)		ret = (ret + (HX_(":",3a,00,00,00) + this->zpp_inner->constraint->outer->toString()));
HXLINE( 202)		ret = (ret + (HX_(" : listener: ",60,26,46,e2) + ::Std_obj::string(this->zpp_inner->listener->outer)));
HXLINE( 203)		return ret;
            	}



hx::ObjectPtr< ConstraintCallback_obj > ConstraintCallback_obj::__new() {
	hx::ObjectPtr< ConstraintCallback_obj > __this = new ConstraintCallback_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ConstraintCallback_obj > ConstraintCallback_obj::__alloc(hx::Ctx *_hx_ctx) {
	ConstraintCallback_obj *__this = (ConstraintCallback_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConstraintCallback_obj), true, "nape.callbacks.ConstraintCallback"));
	*(void **)__this = ConstraintCallback_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ConstraintCallback_obj::ConstraintCallback_obj()
{
}

hx::Val ConstraintCallback_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"constraint") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_constraint() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_constraint") ) { return hx::Val( get_constraint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void ConstraintCallback_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("constraint",5d,00,cc,5a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ConstraintCallback_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ConstraintCallback_obj_sStaticStorageInfo = 0;
#endif

static ::String ConstraintCallback_obj_sMemberFields[] = {
	HX_("get_constraint",a6,88,c1,d0),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class ConstraintCallback_obj::__mClass;

void ConstraintCallback_obj::__register()
{
	ConstraintCallback_obj _hx_dummy;
	ConstraintCallback_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.callbacks.ConstraintCallback",08,c4,33,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConstraintCallback_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConstraintCallback_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConstraintCallback_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConstraintCallback_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace callbacks
