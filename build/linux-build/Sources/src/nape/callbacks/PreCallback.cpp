// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <hxinc/nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <hxinc/nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreCallback
#include <hxinc/nape/callbacks/PreCallback.h>
#endif
#ifndef INCLUDED_nape_dynamics_Arbiter
#include <hxinc/nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <hxinc/zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e5cf6054a047c71d_185_new,"nape.callbacks.PreCallback","new",0xf820f574,"nape.callbacks.PreCallback.new","nape/callbacks/PreCallback.hx",185,0x4a2c4f3e)
HX_LOCAL_STACK_FRAME(_hx_pos_e5cf6054a047c71d_197_get_arbiter,"nape.callbacks.PreCallback","get_arbiter",0xfb267914,"nape.callbacks.PreCallback.get_arbiter","nape/callbacks/PreCallback.hx",197,0x4a2c4f3e)
HX_LOCAL_STACK_FRAME(_hx_pos_e5cf6054a047c71d_208_get_int1,"nape.callbacks.PreCallback","get_int1",0x9a05f257,"nape.callbacks.PreCallback.get_int1","nape/callbacks/PreCallback.hx",208,0x4a2c4f3e)
HX_LOCAL_STACK_FRAME(_hx_pos_e5cf6054a047c71d_219_get_int2,"nape.callbacks.PreCallback","get_int2",0x9a05f258,"nape.callbacks.PreCallback.get_int2","nape/callbacks/PreCallback.hx",219,0x4a2c4f3e)
HX_LOCAL_STACK_FRAME(_hx_pos_e5cf6054a047c71d_233_get_swapped,"nape.callbacks.PreCallback","get_swapped",0x58a88147,"nape.callbacks.PreCallback.get_swapped","nape/callbacks/PreCallback.hx",233,0x4a2c4f3e)
HX_LOCAL_STACK_FRAME(_hx_pos_e5cf6054a047c71d_238_toString,"nape.callbacks.PreCallback","toString",0x0cfec318,"nape.callbacks.PreCallback.toString","nape/callbacks/PreCallback.hx",238,0x4a2c4f3e)
namespace nape{
namespace callbacks{

void PreCallback_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e5cf6054a047c71d_185_new)
HXDLIN( 185)		super::__construct();
            	}

Dynamic PreCallback_obj::__CreateEmpty() { return new PreCallback_obj; }

void *PreCallback_obj::_hx_vtable = 0;

Dynamic PreCallback_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PreCallback_obj > _hx_result = new PreCallback_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PreCallback_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x090be866) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x090be866;
	} else {
		return inClassId==(int)0x1e829ba7;
	}
}

 ::nape::dynamics::Arbiter PreCallback_obj::get_arbiter(){
            	HX_STACKFRAME(&_hx_pos_e5cf6054a047c71d_197_get_arbiter)
HXDLIN( 197)		return this->zpp_inner->pre_arbiter->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreCallback_obj,get_arbiter,return )

 ::nape::phys::Interactor PreCallback_obj::get_int1(){
            	HX_STACKFRAME(&_hx_pos_e5cf6054a047c71d_208_get_int1)
HXDLIN( 208)		return this->zpp_inner->int1->outer_i;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreCallback_obj,get_int1,return )

 ::nape::phys::Interactor PreCallback_obj::get_int2(){
            	HX_STACKFRAME(&_hx_pos_e5cf6054a047c71d_219_get_int2)
HXDLIN( 219)		return this->zpp_inner->int2->outer_i;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreCallback_obj,get_int2,return )

bool PreCallback_obj::get_swapped(){
            	HX_STACKFRAME(&_hx_pos_e5cf6054a047c71d_233_get_swapped)
HXDLIN( 233)		return this->zpp_inner->pre_swapped;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreCallback_obj,get_swapped,return )

::String PreCallback_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e5cf6054a047c71d_238_toString)
HXLINE( 239)		::String ret = HX_("Cb:PRE:",f2,9c,74,ab);
HXLINE( 240)		::String ret1 = ((HX_(":",3a,00,00,00) + this->zpp_inner->int1->outer_i->toString()) + HX_("/",2f,00,00,00));
HXDLIN( 240)		ret = (ret + (ret1 + this->zpp_inner->int2->outer_i->toString()));
HXLINE( 241)		ret = (ret + (HX_(" : ",c6,7a,18,00) + this->zpp_inner->pre_arbiter->wrapper()->toString()));
HXLINE( 242)		ret = (ret + (HX_(" : listnener: ",86,62,54,1e) + ::Std_obj::string(this->zpp_inner->listener->outer)));
HXLINE( 243)		return ret;
            	}



hx::ObjectPtr< PreCallback_obj > PreCallback_obj::__new() {
	hx::ObjectPtr< PreCallback_obj > __this = new PreCallback_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< PreCallback_obj > PreCallback_obj::__alloc(hx::Ctx *_hx_ctx) {
	PreCallback_obj *__this = (PreCallback_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PreCallback_obj), true, "nape.callbacks.PreCallback"));
	*(void **)__this = PreCallback_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PreCallback_obj::PreCallback_obj()
{
}

hx::Val PreCallback_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"int1") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_int1() ); }
		if (HX_FIELD_EQ(inName,"int2") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_int2() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arbiter") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_arbiter() ); }
		if (HX_FIELD_EQ(inName,"swapped") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_swapped() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_int1") ) { return hx::Val( get_int1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_int2") ) { return hx::Val( get_int2_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_arbiter") ) { return hx::Val( get_arbiter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_swapped") ) { return hx::Val( get_swapped_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void PreCallback_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("arbiter",e9,bf,55,09));
	outFields->push(HX_("int1",62,44,bb,45));
	outFields->push(HX_("int2",63,44,bb,45));
	outFields->push(HX_("swapped",1c,c8,d7,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *PreCallback_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PreCallback_obj_sStaticStorageInfo = 0;
#endif

static ::String PreCallback_obj_sMemberFields[] = {
	HX_("get_arbiter",00,20,50,8f),
	HX_("get_int1",eb,ff,75,c5),
	HX_("get_int2",ec,ff,75,c5),
	HX_("get_swapped",33,28,d2,ec),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class PreCallback_obj::__mClass;

void PreCallback_obj::__register()
{
	PreCallback_obj _hx_dummy;
	PreCallback_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("nape.callbacks.PreCallback",82,6b,3c,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PreCallback_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PreCallback_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PreCallback_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PreCallback_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace callbacks
