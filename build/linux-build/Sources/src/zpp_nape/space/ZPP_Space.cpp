// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_callbacks_BodyCallback
#include <hxinc/nape/callbacks/BodyCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <hxinc/nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <hxinc/nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionCallback
#include <hxinc/nape/callbacks/InteractionCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <hxinc/nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerList
#include <hxinc/nape/callbacks/ListenerList.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreCallback
#include <hxinc/nape/callbacks/PreCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreFlag
#include <hxinc/nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <hxinc/nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <hxinc/nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactList
#include <hxinc/nape/dynamics/ContactList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <hxinc/nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <hxinc/nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <hxinc/nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultList
#include <hxinc/nape/geom/ConvexResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <hxinc/nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <hxinc/nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <hxinc/nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <hxinc/nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <hxinc/nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <hxinc/nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <hxinc/nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <hxinc/nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <hxinc/nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <hxinc/zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <hxinc/zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <hxinc/zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <hxinc/zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <hxinc/zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <hxinc/zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <hxinc/zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <hxinc/zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <hxinc/zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <hxinc/zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <hxinc/zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <hxinc/zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SweepDistance
#include <hxinc/zpp_nape/geom/ZPP_SweepDistance.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <hxinc/zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <hxinc/zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <hxinc/zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <hxinc/zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <hxinc/zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <hxinc/zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <hxinc/zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <hxinc/zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <hxinc/zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <hxinc/zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <hxinc/zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <hxinc/zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#include <hxinc/zpp_nape/space/ZPP_Island.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <hxinc/zpp_nape/space/ZPP_SweepPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ConvexResult
#include <hxinc/zpp_nape/util/ZNPList_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CallbackSet
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Component
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Listener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ToiEvent
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ConvexResult
#include <hxinc/zpp_nape/util/ZNPNode_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Component
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Compound
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Listener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ToiEvent
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ArbiterList
#include <hxinc/zpp_nape/util/ZPP_ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <hxinc/zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <hxinc/zpp_nape/util/ZPP_CompoundList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <hxinc/zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ContactList
#include <hxinc/zpp_nape/util/ZPP_ContactList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConvexResultList
#include <hxinc/zpp_nape/util/ZPP_ConvexResultList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ListenerList
#include <hxinc/zpp_nape/util/ZPP_ListenerList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <hxinc/zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <hxinc/zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_76b1af9228667226_1379_new,"zpp_nape.space.ZPP_Space","new",0xcd0d3aaa,"zpp_nape.space.ZPP_Space.new","zpp_nape/space/Space.hx",1379,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1385_getgravity,"zpp_nape.space.ZPP_Space","getgravity",0x924c9f6e,"zpp_nape.space.ZPP_Space.getgravity","zpp_nape/space/Space.hx",1385,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1391_gravity_invalidate,"zpp_nape.space.ZPP_Space","gravity_invalidate",0xaddc5802,"zpp_nape.space.ZPP_Space.gravity_invalidate","zpp_nape/space/Space.hx",1391,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1503_gravity_validate,"zpp_nape.space.ZPP_Space","gravity_validate",0xf1138f5d,"zpp_nape.space.ZPP_Space.gravity_validate","zpp_nape/space/Space.hx",1503,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1556_clear,"zpp_nape.space.ZPP_Space","clear",0xc5fb8257,"zpp_nape.space.ZPP_Space.clear","zpp_nape/space/Space.hx",1556,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1815_bodies_adder,"zpp_nape.space.ZPP_Space","bodies_adder",0xc459d405,"zpp_nape.space.ZPP_Space.bodies_adder","zpp_nape/space/Space.hx",1815,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1827_bodies_subber,"zpp_nape.space.ZPP_Space","bodies_subber",0x05274cb8,"zpp_nape.space.ZPP_Space.bodies_subber","zpp_nape/space/Space.hx",1827,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1831_bodies_modifiable,"zpp_nape.space.ZPP_Space","bodies_modifiable",0x24b4786d,"zpp_nape.space.ZPP_Space.bodies_modifiable","zpp_nape/space/Space.hx",1831,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1834_compounds_adder,"zpp_nape.space.ZPP_Space","compounds_adder",0x5d387601,"zpp_nape.space.ZPP_Space.compounds_adder","zpp_nape/space/Space.hx",1834,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1846_compounds_subber,"zpp_nape.space.ZPP_Space","compounds_subber",0x2f16673c,"zpp_nape.space.ZPP_Space.compounds_subber","zpp_nape/space/Space.hx",1846,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1850_compounds_modifiable,"zpp_nape.space.ZPP_Space","compounds_modifiable",0xde1d24f1,"zpp_nape.space.ZPP_Space.compounds_modifiable","zpp_nape/space/Space.hx",1850,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1853_constraints_adder,"zpp_nape.space.ZPP_Space","constraints_adder",0xe3b201cf,"zpp_nape.space.ZPP_Space.constraints_adder","zpp_nape/space/Space.hx",1853,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1865_constraints_subber,"zpp_nape.space.ZPP_Space","constraints_subber",0x52f72fae,"zpp_nape.space.ZPP_Space.constraints_subber","zpp_nape/space/Space.hx",1865,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1869_constraints_modifiable,"zpp_nape.space.ZPP_Space","constraints_modifiable",0x39b00e63,"zpp_nape.space.ZPP_Space.constraints_modifiable","zpp_nape/space/Space.hx",1869,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1873_listeners_adder,"zpp_nape.space.ZPP_Space","listeners_adder",0x1f0ddc18,"zpp_nape.space.ZPP_Space.listeners_adder","zpp_nape/space/Space.hx",1873,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1881_listeners_subber,"zpp_nape.space.ZPP_Space","listeners_subber",0x07fa5545,"zpp_nape.space.ZPP_Space.listeners_subber","zpp_nape/space/Space.hx",1881,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1885_listeners_modifiable,"zpp_nape.space.ZPP_Space","listeners_modifiable",0xf12b4b7a,"zpp_nape.space.ZPP_Space.listeners_modifiable","zpp_nape/space/Space.hx",1885,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_1997_revoke_listener,"zpp_nape.space.ZPP_Space","revoke_listener",0x651e3217,"zpp_nape.space.ZPP_Space.revoke_listener","zpp_nape/space/Space.hx",1997,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2000_unrevoke_listener,"zpp_nape.space.ZPP_Space","unrevoke_listener",0xf8c53e5e,"zpp_nape.space.ZPP_Space.unrevoke_listener","zpp_nape/space/Space.hx",2000,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2001_addListener,"zpp_nape.space.ZPP_Space","addListener",0x0689fbff,"zpp_nape.space.ZPP_Space.addListener","zpp_nape/space/Space.hx",2001,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2008_remListener,"zpp_nape.space.ZPP_Space","remListener",0xc0164438,"zpp_nape.space.ZPP_Space.remListener","zpp_nape/space/Space.hx",2008,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2015_add_callbackset,"zpp_nape.space.ZPP_Space","add_callbackset",0x4d0929e9,"zpp_nape.space.ZPP_Space.add_callbackset","zpp_nape/space/Space.hx",2015,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2028_remove_callbackset,"zpp_nape.space.ZPP_Space","remove_callbackset",0xa7750438,"zpp_nape.space.ZPP_Space.remove_callbackset","zpp_nape/space/Space.hx",2028,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2033_transmitType,"zpp_nape.space.ZPP_Space","transmitType",0xd12f15c0,"zpp_nape.space.ZPP_Space.transmitType","zpp_nape/space/Space.hx",2033,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2102_added_shape,"zpp_nape.space.ZPP_Space","added_shape",0x3bf3d36c,"zpp_nape.space.ZPP_Space.added_shape","zpp_nape/space/Space.hx",2102,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2134_removed_shape,"zpp_nape.space.ZPP_Space","removed_shape",0x687caccc,"zpp_nape.space.ZPP_Space.removed_shape","zpp_nape/space/Space.hx",2134,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2278_addConstraint,"zpp_nape.space.ZPP_Space","addConstraint",0x6bc234a8,"zpp_nape.space.ZPP_Space.addConstraint","zpp_nape/space/Space.hx",2278,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2294_remConstraint,"zpp_nape.space.ZPP_Space","remConstraint",0xd71bbd21,"zpp_nape.space.ZPP_Space.remConstraint","zpp_nape/space/Space.hx",2294,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2302_addCompound,"zpp_nape.space.ZPP_Space","addCompound",0x5027bef6,"zpp_nape.space.ZPP_Space.addCompound","zpp_nape/space/Space.hx",2302,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2330_remCompound,"zpp_nape.space.ZPP_Space","remCompound",0x09b4072f,"zpp_nape.space.ZPP_Space.remCompound","zpp_nape/space/Space.hx",2330,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2358_addBody,"zpp_nape.space.ZPP_Space","addBody",0xafb614ad,"zpp_nape.space.ZPP_Space.addBody","zpp_nape/space/Space.hx",2358,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2439_remBody,"zpp_nape.space.ZPP_Space","remBody",0x07998c66,"zpp_nape.space.ZPP_Space.remBody","zpp_nape/space/Space.hx",2439,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2582_shapesUnderPoint,"zpp_nape.space.ZPP_Space","shapesUnderPoint",0x46035c60,"zpp_nape.space.ZPP_Space.shapesUnderPoint","zpp_nape/space/Space.hx",2582,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2585_bodiesUnderPoint,"zpp_nape.space.ZPP_Space","bodiesUnderPoint",0x7e768b2e,"zpp_nape.space.ZPP_Space.bodiesUnderPoint","zpp_nape/space/Space.hx",2585,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2588_shapesInAABB,"zpp_nape.space.ZPP_Space","shapesInAABB",0xb8d4194d,"zpp_nape.space.ZPP_Space.shapesInAABB","zpp_nape/space/Space.hx",2588,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2591_bodiesInAABB,"zpp_nape.space.ZPP_Space","bodiesInAABB",0x5d78491b,"zpp_nape.space.ZPP_Space.bodiesInAABB","zpp_nape/space/Space.hx",2591,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2594_shapesInCircle,"zpp_nape.space.ZPP_Space","shapesInCircle",0x9d985a1d,"zpp_nape.space.ZPP_Space.shapesInCircle","zpp_nape/space/Space.hx",2594,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2597_bodiesInCircle,"zpp_nape.space.ZPP_Space","bodiesInCircle",0xd782996b,"zpp_nape.space.ZPP_Space.bodiesInCircle","zpp_nape/space/Space.hx",2597,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2600_shapesInShape,"zpp_nape.space.ZPP_Space","shapesInShape",0x77d77bb4,"zpp_nape.space.ZPP_Space.shapesInShape","zpp_nape/space/Space.hx",2600,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2603_bodiesInShape,"zpp_nape.space.ZPP_Space","bodiesInShape",0xe2dd2026,"zpp_nape.space.ZPP_Space.bodiesInShape","zpp_nape/space/Space.hx",2603,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2606_rayCast,"zpp_nape.space.ZPP_Space","rayCast",0x5799b513,"zpp_nape.space.ZPP_Space.rayCast","zpp_nape/space/Space.hx",2606,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2609_rayMultiCast,"zpp_nape.space.ZPP_Space","rayMultiCast",0xe2ccff04,"zpp_nape.space.ZPP_Space.rayMultiCast","zpp_nape/space/Space.hx",2609,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2612_convexCast,"zpp_nape.space.ZPP_Space","convexCast",0xd0fbd4bc,"zpp_nape.space.ZPP_Space.convexCast","zpp_nape/space/Space.hx",2612,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2834_prepareCast,"zpp_nape.space.ZPP_Space","prepareCast",0x89217030,"zpp_nape.space.ZPP_Space.prepareCast","zpp_nape/space/Space.hx",2834,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2837_convexMultiCast,"zpp_nape.space.ZPP_Space","convexMultiCast",0xc8aa7abb,"zpp_nape.space.ZPP_Space.convexMultiCast","zpp_nape/space/Space.hx",2837,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_2982_push_callback,"zpp_nape.space.ZPP_Space","push_callback",0x00285ed4,"zpp_nape.space.ZPP_Space.push_callback","zpp_nape/space/Space.hx",2982,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3014_step,"zpp_nape.space.ZPP_Space","step",0xa1df7dc2,"zpp_nape.space.ZPP_Space.step","zpp_nape/space/Space.hx",3014,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3354_continuousCollisions,"zpp_nape.space.ZPP_Space","continuousCollisions",0xd9b3b026,"zpp_nape.space.ZPP_Space.continuousCollisions","zpp_nape/space/Space.hx",3354,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3581_continuousEvent,"zpp_nape.space.ZPP_Space","continuousEvent",0xdb782dd5,"zpp_nape.space.ZPP_Space.continuousEvent","zpp_nape/space/Space.hx",3581,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3668_bodyCbWake,"zpp_nape.space.ZPP_Space","bodyCbWake",0x1bbe819b,"zpp_nape.space.ZPP_Space.bodyCbWake","zpp_nape/space/Space.hx",3668,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3691_bodyCbSleep,"zpp_nape.space.ZPP_Space","bodyCbSleep",0xe4995fc0,"zpp_nape.space.ZPP_Space.bodyCbSleep","zpp_nape/space/Space.hx",3691,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3711_constraintCbWake,"zpp_nape.space.ZPP_Space","constraintCbWake",0x06582216,"zpp_nape.space.ZPP_Space.constraintCbWake","zpp_nape/space/Space.hx",3711,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3734_constraintCbSleep,"zpp_nape.space.ZPP_Space","constraintCbSleep",0x406c2ae5,"zpp_nape.space.ZPP_Space.constraintCbSleep","zpp_nape/space/Space.hx",3734,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3754_constraintCbBreak,"zpp_nape.space.ZPP_Space","constraintCbBreak",0x7a93928d,"zpp_nape.space.ZPP_Space.constraintCbBreak","zpp_nape/space/Space.hx",3754,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3773_nullListenerType,"zpp_nape.space.ZPP_Space","nullListenerType",0x3dedf1eb,"zpp_nape.space.ZPP_Space.nullListenerType","zpp_nape/space/Space.hx",3773,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3882_nullInteractorType,"zpp_nape.space.ZPP_Space","nullInteractorType",0x73de2f90,"zpp_nape.space.ZPP_Space.nullInteractorType","zpp_nape/space/Space.hx",3882,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_3964_freshListenerType,"zpp_nape.space.ZPP_Space","freshListenerType",0xf4ea40a6,"zpp_nape.space.ZPP_Space.freshListenerType","zpp_nape/space/Space.hx",3964,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4061_freshInteractorType,"zpp_nape.space.ZPP_Space","freshInteractorType",0x1d97e30b,"zpp_nape.space.ZPP_Space.freshInteractorType","zpp_nape/space/Space.hx",4061,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4149_wakeCompound,"zpp_nape.space.ZPP_Space","wakeCompound",0x17729c25,"zpp_nape.space.ZPP_Space.wakeCompound","zpp_nape/space/Space.hx",4149,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4200_wakeIsland,"zpp_nape.space.ZPP_Space","wakeIsland",0xe72ff50f,"zpp_nape.space.ZPP_Space.wakeIsland","zpp_nape/space/Space.hx",4200,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4304_non_inlined_wake,"zpp_nape.space.ZPP_Space","non_inlined_wake",0xabd7e560,"zpp_nape.space.ZPP_Space.non_inlined_wake","zpp_nape/space/Space.hx",4304,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4332_really_wake,"zpp_nape.space.ZPP_Space","really_wake",0xda69fb02,"zpp_nape.space.ZPP_Space.really_wake","zpp_nape/space/Space.hx",4332,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4449_wake_constraint,"zpp_nape.space.ZPP_Space","wake_constraint",0xa5c90d22,"zpp_nape.space.ZPP_Space.wake_constraint","zpp_nape/space/Space.hx",4449,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4483_doForests,"zpp_nape.space.ZPP_Space","doForests",0x60499a75,"zpp_nape.space.ZPP_Space.doForests","zpp_nape/space/Space.hx",4483,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4773_sleepArbiters,"zpp_nape.space.ZPP_Space","sleepArbiters",0xb30aff6b,"zpp_nape.space.ZPP_Space.sleepArbiters","zpp_nape/space/Space.hx",4773,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4922_static_validation,"zpp_nape.space.ZPP_Space","static_validation",0xfc081734,"zpp_nape.space.ZPP_Space.static_validation","zpp_nape/space/Space.hx",4922,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_4952_validation,"zpp_nape.space.ZPP_Space","validation",0x7a29df2f,"zpp_nape.space.ZPP_Space.validation","zpp_nape/space/Space.hx",4952,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5144_updateVel,"zpp_nape.space.ZPP_Space","updateVel",0x08bffd9e,"zpp_nape.space.ZPP_Space.updateVel","zpp_nape/space/Space.hx",5144,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5174_updatePos,"zpp_nape.space.ZPP_Space","updatePos",0x08bb78d5,"zpp_nape.space.ZPP_Space.updatePos","zpp_nape/space/Space.hx",5174,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5362_presteparb,"zpp_nape.space.ZPP_Space","presteparb",0xba8dbbb8,"zpp_nape.space.ZPP_Space.presteparb","zpp_nape/space/Space.hx",5362,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5506_prestep,"zpp_nape.space.ZPP_Space","prestep",0x6c44ec39,"zpp_nape.space.ZPP_Space.prestep","zpp_nape/space/Space.hx",5506,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5651_warmStart,"zpp_nape.space.ZPP_Space","warmStart",0x70dc65a7,"zpp_nape.space.ZPP_Space.warmStart","zpp_nape/space/Space.hx",5651,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5689_iterateVel,"zpp_nape.space.ZPP_Space","iterateVel",0xf7beeb79,"zpp_nape.space.ZPP_Space.iterateVel","zpp_nape/space/Space.hx",5689,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5746_iteratePos,"zpp_nape.space.ZPP_Space","iteratePos",0xf7ba66b0,"zpp_nape.space.ZPP_Space.iteratePos","zpp_nape/space/Space.hx",5746,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5802_group_ignore,"zpp_nape.space.ZPP_Space","group_ignore",0x665189c8,"zpp_nape.space.ZPP_Space.group_ignore","zpp_nape/space/Space.hx",5802,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5824_interactionType,"zpp_nape.space.ZPP_Space","interactionType",0x649d58f6,"zpp_nape.space.ZPP_Space.interactionType","zpp_nape/space/Space.hx",5824,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_5874_narrowPhase,"zpp_nape.space.ZPP_Space","narrowPhase",0x3219dfea,"zpp_nape.space.ZPP_Space.narrowPhase","zpp_nape/space/Space.hx",5874,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_7236_MRCA_chains,"zpp_nape.space.ZPP_Space","MRCA_chains",0xd89fbf58,"zpp_nape.space.ZPP_Space.MRCA_chains","zpp_nape/space/Space.hx",7236,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_76b1af9228667226_7240_inlined_MRCA_chains,"zpp_nape.space.ZPP_Space","inlined_MRCA_chains",0xfc72bfc4,"zpp_nape.space.ZPP_Space.inlined_MRCA_chains","zpp_nape/space/Space.hx",7240,0x2b65ed03)
namespace zpp_nape{
namespace space{

void ZPP_Space_obj::__construct( ::zpp_nape::geom::ZPP_Vec2 gravity, ::nape::space::Broadphase broadphase){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_1379_new)
HXLINE(5873)		this->prelisteners = null();
HXLINE(5872)		this->precb = null();
HXLINE(5361)		this->continuous = false;
HXLINE(3353)		this->toiEvents = null();
HXLINE(3013)		this->pre_dt = ((Float)0.0);
HXLINE(2611)		this->convexShapeList = null();
HXLINE(1555)		this->cbsets = null();
HXLINE(1554)		this->callbackset_list = null();
HXLINE(1553)		this->callbacks = null();
HXLINE(1552)		this->wrap_listeners = null();
HXLINE(1551)		this->listeners = null();
HXLINE(1550)		this->islands = null();
HXLINE(1549)		this->staticsleep = null();
HXLINE(1548)		this->wrap_livecon = null();
HXLINE(1547)		this->live_constraints = null();
HXLINE(1546)		this->wrap_live = null();
HXLINE(1545)		this->live = null();
HXLINE(1544)		this->wrap_arbiters = null();
HXLINE(1543)		this->s_arbiters = null();
HXLINE(1542)		this->f_arbiters = null();
HXLINE(1541)		this->c_arbiters_false = null();
HXLINE(1540)		this->c_arbiters_true = null();
HXLINE(1538)		this->sortcontacts = false;
HXLINE(1537)		this->time = ((Float)0.0);
HXLINE(1536)		this->midstep = false;
HXLINE(1535)		this->stamp = 0;
HXLINE(1534)		this->global_ang_drag = ((Float)0.0);
HXLINE(1533)		this->global_lin_drag = ((Float)0.0);
HXLINE(1532)		this->_hx___static = null();
HXLINE(1531)		this->bphase = null();
HXLINE(1530)		this->kinematics = null();
HXLINE(1529)		this->wrap_constraints = null();
HXLINE(1528)		this->constraints = null();
HXLINE(1527)		this->wrap_compounds = null();
HXLINE(1526)		this->compounds = null();
HXLINE(1525)		this->wrap_bodies = null();
HXLINE(1524)		this->bodies = null();
HXLINE(1384)		this->wrap_gravity = null();
HXLINE(1383)		this->gravityy = ((Float)0.0);
HXLINE(1382)		this->gravityx = ((Float)0.0);
HXLINE(1381)		this->userData = null();
HXLINE(1380)		this->outer = null();
HXLINE(1889)		this->toiEvents =  ::zpp_nape::util::ZNPList_ZPP_ToiEvent_obj::__alloc( HX_CTX );
HXLINE(1890)		this->global_lin_drag = ((Float)0.015);
HXLINE(1891)		this->global_ang_drag = ((Float)0.015);
HXLINE(1893)		::zpp_nape::callbacks::ZPP_Callback_obj::internal = true;
HXLINE(1895)		this->precb =  ::nape::callbacks::PreCallback_obj::__alloc( HX_CTX );
HXLINE(1896)		this->precb->zpp_inner =  ::zpp_nape::callbacks::ZPP_Callback_obj::__alloc( HX_CTX );
HXLINE(1898)		::zpp_nape::callbacks::ZPP_Callback_obj::internal = false;
HXLINE(1900)		this->sortcontacts = true;
HXLINE(1901)		this->pre_dt = ((Float)0.0);
HXLINE(1902)		bool _hx_tmp;
HXDLIN(1902)		if (hx::IsNotNull( broadphase )) {
HXLINE(1902)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE )) {
HXLINE(1902)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1902)				::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE =  ::nape::space::Broadphase_obj::__alloc( HX_CTX );
HXDLIN(1902)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN(1902)			_hx_tmp = hx::IsEq( broadphase,::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE );
            		}
            		else {
HXLINE(1902)			_hx_tmp = true;
            		}
HXDLIN(1902)		if (_hx_tmp) {
HXLINE(1902)			this->bphase =  ::zpp_nape::space::ZPP_DynAABBPhase_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(1903)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE )) {
HXLINE(1903)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1903)				::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE =  ::nape::space::Broadphase_obj::__alloc( HX_CTX );
HXDLIN(1903)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN(1903)			if (hx::IsEq( broadphase,::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE )) {
HXLINE(1903)				this->bphase =  ::zpp_nape::space::ZPP_SweepPhase_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE(1904)		this->time = ((Float)0.0);
HXLINE(1905)		 ::zpp_nape::space::ZPP_Space me = hx::ObjectPtr<OBJ_>(this);
HXLINE(1906)		if (hx::IsNotNull( gravity )) {
HXLINE(1907)			this->gravityx = gravity->x;
HXLINE(1908)			this->gravityy = gravity->y;
            		}
            		else {
HXLINE(1927)			this->gravityx = ( (Float)(0) );
HXLINE(1928)			this->gravityy = ( (Float)(0) );
            		}
HXLINE(1946)		this->bodies =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
HXLINE(1947)		this->wrap_bodies = ::zpp_nape::util::ZPP_BodyList_obj::get(this->bodies,null());
HXLINE(1948)		this->wrap_bodies->zpp_inner->adder = this->bodies_adder_dyn();
HXLINE(1949)		this->wrap_bodies->zpp_inner->subber = this->bodies_subber_dyn();
HXLINE(1951)		this->wrap_bodies->zpp_inner->_modifiable = this->bodies_modifiable_dyn();
HXLINE(1953)		this->compounds =  ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__alloc( HX_CTX );
HXLINE(1954)		this->wrap_compounds = ::zpp_nape::util::ZPP_CompoundList_obj::get(this->compounds,null());
HXLINE(1955)		this->wrap_compounds->zpp_inner->adder = this->compounds_adder_dyn();
HXLINE(1956)		this->wrap_compounds->zpp_inner->subber = this->compounds_subber_dyn();
HXLINE(1958)		this->wrap_compounds->zpp_inner->_modifiable = this->compounds_modifiable_dyn();
HXLINE(1960)		this->kinematics =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
HXLINE(1961)		this->c_arbiters_true =  ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__alloc( HX_CTX );
HXLINE(1962)		this->c_arbiters_false =  ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__alloc( HX_CTX );
HXLINE(1963)		this->f_arbiters =  ::zpp_nape::util::ZNPList_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
HXLINE(1964)		this->s_arbiters =  ::zpp_nape::util::ZNPList_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
HXLINE(1965)		this->islands =  ::zpp_nape::space::ZPP_Island_obj::__alloc( HX_CTX );
HXLINE(1966)		this->live =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
HXLINE(1967)		this->wrap_live = ::zpp_nape::util::ZPP_BodyList_obj::get(this->live,true);
HXLINE(1968)		this->staticsleep =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
HXLINE(1969)		this->constraints =  ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__alloc( HX_CTX );
HXLINE(1970)		this->wrap_constraints = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->constraints,null());
HXLINE(1971)		this->wrap_constraints->zpp_inner->adder = this->constraints_adder_dyn();
HXLINE(1972)		this->wrap_constraints->zpp_inner->subber = this->constraints_subber_dyn();
HXLINE(1974)		this->wrap_constraints->zpp_inner->_modifiable = this->constraints_modifiable_dyn();
HXLINE(1976)		this->live_constraints =  ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__alloc( HX_CTX );
HXLINE(1977)		this->wrap_livecon = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->live_constraints,true);
HXLINE(1978)		this->_hx___static = ::zpp_nape::phys::ZPP_Body_obj::_hx___static();
HXLINE(1979)		this->_hx___static->zpp_inner->space = hx::ObjectPtr<OBJ_>(this);
HXLINE(1980)		this->callbacks =  ::zpp_nape::callbacks::ZPP_Callback_obj::__alloc( HX_CTX );
HXLINE(1981)		this->midstep = false;
HXLINE(1982)		this->listeners =  ::zpp_nape::util::ZNPList_ZPP_Listener_obj::__alloc( HX_CTX );
HXLINE(1983)		this->wrap_listeners = ::zpp_nape::util::ZPP_ListenerList_obj::get(this->listeners,null());
HXLINE(1984)		this->wrap_listeners->zpp_inner->adder = this->listeners_adder_dyn();
HXLINE(1985)		this->wrap_listeners->zpp_inner->subber = this->listeners_subber_dyn();
HXLINE(1987)		this->wrap_listeners->zpp_inner->_modifiable = this->listeners_modifiable_dyn();
HXLINE(1989)		this->callbackset_list =  ::zpp_nape::space::ZPP_CallbackSet_obj::__alloc( HX_CTX );
HXLINE(1990)		this->mrca1 =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
HXLINE(1991)		this->mrca2 =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
HXLINE(1992)		this->prelisteners =  ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__alloc( HX_CTX );
HXLINE(1993)		this->cbsets =  ::zpp_nape::space::ZPP_CbSetManager_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic ZPP_Space_obj::__CreateEmpty() { return new ZPP_Space_obj; }

void *ZPP_Space_obj::_hx_vtable = 0;

Dynamic ZPP_Space_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Space_obj > _hx_result = new ZPP_Space_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ZPP_Space_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54279208;
}

void ZPP_Space_obj::getgravity(){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_1385_getgravity)
HXLINE(1386)		Float x = this->gravityx;
HXDLIN(1386)		Float y = this->gravityy;
HXDLIN(1386)		bool _hx_tmp;
HXDLIN(1386)		if ((x == x)) {
HXLINE(1386)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE(1386)			_hx_tmp = true;
            		}
HXDLIN(1386)		if (_hx_tmp) {
HXLINE(1386)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1386)		 ::nape::geom::Vec2 ret;
HXDLIN(1386)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1386)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1386)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1386)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1386)			ret->zpp_pool = null();
HXDLIN(1386)			ret->zpp_disp = false;
HXDLIN(1386)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1386)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1386)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1386)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1386)			{
HXLINE(1386)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1386)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1386)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1386)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1386)					ret1->next = null();
            				}
HXDLIN(1386)				ret1->weak = false;
            			}
HXDLIN(1386)			ret1->_immutable = false;
HXDLIN(1386)			{
HXLINE(1386)				ret1->x = x;
HXDLIN(1386)				ret1->y = y;
            			}
HXDLIN(1386)			ret->zpp_inner = ret1;
HXDLIN(1386)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1386)			bool _hx_tmp1;
HXDLIN(1386)			if (hx::IsNotNull( ret )) {
HXLINE(1386)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE(1386)				_hx_tmp1 = false;
            			}
HXDLIN(1386)			if (_hx_tmp1) {
HXLINE(1386)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1386)			{
HXLINE(1386)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(1386)				if (_this->_immutable) {
HXLINE(1386)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1386)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1386)					_this->_isimmutable();
            				}
            			}
HXDLIN(1386)			bool _hx_tmp2;
HXDLIN(1386)			if ((x == x)) {
HXLINE(1386)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE(1386)				_hx_tmp2 = true;
            			}
HXDLIN(1386)			if (_hx_tmp2) {
HXLINE(1386)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1386)			bool _hx_tmp3;
HXDLIN(1386)			bool _hx_tmp4;
HXDLIN(1386)			if (hx::IsNotNull( ret )) {
HXLINE(1386)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE(1386)				_hx_tmp4 = false;
            			}
HXDLIN(1386)			if (_hx_tmp4) {
HXLINE(1386)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1386)			{
HXLINE(1386)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(1386)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1386)					_this1->_validate();
            				}
            			}
HXDLIN(1386)			if ((ret->zpp_inner->x == x)) {
HXLINE(1386)				bool _hx_tmp5;
HXDLIN(1386)				if (hx::IsNotNull( ret )) {
HXLINE(1386)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE(1386)					_hx_tmp5 = false;
            				}
HXDLIN(1386)				if (_hx_tmp5) {
HXLINE(1386)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1386)				{
HXLINE(1386)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(1386)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1386)						_this2->_validate();
            					}
            				}
HXDLIN(1386)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1386)				_hx_tmp3 = false;
            			}
HXDLIN(1386)			if (!(_hx_tmp3)) {
HXLINE(1386)				{
HXLINE(1386)					ret->zpp_inner->x = x;
HXDLIN(1386)					ret->zpp_inner->y = y;
            				}
HXDLIN(1386)				{
HXLINE(1386)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(1386)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(1386)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN(1386)		ret->zpp_inner->weak = false;
HXDLIN(1386)		this->wrap_gravity = ret;
HXLINE(1387)		this->wrap_gravity->zpp_inner->_inuse = true;
HXLINE(1388)		this->wrap_gravity->zpp_inner->_invalidate = this->gravity_invalidate_dyn();
HXLINE(1389)		this->wrap_gravity->zpp_inner->_validate = this->gravity_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,getgravity,(void))

void ZPP_Space_obj::gravity_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_1391_gravity_invalidate)
HXLINE(1393)		if (this->midstep) {
HXLINE(1393)			HX_STACK_DO_THROW(HX_("Error: Space::gravity cannot be set during space step",5d,50,cf,95));
            		}
HXLINE(1395)		{
HXLINE(1396)			this->gravityx = x->x;
HXLINE(1397)			this->gravityy = x->y;
            		}
HXLINE(1415)		 ::zpp_nape::util::ZNPList_ZPP_Compound stack =  ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__alloc( HX_CTX );
HXLINE(1416)		{
HXLINE(1417)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->bodies->head;
HXLINE(1418)			while(hx::IsNotNull( cx_ite )){
HXLINE(1419)				 ::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;
HXLINE(1420)				{
HXLINE(1421)					 ::zpp_nape::phys::ZPP_Body o = x1;
HXLINE(1430)					if (!(o->world)) {
HXLINE(1439)						int _hx_tmp;
HXDLIN(1439)						if (this->midstep) {
HXLINE(1439)							_hx_tmp = 0;
            						}
            						else {
HXLINE(1439)							_hx_tmp = 1;
            						}
HXDLIN(1439)						o->component->waket = (this->stamp + _hx_tmp);
HXLINE(1440)						if ((o->type == 3)) {
HXLINE(1440)							o->kinematicDelaySleep = true;
            						}
HXLINE(1441)						if (o->component->sleeping) {
HXLINE(1442)							this->really_wake(o,false);
            						}
            					}
            				}
HXLINE(1446)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1449)		{
HXLINE(1450)			 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite1 = this->compounds->head;
HXLINE(1451)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(1452)				 ::zpp_nape::phys::ZPP_Compound i = cx_ite1->elt;
HXLINE(1453)				stack->add(i);
HXLINE(1454)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(1457)		while(hx::IsNotNull( stack->head )){
HXLINE(1458)			 ::zpp_nape::phys::ZPP_Compound s = stack->pop_unsafe();
HXLINE(1459)			{
HXLINE(1460)				 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite2 = s->bodies->head;
HXLINE(1461)				while(hx::IsNotNull( cx_ite2 )){
HXLINE(1462)					 ::zpp_nape::phys::ZPP_Body x2 = cx_ite2->elt;
HXLINE(1463)					{
HXLINE(1464)						 ::zpp_nape::phys::ZPP_Body o1 = x2;
HXLINE(1473)						if (!(o1->world)) {
HXLINE(1482)							int _hx_tmp1;
HXDLIN(1482)							if (this->midstep) {
HXLINE(1482)								_hx_tmp1 = 0;
            							}
            							else {
HXLINE(1482)								_hx_tmp1 = 1;
            							}
HXDLIN(1482)							o1->component->waket = (this->stamp + _hx_tmp1);
HXLINE(1483)							if ((o1->type == 3)) {
HXLINE(1483)								o1->kinematicDelaySleep = true;
            							}
HXLINE(1484)							if (o1->component->sleeping) {
HXLINE(1485)								this->really_wake(o1,false);
            							}
            						}
            					}
HXLINE(1489)					cx_ite2 = cx_ite2->next;
            				}
            			}
HXLINE(1492)			{
HXLINE(1493)				 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite3 = s->compounds->head;
HXLINE(1494)				while(hx::IsNotNull( cx_ite3 )){
HXLINE(1495)					 ::zpp_nape::phys::ZPP_Compound i1 = cx_ite3->elt;
HXLINE(1496)					stack->add(i1);
HXLINE(1497)					cx_ite3 = cx_ite3->next;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,gravity_invalidate,(void))

void ZPP_Space_obj::gravity_validate(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1503_gravity_validate)
HXLINE(1504)		this->wrap_gravity->zpp_inner->x = this->gravityx;
HXLINE(1505)		this->wrap_gravity->zpp_inner->y = this->gravityy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,gravity_validate,(void))

void ZPP_Space_obj::clear(){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_1556_clear)
HXLINE(1558)		while(hx::IsNotNull( this->listeners->head )){
HXLINE(1559)			 ::zpp_nape::callbacks::ZPP_Listener c = this->listeners->pop_unsafe();
HXLINE(1560)			this->remListener(c);
            		}
HXLINE(1564)		while(hx::IsNotNull( this->callbackset_list->next )){
HXLINE(1565)			 ::zpp_nape::space::ZPP_CallbackSet c1 = this->callbackset_list->pop_unsafe();
HXLINE(1566)			{
HXLINE(1567)				c1->arbiters->clear();
HXLINE(1568)				{
HXLINE(1569)					 ::zpp_nape::space::ZPP_CallbackSet o = c1;
HXLINE(1578)					{
HXLINE(1578)						o->int1 = (o->int2 = null());
HXDLIN(1578)						o->id = (o->di = -1);
HXDLIN(1578)						o->freed = true;
            					}
HXLINE(1579)					o->next = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
HXLINE(1580)					::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
            				}
            			}
            		}
HXLINE(1589)		while(hx::IsNotNull( this->c_arbiters_true->head )){
HXLINE(1590)			 ::zpp_nape::dynamics::ZPP_ColArbiter arb = this->c_arbiters_true->pop_unsafe();
HXLINE(1591)			{
HXLINE(1591)				{
HXLINE(1591)					if (!(arb->cleared)) {
HXLINE(1591)						{
HXLINE(1591)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;
HXDLIN(1591)							{
HXLINE(1591)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();
HXDLIN(1591)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;
HXDLIN(1591)								bool ret = false;
HXDLIN(1591)								while(hx::IsNotNull( cur )){
HXLINE(1591)									if (hx::IsEq( cur->elt,arb )) {
HXLINE(1591)										{
HXLINE(1591)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old;
HXDLIN(1591)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;
HXDLIN(1591)											if (hx::IsNull( pre )) {
HXLINE(1591)												old = _this->head;
HXDLIN(1591)												ret1 = old->next;
HXDLIN(1591)												_this->head = ret1;
HXDLIN(1591)												if (hx::IsNull( _this->head )) {
HXLINE(1591)													_this->pushmod = true;
            												}
            											}
            											else {
HXLINE(1591)												old = pre->next;
HXDLIN(1591)												ret1 = old->next;
HXDLIN(1591)												pre->next = ret1;
HXDLIN(1591)												if (hx::IsNull( ret1 )) {
HXLINE(1591)													_this->pushmod = true;
            												}
            											}
HXDLIN(1591)											{
HXLINE(1591)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o1 = old;
HXDLIN(1591)												o1->elt = null();
HXDLIN(1591)												o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1591)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            											}
HXDLIN(1591)											_this->modified = true;
HXDLIN(1591)											_this->length--;
HXDLIN(1591)											_this->pushmod = true;
            										}
HXDLIN(1591)										ret = true;
HXDLIN(1591)										goto _hx_goto_12;
            									}
HXDLIN(1591)									pre = cur;
HXDLIN(1591)									cur = cur->next;
            								}
            								_hx_goto_12:;
            							}
            						}
HXDLIN(1591)						{
HXLINE(1591)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = arb->b2->arbiters;
HXDLIN(1591)							{
HXLINE(1591)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();
HXDLIN(1591)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur1 = _this1->head;
HXDLIN(1591)								bool ret2 = false;
HXDLIN(1591)								while(hx::IsNotNull( cur1 )){
HXLINE(1591)									if (hx::IsEq( cur1->elt,arb )) {
HXLINE(1591)										{
HXLINE(1591)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old1;
HXDLIN(1591)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret3;
HXDLIN(1591)											if (hx::IsNull( pre1 )) {
HXLINE(1591)												old1 = _this1->head;
HXDLIN(1591)												ret3 = old1->next;
HXDLIN(1591)												_this1->head = ret3;
HXDLIN(1591)												if (hx::IsNull( _this1->head )) {
HXLINE(1591)													_this1->pushmod = true;
            												}
            											}
            											else {
HXLINE(1591)												old1 = pre1->next;
HXDLIN(1591)												ret3 = old1->next;
HXDLIN(1591)												pre1->next = ret3;
HXDLIN(1591)												if (hx::IsNull( ret3 )) {
HXLINE(1591)													_this1->pushmod = true;
            												}
            											}
HXDLIN(1591)											{
HXLINE(1591)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o2 = old1;
HXDLIN(1591)												o2->elt = null();
HXDLIN(1591)												o2->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1591)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o2;
            											}
HXDLIN(1591)											_this1->modified = true;
HXDLIN(1591)											_this1->length--;
HXDLIN(1591)											_this1->pushmod = true;
            										}
HXDLIN(1591)										ret2 = true;
HXDLIN(1591)										goto _hx_goto_13;
            									}
HXDLIN(1591)									pre1 = cur1;
HXDLIN(1591)									cur1 = cur1->next;
            								}
            								_hx_goto_13:;
            							}
            						}
HXDLIN(1591)						if (hx::IsNotNull( arb->pair )) {
HXLINE(1591)							arb->pair->arb = null();
HXDLIN(1591)							arb->pair = null();
            						}
            					}
HXDLIN(1591)					arb->b1 = (arb->b2 = null());
HXDLIN(1591)					arb->active = false;
HXDLIN(1591)					arb->intchange = false;
            				}
HXDLIN(1591)				while(hx::IsNotNull( arb->contacts->next )){
HXLINE(1591)					{
HXLINE(1591)						 ::zpp_nape::dynamics::ZPP_Contact _this2 = arb->contacts;
HXDLIN(1591)						 ::zpp_nape::dynamics::ZPP_Contact ret4 = _this2->next;
HXDLIN(1591)						_this2->pop();
HXDLIN(1591)						 ::zpp_nape::dynamics::ZPP_Contact o3 = ret4;
HXDLIN(1591)						o3->arbiter = null();
HXDLIN(1591)						o3->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN(1591)						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o3;
            					}
HXDLIN(1591)					{
HXLINE(1591)						 ::zpp_nape::dynamics::ZPP_IContact _this3 = arb->innards;
HXDLIN(1591)						 ::zpp_nape::dynamics::ZPP_IContact ret5 = _this3->next;
HXDLIN(1591)						_this3->next = ret5->next;
HXDLIN(1591)						ret5->_inuse = false;
HXDLIN(1591)						if (hx::IsNull( _this3->next )) {
HXLINE(1591)							_this3->pushmod = true;
            						}
HXDLIN(1591)						_this3->modified = true;
HXDLIN(1591)						_this3->length--;
            					}
            				}
HXDLIN(1591)				{
HXLINE(1591)					 ::zpp_nape::dynamics::ZPP_ColArbiter o4 = arb;
HXDLIN(1591)					{
HXLINE(1591)						o4->userdef_dyn_fric = false;
HXDLIN(1591)						o4->userdef_stat_fric = false;
HXDLIN(1591)						o4->userdef_restitution = false;
HXDLIN(1591)						o4->userdef_rfric = false;
HXDLIN(1591)						o4->_hx___ref_edge1 = (o4->_hx___ref_edge2 = null());
            					}
HXDLIN(1591)					o4->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(1591)					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o4;
            				}
HXDLIN(1591)				arb->pre_dt = ((Float)-1.0);
            			}
            		}
HXLINE(1595)		while(hx::IsNotNull( this->c_arbiters_false->head )){
HXLINE(1596)			 ::zpp_nape::dynamics::ZPP_ColArbiter arb1 = this->c_arbiters_false->pop_unsafe();
HXLINE(1597)			{
HXLINE(1597)				{
HXLINE(1597)					if (!(arb1->cleared)) {
HXLINE(1597)						{
HXLINE(1597)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this4 = arb1->b1->arbiters;
HXDLIN(1597)							{
HXLINE(1597)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre2 = null();
HXDLIN(1597)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur2 = _this4->head;
HXDLIN(1597)								bool ret6 = false;
HXDLIN(1597)								while(hx::IsNotNull( cur2 )){
HXLINE(1597)									if (hx::IsEq( cur2->elt,arb1 )) {
HXLINE(1597)										{
HXLINE(1597)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old2;
HXDLIN(1597)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret7;
HXDLIN(1597)											if (hx::IsNull( pre2 )) {
HXLINE(1597)												old2 = _this4->head;
HXDLIN(1597)												ret7 = old2->next;
HXDLIN(1597)												_this4->head = ret7;
HXDLIN(1597)												if (hx::IsNull( _this4->head )) {
HXLINE(1597)													_this4->pushmod = true;
            												}
            											}
            											else {
HXLINE(1597)												old2 = pre2->next;
HXDLIN(1597)												ret7 = old2->next;
HXDLIN(1597)												pre2->next = ret7;
HXDLIN(1597)												if (hx::IsNull( ret7 )) {
HXLINE(1597)													_this4->pushmod = true;
            												}
            											}
HXDLIN(1597)											{
HXLINE(1597)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o5 = old2;
HXDLIN(1597)												o5->elt = null();
HXDLIN(1597)												o5->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1597)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o5;
            											}
HXDLIN(1597)											_this4->modified = true;
HXDLIN(1597)											_this4->length--;
HXDLIN(1597)											_this4->pushmod = true;
            										}
HXDLIN(1597)										ret6 = true;
HXDLIN(1597)										goto _hx_goto_16;
            									}
HXDLIN(1597)									pre2 = cur2;
HXDLIN(1597)									cur2 = cur2->next;
            								}
            								_hx_goto_16:;
            							}
            						}
HXDLIN(1597)						{
HXLINE(1597)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this5 = arb1->b2->arbiters;
HXDLIN(1597)							{
HXLINE(1597)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre3 = null();
HXDLIN(1597)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur3 = _this5->head;
HXDLIN(1597)								bool ret8 = false;
HXDLIN(1597)								while(hx::IsNotNull( cur3 )){
HXLINE(1597)									if (hx::IsEq( cur3->elt,arb1 )) {
HXLINE(1597)										{
HXLINE(1597)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old3;
HXDLIN(1597)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret9;
HXDLIN(1597)											if (hx::IsNull( pre3 )) {
HXLINE(1597)												old3 = _this5->head;
HXDLIN(1597)												ret9 = old3->next;
HXDLIN(1597)												_this5->head = ret9;
HXDLIN(1597)												if (hx::IsNull( _this5->head )) {
HXLINE(1597)													_this5->pushmod = true;
            												}
            											}
            											else {
HXLINE(1597)												old3 = pre3->next;
HXDLIN(1597)												ret9 = old3->next;
HXDLIN(1597)												pre3->next = ret9;
HXDLIN(1597)												if (hx::IsNull( ret9 )) {
HXLINE(1597)													_this5->pushmod = true;
            												}
            											}
HXDLIN(1597)											{
HXLINE(1597)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o6 = old3;
HXDLIN(1597)												o6->elt = null();
HXDLIN(1597)												o6->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1597)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o6;
            											}
HXDLIN(1597)											_this5->modified = true;
HXDLIN(1597)											_this5->length--;
HXDLIN(1597)											_this5->pushmod = true;
            										}
HXDLIN(1597)										ret8 = true;
HXDLIN(1597)										goto _hx_goto_17;
            									}
HXDLIN(1597)									pre3 = cur3;
HXDLIN(1597)									cur3 = cur3->next;
            								}
            								_hx_goto_17:;
            							}
            						}
HXDLIN(1597)						if (hx::IsNotNull( arb1->pair )) {
HXLINE(1597)							arb1->pair->arb = null();
HXDLIN(1597)							arb1->pair = null();
            						}
            					}
HXDLIN(1597)					arb1->b1 = (arb1->b2 = null());
HXDLIN(1597)					arb1->active = false;
HXDLIN(1597)					arb1->intchange = false;
            				}
HXDLIN(1597)				while(hx::IsNotNull( arb1->contacts->next )){
HXLINE(1597)					{
HXLINE(1597)						 ::zpp_nape::dynamics::ZPP_Contact _this6 = arb1->contacts;
HXDLIN(1597)						 ::zpp_nape::dynamics::ZPP_Contact ret10 = _this6->next;
HXDLIN(1597)						_this6->pop();
HXDLIN(1597)						 ::zpp_nape::dynamics::ZPP_Contact o7 = ret10;
HXDLIN(1597)						o7->arbiter = null();
HXDLIN(1597)						o7->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN(1597)						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o7;
            					}
HXDLIN(1597)					{
HXLINE(1597)						 ::zpp_nape::dynamics::ZPP_IContact _this7 = arb1->innards;
HXDLIN(1597)						 ::zpp_nape::dynamics::ZPP_IContact ret11 = _this7->next;
HXDLIN(1597)						_this7->next = ret11->next;
HXDLIN(1597)						ret11->_inuse = false;
HXDLIN(1597)						if (hx::IsNull( _this7->next )) {
HXLINE(1597)							_this7->pushmod = true;
            						}
HXDLIN(1597)						_this7->modified = true;
HXDLIN(1597)						_this7->length--;
            					}
            				}
HXDLIN(1597)				{
HXLINE(1597)					 ::zpp_nape::dynamics::ZPP_ColArbiter o8 = arb1;
HXDLIN(1597)					{
HXLINE(1597)						o8->userdef_dyn_fric = false;
HXDLIN(1597)						o8->userdef_stat_fric = false;
HXDLIN(1597)						o8->userdef_restitution = false;
HXDLIN(1597)						o8->userdef_rfric = false;
HXDLIN(1597)						o8->_hx___ref_edge1 = (o8->_hx___ref_edge2 = null());
            					}
HXDLIN(1597)					o8->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(1597)					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o8;
            				}
HXDLIN(1597)				arb1->pre_dt = ((Float)-1.0);
            			}
            		}
HXLINE(1601)		while(hx::IsNotNull( this->s_arbiters->head )){
HXLINE(1602)			 ::zpp_nape::dynamics::ZPP_SensorArbiter arb2 = this->s_arbiters->pop_unsafe();
HXLINE(1603)			{
HXLINE(1603)				{
HXLINE(1603)					if (!(arb2->cleared)) {
HXLINE(1603)						{
HXLINE(1603)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this8 = arb2->b1->arbiters;
HXDLIN(1603)							{
HXLINE(1603)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre4 = null();
HXDLIN(1603)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur4 = _this8->head;
HXDLIN(1603)								bool ret12 = false;
HXDLIN(1603)								while(hx::IsNotNull( cur4 )){
HXLINE(1603)									if (hx::IsEq( cur4->elt,arb2 )) {
HXLINE(1603)										{
HXLINE(1603)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old4;
HXDLIN(1603)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret13;
HXDLIN(1603)											if (hx::IsNull( pre4 )) {
HXLINE(1603)												old4 = _this8->head;
HXDLIN(1603)												ret13 = old4->next;
HXDLIN(1603)												_this8->head = ret13;
HXDLIN(1603)												if (hx::IsNull( _this8->head )) {
HXLINE(1603)													_this8->pushmod = true;
            												}
            											}
            											else {
HXLINE(1603)												old4 = pre4->next;
HXDLIN(1603)												ret13 = old4->next;
HXDLIN(1603)												pre4->next = ret13;
HXDLIN(1603)												if (hx::IsNull( ret13 )) {
HXLINE(1603)													_this8->pushmod = true;
            												}
            											}
HXDLIN(1603)											{
HXLINE(1603)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o9 = old4;
HXDLIN(1603)												o9->elt = null();
HXDLIN(1603)												o9->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1603)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o9;
            											}
HXDLIN(1603)											_this8->modified = true;
HXDLIN(1603)											_this8->length--;
HXDLIN(1603)											_this8->pushmod = true;
            										}
HXDLIN(1603)										ret12 = true;
HXDLIN(1603)										goto _hx_goto_20;
            									}
HXDLIN(1603)									pre4 = cur4;
HXDLIN(1603)									cur4 = cur4->next;
            								}
            								_hx_goto_20:;
            							}
            						}
HXDLIN(1603)						{
HXLINE(1603)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this9 = arb2->b2->arbiters;
HXDLIN(1603)							{
HXLINE(1603)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre5 = null();
HXDLIN(1603)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur5 = _this9->head;
HXDLIN(1603)								bool ret14 = false;
HXDLIN(1603)								while(hx::IsNotNull( cur5 )){
HXLINE(1603)									if (hx::IsEq( cur5->elt,arb2 )) {
HXLINE(1603)										{
HXLINE(1603)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old5;
HXDLIN(1603)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret15;
HXDLIN(1603)											if (hx::IsNull( pre5 )) {
HXLINE(1603)												old5 = _this9->head;
HXDLIN(1603)												ret15 = old5->next;
HXDLIN(1603)												_this9->head = ret15;
HXDLIN(1603)												if (hx::IsNull( _this9->head )) {
HXLINE(1603)													_this9->pushmod = true;
            												}
            											}
            											else {
HXLINE(1603)												old5 = pre5->next;
HXDLIN(1603)												ret15 = old5->next;
HXDLIN(1603)												pre5->next = ret15;
HXDLIN(1603)												if (hx::IsNull( ret15 )) {
HXLINE(1603)													_this9->pushmod = true;
            												}
            											}
HXDLIN(1603)											{
HXLINE(1603)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o10 = old5;
HXDLIN(1603)												o10->elt = null();
HXDLIN(1603)												o10->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1603)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o10;
            											}
HXDLIN(1603)											_this9->modified = true;
HXDLIN(1603)											_this9->length--;
HXDLIN(1603)											_this9->pushmod = true;
            										}
HXDLIN(1603)										ret14 = true;
HXDLIN(1603)										goto _hx_goto_21;
            									}
HXDLIN(1603)									pre5 = cur5;
HXDLIN(1603)									cur5 = cur5->next;
            								}
            								_hx_goto_21:;
            							}
            						}
HXDLIN(1603)						if (hx::IsNotNull( arb2->pair )) {
HXLINE(1603)							arb2->pair->arb = null();
HXDLIN(1603)							arb2->pair = null();
            						}
            					}
HXDLIN(1603)					arb2->b1 = (arb2->b2 = null());
HXDLIN(1603)					arb2->active = false;
HXDLIN(1603)					arb2->intchange = false;
            				}
HXDLIN(1603)				{
HXLINE(1603)					 ::zpp_nape::dynamics::ZPP_SensorArbiter o11 = arb2;
HXDLIN(1603)					o11->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(1603)					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o11;
            				}
            			}
            		}
HXLINE(1607)		while(hx::IsNotNull( this->f_arbiters->head )){
HXLINE(1608)			 ::zpp_nape::dynamics::ZPP_FluidArbiter arb3 = this->f_arbiters->pop_unsafe();
HXLINE(1609)			{
HXLINE(1609)				{
HXLINE(1609)					if (!(arb3->cleared)) {
HXLINE(1609)						{
HXLINE(1609)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this10 = arb3->b1->arbiters;
HXDLIN(1609)							{
HXLINE(1609)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre6 = null();
HXDLIN(1609)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur6 = _this10->head;
HXDLIN(1609)								bool ret16 = false;
HXDLIN(1609)								while(hx::IsNotNull( cur6 )){
HXLINE(1609)									if (hx::IsEq( cur6->elt,arb3 )) {
HXLINE(1609)										{
HXLINE(1609)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old6;
HXDLIN(1609)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret17;
HXDLIN(1609)											if (hx::IsNull( pre6 )) {
HXLINE(1609)												old6 = _this10->head;
HXDLIN(1609)												ret17 = old6->next;
HXDLIN(1609)												_this10->head = ret17;
HXDLIN(1609)												if (hx::IsNull( _this10->head )) {
HXLINE(1609)													_this10->pushmod = true;
            												}
            											}
            											else {
HXLINE(1609)												old6 = pre6->next;
HXDLIN(1609)												ret17 = old6->next;
HXDLIN(1609)												pre6->next = ret17;
HXDLIN(1609)												if (hx::IsNull( ret17 )) {
HXLINE(1609)													_this10->pushmod = true;
            												}
            											}
HXDLIN(1609)											{
HXLINE(1609)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o12 = old6;
HXDLIN(1609)												o12->elt = null();
HXDLIN(1609)												o12->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1609)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o12;
            											}
HXDLIN(1609)											_this10->modified = true;
HXDLIN(1609)											_this10->length--;
HXDLIN(1609)											_this10->pushmod = true;
            										}
HXDLIN(1609)										ret16 = true;
HXDLIN(1609)										goto _hx_goto_23;
            									}
HXDLIN(1609)									pre6 = cur6;
HXDLIN(1609)									cur6 = cur6->next;
            								}
            								_hx_goto_23:;
            							}
            						}
HXDLIN(1609)						{
HXLINE(1609)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this11 = arb3->b2->arbiters;
HXDLIN(1609)							{
HXLINE(1609)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre7 = null();
HXDLIN(1609)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur7 = _this11->head;
HXDLIN(1609)								bool ret18 = false;
HXDLIN(1609)								while(hx::IsNotNull( cur7 )){
HXLINE(1609)									if (hx::IsEq( cur7->elt,arb3 )) {
HXLINE(1609)										{
HXLINE(1609)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old7;
HXDLIN(1609)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret19;
HXDLIN(1609)											if (hx::IsNull( pre7 )) {
HXLINE(1609)												old7 = _this11->head;
HXDLIN(1609)												ret19 = old7->next;
HXDLIN(1609)												_this11->head = ret19;
HXDLIN(1609)												if (hx::IsNull( _this11->head )) {
HXLINE(1609)													_this11->pushmod = true;
            												}
            											}
            											else {
HXLINE(1609)												old7 = pre7->next;
HXDLIN(1609)												ret19 = old7->next;
HXDLIN(1609)												pre7->next = ret19;
HXDLIN(1609)												if (hx::IsNull( ret19 )) {
HXLINE(1609)													_this11->pushmod = true;
            												}
            											}
HXDLIN(1609)											{
HXLINE(1609)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o13 = old7;
HXDLIN(1609)												o13->elt = null();
HXDLIN(1609)												o13->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1609)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o13;
            											}
HXDLIN(1609)											_this11->modified = true;
HXDLIN(1609)											_this11->length--;
HXDLIN(1609)											_this11->pushmod = true;
            										}
HXDLIN(1609)										ret18 = true;
HXDLIN(1609)										goto _hx_goto_24;
            									}
HXDLIN(1609)									pre7 = cur7;
HXDLIN(1609)									cur7 = cur7->next;
            								}
            								_hx_goto_24:;
            							}
            						}
HXDLIN(1609)						if (hx::IsNotNull( arb3->pair )) {
HXLINE(1609)							arb3->pair->arb = null();
HXDLIN(1609)							arb3->pair = null();
            						}
            					}
HXDLIN(1609)					arb3->b1 = (arb3->b2 = null());
HXDLIN(1609)					arb3->active = false;
HXDLIN(1609)					arb3->intchange = false;
            				}
HXDLIN(1609)				{
HXLINE(1609)					 ::zpp_nape::dynamics::ZPP_FluidArbiter o14 = arb3;
HXDLIN(1609)					o14->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(1609)					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o14;
            				}
HXDLIN(1609)				arb3->pre_dt = ((Float)-1.0);
            			}
            		}
HXLINE(1612)		this->bphase->clear();
HXLINE(1614)		while(hx::IsNotNull( this->bodies->head )){
HXLINE(1615)			 ::zpp_nape::phys::ZPP_Body b = this->bodies->pop_unsafe();
HXLINE(1616)			{
HXLINE(1618)				if (hx::IsNotNull( b->component )) {
HXLINE(1619)					 ::zpp_nape::space::ZPP_Island i = b->component->island;
HXLINE(1620)					if (hx::IsNotNull( i )) {
HXLINE(1622)						while(hx::IsNotNull( i->comps->head )){
HXLINE(1623)							 ::zpp_nape::space::ZPP_Component c2 = i->comps->pop_unsafe();
HXLINE(1624)							{
HXLINE(1624)								c2->sleeping = false;
HXDLIN(1624)								c2->island = null();
HXDLIN(1624)								c2->parent = c2;
HXDLIN(1624)								c2->rank = 0;
            							}
            						}
HXLINE(1627)						{
HXLINE(1628)							 ::zpp_nape::space::ZPP_Island o15 = i;
HXLINE(1638)							o15->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(1639)							::zpp_nape::space::ZPP_Island_obj::zpp_pool = o15;
            						}
            					}
            				}
HXLINE(1647)				b->removedFromSpace();
HXLINE(1648)				b->space = null();
            			}
            		}
HXLINE(1653)		while(hx::IsNotNull( this->constraints->head )){
HXLINE(1654)			 ::zpp_nape::constraint::ZPP_Constraint c3 = this->constraints->pop_unsafe();
HXLINE(1655)			{
HXLINE(1657)				if (hx::IsNotNull( c3->component )) {
HXLINE(1658)					 ::zpp_nape::space::ZPP_Island i1 = c3->component->island;
HXLINE(1659)					if (hx::IsNotNull( i1 )) {
HXLINE(1661)						while(hx::IsNotNull( i1->comps->head )){
HXLINE(1662)							 ::zpp_nape::space::ZPP_Component c4 = i1->comps->pop_unsafe();
HXLINE(1663)							{
HXLINE(1663)								c4->sleeping = false;
HXDLIN(1663)								c4->island = null();
HXDLIN(1663)								c4->parent = c4;
HXDLIN(1663)								c4->rank = 0;
            							}
            						}
HXLINE(1666)						{
HXLINE(1667)							 ::zpp_nape::space::ZPP_Island o16 = i1;
HXLINE(1677)							o16->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(1678)							::zpp_nape::space::ZPP_Island_obj::zpp_pool = o16;
            						}
            					}
            				}
HXLINE(1686)				c3->removedFromSpace();
HXLINE(1687)				c3->space = null();
            			}
            		}
HXLINE(1691)		this->kinematics->clear();
HXLINE(1692)		 ::zpp_nape::util::ZNPList_ZPP_Compound stack =  ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__alloc( HX_CTX );
HXLINE(1694)		while(hx::IsNotNull( this->compounds->head )){
HXLINE(1695)			 ::zpp_nape::phys::ZPP_Compound c5 = this->compounds->pop_unsafe();
HXLINE(1696)			stack->add(c5);
            		}
HXLINE(1699)		while(hx::IsNotNull( stack->head )){
HXLINE(1700)			 ::zpp_nape::phys::ZPP_Compound comp = stack->pop_unsafe();
HXLINE(1701)			comp->removedFromSpace();
HXLINE(1702)			comp->space = null();
HXLINE(1703)			{
HXLINE(1704)				 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;
HXLINE(1705)				while(hx::IsNotNull( cx_ite )){
HXLINE(1706)					 ::zpp_nape::phys::ZPP_Body b1 = cx_ite->elt;
HXLINE(1707)					{
HXLINE(1709)						if (hx::IsNotNull( b1->component )) {
HXLINE(1710)							 ::zpp_nape::space::ZPP_Island i2 = b1->component->island;
HXLINE(1711)							if (hx::IsNotNull( i2 )) {
HXLINE(1713)								while(hx::IsNotNull( i2->comps->head )){
HXLINE(1714)									 ::zpp_nape::space::ZPP_Component c6 = i2->comps->pop_unsafe();
HXLINE(1715)									{
HXLINE(1715)										c6->sleeping = false;
HXDLIN(1715)										c6->island = null();
HXDLIN(1715)										c6->parent = c6;
HXDLIN(1715)										c6->rank = 0;
            									}
            								}
HXLINE(1718)								{
HXLINE(1719)									 ::zpp_nape::space::ZPP_Island o17 = i2;
HXLINE(1729)									o17->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(1730)									::zpp_nape::space::ZPP_Island_obj::zpp_pool = o17;
            								}
            							}
            						}
HXLINE(1738)						b1->removedFromSpace();
HXLINE(1739)						b1->space = null();
            					}
HXLINE(1741)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(1744)			{
HXLINE(1745)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite1 = comp->constraints->head;
HXLINE(1746)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(1747)					 ::zpp_nape::constraint::ZPP_Constraint c7 = cx_ite1->elt;
HXLINE(1748)					{
HXLINE(1750)						if (hx::IsNotNull( c7->component )) {
HXLINE(1751)							 ::zpp_nape::space::ZPP_Island i3 = c7->component->island;
HXLINE(1752)							if (hx::IsNotNull( i3 )) {
HXLINE(1754)								while(hx::IsNotNull( i3->comps->head )){
HXLINE(1755)									 ::zpp_nape::space::ZPP_Component c8 = i3->comps->pop_unsafe();
HXLINE(1756)									{
HXLINE(1756)										c8->sleeping = false;
HXDLIN(1756)										c8->island = null();
HXDLIN(1756)										c8->parent = c8;
HXDLIN(1756)										c8->rank = 0;
            									}
            								}
HXLINE(1759)								{
HXLINE(1760)									 ::zpp_nape::space::ZPP_Island o18 = i3;
HXLINE(1770)									o18->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(1771)									::zpp_nape::space::ZPP_Island_obj::zpp_pool = o18;
            								}
            							}
            						}
HXLINE(1779)						c7->removedFromSpace();
HXLINE(1780)						c7->space = null();
            					}
HXLINE(1782)					cx_ite1 = cx_ite1->next;
            				}
            			}
HXLINE(1785)			{
HXLINE(1786)				 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite2 = comp->compounds->head;
HXLINE(1787)				while(hx::IsNotNull( cx_ite2 )){
HXLINE(1788)					 ::zpp_nape::phys::ZPP_Compound i4 = cx_ite2->elt;
HXLINE(1789)					stack->add(i4);
HXLINE(1790)					cx_ite2 = cx_ite2->next;
            				}
            			}
            		}
HXLINE(1802)		this->staticsleep->clear();
HXLINE(1803)		this->live->clear();
HXLINE(1804)		this->live_constraints->clear();
HXLINE(1805)		this->stamp = 0;
HXLINE(1806)		this->time = ((Float)0.0);
HXLINE(1810)		this->mrca1->clear();
HXLINE(1811)		this->mrca2->clear();
HXLINE(1812)		this->prelisteners->clear();
HXLINE(1813)		this->cbsets->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,clear,(void))

bool ZPP_Space_obj::bodies_adder( ::nape::phys::Body x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1815_bodies_adder)
HXLINE(1817)		if (hx::IsNotNull( x->zpp_inner->compound )) {
HXLINE(1817)			HX_STACK_DO_THROW(HX_("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set",2f,88,46,ff));
            		}
HXLINE(1819)		if (hx::IsNotEq( x->zpp_inner->space,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1820)			if (hx::IsNotNull( x->zpp_inner->space )) {
HXLINE(1820)				x->zpp_inner->space->outer->zpp_inner->wrap_bodies->remove(x);
            			}
HXLINE(1821)			this->addBody(x->zpp_inner,null());
HXLINE(1822)			return true;
            		}
            		else {
HXLINE(1824)			return false;
            		}
HXLINE(1819)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_adder,return )

void ZPP_Space_obj::bodies_subber( ::nape::phys::Body x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1827_bodies_subber)
HXDLIN(1827)		this->remBody(x->zpp_inner,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_subber,(void))

void ZPP_Space_obj::bodies_modifiable(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1831_bodies_modifiable)
HXDLIN(1831)		if (this->midstep) {
HXDLIN(1831)			HX_STACK_DO_THROW(HX_("Error: Space::bodies cannot be set during space step()",00,52,4b,f6));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,bodies_modifiable,(void))

bool ZPP_Space_obj::compounds_adder( ::nape::phys::Compound x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1834_compounds_adder)
HXLINE(1836)		if (hx::IsNotNull( x->zpp_inner->compound )) {
HXLINE(1836)			HX_STACK_DO_THROW(HX_("Error: Cannot set the space of an inner Compound, only the root Compound space can be set",c0,8a,2d,1a));
            		}
HXLINE(1838)		if (hx::IsNotEq( x->zpp_inner->space,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1839)			if (hx::IsNotNull( x->zpp_inner->space )) {
HXLINE(1839)				x->zpp_inner->space->wrap_compounds->remove(x);
            			}
HXLINE(1840)			this->addCompound(x->zpp_inner);
HXLINE(1841)			return true;
            		}
            		else {
HXLINE(1843)			return false;
            		}
HXLINE(1838)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_adder,return )

void ZPP_Space_obj::compounds_subber( ::nape::phys::Compound x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1846_compounds_subber)
HXDLIN(1846)		this->remCompound(x->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_subber,(void))

void ZPP_Space_obj::compounds_modifiable(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1850_compounds_modifiable)
HXDLIN(1850)		if (this->midstep) {
HXDLIN(1850)			HX_STACK_DO_THROW(HX_("Error: Space::compounds cannot be set during space step()",78,bd,0e,f1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,compounds_modifiable,(void))

bool ZPP_Space_obj::constraints_adder( ::nape::constraint::Constraint x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1853_constraints_adder)
HXLINE(1855)		if (hx::IsNotNull( x->zpp_inner->compound )) {
HXLINE(1855)			HX_STACK_DO_THROW(HX_("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set",94,3c,a3,5d));
            		}
HXLINE(1857)		if (hx::IsNotEq( x->zpp_inner->space,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1858)			if (hx::IsNotNull( x->zpp_inner->space )) {
HXLINE(1858)				x->zpp_inner->space->outer->zpp_inner->wrap_constraints->remove(x);
            			}
HXLINE(1859)			this->addConstraint(x->zpp_inner);
HXLINE(1860)			return true;
            		}
            		else {
HXLINE(1862)			return false;
            		}
HXLINE(1857)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_adder,return )

void ZPP_Space_obj::constraints_subber( ::nape::constraint::Constraint x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1865_constraints_subber)
HXDLIN(1865)		this->remConstraint(x->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_subber,(void))

void ZPP_Space_obj::constraints_modifiable(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1869_constraints_modifiable)
HXDLIN(1869)		if (this->midstep) {
HXDLIN(1869)			HX_STACK_DO_THROW(HX_("Error: Space::constraints cannot be set during space step()",c6,15,e4,11));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,constraints_modifiable,(void))

bool ZPP_Space_obj::listeners_adder( ::nape::callbacks::Listener x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1873_listeners_adder)
HXDLIN(1873)		if (hx::IsNotEq( x->zpp_inner->space,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1874)			if (hx::IsNotNull( x->zpp_inner->space )) {
HXLINE(1874)				x->zpp_inner->space->outer->zpp_inner->wrap_listeners->remove(x);
            			}
HXLINE(1875)			this->addListener(x->zpp_inner);
HXLINE(1876)			return true;
            		}
            		else {
HXLINE(1878)			return false;
            		}
HXLINE(1873)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_adder,return )

void ZPP_Space_obj::listeners_subber( ::nape::callbacks::Listener x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1881_listeners_subber)
HXDLIN(1881)		this->remListener(x->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_subber,(void))

void ZPP_Space_obj::listeners_modifiable(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1885_listeners_modifiable)
HXDLIN(1885)		if (this->midstep) {
HXDLIN(1885)			HX_STACK_DO_THROW(HX_("Error: Space::listeners cannot be set during space step()",0f,48,99,b5));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,listeners_modifiable,(void))

void ZPP_Space_obj::revoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_1997_revoke_listener)
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,revoke_listener,(void))

void ZPP_Space_obj::unrevoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2000_unrevoke_listener)
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,unrevoke_listener,(void))

void ZPP_Space_obj::addListener( ::zpp_nape::callbacks::ZPP_Listener x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2001_addListener)
HXLINE(2002)		x->space = hx::ObjectPtr<OBJ_>(this);
HXLINE(2003)		x->addedToSpace();
HXLINE(2004)		bool _hx_tmp = hx::IsNotNull( x->interaction );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addListener,(void))

void ZPP_Space_obj::remListener( ::zpp_nape::callbacks::ZPP_Listener x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2008_remListener)
HXLINE(2009)		bool _hx_tmp = hx::IsNotNull( x->interaction );
HXLINE(2012)		x->removedFromSpace();
HXLINE(2013)		x->space = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remListener,(void))

void ZPP_Space_obj::add_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_2015_add_callbackset)
HXLINE(2024)		{
HXLINE(2024)			 ::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int1->cbsets;
HXDLIN(2024)			 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;
HXDLIN(2024)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE(2024)				ret =  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2024)				ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN(2024)				::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
HXDLIN(2024)				ret->next = null();
            			}
HXDLIN(2024)			ret->elt = cb;
HXDLIN(2024)			 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp = ret;
HXDLIN(2024)			temp->next = _this->head;
HXDLIN(2024)			_this->head = temp;
HXDLIN(2024)			_this->modified = true;
HXDLIN(2024)			_this->length++;
            		}
HXLINE(2025)		{
HXLINE(2025)			 ::zpp_nape::util::ZNPList_ZPP_CallbackSet _this1 = cb->int2->cbsets;
HXDLIN(2025)			 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;
HXDLIN(2025)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE(2025)				ret1 =  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2025)				ret1 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN(2025)				::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret1->next;
HXDLIN(2025)				ret1->next = null();
            			}
HXDLIN(2025)			ret1->elt = cb;
HXDLIN(2025)			 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp1 = ret1;
HXDLIN(2025)			temp1->next = _this1->head;
HXDLIN(2025)			_this1->head = temp1;
HXDLIN(2025)			_this1->modified = true;
HXDLIN(2025)			_this1->length++;
            		}
HXLINE(2026)		{
HXLINE(2026)			 ::zpp_nape::space::ZPP_CallbackSet _this2 = this->callbackset_list;
HXDLIN(2026)			cb->_inuse = true;
HXDLIN(2026)			 ::zpp_nape::space::ZPP_CallbackSet temp2 = cb;
HXDLIN(2026)			temp2->next = _this2->next;
HXDLIN(2026)			_this2->next = temp2;
HXDLIN(2026)			_this2->modified = true;
HXDLIN(2026)			_this2->length++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,add_callbackset,(void))

void ZPP_Space_obj::remove_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2028_remove_callbackset)
HXLINE(2029)		cb->lazydel = true;
HXLINE(2030)		{
HXLINE(2030)			 ::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int1->cbsets;
HXDLIN(2030)			{
HXLINE(2030)				 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();
HXDLIN(2030)				 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;
HXDLIN(2030)				bool ret = false;
HXDLIN(2030)				while(hx::IsNotNull( cur )){
HXLINE(2030)					if (hx::IsEq( cur->elt,cb )) {
HXLINE(2030)						{
HXLINE(2030)							 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;
HXDLIN(2030)							 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;
HXDLIN(2030)							if (hx::IsNull( pre )) {
HXLINE(2030)								old = _this->head;
HXDLIN(2030)								ret1 = old->next;
HXDLIN(2030)								_this->head = ret1;
HXDLIN(2030)								if (hx::IsNull( _this->head )) {
HXLINE(2030)									_this->pushmod = true;
            								}
            							}
            							else {
HXLINE(2030)								old = pre->next;
HXDLIN(2030)								ret1 = old->next;
HXDLIN(2030)								pre->next = ret1;
HXDLIN(2030)								if (hx::IsNull( ret1 )) {
HXLINE(2030)									_this->pushmod = true;
            								}
            							}
HXDLIN(2030)							{
HXLINE(2030)								 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;
HXDLIN(2030)								o->elt = null();
HXDLIN(2030)								o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN(2030)								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
            							}
HXDLIN(2030)							_this->modified = true;
HXDLIN(2030)							_this->length--;
HXDLIN(2030)							_this->pushmod = true;
            						}
HXDLIN(2030)						ret = true;
HXDLIN(2030)						goto _hx_goto_54;
            					}
HXDLIN(2030)					pre = cur;
HXDLIN(2030)					cur = cur->next;
            				}
            				_hx_goto_54:;
            			}
            		}
HXLINE(2031)		{
HXLINE(2031)			 ::zpp_nape::util::ZNPList_ZPP_CallbackSet _this1 = cb->int2->cbsets;
HXDLIN(2031)			{
HXLINE(2031)				 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre1 = null();
HXDLIN(2031)				 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur1 = _this1->head;
HXDLIN(2031)				bool ret2 = false;
HXDLIN(2031)				while(hx::IsNotNull( cur1 )){
HXLINE(2031)					if (hx::IsEq( cur1->elt,cb )) {
HXLINE(2031)						{
HXLINE(2031)							 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet old1;
HXDLIN(2031)							 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret3;
HXDLIN(2031)							if (hx::IsNull( pre1 )) {
HXLINE(2031)								old1 = _this1->head;
HXDLIN(2031)								ret3 = old1->next;
HXDLIN(2031)								_this1->head = ret3;
HXDLIN(2031)								if (hx::IsNull( _this1->head )) {
HXLINE(2031)									_this1->pushmod = true;
            								}
            							}
            							else {
HXLINE(2031)								old1 = pre1->next;
HXDLIN(2031)								ret3 = old1->next;
HXDLIN(2031)								pre1->next = ret3;
HXDLIN(2031)								if (hx::IsNull( ret3 )) {
HXLINE(2031)									_this1->pushmod = true;
            								}
            							}
HXDLIN(2031)							{
HXLINE(2031)								 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet o1 = old1;
HXDLIN(2031)								o1->elt = null();
HXDLIN(2031)								o1->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN(2031)								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o1;
            							}
HXDLIN(2031)							_this1->modified = true;
HXDLIN(2031)							_this1->length--;
HXDLIN(2031)							_this1->pushmod = true;
            						}
HXDLIN(2031)						ret2 = true;
HXDLIN(2031)						goto _hx_goto_55;
            					}
HXDLIN(2031)					pre1 = cur1;
HXDLIN(2031)					cur1 = cur1->next;
            				}
            				_hx_goto_55:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remove_callbackset,(void))

void ZPP_Space_obj::transmitType( ::zpp_nape::phys::ZPP_Body p,int new_type){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2033_transmitType)
HXLINE(2034)		{
HXLINE(2035)			 ::zpp_nape::phys::ZPP_Body o = p;
HXLINE(2044)			if (!(o->world)) {
HXLINE(2053)				int _hx_tmp;
HXDLIN(2053)				if (this->midstep) {
HXLINE(2053)					_hx_tmp = 0;
            				}
            				else {
HXLINE(2053)					_hx_tmp = 1;
            				}
HXDLIN(2053)				o->component->waket = (this->stamp + _hx_tmp);
HXLINE(2054)				if ((o->type == 3)) {
HXLINE(2054)					o->kinematicDelaySleep = true;
            				}
HXLINE(2055)				if (o->component->sleeping) {
HXLINE(2056)					this->really_wake(o,false);
            				}
            			}
            		}
HXLINE(2060)		if ((p->type == 2)) {
HXLINE(2061)			this->live->remove(p);
            		}
            		else {
HXLINE(2063)			if ((p->type == 3)) {
HXLINE(2064)				this->kinematics->remove(p);
HXLINE(2065)				this->staticsleep->remove(p);
            			}
            			else {
HXLINE(2067)				if ((p->type == 1)) {
HXLINE(2068)					this->staticsleep->remove(p);
            				}
            			}
            		}
HXLINE(2070)		p->type = new_type;
HXLINE(2071)		if ((p->type == 3)) {
HXLINE(2071)			this->kinematics->add(p);
            		}
HXLINE(2072)		if ((p->type == 1)) {
HXLINE(2072)			this->static_validation(p);
            		}
HXLINE(2073)		p->component->sleeping = true;
HXLINE(2074)		{
HXLINE(2075)			 ::zpp_nape::phys::ZPP_Body o1 = p;
HXLINE(2084)			if (!(o1->world)) {
HXLINE(2093)				int _hx_tmp1;
HXDLIN(2093)				if (this->midstep) {
HXLINE(2093)					_hx_tmp1 = 0;
            				}
            				else {
HXLINE(2093)					_hx_tmp1 = 1;
            				}
HXDLIN(2093)				o1->component->waket = (this->stamp + _hx_tmp1);
HXLINE(2094)				if ((o1->type == 3)) {
HXLINE(2094)					o1->kinematicDelaySleep = true;
            				}
HXLINE(2095)				if (o1->component->sleeping) {
HXLINE(2096)					this->really_wake(o1,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,transmitType,(void))

void ZPP_Space_obj::added_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_dontwake){
            		bool dontwake = __o_dontwake.Default(false);
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2102_added_shape)
HXLINE(2103)		if (!(dontwake)) {
HXLINE(2105)			 ::zpp_nape::phys::ZPP_Body o = s->body;
HXLINE(2114)			if (!(o->world)) {
HXLINE(2123)				int _hx_tmp;
HXDLIN(2123)				if (this->midstep) {
HXLINE(2123)					_hx_tmp = 0;
            				}
            				else {
HXLINE(2123)					_hx_tmp = 1;
            				}
HXDLIN(2123)				o->component->waket = (this->stamp + _hx_tmp);
HXLINE(2124)				if ((o->type == 3)) {
HXLINE(2124)					o->kinematicDelaySleep = true;
            				}
HXLINE(2125)				if (o->component->sleeping) {
HXLINE(2126)					this->really_wake(o,false);
            				}
            			}
            		}
HXLINE(2131)		this->bphase->insert(s);
HXLINE(2132)		s->addedToSpace();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,added_shape,(void))

void ZPP_Space_obj::removed_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_deleting){
            		bool deleting = __o_deleting.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_2134_removed_shape)
HXDLIN(2134)		 ::zpp_nape::space::ZPP_Space _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2135)		 ::zpp_nape::phys::ZPP_Body body = s->body;
HXLINE(2136)		if (!(deleting)) {
HXLINE(2137)			body->wake();
            		}
HXLINE(2139)		 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();
HXLINE(2140)		{
HXLINE(2141)			 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = body->arbiters->head;
HXLINE(2142)			while(hx::IsNotNull( cx_ite )){
HXLINE(2143)				 ::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;
HXLINE(2144)				{
HXLINE(2145)					bool rem;
HXDLIN(2145)					if (hx::IsNotEq( xarb->ws1,s )) {
HXLINE(2145)						rem = hx::IsEq( xarb->ws2,s );
            					}
            					else {
HXLINE(2145)						rem = true;
            					}
HXLINE(2146)					if (rem) {
HXLINE(2147)						if ((xarb->present != 0)) {
HXLINE(2148)							this->MRCA_chains(xarb->ws1,xarb->ws2);
HXLINE(2149)							{
HXLINE(2150)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;
HXLINE(2151)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(2152)									 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;
HXLINE(2154)									{
HXLINE(2155)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;
HXLINE(2156)										while(hx::IsNotNull( cx_ite2 )){
HXLINE(2157)											 ::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;
HXLINE(2158)											{
HXLINE(2159)												 ::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;
HXLINE(2160)												 ::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;
HXLINE(2169)												cb1->validate();
HXLINE(2170)												cb2->validate();
HXLINE(2171)												 ::zpp_nape::space::ZPP_CbSetManager _this = cb1->manager;
HXDLIN(2171)												 ::zpp_nape::callbacks::ZPP_CbSetPair ret = null();
HXDLIN(2171)												 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN(2171)												if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(2171)													pairs = cb1->cbpairs;
            												}
            												else {
HXLINE(2171)													pairs = cb2->cbpairs;
            												}
HXDLIN(2171)												{
HXLINE(2171)													 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;
HXDLIN(2171)													while(hx::IsNotNull( cx_ite3 )){
HXLINE(2171)														 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;
HXDLIN(2171)														bool _hx_tmp;
HXDLIN(2171)														bool _hx_tmp1;
HXDLIN(2171)														if (hx::IsEq( p->a,cb1 )) {
HXLINE(2171)															_hx_tmp1 = hx::IsEq( p->b,cb2 );
            														}
            														else {
HXLINE(2171)															_hx_tmp1 = false;
            														}
HXDLIN(2171)														if (!(_hx_tmp1)) {
HXLINE(2171)															if (hx::IsEq( p->a,cb2 )) {
HXLINE(2171)																_hx_tmp = hx::IsEq( p->b,cb1 );
            															}
            															else {
HXLINE(2171)																_hx_tmp = false;
            															}
            														}
            														else {
HXLINE(2171)															_hx_tmp = true;
            														}
HXDLIN(2171)														if (_hx_tmp) {
HXLINE(2171)															ret = p;
HXDLIN(2171)															goto _hx_goto_62;
            														}
HXDLIN(2171)														cx_ite3 = cx_ite3->next;
            													}
            													_hx_goto_62:;
            												}
HXDLIN(2171)												if (hx::IsNull( ret )) {
HXLINE(2171)													 ::zpp_nape::callbacks::ZPP_CbSetPair ret1;
HXDLIN(2171)													{
HXLINE(2171)														if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(2171)															ret1 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(2171)															ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(2171)															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
HXDLIN(2171)															ret1->next = null();
            														}
HXDLIN(2171)														ret1->zip_listeners = true;
            													}
HXDLIN(2171)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(2171)														ret1->a = cb1;
HXDLIN(2171)														ret1->b = cb2;
            													}
            													else {
HXLINE(2171)														ret1->a = cb2;
HXDLIN(2171)														ret1->b = cb1;
            													}
HXDLIN(2171)													ret = ret1;
HXDLIN(2171)													cb1->cbpairs->add(ret);
HXDLIN(2171)													if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(2171)														cb2->cbpairs->add(ret);
            													}
            												}
HXDLIN(2171)												if (ret->zip_listeners) {
HXLINE(2171)													ret->zip_listeners = false;
HXDLIN(2171)													ret->_hx___validate();
            												}
HXDLIN(2171)												if (hx::IsNull( ret->listeners->head )) {
HXLINE(2172)													cx_ite2 = cx_ite2->next;
HXLINE(2173)													continue;
            												}
HXLINE(2175)												 ::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
HXLINE(2184)												callbackset->remove_arb(xarb);
HXLINE(2185)												xarb->present--;
HXLINE(2186)												{
HXLINE(2186)													 ::zpp_nape::space::ZPP_CbSetManager _this1 = cb1->manager;
HXDLIN(2186)													 ::zpp_nape::callbacks::ZPP_CbSetPair ret2 = null();
HXDLIN(2186)													 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs1;
HXDLIN(2186)													if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(2186)														pairs1 = cb1->cbpairs;
            													}
            													else {
HXLINE(2186)														pairs1 = cb2->cbpairs;
            													}
HXDLIN(2186)													{
HXLINE(2186)														 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite4 = pairs1->head;
HXDLIN(2186)														while(hx::IsNotNull( cx_ite4 )){
HXLINE(2186)															 ::zpp_nape::callbacks::ZPP_CbSetPair p1 = cx_ite4->elt;
HXDLIN(2186)															bool _hx_tmp2;
HXDLIN(2186)															bool _hx_tmp3;
HXDLIN(2186)															if (hx::IsEq( p1->a,cb1 )) {
HXLINE(2186)																_hx_tmp3 = hx::IsEq( p1->b,cb2 );
            															}
            															else {
HXLINE(2186)																_hx_tmp3 = false;
            															}
HXDLIN(2186)															if (!(_hx_tmp3)) {
HXLINE(2186)																if (hx::IsEq( p1->a,cb2 )) {
HXLINE(2186)																	_hx_tmp2 = hx::IsEq( p1->b,cb1 );
            																}
            																else {
HXLINE(2186)																	_hx_tmp2 = false;
            																}
            															}
            															else {
HXLINE(2186)																_hx_tmp2 = true;
            															}
HXDLIN(2186)															if (_hx_tmp2) {
HXLINE(2186)																ret2 = p1;
HXDLIN(2186)																goto _hx_goto_63;
            															}
HXDLIN(2186)															cx_ite4 = cx_ite4->next;
            														}
            														_hx_goto_63:;
            													}
HXDLIN(2186)													if (hx::IsNull( ret2 )) {
HXLINE(2186)														 ::zpp_nape::callbacks::ZPP_CbSetPair ret3;
HXDLIN(2186)														{
HXLINE(2186)															if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(2186)																ret3 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(2186)																ret3 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(2186)																::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret3->next;
HXDLIN(2186)																ret3->next = null();
            															}
HXDLIN(2186)															ret3->zip_listeners = true;
            														}
HXDLIN(2186)														if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(2186)															ret3->a = cb1;
HXDLIN(2186)															ret3->b = cb2;
            														}
            														else {
HXLINE(2186)															ret3->a = cb2;
HXDLIN(2186)															ret3->b = cb1;
            														}
HXDLIN(2186)														ret2 = ret3;
HXDLIN(2186)														cb1->cbpairs->add(ret2);
HXDLIN(2186)														if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(2186)															cb2->cbpairs->add(ret2);
            														}
            													}
HXDLIN(2186)													if (ret2->zip_listeners) {
HXLINE(2186)														ret2->zip_listeners = false;
HXDLIN(2186)														ret2->_hx___validate();
            													}
HXDLIN(2186)													{
HXLINE(2186)														 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite5 = ret2->listeners->head;
HXDLIN(2186)														while(hx::IsNotNull( cx_ite5 )){
HXLINE(2186)															 ::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite5->elt;
HXDLIN(2186)															if ((x->event == 1)) {
HXLINE(2187)																bool _hx_tmp4;
HXDLIN(2187)																if (((x->itype & xarb->type) != 0)) {
HXLINE(2187)																	_hx_tmp4 = callbackset->empty_arb(x->itype);
            																}
            																else {
HXLINE(2187)																	_hx_tmp4 = false;
            																}
HXDLIN(2187)																if (_hx_tmp4) {
HXLINE(2188)																	 ::zpp_nape::callbacks::ZPP_Callback cb = _gthis->push_callback(x);
HXLINE(2189)																	cb->event = 1;
HXLINE(2190)																	{
HXLINE(2190)																		 ::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;
HXDLIN(2190)																		 ::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;
HXDLIN(2190)																		bool _hx_tmp5;
HXDLIN(2190)																		 ::zpp_nape::callbacks::ZPP_OptionType _this2 = x->options1;
HXDLIN(2190)																		 ::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;
HXDLIN(2190)																		bool _hx_tmp6;
HXDLIN(2190)																		if (_this2->nonemptyintersection(xs,_this2->includes)) {
HXLINE(2190)																			_hx_tmp6 = !(_this2->nonemptyintersection(xs,_this2->excludes));
            																		}
            																		else {
HXLINE(2190)																			_hx_tmp6 = false;
            																		}
HXDLIN(2190)																		if (_hx_tmp6) {
HXLINE(2190)																			 ::zpp_nape::callbacks::ZPP_OptionType _this3 = x->options2;
HXDLIN(2190)																			 ::zpp_nape::util::ZNPList_ZPP_CbType xs1 = o2->cbTypes;
HXDLIN(2190)																			if (_this3->nonemptyintersection(xs1,_this3->includes)) {
HXLINE(2190)																				_hx_tmp5 = !(_this3->nonemptyintersection(xs1,_this3->excludes));
            																			}
            																			else {
HXLINE(2190)																				_hx_tmp5 = false;
            																			}
            																		}
            																		else {
HXLINE(2190)																			_hx_tmp5 = false;
            																		}
HXDLIN(2190)																		if (_hx_tmp5) {
HXLINE(2190)																			cb->int1 = o1;
HXDLIN(2190)																			cb->int2 = o2;
            																		}
            																		else {
HXLINE(2190)																			cb->int1 = o2;
HXDLIN(2190)																			cb->int2 = o1;
            																		}
            																	}
HXLINE(2191)																	cb->set = callbackset;
            																}
            															}
HXLINE(2186)															cx_ite5 = cx_ite5->next;
            														}
            													}
            												}
HXLINE(2194)												if (hx::IsNull( callbackset->arbiters->head )) {
HXLINE(2195)													this->remove_callbackset(callbackset);
            												}
            											}
HXLINE(2198)											cx_ite2 = cx_ite2->next;
            										}
            									}
HXLINE(2202)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
HXLINE(2214)						bool _hx_tmp7;
HXDLIN(2214)						if (hx::IsNotEq( xarb->b1,body )) {
HXLINE(2214)							_hx_tmp7 = (xarb->b1->type == 2);
            						}
            						else {
HXLINE(2214)							_hx_tmp7 = false;
            						}
HXDLIN(2214)						if (_hx_tmp7) {
HXLINE(2215)							 ::zpp_nape::phys::ZPP_Body o = xarb->b1;
HXLINE(2224)							if (!(o->world)) {
HXLINE(2233)								int _hx_tmp8;
HXDLIN(2233)								if (this->midstep) {
HXLINE(2233)									_hx_tmp8 = 0;
            								}
            								else {
HXLINE(2233)									_hx_tmp8 = 1;
            								}
HXDLIN(2233)								o->component->waket = (this->stamp + _hx_tmp8);
HXLINE(2234)								if ((o->type == 3)) {
HXLINE(2234)									o->kinematicDelaySleep = true;
            								}
HXLINE(2235)								if (o->component->sleeping) {
HXLINE(2236)									this->really_wake(o,false);
            								}
            							}
            						}
HXLINE(2240)						bool _hx_tmp9;
HXDLIN(2240)						if (hx::IsNotEq( xarb->b2,body )) {
HXLINE(2240)							_hx_tmp9 = (xarb->b2->type == 2);
            						}
            						else {
HXLINE(2240)							_hx_tmp9 = false;
            						}
HXDLIN(2240)						if (_hx_tmp9) {
HXLINE(2241)							 ::zpp_nape::phys::ZPP_Body o3 = xarb->b2;
HXLINE(2250)							if (!(o3->world)) {
HXLINE(2259)								int _hx_tmp10;
HXDLIN(2259)								if (this->midstep) {
HXLINE(2259)									_hx_tmp10 = 0;
            								}
            								else {
HXLINE(2259)									_hx_tmp10 = 1;
            								}
HXDLIN(2259)								o3->component->waket = (this->stamp + _hx_tmp10);
HXLINE(2260)								if ((o3->type == 3)) {
HXLINE(2260)									o3->kinematicDelaySleep = true;
            								}
HXLINE(2261)								if (o3->component->sleeping) {
HXLINE(2262)									this->really_wake(o3,false);
            								}
            							}
            						}
HXLINE(2266)						{
HXLINE(2266)							xarb->cleared = true;
HXDLIN(2266)							bool _hx_tmp11;
HXDLIN(2266)							if (hx::IsNotNull( body )) {
HXLINE(2266)								_hx_tmp11 = hx::IsEq( xarb->b2,body );
            							}
            							else {
HXLINE(2266)								_hx_tmp11 = true;
            							}
HXDLIN(2266)							if (_hx_tmp11) {
HXLINE(2266)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this4 = xarb->b1->arbiters;
HXDLIN(2266)								{
HXLINE(2266)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();
HXDLIN(2266)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this4->head;
HXDLIN(2266)									bool ret4 = false;
HXDLIN(2266)									while(hx::IsNotNull( cur )){
HXLINE(2266)										if (hx::IsEq( cur->elt,xarb )) {
HXLINE(2266)											{
HXLINE(2266)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old;
HXDLIN(2266)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret5;
HXDLIN(2266)												if (hx::IsNull( pre1 )) {
HXLINE(2266)													old = _this4->head;
HXDLIN(2266)													ret5 = old->next;
HXDLIN(2266)													_this4->head = ret5;
HXDLIN(2266)													if (hx::IsNull( _this4->head )) {
HXLINE(2266)														_this4->pushmod = true;
            													}
            												}
            												else {
HXLINE(2266)													old = pre1->next;
HXDLIN(2266)													ret5 = old->next;
HXDLIN(2266)													pre1->next = ret5;
HXDLIN(2266)													if (hx::IsNull( ret5 )) {
HXLINE(2266)														_this4->pushmod = true;
            													}
            												}
HXDLIN(2266)												{
HXLINE(2266)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o4 = old;
HXDLIN(2266)													o4->elt = null();
HXDLIN(2266)													o4->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2266)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o4;
            												}
HXDLIN(2266)												_this4->modified = true;
HXDLIN(2266)												_this4->length--;
HXDLIN(2266)												_this4->pushmod = true;
            											}
HXDLIN(2266)											ret4 = true;
HXDLIN(2266)											goto _hx_goto_65;
            										}
HXDLIN(2266)										pre1 = cur;
HXDLIN(2266)										cur = cur->next;
            									}
            									_hx_goto_65:;
            								}
            							}
HXDLIN(2266)							bool _hx_tmp12;
HXDLIN(2266)							if (hx::IsNotNull( body )) {
HXLINE(2266)								_hx_tmp12 = hx::IsEq( xarb->b1,body );
            							}
            							else {
HXLINE(2266)								_hx_tmp12 = true;
            							}
HXDLIN(2266)							if (_hx_tmp12) {
HXLINE(2266)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this5 = xarb->b2->arbiters;
HXDLIN(2266)								{
HXLINE(2266)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre2 = null();
HXDLIN(2266)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur1 = _this5->head;
HXDLIN(2266)									bool ret6 = false;
HXDLIN(2266)									while(hx::IsNotNull( cur1 )){
HXLINE(2266)										if (hx::IsEq( cur1->elt,xarb )) {
HXLINE(2266)											{
HXLINE(2266)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old1;
HXDLIN(2266)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret7;
HXDLIN(2266)												if (hx::IsNull( pre2 )) {
HXLINE(2266)													old1 = _this5->head;
HXDLIN(2266)													ret7 = old1->next;
HXDLIN(2266)													_this5->head = ret7;
HXDLIN(2266)													if (hx::IsNull( _this5->head )) {
HXLINE(2266)														_this5->pushmod = true;
            													}
            												}
            												else {
HXLINE(2266)													old1 = pre2->next;
HXDLIN(2266)													ret7 = old1->next;
HXDLIN(2266)													pre2->next = ret7;
HXDLIN(2266)													if (hx::IsNull( ret7 )) {
HXLINE(2266)														_this5->pushmod = true;
            													}
            												}
HXDLIN(2266)												{
HXLINE(2266)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o5 = old1;
HXDLIN(2266)													o5->elt = null();
HXDLIN(2266)													o5->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2266)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o5;
            												}
HXDLIN(2266)												_this5->modified = true;
HXDLIN(2266)												_this5->length--;
HXDLIN(2266)												_this5->pushmod = true;
            											}
HXDLIN(2266)											ret6 = true;
HXDLIN(2266)											goto _hx_goto_66;
            										}
HXDLIN(2266)										pre2 = cur1;
HXDLIN(2266)										cur1 = cur1->next;
            									}
            									_hx_goto_66:;
            								}
            							}
HXDLIN(2266)							if (hx::IsNotNull( xarb->pair )) {
HXLINE(2266)								xarb->pair->arb = null();
HXDLIN(2266)								xarb->pair = null();
            							}
HXDLIN(2266)							xarb->active = false;
HXDLIN(2266)							this->f_arbiters->modified = true;
            						}
HXLINE(2267)						cx_ite = body->arbiters->erase(pre);
HXLINE(2268)						continue;
            					}
HXLINE(2270)					pre = cx_ite;
            				}
HXLINE(2272)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2275)		this->bphase->remove(s);
HXLINE(2276)		s->removedFromSpace();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,removed_shape,(void))

void ZPP_Space_obj::addConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2278_addConstraint)
HXLINE(2279)		con->space = hx::ObjectPtr<OBJ_>(this);
HXLINE(2280)		con->addedToSpace();
HXLINE(2281)		if (con->active) {
HXLINE(2290)			con->component->sleeping = true;
HXLINE(2291)			this->wake_constraint(con,true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addConstraint,(void))

void ZPP_Space_obj::remConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2294_remConstraint)
HXLINE(2295)		if (con->active) {
HXLINE(2296)			this->wake_constraint(con,true);
HXLINE(2297)			this->live_constraints->remove(con);
            		}
HXLINE(2299)		con->removedFromSpace();
HXLINE(2300)		con->space = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remConstraint,(void))

void ZPP_Space_obj::addCompound( ::zpp_nape::phys::ZPP_Compound x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2302_addCompound)
HXLINE(2303)		x->space = hx::ObjectPtr<OBJ_>(this);
HXLINE(2304)		x->addedToSpace();
HXLINE(2305)		{
HXLINE(2306)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;
HXLINE(2307)			while(hx::IsNotNull( cx_ite )){
HXLINE(2308)				 ::zpp_nape::phys::ZPP_Body i = cx_ite->elt;
HXLINE(2309)				this->addBody(i,null());
HXLINE(2310)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2313)		{
HXLINE(2314)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite1 = x->constraints->head;
HXLINE(2315)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(2316)				 ::zpp_nape::constraint::ZPP_Constraint i1 = cx_ite1->elt;
HXLINE(2317)				this->addConstraint(i1);
HXLINE(2318)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(2321)		{
HXLINE(2322)			 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite2 = x->compounds->head;
HXLINE(2323)			while(hx::IsNotNull( cx_ite2 )){
HXLINE(2324)				 ::zpp_nape::phys::ZPP_Compound i2 = cx_ite2->elt;
HXLINE(2325)				this->addCompound(i2);
HXLINE(2326)				cx_ite2 = cx_ite2->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addCompound,(void))

void ZPP_Space_obj::remCompound( ::zpp_nape::phys::ZPP_Compound x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2330_remCompound)
HXLINE(2331)		{
HXLINE(2332)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;
HXLINE(2333)			while(hx::IsNotNull( cx_ite )){
HXLINE(2334)				 ::zpp_nape::phys::ZPP_Body i = cx_ite->elt;
HXLINE(2335)				this->remBody(i,null());
HXLINE(2336)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2339)		{
HXLINE(2340)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite1 = x->constraints->head;
HXLINE(2341)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(2342)				 ::zpp_nape::constraint::ZPP_Constraint i1 = cx_ite1->elt;
HXLINE(2343)				this->remConstraint(i1);
HXLINE(2344)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(2347)		{
HXLINE(2348)			 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite2 = x->compounds->head;
HXLINE(2349)			while(hx::IsNotNull( cx_ite2 )){
HXLINE(2350)				 ::zpp_nape::phys::ZPP_Compound i2 = cx_ite2->elt;
HXLINE(2351)				this->remCompound(i2);
HXLINE(2352)				cx_ite2 = cx_ite2->next;
            			}
            		}
HXLINE(2355)		x->removedFromSpace();
HXLINE(2356)		x->space = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remCompound,(void))

void ZPP_Space_obj::addBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
            		int flag = __o_flag.Default(-1);
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2358_addBody)
HXLINE(2359)		body->space = hx::ObjectPtr<OBJ_>(this);
HXLINE(2360)		body->addedToSpace();
HXLINE(2369)		body->component->sleeping = true;
HXLINE(2370)		{
HXLINE(2371)			 ::zpp_nape::phys::ZPP_Body o = body;
HXLINE(2380)			if (!(o->world)) {
HXLINE(2389)				int _hx_tmp;
HXDLIN(2389)				if (this->midstep) {
HXLINE(2389)					_hx_tmp = 0;
            				}
            				else {
HXLINE(2389)					_hx_tmp = 1;
            				}
HXDLIN(2389)				o->component->waket = (this->stamp + _hx_tmp);
HXLINE(2390)				if ((o->type == 3)) {
HXLINE(2390)					o->kinematicDelaySleep = true;
            				}
HXLINE(2391)				if (o->component->sleeping) {
HXLINE(2392)					this->really_wake(o,true);
            				}
            			}
            		}
HXLINE(2396)		{
HXLINE(2397)			 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;
HXLINE(2398)			while(hx::IsNotNull( cx_ite )){
HXLINE(2399)				 ::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;
HXLINE(2400)				{
HXLINE(2400)					this->bphase->insert(shape);
HXDLIN(2400)					shape->addedToSpace();
            				}
HXLINE(2401)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2404)		if ((body->type == 1)) {
HXLINE(2405)			this->static_validation(body);
            		}
            		else {
HXLINE(2416)			if ((body->type != 2)) {
HXLINE(2427)				if ((flag != 3)) {
HXLINE(2427)					this->kinematics->add(body);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,addBody,(void))

void ZPP_Space_obj::remBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
            		int flag = __o_flag.Default(-1);
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2439_remBody)
HXLINE(2440)		if ((body->type == 1)) {
HXLINE(2441)			{
HXLINE(2442)				 ::zpp_nape::phys::ZPP_Body o = body;
HXLINE(2451)				if (!(o->world)) {
HXLINE(2460)					int _hx_tmp;
HXDLIN(2460)					if (this->midstep) {
HXLINE(2460)						_hx_tmp = 0;
            					}
            					else {
HXLINE(2460)						_hx_tmp = 1;
            					}
HXDLIN(2460)					o->component->waket = (this->stamp + _hx_tmp);
HXLINE(2461)					if ((o->type == 3)) {
HXLINE(2461)						o->kinematicDelaySleep = true;
            					}
HXLINE(2462)					if (o->component->sleeping) {
HXLINE(2463)						this->really_wake(o,true);
            					}
            				}
            			}
HXLINE(2483)			this->staticsleep->remove(body);
            		}
            		else {
HXLINE(2494)			if ((body->type == 2)) {
HXLINE(2495)				{
HXLINE(2496)					 ::zpp_nape::phys::ZPP_Body o1 = body;
HXLINE(2505)					if (!(o1->world)) {
HXLINE(2514)						int _hx_tmp1;
HXDLIN(2514)						if (this->midstep) {
HXLINE(2514)							_hx_tmp1 = 0;
            						}
            						else {
HXLINE(2514)							_hx_tmp1 = 1;
            						}
HXDLIN(2514)						o1->component->waket = (this->stamp + _hx_tmp1);
HXLINE(2515)						if ((o1->type == 3)) {
HXLINE(2515)							o1->kinematicDelaySleep = true;
            						}
HXLINE(2516)						if (o1->component->sleeping) {
HXLINE(2517)							this->really_wake(o1,true);
            						}
            					}
            				}
HXLINE(2521)				this->live->remove(body);
            			}
            			else {
HXLINE(2532)				if ((flag != 3)) {
HXLINE(2532)					this->kinematics->remove(body);
            				}
HXLINE(2533)				{
HXLINE(2534)					 ::zpp_nape::phys::ZPP_Body o2 = body;
HXLINE(2543)					if (!(o2->world)) {
HXLINE(2552)						int _hx_tmp2;
HXDLIN(2552)						if (this->midstep) {
HXLINE(2552)							_hx_tmp2 = 0;
            						}
            						else {
HXLINE(2552)							_hx_tmp2 = 1;
            						}
HXDLIN(2552)						o2->component->waket = (this->stamp + _hx_tmp2);
HXLINE(2553)						if ((o2->type == 3)) {
HXLINE(2553)							o2->kinematicDelaySleep = true;
            						}
HXLINE(2554)						if (o2->component->sleeping) {
HXLINE(2555)							this->really_wake(o2,true);
            						}
            					}
            				}
HXLINE(2559)				this->staticsleep->remove(body);
            			}
            		}
HXLINE(2570)		{
HXLINE(2571)			 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;
HXLINE(2572)			while(hx::IsNotNull( cx_ite )){
HXLINE(2573)				 ::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;
HXLINE(2574)				this->removed_shape(shape,true);
HXLINE(2575)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2578)		body->removedFromSpace();
HXLINE(2579)		body->space = null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,remBody,(void))

 ::nape::shape::ShapeList ZPP_Space_obj::shapesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2582_shapesUnderPoint)
HXDLIN(2582)		return this->bphase->shapesUnderPoint(x,y,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesUnderPoint,return )

 ::nape::phys::BodyList ZPP_Space_obj::bodiesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2585_bodiesUnderPoint)
HXDLIN(2585)		return this->bphase->bodiesUnderPoint(x,y,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesUnderPoint,return )

 ::nape::shape::ShapeList ZPP_Space_obj::shapesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2588_shapesInAABB)
HXDLIN(2588)		return this->bphase->shapesInAABB(aabb->zpp_inner,strict,cont,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInAABB,return )

 ::nape::phys::BodyList ZPP_Space_obj::bodiesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2591_bodiesInAABB)
HXDLIN(2591)		return this->bphase->bodiesInAABB(aabb->zpp_inner,strict,cont,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInAABB,return )

 ::nape::shape::ShapeList ZPP_Space_obj::shapesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2594_shapesInCircle)
HXDLIN(2594)		 ::zpp_nape::space::ZPP_Broadphase _hx_tmp = this->bphase;
HXDLIN(2594)		bool _hx_tmp1;
HXDLIN(2594)		if (hx::IsNotNull( pos )) {
HXDLIN(2594)			_hx_tmp1 = pos->zpp_disp;
            		}
            		else {
HXDLIN(2594)			_hx_tmp1 = false;
            		}
HXDLIN(2594)		if (_hx_tmp1) {
HXDLIN(2594)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2594)		{
HXDLIN(2594)			 ::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;
HXDLIN(2594)			if (hx::IsNotNull( _this->_validate )) {
HXDLIN(2594)				_this->_validate();
            			}
            		}
HXDLIN(2594)		Float _hx_tmp2 = pos->zpp_inner->x;
HXDLIN(2594)		bool _hx_tmp3;
HXDLIN(2594)		if (hx::IsNotNull( pos )) {
HXDLIN(2594)			_hx_tmp3 = pos->zpp_disp;
            		}
            		else {
HXDLIN(2594)			_hx_tmp3 = false;
            		}
HXDLIN(2594)		if (_hx_tmp3) {
HXDLIN(2594)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2594)		{
HXDLIN(2594)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = pos->zpp_inner;
HXDLIN(2594)			if (hx::IsNotNull( _this1->_validate )) {
HXDLIN(2594)				_this1->_validate();
            			}
            		}
HXDLIN(2594)		return _hx_tmp->shapesInCircle(_hx_tmp2,pos->zpp_inner->y,rad,cont,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInCircle,return )

 ::nape::phys::BodyList ZPP_Space_obj::bodiesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2597_bodiesInCircle)
HXDLIN(2597)		 ::zpp_nape::space::ZPP_Broadphase _hx_tmp = this->bphase;
HXDLIN(2597)		bool _hx_tmp1;
HXDLIN(2597)		if (hx::IsNotNull( pos )) {
HXDLIN(2597)			_hx_tmp1 = pos->zpp_disp;
            		}
            		else {
HXDLIN(2597)			_hx_tmp1 = false;
            		}
HXDLIN(2597)		if (_hx_tmp1) {
HXDLIN(2597)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2597)		{
HXDLIN(2597)			 ::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;
HXDLIN(2597)			if (hx::IsNotNull( _this->_validate )) {
HXDLIN(2597)				_this->_validate();
            			}
            		}
HXDLIN(2597)		Float _hx_tmp2 = pos->zpp_inner->x;
HXDLIN(2597)		bool _hx_tmp3;
HXDLIN(2597)		if (hx::IsNotNull( pos )) {
HXDLIN(2597)			_hx_tmp3 = pos->zpp_disp;
            		}
            		else {
HXDLIN(2597)			_hx_tmp3 = false;
            		}
HXDLIN(2597)		if (_hx_tmp3) {
HXDLIN(2597)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN(2597)		{
HXDLIN(2597)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = pos->zpp_inner;
HXDLIN(2597)			if (hx::IsNotNull( _this1->_validate )) {
HXDLIN(2597)				_this1->_validate();
            			}
            		}
HXDLIN(2597)		return _hx_tmp->bodiesInCircle(_hx_tmp2,pos->zpp_inner->y,rad,cont,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInCircle,return )

 ::nape::shape::ShapeList ZPP_Space_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2600_shapesInShape)
HXDLIN(2600)		return this->bphase->shapesInShape(shape,cont,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesInShape,return )

 ::nape::phys::BodyList ZPP_Space_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2603_bodiesInShape)
HXDLIN(2603)		return this->bphase->bodiesInShape(shape,cont,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesInShape,return )

 ::nape::geom::RayResult ZPP_Space_obj::rayCast( ::nape::geom::Ray ray,bool inner, ::nape::dynamics::InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2606_rayCast)
HXDLIN(2606)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp;
HXDLIN(2606)		if (hx::IsNull( filter )) {
HXDLIN(2606)			_hx_tmp = null();
            		}
            		else {
HXDLIN(2606)			_hx_tmp = filter->zpp_inner;
            		}
HXDLIN(2606)		return this->bphase->rayCast(ray->zpp_inner,inner,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,rayCast,return )

 ::nape::geom::RayResultList ZPP_Space_obj::rayMultiCast( ::nape::geom::Ray ray,bool inner, ::nape::dynamics::InteractionFilter filter, ::nape::geom::RayResultList output){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2609_rayMultiCast)
HXDLIN(2609)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp;
HXDLIN(2609)		if (hx::IsNull( filter )) {
HXDLIN(2609)			_hx_tmp = null();
            		}
            		else {
HXDLIN(2609)			_hx_tmp = filter->zpp_inner;
            		}
HXDLIN(2609)		return this->bphase->rayMultiCast(ray->zpp_inner,inner,_hx_tmp,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,rayMultiCast,return )

 ::nape::geom::ConvexResult ZPP_Space_obj::convexCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime, ::nape::dynamics::InteractionFilter filter,bool dynamics){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_2612_convexCast)
HXLINE(2613)		 ::zpp_nape::geom::ZPP_ToiEvent toi;
HXLINE(2614)		{
HXLINE(2615)			if (hx::IsNull( ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(2616)				toi =  ::zpp_nape::geom::ZPP_ToiEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2622)				toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(2623)				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
HXLINE(2624)				toi->next = null();
            			}
HXLINE(2629)			{
HXLINE(2629)				toi->failed = false;
HXDLIN(2629)				toi->s1 = (toi->s2 = null());
HXDLIN(2629)				toi->arbiter = null();
            			}
            		}
HXLINE(2631)		if ((shape->type == 0)) {
HXLINE(2631)			 ::zpp_nape::shape::ZPP_Circle _this = shape->circle;
HXDLIN(2631)			if (_this->zip_worldCOM) {
HXLINE(2631)				if (hx::IsNotNull( _this->body )) {
HXLINE(2631)					_this->zip_worldCOM = false;
HXDLIN(2631)					if (_this->zip_localCOM) {
HXLINE(2631)						_this->zip_localCOM = false;
HXDLIN(2631)						if ((_this->type == 1)) {
HXLINE(2631)							 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN(2631)							if (hx::IsNull( _this1->lverts->next )) {
HXLINE(2631)								HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            							}
HXDLIN(2631)							if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE(2631)								_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(2631)								_this1->localCOMy = _this1->lverts->next->y;
            							}
            							else {
HXLINE(2631)								if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE(2631)									{
HXLINE(2631)										_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(2631)										_this1->localCOMy = _this1->lverts->next->y;
            									}
HXDLIN(2631)									{
HXLINE(2631)										Float t = ((Float)1.0);
HXDLIN(2631)										 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN(2631)										_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN(2631)										 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN(2631)										_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            									}
HXDLIN(2631)									{
HXLINE(2631)										Float t1 = ((Float)0.5);
HXDLIN(2631)										 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN(2631)										_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN(2631)										 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN(2631)										_this5->localCOMy = (_this5->localCOMy * t1);
            									}
            								}
            								else {
HXLINE(2631)									{
HXLINE(2631)										_this1->localCOMx = ( (Float)(0) );
HXDLIN(2631)										_this1->localCOMy = ( (Float)(0) );
            									}
HXDLIN(2631)									Float area = ((Float)0.0);
HXDLIN(2631)									{
HXLINE(2631)										 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN(2631)										 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(2631)										cx_ite = cx_ite->next;
HXDLIN(2631)										 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(2631)										cx_ite = cx_ite->next;
HXDLIN(2631)										while(hx::IsNotNull( cx_ite )){
HXLINE(2631)											 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(2631)											{
HXLINE(2631)												area = (area + (v->x * (w->y - u->y)));
HXDLIN(2631)												Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(2631)												 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN(2631)												_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN(2631)												 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN(2631)												_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            											}
HXDLIN(2631)											u = v;
HXDLIN(2631)											v = w;
HXDLIN(2631)											cx_ite = cx_ite->next;
            										}
HXDLIN(2631)										cx_ite = _this1->lverts->next;
HXDLIN(2631)										 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(2631)										{
HXLINE(2631)											area = (area + (v->x * (w1->y - u->y)));
HXDLIN(2631)											Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(2631)											 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN(2631)											_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(2631)											 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN(2631)											_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            										}
HXDLIN(2631)										u = v;
HXDLIN(2631)										v = w1;
HXDLIN(2631)										cx_ite = cx_ite->next;
HXDLIN(2631)										 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(2631)										{
HXLINE(2631)											area = (area + (v->x * (w2->y - u->y)));
HXDLIN(2631)											Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(2631)											 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN(2631)											_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(2631)											 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN(2631)											_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            										}
            									}
HXDLIN(2631)									area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(2631)									{
HXLINE(2631)										Float t2 = area;
HXDLIN(2631)										 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN(2631)										_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN(2631)										 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN(2631)										_this13->localCOMy = (_this13->localCOMy * t2);
            									}
            								}
            							}
            						}
HXDLIN(2631)						if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE(2631)							_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(2631)							_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            						}
            					}
HXDLIN(2631)					{
HXLINE(2631)						 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN(2631)						if (_this14->zip_axis) {
HXLINE(2631)							_this14->zip_axis = false;
HXDLIN(2631)							{
HXLINE(2631)								_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN(2631)								_this14->axisy = ::Math_obj::cos(_this14->rot);
            							}
            						}
            					}
HXDLIN(2631)					{
HXLINE(2631)						_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(2631)						_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            					}
            				}
            			}
            		}
            		else {
HXLINE(2631)			 ::zpp_nape::shape::ZPP_Polygon _this15 = shape->polygon;
HXDLIN(2631)			if (_this15->zip_gaxi) {
HXLINE(2631)				if (hx::IsNotNull( _this15->body )) {
HXLINE(2631)					_this15->zip_gaxi = false;
HXDLIN(2631)					_this15->validate_laxi();
HXDLIN(2631)					{
HXLINE(2631)						 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN(2631)						if (_this16->zip_axis) {
HXLINE(2631)							_this16->zip_axis = false;
HXDLIN(2631)							{
HXLINE(2631)								_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN(2631)								_this16->axisy = ::Math_obj::cos(_this16->rot);
            							}
            						}
            					}
HXDLIN(2631)					if (_this15->zip_gverts) {
HXLINE(2631)						if (hx::IsNotNull( _this15->body )) {
HXLINE(2631)							_this15->zip_gverts = false;
HXDLIN(2631)							_this15->validate_lverts();
HXDLIN(2631)							{
HXLINE(2631)								 ::zpp_nape::phys::ZPP_Body _this17 = _this15->body;
HXDLIN(2631)								if (_this17->zip_axis) {
HXLINE(2631)									_this17->zip_axis = false;
HXDLIN(2631)									{
HXLINE(2631)										_this17->axisx = ::Math_obj::sin(_this17->rot);
HXDLIN(2631)										_this17->axisy = ::Math_obj::cos(_this17->rot);
            									}
            								}
            							}
HXDLIN(2631)							 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN(2631)							{
HXLINE(2631)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN(2631)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(2631)									 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN(2631)									{
HXLINE(2631)										 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(2631)										li = li->next;
HXDLIN(2631)										{
HXLINE(2631)											g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN(2631)											g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            										}
            									}
HXDLIN(2631)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
            					}
HXDLIN(2631)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this15->edges->head;
HXDLIN(2631)					{
HXLINE(2631)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next;
HXDLIN(2631)						 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite2;
HXDLIN(2631)						cx_ite2 = cx_ite2->next;
HXDLIN(2631)						while(hx::IsNotNull( cx_ite2 )){
HXLINE(2631)							 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite2;
HXDLIN(2631)							{
HXLINE(2631)								 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN(2631)								ite = ite->next;
HXDLIN(2631)								e->gp0 = u1;
HXDLIN(2631)								e->gp1 = v1;
HXDLIN(2631)								{
HXLINE(2631)									e->gnormx = ((_this15->body->axisy * e->lnormx) - (_this15->body->axisx * e->lnormy));
HXDLIN(2631)									e->gnormy = ((e->lnormx * _this15->body->axisx) + (e->lnormy * _this15->body->axisy));
            								}
HXDLIN(2631)								e->gprojection = (((_this15->body->posx * e->gnormx) + (_this15->body->posy * e->gnormy)) + e->lprojection);
HXDLIN(2631)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE(2631)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN(2631)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN(2631)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN(2631)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN(2631)							u1 = v1;
HXDLIN(2631)							cx_ite2 = cx_ite2->next;
            						}
HXDLIN(2631)						 ::zpp_nape::geom::ZPP_Vec2 v2 = _this15->gverts->next;
HXDLIN(2631)						{
HXLINE(2631)							 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN(2631)							ite = ite->next;
HXDLIN(2631)							e1->gp0 = u1;
HXDLIN(2631)							e1->gp1 = v2;
HXDLIN(2631)							{
HXLINE(2631)								e1->gnormx = ((_this15->body->axisy * e1->lnormx) - (_this15->body->axisx * e1->lnormy));
HXDLIN(2631)								e1->gnormy = ((e1->lnormx * _this15->body->axisx) + (e1->lnormy * _this15->body->axisy));
            							}
HXDLIN(2631)							e1->gprojection = (((_this15->body->posx * e1->gnormx) + (_this15->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN(2631)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE(2631)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN(2631)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN(2631)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN(2631)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
HXLINE(2632)		 ::zpp_nape::phys::ZPP_Body body = shape->body;
HXLINE(2633)		Float prex = body->posx;
HXLINE(2634)		Float prey = body->posy;
HXLINE(2635)		body->sweepTime = ( (Float)(0) );
HXLINE(2636)		body->sweep_angvel = body->angvel;
HXLINE(2637)		{
HXLINE(2637)			Float delta = (deltaTime - body->sweepTime);
HXDLIN(2637)			if ((delta != 0)) {
HXLINE(2637)				body->sweepTime = deltaTime;
HXDLIN(2637)				{
HXLINE(2637)					Float t3 = delta;
HXDLIN(2637)					 ::zpp_nape::phys::ZPP_Body body1 = body;
HXDLIN(2637)					body1->posx = (body1->posx + (body->velx * t3));
HXDLIN(2637)					 ::zpp_nape::phys::ZPP_Body body2 = body;
HXDLIN(2637)					body2->posy = (body2->posy + (body->vely * t3));
            				}
HXDLIN(2637)				if ((body->angvel != 0)) {
HXLINE(2637)					Float dr = (body->sweep_angvel * delta);
HXDLIN(2637)					 ::zpp_nape::phys::ZPP_Body body3 = body;
HXDLIN(2637)					body3->rot = (body3->rot + dr);
HXDLIN(2637)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE(2637)						body->axisx = ::Math_obj::sin(body->rot);
HXDLIN(2637)						body->axisy = ::Math_obj::cos(body->rot);
            					}
            					else {
HXLINE(2637)						Float d2 = (dr * dr);
HXDLIN(2637)						Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(2637)						Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(2637)						Float nx = (((p * body->axisx) + (dr * body->axisy)) * m);
HXDLIN(2637)						body->axisy = (((p * body->axisy) - (dr * body->axisx)) * m);
HXDLIN(2637)						body->axisx = nx;
            					}
            				}
            			}
            		}
HXLINE(2638)		Float postx = body->posx;
HXLINE(2639)		Float posty = body->posy;
HXLINE(2640)		shape->validate_sweepRadius();
HXLINE(2641)		Float rad = shape->sweepRadius;
HXLINE(2642)		 ::zpp_nape::geom::ZPP_AABB aabb;
HXLINE(2644)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE(2645)			aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2651)			aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE(2652)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
HXLINE(2653)			aabb->next = null();
            		}
HXLINE(2661)		Float x = prex;
HXLINE(2662)		Float y = postx;
HXLINE(2660)		Float _hx_tmp;
HXLINE(2663)		if ((x < y)) {
HXLINE(2660)			_hx_tmp = x;
            		}
            		else {
HXLINE(2660)			_hx_tmp = y;
            		}
HXDLIN(2660)		aabb->minx = (_hx_tmp - rad);
HXLINE(2666)		Float x1 = prex;
HXLINE(2667)		Float y1 = postx;
HXLINE(2665)		Float _hx_tmp1;
HXLINE(2668)		if ((x1 > y1)) {
HXLINE(2665)			_hx_tmp1 = x1;
            		}
            		else {
HXLINE(2665)			_hx_tmp1 = y1;
            		}
HXDLIN(2665)		aabb->maxx = (_hx_tmp1 + rad);
HXLINE(2671)		Float x2 = prey;
HXLINE(2672)		Float y2 = posty;
HXLINE(2670)		Float _hx_tmp2;
HXLINE(2673)		if ((x2 < y2)) {
HXLINE(2670)			_hx_tmp2 = x2;
            		}
            		else {
HXLINE(2670)			_hx_tmp2 = y2;
            		}
HXDLIN(2670)		aabb->miny = (_hx_tmp2 - rad);
HXLINE(2676)		Float x3 = prey;
HXLINE(2677)		Float y3 = posty;
HXLINE(2675)		Float _hx_tmp3;
HXLINE(2678)		if ((x3 > y3)) {
HXLINE(2675)			_hx_tmp3 = x3;
            		}
            		else {
HXLINE(2675)			_hx_tmp3 = y3;
            		}
HXDLIN(2675)		aabb->maxy = (_hx_tmp3 + rad);
HXLINE(2680)		 ::zpp_nape::dynamics::ZPP_InteractionFilter list;
HXDLIN(2680)		if (hx::IsNull( filter )) {
HXLINE(2680)			list = null();
            		}
            		else {
HXLINE(2680)			list = filter->zpp_inner;
            		}
HXDLIN(2680)		 ::nape::shape::ShapeList list1 = (this->convexShapeList = this->bphase->shapesInAABB(aabb,false,false,list,this->convexShapeList));
HXLINE(2681)		{
HXLINE(2682)			 ::zpp_nape::geom::ZPP_AABB o = aabb;
HXLINE(2691)			{
HXLINE(2691)				if (hx::IsNotNull( o->outer )) {
HXLINE(2691)					o->outer->zpp_inner = null();
HXDLIN(2691)					o->outer = null();
            				}
HXDLIN(2691)				o->wrap_min = (o->wrap_max = null());
HXDLIN(2691)				o->_invalidate = null();
HXDLIN(2691)				o->_validate = null();
            			}
HXLINE(2692)			o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE(2693)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
            		}
HXLINE(2698)		Float minAxisx = ((Float)0.0);
HXLINE(2699)		Float minAxisy = ((Float)0.0);
HXLINE(2700)		{
HXLINE(2701)			minAxisx = ( (Float)(0) );
HXLINE(2702)			minAxisy = ( (Float)(0) );
            		}
HXLINE(2720)		Float minPosx = ((Float)0.0);
HXLINE(2721)		Float minPosy = ((Float)0.0);
HXLINE(2722)		{
HXLINE(2723)			minPosx = ( (Float)(0) );
HXLINE(2724)			minPosy = ( (Float)(0) );
            		}
HXLINE(2742)		 ::nape::shape::Shape mins = null();
HXLINE(2743)		Float mint = (deltaTime + 1);
HXLINE(2744)		{
HXLINE(2744)			list1->zpp_inner->valmod();
HXDLIN(2744)			 ::nape::shape::ShapeIterator _g = ::nape::shape::ShapeIterator_obj::get(list1);
HXDLIN(2744)			while(true){
HXLINE(2744)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2744)				 ::nape::shape::ShapeList _this18 = _g->zpp_inner;
HXDLIN(2744)				_this18->zpp_inner->valmod();
HXDLIN(2744)				if (_this18->zpp_inner->zip_length) {
HXLINE(2744)					_this18->zpp_inner->zip_length = false;
HXDLIN(2744)					_this18->zpp_inner->user_length = _this18->zpp_inner->inner->length;
            				}
HXDLIN(2744)				int length = _this18->zpp_inner->user_length;
HXDLIN(2744)				_g->zpp_critical = true;
HXDLIN(2744)				bool _hx_tmp4;
HXDLIN(2744)				if ((_g->zpp_i < length)) {
HXLINE(2744)					_hx_tmp4 = true;
            				}
            				else {
HXLINE(2744)					{
HXLINE(2744)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN(2744)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN(2744)						_g->zpp_inner = null();
            					}
HXDLIN(2744)					_hx_tmp4 = false;
            				}
HXDLIN(2744)				if (!(_hx_tmp4)) {
HXLINE(2744)					goto _hx_goto_95;
            				}
HXDLIN(2744)				_g->zpp_critical = false;
HXDLIN(2744)				 ::nape::shape::Shape s = _g->zpp_inner->at(_g->zpp_i++);
HXLINE(2745)				bool _hx_tmp5;
HXDLIN(2745)				if (hx::IsNotEq( s,shape->outer )) {
HXLINE(2745)					 ::nape::phys::Body _hx_tmp6;
HXDLIN(2745)					if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2745)						_hx_tmp6 = s->zpp_inner->body->outer;
            					}
            					else {
HXLINE(2745)						_hx_tmp6 = null();
            					}
HXDLIN(2745)					_hx_tmp5 = hx::IsNotEq( _hx_tmp6,body->outer );
            				}
            				else {
HXLINE(2745)					_hx_tmp5 = false;
            				}
HXDLIN(2745)				if (_hx_tmp5) {
HXLINE(2746)					toi->s1 = shape;
HXLINE(2747)					toi->s2 = s->zpp_inner;
HXLINE(2748)					if (dynamics) {
HXLINE(2749)						s->zpp_inner->validate_sweepRadius();
HXLINE(2750)						 ::nape::phys::Body _hx_tmp7;
HXDLIN(2750)						if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2750)							_hx_tmp7 = s->zpp_inner->body->outer;
            						}
            						else {
HXLINE(2750)							_hx_tmp7 = null();
            						}
HXDLIN(2750)						 ::nape::phys::Body _hx_tmp8;
HXDLIN(2750)						if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2750)							_hx_tmp8 = s->zpp_inner->body->outer;
            						}
            						else {
HXLINE(2750)							_hx_tmp8 = null();
            						}
HXDLIN(2750)						_hx_tmp7->zpp_inner->sweep_angvel = _hx_tmp8->zpp_inner->angvel;
HXLINE(2751)						 ::nape::phys::Body _hx_tmp9;
HXDLIN(2751)						if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2751)							_hx_tmp9 = s->zpp_inner->body->outer;
            						}
            						else {
HXLINE(2751)							_hx_tmp9 = null();
            						}
HXDLIN(2751)						_hx_tmp9->zpp_inner->sweepTime = ( (Float)(0) );
HXLINE(2752)						::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,deltaTime,( (Float)(0) ),( (Float)(0) ),true);
HXLINE(2753)						{
HXLINE(2753)							 ::nape::phys::Body _this19;
HXDLIN(2753)							if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2753)								_this19 = s->zpp_inner->body->outer;
            							}
            							else {
HXLINE(2753)								_this19 = null();
            							}
HXDLIN(2753)							 ::zpp_nape::phys::ZPP_Body _this20 = _this19->zpp_inner;
HXDLIN(2753)							Float delta1 = (( (Float)(0) ) - _this20->sweepTime);
HXDLIN(2753)							if ((delta1 != 0)) {
HXLINE(2753)								_this20->sweepTime = ( (Float)(0) );
HXDLIN(2753)								{
HXLINE(2753)									Float t4 = delta1;
HXDLIN(2753)									 ::zpp_nape::phys::ZPP_Body _this21 = _this20;
HXDLIN(2753)									_this21->posx = (_this21->posx + (_this20->velx * t4));
HXDLIN(2753)									 ::zpp_nape::phys::ZPP_Body _this22 = _this20;
HXDLIN(2753)									_this22->posy = (_this22->posy + (_this20->vely * t4));
            								}
HXDLIN(2753)								if ((_this20->angvel != 0)) {
HXLINE(2753)									Float dr1 = (_this20->sweep_angvel * delta1);
HXDLIN(2753)									 ::zpp_nape::phys::ZPP_Body _this23 = _this20;
HXDLIN(2753)									_this23->rot = (_this23->rot + dr1);
HXDLIN(2753)									if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(2753)										_this20->axisx = ::Math_obj::sin(_this20->rot);
HXDLIN(2753)										_this20->axisy = ::Math_obj::cos(_this20->rot);
            									}
            									else {
HXLINE(2753)										Float d21 = (dr1 * dr1);
HXDLIN(2753)										Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(2753)										Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(2753)										Float nx1 = (((p1 * _this20->axisx) + (dr1 * _this20->axisy)) * m1);
HXDLIN(2753)										_this20->axisy = (((p1 * _this20->axisy) - (dr1 * _this20->axisx)) * m1);
HXDLIN(2753)										_this20->axisx = nx1;
            									}
            								}
            							}
            						}
HXLINE(2754)						{
HXLINE(2754)							 ::nape::phys::Body _this24;
HXDLIN(2754)							if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2754)								_this24 = s->zpp_inner->body->outer;
            							}
            							else {
HXLINE(2754)								_this24 = null();
            							}
HXDLIN(2754)							 ::zpp_nape::phys::ZPP_Body _this25 = _this24->zpp_inner;
HXDLIN(2754)							 ::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;
HXDLIN(2754)							if ((s1->type == 0)) {
HXLINE(2754)								s1->worldCOMx = (_this25->posx + ((_this25->axisy * s1->localCOMx) - (_this25->axisx * s1->localCOMy)));
HXDLIN(2754)								s1->worldCOMy = (_this25->posy + ((s1->localCOMx * _this25->axisx) + (s1->localCOMy * _this25->axisy)));
            							}
            							else {
HXLINE(2754)								 ::zpp_nape::shape::ZPP_Polygon p2 = s1->polygon;
HXDLIN(2754)								 ::zpp_nape::geom::ZPP_Vec2 li1 = p2->lverts->next;
HXDLIN(2754)								{
HXLINE(2754)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = p2->gverts->next;
HXDLIN(2754)									while(hx::IsNotNull( cx_ite3 )){
HXLINE(2754)										 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite3;
HXDLIN(2754)										{
HXLINE(2754)											 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN(2754)											li1 = li1->next;
HXDLIN(2754)											{
HXLINE(2754)												g1->x = (_this25->posx + ((_this25->axisy * l1->x) - (_this25->axisx * l1->y)));
HXDLIN(2754)												g1->y = (_this25->posy + ((l1->x * _this25->axisx) + (l1->y * _this25->axisy)));
            											}
            										}
HXDLIN(2754)										cx_ite3 = cx_ite3->next;
            									}
            								}
HXDLIN(2754)								 ::zpp_nape::util::ZNPNode_ZPP_Edge ite1 = p2->edges->head;
HXDLIN(2754)								{
HXLINE(2754)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = p2->gverts->next;
HXDLIN(2754)									 ::zpp_nape::geom::ZPP_Vec2 u2 = cx_ite4;
HXDLIN(2754)									cx_ite4 = cx_ite4->next;
HXDLIN(2754)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(2754)										 ::zpp_nape::geom::ZPP_Vec2 v3 = cx_ite4;
HXDLIN(2754)										{
HXLINE(2754)											 ::zpp_nape::shape::ZPP_Edge e2 = ite1->elt;
HXDLIN(2754)											ite1 = ite1->next;
HXDLIN(2754)											{
HXLINE(2754)												e2->gnormx = ((_this25->axisy * e2->lnormx) - (_this25->axisx * e2->lnormy));
HXDLIN(2754)												e2->gnormy = ((e2->lnormx * _this25->axisx) + (e2->lnormy * _this25->axisy));
            											}
HXDLIN(2754)											e2->gprojection = (((_this25->posx * e2->gnormx) + (_this25->posy * e2->gnormy)) + e2->lprojection);
HXDLIN(2754)											e2->tp0 = ((u2->y * e2->gnormx) - (u2->x * e2->gnormy));
HXDLIN(2754)											e2->tp1 = ((v3->y * e2->gnormx) - (v3->x * e2->gnormy));
            										}
HXDLIN(2754)										u2 = v3;
HXDLIN(2754)										cx_ite4 = cx_ite4->next;
            									}
HXDLIN(2754)									 ::zpp_nape::geom::ZPP_Vec2 v4 = p2->gverts->next;
HXDLIN(2754)									{
HXLINE(2754)										 ::zpp_nape::shape::ZPP_Edge e3 = ite1->elt;
HXDLIN(2754)										ite1 = ite1->next;
HXDLIN(2754)										{
HXLINE(2754)											e3->gnormx = ((_this25->axisy * e3->lnormx) - (_this25->axisx * e3->lnormy));
HXDLIN(2754)											e3->gnormy = ((e3->lnormx * _this25->axisx) + (e3->lnormy * _this25->axisy));
            										}
HXDLIN(2754)										e3->gprojection = (((_this25->posx * e3->gnormx) + (_this25->posy * e3->gnormy)) + e3->lprojection);
HXDLIN(2754)										e3->tp0 = ((u2->y * e3->gnormx) - (u2->x * e3->gnormy));
HXDLIN(2754)										e3->tp1 = ((v4->y * e3->gnormx) - (v4->x * e3->gnormy));
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE(2757)						::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,( (Float)(0) ),( (Float)(0) ));
            					}
HXLINE(2759)					 ::zpp_nape::geom::ZPP_ToiEvent toi1 = toi;
HXDLIN(2759)					toi1->toi = (toi1->toi * deltaTime);
HXLINE(2760)					bool _hx_tmp10;
HXDLIN(2760)					if ((toi->toi > 0)) {
HXLINE(2760)						_hx_tmp10 = (toi->toi < mint);
            					}
            					else {
HXLINE(2760)						_hx_tmp10 = false;
            					}
HXDLIN(2760)					if (_hx_tmp10) {
HXLINE(2761)						mint = toi->toi;
HXLINE(2762)						{
HXLINE(2763)							minAxisx = toi->axis->x;
HXLINE(2764)							minAxisy = toi->axis->y;
            						}
HXLINE(2782)						{
HXLINE(2783)							minPosx = toi->c2->x;
HXLINE(2784)							minPosy = toi->c2->y;
            						}
HXLINE(2802)						mins = s;
            					}
            				}
            			}
            			_hx_goto_95:;
            		}
HXLINE(2806)		list1->clear();
HXLINE(2807)		{
HXLINE(2808)			 ::zpp_nape::geom::ZPP_ToiEvent o1 = toi;
HXLINE(2818)			o1->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(2819)			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o1;
            		}
HXLINE(2824)		{
HXLINE(2824)			Float delta2 = (( (Float)(0) ) - body->sweepTime);
HXDLIN(2824)			if ((delta2 != 0)) {
HXLINE(2824)				body->sweepTime = ( (Float)(0) );
HXDLIN(2824)				{
HXLINE(2824)					Float t5 = delta2;
HXDLIN(2824)					 ::zpp_nape::phys::ZPP_Body body4 = body;
HXDLIN(2824)					body4->posx = (body4->posx + (body->velx * t5));
HXDLIN(2824)					 ::zpp_nape::phys::ZPP_Body body5 = body;
HXDLIN(2824)					body5->posy = (body5->posy + (body->vely * t5));
            				}
HXDLIN(2824)				if ((body->angvel != 0)) {
HXLINE(2824)					Float dr2 = (body->sweep_angvel * delta2);
HXDLIN(2824)					 ::zpp_nape::phys::ZPP_Body body6 = body;
HXDLIN(2824)					body6->rot = (body6->rot + dr2);
HXDLIN(2824)					if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(2824)						body->axisx = ::Math_obj::sin(body->rot);
HXDLIN(2824)						body->axisy = ::Math_obj::cos(body->rot);
            					}
            					else {
HXLINE(2824)						Float d22 = (dr2 * dr2);
HXDLIN(2824)						Float p3 = (( (Float)(1) ) - (((Float)0.5) * d22));
HXDLIN(2824)						Float m2 = (( (Float)(1) ) - ((d22 * d22) / ( (Float)(8) )));
HXDLIN(2824)						Float nx2 = (((p3 * body->axisx) + (dr2 * body->axisy)) * m2);
HXDLIN(2824)						body->axisy = (((p3 * body->axisy) - (dr2 * body->axisx)) * m2);
HXDLIN(2824)						body->axisx = nx2;
            					}
            				}
            			}
            		}
HXLINE(2825)		if ((shape->type == 0)) {
HXLINE(2825)			shape->worldCOMx = (body->posx + ((body->axisy * shape->localCOMx) - (body->axisx * shape->localCOMy)));
HXDLIN(2825)			shape->worldCOMy = (body->posy + ((shape->localCOMx * body->axisx) + (shape->localCOMy * body->axisy)));
            		}
            		else {
HXLINE(2825)			 ::zpp_nape::shape::ZPP_Polygon p4 = shape->polygon;
HXDLIN(2825)			 ::zpp_nape::geom::ZPP_Vec2 li2 = p4->lverts->next;
HXDLIN(2825)			{
HXLINE(2825)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite5 = p4->gverts->next;
HXDLIN(2825)				while(hx::IsNotNull( cx_ite5 )){
HXLINE(2825)					 ::zpp_nape::geom::ZPP_Vec2 g2 = cx_ite5;
HXDLIN(2825)					{
HXLINE(2825)						 ::zpp_nape::geom::ZPP_Vec2 l2 = li2;
HXDLIN(2825)						li2 = li2->next;
HXDLIN(2825)						{
HXLINE(2825)							g2->x = (body->posx + ((body->axisy * l2->x) - (body->axisx * l2->y)));
HXDLIN(2825)							g2->y = (body->posy + ((l2->x * body->axisx) + (l2->y * body->axisy)));
            						}
            					}
HXDLIN(2825)					cx_ite5 = cx_ite5->next;
            				}
            			}
HXDLIN(2825)			 ::zpp_nape::util::ZNPNode_ZPP_Edge ite2 = p4->edges->head;
HXDLIN(2825)			{
HXLINE(2825)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite6 = p4->gverts->next;
HXDLIN(2825)				 ::zpp_nape::geom::ZPP_Vec2 u3 = cx_ite6;
HXDLIN(2825)				cx_ite6 = cx_ite6->next;
HXDLIN(2825)				while(hx::IsNotNull( cx_ite6 )){
HXLINE(2825)					 ::zpp_nape::geom::ZPP_Vec2 v5 = cx_ite6;
HXDLIN(2825)					{
HXLINE(2825)						 ::zpp_nape::shape::ZPP_Edge e4 = ite2->elt;
HXDLIN(2825)						ite2 = ite2->next;
HXDLIN(2825)						{
HXLINE(2825)							e4->gnormx = ((body->axisy * e4->lnormx) - (body->axisx * e4->lnormy));
HXDLIN(2825)							e4->gnormy = ((e4->lnormx * body->axisx) + (e4->lnormy * body->axisy));
            						}
HXDLIN(2825)						e4->gprojection = (((body->posx * e4->gnormx) + (body->posy * e4->gnormy)) + e4->lprojection);
HXDLIN(2825)						e4->tp0 = ((u3->y * e4->gnormx) - (u3->x * e4->gnormy));
HXDLIN(2825)						e4->tp1 = ((v5->y * e4->gnormx) - (v5->x * e4->gnormy));
            					}
HXDLIN(2825)					u3 = v5;
HXDLIN(2825)					cx_ite6 = cx_ite6->next;
            				}
HXDLIN(2825)				 ::zpp_nape::geom::ZPP_Vec2 v6 = p4->gverts->next;
HXDLIN(2825)				{
HXLINE(2825)					 ::zpp_nape::shape::ZPP_Edge e5 = ite2->elt;
HXDLIN(2825)					ite2 = ite2->next;
HXDLIN(2825)					{
HXLINE(2825)						e5->gnormx = ((body->axisy * e5->lnormx) - (body->axisx * e5->lnormy));
HXDLIN(2825)						e5->gnormy = ((e5->lnormx * body->axisx) + (e5->lnormy * body->axisy));
            					}
HXDLIN(2825)					e5->gprojection = (((body->posx * e5->gnormx) + (body->posy * e5->gnormy)) + e5->lprojection);
HXDLIN(2825)					e5->tp0 = ((u3->y * e5->gnormx) - (u3->x * e5->gnormy));
HXDLIN(2825)					e5->tp1 = ((v6->y * e5->gnormx) - (v6->x * e5->gnormy));
            				}
            			}
            		}
HXLINE(2826)		if ((mint <= deltaTime)) {
HXLINE(2827)			Float x4 = -(minAxisx);
HXDLIN(2827)			Float y4 = -(minAxisy);
HXDLIN(2827)			bool _hx_tmp11;
HXDLIN(2827)			if ((x4 == x4)) {
HXLINE(2827)				_hx_tmp11 = (y4 != y4);
            			}
            			else {
HXLINE(2827)				_hx_tmp11 = true;
            			}
HXDLIN(2827)			if (_hx_tmp11) {
HXLINE(2827)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(2827)			 ::nape::geom::Vec2 ret;
HXDLIN(2827)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2827)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(2827)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2827)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(2827)				ret->zpp_pool = null();
HXDLIN(2827)				ret->zpp_disp = false;
HXDLIN(2827)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2827)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(2827)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(2827)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(2827)				{
HXLINE(2827)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2827)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2827)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2827)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(2827)						ret1->next = null();
            					}
HXDLIN(2827)					ret1->weak = false;
            				}
HXDLIN(2827)				ret1->_immutable = false;
HXDLIN(2827)				{
HXLINE(2827)					ret1->x = x4;
HXDLIN(2827)					ret1->y = y4;
            				}
HXDLIN(2827)				ret->zpp_inner = ret1;
HXDLIN(2827)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(2827)				bool _hx_tmp12;
HXDLIN(2827)				if (hx::IsNotNull( ret )) {
HXLINE(2827)					_hx_tmp12 = ret->zpp_disp;
            				}
            				else {
HXLINE(2827)					_hx_tmp12 = false;
            				}
HXDLIN(2827)				if (_hx_tmp12) {
HXLINE(2827)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2827)				{
HXLINE(2827)					 ::zpp_nape::geom::ZPP_Vec2 _this26 = ret->zpp_inner;
HXDLIN(2827)					if (_this26->_immutable) {
HXLINE(2827)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(2827)					if (hx::IsNotNull( _this26->_isimmutable )) {
HXLINE(2827)						_this26->_isimmutable();
            					}
            				}
HXDLIN(2827)				bool _hx_tmp13;
HXDLIN(2827)				if ((x4 == x4)) {
HXLINE(2827)					_hx_tmp13 = (y4 != y4);
            				}
            				else {
HXLINE(2827)					_hx_tmp13 = true;
            				}
HXDLIN(2827)				if (_hx_tmp13) {
HXLINE(2827)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(2827)				bool _hx_tmp14;
HXDLIN(2827)				bool _hx_tmp15;
HXDLIN(2827)				if (hx::IsNotNull( ret )) {
HXLINE(2827)					_hx_tmp15 = ret->zpp_disp;
            				}
            				else {
HXLINE(2827)					_hx_tmp15 = false;
            				}
HXDLIN(2827)				if (_hx_tmp15) {
HXLINE(2827)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2827)				{
HXLINE(2827)					 ::zpp_nape::geom::ZPP_Vec2 _this27 = ret->zpp_inner;
HXDLIN(2827)					if (hx::IsNotNull( _this27->_validate )) {
HXLINE(2827)						_this27->_validate();
            					}
            				}
HXDLIN(2827)				if ((ret->zpp_inner->x == x4)) {
HXLINE(2827)					bool _hx_tmp16;
HXDLIN(2827)					if (hx::IsNotNull( ret )) {
HXLINE(2827)						_hx_tmp16 = ret->zpp_disp;
            					}
            					else {
HXLINE(2827)						_hx_tmp16 = false;
            					}
HXDLIN(2827)					if (_hx_tmp16) {
HXLINE(2827)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(2827)					{
HXLINE(2827)						 ::zpp_nape::geom::ZPP_Vec2 _this28 = ret->zpp_inner;
HXDLIN(2827)						if (hx::IsNotNull( _this28->_validate )) {
HXLINE(2827)							_this28->_validate();
            						}
            					}
HXDLIN(2827)					_hx_tmp14 = (ret->zpp_inner->y == y4);
            				}
            				else {
HXLINE(2827)					_hx_tmp14 = false;
            				}
HXDLIN(2827)				if (!(_hx_tmp14)) {
HXLINE(2827)					{
HXLINE(2827)						ret->zpp_inner->x = x4;
HXDLIN(2827)						ret->zpp_inner->y = y4;
            					}
HXDLIN(2827)					{
HXLINE(2827)						 ::zpp_nape::geom::ZPP_Vec2 _this29 = ret->zpp_inner;
HXDLIN(2827)						if (hx::IsNotNull( _this29->_invalidate )) {
HXLINE(2827)							_this29->_invalidate(_this29);
            						}
            					}
            				}
            			}
HXDLIN(2827)			ret->zpp_inner->weak = false;
HXDLIN(2827)			bool _hx_tmp17;
HXDLIN(2827)			if ((minPosx == minPosx)) {
HXLINE(2827)				_hx_tmp17 = (minPosy != minPosy);
            			}
            			else {
HXLINE(2827)				_hx_tmp17 = true;
            			}
HXDLIN(2827)			if (_hx_tmp17) {
HXLINE(2827)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(2827)			 ::nape::geom::Vec2 ret2;
HXDLIN(2827)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2827)				ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(2827)				ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2827)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN(2827)				ret2->zpp_pool = null();
HXDLIN(2827)				ret2->zpp_disp = false;
HXDLIN(2827)				if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2827)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(2827)			if (hx::IsNull( ret2->zpp_inner )) {
HXLINE(2827)				 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN(2827)				{
HXLINE(2827)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2827)						ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2827)						ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2827)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN(2827)						ret3->next = null();
            					}
HXDLIN(2827)					ret3->weak = false;
            				}
HXDLIN(2827)				ret3->_immutable = false;
HXDLIN(2827)				{
HXLINE(2827)					ret3->x = minPosx;
HXDLIN(2827)					ret3->y = minPosy;
            				}
HXDLIN(2827)				ret2->zpp_inner = ret3;
HXDLIN(2827)				ret2->zpp_inner->outer = ret2;
            			}
            			else {
HXLINE(2827)				bool _hx_tmp18;
HXDLIN(2827)				if (hx::IsNotNull( ret2 )) {
HXLINE(2827)					_hx_tmp18 = ret2->zpp_disp;
            				}
            				else {
HXLINE(2827)					_hx_tmp18 = false;
            				}
HXDLIN(2827)				if (_hx_tmp18) {
HXLINE(2827)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2827)				{
HXLINE(2827)					 ::zpp_nape::geom::ZPP_Vec2 _this30 = ret2->zpp_inner;
HXDLIN(2827)					if (_this30->_immutable) {
HXLINE(2827)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(2827)					if (hx::IsNotNull( _this30->_isimmutable )) {
HXLINE(2827)						_this30->_isimmutable();
            					}
            				}
HXDLIN(2827)				bool _hx_tmp19;
HXDLIN(2827)				if ((minPosx == minPosx)) {
HXLINE(2827)					_hx_tmp19 = (minPosy != minPosy);
            				}
            				else {
HXLINE(2827)					_hx_tmp19 = true;
            				}
HXDLIN(2827)				if (_hx_tmp19) {
HXLINE(2827)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(2827)				bool _hx_tmp20;
HXDLIN(2827)				bool _hx_tmp21;
HXDLIN(2827)				if (hx::IsNotNull( ret2 )) {
HXLINE(2827)					_hx_tmp21 = ret2->zpp_disp;
            				}
            				else {
HXLINE(2827)					_hx_tmp21 = false;
            				}
HXDLIN(2827)				if (_hx_tmp21) {
HXLINE(2827)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(2827)				{
HXLINE(2827)					 ::zpp_nape::geom::ZPP_Vec2 _this31 = ret2->zpp_inner;
HXDLIN(2827)					if (hx::IsNotNull( _this31->_validate )) {
HXLINE(2827)						_this31->_validate();
            					}
            				}
HXDLIN(2827)				if ((ret2->zpp_inner->x == minPosx)) {
HXLINE(2827)					bool _hx_tmp22;
HXDLIN(2827)					if (hx::IsNotNull( ret2 )) {
HXLINE(2827)						_hx_tmp22 = ret2->zpp_disp;
            					}
            					else {
HXLINE(2827)						_hx_tmp22 = false;
            					}
HXDLIN(2827)					if (_hx_tmp22) {
HXLINE(2827)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(2827)					{
HXLINE(2827)						 ::zpp_nape::geom::ZPP_Vec2 _this32 = ret2->zpp_inner;
HXDLIN(2827)						if (hx::IsNotNull( _this32->_validate )) {
HXLINE(2827)							_this32->_validate();
            						}
            					}
HXDLIN(2827)					_hx_tmp20 = (ret2->zpp_inner->y == minPosy);
            				}
            				else {
HXLINE(2827)					_hx_tmp20 = false;
            				}
HXDLIN(2827)				if (!(_hx_tmp20)) {
HXLINE(2827)					{
HXLINE(2827)						ret2->zpp_inner->x = minPosx;
HXDLIN(2827)						ret2->zpp_inner->y = minPosy;
            					}
HXDLIN(2827)					{
HXLINE(2827)						 ::zpp_nape::geom::ZPP_Vec2 _this33 = ret2->zpp_inner;
HXDLIN(2827)						if (hx::IsNotNull( _this33->_invalidate )) {
HXLINE(2827)							_this33->_invalidate(_this33);
            						}
            					}
            				}
            			}
HXDLIN(2827)			ret2->zpp_inner->weak = false;
HXDLIN(2827)			return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(ret,ret2,mint,mins);
            		}
            		else {
HXLINE(2829)			return null();
            		}
HXLINE(2826)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,convexCast,return )

void ZPP_Space_obj::prepareCast( ::zpp_nape::shape::ZPP_Shape s){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_2834_prepareCast)
HXDLIN(2834)		if ((s->type == 0)) {
HXDLIN(2834)			 ::zpp_nape::shape::ZPP_Circle _this = s->circle;
HXDLIN(2834)			if (_this->zip_worldCOM) {
HXDLIN(2834)				if (hx::IsNotNull( _this->body )) {
HXDLIN(2834)					_this->zip_worldCOM = false;
HXDLIN(2834)					if (_this->zip_localCOM) {
HXDLIN(2834)						_this->zip_localCOM = false;
HXDLIN(2834)						if ((_this->type == 1)) {
HXDLIN(2834)							 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN(2834)							if (hx::IsNull( _this1->lverts->next )) {
HXDLIN(2834)								HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            							}
HXDLIN(2834)							if (hx::IsNull( _this1->lverts->next->next )) {
HXDLIN(2834)								_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(2834)								_this1->localCOMy = _this1->lverts->next->y;
            							}
            							else {
HXDLIN(2834)								if (hx::IsNull( _this1->lverts->next->next->next )) {
HXDLIN(2834)									{
HXDLIN(2834)										_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(2834)										_this1->localCOMy = _this1->lverts->next->y;
            									}
HXDLIN(2834)									{
HXDLIN(2834)										Float t = ((Float)1.0);
HXDLIN(2834)										 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN(2834)										_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN(2834)										 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN(2834)										_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            									}
HXDLIN(2834)									{
HXDLIN(2834)										Float t1 = ((Float)0.5);
HXDLIN(2834)										 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN(2834)										_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN(2834)										 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN(2834)										_this5->localCOMy = (_this5->localCOMy * t1);
            									}
            								}
            								else {
HXDLIN(2834)									{
HXDLIN(2834)										_this1->localCOMx = ( (Float)(0) );
HXDLIN(2834)										_this1->localCOMy = ( (Float)(0) );
            									}
HXDLIN(2834)									Float area = ((Float)0.0);
HXDLIN(2834)									{
HXDLIN(2834)										 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN(2834)										 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(2834)										cx_ite = cx_ite->next;
HXDLIN(2834)										 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(2834)										cx_ite = cx_ite->next;
HXDLIN(2834)										while(hx::IsNotNull( cx_ite )){
HXDLIN(2834)											 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(2834)											{
HXDLIN(2834)												area = (area + (v->x * (w->y - u->y)));
HXDLIN(2834)												Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(2834)												 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN(2834)												_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN(2834)												 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN(2834)												_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            											}
HXDLIN(2834)											u = v;
HXDLIN(2834)											v = w;
HXDLIN(2834)											cx_ite = cx_ite->next;
            										}
HXDLIN(2834)										cx_ite = _this1->lverts->next;
HXDLIN(2834)										 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(2834)										{
HXDLIN(2834)											area = (area + (v->x * (w1->y - u->y)));
HXDLIN(2834)											Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(2834)											 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN(2834)											_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(2834)											 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN(2834)											_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            										}
HXDLIN(2834)										u = v;
HXDLIN(2834)										v = w1;
HXDLIN(2834)										cx_ite = cx_ite->next;
HXDLIN(2834)										 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(2834)										{
HXDLIN(2834)											area = (area + (v->x * (w2->y - u->y)));
HXDLIN(2834)											Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(2834)											 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN(2834)											_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(2834)											 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN(2834)											_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            										}
            									}
HXDLIN(2834)									area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(2834)									{
HXDLIN(2834)										Float t2 = area;
HXDLIN(2834)										 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN(2834)										_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN(2834)										 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN(2834)										_this13->localCOMy = (_this13->localCOMy * t2);
            									}
            								}
            							}
            						}
HXDLIN(2834)						if (hx::IsNotNull( _this->wrap_localCOM )) {
HXDLIN(2834)							_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(2834)							_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            						}
            					}
HXDLIN(2834)					{
HXDLIN(2834)						 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN(2834)						if (_this14->zip_axis) {
HXDLIN(2834)							_this14->zip_axis = false;
HXDLIN(2834)							{
HXDLIN(2834)								_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN(2834)								_this14->axisy = ::Math_obj::cos(_this14->rot);
            							}
            						}
            					}
HXDLIN(2834)					{
HXDLIN(2834)						_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(2834)						_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            					}
            				}
            			}
            		}
            		else {
HXLINE(2835)			 ::zpp_nape::shape::ZPP_Polygon _this15 = s->polygon;
HXDLIN(2835)			if (_this15->zip_gaxi) {
HXLINE(2835)				if (hx::IsNotNull( _this15->body )) {
HXLINE(2835)					_this15->zip_gaxi = false;
HXDLIN(2835)					_this15->validate_laxi();
HXDLIN(2835)					{
HXLINE(2835)						 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN(2835)						if (_this16->zip_axis) {
HXLINE(2835)							_this16->zip_axis = false;
HXDLIN(2835)							{
HXLINE(2835)								_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN(2835)								_this16->axisy = ::Math_obj::cos(_this16->rot);
            							}
            						}
            					}
HXDLIN(2835)					if (_this15->zip_gverts) {
HXLINE(2835)						if (hx::IsNotNull( _this15->body )) {
HXLINE(2835)							_this15->zip_gverts = false;
HXDLIN(2835)							_this15->validate_lverts();
HXDLIN(2835)							{
HXLINE(2835)								 ::zpp_nape::phys::ZPP_Body _this17 = _this15->body;
HXDLIN(2835)								if (_this17->zip_axis) {
HXLINE(2835)									_this17->zip_axis = false;
HXDLIN(2835)									{
HXLINE(2835)										_this17->axisx = ::Math_obj::sin(_this17->rot);
HXDLIN(2835)										_this17->axisy = ::Math_obj::cos(_this17->rot);
            									}
            								}
            							}
HXDLIN(2835)							 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN(2835)							{
HXLINE(2835)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN(2835)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(2835)									 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN(2835)									{
HXLINE(2835)										 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(2835)										li = li->next;
HXDLIN(2835)										{
HXLINE(2835)											g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN(2835)											g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            										}
            									}
HXDLIN(2835)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
            					}
HXDLIN(2835)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this15->edges->head;
HXDLIN(2835)					{
HXLINE(2835)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next;
HXDLIN(2835)						 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite2;
HXDLIN(2835)						cx_ite2 = cx_ite2->next;
HXDLIN(2835)						while(hx::IsNotNull( cx_ite2 )){
HXLINE(2835)							 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite2;
HXDLIN(2835)							{
HXLINE(2835)								 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN(2835)								ite = ite->next;
HXDLIN(2835)								e->gp0 = u1;
HXDLIN(2835)								e->gp1 = v1;
HXDLIN(2835)								{
HXLINE(2835)									e->gnormx = ((_this15->body->axisy * e->lnormx) - (_this15->body->axisx * e->lnormy));
HXDLIN(2835)									e->gnormy = ((e->lnormx * _this15->body->axisx) + (e->lnormy * _this15->body->axisy));
            								}
HXDLIN(2835)								e->gprojection = (((_this15->body->posx * e->gnormx) + (_this15->body->posy * e->gnormy)) + e->lprojection);
HXDLIN(2835)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE(2835)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN(2835)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN(2835)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN(2835)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN(2835)							u1 = v1;
HXDLIN(2835)							cx_ite2 = cx_ite2->next;
            						}
HXDLIN(2835)						 ::zpp_nape::geom::ZPP_Vec2 v2 = _this15->gverts->next;
HXDLIN(2835)						{
HXLINE(2835)							 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN(2835)							ite = ite->next;
HXDLIN(2835)							e1->gp0 = u1;
HXDLIN(2835)							e1->gp1 = v2;
HXDLIN(2835)							{
HXLINE(2835)								e1->gnormx = ((_this15->body->axisy * e1->lnormx) - (_this15->body->axisx * e1->lnormy));
HXDLIN(2835)								e1->gnormy = ((e1->lnormx * _this15->body->axisx) + (e1->lnormy * _this15->body->axisy));
            							}
HXDLIN(2835)							e1->gprojection = (((_this15->body->posx * e1->gnormx) + (_this15->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN(2835)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE(2835)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN(2835)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN(2835)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN(2835)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prepareCast,(void))

 ::nape::geom::ConvexResultList ZPP_Space_obj::convexMultiCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime, ::nape::dynamics::InteractionFilter filter,bool dynamics, ::nape::geom::ConvexResultList output){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_2837_convexMultiCast)
HXLINE(2838)		 ::zpp_nape::geom::ZPP_ToiEvent toi;
HXLINE(2839)		{
HXLINE(2840)			if (hx::IsNull( ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(2841)				toi =  ::zpp_nape::geom::ZPP_ToiEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2847)				toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(2848)				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
HXLINE(2849)				toi->next = null();
            			}
HXLINE(2854)			{
HXLINE(2854)				toi->failed = false;
HXDLIN(2854)				toi->s1 = (toi->s2 = null());
HXDLIN(2854)				toi->arbiter = null();
            			}
            		}
HXLINE(2856)		if ((shape->type == 0)) {
HXLINE(2856)			 ::zpp_nape::shape::ZPP_Circle _this = shape->circle;
HXDLIN(2856)			if (_this->zip_worldCOM) {
HXLINE(2856)				if (hx::IsNotNull( _this->body )) {
HXLINE(2856)					_this->zip_worldCOM = false;
HXDLIN(2856)					if (_this->zip_localCOM) {
HXLINE(2856)						_this->zip_localCOM = false;
HXDLIN(2856)						if ((_this->type == 1)) {
HXLINE(2856)							 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN(2856)							if (hx::IsNull( _this1->lverts->next )) {
HXLINE(2856)								HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            							}
HXDLIN(2856)							if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE(2856)								_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(2856)								_this1->localCOMy = _this1->lverts->next->y;
            							}
            							else {
HXLINE(2856)								if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE(2856)									{
HXLINE(2856)										_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(2856)										_this1->localCOMy = _this1->lverts->next->y;
            									}
HXDLIN(2856)									{
HXLINE(2856)										Float t = ((Float)1.0);
HXDLIN(2856)										 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN(2856)										_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN(2856)										 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN(2856)										_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            									}
HXDLIN(2856)									{
HXLINE(2856)										Float t1 = ((Float)0.5);
HXDLIN(2856)										 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN(2856)										_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN(2856)										 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN(2856)										_this5->localCOMy = (_this5->localCOMy * t1);
            									}
            								}
            								else {
HXLINE(2856)									{
HXLINE(2856)										_this1->localCOMx = ( (Float)(0) );
HXDLIN(2856)										_this1->localCOMy = ( (Float)(0) );
            									}
HXDLIN(2856)									Float area = ((Float)0.0);
HXDLIN(2856)									{
HXLINE(2856)										 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN(2856)										 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(2856)										cx_ite = cx_ite->next;
HXDLIN(2856)										 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(2856)										cx_ite = cx_ite->next;
HXDLIN(2856)										while(hx::IsNotNull( cx_ite )){
HXLINE(2856)											 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(2856)											{
HXLINE(2856)												area = (area + (v->x * (w->y - u->y)));
HXDLIN(2856)												Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(2856)												 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN(2856)												_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN(2856)												 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN(2856)												_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            											}
HXDLIN(2856)											u = v;
HXDLIN(2856)											v = w;
HXDLIN(2856)											cx_ite = cx_ite->next;
            										}
HXDLIN(2856)										cx_ite = _this1->lverts->next;
HXDLIN(2856)										 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(2856)										{
HXLINE(2856)											area = (area + (v->x * (w1->y - u->y)));
HXDLIN(2856)											Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(2856)											 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN(2856)											_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(2856)											 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN(2856)											_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            										}
HXDLIN(2856)										u = v;
HXDLIN(2856)										v = w1;
HXDLIN(2856)										cx_ite = cx_ite->next;
HXDLIN(2856)										 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(2856)										{
HXLINE(2856)											area = (area + (v->x * (w2->y - u->y)));
HXDLIN(2856)											Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(2856)											 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN(2856)											_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(2856)											 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN(2856)											_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            										}
            									}
HXDLIN(2856)									area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(2856)									{
HXLINE(2856)										Float t2 = area;
HXDLIN(2856)										 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN(2856)										_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN(2856)										 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN(2856)										_this13->localCOMy = (_this13->localCOMy * t2);
            									}
            								}
            							}
            						}
HXDLIN(2856)						if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE(2856)							_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(2856)							_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            						}
            					}
HXDLIN(2856)					{
HXLINE(2856)						 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN(2856)						if (_this14->zip_axis) {
HXLINE(2856)							_this14->zip_axis = false;
HXDLIN(2856)							{
HXLINE(2856)								_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN(2856)								_this14->axisy = ::Math_obj::cos(_this14->rot);
            							}
            						}
            					}
HXDLIN(2856)					{
HXLINE(2856)						_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(2856)						_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            					}
            				}
            			}
            		}
            		else {
HXLINE(2856)			 ::zpp_nape::shape::ZPP_Polygon _this15 = shape->polygon;
HXDLIN(2856)			if (_this15->zip_gaxi) {
HXLINE(2856)				if (hx::IsNotNull( _this15->body )) {
HXLINE(2856)					_this15->zip_gaxi = false;
HXDLIN(2856)					_this15->validate_laxi();
HXDLIN(2856)					{
HXLINE(2856)						 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN(2856)						if (_this16->zip_axis) {
HXLINE(2856)							_this16->zip_axis = false;
HXDLIN(2856)							{
HXLINE(2856)								_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN(2856)								_this16->axisy = ::Math_obj::cos(_this16->rot);
            							}
            						}
            					}
HXDLIN(2856)					if (_this15->zip_gverts) {
HXLINE(2856)						if (hx::IsNotNull( _this15->body )) {
HXLINE(2856)							_this15->zip_gverts = false;
HXDLIN(2856)							_this15->validate_lverts();
HXDLIN(2856)							{
HXLINE(2856)								 ::zpp_nape::phys::ZPP_Body _this17 = _this15->body;
HXDLIN(2856)								if (_this17->zip_axis) {
HXLINE(2856)									_this17->zip_axis = false;
HXDLIN(2856)									{
HXLINE(2856)										_this17->axisx = ::Math_obj::sin(_this17->rot);
HXDLIN(2856)										_this17->axisy = ::Math_obj::cos(_this17->rot);
            									}
            								}
            							}
HXDLIN(2856)							 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN(2856)							{
HXLINE(2856)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN(2856)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(2856)									 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN(2856)									{
HXLINE(2856)										 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(2856)										li = li->next;
HXDLIN(2856)										{
HXLINE(2856)											g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN(2856)											g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            										}
            									}
HXDLIN(2856)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
            					}
HXDLIN(2856)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this15->edges->head;
HXDLIN(2856)					{
HXLINE(2856)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next;
HXDLIN(2856)						 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite2;
HXDLIN(2856)						cx_ite2 = cx_ite2->next;
HXDLIN(2856)						while(hx::IsNotNull( cx_ite2 )){
HXLINE(2856)							 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite2;
HXDLIN(2856)							{
HXLINE(2856)								 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN(2856)								ite = ite->next;
HXDLIN(2856)								e->gp0 = u1;
HXDLIN(2856)								e->gp1 = v1;
HXDLIN(2856)								{
HXLINE(2856)									e->gnormx = ((_this15->body->axisy * e->lnormx) - (_this15->body->axisx * e->lnormy));
HXDLIN(2856)									e->gnormy = ((e->lnormx * _this15->body->axisx) + (e->lnormy * _this15->body->axisy));
            								}
HXDLIN(2856)								e->gprojection = (((_this15->body->posx * e->gnormx) + (_this15->body->posy * e->gnormy)) + e->lprojection);
HXDLIN(2856)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE(2856)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN(2856)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN(2856)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN(2856)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN(2856)							u1 = v1;
HXDLIN(2856)							cx_ite2 = cx_ite2->next;
            						}
HXDLIN(2856)						 ::zpp_nape::geom::ZPP_Vec2 v2 = _this15->gverts->next;
HXDLIN(2856)						{
HXLINE(2856)							 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN(2856)							ite = ite->next;
HXDLIN(2856)							e1->gp0 = u1;
HXDLIN(2856)							e1->gp1 = v2;
HXDLIN(2856)							{
HXLINE(2856)								e1->gnormx = ((_this15->body->axisy * e1->lnormx) - (_this15->body->axisx * e1->lnormy));
HXDLIN(2856)								e1->gnormy = ((e1->lnormx * _this15->body->axisx) + (e1->lnormy * _this15->body->axisy));
            							}
HXDLIN(2856)							e1->gprojection = (((_this15->body->posx * e1->gnormx) + (_this15->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN(2856)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE(2856)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN(2856)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN(2856)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN(2856)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
HXLINE(2857)		 ::zpp_nape::phys::ZPP_Body body = shape->body;
HXLINE(2858)		Float prex = body->posx;
HXLINE(2859)		Float prey = body->posy;
HXLINE(2860)		body->sweepTime = ( (Float)(0) );
HXLINE(2861)		body->sweep_angvel = body->angvel;
HXLINE(2862)		{
HXLINE(2862)			Float delta = (deltaTime - body->sweepTime);
HXDLIN(2862)			if ((delta != 0)) {
HXLINE(2862)				body->sweepTime = deltaTime;
HXDLIN(2862)				{
HXLINE(2862)					Float t3 = delta;
HXDLIN(2862)					 ::zpp_nape::phys::ZPP_Body body1 = body;
HXDLIN(2862)					body1->posx = (body1->posx + (body->velx * t3));
HXDLIN(2862)					 ::zpp_nape::phys::ZPP_Body body2 = body;
HXDLIN(2862)					body2->posy = (body2->posy + (body->vely * t3));
            				}
HXDLIN(2862)				if ((body->angvel != 0)) {
HXLINE(2862)					Float dr = (body->sweep_angvel * delta);
HXDLIN(2862)					 ::zpp_nape::phys::ZPP_Body body3 = body;
HXDLIN(2862)					body3->rot = (body3->rot + dr);
HXDLIN(2862)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE(2862)						body->axisx = ::Math_obj::sin(body->rot);
HXDLIN(2862)						body->axisy = ::Math_obj::cos(body->rot);
            					}
            					else {
HXLINE(2862)						Float d2 = (dr * dr);
HXDLIN(2862)						Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(2862)						Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(2862)						Float nx = (((p * body->axisx) + (dr * body->axisy)) * m);
HXDLIN(2862)						body->axisy = (((p * body->axisy) - (dr * body->axisx)) * m);
HXDLIN(2862)						body->axisx = nx;
            					}
            				}
            			}
            		}
HXLINE(2863)		Float postx = body->posx;
HXLINE(2864)		Float posty = body->posy;
HXLINE(2865)		shape->validate_sweepRadius();
HXLINE(2866)		Float rad = shape->sweepRadius;
HXLINE(2867)		 ::zpp_nape::geom::ZPP_AABB aabb;
HXLINE(2869)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE(2870)			aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2876)			aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE(2877)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
HXLINE(2878)			aabb->next = null();
            		}
HXLINE(2886)		Float x = prex;
HXLINE(2887)		Float y = postx;
HXLINE(2885)		Float _hx_tmp;
HXLINE(2888)		if ((x < y)) {
HXLINE(2885)			_hx_tmp = x;
            		}
            		else {
HXLINE(2885)			_hx_tmp = y;
            		}
HXDLIN(2885)		aabb->minx = (_hx_tmp - rad);
HXLINE(2891)		Float x1 = prex;
HXLINE(2892)		Float y1 = postx;
HXLINE(2890)		Float _hx_tmp1;
HXLINE(2893)		if ((x1 > y1)) {
HXLINE(2890)			_hx_tmp1 = x1;
            		}
            		else {
HXLINE(2890)			_hx_tmp1 = y1;
            		}
HXDLIN(2890)		aabb->maxx = (_hx_tmp1 + rad);
HXLINE(2896)		Float x2 = prey;
HXLINE(2897)		Float y2 = posty;
HXLINE(2895)		Float _hx_tmp2;
HXLINE(2898)		if ((x2 < y2)) {
HXLINE(2895)			_hx_tmp2 = x2;
            		}
            		else {
HXLINE(2895)			_hx_tmp2 = y2;
            		}
HXDLIN(2895)		aabb->miny = (_hx_tmp2 - rad);
HXLINE(2901)		Float x3 = prey;
HXLINE(2902)		Float y3 = posty;
HXLINE(2900)		Float _hx_tmp3;
HXLINE(2903)		if ((x3 > y3)) {
HXLINE(2900)			_hx_tmp3 = x3;
            		}
            		else {
HXLINE(2900)			_hx_tmp3 = y3;
            		}
HXDLIN(2900)		aabb->maxy = (_hx_tmp3 + rad);
HXLINE(2905)		 ::zpp_nape::dynamics::ZPP_InteractionFilter list;
HXDLIN(2905)		if (hx::IsNull( filter )) {
HXLINE(2905)			list = null();
            		}
            		else {
HXLINE(2905)			list = filter->zpp_inner;
            		}
HXDLIN(2905)		 ::nape::shape::ShapeList list1 = (this->convexShapeList = this->bphase->shapesInAABB(aabb,false,false,list,this->convexShapeList));
HXLINE(2906)		{
HXLINE(2907)			 ::zpp_nape::geom::ZPP_AABB o = aabb;
HXLINE(2916)			{
HXLINE(2916)				if (hx::IsNotNull( o->outer )) {
HXLINE(2916)					o->outer->zpp_inner = null();
HXDLIN(2916)					o->outer = null();
            				}
HXDLIN(2916)				o->wrap_min = (o->wrap_max = null());
HXDLIN(2916)				o->_invalidate = null();
HXDLIN(2916)				o->_validate = null();
            			}
HXLINE(2917)			o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE(2918)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
            		}
HXLINE(2923)		 ::nape::geom::ConvexResultList ret;
HXDLIN(2923)		if (hx::IsNull( output )) {
HXLINE(2923)			ret =  ::nape::geom::ConvexResultList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2923)			ret = output;
            		}
HXLINE(2924)		{
HXLINE(2924)			list1->zpp_inner->valmod();
HXDLIN(2924)			 ::nape::shape::ShapeIterator _g = ::nape::shape::ShapeIterator_obj::get(list1);
HXDLIN(2924)			while(true){
HXLINE(2924)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2924)				 ::nape::shape::ShapeList _this18 = _g->zpp_inner;
HXDLIN(2924)				_this18->zpp_inner->valmod();
HXDLIN(2924)				if (_this18->zpp_inner->zip_length) {
HXLINE(2924)					_this18->zpp_inner->zip_length = false;
HXDLIN(2924)					_this18->zpp_inner->user_length = _this18->zpp_inner->inner->length;
            				}
HXDLIN(2924)				int length = _this18->zpp_inner->user_length;
HXDLIN(2924)				_g->zpp_critical = true;
HXDLIN(2924)				bool _hx_tmp4;
HXDLIN(2924)				if ((_g->zpp_i < length)) {
HXLINE(2924)					_hx_tmp4 = true;
            				}
            				else {
HXLINE(2924)					{
HXLINE(2924)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN(2924)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN(2924)						_g->zpp_inner = null();
            					}
HXDLIN(2924)					_hx_tmp4 = false;
            				}
HXDLIN(2924)				if (!(_hx_tmp4)) {
HXLINE(2924)					goto _hx_goto_108;
            				}
HXDLIN(2924)				_g->zpp_critical = false;
HXDLIN(2924)				 ::nape::shape::Shape s = _g->zpp_inner->at(_g->zpp_i++);
HXLINE(2925)				bool _hx_tmp5;
HXDLIN(2925)				if (hx::IsNotEq( s,shape->outer )) {
HXLINE(2925)					 ::nape::phys::Body _hx_tmp6;
HXDLIN(2925)					if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2925)						_hx_tmp6 = s->zpp_inner->body->outer;
            					}
            					else {
HXLINE(2925)						_hx_tmp6 = null();
            					}
HXDLIN(2925)					_hx_tmp5 = hx::IsNotEq( _hx_tmp6,body->outer );
            				}
            				else {
HXLINE(2925)					_hx_tmp5 = false;
            				}
HXDLIN(2925)				if (_hx_tmp5) {
HXLINE(2926)					toi->s1 = shape;
HXLINE(2927)					toi->s2 = s->zpp_inner;
HXLINE(2928)					if (dynamics) {
HXLINE(2929)						s->zpp_inner->validate_sweepRadius();
HXLINE(2930)						 ::nape::phys::Body _hx_tmp7;
HXDLIN(2930)						if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2930)							_hx_tmp7 = s->zpp_inner->body->outer;
            						}
            						else {
HXLINE(2930)							_hx_tmp7 = null();
            						}
HXDLIN(2930)						 ::nape::phys::Body _hx_tmp8;
HXDLIN(2930)						if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2930)							_hx_tmp8 = s->zpp_inner->body->outer;
            						}
            						else {
HXLINE(2930)							_hx_tmp8 = null();
            						}
HXDLIN(2930)						_hx_tmp7->zpp_inner->sweep_angvel = _hx_tmp8->zpp_inner->angvel;
HXLINE(2931)						 ::nape::phys::Body _hx_tmp9;
HXDLIN(2931)						if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2931)							_hx_tmp9 = s->zpp_inner->body->outer;
            						}
            						else {
HXLINE(2931)							_hx_tmp9 = null();
            						}
HXDLIN(2931)						_hx_tmp9->zpp_inner->sweepTime = ( (Float)(0) );
HXLINE(2932)						::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,deltaTime,( (Float)(0) ),( (Float)(0) ),true);
HXLINE(2933)						{
HXLINE(2933)							 ::nape::phys::Body _this19;
HXDLIN(2933)							if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2933)								_this19 = s->zpp_inner->body->outer;
            							}
            							else {
HXLINE(2933)								_this19 = null();
            							}
HXDLIN(2933)							 ::zpp_nape::phys::ZPP_Body _this20 = _this19->zpp_inner;
HXDLIN(2933)							Float delta1 = (( (Float)(0) ) - _this20->sweepTime);
HXDLIN(2933)							if ((delta1 != 0)) {
HXLINE(2933)								_this20->sweepTime = ( (Float)(0) );
HXDLIN(2933)								{
HXLINE(2933)									Float t4 = delta1;
HXDLIN(2933)									 ::zpp_nape::phys::ZPP_Body _this21 = _this20;
HXDLIN(2933)									_this21->posx = (_this21->posx + (_this20->velx * t4));
HXDLIN(2933)									 ::zpp_nape::phys::ZPP_Body _this22 = _this20;
HXDLIN(2933)									_this22->posy = (_this22->posy + (_this20->vely * t4));
            								}
HXDLIN(2933)								if ((_this20->angvel != 0)) {
HXLINE(2933)									Float dr1 = (_this20->sweep_angvel * delta1);
HXDLIN(2933)									 ::zpp_nape::phys::ZPP_Body _this23 = _this20;
HXDLIN(2933)									_this23->rot = (_this23->rot + dr1);
HXDLIN(2933)									if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(2933)										_this20->axisx = ::Math_obj::sin(_this20->rot);
HXDLIN(2933)										_this20->axisy = ::Math_obj::cos(_this20->rot);
            									}
            									else {
HXLINE(2933)										Float d21 = (dr1 * dr1);
HXDLIN(2933)										Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(2933)										Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(2933)										Float nx1 = (((p1 * _this20->axisx) + (dr1 * _this20->axisy)) * m1);
HXDLIN(2933)										_this20->axisy = (((p1 * _this20->axisy) - (dr1 * _this20->axisx)) * m1);
HXDLIN(2933)										_this20->axisx = nx1;
            									}
            								}
            							}
            						}
HXLINE(2934)						{
HXLINE(2934)							 ::nape::phys::Body _this24;
HXDLIN(2934)							if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(2934)								_this24 = s->zpp_inner->body->outer;
            							}
            							else {
HXLINE(2934)								_this24 = null();
            							}
HXDLIN(2934)							 ::zpp_nape::phys::ZPP_Body _this25 = _this24->zpp_inner;
HXDLIN(2934)							 ::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;
HXDLIN(2934)							if ((s1->type == 0)) {
HXLINE(2934)								s1->worldCOMx = (_this25->posx + ((_this25->axisy * s1->localCOMx) - (_this25->axisx * s1->localCOMy)));
HXDLIN(2934)								s1->worldCOMy = (_this25->posy + ((s1->localCOMx * _this25->axisx) + (s1->localCOMy * _this25->axisy)));
            							}
            							else {
HXLINE(2934)								 ::zpp_nape::shape::ZPP_Polygon p2 = s1->polygon;
HXDLIN(2934)								 ::zpp_nape::geom::ZPP_Vec2 li1 = p2->lverts->next;
HXDLIN(2934)								{
HXLINE(2934)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = p2->gverts->next;
HXDLIN(2934)									while(hx::IsNotNull( cx_ite3 )){
HXLINE(2934)										 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite3;
HXDLIN(2934)										{
HXLINE(2934)											 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN(2934)											li1 = li1->next;
HXDLIN(2934)											{
HXLINE(2934)												g1->x = (_this25->posx + ((_this25->axisy * l1->x) - (_this25->axisx * l1->y)));
HXDLIN(2934)												g1->y = (_this25->posy + ((l1->x * _this25->axisx) + (l1->y * _this25->axisy)));
            											}
            										}
HXDLIN(2934)										cx_ite3 = cx_ite3->next;
            									}
            								}
HXDLIN(2934)								 ::zpp_nape::util::ZNPNode_ZPP_Edge ite1 = p2->edges->head;
HXDLIN(2934)								{
HXLINE(2934)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = p2->gverts->next;
HXDLIN(2934)									 ::zpp_nape::geom::ZPP_Vec2 u2 = cx_ite4;
HXDLIN(2934)									cx_ite4 = cx_ite4->next;
HXDLIN(2934)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(2934)										 ::zpp_nape::geom::ZPP_Vec2 v3 = cx_ite4;
HXDLIN(2934)										{
HXLINE(2934)											 ::zpp_nape::shape::ZPP_Edge e2 = ite1->elt;
HXDLIN(2934)											ite1 = ite1->next;
HXDLIN(2934)											{
HXLINE(2934)												e2->gnormx = ((_this25->axisy * e2->lnormx) - (_this25->axisx * e2->lnormy));
HXDLIN(2934)												e2->gnormy = ((e2->lnormx * _this25->axisx) + (e2->lnormy * _this25->axisy));
            											}
HXDLIN(2934)											e2->gprojection = (((_this25->posx * e2->gnormx) + (_this25->posy * e2->gnormy)) + e2->lprojection);
HXDLIN(2934)											e2->tp0 = ((u2->y * e2->gnormx) - (u2->x * e2->gnormy));
HXDLIN(2934)											e2->tp1 = ((v3->y * e2->gnormx) - (v3->x * e2->gnormy));
            										}
HXDLIN(2934)										u2 = v3;
HXDLIN(2934)										cx_ite4 = cx_ite4->next;
            									}
HXDLIN(2934)									 ::zpp_nape::geom::ZPP_Vec2 v4 = p2->gverts->next;
HXDLIN(2934)									{
HXLINE(2934)										 ::zpp_nape::shape::ZPP_Edge e3 = ite1->elt;
HXDLIN(2934)										ite1 = ite1->next;
HXDLIN(2934)										{
HXLINE(2934)											e3->gnormx = ((_this25->axisy * e3->lnormx) - (_this25->axisx * e3->lnormy));
HXDLIN(2934)											e3->gnormy = ((e3->lnormx * _this25->axisx) + (e3->lnormy * _this25->axisy));
            										}
HXDLIN(2934)										e3->gprojection = (((_this25->posx * e3->gnormx) + (_this25->posy * e3->gnormy)) + e3->lprojection);
HXDLIN(2934)										e3->tp0 = ((u2->y * e3->gnormx) - (u2->x * e3->gnormy));
HXDLIN(2934)										e3->tp1 = ((v4->y * e3->gnormx) - (v4->x * e3->gnormy));
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE(2937)						::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,( (Float)(0) ),( (Float)(0) ));
            					}
HXLINE(2939)					 ::zpp_nape::geom::ZPP_ToiEvent toi1 = toi;
HXDLIN(2939)					toi1->toi = (toi1->toi * deltaTime);
HXLINE(2940)					if ((toi->toi > 0)) {
HXLINE(2941)						Float x4 = -(toi->axis->x);
HXDLIN(2941)						Float y4 = -(toi->axis->y);
HXDLIN(2941)						bool res;
HXDLIN(2941)						if ((x4 == x4)) {
HXLINE(2941)							res = (y4 != y4);
            						}
            						else {
HXLINE(2941)							res = true;
            						}
HXDLIN(2941)						if (res) {
HXLINE(2941)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN(2941)						 ::nape::geom::Vec2 ret1;
HXDLIN(2941)						if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2941)							ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            						}
            						else {
HXLINE(2941)							ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2941)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN(2941)							ret1->zpp_pool = null();
HXDLIN(2941)							ret1->zpp_disp = false;
HXDLIN(2941)							if (hx::IsEq( ret1,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2941)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            							}
            						}
HXDLIN(2941)						if (hx::IsNull( ret1->zpp_inner )) {
HXLINE(2941)							 ::zpp_nape::geom::ZPP_Vec2 ret2;
HXDLIN(2941)							{
HXLINE(2941)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2941)									ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(2941)									ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2941)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN(2941)									ret2->next = null();
            								}
HXDLIN(2941)								ret2->weak = false;
            							}
HXDLIN(2941)							ret2->_immutable = false;
HXDLIN(2941)							{
HXLINE(2941)								ret2->x = x4;
HXDLIN(2941)								ret2->y = y4;
            							}
HXDLIN(2941)							ret1->zpp_inner = ret2;
HXDLIN(2941)							ret1->zpp_inner->outer = ret1;
            						}
            						else {
HXLINE(2941)							bool res1;
HXDLIN(2941)							if (hx::IsNotNull( ret1 )) {
HXLINE(2941)								res1 = ret1->zpp_disp;
            							}
            							else {
HXLINE(2941)								res1 = false;
            							}
HXDLIN(2941)							if (res1) {
HXLINE(2941)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(2941)							{
HXLINE(2941)								 ::zpp_nape::geom::ZPP_Vec2 _this26 = ret1->zpp_inner;
HXDLIN(2941)								if (_this26->_immutable) {
HXLINE(2941)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(2941)								if (hx::IsNotNull( _this26->_isimmutable )) {
HXLINE(2941)									_this26->_isimmutable();
            								}
            							}
HXDLIN(2941)							bool res2;
HXDLIN(2941)							if ((x4 == x4)) {
HXLINE(2941)								res2 = (y4 != y4);
            							}
            							else {
HXLINE(2941)								res2 = true;
            							}
HXDLIN(2941)							if (res2) {
HXLINE(2941)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN(2941)							bool res3;
HXDLIN(2941)							bool res4;
HXDLIN(2941)							if (hx::IsNotNull( ret1 )) {
HXLINE(2941)								res4 = ret1->zpp_disp;
            							}
            							else {
HXLINE(2941)								res4 = false;
            							}
HXDLIN(2941)							if (res4) {
HXLINE(2941)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(2941)							{
HXLINE(2941)								 ::zpp_nape::geom::ZPP_Vec2 _this27 = ret1->zpp_inner;
HXDLIN(2941)								if (hx::IsNotNull( _this27->_validate )) {
HXLINE(2941)									_this27->_validate();
            								}
            							}
HXDLIN(2941)							if ((ret1->zpp_inner->x == x4)) {
HXLINE(2941)								bool res5;
HXDLIN(2941)								if (hx::IsNotNull( ret1 )) {
HXLINE(2941)									res5 = ret1->zpp_disp;
            								}
            								else {
HXLINE(2941)									res5 = false;
            								}
HXDLIN(2941)								if (res5) {
HXLINE(2941)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(2941)								{
HXLINE(2941)									 ::zpp_nape::geom::ZPP_Vec2 _this28 = ret1->zpp_inner;
HXDLIN(2941)									if (hx::IsNotNull( _this28->_validate )) {
HXLINE(2941)										_this28->_validate();
            									}
            								}
HXDLIN(2941)								res3 = (ret1->zpp_inner->y == y4);
            							}
            							else {
HXLINE(2941)								res3 = false;
            							}
HXDLIN(2941)							if (!(res3)) {
HXLINE(2941)								{
HXLINE(2941)									ret1->zpp_inner->x = x4;
HXDLIN(2941)									ret1->zpp_inner->y = y4;
            								}
HXDLIN(2941)								{
HXLINE(2941)									 ::zpp_nape::geom::ZPP_Vec2 _this29 = ret1->zpp_inner;
HXDLIN(2941)									if (hx::IsNotNull( _this29->_invalidate )) {
HXLINE(2941)										_this29->_invalidate(_this29);
            									}
            								}
            							}
            						}
HXDLIN(2941)						ret1->zpp_inner->weak = false;
HXDLIN(2941)						Float x5 = toi->c2->x;
HXDLIN(2941)						Float y5 = toi->c2->y;
HXDLIN(2941)						bool res6;
HXDLIN(2941)						if ((x5 == x5)) {
HXLINE(2941)							res6 = (y5 != y5);
            						}
            						else {
HXLINE(2941)							res6 = true;
            						}
HXDLIN(2941)						if (res6) {
HXLINE(2941)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN(2941)						 ::nape::geom::Vec2 ret3;
HXDLIN(2941)						if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(2941)							ret3 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            						}
            						else {
HXLINE(2941)							ret3 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2941)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret3->zpp_pool;
HXDLIN(2941)							ret3->zpp_pool = null();
HXDLIN(2941)							ret3->zpp_disp = false;
HXDLIN(2941)							if (hx::IsEq( ret3,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(2941)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            							}
            						}
HXDLIN(2941)						if (hx::IsNull( ret3->zpp_inner )) {
HXLINE(2941)							 ::zpp_nape::geom::ZPP_Vec2 ret4;
HXDLIN(2941)							{
HXLINE(2941)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2941)									ret4 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(2941)									ret4 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2941)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret4->next;
HXDLIN(2941)									ret4->next = null();
            								}
HXDLIN(2941)								ret4->weak = false;
            							}
HXDLIN(2941)							ret4->_immutable = false;
HXDLIN(2941)							{
HXLINE(2941)								ret4->x = x5;
HXDLIN(2941)								ret4->y = y5;
            							}
HXDLIN(2941)							ret3->zpp_inner = ret4;
HXDLIN(2941)							ret3->zpp_inner->outer = ret3;
            						}
            						else {
HXLINE(2941)							bool res7;
HXDLIN(2941)							if (hx::IsNotNull( ret3 )) {
HXLINE(2941)								res7 = ret3->zpp_disp;
            							}
            							else {
HXLINE(2941)								res7 = false;
            							}
HXDLIN(2941)							if (res7) {
HXLINE(2941)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(2941)							{
HXLINE(2941)								 ::zpp_nape::geom::ZPP_Vec2 _this30 = ret3->zpp_inner;
HXDLIN(2941)								if (_this30->_immutable) {
HXLINE(2941)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN(2941)								if (hx::IsNotNull( _this30->_isimmutable )) {
HXLINE(2941)									_this30->_isimmutable();
            								}
            							}
HXDLIN(2941)							bool res8;
HXDLIN(2941)							if ((x5 == x5)) {
HXLINE(2941)								res8 = (y5 != y5);
            							}
            							else {
HXLINE(2941)								res8 = true;
            							}
HXDLIN(2941)							if (res8) {
HXLINE(2941)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN(2941)							bool res9;
HXDLIN(2941)							bool res10;
HXDLIN(2941)							if (hx::IsNotNull( ret3 )) {
HXLINE(2941)								res10 = ret3->zpp_disp;
            							}
            							else {
HXLINE(2941)								res10 = false;
            							}
HXDLIN(2941)							if (res10) {
HXLINE(2941)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN(2941)							{
HXLINE(2941)								 ::zpp_nape::geom::ZPP_Vec2 _this31 = ret3->zpp_inner;
HXDLIN(2941)								if (hx::IsNotNull( _this31->_validate )) {
HXLINE(2941)									_this31->_validate();
            								}
            							}
HXDLIN(2941)							if ((ret3->zpp_inner->x == x5)) {
HXLINE(2941)								bool res11;
HXDLIN(2941)								if (hx::IsNotNull( ret3 )) {
HXLINE(2941)									res11 = ret3->zpp_disp;
            								}
            								else {
HXLINE(2941)									res11 = false;
            								}
HXDLIN(2941)								if (res11) {
HXLINE(2941)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN(2941)								{
HXLINE(2941)									 ::zpp_nape::geom::ZPP_Vec2 _this32 = ret3->zpp_inner;
HXDLIN(2941)									if (hx::IsNotNull( _this32->_validate )) {
HXLINE(2941)										_this32->_validate();
            									}
            								}
HXDLIN(2941)								res9 = (ret3->zpp_inner->y == y5);
            							}
            							else {
HXLINE(2941)								res9 = false;
            							}
HXDLIN(2941)							if (!(res9)) {
HXLINE(2941)								{
HXLINE(2941)									ret3->zpp_inner->x = x5;
HXDLIN(2941)									ret3->zpp_inner->y = y5;
            								}
HXDLIN(2941)								{
HXLINE(2941)									 ::zpp_nape::geom::ZPP_Vec2 _this33 = ret3->zpp_inner;
HXDLIN(2941)									if (hx::IsNotNull( _this33->_invalidate )) {
HXLINE(2941)										_this33->_invalidate(_this33);
            									}
            								}
            							}
            						}
HXDLIN(2941)						ret3->zpp_inner->weak = false;
HXDLIN(2941)						 ::nape::geom::ConvexResult res12 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(ret1,ret3,toi->toi,s);
HXLINE(2942)						{
HXLINE(2943)							 ::zpp_nape::util::ZNPNode_ConvexResult pre = null();
HXLINE(2944)							{
HXLINE(2945)								 ::zpp_nape::util::ZNPNode_ConvexResult cx_ite5 = ret->zpp_inner->inner->head;
HXLINE(2946)								while(hx::IsNotNull( cx_ite5 )){
HXLINE(2947)									 ::nape::geom::ConvexResult j = cx_ite5->elt;
HXLINE(2948)									{
HXLINE(2949)										if (hx::IsNotNull( res12->zpp_inner->next )) {
HXLINE(2949)											HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            										}
HXDLIN(2949)										if (hx::IsNotNull( j->zpp_inner->next )) {
HXLINE(2949)											HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            										}
HXDLIN(2949)										if ((res12->zpp_inner->toiDistance < j->zpp_inner->toiDistance)) {
HXLINE(2949)											goto _hx_goto_111;
            										}
HXLINE(2950)										pre = cx_ite5;
            									}
HXLINE(2952)									cx_ite5 = cx_ite5->next;
            								}
            								_hx_goto_111:;
            							}
HXLINE(2955)							{
HXLINE(2955)								 ::zpp_nape::util::ZNPList_ConvexResult _this34 = ret->zpp_inner->inner;
HXDLIN(2955)								 ::zpp_nape::util::ZNPNode_ConvexResult ret5;
HXDLIN(2955)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool )) {
HXLINE(2955)									ret5 =  ::zpp_nape::util::ZNPNode_ConvexResult_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(2955)									ret5 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(2955)									::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret5->next;
HXDLIN(2955)									ret5->next = null();
            								}
HXDLIN(2955)								ret5->elt = res12;
HXDLIN(2955)								 ::zpp_nape::util::ZNPNode_ConvexResult temp = ret5;
HXDLIN(2955)								if (hx::IsNull( pre )) {
HXLINE(2955)									temp->next = _this34->head;
HXDLIN(2955)									_this34->head = temp;
            								}
            								else {
HXLINE(2955)									temp->next = pre->next;
HXDLIN(2955)									pre->next = temp;
            								}
HXDLIN(2955)								_this34->pushmod = (_this34->modified = true);
HXDLIN(2955)								_this34->length++;
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_108:;
            		}
HXLINE(2960)		list1->clear();
HXLINE(2961)		{
HXLINE(2962)			 ::zpp_nape::geom::ZPP_ToiEvent o1 = toi;
HXLINE(2972)			o1->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(2973)			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o1;
            		}
HXLINE(2978)		{
HXLINE(2978)			Float delta2 = (( (Float)(0) ) - body->sweepTime);
HXDLIN(2978)			if ((delta2 != 0)) {
HXLINE(2978)				body->sweepTime = ( (Float)(0) );
HXDLIN(2978)				{
HXLINE(2978)					Float t5 = delta2;
HXDLIN(2978)					 ::zpp_nape::phys::ZPP_Body body4 = body;
HXDLIN(2978)					body4->posx = (body4->posx + (body->velx * t5));
HXDLIN(2978)					 ::zpp_nape::phys::ZPP_Body body5 = body;
HXDLIN(2978)					body5->posy = (body5->posy + (body->vely * t5));
            				}
HXDLIN(2978)				if ((body->angvel != 0)) {
HXLINE(2978)					Float dr2 = (body->sweep_angvel * delta2);
HXDLIN(2978)					 ::zpp_nape::phys::ZPP_Body body6 = body;
HXDLIN(2978)					body6->rot = (body6->rot + dr2);
HXDLIN(2978)					if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(2978)						body->axisx = ::Math_obj::sin(body->rot);
HXDLIN(2978)						body->axisy = ::Math_obj::cos(body->rot);
            					}
            					else {
HXLINE(2978)						Float d22 = (dr2 * dr2);
HXDLIN(2978)						Float p3 = (( (Float)(1) ) - (((Float)0.5) * d22));
HXDLIN(2978)						Float m2 = (( (Float)(1) ) - ((d22 * d22) / ( (Float)(8) )));
HXDLIN(2978)						Float nx2 = (((p3 * body->axisx) + (dr2 * body->axisy)) * m2);
HXDLIN(2978)						body->axisy = (((p3 * body->axisy) - (dr2 * body->axisx)) * m2);
HXDLIN(2978)						body->axisx = nx2;
            					}
            				}
            			}
            		}
HXLINE(2979)		if ((shape->type == 0)) {
HXLINE(2979)			shape->worldCOMx = (body->posx + ((body->axisy * shape->localCOMx) - (body->axisx * shape->localCOMy)));
HXDLIN(2979)			shape->worldCOMy = (body->posy + ((shape->localCOMx * body->axisx) + (shape->localCOMy * body->axisy)));
            		}
            		else {
HXLINE(2979)			 ::zpp_nape::shape::ZPP_Polygon p4 = shape->polygon;
HXDLIN(2979)			 ::zpp_nape::geom::ZPP_Vec2 li2 = p4->lverts->next;
HXDLIN(2979)			{
HXLINE(2979)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite6 = p4->gverts->next;
HXDLIN(2979)				while(hx::IsNotNull( cx_ite6 )){
HXLINE(2979)					 ::zpp_nape::geom::ZPP_Vec2 g2 = cx_ite6;
HXDLIN(2979)					{
HXLINE(2979)						 ::zpp_nape::geom::ZPP_Vec2 l2 = li2;
HXDLIN(2979)						li2 = li2->next;
HXDLIN(2979)						{
HXLINE(2979)							g2->x = (body->posx + ((body->axisy * l2->x) - (body->axisx * l2->y)));
HXDLIN(2979)							g2->y = (body->posy + ((l2->x * body->axisx) + (l2->y * body->axisy)));
            						}
            					}
HXDLIN(2979)					cx_ite6 = cx_ite6->next;
            				}
            			}
HXDLIN(2979)			 ::zpp_nape::util::ZNPNode_ZPP_Edge ite2 = p4->edges->head;
HXDLIN(2979)			{
HXLINE(2979)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite7 = p4->gverts->next;
HXDLIN(2979)				 ::zpp_nape::geom::ZPP_Vec2 u3 = cx_ite7;
HXDLIN(2979)				cx_ite7 = cx_ite7->next;
HXDLIN(2979)				while(hx::IsNotNull( cx_ite7 )){
HXLINE(2979)					 ::zpp_nape::geom::ZPP_Vec2 v5 = cx_ite7;
HXDLIN(2979)					{
HXLINE(2979)						 ::zpp_nape::shape::ZPP_Edge e4 = ite2->elt;
HXDLIN(2979)						ite2 = ite2->next;
HXDLIN(2979)						{
HXLINE(2979)							e4->gnormx = ((body->axisy * e4->lnormx) - (body->axisx * e4->lnormy));
HXDLIN(2979)							e4->gnormy = ((e4->lnormx * body->axisx) + (e4->lnormy * body->axisy));
            						}
HXDLIN(2979)						e4->gprojection = (((body->posx * e4->gnormx) + (body->posy * e4->gnormy)) + e4->lprojection);
HXDLIN(2979)						e4->tp0 = ((u3->y * e4->gnormx) - (u3->x * e4->gnormy));
HXDLIN(2979)						e4->tp1 = ((v5->y * e4->gnormx) - (v5->x * e4->gnormy));
            					}
HXDLIN(2979)					u3 = v5;
HXDLIN(2979)					cx_ite7 = cx_ite7->next;
            				}
HXDLIN(2979)				 ::zpp_nape::geom::ZPP_Vec2 v6 = p4->gverts->next;
HXDLIN(2979)				{
HXLINE(2979)					 ::zpp_nape::shape::ZPP_Edge e5 = ite2->elt;
HXDLIN(2979)					ite2 = ite2->next;
HXDLIN(2979)					{
HXLINE(2979)						e5->gnormx = ((body->axisy * e5->lnormx) - (body->axisx * e5->lnormy));
HXDLIN(2979)						e5->gnormy = ((e5->lnormx * body->axisx) + (e5->lnormy * body->axisy));
            					}
HXDLIN(2979)					e5->gprojection = (((body->posx * e5->gnormx) + (body->posy * e5->gnormy)) + e5->lprojection);
HXDLIN(2979)					e5->tp0 = ((u3->y * e5->gnormx) - (u3->x * e5->gnormy));
HXDLIN(2979)					e5->tp1 = ((v6->y * e5->gnormx) - (v6->x * e5->gnormy));
            				}
            			}
            		}
HXLINE(2980)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,convexMultiCast,return )

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Space_obj::push_callback( ::zpp_nape::callbacks::ZPP_Listener i){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_2982_push_callback)
HXLINE(2991)		 ::zpp_nape::callbacks::ZPP_Callback cb;
HXLINE(2993)		if (hx::IsNull( ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool )) {
HXLINE(2994)			cb =  ::zpp_nape::callbacks::ZPP_Callback_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3000)			cb = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;
HXLINE(3001)			::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = cb->next;
HXLINE(3002)			cb->next = null();
            		}
HXLINE(3009)		this->callbacks->push(cb);
HXLINE(3010)		cb->listener = i;
HXLINE(3011)		return cb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,push_callback,return )

void ZPP_Space_obj::step(Float deltaTime,int velocityIterations,int positionIterations){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_3014_step)
HXDLIN(3014)		 ::zpp_nape::space::ZPP_Space _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3016)		if (this->midstep) {
HXLINE(3016)			HX_STACK_DO_THROW(HX_("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!",68,60,8b,99));
            		}
HXLINE(3018)		 ::zpp_nape::space::ZPP_Space _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(3018)		_hx_tmp->time = (_hx_tmp->time + deltaTime);
HXLINE(3019)		this->pre_dt = deltaTime;
HXLINE(3020)		this->midstep = true;
HXLINE(3021)		this->stamp++;
HXLINE(3024)		this->validation();
HXLINE(3029)		this->bphase->broadphase(hx::ObjectPtr<OBJ_>(this),true);
HXLINE(3039)		this->prestep(deltaTime);
HXLINE(3044)		if (this->sortcontacts) {
HXLINE(3046)			 ::zpp_nape::util::ZNPList_ZPP_ColArbiter xxlist = this->c_arbiters_false;
HXLINE(3047)			bool _hx_tmp1;
HXDLIN(3047)			if (hx::IsNotNull( xxlist->head )) {
HXLINE(3047)				_hx_tmp1 = hx::IsNotNull( xxlist->head->next );
            			}
            			else {
HXLINE(3047)				_hx_tmp1 = false;
            			}
HXDLIN(3047)			if (_hx_tmp1) {
HXLINE(3048)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter head = xxlist->head;
HXLINE(3049)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter tail = null();
HXLINE(3050)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter left = null();
HXLINE(3051)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter right = null();
HXLINE(3052)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter nxt = null();
HXLINE(3053)				int listSize = 1;
HXLINE(3054)				int numMerges;
HXDLIN(3054)				int leftSize;
HXDLIN(3054)				int rightSize;
HXLINE(3055)				while(true){
HXLINE(3056)					numMerges = 0;
HXLINE(3057)					left = head;
HXLINE(3058)					head = null();
HXDLIN(3058)					tail = head;
HXLINE(3059)					while(hx::IsNotNull( left )){
HXLINE(3060)						numMerges = (numMerges + 1);
HXLINE(3061)						right = left;
HXLINE(3062)						leftSize = 0;
HXLINE(3063)						rightSize = listSize;
HXLINE(3064)						while(true){
HXLINE(3064)							bool _hx_tmp2;
HXDLIN(3064)							if (hx::IsNotNull( right )) {
HXLINE(3064)								_hx_tmp2 = (leftSize < listSize);
            							}
            							else {
HXLINE(3064)								_hx_tmp2 = false;
            							}
HXDLIN(3064)							if (!(_hx_tmp2)) {
HXLINE(3064)								goto _hx_goto_118;
            							}
HXLINE(3065)							leftSize = (leftSize + 1);
HXLINE(3066)							right = right->next;
            						}
            						_hx_goto_118:;
HXLINE(3068)						while(true){
HXLINE(3068)							bool _hx_tmp3;
HXDLIN(3068)							if ((leftSize <= 0)) {
HXLINE(3068)								if ((rightSize > 0)) {
HXLINE(3068)									_hx_tmp3 = hx::IsNotNull( right );
            								}
            								else {
HXLINE(3068)									_hx_tmp3 = false;
            								}
            							}
            							else {
HXLINE(3068)								_hx_tmp3 = true;
            							}
HXDLIN(3068)							if (!(_hx_tmp3)) {
HXLINE(3068)								goto _hx_goto_119;
            							}
HXLINE(3069)							if ((leftSize == 0)) {
HXLINE(3070)								nxt = right;
HXLINE(3071)								right = right->next;
HXLINE(3072)								rightSize = (rightSize - 1);
            							}
            							else {
HXLINE(3074)								bool _hx_tmp4;
HXDLIN(3074)								if ((rightSize != 0)) {
HXLINE(3074)									_hx_tmp4 = hx::IsNull( right );
            								}
            								else {
HXLINE(3074)									_hx_tmp4 = true;
            								}
HXDLIN(3074)								if (_hx_tmp4) {
HXLINE(3075)									nxt = left;
HXLINE(3076)									left = left->next;
HXLINE(3077)									leftSize = (leftSize - 1);
            								}
            								else {
HXLINE(3080)									bool _hx_tmp5;
HXDLIN(3080)									bool _hx_tmp6;
HXDLIN(3080)									if (left->elt->active) {
HXLINE(3080)										_hx_tmp6 = right->elt->active;
            									}
            									else {
HXLINE(3080)										_hx_tmp6 = false;
            									}
HXDLIN(3080)									if (_hx_tmp6) {
HXLINE(3080)										_hx_tmp5 = (left->elt->oc1->dist < right->elt->oc1->dist);
            									}
            									else {
HXLINE(3080)										_hx_tmp5 = true;
            									}
HXLINE(3079)									if (_hx_tmp5) {
HXLINE(3082)										nxt = left;
HXLINE(3083)										left = left->next;
HXLINE(3084)										leftSize = (leftSize - 1);
            									}
            									else {
HXLINE(3087)										nxt = right;
HXLINE(3088)										right = right->next;
HXLINE(3089)										rightSize = (rightSize - 1);
            									}
            								}
            							}
HXLINE(3091)							if (hx::IsNotNull( tail )) {
HXLINE(3091)								tail->next = nxt;
            							}
            							else {
HXLINE(3092)								head = nxt;
            							}
HXLINE(3093)							tail = nxt;
            						}
            						_hx_goto_119:;
HXLINE(3095)						left = right;
            					}
HXLINE(3097)					tail->next = null();
HXLINE(3098)					listSize = (listSize << 1);
HXLINE(3055)					if (!((numMerges > 1))) {
HXLINE(3055)						goto _hx_goto_116;
            					}
            				}
            				_hx_goto_116:;
HXLINE(3101)				{
HXLINE(3101)					xxlist->head = head;
HXDLIN(3101)					xxlist->modified = true;
HXDLIN(3101)					xxlist->pushmod = true;
            				}
            			}
            		}
HXLINE(3107)		this->updateVel(deltaTime);
HXLINE(3108)		this->warmStart();
HXLINE(3111)		this->iterateVel(velocityIterations);
HXLINE(3115)		{
HXLINE(3116)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;
HXLINE(3117)			while(hx::IsNotNull( cx_ite )){
HXLINE(3118)				 ::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;
HXLINE(3119)				{
HXLINE(3120)					{
HXLINE(3121)						cur->pre_posx = cur->posx;
HXLINE(3122)						cur->pre_posy = cur->posy;
            					}
HXLINE(3140)					cur->pre_rot = cur->rot;
            				}
HXLINE(3142)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(3147)		{
HXLINE(3148)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite1 = this->live->head;
HXLINE(3149)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(3150)				 ::zpp_nape::phys::ZPP_Body cur1 = cx_ite1->elt;
HXLINE(3151)				{
HXLINE(3152)					{
HXLINE(3153)						cur1->pre_posx = cur1->posx;
HXLINE(3154)						cur1->pre_posy = cur1->posy;
            					}
HXLINE(3172)					cur1->pre_rot = cur1->rot;
            				}
HXLINE(3174)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(3178)		this->updatePos(deltaTime);
HXLINE(3179)		this->continuous = true;
HXLINE(3180)		this->continuousCollisions(deltaTime);
HXLINE(3181)		this->continuous = false;
HXLINE(3184)		this->iteratePos(positionIterations);
HXLINE(3188)		{
HXLINE(3189)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite2 = this->kinematics->head;
HXLINE(3190)			while(hx::IsNotNull( cx_ite2 )){
HXLINE(3191)				 ::zpp_nape::phys::ZPP_Body cur2 = cx_ite2->elt;
HXLINE(3192)				{
HXLINE(3193)					bool upos;
HXDLIN(3193)					if ((cur2->posx == cur2->pre_posx)) {
HXLINE(3193)						upos = (cur2->posy == cur2->pre_posy);
            					}
            					else {
HXLINE(3193)						upos = false;
            					}
HXDLIN(3193)					bool upos1 = !(upos);
HXLINE(3194)					bool urot = (cur2->pre_rot != cur2->rot);
HXLINE(3195)					if (upos1) {
HXLINE(3195)						{
HXLINE(3195)							 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite3 = cur2->shapes->head;
HXDLIN(3195)							while(hx::IsNotNull( cx_ite3 )){
HXLINE(3195)								 ::zpp_nape::shape::ZPP_Shape s = cx_ite3->elt;
HXDLIN(3195)								{
HXLINE(3195)									if ((s->type == 1)) {
HXLINE(3195)										s->polygon->invalidate_gverts();
HXDLIN(3195)										s->polygon->invalidate_gaxi();
            									}
HXDLIN(3195)									s->invalidate_worldCOM();
            								}
HXDLIN(3195)								cx_ite3 = cx_ite3->next;
            							}
            						}
HXDLIN(3195)						cur2->zip_worldCOM = true;
            					}
HXLINE(3196)					if (urot) {
HXLINE(3196)						cur2->zip_axis = true;
HXDLIN(3196)						{
HXLINE(3196)							 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite4 = cur2->shapes->head;
HXDLIN(3196)							while(hx::IsNotNull( cx_ite4 )){
HXLINE(3196)								 ::zpp_nape::shape::ZPP_Shape s1 = cx_ite4->elt;
HXDLIN(3196)								{
HXLINE(3196)									if ((s1->type == 1)) {
HXLINE(3196)										s1->polygon->invalidate_gverts();
HXDLIN(3196)										s1->polygon->invalidate_gaxi();
            									}
HXDLIN(3196)									s1->invalidate_worldCOM();
            								}
HXDLIN(3196)								cx_ite4 = cx_ite4->next;
            							}
            						}
HXDLIN(3196)						cur2->zip_worldCOM = true;
            					}
            				}
HXLINE(3198)				cx_ite2 = cx_ite2->next;
            			}
            		}
HXLINE(3203)		{
HXLINE(3204)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite5 = this->live->head;
HXLINE(3205)			while(hx::IsNotNull( cx_ite5 )){
HXLINE(3206)				 ::zpp_nape::phys::ZPP_Body cur3 = cx_ite5->elt;
HXLINE(3207)				{
HXLINE(3208)					bool upos2;
HXDLIN(3208)					if ((cur3->posx == cur3->pre_posx)) {
HXLINE(3208)						upos2 = (cur3->posy == cur3->pre_posy);
            					}
            					else {
HXLINE(3208)						upos2 = false;
            					}
HXDLIN(3208)					bool upos3 = !(upos2);
HXLINE(3209)					bool urot1 = (cur3->pre_rot != cur3->rot);
HXLINE(3210)					if (upos3) {
HXLINE(3210)						{
HXLINE(3210)							 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite6 = cur3->shapes->head;
HXDLIN(3210)							while(hx::IsNotNull( cx_ite6 )){
HXLINE(3210)								 ::zpp_nape::shape::ZPP_Shape s2 = cx_ite6->elt;
HXDLIN(3210)								{
HXLINE(3210)									if ((s2->type == 1)) {
HXLINE(3210)										s2->polygon->invalidate_gverts();
HXDLIN(3210)										s2->polygon->invalidate_gaxi();
            									}
HXDLIN(3210)									s2->invalidate_worldCOM();
            								}
HXDLIN(3210)								cx_ite6 = cx_ite6->next;
            							}
            						}
HXDLIN(3210)						cur3->zip_worldCOM = true;
            					}
HXLINE(3211)					if (urot1) {
HXLINE(3211)						cur3->zip_axis = true;
HXDLIN(3211)						{
HXLINE(3211)							 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite7 = cur3->shapes->head;
HXDLIN(3211)							while(hx::IsNotNull( cx_ite7 )){
HXLINE(3211)								 ::zpp_nape::shape::ZPP_Shape s3 = cx_ite7->elt;
HXDLIN(3211)								{
HXLINE(3211)									if ((s3->type == 1)) {
HXLINE(3211)										s3->polygon->invalidate_gverts();
HXDLIN(3211)										s3->polygon->invalidate_gaxi();
            									}
HXDLIN(3211)									s3->invalidate_worldCOM();
            								}
HXDLIN(3211)								cx_ite7 = cx_ite7->next;
            							}
            						}
HXDLIN(3211)						cur3->zip_worldCOM = true;
            					}
            				}
HXLINE(3213)				cx_ite5 = cx_ite5->next;
            			}
            		}
HXLINE(3217)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXLINE(3218)		{
HXLINE(3219)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite8 = this->staticsleep->head;
HXLINE(3220)			while(hx::IsNotNull( cx_ite8 )){
HXLINE(3221)				 ::zpp_nape::phys::ZPP_Body b = cx_ite8->elt;
HXLINE(3222)				{
HXLINE(3231)					bool _hx_tmp7;
HXDLIN(3231)					if ((b->type == 3)) {
HXLINE(3231)						bool _hx_tmp8;
HXDLIN(3231)						if ((b->velx == 0)) {
HXLINE(3231)							_hx_tmp8 = (b->vely == 0);
            						}
            						else {
HXLINE(3231)							_hx_tmp8 = false;
            						}
HXDLIN(3231)						if (_hx_tmp8) {
HXLINE(3231)							_hx_tmp7 = (b->angvel == 0);
            						}
            						else {
HXLINE(3231)							_hx_tmp7 = false;
            						}
            					}
            					else {
HXLINE(3231)						_hx_tmp7 = true;
            					}
HXDLIN(3231)					if (_hx_tmp7) {
HXLINE(3232)						if (b->kinematicDelaySleep) {
HXLINE(3233)							b->kinematicDelaySleep = false;
HXLINE(3235)							cx_ite8 = cx_ite8->next;
HXLINE(3236)							continue;
            						}
HXLINE(3239)						b->component->sleeping = true;
HXLINE(3240)						 ::zpp_nape::util::ZNPList_ZPP_Body _this = this->staticsleep;
HXDLIN(3240)						 ::zpp_nape::util::ZNPNode_ZPP_Body old;
HXDLIN(3240)						 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXDLIN(3240)						if (hx::IsNull( pre )) {
HXLINE(3240)							old = _this->head;
HXDLIN(3240)							ret = old->next;
HXDLIN(3240)							_this->head = ret;
HXDLIN(3240)							if (hx::IsNull( _this->head )) {
HXLINE(3240)								_this->pushmod = true;
            							}
            						}
            						else {
HXLINE(3240)							old = pre->next;
HXDLIN(3240)							ret = old->next;
HXDLIN(3240)							pre->next = ret;
HXDLIN(3240)							if (hx::IsNull( ret )) {
HXLINE(3240)								_this->pushmod = true;
            							}
            						}
HXDLIN(3240)						{
HXLINE(3240)							 ::zpp_nape::util::ZNPNode_ZPP_Body o = old;
HXDLIN(3240)							o->elt = null();
HXDLIN(3240)							o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(3240)							::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            						}
HXDLIN(3240)						_this->modified = true;
HXDLIN(3240)						_this->length--;
HXDLIN(3240)						_this->pushmod = true;
HXDLIN(3240)						cx_ite8 = ret;
HXLINE(3241)						continue;
            					}
HXLINE(3243)					pre = cx_ite8;
            				}
HXLINE(3245)				cx_ite8 = cx_ite8->next;
            			}
            		}
HXLINE(3250)		this->doForests(deltaTime);
HXLINE(3251)		this->sleepArbiters();
HXLINE(3254)		this->midstep = false;
HXLINE(3255)		 ::zpp_nape::space::ZPP_CallbackSet pre1 = null();
HXLINE(3256)		{
HXLINE(3257)			 ::zpp_nape::space::ZPP_CallbackSet cx_ite9 = this->callbackset_list->next;
HXLINE(3258)			while(hx::IsNotNull( cx_ite9 )){
HXLINE(3259)				 ::zpp_nape::space::ZPP_CallbackSet set = cx_ite9;
HXLINE(3260)				{
HXLINE(3261)					if (hx::IsNull( set->arbiters->head )) {
HXLINE(3262)						 ::zpp_nape::space::ZPP_CallbackSet _this1 = this->callbackset_list;
HXDLIN(3262)						 ::zpp_nape::space::ZPP_CallbackSet old1;
HXDLIN(3262)						 ::zpp_nape::space::ZPP_CallbackSet ret1;
HXDLIN(3262)						if (hx::IsNull( pre1 )) {
HXLINE(3262)							old1 = _this1->next;
HXDLIN(3262)							ret1 = old1->next;
HXDLIN(3262)							_this1->next = ret1;
HXDLIN(3262)							if (hx::IsNull( _this1->next )) {
HXLINE(3262)								_this1->pushmod = true;
            							}
            						}
            						else {
HXLINE(3262)							old1 = pre1->next;
HXDLIN(3262)							ret1 = old1->next;
HXDLIN(3262)							pre1->next = ret1;
HXDLIN(3262)							if (hx::IsNull( ret1 )) {
HXLINE(3262)								_this1->pushmod = true;
            							}
            						}
HXDLIN(3262)						old1->_inuse = false;
HXDLIN(3262)						_this1->modified = true;
HXDLIN(3262)						_this1->length--;
HXDLIN(3262)						_this1->pushmod = true;
HXDLIN(3262)						cx_ite9 = ret1;
HXLINE(3287)						{
HXLINE(3288)							 ::zpp_nape::space::ZPP_CallbackSet o1 = set;
HXLINE(3297)							{
HXLINE(3297)								o1->int1 = (o1->int2 = null());
HXDLIN(3297)								o1->id = (o1->di = -1);
HXDLIN(3297)								o1->freed = true;
            							}
HXLINE(3298)							o1->next = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
HXLINE(3299)							::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o1;
            						}
HXLINE(3304)						continue;
            					}
HXLINE(3306)					bool ret2;
HXDLIN(3306)					{
HXLINE(3306)						ret2 = true;
HXDLIN(3306)						{
HXLINE(3306)							 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite10 = set->arbiters->head;
HXDLIN(3306)							while(hx::IsNotNull( cx_ite10 )){
HXLINE(3306)								 ::zpp_nape::dynamics::ZPP_Arbiter x = cx_ite10->elt;
HXDLIN(3306)								if (x->sleeping) {
HXLINE(3306)									cx_ite10 = cx_ite10->next;
HXDLIN(3306)									continue;
            								}
            								else {
HXLINE(3306)									ret2 = false;
HXDLIN(3306)									goto _hx_goto_130;
            								}
            							}
            							_hx_goto_130:;
            						}
            					}
HXDLIN(3306)					bool sleeping = ret2;
HXLINE(3307)					{
HXLINE(3307)						 ::zpp_nape::callbacks::ZPP_CbSet a = set->int1->cbSet;
HXDLIN(3307)						 ::zpp_nape::callbacks::ZPP_CbSet b1 = set->int2->cbSet;
HXDLIN(3307)						{
HXLINE(3307)							 ::zpp_nape::space::ZPP_CbSetManager _this2 = a->manager;
HXDLIN(3307)							 ::zpp_nape::callbacks::ZPP_CbSetPair ret3 = null();
HXDLIN(3307)							 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN(3307)							if ((a->cbpairs->length < b1->cbpairs->length)) {
HXLINE(3307)								pairs = a->cbpairs;
            							}
            							else {
HXLINE(3307)								pairs = b1->cbpairs;
            							}
HXDLIN(3307)							{
HXLINE(3307)								 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite11 = pairs->head;
HXDLIN(3307)								while(hx::IsNotNull( cx_ite11 )){
HXLINE(3307)									 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite11->elt;
HXDLIN(3307)									bool _hx_tmp9;
HXDLIN(3307)									bool _hx_tmp10;
HXDLIN(3307)									if (hx::IsEq( p->a,a )) {
HXLINE(3307)										_hx_tmp10 = hx::IsEq( p->b,b1 );
            									}
            									else {
HXLINE(3307)										_hx_tmp10 = false;
            									}
HXDLIN(3307)									if (!(_hx_tmp10)) {
HXLINE(3307)										if (hx::IsEq( p->a,b1 )) {
HXLINE(3307)											_hx_tmp9 = hx::IsEq( p->b,a );
            										}
            										else {
HXLINE(3307)											_hx_tmp9 = false;
            										}
            									}
            									else {
HXLINE(3307)										_hx_tmp9 = true;
            									}
HXDLIN(3307)									if (_hx_tmp9) {
HXLINE(3307)										ret3 = p;
HXDLIN(3307)										goto _hx_goto_131;
            									}
HXDLIN(3307)									cx_ite11 = cx_ite11->next;
            								}
            								_hx_goto_131:;
            							}
HXDLIN(3307)							if (hx::IsNull( ret3 )) {
HXLINE(3307)								 ::zpp_nape::callbacks::ZPP_CbSetPair ret4;
HXDLIN(3307)								{
HXLINE(3307)									if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(3307)										ret4 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(3307)										ret4 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(3307)										::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret4->next;
HXDLIN(3307)										ret4->next = null();
            									}
HXDLIN(3307)									ret4->zip_listeners = true;
            								}
HXDLIN(3307)								if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b1)) {
HXLINE(3307)									ret4->a = a;
HXDLIN(3307)									ret4->b = b1;
            								}
            								else {
HXLINE(3307)									ret4->a = b1;
HXDLIN(3307)									ret4->b = a;
            								}
HXDLIN(3307)								ret3 = ret4;
HXDLIN(3307)								a->cbpairs->add(ret3);
HXDLIN(3307)								if (hx::IsNotEq( b1,a )) {
HXLINE(3307)									b1->cbpairs->add(ret3);
            								}
            							}
HXDLIN(3307)							if (ret3->zip_listeners) {
HXLINE(3307)								ret3->zip_listeners = false;
HXDLIN(3307)								ret3->_hx___validate();
            							}
HXDLIN(3307)							{
HXLINE(3307)								 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite12 = ret3->listeners->head;
HXDLIN(3307)								while(hx::IsNotNull( cx_ite12 )){
HXLINE(3307)									 ::zpp_nape::callbacks::ZPP_InteractionListener x1 = cx_ite12->elt;
HXDLIN(3307)									if ((x1->event == 6)) {
HXLINE(3308)										bool _hx_tmp11;
HXDLIN(3308)										bool _hx_tmp12;
HXDLIN(3308)										if (!(!(sleeping))) {
HXLINE(3308)											_hx_tmp12 = x1->allowSleepingCallbacks;
            										}
            										else {
HXLINE(3308)											_hx_tmp12 = true;
            										}
HXDLIN(3308)										if (_hx_tmp12) {
HXLINE(3308)											_hx_tmp11 = !(set->empty_arb(x1->itype));
            										}
            										else {
HXLINE(3308)											_hx_tmp11 = false;
            										}
HXDLIN(3308)										if (_hx_tmp11) {
HXLINE(3309)											 ::zpp_nape::callbacks::ZPP_Callback cb = _gthis->push_callback(x1);
HXLINE(3310)											cb->event = 6;
HXLINE(3311)											{
HXLINE(3311)												 ::zpp_nape::phys::ZPP_Interactor o11 = set->int1;
HXDLIN(3311)												 ::zpp_nape::phys::ZPP_Interactor o2 = set->int2;
HXDLIN(3311)												bool _hx_tmp13;
HXDLIN(3311)												 ::zpp_nape::callbacks::ZPP_OptionType _this3 = x1->options1;
HXDLIN(3311)												 ::zpp_nape::util::ZNPList_ZPP_CbType xs = o11->cbTypes;
HXDLIN(3311)												bool _hx_tmp14;
HXDLIN(3311)												if (_this3->nonemptyintersection(xs,_this3->includes)) {
HXLINE(3311)													_hx_tmp14 = !(_this3->nonemptyintersection(xs,_this3->excludes));
            												}
            												else {
HXLINE(3311)													_hx_tmp14 = false;
            												}
HXDLIN(3311)												if (_hx_tmp14) {
HXLINE(3311)													 ::zpp_nape::callbacks::ZPP_OptionType _this4 = x1->options2;
HXDLIN(3311)													 ::zpp_nape::util::ZNPList_ZPP_CbType xs1 = o2->cbTypes;
HXDLIN(3311)													if (_this4->nonemptyintersection(xs1,_this4->includes)) {
HXLINE(3311)														_hx_tmp13 = !(_this4->nonemptyintersection(xs1,_this4->excludes));
            													}
            													else {
HXLINE(3311)														_hx_tmp13 = false;
            													}
            												}
            												else {
HXLINE(3311)													_hx_tmp13 = false;
            												}
HXDLIN(3311)												if (_hx_tmp13) {
HXLINE(3311)													cb->int1 = o11;
HXDLIN(3311)													cb->int2 = o2;
            												}
            												else {
HXLINE(3311)													cb->int1 = o2;
HXDLIN(3311)													cb->int2 = o11;
            												}
            											}
HXLINE(3312)											cb->set = set;
            										}
            									}
HXLINE(3307)									cx_ite12 = cx_ite12->next;
            								}
            							}
            						}
            					}
HXLINE(3315)					pre1 = cx_ite9;
            				}
HXLINE(3317)				cx_ite9 = cx_ite9->next;
            			}
            		}
HXLINE(3320)		while(!(this->callbacks->empty())){
HXLINE(3321)			 ::zpp_nape::callbacks::ZPP_Callback cb1 = this->callbacks->pop();
HXLINE(3322)			if ((cb1->listener->type == 0)) {
HXLINE(3323)				 ::zpp_nape::callbacks::ZPP_BodyListener o3 = cb1->listener->body;
HXLINE(3324)				 ::Dynamic o4 = o3->handler;
HXDLIN(3324)				o4(cb1->wrapper_body());
            			}
            			else {
HXLINE(3326)				if ((cb1->listener->type == 1)) {
HXLINE(3327)					 ::zpp_nape::callbacks::ZPP_ConstraintListener o5 = cb1->listener->constraint;
HXLINE(3328)					 ::Dynamic o6 = o5->handler;
HXDLIN(3328)					o6(cb1->wrapper_con());
            				}
            				else {
HXLINE(3330)					if ((cb1->listener->type == 2)) {
HXLINE(3331)						 ::zpp_nape::callbacks::ZPP_InteractionListener o7 = cb1->listener->interaction;
HXLINE(3332)						 ::Dynamic o8 = o7->handleri;
HXDLIN(3332)						o8(cb1->wrapper_int());
            					}
            				}
            			}
HXLINE(3334)			{
HXLINE(3335)				 ::zpp_nape::callbacks::ZPP_Callback o9 = cb1;
HXLINE(3344)				{
HXLINE(3344)					o9->int1 = (o9->int2 = null());
HXDLIN(3344)					o9->body = null();
HXDLIN(3344)					o9->constraint = null();
HXDLIN(3344)					o9->listener = null();
HXDLIN(3344)					if (hx::IsNotNull( o9->wrap_arbiters )) {
HXLINE(3344)						o9->wrap_arbiters->zpp_inner->inner = null();
            					}
HXDLIN(3344)					o9->set = null();
            				}
HXLINE(3345)				o9->next = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;
HXLINE(3346)				::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = o9;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,step,(void))

void ZPP_Space_obj::continuousCollisions(Float deltaTime){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3354_continuousCollisions)
HXLINE(3355)		Float MAX_VEL = ((( (Float)(2) ) * ::Math_obj::PI) / deltaTime);
HXLINE(3356)		this->bphase->broadphase(hx::ObjectPtr<OBJ_>(this),false);
HXLINE(3357)		Float curTimeAlpha = ((Float)0.0);
HXLINE(3358)		while(true){
HXLINE(3358)			bool _hx_tmp;
HXDLIN(3358)			if ((curTimeAlpha < 1)) {
HXLINE(3358)				_hx_tmp = hx::IsNotNull( this->toiEvents->head );
            			}
            			else {
HXLINE(3358)				_hx_tmp = false;
            			}
HXDLIN(3358)			if (!(_hx_tmp)) {
HXLINE(3358)				goto _hx_goto_135;
            			}
HXLINE(3359)			 ::zpp_nape::geom::ZPP_ToiEvent minTOI = null();
HXLINE(3360)			Float minTime = ((Float)2.0);
HXLINE(3361)			bool minKinematic = false;
HXLINE(3362)			 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent preMin = null();
HXLINE(3363)			 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre = null();
HXLINE(3364)			{
HXLINE(3365)				 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent cx_ite = this->toiEvents->head;
HXLINE(3366)				while(hx::IsNotNull( cx_ite )){
HXLINE(3367)					 ::zpp_nape::geom::ZPP_ToiEvent toi = cx_ite->elt;
HXLINE(3368)					{
HXLINE(3369)						 ::zpp_nape::phys::ZPP_Body b1 = toi->s1->body;
HXLINE(3370)						 ::zpp_nape::phys::ZPP_Body b2 = toi->s2->body;
HXLINE(3371)						bool _hx_tmp1;
HXDLIN(3371)						if (b1->sweepFrozen) {
HXLINE(3371)							_hx_tmp1 = b2->sweepFrozen;
            						}
            						else {
HXLINE(3371)							_hx_tmp1 = false;
            						}
HXDLIN(3371)						if (_hx_tmp1) {
HXLINE(3372)							bool _hx_tmp2;
HXDLIN(3372)							if ((toi->toi != 0)) {
HXLINE(3372)								_hx_tmp2 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(toi->s1,toi->s2);
            							}
            							else {
HXLINE(3372)								_hx_tmp2 = false;
            							}
HXDLIN(3372)							if (_hx_tmp2) {
HXLINE(3373)								toi->toi = ( (Float)(0) );
            							}
            							else {
HXLINE(3376)								cx_ite = this->toiEvents->erase(pre);
HXLINE(3377)								{
HXLINE(3378)									 ::zpp_nape::geom::ZPP_ToiEvent o = toi;
HXLINE(3388)									o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3389)									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
            								}
HXLINE(3394)								continue;
            							}
            						}
HXLINE(3397)						bool _hx_tmp3;
HXDLIN(3397)						if ((toi->frozen1 == b1->sweepFrozen)) {
HXLINE(3397)							_hx_tmp3 = (toi->frozen2 != b2->sweepFrozen);
            						}
            						else {
HXLINE(3397)							_hx_tmp3 = true;
            						}
HXDLIN(3397)						if (_hx_tmp3) {
HXLINE(3398)							if (!(toi->kinematic)) {
HXLINE(3399)								toi->frozen1 = b1->sweepFrozen;
HXLINE(3400)								toi->frozen2 = b2->sweepFrozen;
HXLINE(3401)								if (toi->frozen1) {
HXLINE(3402)									 ::zpp_nape::shape::ZPP_Shape tmp = toi->s1;
HXLINE(3403)									toi->s1 = toi->s2;
HXLINE(3404)									toi->s2 = tmp;
HXLINE(3405)									toi->frozen1 = false;
HXLINE(3406)									toi->frozen2 = true;
            								}
HXLINE(3408)								::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,( (Float)(0) ),::nape::Config_obj::collisionSlopCCD);
HXLINE(3409)								if ((toi->toi < 0)) {
HXLINE(3410)									cx_ite = this->toiEvents->erase(pre);
HXLINE(3411)									{
HXLINE(3412)										 ::zpp_nape::geom::ZPP_ToiEvent o1 = toi;
HXLINE(3422)										o1->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3423)										::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o1;
            									}
HXLINE(3428)									continue;
            								}
            							}
            							else {
HXLINE(3432)								cx_ite = this->toiEvents->erase(pre);
HXLINE(3433)								{
HXLINE(3434)									 ::zpp_nape::geom::ZPP_ToiEvent o2 = toi;
HXLINE(3444)									o2->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3445)									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o2;
            								}
HXLINE(3450)								continue;
            							}
            						}
HXLINE(3453)						bool _hx_tmp4;
HXDLIN(3453)						if ((toi->toi >= 0)) {
HXLINE(3453)							if (!((toi->toi < minTime))) {
HXLINE(3453)								if (!(minKinematic)) {
HXLINE(3453)									_hx_tmp4 = toi->kinematic;
            								}
            								else {
HXLINE(3453)									_hx_tmp4 = false;
            								}
            							}
            							else {
HXLINE(3453)								_hx_tmp4 = true;
            							}
            						}
            						else {
HXLINE(3453)							_hx_tmp4 = false;
            						}
HXDLIN(3453)						if (_hx_tmp4) {
HXLINE(3454)							minTOI = toi;
HXLINE(3455)							minTime = toi->toi;
HXLINE(3456)							minKinematic = toi->kinematic;
HXLINE(3457)							preMin = pre;
            						}
HXLINE(3459)						pre = cx_ite;
            					}
HXLINE(3461)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(3464)			if (hx::IsNull( minTOI )) {
HXLINE(3465)				goto _hx_goto_135;
            			}
HXLINE(3467)			this->toiEvents->erase(preMin);
HXLINE(3468)			curTimeAlpha = minTOI->toi;
HXLINE(3469)			 ::zpp_nape::phys::ZPP_Body b11 = minTOI->s1->body;
HXLINE(3470)			 ::zpp_nape::phys::ZPP_Body b21 = minTOI->s2->body;
HXLINE(3471)			if (!(b11->sweepFrozen)) {
HXLINE(3472)				{
HXLINE(3472)					Float dt = (curTimeAlpha * deltaTime);
HXDLIN(3472)					Float delta = (dt - b11->sweepTime);
HXDLIN(3472)					if ((delta != 0)) {
HXLINE(3472)						b11->sweepTime = dt;
HXDLIN(3472)						{
HXLINE(3472)							Float t = delta;
HXDLIN(3472)							 ::zpp_nape::phys::ZPP_Body b12 = b11;
HXDLIN(3472)							b12->posx = (b12->posx + (b11->velx * t));
HXDLIN(3472)							 ::zpp_nape::phys::ZPP_Body b13 = b11;
HXDLIN(3472)							b13->posy = (b13->posy + (b11->vely * t));
            						}
HXDLIN(3472)						if ((b11->angvel != 0)) {
HXLINE(3472)							Float dr = (b11->sweep_angvel * delta);
HXDLIN(3472)							 ::zpp_nape::phys::ZPP_Body b14 = b11;
HXDLIN(3472)							b14->rot = (b14->rot + dr);
HXDLIN(3472)							if (((dr * dr) > ((Float)0.0001))) {
HXLINE(3472)								b11->axisx = ::Math_obj::sin(b11->rot);
HXDLIN(3472)								b11->axisy = ::Math_obj::cos(b11->rot);
            							}
            							else {
HXLINE(3472)								Float d2 = (dr * dr);
HXDLIN(3472)								Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(3472)								Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(3472)								Float nx = (((p * b11->axisx) + (dr * b11->axisy)) * m);
HXDLIN(3472)								b11->axisy = (((p * b11->axisy) - (dr * b11->axisx)) * m);
HXDLIN(3472)								b11->axisx = nx;
            							}
            						}
            					}
            				}
HXLINE(3473)				{
HXLINE(3473)					 ::zpp_nape::shape::ZPP_Shape s = minTOI->s1;
HXDLIN(3473)					if ((s->type == 0)) {
HXLINE(3473)						s->worldCOMx = (b11->posx + ((b11->axisy * s->localCOMx) - (b11->axisx * s->localCOMy)));
HXDLIN(3473)						s->worldCOMy = (b11->posy + ((s->localCOMx * b11->axisx) + (s->localCOMy * b11->axisy)));
            					}
            					else {
HXLINE(3473)						 ::zpp_nape::shape::ZPP_Polygon p1 = s->polygon;
HXDLIN(3473)						 ::zpp_nape::geom::ZPP_Vec2 li = p1->lverts->next;
HXDLIN(3473)						{
HXLINE(3473)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = p1->gverts->next;
HXDLIN(3473)							while(hx::IsNotNull( cx_ite1 )){
HXLINE(3473)								 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN(3473)								{
HXLINE(3473)									 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(3473)									li = li->next;
HXDLIN(3473)									{
HXLINE(3473)										g->x = (b11->posx + ((b11->axisy * l->x) - (b11->axisx * l->y)));
HXDLIN(3473)										g->y = (b11->posy + ((l->x * b11->axisx) + (l->y * b11->axisy)));
            									}
            								}
HXDLIN(3473)								cx_ite1 = cx_ite1->next;
            							}
            						}
HXDLIN(3473)						 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = p1->edges->head;
HXDLIN(3473)						{
HXLINE(3473)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = p1->gverts->next;
HXDLIN(3473)							 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;
HXDLIN(3473)							cx_ite2 = cx_ite2->next;
HXDLIN(3473)							while(hx::IsNotNull( cx_ite2 )){
HXLINE(3473)								 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;
HXDLIN(3473)								{
HXLINE(3473)									 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN(3473)									ite = ite->next;
HXDLIN(3473)									{
HXLINE(3473)										e->gnormx = ((b11->axisy * e->lnormx) - (b11->axisx * e->lnormy));
HXDLIN(3473)										e->gnormy = ((e->lnormx * b11->axisx) + (e->lnormy * b11->axisy));
            									}
HXDLIN(3473)									e->gprojection = (((b11->posx * e->gnormx) + (b11->posy * e->gnormy)) + e->lprojection);
HXDLIN(3473)									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
HXDLIN(3473)									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
            								}
HXDLIN(3473)								u = v;
HXDLIN(3473)								cx_ite2 = cx_ite2->next;
            							}
HXDLIN(3473)							 ::zpp_nape::geom::ZPP_Vec2 v1 = p1->gverts->next;
HXDLIN(3473)							{
HXLINE(3473)								 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN(3473)								ite = ite->next;
HXDLIN(3473)								{
HXLINE(3473)									e1->gnormx = ((b11->axisy * e1->lnormx) - (b11->axisx * e1->lnormy));
HXDLIN(3473)									e1->gnormy = ((e1->lnormx * b11->axisx) + (e1->lnormy * b11->axisy));
            								}
HXDLIN(3473)								e1->gprojection = (((b11->posx * e1->gnormx) + (b11->posy * e1->gnormy)) + e1->lprojection);
HXDLIN(3473)								e1->tp0 = ((u->y * e1->gnormx) - (u->x * e1->gnormy));
HXDLIN(3473)								e1->tp1 = ((v1->y * e1->gnormx) - (v1->x * e1->gnormy));
            							}
            						}
            					}
            				}
            			}
HXLINE(3475)			if (!(b21->sweepFrozen)) {
HXLINE(3476)				{
HXLINE(3476)					Float dt1 = (curTimeAlpha * deltaTime);
HXDLIN(3476)					Float delta1 = (dt1 - b21->sweepTime);
HXDLIN(3476)					if ((delta1 != 0)) {
HXLINE(3476)						b21->sweepTime = dt1;
HXDLIN(3476)						{
HXLINE(3476)							Float t1 = delta1;
HXDLIN(3476)							 ::zpp_nape::phys::ZPP_Body b22 = b21;
HXDLIN(3476)							b22->posx = (b22->posx + (b21->velx * t1));
HXDLIN(3476)							 ::zpp_nape::phys::ZPP_Body b23 = b21;
HXDLIN(3476)							b23->posy = (b23->posy + (b21->vely * t1));
            						}
HXDLIN(3476)						if ((b21->angvel != 0)) {
HXLINE(3476)							Float dr1 = (b21->sweep_angvel * delta1);
HXDLIN(3476)							 ::zpp_nape::phys::ZPP_Body b24 = b21;
HXDLIN(3476)							b24->rot = (b24->rot + dr1);
HXDLIN(3476)							if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(3476)								b21->axisx = ::Math_obj::sin(b21->rot);
HXDLIN(3476)								b21->axisy = ::Math_obj::cos(b21->rot);
            							}
            							else {
HXLINE(3476)								Float d21 = (dr1 * dr1);
HXDLIN(3476)								Float p2 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(3476)								Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(3476)								Float nx1 = (((p2 * b21->axisx) + (dr1 * b21->axisy)) * m1);
HXDLIN(3476)								b21->axisy = (((p2 * b21->axisy) - (dr1 * b21->axisx)) * m1);
HXDLIN(3476)								b21->axisx = nx1;
            							}
            						}
            					}
            				}
HXLINE(3477)				{
HXLINE(3477)					 ::zpp_nape::shape::ZPP_Shape s1 = minTOI->s2;
HXDLIN(3477)					if ((s1->type == 0)) {
HXLINE(3477)						s1->worldCOMx = (b21->posx + ((b21->axisy * s1->localCOMx) - (b21->axisx * s1->localCOMy)));
HXDLIN(3477)						s1->worldCOMy = (b21->posy + ((s1->localCOMx * b21->axisx) + (s1->localCOMy * b21->axisy)));
            					}
            					else {
HXLINE(3477)						 ::zpp_nape::shape::ZPP_Polygon p3 = s1->polygon;
HXDLIN(3477)						 ::zpp_nape::geom::ZPP_Vec2 li1 = p3->lverts->next;
HXDLIN(3477)						{
HXLINE(3477)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = p3->gverts->next;
HXDLIN(3477)							while(hx::IsNotNull( cx_ite3 )){
HXLINE(3477)								 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite3;
HXDLIN(3477)								{
HXLINE(3477)									 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN(3477)									li1 = li1->next;
HXDLIN(3477)									{
HXLINE(3477)										g1->x = (b21->posx + ((b21->axisy * l1->x) - (b21->axisx * l1->y)));
HXDLIN(3477)										g1->y = (b21->posy + ((l1->x * b21->axisx) + (l1->y * b21->axisy)));
            									}
            								}
HXDLIN(3477)								cx_ite3 = cx_ite3->next;
            							}
            						}
HXDLIN(3477)						 ::zpp_nape::util::ZNPNode_ZPP_Edge ite1 = p3->edges->head;
HXDLIN(3477)						{
HXLINE(3477)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = p3->gverts->next;
HXDLIN(3477)							 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite4;
HXDLIN(3477)							cx_ite4 = cx_ite4->next;
HXDLIN(3477)							while(hx::IsNotNull( cx_ite4 )){
HXLINE(3477)								 ::zpp_nape::geom::ZPP_Vec2 v2 = cx_ite4;
HXDLIN(3477)								{
HXLINE(3477)									 ::zpp_nape::shape::ZPP_Edge e2 = ite1->elt;
HXDLIN(3477)									ite1 = ite1->next;
HXDLIN(3477)									{
HXLINE(3477)										e2->gnormx = ((b21->axisy * e2->lnormx) - (b21->axisx * e2->lnormy));
HXDLIN(3477)										e2->gnormy = ((e2->lnormx * b21->axisx) + (e2->lnormy * b21->axisy));
            									}
HXDLIN(3477)									e2->gprojection = (((b21->posx * e2->gnormx) + (b21->posy * e2->gnormy)) + e2->lprojection);
HXDLIN(3477)									e2->tp0 = ((u1->y * e2->gnormx) - (u1->x * e2->gnormy));
HXDLIN(3477)									e2->tp1 = ((v2->y * e2->gnormx) - (v2->x * e2->gnormy));
            								}
HXDLIN(3477)								u1 = v2;
HXDLIN(3477)								cx_ite4 = cx_ite4->next;
            							}
HXDLIN(3477)							 ::zpp_nape::geom::ZPP_Vec2 v3 = p3->gverts->next;
HXDLIN(3477)							{
HXLINE(3477)								 ::zpp_nape::shape::ZPP_Edge e3 = ite1->elt;
HXDLIN(3477)								ite1 = ite1->next;
HXDLIN(3477)								{
HXLINE(3477)									e3->gnormx = ((b21->axisy * e3->lnormx) - (b21->axisx * e3->lnormy));
HXDLIN(3477)									e3->gnormy = ((e3->lnormx * b21->axisx) + (e3->lnormy * b21->axisy));
            								}
HXDLIN(3477)								e3->gprojection = (((b21->posx * e3->gnormx) + (b21->posy * e3->gnormy)) + e3->lprojection);
HXDLIN(3477)								e3->tp0 = ((u1->y * e3->gnormx) - (u1->x * e3->gnormy));
HXDLIN(3477)								e3->tp1 = ((v3->y * e3->gnormx) - (v3->x * e3->gnormy));
            							}
            						}
            					}
            				}
            			}
HXLINE(3479)			bool wasnull = hx::IsNull( minTOI->arbiter );
HXLINE(3480)			 ::zpp_nape::dynamics::ZPP_Arbiter arb = this->narrowPhase(minTOI->s1,minTOI->s2,true,minTOI->arbiter,true);
HXLINE(3481)			if (hx::IsNull( arb )) {
HXLINE(3482)				bool _hx_tmp5;
HXDLIN(3482)				if (hx::IsNotNull( minTOI->arbiter )) {
HXLINE(3482)					_hx_tmp5 = hx::IsNotNull( minTOI->arbiter->pair );
            				}
            				else {
HXLINE(3482)					_hx_tmp5 = false;
            				}
HXDLIN(3482)				if (_hx_tmp5) {
HXLINE(3483)					minTOI->arbiter->pair->arb = null();
HXLINE(3484)					minTOI->arbiter->pair = null();
            				}
            			}
            			else {
HXLINE(3488)				if (!(this->presteparb(arb,deltaTime,true))) {
HXLINE(3489)					bool _hx_tmp6;
HXDLIN(3489)					if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(3489)						if (arb->active) {
HXLINE(3489)							_hx_tmp6 = ((arb->immState & 1) != 0);
            						}
            						else {
HXLINE(3489)							_hx_tmp6 = false;
            						}
            					}
            					else {
HXLINE(3489)						_hx_tmp6 = false;
            					}
HXDLIN(3489)					if (_hx_tmp6) {
HXLINE(3490)						{
HXLINE(3490)							 ::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;
HXDLIN(3490)							{
HXLINE(3490)								Float jx = ((_this->nx * _this->c1->jnAcc) - (_this->ny * _this->c1->jtAcc));
HXDLIN(3490)								Float jy = ((_this->ny * _this->c1->jnAcc) + (_this->nx * _this->c1->jtAcc));
HXDLIN(3490)								{
HXLINE(3490)									Float t2 = _this->b1->imass;
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this1 = _this->b1;
HXDLIN(3490)									_this1->velx = (_this1->velx - (jx * t2));
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this2 = _this->b1;
HXDLIN(3490)									_this2->vely = (_this2->vely - (jy * t2));
            								}
HXDLIN(3490)								 ::zpp_nape::phys::ZPP_Body _this3 = _this->b1;
HXDLIN(3490)								_this3->angvel = (_this3->angvel - (_this->b1->iinertia * ((jy * _this->c1->r1x) - (jx * _this->c1->r1y))));
HXDLIN(3490)								{
HXLINE(3490)									Float t3 = _this->b2->imass;
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this4 = _this->b2;
HXDLIN(3490)									_this4->velx = (_this4->velx + (jx * t3));
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this5 = _this->b2;
HXDLIN(3490)									_this5->vely = (_this5->vely + (jy * t3));
            								}
HXDLIN(3490)								 ::zpp_nape::phys::ZPP_Body _this6 = _this->b2;
HXDLIN(3490)								_this6->angvel = (_this6->angvel + (_this->b2->iinertia * ((jy * _this->c1->r2x) - (jx * _this->c1->r2y))));
            							}
HXDLIN(3490)							if (_this->hc2) {
HXLINE(3490)								Float jx1 = ((_this->nx * _this->c2->jnAcc) - (_this->ny * _this->c2->jtAcc));
HXDLIN(3490)								Float jy1 = ((_this->ny * _this->c2->jnAcc) + (_this->nx * _this->c2->jtAcc));
HXDLIN(3490)								{
HXLINE(3490)									Float t4 = _this->b1->imass;
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this7 = _this->b1;
HXDLIN(3490)									_this7->velx = (_this7->velx - (jx1 * t4));
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this8 = _this->b1;
HXDLIN(3490)									_this8->vely = (_this8->vely - (jy1 * t4));
            								}
HXDLIN(3490)								 ::zpp_nape::phys::ZPP_Body _this9 = _this->b1;
HXDLIN(3490)								_this9->angvel = (_this9->angvel - (_this->b1->iinertia * ((jy1 * _this->c2->r1x) - (jx1 * _this->c2->r1y))));
HXDLIN(3490)								{
HXLINE(3490)									Float t5 = _this->b2->imass;
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this10 = _this->b2;
HXDLIN(3490)									_this10->velx = (_this10->velx + (jx1 * t5));
HXDLIN(3490)									 ::zpp_nape::phys::ZPP_Body _this11 = _this->b2;
HXDLIN(3490)									_this11->vely = (_this11->vely + (jy1 * t5));
            								}
HXDLIN(3490)								 ::zpp_nape::phys::ZPP_Body _this12 = _this->b2;
HXDLIN(3490)								_this12->angvel = (_this12->angvel + (_this->b2->iinertia * ((jy1 * _this->c2->r2x) - (jx1 * _this->c2->r2y))));
            							}
HXDLIN(3490)							 ::zpp_nape::phys::ZPP_Body _this13 = _this->b2;
HXDLIN(3490)							_this13->angvel = (_this13->angvel + (_this->jrAcc * _this->b2->iinertia));
HXDLIN(3490)							 ::zpp_nape::phys::ZPP_Body _this14 = _this->b1;
HXDLIN(3490)							_this14->angvel = (_this14->angvel - (_this->jrAcc * _this->b1->iinertia));
            						}
HXLINE(3491)						{
HXLINE(3491)							 ::zpp_nape::dynamics::ZPP_ColArbiter _this15 = arb->colarb;
HXDLIN(3491)							Float v1x = (((_this15->k1x + _this15->b2->velx) - (_this15->c1->r2y * _this15->b2->angvel)) - (_this15->b1->velx - (_this15->c1->r1y * _this15->b1->angvel)));
HXDLIN(3491)							Float v1y = (((_this15->k1y + _this15->b2->vely) + (_this15->c1->r2x * _this15->b2->angvel)) - (_this15->b1->vely + (_this15->c1->r1x * _this15->b1->angvel)));
HXDLIN(3491)							Float j = ((((v1y * _this15->nx) - (v1x * _this15->ny)) + _this15->surfacex) * _this15->c1->tMass);
HXDLIN(3491)							Float jMax = (_this15->c1->friction * _this15->c1->jnAcc);
HXDLIN(3491)							Float jOld = _this15->c1->jtAcc;
HXDLIN(3491)							Float cjAcc = (jOld - j);
HXDLIN(3491)							if ((cjAcc > jMax)) {
HXLINE(3491)								cjAcc = jMax;
            							}
            							else {
HXLINE(3491)								if ((cjAcc < -(jMax))) {
HXLINE(3491)									cjAcc = -(jMax);
            								}
            							}
HXDLIN(3491)							j = (cjAcc - jOld);
HXDLIN(3491)							_this15->c1->jtAcc = cjAcc;
HXDLIN(3491)							Float jx2 = (-(_this15->ny) * j);
HXDLIN(3491)							Float jy2 = (_this15->nx * j);
HXDLIN(3491)							 ::zpp_nape::phys::ZPP_Body _this16 = _this15->b2;
HXDLIN(3491)							_this16->velx = (_this16->velx + (jx2 * _this15->b2->imass));
HXDLIN(3491)							 ::zpp_nape::phys::ZPP_Body _this17 = _this15->b2;
HXDLIN(3491)							_this17->vely = (_this17->vely + (jy2 * _this15->b2->imass));
HXDLIN(3491)							 ::zpp_nape::phys::ZPP_Body _this18 = _this15->b1;
HXDLIN(3491)							_this18->velx = (_this18->velx - (jx2 * _this15->b1->imass));
HXDLIN(3491)							 ::zpp_nape::phys::ZPP_Body _this19 = _this15->b1;
HXDLIN(3491)							_this19->vely = (_this19->vely - (jy2 * _this15->b1->imass));
HXDLIN(3491)							 ::zpp_nape::phys::ZPP_Body _this20 = _this15->b2;
HXDLIN(3491)							_this20->angvel = (_this20->angvel + ((_this15->rt1b * j) * _this15->b2->iinertia));
HXDLIN(3491)							 ::zpp_nape::phys::ZPP_Body _this21 = _this15->b1;
HXDLIN(3491)							_this21->angvel = (_this21->angvel - ((_this15->rt1a * j) * _this15->b1->iinertia));
HXDLIN(3491)							if (_this15->hc2) {
HXLINE(3491)								Float v2x = (((_this15->k2x + _this15->b2->velx) - (_this15->c2->r2y * _this15->b2->angvel)) - (_this15->b1->velx - (_this15->c2->r1y * _this15->b1->angvel)));
HXDLIN(3491)								Float v2y = (((_this15->k2y + _this15->b2->vely) + (_this15->c2->r2x * _this15->b2->angvel)) - (_this15->b1->vely + (_this15->c2->r1x * _this15->b1->angvel)));
HXDLIN(3491)								j = ((((v2y * _this15->nx) - (v2x * _this15->ny)) + _this15->surfacex) * _this15->c2->tMass);
HXDLIN(3491)								jMax = (_this15->c2->friction * _this15->c2->jnAcc);
HXDLIN(3491)								jOld = _this15->c2->jtAcc;
HXDLIN(3491)								cjAcc = (jOld - j);
HXDLIN(3491)								if ((cjAcc > jMax)) {
HXLINE(3491)									cjAcc = jMax;
            								}
            								else {
HXLINE(3491)									if ((cjAcc < -(jMax))) {
HXLINE(3491)										cjAcc = -(jMax);
            									}
            								}
HXDLIN(3491)								j = (cjAcc - jOld);
HXDLIN(3491)								_this15->c2->jtAcc = cjAcc;
HXDLIN(3491)								jx2 = (-(_this15->ny) * j);
HXDLIN(3491)								jy2 = (_this15->nx * j);
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this22 = _this15->b2;
HXDLIN(3491)								_this22->velx = (_this22->velx + (jx2 * _this15->b2->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this23 = _this15->b2;
HXDLIN(3491)								_this23->vely = (_this23->vely + (jy2 * _this15->b2->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this24 = _this15->b1;
HXDLIN(3491)								_this24->velx = (_this24->velx - (jx2 * _this15->b1->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this25 = _this15->b1;
HXDLIN(3491)								_this25->vely = (_this25->vely - (jy2 * _this15->b1->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this26 = _this15->b2;
HXDLIN(3491)								_this26->angvel = (_this26->angvel + ((_this15->rt2b * j) * _this15->b2->iinertia));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this27 = _this15->b1;
HXDLIN(3491)								_this27->angvel = (_this27->angvel - ((_this15->rt2a * j) * _this15->b1->iinertia));
HXDLIN(3491)								v1x = (((_this15->k1x + _this15->b2->velx) - (_this15->c1->r2y * _this15->b2->angvel)) - (_this15->b1->velx - (_this15->c1->r1y * _this15->b1->angvel)));
HXDLIN(3491)								v1y = (((_this15->k1y + _this15->b2->vely) + (_this15->c1->r2x * _this15->b2->angvel)) - (_this15->b1->vely + (_this15->c1->r1x * _this15->b1->angvel)));
HXDLIN(3491)								v2x = (((_this15->k2x + _this15->b2->velx) - (_this15->c2->r2y * _this15->b2->angvel)) - (_this15->b1->velx - (_this15->c2->r1y * _this15->b1->angvel)));
HXDLIN(3491)								v2y = (((_this15->k2y + _this15->b2->vely) + (_this15->c2->r2x * _this15->b2->angvel)) - (_this15->b1->vely + (_this15->c2->r1x * _this15->b1->angvel)));
HXDLIN(3491)								Float ax = _this15->c1->jnAcc;
HXDLIN(3491)								Float ay = _this15->c2->jnAcc;
HXDLIN(3491)								Float jnx = (((((v1x * _this15->nx) + (v1y * _this15->ny)) + _this15->surfacey) + _this15->c1->bounce) - ((_this15->Ka * ax) + (_this15->Kb * ay)));
HXDLIN(3491)								Float jny = (((((v2x * _this15->nx) + (v2y * _this15->ny)) + _this15->surfacey) + _this15->c2->bounce) - ((_this15->Kb * ax) + (_this15->Kc * ay)));
HXDLIN(3491)								Float xx = -(((_this15->kMassa * jnx) + (_this15->kMassb * jny)));
HXDLIN(3491)								Float xy = -(((_this15->kMassb * jnx) + (_this15->kMassc * jny)));
HXDLIN(3491)								bool _hx_tmp7;
HXDLIN(3491)								if ((xx >= 0)) {
HXLINE(3491)									_hx_tmp7 = (xy >= 0);
            								}
            								else {
HXLINE(3491)									_hx_tmp7 = false;
            								}
HXDLIN(3491)								if (_hx_tmp7) {
HXLINE(3491)									{
HXLINE(3491)										jnx = (xx - ax);
HXDLIN(3491)										jny = (xy - ay);
            									}
HXDLIN(3491)									_this15->c1->jnAcc = xx;
HXDLIN(3491)									_this15->c2->jnAcc = xy;
            								}
            								else {
HXLINE(3491)									xx = (-(_this15->c1->nMass) * jnx);
HXDLIN(3491)									bool _hx_tmp8;
HXDLIN(3491)									if ((xx >= 0)) {
HXLINE(3491)										_hx_tmp8 = (((_this15->Kb * xx) + jny) >= 0);
            									}
            									else {
HXLINE(3491)										_hx_tmp8 = false;
            									}
HXDLIN(3491)									if (_hx_tmp8) {
HXLINE(3491)										jnx = (xx - ax);
HXDLIN(3491)										jny = -(ay);
HXDLIN(3491)										_this15->c1->jnAcc = xx;
HXDLIN(3491)										_this15->c2->jnAcc = ( (Float)(0) );
            									}
            									else {
HXLINE(3491)										xy = (-(_this15->c2->nMass) * jny);
HXDLIN(3491)										bool _hx_tmp9;
HXDLIN(3491)										if ((xy >= 0)) {
HXLINE(3491)											_hx_tmp9 = (((_this15->Kb * xy) + jnx) >= 0);
            										}
            										else {
HXLINE(3491)											_hx_tmp9 = false;
            										}
HXDLIN(3491)										if (_hx_tmp9) {
HXLINE(3491)											jnx = -(ax);
HXDLIN(3491)											jny = (xy - ay);
HXDLIN(3491)											_this15->c1->jnAcc = ( (Float)(0) );
HXDLIN(3491)											_this15->c2->jnAcc = xy;
            										}
            										else {
HXLINE(3491)											bool _hx_tmp10;
HXDLIN(3491)											if ((jnx >= 0)) {
HXLINE(3491)												_hx_tmp10 = (jny >= 0);
            											}
            											else {
HXLINE(3491)												_hx_tmp10 = false;
            											}
HXDLIN(3491)											if (_hx_tmp10) {
HXLINE(3491)												jnx = -(ax);
HXDLIN(3491)												jny = -(ay);
HXDLIN(3491)												_this15->c1->jnAcc = (_this15->c2->jnAcc = ( (Float)(0) ));
            											}
            											else {
HXLINE(3491)												jnx = ( (Float)(0) );
HXDLIN(3491)												jny = ( (Float)(0) );
            											}
            										}
            									}
            								}
HXDLIN(3491)								j = (jnx + jny);
HXDLIN(3491)								jx2 = (_this15->nx * j);
HXDLIN(3491)								jy2 = (_this15->ny * j);
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this28 = _this15->b2;
HXDLIN(3491)								_this28->velx = (_this28->velx + (jx2 * _this15->b2->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this29 = _this15->b2;
HXDLIN(3491)								_this29->vely = (_this29->vely + (jy2 * _this15->b2->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this30 = _this15->b1;
HXDLIN(3491)								_this30->velx = (_this30->velx - (jx2 * _this15->b1->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this31 = _this15->b1;
HXDLIN(3491)								_this31->vely = (_this31->vely - (jy2 * _this15->b1->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this32 = _this15->b2;
HXDLIN(3491)								_this32->angvel = (_this32->angvel + (((_this15->rn1b * jnx) + (_this15->rn2b * jny)) * _this15->b2->iinertia));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this33 = _this15->b1;
HXDLIN(3491)								_this33->angvel = (_this33->angvel - (((_this15->rn1a * jnx) + (_this15->rn2a * jny)) * _this15->b1->iinertia));
            							}
            							else {
HXLINE(3491)								if ((_this15->radius != ((Float)0.0))) {
HXLINE(3491)									Float dw = (_this15->b2->angvel - _this15->b1->angvel);
HXDLIN(3491)									j = (dw * _this15->rMass);
HXDLIN(3491)									jMax = (_this15->rfric * _this15->c1->jnAcc);
HXDLIN(3491)									jOld = _this15->jrAcc;
HXDLIN(3491)									 ::zpp_nape::dynamics::ZPP_ColArbiter _this34 = _this15;
HXDLIN(3491)									_this34->jrAcc = (_this34->jrAcc - j);
HXDLIN(3491)									if ((_this15->jrAcc > jMax)) {
HXLINE(3491)										_this15->jrAcc = jMax;
            									}
            									else {
HXLINE(3491)										if ((_this15->jrAcc < -(jMax))) {
HXLINE(3491)											_this15->jrAcc = -(jMax);
            										}
            									}
HXDLIN(3491)									j = (_this15->jrAcc - jOld);
HXDLIN(3491)									 ::zpp_nape::phys::ZPP_Body _this35 = _this15->b2;
HXDLIN(3491)									_this35->angvel = (_this35->angvel + (j * _this15->b2->iinertia));
HXDLIN(3491)									 ::zpp_nape::phys::ZPP_Body _this36 = _this15->b1;
HXDLIN(3491)									_this36->angvel = (_this36->angvel - (j * _this15->b1->iinertia));
            								}
HXDLIN(3491)								v1x = (((_this15->k1x + _this15->b2->velx) - (_this15->c1->r2y * _this15->b2->angvel)) - (_this15->b1->velx - (_this15->c1->r1y * _this15->b1->angvel)));
HXDLIN(3491)								v1y = (((_this15->k1y + _this15->b2->vely) + (_this15->c1->r2x * _this15->b2->angvel)) - (_this15->b1->vely + (_this15->c1->r1x * _this15->b1->angvel)));
HXDLIN(3491)								j = (((_this15->c1->bounce + ((_this15->nx * v1x) + (_this15->ny * v1y))) + _this15->surfacey) * _this15->c1->nMass);
HXDLIN(3491)								jOld = _this15->c1->jnAcc;
HXDLIN(3491)								cjAcc = (jOld - j);
HXDLIN(3491)								if ((cjAcc < ((Float)0.0))) {
HXLINE(3491)									cjAcc = ((Float)0.0);
            								}
HXDLIN(3491)								j = (cjAcc - jOld);
HXDLIN(3491)								_this15->c1->jnAcc = cjAcc;
HXDLIN(3491)								jx2 = (_this15->nx * j);
HXDLIN(3491)								jy2 = (_this15->ny * j);
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this37 = _this15->b2;
HXDLIN(3491)								_this37->velx = (_this37->velx + (jx2 * _this15->b2->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this38 = _this15->b2;
HXDLIN(3491)								_this38->vely = (_this38->vely + (jy2 * _this15->b2->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this39 = _this15->b1;
HXDLIN(3491)								_this39->velx = (_this39->velx - (jx2 * _this15->b1->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this40 = _this15->b1;
HXDLIN(3491)								_this40->vely = (_this40->vely - (jy2 * _this15->b1->imass));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this41 = _this15->b2;
HXDLIN(3491)								_this41->angvel = (_this41->angvel + ((_this15->rn1b * j) * _this15->b2->iinertia));
HXDLIN(3491)								 ::zpp_nape::phys::ZPP_Body _this42 = _this15->b1;
HXDLIN(3491)								_this42->angvel = (_this42->angvel - ((_this15->rn1a * j) * _this15->b1->iinertia));
            							}
            						}
HXLINE(3492)						{
HXLINE(3492)							 ::zpp_nape::dynamics::ZPP_ColArbiter _this43 = arb->colarb;
HXDLIN(3492)							Float v1x1 = (((_this43->k1x + _this43->b2->velx) - (_this43->c1->r2y * _this43->b2->angvel)) - (_this43->b1->velx - (_this43->c1->r1y * _this43->b1->angvel)));
HXDLIN(3492)							Float v1y1 = (((_this43->k1y + _this43->b2->vely) + (_this43->c1->r2x * _this43->b2->angvel)) - (_this43->b1->vely + (_this43->c1->r1x * _this43->b1->angvel)));
HXDLIN(3492)							Float j1 = ((((v1y1 * _this43->nx) - (v1x1 * _this43->ny)) + _this43->surfacex) * _this43->c1->tMass);
HXDLIN(3492)							Float jMax1 = (_this43->c1->friction * _this43->c1->jnAcc);
HXDLIN(3492)							Float jOld1 = _this43->c1->jtAcc;
HXDLIN(3492)							Float cjAcc1 = (jOld1 - j1);
HXDLIN(3492)							if ((cjAcc1 > jMax1)) {
HXLINE(3492)								cjAcc1 = jMax1;
            							}
            							else {
HXLINE(3492)								if ((cjAcc1 < -(jMax1))) {
HXLINE(3492)									cjAcc1 = -(jMax1);
            								}
            							}
HXDLIN(3492)							j1 = (cjAcc1 - jOld1);
HXDLIN(3492)							_this43->c1->jtAcc = cjAcc1;
HXDLIN(3492)							Float jx3 = (-(_this43->ny) * j1);
HXDLIN(3492)							Float jy3 = (_this43->nx * j1);
HXDLIN(3492)							 ::zpp_nape::phys::ZPP_Body _this44 = _this43->b2;
HXDLIN(3492)							_this44->velx = (_this44->velx + (jx3 * _this43->b2->imass));
HXDLIN(3492)							 ::zpp_nape::phys::ZPP_Body _this45 = _this43->b2;
HXDLIN(3492)							_this45->vely = (_this45->vely + (jy3 * _this43->b2->imass));
HXDLIN(3492)							 ::zpp_nape::phys::ZPP_Body _this46 = _this43->b1;
HXDLIN(3492)							_this46->velx = (_this46->velx - (jx3 * _this43->b1->imass));
HXDLIN(3492)							 ::zpp_nape::phys::ZPP_Body _this47 = _this43->b1;
HXDLIN(3492)							_this47->vely = (_this47->vely - (jy3 * _this43->b1->imass));
HXDLIN(3492)							 ::zpp_nape::phys::ZPP_Body _this48 = _this43->b2;
HXDLIN(3492)							_this48->angvel = (_this48->angvel + ((_this43->rt1b * j1) * _this43->b2->iinertia));
HXDLIN(3492)							 ::zpp_nape::phys::ZPP_Body _this49 = _this43->b1;
HXDLIN(3492)							_this49->angvel = (_this49->angvel - ((_this43->rt1a * j1) * _this43->b1->iinertia));
HXDLIN(3492)							if (_this43->hc2) {
HXLINE(3492)								Float v2x1 = (((_this43->k2x + _this43->b2->velx) - (_this43->c2->r2y * _this43->b2->angvel)) - (_this43->b1->velx - (_this43->c2->r1y * _this43->b1->angvel)));
HXDLIN(3492)								Float v2y1 = (((_this43->k2y + _this43->b2->vely) + (_this43->c2->r2x * _this43->b2->angvel)) - (_this43->b1->vely + (_this43->c2->r1x * _this43->b1->angvel)));
HXDLIN(3492)								j1 = ((((v2y1 * _this43->nx) - (v2x1 * _this43->ny)) + _this43->surfacex) * _this43->c2->tMass);
HXDLIN(3492)								jMax1 = (_this43->c2->friction * _this43->c2->jnAcc);
HXDLIN(3492)								jOld1 = _this43->c2->jtAcc;
HXDLIN(3492)								cjAcc1 = (jOld1 - j1);
HXDLIN(3492)								if ((cjAcc1 > jMax1)) {
HXLINE(3492)									cjAcc1 = jMax1;
            								}
            								else {
HXLINE(3492)									if ((cjAcc1 < -(jMax1))) {
HXLINE(3492)										cjAcc1 = -(jMax1);
            									}
            								}
HXDLIN(3492)								j1 = (cjAcc1 - jOld1);
HXDLIN(3492)								_this43->c2->jtAcc = cjAcc1;
HXDLIN(3492)								jx3 = (-(_this43->ny) * j1);
HXDLIN(3492)								jy3 = (_this43->nx * j1);
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this50 = _this43->b2;
HXDLIN(3492)								_this50->velx = (_this50->velx + (jx3 * _this43->b2->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this51 = _this43->b2;
HXDLIN(3492)								_this51->vely = (_this51->vely + (jy3 * _this43->b2->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this52 = _this43->b1;
HXDLIN(3492)								_this52->velx = (_this52->velx - (jx3 * _this43->b1->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this53 = _this43->b1;
HXDLIN(3492)								_this53->vely = (_this53->vely - (jy3 * _this43->b1->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this54 = _this43->b2;
HXDLIN(3492)								_this54->angvel = (_this54->angvel + ((_this43->rt2b * j1) * _this43->b2->iinertia));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this55 = _this43->b1;
HXDLIN(3492)								_this55->angvel = (_this55->angvel - ((_this43->rt2a * j1) * _this43->b1->iinertia));
HXDLIN(3492)								v1x1 = (((_this43->k1x + _this43->b2->velx) - (_this43->c1->r2y * _this43->b2->angvel)) - (_this43->b1->velx - (_this43->c1->r1y * _this43->b1->angvel)));
HXDLIN(3492)								v1y1 = (((_this43->k1y + _this43->b2->vely) + (_this43->c1->r2x * _this43->b2->angvel)) - (_this43->b1->vely + (_this43->c1->r1x * _this43->b1->angvel)));
HXDLIN(3492)								v2x1 = (((_this43->k2x + _this43->b2->velx) - (_this43->c2->r2y * _this43->b2->angvel)) - (_this43->b1->velx - (_this43->c2->r1y * _this43->b1->angvel)));
HXDLIN(3492)								v2y1 = (((_this43->k2y + _this43->b2->vely) + (_this43->c2->r2x * _this43->b2->angvel)) - (_this43->b1->vely + (_this43->c2->r1x * _this43->b1->angvel)));
HXDLIN(3492)								Float ax1 = _this43->c1->jnAcc;
HXDLIN(3492)								Float ay1 = _this43->c2->jnAcc;
HXDLIN(3492)								Float jnx1 = (((((v1x1 * _this43->nx) + (v1y1 * _this43->ny)) + _this43->surfacey) + _this43->c1->bounce) - ((_this43->Ka * ax1) + (_this43->Kb * ay1)));
HXDLIN(3492)								Float jny1 = (((((v2x1 * _this43->nx) + (v2y1 * _this43->ny)) + _this43->surfacey) + _this43->c2->bounce) - ((_this43->Kb * ax1) + (_this43->Kc * ay1)));
HXDLIN(3492)								Float xx1 = -(((_this43->kMassa * jnx1) + (_this43->kMassb * jny1)));
HXDLIN(3492)								Float xy1 = -(((_this43->kMassb * jnx1) + (_this43->kMassc * jny1)));
HXDLIN(3492)								bool _hx_tmp11;
HXDLIN(3492)								if ((xx1 >= 0)) {
HXLINE(3492)									_hx_tmp11 = (xy1 >= 0);
            								}
            								else {
HXLINE(3492)									_hx_tmp11 = false;
            								}
HXDLIN(3492)								if (_hx_tmp11) {
HXLINE(3492)									{
HXLINE(3492)										jnx1 = (xx1 - ax1);
HXDLIN(3492)										jny1 = (xy1 - ay1);
            									}
HXDLIN(3492)									_this43->c1->jnAcc = xx1;
HXDLIN(3492)									_this43->c2->jnAcc = xy1;
            								}
            								else {
HXLINE(3492)									xx1 = (-(_this43->c1->nMass) * jnx1);
HXDLIN(3492)									bool _hx_tmp12;
HXDLIN(3492)									if ((xx1 >= 0)) {
HXLINE(3492)										_hx_tmp12 = (((_this43->Kb * xx1) + jny1) >= 0);
            									}
            									else {
HXLINE(3492)										_hx_tmp12 = false;
            									}
HXDLIN(3492)									if (_hx_tmp12) {
HXLINE(3492)										jnx1 = (xx1 - ax1);
HXDLIN(3492)										jny1 = -(ay1);
HXDLIN(3492)										_this43->c1->jnAcc = xx1;
HXDLIN(3492)										_this43->c2->jnAcc = ( (Float)(0) );
            									}
            									else {
HXLINE(3492)										xy1 = (-(_this43->c2->nMass) * jny1);
HXDLIN(3492)										bool _hx_tmp13;
HXDLIN(3492)										if ((xy1 >= 0)) {
HXLINE(3492)											_hx_tmp13 = (((_this43->Kb * xy1) + jnx1) >= 0);
            										}
            										else {
HXLINE(3492)											_hx_tmp13 = false;
            										}
HXDLIN(3492)										if (_hx_tmp13) {
HXLINE(3492)											jnx1 = -(ax1);
HXDLIN(3492)											jny1 = (xy1 - ay1);
HXDLIN(3492)											_this43->c1->jnAcc = ( (Float)(0) );
HXDLIN(3492)											_this43->c2->jnAcc = xy1;
            										}
            										else {
HXLINE(3492)											bool _hx_tmp14;
HXDLIN(3492)											if ((jnx1 >= 0)) {
HXLINE(3492)												_hx_tmp14 = (jny1 >= 0);
            											}
            											else {
HXLINE(3492)												_hx_tmp14 = false;
            											}
HXDLIN(3492)											if (_hx_tmp14) {
HXLINE(3492)												jnx1 = -(ax1);
HXDLIN(3492)												jny1 = -(ay1);
HXDLIN(3492)												_this43->c1->jnAcc = (_this43->c2->jnAcc = ( (Float)(0) ));
            											}
            											else {
HXLINE(3492)												jnx1 = ( (Float)(0) );
HXDLIN(3492)												jny1 = ( (Float)(0) );
            											}
            										}
            									}
            								}
HXDLIN(3492)								j1 = (jnx1 + jny1);
HXDLIN(3492)								jx3 = (_this43->nx * j1);
HXDLIN(3492)								jy3 = (_this43->ny * j1);
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this56 = _this43->b2;
HXDLIN(3492)								_this56->velx = (_this56->velx + (jx3 * _this43->b2->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this57 = _this43->b2;
HXDLIN(3492)								_this57->vely = (_this57->vely + (jy3 * _this43->b2->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this58 = _this43->b1;
HXDLIN(3492)								_this58->velx = (_this58->velx - (jx3 * _this43->b1->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this59 = _this43->b1;
HXDLIN(3492)								_this59->vely = (_this59->vely - (jy3 * _this43->b1->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this60 = _this43->b2;
HXDLIN(3492)								_this60->angvel = (_this60->angvel + (((_this43->rn1b * jnx1) + (_this43->rn2b * jny1)) * _this43->b2->iinertia));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this61 = _this43->b1;
HXDLIN(3492)								_this61->angvel = (_this61->angvel - (((_this43->rn1a * jnx1) + (_this43->rn2a * jny1)) * _this43->b1->iinertia));
            							}
            							else {
HXLINE(3492)								if ((_this43->radius != ((Float)0.0))) {
HXLINE(3492)									Float dw1 = (_this43->b2->angvel - _this43->b1->angvel);
HXDLIN(3492)									j1 = (dw1 * _this43->rMass);
HXDLIN(3492)									jMax1 = (_this43->rfric * _this43->c1->jnAcc);
HXDLIN(3492)									jOld1 = _this43->jrAcc;
HXDLIN(3492)									 ::zpp_nape::dynamics::ZPP_ColArbiter _this62 = _this43;
HXDLIN(3492)									_this62->jrAcc = (_this62->jrAcc - j1);
HXDLIN(3492)									if ((_this43->jrAcc > jMax1)) {
HXLINE(3492)										_this43->jrAcc = jMax1;
            									}
            									else {
HXLINE(3492)										if ((_this43->jrAcc < -(jMax1))) {
HXLINE(3492)											_this43->jrAcc = -(jMax1);
            										}
            									}
HXDLIN(3492)									j1 = (_this43->jrAcc - jOld1);
HXDLIN(3492)									 ::zpp_nape::phys::ZPP_Body _this63 = _this43->b2;
HXDLIN(3492)									_this63->angvel = (_this63->angvel + (j1 * _this43->b2->iinertia));
HXDLIN(3492)									 ::zpp_nape::phys::ZPP_Body _this64 = _this43->b1;
HXDLIN(3492)									_this64->angvel = (_this64->angvel - (j1 * _this43->b1->iinertia));
            								}
HXDLIN(3492)								v1x1 = (((_this43->k1x + _this43->b2->velx) - (_this43->c1->r2y * _this43->b2->angvel)) - (_this43->b1->velx - (_this43->c1->r1y * _this43->b1->angvel)));
HXDLIN(3492)								v1y1 = (((_this43->k1y + _this43->b2->vely) + (_this43->c1->r2x * _this43->b2->angvel)) - (_this43->b1->vely + (_this43->c1->r1x * _this43->b1->angvel)));
HXDLIN(3492)								j1 = (((_this43->c1->bounce + ((_this43->nx * v1x1) + (_this43->ny * v1y1))) + _this43->surfacey) * _this43->c1->nMass);
HXDLIN(3492)								jOld1 = _this43->c1->jnAcc;
HXDLIN(3492)								cjAcc1 = (jOld1 - j1);
HXDLIN(3492)								if ((cjAcc1 < ((Float)0.0))) {
HXLINE(3492)									cjAcc1 = ((Float)0.0);
            								}
HXDLIN(3492)								j1 = (cjAcc1 - jOld1);
HXDLIN(3492)								_this43->c1->jnAcc = cjAcc1;
HXDLIN(3492)								jx3 = (_this43->nx * j1);
HXDLIN(3492)								jy3 = (_this43->ny * j1);
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this65 = _this43->b2;
HXDLIN(3492)								_this65->velx = (_this65->velx + (jx3 * _this43->b2->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this66 = _this43->b2;
HXDLIN(3492)								_this66->vely = (_this66->vely + (jy3 * _this43->b2->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this67 = _this43->b1;
HXDLIN(3492)								_this67->velx = (_this67->velx - (jx3 * _this43->b1->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this68 = _this43->b1;
HXDLIN(3492)								_this68->vely = (_this68->vely - (jy3 * _this43->b1->imass));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this69 = _this43->b2;
HXDLIN(3492)								_this69->angvel = (_this69->angvel + ((_this43->rn1b * j1) * _this43->b2->iinertia));
HXDLIN(3492)								 ::zpp_nape::phys::ZPP_Body _this70 = _this43->b1;
HXDLIN(3492)								_this70->angvel = (_this70->angvel - ((_this43->rn1a * j1) * _this43->b1->iinertia));
            							}
            						}
HXLINE(3493)						{
HXLINE(3493)							 ::zpp_nape::dynamics::ZPP_ColArbiter _this71 = arb->colarb;
HXDLIN(3493)							Float v1x2 = (((_this71->k1x + _this71->b2->velx) - (_this71->c1->r2y * _this71->b2->angvel)) - (_this71->b1->velx - (_this71->c1->r1y * _this71->b1->angvel)));
HXDLIN(3493)							Float v1y2 = (((_this71->k1y + _this71->b2->vely) + (_this71->c1->r2x * _this71->b2->angvel)) - (_this71->b1->vely + (_this71->c1->r1x * _this71->b1->angvel)));
HXDLIN(3493)							Float j2 = ((((v1y2 * _this71->nx) - (v1x2 * _this71->ny)) + _this71->surfacex) * _this71->c1->tMass);
HXDLIN(3493)							Float jMax2 = (_this71->c1->friction * _this71->c1->jnAcc);
HXDLIN(3493)							Float jOld2 = _this71->c1->jtAcc;
HXDLIN(3493)							Float cjAcc2 = (jOld2 - j2);
HXDLIN(3493)							if ((cjAcc2 > jMax2)) {
HXLINE(3493)								cjAcc2 = jMax2;
            							}
            							else {
HXLINE(3493)								if ((cjAcc2 < -(jMax2))) {
HXLINE(3493)									cjAcc2 = -(jMax2);
            								}
            							}
HXDLIN(3493)							j2 = (cjAcc2 - jOld2);
HXDLIN(3493)							_this71->c1->jtAcc = cjAcc2;
HXDLIN(3493)							Float jx4 = (-(_this71->ny) * j2);
HXDLIN(3493)							Float jy4 = (_this71->nx * j2);
HXDLIN(3493)							 ::zpp_nape::phys::ZPP_Body _this72 = _this71->b2;
HXDLIN(3493)							_this72->velx = (_this72->velx + (jx4 * _this71->b2->imass));
HXDLIN(3493)							 ::zpp_nape::phys::ZPP_Body _this73 = _this71->b2;
HXDLIN(3493)							_this73->vely = (_this73->vely + (jy4 * _this71->b2->imass));
HXDLIN(3493)							 ::zpp_nape::phys::ZPP_Body _this74 = _this71->b1;
HXDLIN(3493)							_this74->velx = (_this74->velx - (jx4 * _this71->b1->imass));
HXDLIN(3493)							 ::zpp_nape::phys::ZPP_Body _this75 = _this71->b1;
HXDLIN(3493)							_this75->vely = (_this75->vely - (jy4 * _this71->b1->imass));
HXDLIN(3493)							 ::zpp_nape::phys::ZPP_Body _this76 = _this71->b2;
HXDLIN(3493)							_this76->angvel = (_this76->angvel + ((_this71->rt1b * j2) * _this71->b2->iinertia));
HXDLIN(3493)							 ::zpp_nape::phys::ZPP_Body _this77 = _this71->b1;
HXDLIN(3493)							_this77->angvel = (_this77->angvel - ((_this71->rt1a * j2) * _this71->b1->iinertia));
HXDLIN(3493)							if (_this71->hc2) {
HXLINE(3493)								Float v2x2 = (((_this71->k2x + _this71->b2->velx) - (_this71->c2->r2y * _this71->b2->angvel)) - (_this71->b1->velx - (_this71->c2->r1y * _this71->b1->angvel)));
HXDLIN(3493)								Float v2y2 = (((_this71->k2y + _this71->b2->vely) + (_this71->c2->r2x * _this71->b2->angvel)) - (_this71->b1->vely + (_this71->c2->r1x * _this71->b1->angvel)));
HXDLIN(3493)								j2 = ((((v2y2 * _this71->nx) - (v2x2 * _this71->ny)) + _this71->surfacex) * _this71->c2->tMass);
HXDLIN(3493)								jMax2 = (_this71->c2->friction * _this71->c2->jnAcc);
HXDLIN(3493)								jOld2 = _this71->c2->jtAcc;
HXDLIN(3493)								cjAcc2 = (jOld2 - j2);
HXDLIN(3493)								if ((cjAcc2 > jMax2)) {
HXLINE(3493)									cjAcc2 = jMax2;
            								}
            								else {
HXLINE(3493)									if ((cjAcc2 < -(jMax2))) {
HXLINE(3493)										cjAcc2 = -(jMax2);
            									}
            								}
HXDLIN(3493)								j2 = (cjAcc2 - jOld2);
HXDLIN(3493)								_this71->c2->jtAcc = cjAcc2;
HXDLIN(3493)								jx4 = (-(_this71->ny) * j2);
HXDLIN(3493)								jy4 = (_this71->nx * j2);
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this78 = _this71->b2;
HXDLIN(3493)								_this78->velx = (_this78->velx + (jx4 * _this71->b2->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this79 = _this71->b2;
HXDLIN(3493)								_this79->vely = (_this79->vely + (jy4 * _this71->b2->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this80 = _this71->b1;
HXDLIN(3493)								_this80->velx = (_this80->velx - (jx4 * _this71->b1->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this81 = _this71->b1;
HXDLIN(3493)								_this81->vely = (_this81->vely - (jy4 * _this71->b1->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this82 = _this71->b2;
HXDLIN(3493)								_this82->angvel = (_this82->angvel + ((_this71->rt2b * j2) * _this71->b2->iinertia));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this83 = _this71->b1;
HXDLIN(3493)								_this83->angvel = (_this83->angvel - ((_this71->rt2a * j2) * _this71->b1->iinertia));
HXDLIN(3493)								v1x2 = (((_this71->k1x + _this71->b2->velx) - (_this71->c1->r2y * _this71->b2->angvel)) - (_this71->b1->velx - (_this71->c1->r1y * _this71->b1->angvel)));
HXDLIN(3493)								v1y2 = (((_this71->k1y + _this71->b2->vely) + (_this71->c1->r2x * _this71->b2->angvel)) - (_this71->b1->vely + (_this71->c1->r1x * _this71->b1->angvel)));
HXDLIN(3493)								v2x2 = (((_this71->k2x + _this71->b2->velx) - (_this71->c2->r2y * _this71->b2->angvel)) - (_this71->b1->velx - (_this71->c2->r1y * _this71->b1->angvel)));
HXDLIN(3493)								v2y2 = (((_this71->k2y + _this71->b2->vely) + (_this71->c2->r2x * _this71->b2->angvel)) - (_this71->b1->vely + (_this71->c2->r1x * _this71->b1->angvel)));
HXDLIN(3493)								Float ax2 = _this71->c1->jnAcc;
HXDLIN(3493)								Float ay2 = _this71->c2->jnAcc;
HXDLIN(3493)								Float jnx2 = (((((v1x2 * _this71->nx) + (v1y2 * _this71->ny)) + _this71->surfacey) + _this71->c1->bounce) - ((_this71->Ka * ax2) + (_this71->Kb * ay2)));
HXDLIN(3493)								Float jny2 = (((((v2x2 * _this71->nx) + (v2y2 * _this71->ny)) + _this71->surfacey) + _this71->c2->bounce) - ((_this71->Kb * ax2) + (_this71->Kc * ay2)));
HXDLIN(3493)								Float xx2 = -(((_this71->kMassa * jnx2) + (_this71->kMassb * jny2)));
HXDLIN(3493)								Float xy2 = -(((_this71->kMassb * jnx2) + (_this71->kMassc * jny2)));
HXDLIN(3493)								bool _hx_tmp15;
HXDLIN(3493)								if ((xx2 >= 0)) {
HXLINE(3493)									_hx_tmp15 = (xy2 >= 0);
            								}
            								else {
HXLINE(3493)									_hx_tmp15 = false;
            								}
HXDLIN(3493)								if (_hx_tmp15) {
HXLINE(3493)									{
HXLINE(3493)										jnx2 = (xx2 - ax2);
HXDLIN(3493)										jny2 = (xy2 - ay2);
            									}
HXDLIN(3493)									_this71->c1->jnAcc = xx2;
HXDLIN(3493)									_this71->c2->jnAcc = xy2;
            								}
            								else {
HXLINE(3493)									xx2 = (-(_this71->c1->nMass) * jnx2);
HXDLIN(3493)									bool _hx_tmp16;
HXDLIN(3493)									if ((xx2 >= 0)) {
HXLINE(3493)										_hx_tmp16 = (((_this71->Kb * xx2) + jny2) >= 0);
            									}
            									else {
HXLINE(3493)										_hx_tmp16 = false;
            									}
HXDLIN(3493)									if (_hx_tmp16) {
HXLINE(3493)										jnx2 = (xx2 - ax2);
HXDLIN(3493)										jny2 = -(ay2);
HXDLIN(3493)										_this71->c1->jnAcc = xx2;
HXDLIN(3493)										_this71->c2->jnAcc = ( (Float)(0) );
            									}
            									else {
HXLINE(3493)										xy2 = (-(_this71->c2->nMass) * jny2);
HXDLIN(3493)										bool _hx_tmp17;
HXDLIN(3493)										if ((xy2 >= 0)) {
HXLINE(3493)											_hx_tmp17 = (((_this71->Kb * xy2) + jnx2) >= 0);
            										}
            										else {
HXLINE(3493)											_hx_tmp17 = false;
            										}
HXDLIN(3493)										if (_hx_tmp17) {
HXLINE(3493)											jnx2 = -(ax2);
HXDLIN(3493)											jny2 = (xy2 - ay2);
HXDLIN(3493)											_this71->c1->jnAcc = ( (Float)(0) );
HXDLIN(3493)											_this71->c2->jnAcc = xy2;
            										}
            										else {
HXLINE(3493)											bool _hx_tmp18;
HXDLIN(3493)											if ((jnx2 >= 0)) {
HXLINE(3493)												_hx_tmp18 = (jny2 >= 0);
            											}
            											else {
HXLINE(3493)												_hx_tmp18 = false;
            											}
HXDLIN(3493)											if (_hx_tmp18) {
HXLINE(3493)												jnx2 = -(ax2);
HXDLIN(3493)												jny2 = -(ay2);
HXDLIN(3493)												_this71->c1->jnAcc = (_this71->c2->jnAcc = ( (Float)(0) ));
            											}
            											else {
HXLINE(3493)												jnx2 = ( (Float)(0) );
HXDLIN(3493)												jny2 = ( (Float)(0) );
            											}
            										}
            									}
            								}
HXDLIN(3493)								j2 = (jnx2 + jny2);
HXDLIN(3493)								jx4 = (_this71->nx * j2);
HXDLIN(3493)								jy4 = (_this71->ny * j2);
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this84 = _this71->b2;
HXDLIN(3493)								_this84->velx = (_this84->velx + (jx4 * _this71->b2->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this85 = _this71->b2;
HXDLIN(3493)								_this85->vely = (_this85->vely + (jy4 * _this71->b2->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this86 = _this71->b1;
HXDLIN(3493)								_this86->velx = (_this86->velx - (jx4 * _this71->b1->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this87 = _this71->b1;
HXDLIN(3493)								_this87->vely = (_this87->vely - (jy4 * _this71->b1->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this88 = _this71->b2;
HXDLIN(3493)								_this88->angvel = (_this88->angvel + (((_this71->rn1b * jnx2) + (_this71->rn2b * jny2)) * _this71->b2->iinertia));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this89 = _this71->b1;
HXDLIN(3493)								_this89->angvel = (_this89->angvel - (((_this71->rn1a * jnx2) + (_this71->rn2a * jny2)) * _this71->b1->iinertia));
            							}
            							else {
HXLINE(3493)								if ((_this71->radius != ((Float)0.0))) {
HXLINE(3493)									Float dw2 = (_this71->b2->angvel - _this71->b1->angvel);
HXDLIN(3493)									j2 = (dw2 * _this71->rMass);
HXDLIN(3493)									jMax2 = (_this71->rfric * _this71->c1->jnAcc);
HXDLIN(3493)									jOld2 = _this71->jrAcc;
HXDLIN(3493)									 ::zpp_nape::dynamics::ZPP_ColArbiter _this90 = _this71;
HXDLIN(3493)									_this90->jrAcc = (_this90->jrAcc - j2);
HXDLIN(3493)									if ((_this71->jrAcc > jMax2)) {
HXLINE(3493)										_this71->jrAcc = jMax2;
            									}
            									else {
HXLINE(3493)										if ((_this71->jrAcc < -(jMax2))) {
HXLINE(3493)											_this71->jrAcc = -(jMax2);
            										}
            									}
HXDLIN(3493)									j2 = (_this71->jrAcc - jOld2);
HXDLIN(3493)									 ::zpp_nape::phys::ZPP_Body _this91 = _this71->b2;
HXDLIN(3493)									_this91->angvel = (_this91->angvel + (j2 * _this71->b2->iinertia));
HXDLIN(3493)									 ::zpp_nape::phys::ZPP_Body _this92 = _this71->b1;
HXDLIN(3493)									_this92->angvel = (_this92->angvel - (j2 * _this71->b1->iinertia));
            								}
HXDLIN(3493)								v1x2 = (((_this71->k1x + _this71->b2->velx) - (_this71->c1->r2y * _this71->b2->angvel)) - (_this71->b1->velx - (_this71->c1->r1y * _this71->b1->angvel)));
HXDLIN(3493)								v1y2 = (((_this71->k1y + _this71->b2->vely) + (_this71->c1->r2x * _this71->b2->angvel)) - (_this71->b1->vely + (_this71->c1->r1x * _this71->b1->angvel)));
HXDLIN(3493)								j2 = (((_this71->c1->bounce + ((_this71->nx * v1x2) + (_this71->ny * v1y2))) + _this71->surfacey) * _this71->c1->nMass);
HXDLIN(3493)								jOld2 = _this71->c1->jnAcc;
HXDLIN(3493)								cjAcc2 = (jOld2 - j2);
HXDLIN(3493)								if ((cjAcc2 < ((Float)0.0))) {
HXLINE(3493)									cjAcc2 = ((Float)0.0);
            								}
HXDLIN(3493)								j2 = (cjAcc2 - jOld2);
HXDLIN(3493)								_this71->c1->jnAcc = cjAcc2;
HXDLIN(3493)								jx4 = (_this71->nx * j2);
HXDLIN(3493)								jy4 = (_this71->ny * j2);
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this93 = _this71->b2;
HXDLIN(3493)								_this93->velx = (_this93->velx + (jx4 * _this71->b2->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this94 = _this71->b2;
HXDLIN(3493)								_this94->vely = (_this94->vely + (jy4 * _this71->b2->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this95 = _this71->b1;
HXDLIN(3493)								_this95->velx = (_this95->velx - (jx4 * _this71->b1->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this96 = _this71->b1;
HXDLIN(3493)								_this96->vely = (_this96->vely - (jy4 * _this71->b1->imass));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this97 = _this71->b2;
HXDLIN(3493)								_this97->angvel = (_this97->angvel + ((_this71->rn1b * j2) * _this71->b2->iinertia));
HXDLIN(3493)								 ::zpp_nape::phys::ZPP_Body _this98 = _this71->b1;
HXDLIN(3493)								_this98->angvel = (_this98->angvel - ((_this71->rn1a * j2) * _this71->b1->iinertia));
            							}
            						}
HXLINE(3494)						{
HXLINE(3494)							 ::zpp_nape::dynamics::ZPP_ColArbiter _this99 = arb->colarb;
HXDLIN(3494)							Float v1x3 = (((_this99->k1x + _this99->b2->velx) - (_this99->c1->r2y * _this99->b2->angvel)) - (_this99->b1->velx - (_this99->c1->r1y * _this99->b1->angvel)));
HXDLIN(3494)							Float v1y3 = (((_this99->k1y + _this99->b2->vely) + (_this99->c1->r2x * _this99->b2->angvel)) - (_this99->b1->vely + (_this99->c1->r1x * _this99->b1->angvel)));
HXDLIN(3494)							Float j3 = ((((v1y3 * _this99->nx) - (v1x3 * _this99->ny)) + _this99->surfacex) * _this99->c1->tMass);
HXDLIN(3494)							Float jMax3 = (_this99->c1->friction * _this99->c1->jnAcc);
HXDLIN(3494)							Float jOld3 = _this99->c1->jtAcc;
HXDLIN(3494)							Float cjAcc3 = (jOld3 - j3);
HXDLIN(3494)							if ((cjAcc3 > jMax3)) {
HXLINE(3494)								cjAcc3 = jMax3;
            							}
            							else {
HXLINE(3494)								if ((cjAcc3 < -(jMax3))) {
HXLINE(3494)									cjAcc3 = -(jMax3);
            								}
            							}
HXDLIN(3494)							j3 = (cjAcc3 - jOld3);
HXDLIN(3494)							_this99->c1->jtAcc = cjAcc3;
HXDLIN(3494)							Float jx5 = (-(_this99->ny) * j3);
HXDLIN(3494)							Float jy5 = (_this99->nx * j3);
HXDLIN(3494)							 ::zpp_nape::phys::ZPP_Body _this100 = _this99->b2;
HXDLIN(3494)							_this100->velx = (_this100->velx + (jx5 * _this99->b2->imass));
HXDLIN(3494)							 ::zpp_nape::phys::ZPP_Body _this101 = _this99->b2;
HXDLIN(3494)							_this101->vely = (_this101->vely + (jy5 * _this99->b2->imass));
HXDLIN(3494)							 ::zpp_nape::phys::ZPP_Body _this102 = _this99->b1;
HXDLIN(3494)							_this102->velx = (_this102->velx - (jx5 * _this99->b1->imass));
HXDLIN(3494)							 ::zpp_nape::phys::ZPP_Body _this103 = _this99->b1;
HXDLIN(3494)							_this103->vely = (_this103->vely - (jy5 * _this99->b1->imass));
HXDLIN(3494)							 ::zpp_nape::phys::ZPP_Body _this104 = _this99->b2;
HXDLIN(3494)							_this104->angvel = (_this104->angvel + ((_this99->rt1b * j3) * _this99->b2->iinertia));
HXDLIN(3494)							 ::zpp_nape::phys::ZPP_Body _this105 = _this99->b1;
HXDLIN(3494)							_this105->angvel = (_this105->angvel - ((_this99->rt1a * j3) * _this99->b1->iinertia));
HXDLIN(3494)							if (_this99->hc2) {
HXLINE(3494)								Float v2x3 = (((_this99->k2x + _this99->b2->velx) - (_this99->c2->r2y * _this99->b2->angvel)) - (_this99->b1->velx - (_this99->c2->r1y * _this99->b1->angvel)));
HXDLIN(3494)								Float v2y3 = (((_this99->k2y + _this99->b2->vely) + (_this99->c2->r2x * _this99->b2->angvel)) - (_this99->b1->vely + (_this99->c2->r1x * _this99->b1->angvel)));
HXDLIN(3494)								j3 = ((((v2y3 * _this99->nx) - (v2x3 * _this99->ny)) + _this99->surfacex) * _this99->c2->tMass);
HXDLIN(3494)								jMax3 = (_this99->c2->friction * _this99->c2->jnAcc);
HXDLIN(3494)								jOld3 = _this99->c2->jtAcc;
HXDLIN(3494)								cjAcc3 = (jOld3 - j3);
HXDLIN(3494)								if ((cjAcc3 > jMax3)) {
HXLINE(3494)									cjAcc3 = jMax3;
            								}
            								else {
HXLINE(3494)									if ((cjAcc3 < -(jMax3))) {
HXLINE(3494)										cjAcc3 = -(jMax3);
            									}
            								}
HXDLIN(3494)								j3 = (cjAcc3 - jOld3);
HXDLIN(3494)								_this99->c2->jtAcc = cjAcc3;
HXDLIN(3494)								jx5 = (-(_this99->ny) * j3);
HXDLIN(3494)								jy5 = (_this99->nx * j3);
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this106 = _this99->b2;
HXDLIN(3494)								_this106->velx = (_this106->velx + (jx5 * _this99->b2->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this107 = _this99->b2;
HXDLIN(3494)								_this107->vely = (_this107->vely + (jy5 * _this99->b2->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this108 = _this99->b1;
HXDLIN(3494)								_this108->velx = (_this108->velx - (jx5 * _this99->b1->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this109 = _this99->b1;
HXDLIN(3494)								_this109->vely = (_this109->vely - (jy5 * _this99->b1->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this110 = _this99->b2;
HXDLIN(3494)								_this110->angvel = (_this110->angvel + ((_this99->rt2b * j3) * _this99->b2->iinertia));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this111 = _this99->b1;
HXDLIN(3494)								_this111->angvel = (_this111->angvel - ((_this99->rt2a * j3) * _this99->b1->iinertia));
HXDLIN(3494)								v1x3 = (((_this99->k1x + _this99->b2->velx) - (_this99->c1->r2y * _this99->b2->angvel)) - (_this99->b1->velx - (_this99->c1->r1y * _this99->b1->angvel)));
HXDLIN(3494)								v1y3 = (((_this99->k1y + _this99->b2->vely) + (_this99->c1->r2x * _this99->b2->angvel)) - (_this99->b1->vely + (_this99->c1->r1x * _this99->b1->angvel)));
HXDLIN(3494)								v2x3 = (((_this99->k2x + _this99->b2->velx) - (_this99->c2->r2y * _this99->b2->angvel)) - (_this99->b1->velx - (_this99->c2->r1y * _this99->b1->angvel)));
HXDLIN(3494)								v2y3 = (((_this99->k2y + _this99->b2->vely) + (_this99->c2->r2x * _this99->b2->angvel)) - (_this99->b1->vely + (_this99->c2->r1x * _this99->b1->angvel)));
HXDLIN(3494)								Float ax3 = _this99->c1->jnAcc;
HXDLIN(3494)								Float ay3 = _this99->c2->jnAcc;
HXDLIN(3494)								Float jnx3 = (((((v1x3 * _this99->nx) + (v1y3 * _this99->ny)) + _this99->surfacey) + _this99->c1->bounce) - ((_this99->Ka * ax3) + (_this99->Kb * ay3)));
HXDLIN(3494)								Float jny3 = (((((v2x3 * _this99->nx) + (v2y3 * _this99->ny)) + _this99->surfacey) + _this99->c2->bounce) - ((_this99->Kb * ax3) + (_this99->Kc * ay3)));
HXDLIN(3494)								Float xx3 = -(((_this99->kMassa * jnx3) + (_this99->kMassb * jny3)));
HXDLIN(3494)								Float xy3 = -(((_this99->kMassb * jnx3) + (_this99->kMassc * jny3)));
HXDLIN(3494)								bool _hx_tmp19;
HXDLIN(3494)								if ((xx3 >= 0)) {
HXLINE(3494)									_hx_tmp19 = (xy3 >= 0);
            								}
            								else {
HXLINE(3494)									_hx_tmp19 = false;
            								}
HXDLIN(3494)								if (_hx_tmp19) {
HXLINE(3494)									{
HXLINE(3494)										jnx3 = (xx3 - ax3);
HXDLIN(3494)										jny3 = (xy3 - ay3);
            									}
HXDLIN(3494)									_this99->c1->jnAcc = xx3;
HXDLIN(3494)									_this99->c2->jnAcc = xy3;
            								}
            								else {
HXLINE(3494)									xx3 = (-(_this99->c1->nMass) * jnx3);
HXDLIN(3494)									bool _hx_tmp20;
HXDLIN(3494)									if ((xx3 >= 0)) {
HXLINE(3494)										_hx_tmp20 = (((_this99->Kb * xx3) + jny3) >= 0);
            									}
            									else {
HXLINE(3494)										_hx_tmp20 = false;
            									}
HXDLIN(3494)									if (_hx_tmp20) {
HXLINE(3494)										jnx3 = (xx3 - ax3);
HXDLIN(3494)										jny3 = -(ay3);
HXDLIN(3494)										_this99->c1->jnAcc = xx3;
HXDLIN(3494)										_this99->c2->jnAcc = ( (Float)(0) );
            									}
            									else {
HXLINE(3494)										xy3 = (-(_this99->c2->nMass) * jny3);
HXDLIN(3494)										bool _hx_tmp21;
HXDLIN(3494)										if ((xy3 >= 0)) {
HXLINE(3494)											_hx_tmp21 = (((_this99->Kb * xy3) + jnx3) >= 0);
            										}
            										else {
HXLINE(3494)											_hx_tmp21 = false;
            										}
HXDLIN(3494)										if (_hx_tmp21) {
HXLINE(3494)											jnx3 = -(ax3);
HXDLIN(3494)											jny3 = (xy3 - ay3);
HXDLIN(3494)											_this99->c1->jnAcc = ( (Float)(0) );
HXDLIN(3494)											_this99->c2->jnAcc = xy3;
            										}
            										else {
HXLINE(3494)											bool _hx_tmp22;
HXDLIN(3494)											if ((jnx3 >= 0)) {
HXLINE(3494)												_hx_tmp22 = (jny3 >= 0);
            											}
            											else {
HXLINE(3494)												_hx_tmp22 = false;
            											}
HXDLIN(3494)											if (_hx_tmp22) {
HXLINE(3494)												jnx3 = -(ax3);
HXDLIN(3494)												jny3 = -(ay3);
HXDLIN(3494)												_this99->c1->jnAcc = (_this99->c2->jnAcc = ( (Float)(0) ));
            											}
            											else {
HXLINE(3494)												jnx3 = ( (Float)(0) );
HXDLIN(3494)												jny3 = ( (Float)(0) );
            											}
            										}
            									}
            								}
HXDLIN(3494)								j3 = (jnx3 + jny3);
HXDLIN(3494)								jx5 = (_this99->nx * j3);
HXDLIN(3494)								jy5 = (_this99->ny * j3);
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this112 = _this99->b2;
HXDLIN(3494)								_this112->velx = (_this112->velx + (jx5 * _this99->b2->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this113 = _this99->b2;
HXDLIN(3494)								_this113->vely = (_this113->vely + (jy5 * _this99->b2->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this114 = _this99->b1;
HXDLIN(3494)								_this114->velx = (_this114->velx - (jx5 * _this99->b1->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this115 = _this99->b1;
HXDLIN(3494)								_this115->vely = (_this115->vely - (jy5 * _this99->b1->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this116 = _this99->b2;
HXDLIN(3494)								_this116->angvel = (_this116->angvel + (((_this99->rn1b * jnx3) + (_this99->rn2b * jny3)) * _this99->b2->iinertia));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this117 = _this99->b1;
HXDLIN(3494)								_this117->angvel = (_this117->angvel - (((_this99->rn1a * jnx3) + (_this99->rn2a * jny3)) * _this99->b1->iinertia));
            							}
            							else {
HXLINE(3494)								if ((_this99->radius != ((Float)0.0))) {
HXLINE(3494)									Float dw3 = (_this99->b2->angvel - _this99->b1->angvel);
HXDLIN(3494)									j3 = (dw3 * _this99->rMass);
HXDLIN(3494)									jMax3 = (_this99->rfric * _this99->c1->jnAcc);
HXDLIN(3494)									jOld3 = _this99->jrAcc;
HXDLIN(3494)									 ::zpp_nape::dynamics::ZPP_ColArbiter _this118 = _this99;
HXDLIN(3494)									_this118->jrAcc = (_this118->jrAcc - j3);
HXDLIN(3494)									if ((_this99->jrAcc > jMax3)) {
HXLINE(3494)										_this99->jrAcc = jMax3;
            									}
            									else {
HXLINE(3494)										if ((_this99->jrAcc < -(jMax3))) {
HXLINE(3494)											_this99->jrAcc = -(jMax3);
            										}
            									}
HXDLIN(3494)									j3 = (_this99->jrAcc - jOld3);
HXDLIN(3494)									 ::zpp_nape::phys::ZPP_Body _this119 = _this99->b2;
HXDLIN(3494)									_this119->angvel = (_this119->angvel + (j3 * _this99->b2->iinertia));
HXDLIN(3494)									 ::zpp_nape::phys::ZPP_Body _this120 = _this99->b1;
HXDLIN(3494)									_this120->angvel = (_this120->angvel - (j3 * _this99->b1->iinertia));
            								}
HXDLIN(3494)								v1x3 = (((_this99->k1x + _this99->b2->velx) - (_this99->c1->r2y * _this99->b2->angvel)) - (_this99->b1->velx - (_this99->c1->r1y * _this99->b1->angvel)));
HXDLIN(3494)								v1y3 = (((_this99->k1y + _this99->b2->vely) + (_this99->c1->r2x * _this99->b2->angvel)) - (_this99->b1->vely + (_this99->c1->r1x * _this99->b1->angvel)));
HXDLIN(3494)								j3 = (((_this99->c1->bounce + ((_this99->nx * v1x3) + (_this99->ny * v1y3))) + _this99->surfacey) * _this99->c1->nMass);
HXDLIN(3494)								jOld3 = _this99->c1->jnAcc;
HXDLIN(3494)								cjAcc3 = (jOld3 - j3);
HXDLIN(3494)								if ((cjAcc3 < ((Float)0.0))) {
HXLINE(3494)									cjAcc3 = ((Float)0.0);
            								}
HXDLIN(3494)								j3 = (cjAcc3 - jOld3);
HXDLIN(3494)								_this99->c1->jnAcc = cjAcc3;
HXDLIN(3494)								jx5 = (_this99->nx * j3);
HXDLIN(3494)								jy5 = (_this99->ny * j3);
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this121 = _this99->b2;
HXDLIN(3494)								_this121->velx = (_this121->velx + (jx5 * _this99->b2->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this122 = _this99->b2;
HXDLIN(3494)								_this122->vely = (_this122->vely + (jy5 * _this99->b2->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this123 = _this99->b1;
HXDLIN(3494)								_this123->velx = (_this123->velx - (jx5 * _this99->b1->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this124 = _this99->b1;
HXDLIN(3494)								_this124->vely = (_this124->vely - (jy5 * _this99->b1->imass));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this125 = _this99->b2;
HXDLIN(3494)								_this125->angvel = (_this125->angvel + ((_this99->rn1b * j3) * _this99->b2->iinertia));
HXDLIN(3494)								 ::zpp_nape::phys::ZPP_Body _this126 = _this99->b1;
HXDLIN(3494)								_this126->angvel = (_this126->angvel - ((_this99->rn1a * j3) * _this99->b1->iinertia));
            							}
            						}
HXLINE(3495)						b11->sweep_angvel = hx::Mod(b11->angvel,MAX_VEL);
HXLINE(3496)						b21->sweep_angvel = hx::Mod(b21->angvel,MAX_VEL);
            					}
            				}
            			}
HXLINE(3500)			bool _hx_tmp23;
HXDLIN(3500)			bool _hx_tmp24;
HXDLIN(3500)			if (hx::IsNotNull( arb )) {
HXLINE(3500)				if (arb->active) {
HXLINE(3500)					_hx_tmp24 = ((arb->immState & 1) != 0);
            				}
            				else {
HXLINE(3500)					_hx_tmp24 = false;
            				}
            			}
            			else {
HXLINE(3500)				_hx_tmp24 = false;
            			}
HXDLIN(3500)			if (_hx_tmp24) {
HXLINE(3500)				_hx_tmp23 = (arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL);
            			}
            			else {
HXLINE(3500)				_hx_tmp23 = false;
            			}
HXDLIN(3500)			if (_hx_tmp23) {
HXLINE(3501)				bool _hx_tmp25;
HXDLIN(3501)				if (!(b11->sweepFrozen)) {
HXLINE(3501)					_hx_tmp25 = (b11->type != 3);
            				}
            				else {
HXLINE(3501)					_hx_tmp25 = false;
            				}
HXDLIN(3501)				if (_hx_tmp25) {
HXLINE(3502)					b11->sweepFrozen = true;
HXLINE(3503)					if (minTOI->failed) {
HXLINE(3503)						b11->angvel = (b11->sweep_angvel = ( (Float)(0) ));
            					}
            					else {
HXLINE(3504)						if (minTOI->slipped) {
HXLINE(3504)							 ::zpp_nape::phys::ZPP_Body b15 = b11;
HXDLIN(3504)							b15->sweep_angvel = (b15->sweep_angvel * ::nape::Config_obj::angularCCDSlipScale);
HXDLIN(3504)							b11->angvel = b15->sweep_angvel;
            						}
            						else {
HXLINE(3505)							b11->angvel = b11->sweep_angvel;
            						}
            					}
            				}
HXLINE(3507)				bool _hx_tmp26;
HXDLIN(3507)				if (!(b21->sweepFrozen)) {
HXLINE(3507)					_hx_tmp26 = (b21->type != 3);
            				}
            				else {
HXLINE(3507)					_hx_tmp26 = false;
            				}
HXDLIN(3507)				if (_hx_tmp26) {
HXLINE(3508)					b21->sweepFrozen = true;
HXLINE(3509)					if (minTOI->failed) {
HXLINE(3509)						b21->angvel = (b21->sweep_angvel = ( (Float)(0) ));
            					}
            					else {
HXLINE(3510)						if (minTOI->slipped) {
HXLINE(3510)							 ::zpp_nape::phys::ZPP_Body b25 = b21;
HXDLIN(3510)							b25->sweep_angvel = (b25->sweep_angvel * ::nape::Config_obj::angularCCDSlipScale);
HXDLIN(3510)							b21->angvel = b25->sweep_angvel;
            						}
            						else {
HXLINE(3511)							b21->angvel = b21->sweep_angvel;
            						}
            					}
            				}
            			}
HXLINE(3514)			{
HXLINE(3515)				 ::zpp_nape::geom::ZPP_ToiEvent o3 = minTOI;
HXLINE(3525)				o3->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3526)				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o3;
            			}
            		}
            		_hx_goto_135:;
HXLINE(3533)		while(hx::IsNotNull( this->toiEvents->head )){
HXLINE(3534)			 ::zpp_nape::geom::ZPP_ToiEvent toi1 = this->toiEvents->pop_unsafe();
HXLINE(3536)			{
HXLINE(3537)				 ::zpp_nape::geom::ZPP_ToiEvent o4 = toi1;
HXLINE(3547)				o4->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3548)				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o4;
            			}
            		}
HXLINE(3556)		{
HXLINE(3557)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite5 = this->kinematics->head;
HXLINE(3558)			while(hx::IsNotNull( cx_ite5 )){
HXLINE(3559)				 ::zpp_nape::phys::ZPP_Body cur = cx_ite5->elt;
HXLINE(3560)				{
HXLINE(3561)					{
HXLINE(3561)						Float delta2 = (deltaTime - cur->sweepTime);
HXDLIN(3561)						if ((delta2 != 0)) {
HXLINE(3561)							cur->sweepTime = deltaTime;
HXDLIN(3561)							{
HXLINE(3561)								Float t6 = delta2;
HXDLIN(3561)								 ::zpp_nape::phys::ZPP_Body cur1 = cur;
HXDLIN(3561)								cur1->posx = (cur1->posx + (cur->velx * t6));
HXDLIN(3561)								 ::zpp_nape::phys::ZPP_Body cur2 = cur;
HXDLIN(3561)								cur2->posy = (cur2->posy + (cur->vely * t6));
            							}
HXDLIN(3561)							if ((cur->angvel != 0)) {
HXLINE(3561)								Float dr2 = (cur->sweep_angvel * delta2);
HXDLIN(3561)								 ::zpp_nape::phys::ZPP_Body cur3 = cur;
HXDLIN(3561)								cur3->rot = (cur3->rot + dr2);
HXDLIN(3561)								if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(3561)									cur->axisx = ::Math_obj::sin(cur->rot);
HXDLIN(3561)									cur->axisy = ::Math_obj::cos(cur->rot);
            								}
            								else {
HXLINE(3561)									Float d22 = (dr2 * dr2);
HXDLIN(3561)									Float p4 = (( (Float)(1) ) - (((Float)0.5) * d22));
HXDLIN(3561)									Float m2 = (( (Float)(1) ) - ((d22 * d22) / ( (Float)(8) )));
HXDLIN(3561)									Float nx2 = (((p4 * cur->axisx) + (dr2 * cur->axisy)) * m2);
HXDLIN(3561)									cur->axisy = (((p4 * cur->axisy) - (dr2 * cur->axisx)) * m2);
HXDLIN(3561)									cur->axisx = nx2;
            								}
            							}
            						}
            					}
HXLINE(3562)					cur->sweepTime = ( (Float)(0) );
            				}
HXLINE(3564)				cx_ite5 = cx_ite5->next;
            			}
            		}
HXLINE(3567)		{
HXLINE(3568)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite6 = this->live->head;
HXLINE(3569)			while(hx::IsNotNull( cx_ite6 )){
HXLINE(3570)				 ::zpp_nape::phys::ZPP_Body cur4 = cx_ite6->elt;
HXLINE(3571)				{
HXLINE(3572)					if (!(cur4->sweepFrozen)) {
HXLINE(3573)						Float delta3 = (deltaTime - cur4->sweepTime);
HXDLIN(3573)						if ((delta3 != 0)) {
HXLINE(3573)							cur4->sweepTime = deltaTime;
HXDLIN(3573)							{
HXLINE(3573)								Float t7 = delta3;
HXDLIN(3573)								 ::zpp_nape::phys::ZPP_Body cur5 = cur4;
HXDLIN(3573)								cur5->posx = (cur5->posx + (cur4->velx * t7));
HXDLIN(3573)								 ::zpp_nape::phys::ZPP_Body cur6 = cur4;
HXDLIN(3573)								cur6->posy = (cur6->posy + (cur4->vely * t7));
            							}
HXDLIN(3573)							if ((cur4->angvel != 0)) {
HXLINE(3573)								Float dr3 = (cur4->sweep_angvel * delta3);
HXDLIN(3573)								 ::zpp_nape::phys::ZPP_Body cur7 = cur4;
HXDLIN(3573)								cur7->rot = (cur7->rot + dr3);
HXDLIN(3573)								if (((dr3 * dr3) > ((Float)0.0001))) {
HXLINE(3573)									cur4->axisx = ::Math_obj::sin(cur4->rot);
HXDLIN(3573)									cur4->axisy = ::Math_obj::cos(cur4->rot);
            								}
            								else {
HXLINE(3573)									Float d23 = (dr3 * dr3);
HXDLIN(3573)									Float p5 = (( (Float)(1) ) - (((Float)0.5) * d23));
HXDLIN(3573)									Float m3 = (( (Float)(1) ) - ((d23 * d23) / ( (Float)(8) )));
HXDLIN(3573)									Float nx3 = (((p5 * cur4->axisx) + (dr3 * cur4->axisy)) * m3);
HXDLIN(3573)									cur4->axisy = (((p5 * cur4->axisy) - (dr3 * cur4->axisx)) * m3);
HXDLIN(3573)									cur4->axisx = nx3;
            								}
            							}
            						}
            					}
HXLINE(3575)					cur4->sweepTime = ( (Float)(0) );
            				}
HXLINE(3577)				cx_ite6 = cx_ite6->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,continuousCollisions,(void))

 ::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::continuousEvent( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,bool stat, ::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool _){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_3581_continuousEvent)
HXLINE(3582)		bool _hx_tmp;
HXDLIN(3582)		if (s1->body->sweepFrozen) {
HXLINE(3582)			_hx_tmp = s2->body->sweepFrozen;
            		}
            		else {
HXLINE(3582)			_hx_tmp = false;
            		}
HXDLIN(3582)		if (_hx_tmp) {
HXLINE(3582)			return in_arb;
            		}
HXLINE(3583)		bool _hx_tmp1;
HXDLIN(3583)		if (!(s1->body->disableCCD)) {
HXLINE(3583)			_hx_tmp1 = s2->body->disableCCD;
            		}
            		else {
HXLINE(3583)			_hx_tmp1 = true;
            		}
HXDLIN(3583)		if (_hx_tmp1) {
HXLINE(3583)			return in_arb;
            		}
HXLINE(3584)		bool _hx_tmp2;
HXDLIN(3584)		bool _hx_tmp3;
HXDLIN(3584)		if (hx::IsNotNull( in_arb )) {
HXLINE(3584)			_hx_tmp3 = hx::IsNull( in_arb->colarb );
            		}
            		else {
HXLINE(3584)			_hx_tmp3 = false;
            		}
HXDLIN(3584)		if (!(_hx_tmp3)) {
HXLINE(3584)			 ::zpp_nape::phys::ZPP_Body b1 = s1->body;
HXDLIN(3584)			 ::zpp_nape::phys::ZPP_Body b2 = s2->body;
HXDLIN(3584)			bool con_ignore;
HXDLIN(3584)			{
HXLINE(3584)				con_ignore = false;
HXDLIN(3584)				{
HXLINE(3584)					 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;
HXDLIN(3584)					while(hx::IsNotNull( cx_ite )){
HXLINE(3584)						 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXDLIN(3584)						bool _hx_tmp4;
HXDLIN(3584)						if (con->ignore) {
HXLINE(3584)							_hx_tmp4 = con->pair_exists(b1->id,b2->id);
            						}
            						else {
HXLINE(3584)							_hx_tmp4 = false;
            						}
HXDLIN(3584)						if (_hx_tmp4) {
HXLINE(3584)							con_ignore = true;
HXDLIN(3584)							goto _hx_goto_145;
            						}
HXDLIN(3584)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_145:;
            				}
            			}
HXDLIN(3584)			int _hx_tmp5;
HXDLIN(3584)			bool _hx_tmp6;
HXDLIN(3584)			if (!(con_ignore)) {
HXLINE(3584)				 ::zpp_nape::phys::ZPP_Interactor cur = s1;
HXDLIN(3584)				while(true){
HXLINE(3584)					bool _hx_tmp7;
HXDLIN(3584)					if (hx::IsNotNull( cur )) {
HXLINE(3584)						_hx_tmp7 = hx::IsNull( cur->group );
            					}
            					else {
HXLINE(3584)						_hx_tmp7 = false;
            					}
HXDLIN(3584)					if (!(_hx_tmp7)) {
HXLINE(3584)						goto _hx_goto_146;
            					}
HXDLIN(3584)					if (hx::IsNotNull( cur->ishape )) {
HXLINE(3584)						cur = cur->ishape->body;
            					}
            					else {
HXLINE(3584)						if (hx::IsNotNull( cur->icompound )) {
HXLINE(3584)							cur = cur->icompound->compound;
            						}
            						else {
HXLINE(3584)							cur = cur->ibody->compound;
            						}
            					}
            				}
            				_hx_goto_146:;
HXDLIN(3584)				 ::zpp_nape::dynamics::ZPP_InteractionGroup g1;
HXDLIN(3584)				if (hx::IsNull( cur )) {
HXLINE(3584)					g1 = null();
            				}
            				else {
HXLINE(3584)					g1 = cur->group;
            				}
HXDLIN(3584)				bool _hx_tmp8;
HXDLIN(3584)				if (hx::IsNull( g1 )) {
HXLINE(3584)					_hx_tmp8 = false;
            				}
            				else {
HXLINE(3584)					 ::zpp_nape::phys::ZPP_Interactor cur1 = s2;
HXDLIN(3584)					while(true){
HXLINE(3584)						bool _hx_tmp9;
HXDLIN(3584)						if (hx::IsNotNull( cur1 )) {
HXLINE(3584)							_hx_tmp9 = hx::IsNull( cur1->group );
            						}
            						else {
HXLINE(3584)							_hx_tmp9 = false;
            						}
HXDLIN(3584)						if (!(_hx_tmp9)) {
HXLINE(3584)							goto _hx_goto_147;
            						}
HXDLIN(3584)						if (hx::IsNotNull( cur1->ishape )) {
HXLINE(3584)							cur1 = cur1->ishape->body;
            						}
            						else {
HXLINE(3584)							if (hx::IsNotNull( cur1->icompound )) {
HXLINE(3584)								cur1 = cur1->icompound->compound;
            							}
            							else {
HXLINE(3584)								cur1 = cur1->ibody->compound;
            							}
            						}
            					}
            					_hx_goto_147:;
HXDLIN(3584)					 ::zpp_nape::dynamics::ZPP_InteractionGroup g2;
HXDLIN(3584)					if (hx::IsNull( cur1 )) {
HXLINE(3584)						g2 = null();
            					}
            					else {
HXLINE(3584)						g2 = cur1->group;
            					}
HXDLIN(3584)					if (hx::IsNull( g2 )) {
HXLINE(3584)						_hx_tmp8 = false;
            					}
            					else {
HXLINE(3584)						bool ret = false;
HXDLIN(3584)						while(true){
HXLINE(3584)							bool _hx_tmp10;
HXDLIN(3584)							if (hx::IsNotNull( g1 )) {
HXLINE(3584)								_hx_tmp10 = hx::IsNotNull( g2 );
            							}
            							else {
HXLINE(3584)								_hx_tmp10 = false;
            							}
HXDLIN(3584)							if (!(_hx_tmp10)) {
HXLINE(3584)								goto _hx_goto_148;
            							}
HXDLIN(3584)							if (hx::IsEq( g1,g2 )) {
HXLINE(3584)								ret = g1->ignore;
HXDLIN(3584)								goto _hx_goto_148;
            							}
HXDLIN(3584)							if ((g1->depth < g2->depth)) {
HXLINE(3584)								g2 = g2->group;
            							}
            							else {
HXLINE(3584)								g1 = g1->group;
            							}
            						}
            						_hx_goto_148:;
HXDLIN(3584)						_hx_tmp8 = ret;
            					}
            				}
HXDLIN(3584)				_hx_tmp6 = !(_hx_tmp8);
            			}
            			else {
HXLINE(3584)				_hx_tmp6 = false;
            			}
HXDLIN(3584)			if (_hx_tmp6) {
HXLINE(3584)				bool _hx_tmp11;
HXDLIN(3584)				bool _hx_tmp12;
HXDLIN(3584)				if (!(s1->sensorEnabled)) {
HXLINE(3584)					_hx_tmp12 = s2->sensorEnabled;
            				}
            				else {
HXLINE(3584)					_hx_tmp12 = true;
            				}
HXDLIN(3584)				if (_hx_tmp12) {
HXLINE(3584)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;
HXDLIN(3584)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;
HXDLIN(3584)					if (((_this->sensorMask & x->sensorGroup) != 0)) {
HXLINE(3584)						_hx_tmp11 = ((x->sensorMask & _this->sensorGroup) != 0);
            					}
            					else {
HXLINE(3584)						_hx_tmp11 = false;
            					}
            				}
            				else {
HXLINE(3584)					_hx_tmp11 = false;
            				}
HXDLIN(3584)				if (_hx_tmp11) {
HXLINE(3584)					_hx_tmp5 = 2;
            				}
            				else {
HXLINE(3584)					bool _hx_tmp13;
HXDLIN(3584)					bool _hx_tmp14;
HXDLIN(3584)					bool _hx_tmp15;
HXDLIN(3584)					if (!(s1->fluidEnabled)) {
HXLINE(3584)						_hx_tmp15 = s2->fluidEnabled;
            					}
            					else {
HXLINE(3584)						_hx_tmp15 = true;
            					}
HXDLIN(3584)					if (_hx_tmp15) {
HXLINE(3584)						 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = s1->filter;
HXDLIN(3584)						 ::zpp_nape::dynamics::ZPP_InteractionFilter x1 = s2->filter;
HXDLIN(3584)						if (((_this1->fluidMask & x1->fluidGroup) != 0)) {
HXLINE(3584)							_hx_tmp14 = ((x1->fluidMask & _this1->fluidGroup) != 0);
            						}
            						else {
HXLINE(3584)							_hx_tmp14 = false;
            						}
            					}
            					else {
HXLINE(3584)						_hx_tmp14 = false;
            					}
HXDLIN(3584)					if (_hx_tmp14) {
HXLINE(3584)						bool _hx_tmp16;
HXDLIN(3584)						bool _hx_tmp17;
HXDLIN(3584)						bool _hx_tmp18;
HXDLIN(3584)						if ((b1->imass == 0)) {
HXLINE(3584)							_hx_tmp18 = (b2->imass == 0);
            						}
            						else {
HXLINE(3584)							_hx_tmp18 = false;
            						}
HXDLIN(3584)						if (_hx_tmp18) {
HXLINE(3584)							_hx_tmp17 = (b1->iinertia == 0);
            						}
            						else {
HXLINE(3584)							_hx_tmp17 = false;
            						}
HXDLIN(3584)						if (_hx_tmp17) {
HXLINE(3584)							_hx_tmp16 = (b2->iinertia == 0);
            						}
            						else {
HXLINE(3584)							_hx_tmp16 = false;
            						}
HXDLIN(3584)						_hx_tmp13 = !(_hx_tmp16);
            					}
            					else {
HXLINE(3584)						_hx_tmp13 = false;
            					}
HXDLIN(3584)					if (_hx_tmp13) {
HXLINE(3584)						_hx_tmp5 = 0;
            					}
            					else {
HXLINE(3584)						bool _hx_tmp19;
HXDLIN(3584)						 ::zpp_nape::dynamics::ZPP_InteractionFilter _this2 = s1->filter;
HXDLIN(3584)						 ::zpp_nape::dynamics::ZPP_InteractionFilter x2 = s2->filter;
HXDLIN(3584)						bool _hx_tmp20;
HXDLIN(3584)						if (((_this2->collisionMask & x2->collisionGroup) != 0)) {
HXLINE(3584)							_hx_tmp20 = ((x2->collisionMask & _this2->collisionGroup) != 0);
            						}
            						else {
HXLINE(3584)							_hx_tmp20 = false;
            						}
HXDLIN(3584)						if (_hx_tmp20) {
HXLINE(3584)							bool _hx_tmp21;
HXDLIN(3584)							bool _hx_tmp22;
HXDLIN(3584)							bool _hx_tmp23;
HXDLIN(3584)							if ((b1->imass == 0)) {
HXLINE(3584)								_hx_tmp23 = (b2->imass == 0);
            							}
            							else {
HXLINE(3584)								_hx_tmp23 = false;
            							}
HXDLIN(3584)							if (_hx_tmp23) {
HXLINE(3584)								_hx_tmp22 = (b1->iinertia == 0);
            							}
            							else {
HXLINE(3584)								_hx_tmp22 = false;
            							}
HXDLIN(3584)							if (_hx_tmp22) {
HXLINE(3584)								_hx_tmp21 = (b2->iinertia == 0);
            							}
            							else {
HXLINE(3584)								_hx_tmp21 = false;
            							}
HXDLIN(3584)							_hx_tmp19 = !(_hx_tmp21);
            						}
            						else {
HXLINE(3584)							_hx_tmp19 = false;
            						}
HXDLIN(3584)						if (_hx_tmp19) {
HXLINE(3584)							_hx_tmp5 = 1;
            						}
            						else {
HXLINE(3584)							_hx_tmp5 = -1;
            						}
            					}
            				}
            			}
            			else {
HXLINE(3584)				_hx_tmp5 = -1;
            			}
HXDLIN(3584)			_hx_tmp2 = (_hx_tmp5 <= 0);
            		}
            		else {
HXLINE(3584)			_hx_tmp2 = true;
            		}
HXDLIN(3584)		if (_hx_tmp2) {
HXLINE(3585)			return in_arb;
            		}
HXLINE(3587)		 ::zpp_nape::phys::ZPP_Body b11 = s1->body;
HXLINE(3588)		 ::zpp_nape::phys::ZPP_Body b21 = s2->body;
HXLINE(3589)		bool _hx_tmp24;
HXDLIN(3589)		bool _hx_tmp25;
HXDLIN(3589)		if (!(stat)) {
HXLINE(3589)			_hx_tmp25 = b11->bullet;
            		}
            		else {
HXLINE(3589)			_hx_tmp25 = true;
            		}
HXDLIN(3589)		if (!(_hx_tmp25)) {
HXLINE(3589)			_hx_tmp24 = b21->bullet;
            		}
            		else {
HXLINE(3589)			_hx_tmp24 = true;
            		}
HXDLIN(3589)		if (_hx_tmp24) {
HXLINE(3590)			 ::zpp_nape::geom::ZPP_ToiEvent toi;
HXLINE(3591)			{
HXLINE(3592)				if (hx::IsNull( ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(3593)					toi =  ::zpp_nape::geom::ZPP_ToiEvent_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(3599)					toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3600)					::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
HXLINE(3601)					toi->next = null();
            				}
HXLINE(3606)				{
HXLINE(3606)					toi->failed = false;
HXDLIN(3606)					toi->s1 = (toi->s2 = null());
HXDLIN(3606)					toi->arbiter = null();
            				}
            			}
HXLINE(3608)			bool kin;
HXDLIN(3608)			if ((b11->type != 3)) {
HXLINE(3608)				kin = (b21->type == 3);
            			}
            			else {
HXLINE(3608)				kin = true;
            			}
HXLINE(3609)			bool _hx_tmp26;
HXDLIN(3609)			if (stat) {
HXLINE(3609)				_hx_tmp26 = !(kin);
            			}
            			else {
HXLINE(3609)				_hx_tmp26 = false;
            			}
HXDLIN(3609)			if (_hx_tmp26) {
HXLINE(3610)				if ((s1->body->type != 2)) {
HXLINE(3611)					toi->s2 = s1;
HXLINE(3612)					toi->s1 = s2;
            				}
            				else {
HXLINE(3615)					toi->s1 = s1;
HXLINE(3616)					toi->s2 = s2;
            				}
HXLINE(3618)				toi->kinematic = false;
HXLINE(3619)				::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,this->pre_dt,( (Float)(0) ),::nape::Config_obj::collisionSlopCCD);
            			}
            			else {
HXLINE(3622)				toi->s1 = s1;
HXLINE(3623)				toi->s2 = s2;
HXLINE(3624)				toi->kinematic = kin;
HXLINE(3625)				bool _hx_tmp27;
HXDLIN(3625)				if (!(toi->s1->body->sweepFrozen)) {
HXLINE(3625)					_hx_tmp27 = toi->s2->body->sweepFrozen;
            				}
            				else {
HXLINE(3625)					_hx_tmp27 = true;
            				}
HXDLIN(3625)				if (_hx_tmp27) {
HXLINE(3626)					if (toi->s1->body->sweepFrozen) {
HXLINE(3627)						 ::zpp_nape::shape::ZPP_Shape tmp = toi->s1;
HXLINE(3628)						toi->s1 = toi->s2;
HXLINE(3629)						toi->s2 = tmp;
HXLINE(3630)						toi->frozen1 = false;
HXLINE(3631)						toi->frozen2 = true;
            					}
HXLINE(3633)					::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,this->pre_dt,( (Float)(0) ),::nape::Config_obj::collisionSlopCCD);
            				}
            				else {
HXLINE(3636)					::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,this->pre_dt,( (Float)(0) ),::nape::Config_obj::collisionSlopCCD,null());
            				}
            			}
HXLINE(3639)			bool _hx_tmp28;
HXDLIN(3639)			bool _hx_tmp29;
HXDLIN(3639)			if (stat) {
HXLINE(3639)				_hx_tmp29 = (toi->toi < 0);
            			}
            			else {
HXLINE(3639)				_hx_tmp29 = false;
            			}
HXDLIN(3639)			if (!(_hx_tmp29)) {
HXLINE(3639)				_hx_tmp28 = toi->failed;
            			}
            			else {
HXLINE(3639)				_hx_tmp28 = true;
            			}
HXDLIN(3639)			if (_hx_tmp28) {
HXLINE(3641)				 ::zpp_nape::geom::ZPP_ToiEvent o = toi;
HXLINE(3651)				o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
HXLINE(3652)				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
            			}
            			else {
HXLINE(3659)				this->toiEvents->add(toi);
HXLINE(3660)				toi->frozen1 = toi->s1->body->sweepFrozen;
HXLINE(3661)				toi->frozen2 = toi->s2->body->sweepFrozen;
HXLINE(3662)				 ::zpp_nape::dynamics::ZPP_ColArbiter _hx_tmp30;
HXDLIN(3662)				if (hx::IsNotNull( in_arb )) {
HXLINE(3662)					_hx_tmp30 = in_arb->colarb;
            				}
            				else {
HXLINE(3662)					_hx_tmp30 = null();
            				}
HXDLIN(3662)				toi->arbiter = _hx_tmp30;
            			}
            		}
HXLINE(3665)		return in_arb;
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,continuousEvent,return )

void ZPP_Space_obj::bodyCbWake( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3668_bodyCbWake)
HXDLIN(3668)		bool _hx_tmp;
HXDLIN(3668)		if ((b->type == 2)) {
HXDLIN(3668)			_hx_tmp = hx::IsNotNull( b->cbSet );
            		}
            		else {
HXDLIN(3668)			_hx_tmp = false;
            		}
HXDLIN(3668)		if (_hx_tmp) {
HXLINE(3669)			if (this->midstep) {
HXLINE(3671)				 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = b->cbSet->bodylisteners->head;
HXLINE(3672)				while(hx::IsNotNull( cx_ite )){
HXLINE(3673)					 ::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;
HXLINE(3674)					{
HXLINE(3675)						if ((i->event != 2)) {
HXLINE(3676)							cx_ite = cx_ite->next;
HXLINE(3677)							continue;
            						}
HXLINE(3679)						 ::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);
HXLINE(3680)						cb->event = 2;
HXLINE(3681)						cb->body = b;
            					}
HXLINE(3683)					cx_ite = cx_ite->next;
            				}
            			}
            			else {
HXLINE(3687)				b->component->woken = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbWake,(void))

void ZPP_Space_obj::bodyCbSleep( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3691_bodyCbSleep)
HXDLIN(3691)		bool _hx_tmp;
HXDLIN(3691)		if ((b->type == 2)) {
HXDLIN(3691)			_hx_tmp = hx::IsNotNull( b->cbSet );
            		}
            		else {
HXDLIN(3691)			_hx_tmp = false;
            		}
HXDLIN(3691)		if (_hx_tmp) {
HXLINE(3693)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = b->cbSet->bodylisteners->head;
HXLINE(3694)			while(hx::IsNotNull( cx_ite )){
HXLINE(3695)				 ::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;
HXLINE(3696)				{
HXLINE(3697)					if ((i->event != 3)) {
HXLINE(3698)						cx_ite = cx_ite->next;
HXLINE(3699)						continue;
            					}
HXLINE(3701)					 ::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);
HXLINE(3702)					cb->event = 3;
HXLINE(3703)					cb->body = b;
            				}
HXLINE(3705)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbSleep,(void))

void ZPP_Space_obj::constraintCbWake( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3711_constraintCbWake)
HXDLIN(3711)		if (hx::IsNotNull( con->cbSet )) {
HXLINE(3712)			if (this->midstep) {
HXLINE(3714)				 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;
HXLINE(3715)				while(hx::IsNotNull( cx_ite )){
HXLINE(3716)					 ::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;
HXLINE(3717)					{
HXLINE(3718)						if ((i->event != 2)) {
HXLINE(3719)							cx_ite = cx_ite->next;
HXLINE(3720)							continue;
            						}
HXLINE(3722)						 ::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);
HXLINE(3723)						cb->event = 2;
HXLINE(3724)						cb->constraint = con;
            					}
HXLINE(3726)					cx_ite = cx_ite->next;
            				}
            			}
            			else {
HXLINE(3730)				con->component->woken = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbWake,(void))

void ZPP_Space_obj::constraintCbSleep( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3734_constraintCbSleep)
HXDLIN(3734)		if (hx::IsNotNull( con->cbSet )) {
HXLINE(3736)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;
HXLINE(3737)			while(hx::IsNotNull( cx_ite )){
HXLINE(3738)				 ::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;
HXLINE(3739)				{
HXLINE(3740)					if ((i->event != 3)) {
HXLINE(3741)						cx_ite = cx_ite->next;
HXLINE(3742)						continue;
            					}
HXLINE(3744)					 ::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);
HXLINE(3745)					cb->event = 3;
HXLINE(3746)					cb->constraint = con;
            				}
HXLINE(3748)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbSleep,(void))

void ZPP_Space_obj::constraintCbBreak( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3754_constraintCbBreak)
HXDLIN(3754)		if (hx::IsNotNull( con->cbSet )) {
HXLINE(3756)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;
HXLINE(3757)			while(hx::IsNotNull( cx_ite )){
HXLINE(3758)				 ::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;
HXLINE(3759)				{
HXLINE(3760)					if ((i->event != 4)) {
HXLINE(3761)						cx_ite = cx_ite->next;
HXLINE(3762)						continue;
            					}
HXLINE(3764)					 ::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);
HXLINE(3765)					cb->event = 4;
HXLINE(3766)					cb->constraint = con;
            				}
HXLINE(3768)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbBreak,(void))

void ZPP_Space_obj::nullListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1, ::zpp_nape::callbacks::ZPP_CbSet cb2){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_3773_nullListenerType)
HXLINE(3774)		 ::zpp_nape::util::ZNPList_ZPP_Interactor stack =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
HXLINE(3775)		{
HXLINE(3776)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb1->interactors->head;
HXLINE(3777)			while(hx::IsNotNull( cx_ite )){
HXLINE(3778)				 ::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;
HXLINE(3779)				stack->add(i);
HXLINE(3780)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(3783)		if (hx::IsNotEq( cb1,cb2 )) {
HXLINE(3784)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = cb2->interactors->head;
HXLINE(3785)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(3786)				 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;
HXLINE(3787)				stack->add(i1);
HXLINE(3788)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(3791)		while(hx::IsNotNull( stack->head )){
HXLINE(3792)			 ::zpp_nape::phys::ZPP_Interactor intx = stack->pop_unsafe();
HXLINE(3793)			if (hx::IsNotNull( intx->icompound )) {
HXLINE(3794)				 ::zpp_nape::phys::ZPP_Compound comp = intx->icompound;
HXLINE(3795)				{
HXLINE(3796)					 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite2 = comp->bodies->head;
HXLINE(3797)					while(hx::IsNotNull( cx_ite2 )){
HXLINE(3798)						 ::zpp_nape::phys::ZPP_Body i2 = cx_ite2->elt;
HXLINE(3799)						stack->add(i2);
HXLINE(3800)						cx_ite2 = cx_ite2->next;
            					}
            				}
HXLINE(3803)				{
HXLINE(3804)					 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite3 = comp->compounds->head;
HXLINE(3805)					while(hx::IsNotNull( cx_ite3 )){
HXLINE(3806)						 ::zpp_nape::phys::ZPP_Compound i3 = cx_ite3->elt;
HXLINE(3807)						stack->add(i3);
HXLINE(3808)						cx_ite3 = cx_ite3->next;
            					}
            				}
            			}
            			else {
HXLINE(3813)				 ::zpp_nape::phys::ZPP_Body xbody;
HXDLIN(3813)				if (hx::IsNotNull( intx->ibody )) {
HXLINE(3813)					xbody = intx->ibody;
            				}
            				else {
HXLINE(3813)					xbody = intx->ishape->body;
            				}
HXLINE(3814)				 ::zpp_nape::shape::ZPP_Shape xshp;
HXDLIN(3814)				if (hx::IsNotNull( intx->ishape )) {
HXLINE(3814)					xshp = intx->ishape;
            				}
            				else {
HXLINE(3814)					xshp = null();
            				}
HXLINE(3815)				{
HXLINE(3816)					 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite4 = xbody->arbiters->head;
HXLINE(3817)					while(hx::IsNotNull( cx_ite4 )){
HXLINE(3818)						 ::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite4->elt;
HXLINE(3819)						{
HXLINE(3820)							if ((xarb->present == 0)) {
HXLINE(3821)								cx_ite4 = cx_ite4->next;
HXLINE(3822)								continue;
            							}
HXLINE(3824)							bool _hx_tmp;
HXDLIN(3824)							if (hx::IsNotNull( xshp )) {
HXLINE(3824)								bool _hx_tmp1;
HXDLIN(3824)								if (hx::IsNotEq( xarb->ws1,xshp )) {
HXLINE(3824)									_hx_tmp1 = hx::IsEq( xarb->ws2,xshp );
            								}
            								else {
HXLINE(3824)									_hx_tmp1 = true;
            								}
HXDLIN(3824)								_hx_tmp = !(_hx_tmp1);
            							}
            							else {
HXLINE(3824)								_hx_tmp = false;
            							}
HXDLIN(3824)							if (_hx_tmp) {
HXLINE(3825)								cx_ite4 = cx_ite4->next;
HXLINE(3826)								continue;
            							}
HXLINE(3828)							this->MRCA_chains(xarb->ws1,xarb->ws2);
HXLINE(3829)							{
HXLINE(3830)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite5 = this->mrca1->head;
HXLINE(3831)								while(hx::IsNotNull( cx_ite5 )){
HXLINE(3832)									 ::zpp_nape::phys::ZPP_Interactor i11 = cx_ite5->elt;
HXLINE(3833)									{
HXLINE(3834)										bool _hx_tmp2;
HXDLIN(3834)										if (hx::IsNotEq( i11->cbSet,cb1 )) {
HXLINE(3834)											_hx_tmp2 = hx::IsNotEq( i11->cbSet,cb2 );
            										}
            										else {
HXLINE(3834)											_hx_tmp2 = false;
            										}
HXDLIN(3834)										if (_hx_tmp2) {
HXLINE(3835)											cx_ite5 = cx_ite5->next;
HXLINE(3836)											continue;
            										}
HXLINE(3838)										{
HXLINE(3839)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite6 = this->mrca2->head;
HXLINE(3840)											while(hx::IsNotNull( cx_ite6 )){
HXLINE(3841)												 ::zpp_nape::phys::ZPP_Interactor i21 = cx_ite6->elt;
HXLINE(3842)												{
HXLINE(3843)													bool _hx_tmp3;
HXDLIN(3843)													bool _hx_tmp4;
HXDLIN(3843)													if (hx::IsEq( i11->cbSet,cb1 )) {
HXLINE(3843)														_hx_tmp4 = hx::IsNotEq( i21->cbSet,cb2 );
            													}
            													else {
HXLINE(3843)														_hx_tmp4 = false;
            													}
HXDLIN(3843)													if (!(_hx_tmp4)) {
HXLINE(3843)														if (hx::IsEq( i11->cbSet,cb2 )) {
HXLINE(3843)															_hx_tmp3 = hx::IsNotEq( i21->cbSet,cb1 );
            														}
            														else {
HXLINE(3843)															_hx_tmp3 = false;
            														}
            													}
            													else {
HXLINE(3843)														_hx_tmp3 = true;
            													}
HXDLIN(3843)													if (_hx_tmp3) {
HXLINE(3844)														cx_ite6 = cx_ite6->next;
HXLINE(3845)														continue;
            													}
HXLINE(3847)													 ::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i11,i21);
HXLINE(3848)													if (hx::IsNotNull( callbackset )) {
HXLINE(3850)														while(hx::IsNotNull( callbackset->arbiters->head )){
HXLINE(3851)															 ::zpp_nape::dynamics::ZPP_Arbiter arb = callbackset->arbiters->pop_unsafe();
HXLINE(3853)															arb->present--;
            														}
HXLINE(3865)														this->remove_callbackset(callbackset);
            													}
            												}
HXLINE(3868)												cx_ite6 = cx_ite6->next;
            											}
            										}
            									}
HXLINE(3872)									cx_ite5 = cx_ite5->next;
            								}
            							}
            						}
HXLINE(3876)						cx_ite4 = cx_ite4->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullListenerType,(void))

void ZPP_Space_obj::nullInteractorType( ::zpp_nape::phys::ZPP_Interactor intx, ::zpp_nape::phys::ZPP_Interactor me){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_3882_nullInteractorType)
HXLINE(3883)		if (hx::IsNull( me )) {
HXLINE(3883)			me = intx;
            		}
HXLINE(3884)		if (hx::IsNotNull( intx->icompound )) {
HXLINE(3885)			 ::zpp_nape::phys::ZPP_Compound comp = intx->icompound;
HXLINE(3886)			{
HXLINE(3887)				 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;
HXLINE(3888)				while(hx::IsNotNull( cx_ite )){
HXLINE(3889)					 ::zpp_nape::phys::ZPP_Body body = cx_ite->elt;
HXLINE(3890)					this->nullInteractorType(body,me);
HXLINE(3891)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(3894)			{
HXLINE(3895)				 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite1 = comp->compounds->head;
HXLINE(3896)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(3897)					 ::zpp_nape::phys::ZPP_Compound comp1 = cx_ite1->elt;
HXLINE(3898)					this->nullInteractorType(comp1,me);
HXLINE(3899)					cx_ite1 = cx_ite1->next;
            				}
            			}
            		}
            		else {
HXLINE(3904)			 ::zpp_nape::phys::ZPP_Body xbody;
HXDLIN(3904)			if (hx::IsNotNull( intx->ibody )) {
HXLINE(3904)				xbody = intx->ibody;
            			}
            			else {
HXLINE(3904)				xbody = intx->ishape->body;
            			}
HXLINE(3905)			 ::zpp_nape::shape::ZPP_Shape xshp;
HXDLIN(3905)			if (hx::IsNotNull( intx->ishape )) {
HXLINE(3905)				xshp = intx->ishape;
            			}
            			else {
HXLINE(3905)				xshp = null();
            			}
HXLINE(3906)			{
HXLINE(3907)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite2 = xbody->arbiters->head;
HXLINE(3908)				while(hx::IsNotNull( cx_ite2 )){
HXLINE(3909)					 ::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite2->elt;
HXLINE(3910)					{
HXLINE(3911)						if ((xarb->present == 0)) {
HXLINE(3912)							cx_ite2 = cx_ite2->next;
HXLINE(3913)							continue;
            						}
HXLINE(3915)						bool _hx_tmp;
HXDLIN(3915)						if (hx::IsNotNull( xshp )) {
HXLINE(3915)							bool _hx_tmp1;
HXDLIN(3915)							if (hx::IsNotEq( xarb->ws1,xshp )) {
HXLINE(3915)								_hx_tmp1 = hx::IsEq( xarb->ws2,xshp );
            							}
            							else {
HXLINE(3915)								_hx_tmp1 = true;
            							}
HXDLIN(3915)							_hx_tmp = !(_hx_tmp1);
            						}
            						else {
HXLINE(3915)							_hx_tmp = false;
            						}
HXDLIN(3915)						if (_hx_tmp) {
HXLINE(3916)							cx_ite2 = cx_ite2->next;
HXLINE(3917)							continue;
            						}
HXLINE(3919)						this->MRCA_chains(xarb->ws1,xarb->ws2);
HXLINE(3920)						{
HXLINE(3921)							 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite3 = this->mrca1->head;
HXLINE(3922)							while(hx::IsNotNull( cx_ite3 )){
HXLINE(3923)								 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite3->elt;
HXLINE(3925)								{
HXLINE(3926)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite4 = this->mrca2->head;
HXLINE(3927)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(3928)										 ::zpp_nape::phys::ZPP_Interactor i2 = cx_ite4->elt;
HXLINE(3929)										{
HXLINE(3930)											bool _hx_tmp2;
HXDLIN(3930)											if (hx::IsNotEq( i1,me )) {
HXLINE(3930)												_hx_tmp2 = hx::IsNotEq( i2,me );
            											}
            											else {
HXLINE(3930)												_hx_tmp2 = false;
            											}
HXDLIN(3930)											if (_hx_tmp2) {
HXLINE(3931)												cx_ite4 = cx_ite4->next;
HXLINE(3932)												continue;
            											}
HXLINE(3934)											 ::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
HXLINE(3935)											if (hx::IsNotNull( callbackset )) {
HXLINE(3936)												xarb->present--;
HXLINE(3945)												callbackset->remove_arb(xarb);
HXLINE(3946)												if (hx::IsNull( callbackset->arbiters->head )) {
HXLINE(3947)													this->remove_callbackset(callbackset);
            												}
            											}
            										}
HXLINE(3951)										cx_ite4 = cx_ite4->next;
            									}
            								}
HXLINE(3955)								cx_ite3 = cx_ite3->next;
            							}
            						}
            					}
HXLINE(3959)					cx_ite2 = cx_ite2->next;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullInteractorType,(void))

void ZPP_Space_obj::freshListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1, ::zpp_nape::callbacks::ZPP_CbSet cb2){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_3964_freshListenerType)
HXLINE(3965)		 ::zpp_nape::util::ZNPList_ZPP_Interactor stack =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
HXLINE(3966)		{
HXLINE(3967)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb1->interactors->head;
HXLINE(3968)			while(hx::IsNotNull( cx_ite )){
HXLINE(3969)				 ::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;
HXLINE(3970)				stack->add(i);
HXLINE(3971)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(3974)		if (hx::IsNotEq( cb1,cb2 )) {
HXLINE(3975)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = cb2->interactors->head;
HXLINE(3976)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(3977)				 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;
HXLINE(3978)				stack->add(i1);
HXLINE(3979)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(3982)		while(hx::IsNotNull( stack->head )){
HXLINE(3983)			 ::zpp_nape::phys::ZPP_Interactor intx = stack->pop_unsafe();
HXLINE(3984)			if (hx::IsNotNull( intx->icompound )) {
HXLINE(3985)				 ::zpp_nape::phys::ZPP_Compound comp = intx->icompound;
HXLINE(3986)				{
HXLINE(3987)					 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite2 = comp->bodies->head;
HXLINE(3988)					while(hx::IsNotNull( cx_ite2 )){
HXLINE(3989)						 ::zpp_nape::phys::ZPP_Body i2 = cx_ite2->elt;
HXLINE(3990)						stack->add(i2);
HXLINE(3991)						cx_ite2 = cx_ite2->next;
            					}
            				}
HXLINE(3994)				{
HXLINE(3995)					 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite3 = comp->compounds->head;
HXLINE(3996)					while(hx::IsNotNull( cx_ite3 )){
HXLINE(3997)						 ::zpp_nape::phys::ZPP_Compound i3 = cx_ite3->elt;
HXLINE(3998)						stack->add(i3);
HXLINE(3999)						cx_ite3 = cx_ite3->next;
            					}
            				}
            			}
            			else {
HXLINE(4004)				 ::zpp_nape::phys::ZPP_Body xbody;
HXDLIN(4004)				if (hx::IsNotNull( intx->ibody )) {
HXLINE(4004)					xbody = intx->ibody;
            				}
            				else {
HXLINE(4004)					xbody = intx->ishape->body;
            				}
HXLINE(4005)				 ::zpp_nape::shape::ZPP_Shape xshp;
HXDLIN(4005)				if (hx::IsNotNull( intx->ishape )) {
HXLINE(4005)					xshp = intx->ishape;
            				}
            				else {
HXLINE(4005)					xshp = null();
            				}
HXLINE(4006)				{
HXLINE(4007)					 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite4 = xbody->arbiters->head;
HXLINE(4008)					while(hx::IsNotNull( cx_ite4 )){
HXLINE(4009)						 ::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite4->elt;
HXLINE(4010)						{
HXLINE(4011)							if (!(xarb->presentable)) {
HXLINE(4012)								cx_ite4 = cx_ite4->next;
HXLINE(4013)								continue;
            							}
HXLINE(4015)							bool _hx_tmp;
HXDLIN(4015)							if (hx::IsNotNull( xshp )) {
HXLINE(4015)								bool _hx_tmp1;
HXDLIN(4015)								if (hx::IsNotEq( xarb->ws1,xshp )) {
HXLINE(4015)									_hx_tmp1 = hx::IsEq( xarb->ws2,xshp );
            								}
            								else {
HXLINE(4015)									_hx_tmp1 = true;
            								}
HXDLIN(4015)								_hx_tmp = !(_hx_tmp1);
            							}
            							else {
HXLINE(4015)								_hx_tmp = false;
            							}
HXDLIN(4015)							if (_hx_tmp) {
HXLINE(4016)								cx_ite4 = cx_ite4->next;
HXLINE(4017)								continue;
            							}
HXLINE(4019)							this->MRCA_chains(xarb->ws1,xarb->ws2);
HXLINE(4020)							{
HXLINE(4021)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite5 = this->mrca1->head;
HXLINE(4022)								while(hx::IsNotNull( cx_ite5 )){
HXLINE(4023)									 ::zpp_nape::phys::ZPP_Interactor i11 = cx_ite5->elt;
HXLINE(4024)									{
HXLINE(4025)										bool _hx_tmp2;
HXDLIN(4025)										if (hx::IsNotEq( i11->cbSet,cb1 )) {
HXLINE(4025)											_hx_tmp2 = hx::IsNotEq( i11->cbSet,cb2 );
            										}
            										else {
HXLINE(4025)											_hx_tmp2 = false;
            										}
HXDLIN(4025)										if (_hx_tmp2) {
HXLINE(4026)											cx_ite5 = cx_ite5->next;
HXLINE(4027)											continue;
            										}
HXLINE(4029)										{
HXLINE(4030)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite6 = this->mrca2->head;
HXLINE(4031)											while(hx::IsNotNull( cx_ite6 )){
HXLINE(4032)												 ::zpp_nape::phys::ZPP_Interactor i21 = cx_ite6->elt;
HXLINE(4033)												{
HXLINE(4034)													bool _hx_tmp3;
HXDLIN(4034)													bool _hx_tmp4;
HXDLIN(4034)													if (hx::IsEq( i11->cbSet,cb1 )) {
HXLINE(4034)														_hx_tmp4 = hx::IsNotEq( i21->cbSet,cb2 );
            													}
            													else {
HXLINE(4034)														_hx_tmp4 = false;
            													}
HXDLIN(4034)													if (!(_hx_tmp4)) {
HXLINE(4034)														if (hx::IsEq( i11->cbSet,cb2 )) {
HXLINE(4034)															_hx_tmp3 = hx::IsNotEq( i21->cbSet,cb1 );
            														}
            														else {
HXLINE(4034)															_hx_tmp3 = false;
            														}
            													}
            													else {
HXLINE(4034)														_hx_tmp3 = true;
            													}
HXDLIN(4034)													if (_hx_tmp3) {
HXLINE(4035)														cx_ite6 = cx_ite6->next;
HXLINE(4036)														continue;
            													}
HXLINE(4038)													 ::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i11,i21);
HXLINE(4039)													if (hx::IsNull( callbackset )) {
HXLINE(4040)														callbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i11,i21);
HXLINE(4041)														this->add_callbackset(callbackset);
            													}
HXLINE(4043)													bool _hx_tmp5;
HXDLIN(4043)													bool ret;
HXDLIN(4043)													{
HXLINE(4043)														ret = false;
HXDLIN(4043)														{
HXLINE(4043)															 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite7 = callbackset->arbiters->head;
HXDLIN(4043)															while(hx::IsNotNull( cx_ite7 )){
HXLINE(4043)																 ::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite7->elt;
HXDLIN(4043)																if (hx::IsEq( npite,xarb )) {
HXLINE(4043)																	ret = true;
HXDLIN(4043)																	goto _hx_goto_184;
            																}
HXDLIN(4043)																cx_ite7 = cx_ite7->next;
            															}
            															_hx_goto_184:;
            														}
            													}
HXDLIN(4043)													if (!(ret)) {
HXLINE(4043)														{
HXLINE(4043)															 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;
HXDLIN(4043)															 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;
HXDLIN(4043)															if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(4043)																ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(4043)																ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(4043)																::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
HXDLIN(4043)																ret1->next = null();
            															}
HXDLIN(4043)															ret1->elt = xarb;
HXDLIN(4043)															 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = ret1;
HXDLIN(4043)															temp->next = _this->head;
HXDLIN(4043)															_this->head = temp;
HXDLIN(4043)															_this->modified = true;
HXDLIN(4043)															_this->length++;
            														}
HXDLIN(4043)														_hx_tmp5 = true;
            													}
            													else {
HXLINE(4043)														_hx_tmp5 = false;
            													}
HXDLIN(4043)													if (_hx_tmp5) {
HXLINE(4044)														xarb->present++;
            													}
            												}
HXLINE(4047)												cx_ite6 = cx_ite6->next;
            											}
            										}
            									}
HXLINE(4051)									cx_ite5 = cx_ite5->next;
            								}
            							}
            						}
HXLINE(4055)						cx_ite4 = cx_ite4->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshListenerType,(void))

void ZPP_Space_obj::freshInteractorType( ::zpp_nape::phys::ZPP_Interactor intx, ::zpp_nape::phys::ZPP_Interactor me){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4061_freshInteractorType)
HXLINE(4062)		if (hx::IsNull( me )) {
HXLINE(4062)			me = intx;
            		}
HXLINE(4063)		if (hx::IsNotNull( intx->icompound )) {
HXLINE(4064)			 ::zpp_nape::phys::ZPP_Compound comp = intx->icompound;
HXLINE(4065)			{
HXLINE(4066)				 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;
HXLINE(4067)				while(hx::IsNotNull( cx_ite )){
HXLINE(4068)					 ::zpp_nape::phys::ZPP_Body body = cx_ite->elt;
HXLINE(4069)					this->freshInteractorType(body,me);
HXLINE(4070)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(4073)			{
HXLINE(4074)				 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite1 = comp->compounds->head;
HXLINE(4075)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(4076)					 ::zpp_nape::phys::ZPP_Compound comp1 = cx_ite1->elt;
HXLINE(4077)					this->freshInteractorType(comp1,me);
HXLINE(4078)					cx_ite1 = cx_ite1->next;
            				}
            			}
            		}
            		else {
HXLINE(4083)			 ::zpp_nape::phys::ZPP_Body xbody;
HXDLIN(4083)			if (hx::IsNotNull( intx->ibody )) {
HXLINE(4083)				xbody = intx->ibody;
            			}
            			else {
HXLINE(4083)				xbody = intx->ishape->body;
            			}
HXLINE(4084)			 ::zpp_nape::shape::ZPP_Shape xshp;
HXDLIN(4084)			if (hx::IsNotNull( intx->ishape )) {
HXLINE(4084)				xshp = intx->ishape;
            			}
            			else {
HXLINE(4084)				xshp = null();
            			}
HXLINE(4085)			{
HXLINE(4086)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite2 = xbody->arbiters->head;
HXLINE(4087)				while(hx::IsNotNull( cx_ite2 )){
HXLINE(4088)					 ::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite2->elt;
HXLINE(4089)					{
HXLINE(4090)						if (!(xarb->presentable)) {
HXLINE(4091)							cx_ite2 = cx_ite2->next;
HXLINE(4092)							continue;
            						}
HXLINE(4094)						bool _hx_tmp;
HXDLIN(4094)						if (hx::IsNotNull( xshp )) {
HXLINE(4094)							bool _hx_tmp1;
HXDLIN(4094)							if (hx::IsNotEq( xarb->ws1,xshp )) {
HXLINE(4094)								_hx_tmp1 = hx::IsEq( xarb->ws2,xshp );
            							}
            							else {
HXLINE(4094)								_hx_tmp1 = true;
            							}
HXDLIN(4094)							_hx_tmp = !(_hx_tmp1);
            						}
            						else {
HXLINE(4094)							_hx_tmp = false;
            						}
HXDLIN(4094)						if (_hx_tmp) {
HXLINE(4095)							cx_ite2 = cx_ite2->next;
HXLINE(4096)							continue;
            						}
HXLINE(4098)						this->MRCA_chains(xarb->ws1,xarb->ws2);
HXLINE(4099)						{
HXLINE(4100)							 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite3 = this->mrca1->head;
HXLINE(4101)							while(hx::IsNotNull( cx_ite3 )){
HXLINE(4102)								 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite3->elt;
HXLINE(4104)								{
HXLINE(4105)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite4 = this->mrca2->head;
HXLINE(4106)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(4107)										 ::zpp_nape::phys::ZPP_Interactor i2 = cx_ite4->elt;
HXLINE(4108)										{
HXLINE(4109)											bool _hx_tmp2;
HXDLIN(4109)											if (hx::IsNotEq( i1,me )) {
HXLINE(4109)												_hx_tmp2 = hx::IsNotEq( i2,me );
            											}
            											else {
HXLINE(4109)												_hx_tmp2 = false;
            											}
HXDLIN(4109)											if (_hx_tmp2) {
HXLINE(4110)												cx_ite4 = cx_ite4->next;
HXLINE(4111)												continue;
            											}
HXLINE(4113)											 ::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;
HXLINE(4114)											 ::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;
HXLINE(4123)											cb1->validate();
HXLINE(4124)											cb2->validate();
HXLINE(4125)											 ::zpp_nape::space::ZPP_CbSetManager _this = cb1->manager;
HXDLIN(4125)											 ::zpp_nape::callbacks::ZPP_CbSetPair ret = null();
HXDLIN(4125)											 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN(4125)											if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(4125)												pairs = cb1->cbpairs;
            											}
            											else {
HXLINE(4125)												pairs = cb2->cbpairs;
            											}
HXDLIN(4125)											{
HXLINE(4125)												 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite5 = pairs->head;
HXDLIN(4125)												while(hx::IsNotNull( cx_ite5 )){
HXLINE(4125)													 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite5->elt;
HXDLIN(4125)													bool _hx_tmp3;
HXDLIN(4125)													bool _hx_tmp4;
HXDLIN(4125)													if (hx::IsEq( p->a,cb1 )) {
HXLINE(4125)														_hx_tmp4 = hx::IsEq( p->b,cb2 );
            													}
            													else {
HXLINE(4125)														_hx_tmp4 = false;
            													}
HXDLIN(4125)													if (!(_hx_tmp4)) {
HXLINE(4125)														if (hx::IsEq( p->a,cb2 )) {
HXLINE(4125)															_hx_tmp3 = hx::IsEq( p->b,cb1 );
            														}
            														else {
HXLINE(4125)															_hx_tmp3 = false;
            														}
            													}
            													else {
HXLINE(4125)														_hx_tmp3 = true;
            													}
HXDLIN(4125)													if (_hx_tmp3) {
HXLINE(4125)														ret = p;
HXDLIN(4125)														goto _hx_goto_191;
            													}
HXDLIN(4125)													cx_ite5 = cx_ite5->next;
            												}
            												_hx_goto_191:;
            											}
HXDLIN(4125)											if (hx::IsNull( ret )) {
HXLINE(4125)												 ::zpp_nape::callbacks::ZPP_CbSetPair ret1;
HXDLIN(4125)												{
HXLINE(4125)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(4125)														ret1 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(4125)														ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(4125)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
HXDLIN(4125)														ret1->next = null();
            													}
HXDLIN(4125)													ret1->zip_listeners = true;
            												}
HXDLIN(4125)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(4125)													ret1->a = cb1;
HXDLIN(4125)													ret1->b = cb2;
            												}
            												else {
HXLINE(4125)													ret1->a = cb2;
HXDLIN(4125)													ret1->b = cb1;
            												}
HXDLIN(4125)												ret = ret1;
HXDLIN(4125)												cb1->cbpairs->add(ret);
HXDLIN(4125)												if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(4125)													cb2->cbpairs->add(ret);
            												}
            											}
HXDLIN(4125)											if (ret->zip_listeners) {
HXLINE(4125)												ret->zip_listeners = false;
HXDLIN(4125)												ret->_hx___validate();
            											}
HXDLIN(4125)											if (hx::IsNotNull( ret->listeners->head )) {
HXLINE(4126)												 ::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
HXLINE(4127)												if (hx::IsNull( callbackset )) {
HXLINE(4128)													callbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
HXLINE(4129)													this->add_callbackset(callbackset);
            												}
HXLINE(4131)												bool _hx_tmp5;
HXDLIN(4131)												bool ret2;
HXDLIN(4131)												{
HXLINE(4131)													ret2 = false;
HXDLIN(4131)													{
HXLINE(4131)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite6 = callbackset->arbiters->head;
HXDLIN(4131)														while(hx::IsNotNull( cx_ite6 )){
HXLINE(4131)															 ::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite6->elt;
HXDLIN(4131)															if (hx::IsEq( npite,xarb )) {
HXLINE(4131)																ret2 = true;
HXDLIN(4131)																goto _hx_goto_192;
            															}
HXDLIN(4131)															cx_ite6 = cx_ite6->next;
            														}
            														_hx_goto_192:;
            													}
            												}
HXDLIN(4131)												if (!(ret2)) {
HXLINE(4131)													{
HXLINE(4131)														 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = callbackset->arbiters;
HXDLIN(4131)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret3;
HXDLIN(4131)														if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(4131)															ret3 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(4131)															ret3 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(4131)															::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret3->next;
HXDLIN(4131)															ret3->next = null();
            														}
HXDLIN(4131)														ret3->elt = xarb;
HXDLIN(4131)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = ret3;
HXDLIN(4131)														temp->next = _this1->head;
HXDLIN(4131)														_this1->head = temp;
HXDLIN(4131)														_this1->modified = true;
HXDLIN(4131)														_this1->length++;
            													}
HXDLIN(4131)													_hx_tmp5 = true;
            												}
            												else {
HXLINE(4131)													_hx_tmp5 = false;
            												}
HXDLIN(4131)												if (_hx_tmp5) {
HXLINE(4132)													xarb->present++;
            												}
            											}
            										}
HXLINE(4136)										cx_ite4 = cx_ite4->next;
            									}
            								}
HXLINE(4140)								cx_ite3 = cx_ite3->next;
            							}
            						}
            					}
HXLINE(4144)					cx_ite2 = cx_ite2->next;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshInteractorType,(void))

void ZPP_Space_obj::wakeCompound( ::zpp_nape::phys::ZPP_Compound x){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_4149_wakeCompound)
HXLINE(4150)		{
HXLINE(4151)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;
HXLINE(4152)			while(hx::IsNotNull( cx_ite )){
HXLINE(4153)				 ::zpp_nape::phys::ZPP_Body y = cx_ite->elt;
HXLINE(4154)				{
HXLINE(4155)					 ::zpp_nape::phys::ZPP_Body o = y;
HXLINE(4164)					if (!(o->world)) {
HXLINE(4173)						int _hx_tmp;
HXDLIN(4173)						if (this->midstep) {
HXLINE(4173)							_hx_tmp = 0;
            						}
            						else {
HXLINE(4173)							_hx_tmp = 1;
            						}
HXDLIN(4173)						o->component->waket = (this->stamp + _hx_tmp);
HXLINE(4174)						if ((o->type == 3)) {
HXLINE(4174)							o->kinematicDelaySleep = true;
            						}
HXLINE(4175)						if (o->component->sleeping) {
HXLINE(4176)							this->really_wake(o,false);
            						}
            					}
            				}
HXLINE(4180)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(4183)		{
HXLINE(4184)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite1 = x->constraints->head;
HXLINE(4185)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(4186)				 ::zpp_nape::constraint::ZPP_Constraint i = cx_ite1->elt;
HXLINE(4187)				this->wake_constraint(i,null());
HXLINE(4188)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(4191)		{
HXLINE(4192)			 ::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite2 = x->compounds->head;
HXLINE(4193)			while(hx::IsNotNull( cx_ite2 )){
HXLINE(4194)				 ::zpp_nape::phys::ZPP_Compound i1 = cx_ite2->elt;
HXLINE(4195)				this->wakeCompound(i1);
HXLINE(4196)				cx_ite2 = cx_ite2->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeCompound,(void))

void ZPP_Space_obj::wakeIsland( ::zpp_nape::space::ZPP_Island i){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4200_wakeIsland)
HXLINE(4209)		while(hx::IsNotNull( i->comps->head )){
HXLINE(4210)			 ::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();
HXLINE(4219)			int _hx_tmp;
HXDLIN(4219)			if (this->midstep) {
HXLINE(4219)				_hx_tmp = 0;
            			}
            			else {
HXLINE(4219)				_hx_tmp = 1;
            			}
HXDLIN(4219)			c->waket = (this->stamp + _hx_tmp);
HXLINE(4220)			if (c->isBody) {
HXLINE(4221)				 ::zpp_nape::phys::ZPP_Body b = c->body;
HXLINE(4238)				this->live->add(b);
HXLINE(4239)				{
HXLINE(4240)					 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;
HXLINE(4241)					while(hx::IsNotNull( cx_ite )){
HXLINE(4242)						 ::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;
HXLINE(4244)						if (arb->sleeping) {
HXLINE(4245)							arb->sleeping = false;
HXLINE(4246)							 ::zpp_nape::dynamics::ZPP_Arbiter arb1 = arb;
HXDLIN(4246)							arb1->up_stamp = (arb1->up_stamp + (this->stamp - arb->sleep_stamp));
HXLINE(4247)							if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(4248)								 ::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;
HXLINE(4249)								if (carb->stat) {
HXLINE(4249)									 ::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_true;
HXDLIN(4249)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;
HXDLIN(4249)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(4249)										ret =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4249)										ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(4249)										::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
HXDLIN(4249)										ret->next = null();
            									}
HXDLIN(4249)									ret->elt = carb;
HXDLIN(4249)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp = ret;
HXDLIN(4249)									temp->next = _this->head;
HXDLIN(4249)									_this->head = temp;
HXDLIN(4249)									_this->modified = true;
HXDLIN(4249)									_this->length++;
            								}
            								else {
HXLINE(4250)									 ::zpp_nape::util::ZNPList_ZPP_ColArbiter _this1 = this->c_arbiters_false;
HXDLIN(4250)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;
HXDLIN(4250)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(4250)										ret1 =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4250)										ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(4250)										::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
HXDLIN(4250)										ret1->next = null();
            									}
HXDLIN(4250)									ret1->elt = carb;
HXDLIN(4250)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp1 = ret1;
HXDLIN(4250)									temp1->next = _this1->head;
HXDLIN(4250)									_this1->head = temp1;
HXDLIN(4250)									_this1->modified = true;
HXDLIN(4250)									_this1->length++;
            								}
            							}
            							else {
HXLINE(4252)								if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(4252)									 ::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this2 = this->f_arbiters;
HXDLIN(4252)									 ::zpp_nape::dynamics::ZPP_FluidArbiter o = arb->fluidarb;
HXDLIN(4252)									 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret2;
HXDLIN(4252)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(4252)										ret2 =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4252)										ret2 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(4252)										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret2->next;
HXDLIN(4252)										ret2->next = null();
            									}
HXDLIN(4252)									ret2->elt = o;
HXDLIN(4252)									 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp2 = ret2;
HXDLIN(4252)									temp2->next = _this2->head;
HXDLIN(4252)									_this2->head = temp2;
HXDLIN(4252)									_this2->modified = true;
HXDLIN(4252)									_this2->length++;
            								}
            								else {
HXLINE(4253)									 ::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this3 = this->s_arbiters;
HXDLIN(4253)									 ::zpp_nape::dynamics::ZPP_SensorArbiter o1 = arb->sensorarb;
HXDLIN(4253)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret3;
HXDLIN(4253)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(4253)										ret3 =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4253)										ret3 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(4253)										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret3->next;
HXDLIN(4253)										ret3->next = null();
            									}
HXDLIN(4253)									ret3->elt = o1;
HXDLIN(4253)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp3 = ret3;
HXDLIN(4253)									temp3->next = _this3->head;
HXDLIN(4253)									_this3->head = temp3;
HXDLIN(4253)									_this3->modified = true;
HXDLIN(4253)									_this3->length++;
            								}
            							}
            						}
HXLINE(4256)						cx_ite = cx_ite->next;
            					}
            				}
HXLINE(4259)				this->bodyCbWake(b);
HXLINE(4260)				{
HXLINE(4260)					c->sleeping = false;
HXDLIN(4260)					c->island = null();
HXDLIN(4260)					c->parent = c;
HXDLIN(4260)					c->rank = 0;
            				}
HXLINE(4261)				if ((b->type != 1)) {
HXLINE(4262)					 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = b->shapes->head;
HXLINE(4263)					while(hx::IsNotNull( cx_ite1 )){
HXLINE(4264)						 ::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;
HXLINE(4265)						if (hx::IsNotNull( shape->node )) {
HXLINE(4265)							this->bphase->sync(shape);
            						}
HXLINE(4266)						cx_ite1 = cx_ite1->next;
            					}
            				}
            			}
            			else {
HXLINE(4271)				 ::zpp_nape::constraint::ZPP_Constraint con = c->constraint;
HXLINE(4280)				{
HXLINE(4280)					 ::zpp_nape::util::ZNPList_ZPP_Constraint _this4 = this->live_constraints;
HXDLIN(4280)					 ::zpp_nape::util::ZNPNode_ZPP_Constraint ret4;
HXDLIN(4280)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(4280)						ret4 =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(4280)						ret4 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(4280)						::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret4->next;
HXDLIN(4280)						ret4->next = null();
            					}
HXDLIN(4280)					ret4->elt = con;
HXDLIN(4280)					 ::zpp_nape::util::ZNPNode_ZPP_Constraint temp4 = ret4;
HXDLIN(4280)					temp4->next = _this4->head;
HXDLIN(4280)					_this4->head = temp4;
HXDLIN(4280)					_this4->modified = true;
HXDLIN(4280)					_this4->length++;
            				}
HXLINE(4281)				this->constraintCbWake(con);
HXLINE(4282)				{
HXLINE(4282)					c->sleeping = false;
HXDLIN(4282)					c->island = null();
HXDLIN(4282)					c->parent = c;
HXDLIN(4282)					c->rank = 0;
            				}
            			}
            		}
HXLINE(4285)		{
HXLINE(4286)			 ::zpp_nape::space::ZPP_Island o2 = i;
HXLINE(4296)			o2->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(4297)			::zpp_nape::space::ZPP_Island_obj::zpp_pool = o2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeIsland,(void))

void ZPP_Space_obj::non_inlined_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
            		bool fst = __o_fst.Default(false);
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_4304_non_inlined_wake)
HXLINE(4305)		 ::zpp_nape::phys::ZPP_Body o1 = o;
HXLINE(4314)		if (!(o1->world)) {
HXLINE(4323)			int _hx_tmp;
HXDLIN(4323)			if (this->midstep) {
HXLINE(4323)				_hx_tmp = 0;
            			}
            			else {
HXLINE(4323)				_hx_tmp = 1;
            			}
HXDLIN(4323)			o1->component->waket = (this->stamp + _hx_tmp);
HXLINE(4324)			if ((o1->type == 3)) {
HXLINE(4324)				o1->kinematicDelaySleep = true;
            			}
HXLINE(4325)			if (o1->component->sleeping) {
HXLINE(4326)				this->really_wake(o1,fst);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,non_inlined_wake,(void))

void ZPP_Space_obj::really_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
            		bool fst = __o_fst.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4332_really_wake)
HXDLIN(4332)		if (hx::IsNull( o->component->island )) {
HXLINE(4333)			o->component->sleeping = false;
HXLINE(4334)			bool _hx_tmp;
HXDLIN(4334)			if ((o->type != 3)) {
HXLINE(4334)				_hx_tmp = (o->type == 1);
            			}
            			else {
HXLINE(4334)				_hx_tmp = true;
            			}
HXDLIN(4334)			if (_hx_tmp) {
HXLINE(4334)				 ::zpp_nape::util::ZNPList_ZPP_Body _this = this->staticsleep;
HXDLIN(4334)				 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXDLIN(4334)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXLINE(4334)					ret =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(4334)					ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(4334)					::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
HXDLIN(4334)					ret->next = null();
            				}
HXDLIN(4334)				ret->elt = o;
HXDLIN(4334)				 ::zpp_nape::util::ZNPNode_ZPP_Body temp = ret;
HXDLIN(4334)				temp->next = _this->head;
HXDLIN(4334)				_this->head = temp;
HXDLIN(4334)				_this->modified = true;
HXDLIN(4334)				_this->length++;
            			}
            			else {
HXLINE(4335)				 ::zpp_nape::util::ZNPList_ZPP_Body _this1 = this->live;
HXDLIN(4335)				 ::zpp_nape::util::ZNPNode_ZPP_Body ret1;
HXDLIN(4335)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXLINE(4335)					ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(4335)					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(4335)					::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret1->next;
HXDLIN(4335)					ret1->next = null();
            				}
HXDLIN(4335)				ret1->elt = o;
HXDLIN(4335)				 ::zpp_nape::util::ZNPNode_ZPP_Body temp1 = ret1;
HXDLIN(4335)				temp1->next = _this1->head;
HXDLIN(4335)				_this1->head = temp1;
HXDLIN(4335)				_this1->modified = true;
HXDLIN(4335)				_this1->length++;
            			}
HXLINE(4336)			{
HXLINE(4337)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = o->constraints->head;
HXLINE(4338)				while(hx::IsNotNull( cx_ite )){
HXLINE(4339)					 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXLINE(4340)					if (hx::IsEq( con->space,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(4340)						this->wake_constraint(con,null());
            					}
HXLINE(4341)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(4344)			{
HXLINE(4345)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite1 = o->arbiters->head;
HXLINE(4346)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(4347)					 ::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite1->elt;
HXLINE(4348)					{
HXLINE(4349)						if (arb->sleeping) {
HXLINE(4350)							arb->sleeping = false;
HXLINE(4351)							 ::zpp_nape::dynamics::ZPP_Arbiter arb1 = arb;
HXDLIN(4351)							int _hx_tmp1;
HXDLIN(4351)							if (this->midstep) {
HXLINE(4351)								_hx_tmp1 = 0;
            							}
            							else {
HXLINE(4351)								_hx_tmp1 = 1;
            							}
HXDLIN(4351)							arb1->up_stamp = (arb1->up_stamp + ((this->stamp + _hx_tmp1) - arb->sleep_stamp));
HXLINE(4352)							if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(4353)								 ::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;
HXLINE(4354)								if (carb->stat) {
HXLINE(4354)									 ::zpp_nape::util::ZNPList_ZPP_ColArbiter _this2 = this->c_arbiters_true;
HXDLIN(4354)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret2;
HXDLIN(4354)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(4354)										ret2 =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4354)										ret2 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(4354)										::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret2->next;
HXDLIN(4354)										ret2->next = null();
            									}
HXDLIN(4354)									ret2->elt = carb;
HXDLIN(4354)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp2 = ret2;
HXDLIN(4354)									temp2->next = _this2->head;
HXDLIN(4354)									_this2->head = temp2;
HXDLIN(4354)									_this2->modified = true;
HXDLIN(4354)									_this2->length++;
            								}
            								else {
HXLINE(4355)									 ::zpp_nape::util::ZNPList_ZPP_ColArbiter _this3 = this->c_arbiters_false;
HXDLIN(4355)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret3;
HXDLIN(4355)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(4355)										ret3 =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4355)										ret3 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(4355)										::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret3->next;
HXDLIN(4355)										ret3->next = null();
            									}
HXDLIN(4355)									ret3->elt = carb;
HXDLIN(4355)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp3 = ret3;
HXDLIN(4355)									temp3->next = _this3->head;
HXDLIN(4355)									_this3->head = temp3;
HXDLIN(4355)									_this3->modified = true;
HXDLIN(4355)									_this3->length++;
            								}
            							}
            							else {
HXLINE(4357)								if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(4357)									 ::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this4 = this->f_arbiters;
HXDLIN(4357)									 ::zpp_nape::dynamics::ZPP_FluidArbiter o1 = arb->fluidarb;
HXDLIN(4357)									 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret4;
HXDLIN(4357)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(4357)										ret4 =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4357)										ret4 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(4357)										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret4->next;
HXDLIN(4357)										ret4->next = null();
            									}
HXDLIN(4357)									ret4->elt = o1;
HXDLIN(4357)									 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp4 = ret4;
HXDLIN(4357)									temp4->next = _this4->head;
HXDLIN(4357)									_this4->head = temp4;
HXDLIN(4357)									_this4->modified = true;
HXDLIN(4357)									_this4->length++;
            								}
            								else {
HXLINE(4358)									 ::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this5 = this->s_arbiters;
HXDLIN(4358)									 ::zpp_nape::dynamics::ZPP_SensorArbiter o2 = arb->sensorarb;
HXDLIN(4358)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret5;
HXDLIN(4358)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(4358)										ret5 =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(4358)										ret5 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(4358)										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret5->next;
HXDLIN(4358)										ret5->next = null();
            									}
HXDLIN(4358)									ret5->elt = o2;
HXDLIN(4358)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp5 = ret5;
HXDLIN(4358)									temp5->next = _this5->head;
HXDLIN(4358)									_this5->head = temp5;
HXDLIN(4358)									_this5->modified = true;
HXDLIN(4358)									_this5->length++;
            								}
            							}
            						}
HXLINE(4360)						bool _hx_tmp2;
HXDLIN(4360)						bool _hx_tmp3;
HXDLIN(4360)						bool _hx_tmp4;
HXDLIN(4360)						if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR)) {
HXLINE(4360)							_hx_tmp4 = !(arb->cleared);
            						}
            						else {
HXLINE(4360)							_hx_tmp4 = false;
            						}
HXDLIN(4360)						if (_hx_tmp4) {
HXLINE(4360)							_hx_tmp3 = (arb->up_stamp >= this->stamp);
            						}
            						else {
HXLINE(4360)							_hx_tmp3 = false;
            						}
HXDLIN(4360)						if (_hx_tmp3) {
HXLINE(4360)							_hx_tmp2 = ((arb->immState & 1) != 0);
            						}
            						else {
HXLINE(4360)							_hx_tmp2 = false;
            						}
HXDLIN(4360)						if (_hx_tmp2) {
HXLINE(4361)							bool _hx_tmp5;
HXDLIN(4361)							if ((arb->b1->type == 2)) {
HXLINE(4361)								_hx_tmp5 = arb->b1->component->sleeping;
            							}
            							else {
HXLINE(4361)								_hx_tmp5 = false;
            							}
HXDLIN(4361)							if (_hx_tmp5) {
HXLINE(4362)								 ::zpp_nape::phys::ZPP_Body o3 = arb->b1;
HXLINE(4371)								if (!(o3->world)) {
HXLINE(4380)									int _hx_tmp6;
HXDLIN(4380)									if (this->midstep) {
HXLINE(4380)										_hx_tmp6 = 0;
            									}
            									else {
HXLINE(4380)										_hx_tmp6 = 1;
            									}
HXDLIN(4380)									o3->component->waket = (this->stamp + _hx_tmp6);
HXLINE(4381)									if ((o3->type == 3)) {
HXLINE(4381)										o3->kinematicDelaySleep = true;
            									}
HXLINE(4382)									if (o3->component->sleeping) {
HXLINE(4383)										this->really_wake(o3,false);
            									}
            								}
            							}
HXLINE(4387)							bool _hx_tmp7;
HXDLIN(4387)							if ((arb->b2->type == 2)) {
HXLINE(4387)								_hx_tmp7 = arb->b2->component->sleeping;
            							}
            							else {
HXLINE(4387)								_hx_tmp7 = false;
            							}
HXDLIN(4387)							if (_hx_tmp7) {
HXLINE(4388)								 ::zpp_nape::phys::ZPP_Body o4 = arb->b2;
HXLINE(4397)								if (!(o4->world)) {
HXLINE(4406)									int _hx_tmp8;
HXDLIN(4406)									if (this->midstep) {
HXLINE(4406)										_hx_tmp8 = 0;
            									}
            									else {
HXLINE(4406)										_hx_tmp8 = 1;
            									}
HXDLIN(4406)									o4->component->waket = (this->stamp + _hx_tmp8);
HXLINE(4407)									if ((o4->type == 3)) {
HXLINE(4407)										o4->kinematicDelaySleep = true;
            									}
HXLINE(4408)									if (o4->component->sleeping) {
HXLINE(4409)										this->really_wake(o4,false);
            									}
            								}
            							}
            						}
            					}
HXLINE(4415)					cx_ite1 = cx_ite1->next;
            				}
            			}
HXLINE(4418)			bool _hx_tmp9;
HXDLIN(4418)			if (!(fst)) {
HXLINE(4418)				_hx_tmp9 = (o->type == 2);
            			}
            			else {
HXLINE(4418)				_hx_tmp9 = false;
            			}
HXDLIN(4418)			if (_hx_tmp9) {
HXLINE(4418)				this->bodyCbWake(o);
            			}
HXLINE(4419)			bool _hx_tmp10;
HXDLIN(4419)			bool _hx_tmp11;
HXDLIN(4419)			if (!(fst)) {
HXLINE(4419)				_hx_tmp11 = !(this->bphase->is_sweep);
            			}
            			else {
HXLINE(4419)				_hx_tmp11 = false;
            			}
HXDLIN(4419)			if (_hx_tmp11) {
HXLINE(4419)				_hx_tmp10 = (o->type != 1);
            			}
            			else {
HXLINE(4419)				_hx_tmp10 = false;
            			}
HXDLIN(4419)			if (_hx_tmp10) {
HXLINE(4420)				 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite2 = o->shapes->head;
HXLINE(4421)				while(hx::IsNotNull( cx_ite2 )){
HXLINE(4422)					 ::zpp_nape::shape::ZPP_Shape shape = cx_ite2->elt;
HXLINE(4423)					if (hx::IsNotNull( shape->node )) {
HXLINE(4423)						this->bphase->sync(shape);
            					}
HXLINE(4424)					cx_ite2 = cx_ite2->next;
            				}
            			}
            		}
            		else {
HXLINE(4429)			this->wakeIsland(o->component->island);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,really_wake,(void))

bool ZPP_Space_obj::wake_constraint( ::zpp_nape::constraint::ZPP_Constraint con,hx::Null< bool >  __o_fst){
            		bool fst = __o_fst.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4449_wake_constraint)
HXDLIN(4449)		if (con->active) {
HXLINE(4458)			int _hx_tmp;
HXDLIN(4458)			if (this->midstep) {
HXLINE(4458)				_hx_tmp = 0;
            			}
            			else {
HXLINE(4458)				_hx_tmp = 1;
            			}
HXDLIN(4458)			con->component->waket = (this->stamp + _hx_tmp);
HXLINE(4459)			if (con->component->sleeping) {
HXLINE(4460)				if (hx::IsNull( con->component->island )) {
HXLINE(4461)					con->component->sleeping = false;
HXLINE(4462)					{
HXLINE(4462)						 ::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;
HXDLIN(4462)						 ::zpp_nape::util::ZNPNode_ZPP_Constraint ret;
HXDLIN(4462)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(4462)							ret =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(4462)							ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(4462)							::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
HXDLIN(4462)							ret->next = null();
            						}
HXDLIN(4462)						ret->elt = con;
HXDLIN(4462)						 ::zpp_nape::util::ZNPNode_ZPP_Constraint temp = ret;
HXDLIN(4462)						temp->next = _this->head;
HXDLIN(4462)						_this->head = temp;
HXDLIN(4462)						_this->modified = true;
HXDLIN(4462)						_this->length++;
            					}
HXLINE(4463)					con->wake_connected();
HXLINE(4464)					if (!(fst)) {
HXLINE(4464)						this->constraintCbWake(con);
            					}
            				}
            				else {
HXLINE(4467)					this->wakeIsland(con->component->island);
            				}
HXLINE(4477)				return true;
            			}
            			else {
HXLINE(4479)				return false;
            			}
            		}
            		else {
HXLINE(4481)			return false;
            		}
HXLINE(4449)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,wake_constraint,return )

void ZPP_Space_obj::doForests(Float dt){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4483_doForests)
HXLINE(4484)		{
HXLINE(4485)			 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter cx_ite = this->c_arbiters_false->head;
HXLINE(4486)			while(hx::IsNotNull( cx_ite )){
HXLINE(4487)				 ::zpp_nape::dynamics::ZPP_ColArbiter arb = cx_ite->elt;
HXLINE(4489)				bool _hx_tmp;
HXDLIN(4489)				bool _hx_tmp1;
HXDLIN(4489)				if (!(arb->cleared)) {
HXLINE(4489)					_hx_tmp1 = (arb->up_stamp == this->stamp);
            				}
            				else {
HXLINE(4489)					_hx_tmp1 = false;
            				}
HXDLIN(4489)				if (_hx_tmp1) {
HXLINE(4489)					_hx_tmp = ((arb->immState & 1) != 0);
            				}
            				else {
HXLINE(4489)					_hx_tmp = false;
            				}
HXDLIN(4489)				if (_hx_tmp) {
HXLINE(4490)					bool _hx_tmp2;
HXDLIN(4490)					if ((arb->b1->type == 2)) {
HXLINE(4490)						_hx_tmp2 = (arb->b2->type == 2);
            					}
            					else {
HXLINE(4490)						_hx_tmp2 = false;
            					}
HXDLIN(4490)					if (_hx_tmp2) {
HXLINE(4491)						 ::zpp_nape::space::ZPP_Component xr;
HXDLIN(4491)						if (hx::IsEq( arb->b1->component,arb->b1->component->parent )) {
HXLINE(4491)							xr = arb->b1->component;
            						}
            						else {
HXLINE(4494)							 ::zpp_nape::space::ZPP_Component obj = arb->b1->component;
HXLINE(4495)							 ::zpp_nape::space::ZPP_Component stack = null();
HXLINE(4496)							while(hx::IsNotEq( obj,obj->parent )){
HXLINE(4497)								 ::zpp_nape::space::ZPP_Component nxt = obj->parent;
HXLINE(4498)								obj->parent = stack;
HXLINE(4499)								stack = obj;
HXLINE(4500)								obj = nxt;
            							}
HXLINE(4502)							while(hx::IsNotNull( stack )){
HXLINE(4503)								 ::zpp_nape::space::ZPP_Component nxt1 = stack->parent;
HXLINE(4504)								stack->parent = obj;
HXLINE(4505)								stack = nxt1;
            							}
HXLINE(4491)							xr = obj;
            						}
HXLINE(4510)						 ::zpp_nape::space::ZPP_Component yr;
HXDLIN(4510)						if (hx::IsEq( arb->b2->component,arb->b2->component->parent )) {
HXLINE(4510)							yr = arb->b2->component;
            						}
            						else {
HXLINE(4513)							 ::zpp_nape::space::ZPP_Component obj1 = arb->b2->component;
HXLINE(4514)							 ::zpp_nape::space::ZPP_Component stack1 = null();
HXLINE(4515)							while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE(4516)								 ::zpp_nape::space::ZPP_Component nxt2 = obj1->parent;
HXLINE(4517)								obj1->parent = stack1;
HXLINE(4518)								stack1 = obj1;
HXLINE(4519)								obj1 = nxt2;
            							}
HXLINE(4521)							while(hx::IsNotNull( stack1 )){
HXLINE(4522)								 ::zpp_nape::space::ZPP_Component nxt3 = stack1->parent;
HXLINE(4523)								stack1->parent = obj1;
HXLINE(4524)								stack1 = nxt3;
            							}
HXLINE(4510)							yr = obj1;
            						}
HXLINE(4529)						if (hx::IsNotEq( xr,yr )) {
HXLINE(4530)							if ((xr->rank < yr->rank)) {
HXLINE(4530)								xr->parent = yr;
            							}
            							else {
HXLINE(4531)								if ((xr->rank > yr->rank)) {
HXLINE(4531)									yr->parent = xr;
            								}
            								else {
HXLINE(4533)									yr->parent = xr;
HXLINE(4534)									xr->rank++;
            								}
            							}
            						}
            					}
            				}
HXLINE(4540)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(4543)		{
HXLINE(4544)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite1 = this->f_arbiters->head;
HXLINE(4545)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(4546)				 ::zpp_nape::dynamics::ZPP_FluidArbiter arb1 = cx_ite1->elt;
HXLINE(4548)				bool _hx_tmp3;
HXDLIN(4548)				bool _hx_tmp4;
HXDLIN(4548)				if (!(arb1->cleared)) {
HXLINE(4548)					_hx_tmp4 = (arb1->up_stamp == this->stamp);
            				}
            				else {
HXLINE(4548)					_hx_tmp4 = false;
            				}
HXDLIN(4548)				if (_hx_tmp4) {
HXLINE(4548)					_hx_tmp3 = ((arb1->immState & 1) != 0);
            				}
            				else {
HXLINE(4548)					_hx_tmp3 = false;
            				}
HXDLIN(4548)				if (_hx_tmp3) {
HXLINE(4549)					bool _hx_tmp5;
HXDLIN(4549)					if ((arb1->b1->type == 2)) {
HXLINE(4549)						_hx_tmp5 = (arb1->b2->type == 2);
            					}
            					else {
HXLINE(4549)						_hx_tmp5 = false;
            					}
HXDLIN(4549)					if (_hx_tmp5) {
HXLINE(4550)						 ::zpp_nape::space::ZPP_Component xr1;
HXDLIN(4550)						if (hx::IsEq( arb1->b1->component,arb1->b1->component->parent )) {
HXLINE(4550)							xr1 = arb1->b1->component;
            						}
            						else {
HXLINE(4553)							 ::zpp_nape::space::ZPP_Component obj2 = arb1->b1->component;
HXLINE(4554)							 ::zpp_nape::space::ZPP_Component stack2 = null();
HXLINE(4555)							while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE(4556)								 ::zpp_nape::space::ZPP_Component nxt4 = obj2->parent;
HXLINE(4557)								obj2->parent = stack2;
HXLINE(4558)								stack2 = obj2;
HXLINE(4559)								obj2 = nxt4;
            							}
HXLINE(4561)							while(hx::IsNotNull( stack2 )){
HXLINE(4562)								 ::zpp_nape::space::ZPP_Component nxt5 = stack2->parent;
HXLINE(4563)								stack2->parent = obj2;
HXLINE(4564)								stack2 = nxt5;
            							}
HXLINE(4550)							xr1 = obj2;
            						}
HXLINE(4569)						 ::zpp_nape::space::ZPP_Component yr1;
HXDLIN(4569)						if (hx::IsEq( arb1->b2->component,arb1->b2->component->parent )) {
HXLINE(4569)							yr1 = arb1->b2->component;
            						}
            						else {
HXLINE(4572)							 ::zpp_nape::space::ZPP_Component obj3 = arb1->b2->component;
HXLINE(4573)							 ::zpp_nape::space::ZPP_Component stack3 = null();
HXLINE(4574)							while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE(4575)								 ::zpp_nape::space::ZPP_Component nxt6 = obj3->parent;
HXLINE(4576)								obj3->parent = stack3;
HXLINE(4577)								stack3 = obj3;
HXLINE(4578)								obj3 = nxt6;
            							}
HXLINE(4580)							while(hx::IsNotNull( stack3 )){
HXLINE(4581)								 ::zpp_nape::space::ZPP_Component nxt7 = stack3->parent;
HXLINE(4582)								stack3->parent = obj3;
HXLINE(4583)								stack3 = nxt7;
            							}
HXLINE(4569)							yr1 = obj3;
            						}
HXLINE(4588)						if (hx::IsNotEq( xr1,yr1 )) {
HXLINE(4589)							if ((xr1->rank < yr1->rank)) {
HXLINE(4589)								xr1->parent = yr1;
            							}
            							else {
HXLINE(4590)								if ((xr1->rank > yr1->rank)) {
HXLINE(4590)									yr1->parent = xr1;
            								}
            								else {
HXLINE(4592)									yr1->parent = xr1;
HXLINE(4593)									xr1->rank++;
            								}
            							}
            						}
            					}
            				}
HXLINE(4599)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(4602)		{
HXLINE(4603)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite2 = this->live_constraints->head;
HXLINE(4604)			while(hx::IsNotNull( cx_ite2 )){
HXLINE(4605)				 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite2->elt;
HXLINE(4606)				con->forest();
HXLINE(4607)				cx_ite2 = cx_ite2->next;
            			}
            		}
HXLINE(4610)		while(hx::IsNotNull( this->live->head )){
HXLINE(4611)			 ::zpp_nape::util::ZNPList_ZPP_Body _this = this->live;
HXDLIN(4611)			 ::zpp_nape::phys::ZPP_Body ret = _this->head->elt;
HXDLIN(4611)			_this->pop();
HXDLIN(4611)			 ::zpp_nape::phys::ZPP_Body o = ret;
HXLINE(4612)			 ::zpp_nape::space::ZPP_Component oc = o->component;
HXLINE(4613)			 ::zpp_nape::space::ZPP_Component root;
HXDLIN(4613)			if (hx::IsEq( oc,oc->parent )) {
HXLINE(4613)				root = oc;
            			}
            			else {
HXLINE(4616)				 ::zpp_nape::space::ZPP_Component obj4 = oc;
HXLINE(4617)				 ::zpp_nape::space::ZPP_Component stack4 = null();
HXLINE(4618)				while(hx::IsNotEq( obj4,obj4->parent )){
HXLINE(4619)					 ::zpp_nape::space::ZPP_Component nxt8 = obj4->parent;
HXLINE(4620)					obj4->parent = stack4;
HXLINE(4621)					stack4 = obj4;
HXLINE(4622)					obj4 = nxt8;
            				}
HXLINE(4624)				while(hx::IsNotNull( stack4 )){
HXLINE(4625)					 ::zpp_nape::space::ZPP_Component nxt9 = stack4->parent;
HXLINE(4626)					stack4->parent = obj4;
HXLINE(4627)					stack4 = nxt9;
            				}
HXLINE(4613)				root = obj4;
            			}
HXLINE(4632)			if (hx::IsNull( root->island )) {
HXLINE(4633)				{
HXLINE(4634)					if (hx::IsNull( ::zpp_nape::space::ZPP_Island_obj::zpp_pool )) {
HXLINE(4635)						root->island =  ::zpp_nape::space::ZPP_Island_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(4641)						root->island = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(4642)						::zpp_nape::space::ZPP_Island_obj::zpp_pool = root->island->next;
HXLINE(4643)						root->island->next = null();
            					}
HXLINE(4648)					root->island->waket = 0;
            				}
HXLINE(4650)				{
HXLINE(4650)					 ::zpp_nape::space::ZPP_Island _this1 = this->islands;
HXDLIN(4650)					 ::zpp_nape::space::ZPP_Island o1 = root->island;
HXDLIN(4650)					o1->_inuse = true;
HXDLIN(4650)					 ::zpp_nape::space::ZPP_Island temp = o1;
HXDLIN(4650)					temp->next = _this1->next;
HXDLIN(4650)					_this1->next = temp;
HXDLIN(4650)					_this1->modified = true;
HXDLIN(4650)					_this1->length++;
            				}
HXLINE(4651)				root->island->sleep = true;
            			}
HXLINE(4653)			oc->island = root->island;
HXLINE(4654)			{
HXLINE(4654)				 ::zpp_nape::util::ZNPList_ZPP_Component _this2 = oc->island->comps;
HXDLIN(4654)				 ::zpp_nape::util::ZNPNode_ZPP_Component ret1;
HXDLIN(4654)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )) {
HXLINE(4654)					ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(4654)					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(4654)					::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret1->next;
HXDLIN(4654)					ret1->next = null();
            				}
HXDLIN(4654)				ret1->elt = oc;
HXDLIN(4654)				 ::zpp_nape::util::ZNPNode_ZPP_Component temp1 = ret1;
HXDLIN(4654)				temp1->next = _this2->head;
HXDLIN(4654)				_this2->head = temp1;
HXDLIN(4654)				_this2->modified = true;
HXDLIN(4654)				_this2->length++;
            			}
HXLINE(4655)			bool rest = o->atRest(dt);
HXLINE(4656)			bool _hx_tmp6;
HXDLIN(4656)			if (oc->island->sleep) {
HXLINE(4656)				_hx_tmp6 = rest;
            			}
            			else {
HXLINE(4656)				_hx_tmp6 = false;
            			}
HXDLIN(4656)			oc->island->sleep = _hx_tmp6;
HXLINE(4657)			if ((oc->waket > oc->island->waket)) {
HXLINE(4657)				oc->island->waket = oc->waket;
            			}
            		}
HXLINE(4659)		while(hx::IsNotNull( this->live_constraints->head )){
HXLINE(4660)			 ::zpp_nape::util::ZNPList_ZPP_Constraint _this3 = this->live_constraints;
HXDLIN(4660)			 ::zpp_nape::constraint::ZPP_Constraint ret2 = _this3->head->elt;
HXDLIN(4660)			_this3->pop();
HXDLIN(4660)			 ::zpp_nape::constraint::ZPP_Constraint o2 = ret2;
HXLINE(4661)			 ::zpp_nape::space::ZPP_Component oc1 = o2->component;
HXLINE(4662)			 ::zpp_nape::space::ZPP_Component root1;
HXDLIN(4662)			if (hx::IsEq( oc1,oc1->parent )) {
HXLINE(4662)				root1 = oc1;
            			}
            			else {
HXLINE(4665)				 ::zpp_nape::space::ZPP_Component obj5 = oc1;
HXLINE(4666)				 ::zpp_nape::space::ZPP_Component stack5 = null();
HXLINE(4667)				while(hx::IsNotEq( obj5,obj5->parent )){
HXLINE(4668)					 ::zpp_nape::space::ZPP_Component nxt10 = obj5->parent;
HXLINE(4669)					obj5->parent = stack5;
HXLINE(4670)					stack5 = obj5;
HXLINE(4671)					obj5 = nxt10;
            				}
HXLINE(4673)				while(hx::IsNotNull( stack5 )){
HXLINE(4674)					 ::zpp_nape::space::ZPP_Component nxt11 = stack5->parent;
HXLINE(4675)					stack5->parent = obj5;
HXLINE(4676)					stack5 = nxt11;
            				}
HXLINE(4662)				root1 = obj5;
            			}
HXLINE(4689)			oc1->island = root1->island;
HXLINE(4690)			{
HXLINE(4690)				 ::zpp_nape::util::ZNPList_ZPP_Component _this4 = oc1->island->comps;
HXDLIN(4690)				 ::zpp_nape::util::ZNPNode_ZPP_Component ret3;
HXDLIN(4690)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )) {
HXLINE(4690)					ret3 =  ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(4690)					ret3 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(4690)					::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret3->next;
HXDLIN(4690)					ret3->next = null();
            				}
HXDLIN(4690)				ret3->elt = oc1;
HXDLIN(4690)				 ::zpp_nape::util::ZNPNode_ZPP_Component temp2 = ret3;
HXDLIN(4690)				temp2->next = _this4->head;
HXDLIN(4690)				_this4->head = temp2;
HXDLIN(4690)				_this4->modified = true;
HXDLIN(4690)				_this4->length++;
            			}
HXLINE(4691)			if ((oc1->waket > oc1->island->waket)) {
HXLINE(4691)				oc1->island->waket = oc1->waket;
            			}
            		}
HXLINE(4693)		while(hx::IsNotNull( this->islands->next )){
HXLINE(4694)			 ::zpp_nape::space::ZPP_Island _this5 = this->islands;
HXDLIN(4694)			 ::zpp_nape::space::ZPP_Island ret4 = _this5->next;
HXDLIN(4694)			_this5->pop();
HXDLIN(4694)			 ::zpp_nape::space::ZPP_Island i = ret4;
HXLINE(4695)			if (i->sleep) {
HXLINE(4697)				 ::zpp_nape::util::ZNPNode_ZPP_Component cx_ite3 = i->comps->head;
HXLINE(4698)				while(hx::IsNotNull( cx_ite3 )){
HXLINE(4699)					 ::zpp_nape::space::ZPP_Component c = cx_ite3->elt;
HXLINE(4701)					if (c->isBody) {
HXLINE(4702)						 ::zpp_nape::phys::ZPP_Body b = c->body;
HXLINE(4703)						{
HXLINE(4704)							b->velx = ( (Float)(0) );
HXLINE(4705)							b->vely = ( (Float)(0) );
            						}
HXLINE(4723)						b->angvel = ( (Float)(0) );
HXLINE(4724)						c->sleeping = true;
HXLINE(4725)						{
HXLINE(4726)							 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite4 = b->shapes->head;
HXLINE(4727)							while(hx::IsNotNull( cx_ite4 )){
HXLINE(4728)								 ::zpp_nape::shape::ZPP_Shape shape = cx_ite4->elt;
HXLINE(4729)								this->bphase->sync(shape);
HXLINE(4730)								cx_ite4 = cx_ite4->next;
            							}
            						}
HXLINE(4733)						this->bodyCbSleep(b);
            					}
            					else {
HXLINE(4736)						 ::zpp_nape::constraint::ZPP_Constraint con1 = c->constraint;
HXLINE(4737)						this->constraintCbSleep(con1);
HXLINE(4738)						c->sleeping = true;
            					}
HXLINE(4741)					cx_ite3 = cx_ite3->next;
            				}
            			}
            			else {
HXLINE(4746)				while(hx::IsNotNull( i->comps->head )){
HXLINE(4747)					 ::zpp_nape::util::ZNPList_ZPP_Component _this6 = i->comps;
HXDLIN(4747)					 ::zpp_nape::space::ZPP_Component ret5 = _this6->head->elt;
HXDLIN(4747)					_this6->pop();
HXDLIN(4747)					 ::zpp_nape::space::ZPP_Component c1 = ret5;
HXLINE(4748)					c1->waket = i->waket;
HXLINE(4749)					if (c1->isBody) {
HXLINE(4749)						 ::zpp_nape::util::ZNPList_ZPP_Body _this7 = this->live;
HXDLIN(4749)						 ::zpp_nape::phys::ZPP_Body o3 = c1->body;
HXDLIN(4749)						 ::zpp_nape::util::ZNPNode_ZPP_Body ret6;
HXDLIN(4749)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXLINE(4749)							ret6 =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(4749)							ret6 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(4749)							::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret6->next;
HXDLIN(4749)							ret6->next = null();
            						}
HXDLIN(4749)						ret6->elt = o3;
HXDLIN(4749)						 ::zpp_nape::util::ZNPNode_ZPP_Body temp3 = ret6;
HXDLIN(4749)						temp3->next = _this7->head;
HXDLIN(4749)						_this7->head = temp3;
HXDLIN(4749)						_this7->modified = true;
HXDLIN(4749)						_this7->length++;
            					}
            					else {
HXLINE(4750)						 ::zpp_nape::util::ZNPList_ZPP_Constraint _this8 = this->live_constraints;
HXDLIN(4750)						 ::zpp_nape::constraint::ZPP_Constraint o4 = c1->constraint;
HXDLIN(4750)						 ::zpp_nape::util::ZNPNode_ZPP_Constraint ret7;
HXDLIN(4750)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(4750)							ret7 =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(4750)							ret7 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(4750)							::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret7->next;
HXDLIN(4750)							ret7->next = null();
            						}
HXDLIN(4750)						ret7->elt = o4;
HXDLIN(4750)						 ::zpp_nape::util::ZNPNode_ZPP_Constraint temp4 = ret7;
HXDLIN(4750)						temp4->next = _this8->head;
HXDLIN(4750)						_this8->head = temp4;
HXDLIN(4750)						_this8->modified = true;
HXDLIN(4750)						_this8->length++;
            					}
HXLINE(4751)					{
HXLINE(4751)						c1->sleeping = false;
HXDLIN(4751)						c1->island = null();
HXDLIN(4751)						c1->parent = c1;
HXDLIN(4751)						c1->rank = 0;
            					}
            				}
HXLINE(4753)				{
HXLINE(4754)					 ::zpp_nape::space::ZPP_Island o5 = i;
HXLINE(4764)					o5->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
HXLINE(4765)					::zpp_nape::space::ZPP_Island_obj::zpp_pool = o5;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,doForests,(void))

void ZPP_Space_obj::sleepArbiters(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_4773_sleepArbiters)
HXLINE(4774)		{
HXLINE(4775)			 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre = null();
HXLINE(4776)			 ::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = this->c_arbiters_true;
HXLINE(4777)			 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;
HXLINE(4778)			bool fst = hx::IsNotNull( this->c_arbiters_false );
HXLINE(4780)			bool _hx_tmp;
HXDLIN(4780)			if (fst) {
HXLINE(4780)				_hx_tmp = hx::IsNull( arbite );
            			}
            			else {
HXLINE(4780)				_hx_tmp = false;
            			}
HXDLIN(4780)			if (_hx_tmp) {
HXLINE(4781)				fst = false;
HXLINE(4782)				arbite = this->c_arbiters_false->head;
HXLINE(4783)				arbs = this->c_arbiters_false;
HXLINE(4784)				pre = null();
            			}
HXLINE(4787)			while(hx::IsNotNull( arbite )){
HXLINE(4788)				 ::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;
HXLINE(4797)				bool _hx_tmp1;
HXDLIN(4797)				if (arb->b1->component->sleeping) {
HXLINE(4797)					_hx_tmp1 = arb->b2->component->sleeping;
            				}
            				else {
HXLINE(4797)					_hx_tmp1 = false;
            				}
HXDLIN(4797)				if (_hx_tmp1) {
HXLINE(4798)					arb->sleep_stamp = this->stamp;
HXLINE(4799)					arb->sleeping = true;
HXLINE(4800)					 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;
HXDLIN(4800)					 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;
HXDLIN(4800)					if (hx::IsNull( pre )) {
HXLINE(4800)						old = arbs->head;
HXDLIN(4800)						ret = old->next;
HXDLIN(4800)						arbs->head = ret;
HXDLIN(4800)						if (hx::IsNull( arbs->head )) {
HXLINE(4800)							arbs->pushmod = true;
            						}
            					}
            					else {
HXLINE(4800)						old = pre->next;
HXDLIN(4800)						ret = old->next;
HXDLIN(4800)						pre->next = ret;
HXDLIN(4800)						if (hx::IsNull( ret )) {
HXLINE(4800)							arbs->pushmod = true;
            						}
            					}
HXDLIN(4800)					{
HXLINE(4800)						 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;
HXDLIN(4800)						o->elt = null();
HXDLIN(4800)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(4800)						::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            					}
HXDLIN(4800)					arbs->modified = true;
HXDLIN(4800)					arbs->length--;
HXDLIN(4800)					arbs->pushmod = true;
HXDLIN(4800)					arbite = ret;
HXLINE(4802)					bool _hx_tmp2;
HXDLIN(4802)					if (fst) {
HXLINE(4802)						_hx_tmp2 = hx::IsNull( arbite );
            					}
            					else {
HXLINE(4802)						_hx_tmp2 = false;
            					}
HXDLIN(4802)					if (_hx_tmp2) {
HXLINE(4803)						fst = false;
HXLINE(4804)						arbite = this->c_arbiters_false->head;
HXLINE(4805)						arbs = this->c_arbiters_false;
HXLINE(4806)						pre = null();
            					}
HXLINE(4809)					continue;
            				}
HXLINE(4811)				pre = arbite;
HXLINE(4812)				arbite = arbite->next;
HXLINE(4814)				bool _hx_tmp3;
HXDLIN(4814)				if (fst) {
HXLINE(4814)					_hx_tmp3 = hx::IsNull( arbite );
            				}
            				else {
HXLINE(4814)					_hx_tmp3 = false;
            				}
HXDLIN(4814)				if (_hx_tmp3) {
HXLINE(4815)					fst = false;
HXLINE(4816)					arbite = this->c_arbiters_false->head;
HXLINE(4817)					arbs = this->c_arbiters_false;
HXLINE(4818)					pre = null();
            				}
            			}
            		}
HXLINE(4823)		{
HXLINE(4824)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre1 = null();
HXLINE(4825)			 ::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs1 = this->f_arbiters;
HXLINE(4826)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite1 = arbs1->head;
HXLINE(4827)			bool fst1 = false;
HXLINE(4829)			bool _hx_tmp4;
HXDLIN(4829)			if (fst1) {
HXLINE(4829)				_hx_tmp4 = hx::IsNull( arbite1 );
            			}
            			else {
HXLINE(4829)				_hx_tmp4 = false;
            			}
HXDLIN(4829)			if (_hx_tmp4) {
HXLINE(4830)				fst1 = false;
HXLINE(4832)				arbs1 = null();
HXLINE(4833)				pre1 = null();
            			}
HXLINE(4836)			while(hx::IsNotNull( arbite1 )){
HXLINE(4837)				 ::zpp_nape::dynamics::ZPP_FluidArbiter arb1 = arbite1->elt;
HXLINE(4846)				bool _hx_tmp5;
HXDLIN(4846)				if (arb1->b1->component->sleeping) {
HXLINE(4846)					_hx_tmp5 = arb1->b2->component->sleeping;
            				}
            				else {
HXLINE(4846)					_hx_tmp5 = false;
            				}
HXDLIN(4846)				if (_hx_tmp5) {
HXLINE(4847)					arb1->sleep_stamp = this->stamp;
HXLINE(4848)					arb1->sleeping = true;
HXLINE(4849)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old1;
HXDLIN(4849)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;
HXDLIN(4849)					if (hx::IsNull( pre1 )) {
HXLINE(4849)						old1 = arbs1->head;
HXDLIN(4849)						ret1 = old1->next;
HXDLIN(4849)						arbs1->head = ret1;
HXDLIN(4849)						if (hx::IsNull( arbs1->head )) {
HXLINE(4849)							arbs1->pushmod = true;
            						}
            					}
            					else {
HXLINE(4849)						old1 = pre1->next;
HXDLIN(4849)						ret1 = old1->next;
HXDLIN(4849)						pre1->next = ret1;
HXDLIN(4849)						if (hx::IsNull( ret1 )) {
HXLINE(4849)							arbs1->pushmod = true;
            						}
            					}
HXDLIN(4849)					{
HXLINE(4849)						 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o1 = old1;
HXDLIN(4849)						o1->elt = null();
HXDLIN(4849)						o1->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(4849)						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o1;
            					}
HXDLIN(4849)					arbs1->modified = true;
HXDLIN(4849)					arbs1->length--;
HXDLIN(4849)					arbs1->pushmod = true;
HXDLIN(4849)					arbite1 = ret1;
HXLINE(4851)					bool _hx_tmp6;
HXDLIN(4851)					if (fst1) {
HXLINE(4851)						_hx_tmp6 = hx::IsNull( arbite1 );
            					}
            					else {
HXLINE(4851)						_hx_tmp6 = false;
            					}
HXDLIN(4851)					if (_hx_tmp6) {
HXLINE(4852)						fst1 = false;
HXLINE(4854)						arbs1 = null();
HXLINE(4855)						pre1 = null();
            					}
HXLINE(4858)					continue;
            				}
HXLINE(4860)				pre1 = arbite1;
HXLINE(4861)				arbite1 = arbite1->next;
HXLINE(4863)				bool _hx_tmp7;
HXDLIN(4863)				if (fst1) {
HXLINE(4863)					_hx_tmp7 = hx::IsNull( arbite1 );
            				}
            				else {
HXLINE(4863)					_hx_tmp7 = false;
            				}
HXDLIN(4863)				if (_hx_tmp7) {
HXLINE(4864)					fst1 = false;
HXLINE(4866)					arbs1 = null();
HXLINE(4867)					pre1 = null();
            				}
            			}
            		}
HXLINE(4872)		{
HXLINE(4873)			 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre2 = null();
HXLINE(4874)			 ::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs2 = this->s_arbiters;
HXLINE(4875)			 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite2 = arbs2->head;
HXLINE(4876)			bool fst2 = false;
HXLINE(4878)			bool _hx_tmp8;
HXDLIN(4878)			if (fst2) {
HXLINE(4878)				_hx_tmp8 = hx::IsNull( arbite2 );
            			}
            			else {
HXLINE(4878)				_hx_tmp8 = false;
            			}
HXDLIN(4878)			if (_hx_tmp8) {
HXLINE(4879)				fst2 = false;
HXLINE(4881)				arbs2 = null();
HXLINE(4882)				pre2 = null();
            			}
HXLINE(4885)			while(hx::IsNotNull( arbite2 )){
HXLINE(4886)				 ::zpp_nape::dynamics::ZPP_SensorArbiter arb2 = arbite2->elt;
HXLINE(4895)				bool _hx_tmp9;
HXDLIN(4895)				if (arb2->b1->component->sleeping) {
HXLINE(4895)					_hx_tmp9 = arb2->b2->component->sleeping;
            				}
            				else {
HXLINE(4895)					_hx_tmp9 = false;
            				}
HXDLIN(4895)				if (_hx_tmp9) {
HXLINE(4896)					arb2->sleep_stamp = this->stamp;
HXLINE(4897)					arb2->sleeping = true;
HXLINE(4898)					 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old2;
HXDLIN(4898)					 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret2;
HXDLIN(4898)					if (hx::IsNull( pre2 )) {
HXLINE(4898)						old2 = arbs2->head;
HXDLIN(4898)						ret2 = old2->next;
HXDLIN(4898)						arbs2->head = ret2;
HXDLIN(4898)						if (hx::IsNull( arbs2->head )) {
HXLINE(4898)							arbs2->pushmod = true;
            						}
            					}
            					else {
HXLINE(4898)						old2 = pre2->next;
HXDLIN(4898)						ret2 = old2->next;
HXDLIN(4898)						pre2->next = ret2;
HXDLIN(4898)						if (hx::IsNull( ret2 )) {
HXLINE(4898)							arbs2->pushmod = true;
            						}
            					}
HXDLIN(4898)					{
HXLINE(4898)						 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o2 = old2;
HXDLIN(4898)						o2->elt = null();
HXDLIN(4898)						o2->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(4898)						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o2;
            					}
HXDLIN(4898)					arbs2->modified = true;
HXDLIN(4898)					arbs2->length--;
HXDLIN(4898)					arbs2->pushmod = true;
HXDLIN(4898)					arbite2 = ret2;
HXLINE(4900)					bool _hx_tmp10;
HXDLIN(4900)					if (fst2) {
HXLINE(4900)						_hx_tmp10 = hx::IsNull( arbite2 );
            					}
            					else {
HXLINE(4900)						_hx_tmp10 = false;
            					}
HXDLIN(4900)					if (_hx_tmp10) {
HXLINE(4901)						fst2 = false;
HXLINE(4903)						arbs2 = null();
HXLINE(4904)						pre2 = null();
            					}
HXLINE(4907)					continue;
            				}
HXLINE(4909)				pre2 = arbite2;
HXLINE(4910)				arbite2 = arbite2->next;
HXLINE(4912)				bool _hx_tmp11;
HXDLIN(4912)				if (fst2) {
HXLINE(4912)					_hx_tmp11 = hx::IsNull( arbite2 );
            				}
            				else {
HXLINE(4912)					_hx_tmp11 = false;
            				}
HXDLIN(4912)				if (_hx_tmp11) {
HXLINE(4913)					fst2 = false;
HXLINE(4915)					arbs2 = null();
HXLINE(4916)					pre2 = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,sleepArbiters,(void))

void ZPP_Space_obj::static_validation( ::zpp_nape::phys::ZPP_Body body){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4922_static_validation)
HXLINE(4923)		if (hx::IsNotNull( body->shapes->head )) {
HXLINE(4924)			if (hx::IsNull( body->shapes->head )) {
HXLINE(4924)				HX_STACK_DO_THROW(HX_("Error: Body bounds only makes sense if it contains shapes",7b,b0,85,6c));
            			}
HXDLIN(4924)			if (body->zip_aabb) {
HXLINE(4924)				body->zip_aabb = false;
HXDLIN(4924)				{
HXLINE(4924)					body->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(4924)					body->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
            				}
HXDLIN(4924)				{
HXLINE(4924)					body->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(4924)					body->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
            				}
HXDLIN(4924)				{
HXLINE(4924)					 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;
HXDLIN(4924)					while(hx::IsNotNull( cx_ite )){
HXLINE(4924)						 ::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;
HXDLIN(4924)						{
HXLINE(4924)							if (s->zip_aabb) {
HXLINE(4924)								if (hx::IsNotNull( s->body )) {
HXLINE(4924)									s->zip_aabb = false;
HXDLIN(4924)									if ((s->type == 0)) {
HXLINE(4924)										 ::zpp_nape::shape::ZPP_Circle _this = s->circle;
HXDLIN(4924)										if (_this->zip_worldCOM) {
HXLINE(4924)											if (hx::IsNotNull( _this->body )) {
HXLINE(4924)												_this->zip_worldCOM = false;
HXDLIN(4924)												if (_this->zip_localCOM) {
HXLINE(4924)													_this->zip_localCOM = false;
HXDLIN(4924)													if ((_this->type == 1)) {
HXLINE(4924)														 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN(4924)														if (hx::IsNull( _this1->lverts->next )) {
HXLINE(4924)															HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            														}
HXDLIN(4924)														if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE(4924)															_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(4924)															_this1->localCOMy = _this1->lverts->next->y;
            														}
            														else {
HXLINE(4924)															if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE(4924)																{
HXLINE(4924)																	_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(4924)																	_this1->localCOMy = _this1->lverts->next->y;
            																}
HXDLIN(4924)																{
HXLINE(4924)																	Float t = ((Float)1.0);
HXDLIN(4924)																	 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN(4924)																	_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN(4924)																	 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN(4924)																	_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            																}
HXDLIN(4924)																{
HXLINE(4924)																	Float t1 = ((Float)0.5);
HXDLIN(4924)																	 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN(4924)																	_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN(4924)																	 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN(4924)																	_this5->localCOMy = (_this5->localCOMy * t1);
            																}
            															}
            															else {
HXLINE(4924)																{
HXLINE(4924)																	_this1->localCOMx = ( (Float)(0) );
HXDLIN(4924)																	_this1->localCOMy = ( (Float)(0) );
            																}
HXDLIN(4924)																Float area = ((Float)0.0);
HXDLIN(4924)																{
HXLINE(4924)																	 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this1->lverts->next;
HXDLIN(4924)																	 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;
HXDLIN(4924)																	cx_ite1 = cx_ite1->next;
HXDLIN(4924)																	 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;
HXDLIN(4924)																	cx_ite1 = cx_ite1->next;
HXDLIN(4924)																	while(hx::IsNotNull( cx_ite1 )){
HXLINE(4924)																		 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;
HXDLIN(4924)																		{
HXLINE(4924)																			area = (area + (v->x * (w->y - u->y)));
HXDLIN(4924)																			Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(4924)																			 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN(4924)																			_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN(4924)																			 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN(4924)																			_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            																		}
HXDLIN(4924)																		u = v;
HXDLIN(4924)																		v = w;
HXDLIN(4924)																		cx_ite1 = cx_ite1->next;
            																	}
HXDLIN(4924)																	cx_ite1 = _this1->lverts->next;
HXDLIN(4924)																	 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite1;
HXDLIN(4924)																	{
HXLINE(4924)																		area = (area + (v->x * (w1->y - u->y)));
HXDLIN(4924)																		Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(4924)																		 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN(4924)																		_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(4924)																		 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN(4924)																		_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            																	}
HXDLIN(4924)																	u = v;
HXDLIN(4924)																	v = w1;
HXDLIN(4924)																	cx_ite1 = cx_ite1->next;
HXDLIN(4924)																	 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite1;
HXDLIN(4924)																	{
HXLINE(4924)																		area = (area + (v->x * (w2->y - u->y)));
HXDLIN(4924)																		Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(4924)																		 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN(4924)																		_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(4924)																		 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN(4924)																		_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            																	}
            																}
HXDLIN(4924)																area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(4924)																{
HXLINE(4924)																	Float t2 = area;
HXDLIN(4924)																	 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN(4924)																	_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN(4924)																	 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN(4924)																	_this13->localCOMy = (_this13->localCOMy * t2);
            																}
            															}
            														}
            													}
HXDLIN(4924)													if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE(4924)														_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(4924)														_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            													}
            												}
HXDLIN(4924)												{
HXLINE(4924)													 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN(4924)													if (_this14->zip_axis) {
HXLINE(4924)														_this14->zip_axis = false;
HXDLIN(4924)														{
HXLINE(4924)															_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN(4924)															_this14->axisy = ::Math_obj::cos(_this14->rot);
            														}
            													}
            												}
HXDLIN(4924)												{
HXLINE(4924)													_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(4924)													_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            												}
            											}
            										}
HXDLIN(4924)										Float rx = _this->radius;
HXDLIN(4924)										Float ry = _this->radius;
HXDLIN(4924)										{
HXLINE(4924)											_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN(4924)											_this->aabb->miny = (_this->worldCOMy - ry);
            										}
HXDLIN(4924)										{
HXLINE(4924)											_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN(4924)											_this->aabb->maxy = (_this->worldCOMy + ry);
            										}
            									}
            									else {
HXLINE(4924)										 ::zpp_nape::shape::ZPP_Polygon _this15 = s->polygon;
HXDLIN(4924)										if (_this15->zip_gverts) {
HXLINE(4924)											if (hx::IsNotNull( _this15->body )) {
HXLINE(4924)												_this15->zip_gverts = false;
HXDLIN(4924)												_this15->validate_lverts();
HXDLIN(4924)												{
HXLINE(4924)													 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN(4924)													if (_this16->zip_axis) {
HXLINE(4924)														_this16->zip_axis = false;
HXDLIN(4924)														{
HXLINE(4924)															_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN(4924)															_this16->axisy = ::Math_obj::cos(_this16->rot);
            														}
            													}
            												}
HXDLIN(4924)												 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN(4924)												{
HXLINE(4924)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next;
HXDLIN(4924)													while(hx::IsNotNull( cx_ite2 )){
HXLINE(4924)														 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;
HXDLIN(4924)														{
HXLINE(4924)															 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(4924)															li = li->next;
HXDLIN(4924)															{
HXLINE(4924)																g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN(4924)																g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            															}
            														}
HXDLIN(4924)														cx_ite2 = cx_ite2->next;
            													}
            												}
            											}
            										}
HXDLIN(4924)										if (hx::IsNull( _this15->lverts->next )) {
HXLINE(4924)											HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            										}
HXDLIN(4924)										 ::zpp_nape::geom::ZPP_Vec2 p0 = _this15->gverts->next;
HXDLIN(4924)										{
HXLINE(4924)											_this15->aabb->minx = p0->x;
HXDLIN(4924)											_this15->aabb->miny = p0->y;
            										}
HXDLIN(4924)										{
HXLINE(4924)											_this15->aabb->maxx = p0->x;
HXDLIN(4924)											_this15->aabb->maxy = p0->y;
            										}
HXDLIN(4924)										{
HXLINE(4924)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this15->gverts->next->next;
HXDLIN(4924)											while(hx::IsNotNull( cx_ite3 )){
HXLINE(4924)												 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite3;
HXDLIN(4924)												{
HXLINE(4924)													if ((p->x < _this15->aabb->minx)) {
HXLINE(4924)														_this15->aabb->minx = p->x;
            													}
HXDLIN(4924)													if ((p->x > _this15->aabb->maxx)) {
HXLINE(4924)														_this15->aabb->maxx = p->x;
            													}
HXDLIN(4924)													if ((p->y < _this15->aabb->miny)) {
HXLINE(4924)														_this15->aabb->miny = p->y;
            													}
HXDLIN(4924)													if ((p->y > _this15->aabb->maxy)) {
HXLINE(4924)														_this15->aabb->maxy = p->y;
            													}
            												}
HXDLIN(4924)												cx_ite3 = cx_ite3->next;
            											}
            										}
            									}
            								}
            							}
HXDLIN(4924)							{
HXLINE(4924)								 ::zpp_nape::geom::ZPP_AABB _this17 = body->aabb;
HXDLIN(4924)								 ::zpp_nape::geom::ZPP_AABB x = s->aabb;
HXDLIN(4924)								if ((x->minx < _this17->minx)) {
HXLINE(4924)									_this17->minx = x->minx;
            								}
HXDLIN(4924)								if ((x->maxx > _this17->maxx)) {
HXLINE(4924)									_this17->maxx = x->maxx;
            								}
HXDLIN(4924)								if ((x->miny < _this17->miny)) {
HXLINE(4924)									_this17->miny = x->miny;
            								}
HXDLIN(4924)								if ((x->maxy > _this17->maxy)) {
HXLINE(4924)									_this17->maxy = x->maxy;
            								}
            							}
            						}
HXDLIN(4924)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
HXLINE(4926)		body->validate_mass();
HXLINE(4927)		body->validate_inertia();
HXLINE(4929)		bool _hx_tmp;
HXDLIN(4929)		bool _hx_tmp1;
HXDLIN(4929)		if ((body->velx == 0)) {
HXLINE(4929)			_hx_tmp1 = (body->vely != 0);
            		}
            		else {
HXLINE(4929)			_hx_tmp1 = true;
            		}
HXDLIN(4929)		if (!(_hx_tmp1)) {
HXLINE(4929)			_hx_tmp = (body->angvel != 0);
            		}
            		else {
HXLINE(4929)			_hx_tmp = true;
            		}
HXDLIN(4929)		if (_hx_tmp) {
HXLINE(4929)			HX_STACK_DO_THROW(HX_("Error: Static body cannot have any real velocity, only kinematic or surface velocities",46,0b,8d,80));
            		}
HXLINE(4931)		{
HXLINE(4932)			 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite4 = body->shapes->head;
HXLINE(4933)			while(hx::IsNotNull( cx_ite4 )){
HXLINE(4934)				 ::zpp_nape::shape::ZPP_Shape s1 = cx_ite4->elt;
HXLINE(4936)				if ((s1->type == 1)) {
HXLINE(4937)					{
HXLINE(4937)						 ::zpp_nape::shape::ZPP_Polygon _this18 = s1->polygon;
HXDLIN(4937)						if (_this18->zip_sanitation) {
HXLINE(4937)							_this18->zip_sanitation = false;
HXDLIN(4937)							_this18->splice_collinear_real();
            						}
            					}
HXLINE(4939)					 ::nape::shape::ValidationResult res = s1->polygon->valid();
HXLINE(4940)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE(4940)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(4940)						::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN(4940)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN(4940)					if (hx::IsNotEq( res,::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE(4941)						::String _hx_tmp2 = ((HX_("Error: Cannot simulate with an invalid Polygon : ",3b,8a,46,28) + s1->polygon->outer->toString()) + HX_(" is invalid : ",85,20,62,1d));
HXDLIN(4941)						HX_STACK_DO_THROW((_hx_tmp2 + res->toString()));
            					}
HXLINE(4944)					{
HXLINE(4944)						 ::zpp_nape::shape::ZPP_Polygon _this19 = s1->polygon;
HXDLIN(4944)						if (_this19->zip_gaxi) {
HXLINE(4944)							if (hx::IsNotNull( _this19->body )) {
HXLINE(4944)								_this19->zip_gaxi = false;
HXDLIN(4944)								_this19->validate_laxi();
HXDLIN(4944)								{
HXLINE(4944)									 ::zpp_nape::phys::ZPP_Body _this20 = _this19->body;
HXDLIN(4944)									if (_this20->zip_axis) {
HXLINE(4944)										_this20->zip_axis = false;
HXDLIN(4944)										{
HXLINE(4944)											_this20->axisx = ::Math_obj::sin(_this20->rot);
HXDLIN(4944)											_this20->axisy = ::Math_obj::cos(_this20->rot);
            										}
            									}
            								}
HXDLIN(4944)								if (_this19->zip_gverts) {
HXLINE(4944)									if (hx::IsNotNull( _this19->body )) {
HXLINE(4944)										_this19->zip_gverts = false;
HXDLIN(4944)										_this19->validate_lverts();
HXDLIN(4944)										{
HXLINE(4944)											 ::zpp_nape::phys::ZPP_Body _this21 = _this19->body;
HXDLIN(4944)											if (_this21->zip_axis) {
HXLINE(4944)												_this21->zip_axis = false;
HXDLIN(4944)												{
HXLINE(4944)													_this21->axisx = ::Math_obj::sin(_this21->rot);
HXDLIN(4944)													_this21->axisy = ::Math_obj::cos(_this21->rot);
            												}
            											}
            										}
HXDLIN(4944)										 ::zpp_nape::geom::ZPP_Vec2 li1 = _this19->lverts->next;
HXDLIN(4944)										{
HXLINE(4944)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite5 = _this19->gverts->next;
HXDLIN(4944)											while(hx::IsNotNull( cx_ite5 )){
HXLINE(4944)												 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite5;
HXDLIN(4944)												{
HXLINE(4944)													 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN(4944)													li1 = li1->next;
HXDLIN(4944)													{
HXLINE(4944)														g1->x = (_this19->body->posx + ((_this19->body->axisy * l1->x) - (_this19->body->axisx * l1->y)));
HXDLIN(4944)														g1->y = (_this19->body->posy + ((l1->x * _this19->body->axisx) + (l1->y * _this19->body->axisy)));
            													}
            												}
HXDLIN(4944)												cx_ite5 = cx_ite5->next;
            											}
            										}
            									}
            								}
HXDLIN(4944)								 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this19->edges->head;
HXDLIN(4944)								{
HXLINE(4944)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite6 = _this19->gverts->next;
HXDLIN(4944)									 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite6;
HXDLIN(4944)									cx_ite6 = cx_ite6->next;
HXDLIN(4944)									while(hx::IsNotNull( cx_ite6 )){
HXLINE(4944)										 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite6;
HXDLIN(4944)										{
HXLINE(4944)											 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN(4944)											ite = ite->next;
HXDLIN(4944)											e->gp0 = u1;
HXDLIN(4944)											e->gp1 = v1;
HXDLIN(4944)											{
HXLINE(4944)												e->gnormx = ((_this19->body->axisy * e->lnormx) - (_this19->body->axisx * e->lnormy));
HXDLIN(4944)												e->gnormy = ((e->lnormx * _this19->body->axisx) + (e->lnormy * _this19->body->axisy));
            											}
HXDLIN(4944)											e->gprojection = (((_this19->body->posx * e->gnormx) + (_this19->body->posy * e->gnormy)) + e->lprojection);
HXDLIN(4944)											if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE(4944)												e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN(4944)												e->wrap_gnorm->zpp_inner->y = e->gnormy;
            											}
HXDLIN(4944)											e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN(4944)											e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            										}
HXDLIN(4944)										u1 = v1;
HXDLIN(4944)										cx_ite6 = cx_ite6->next;
            									}
HXDLIN(4944)									 ::zpp_nape::geom::ZPP_Vec2 v2 = _this19->gverts->next;
HXDLIN(4944)									{
HXLINE(4944)										 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN(4944)										ite = ite->next;
HXDLIN(4944)										e1->gp0 = u1;
HXDLIN(4944)										e1->gp1 = v2;
HXDLIN(4944)										{
HXLINE(4944)											e1->gnormx = ((_this19->body->axisy * e1->lnormx) - (_this19->body->axisx * e1->lnormy));
HXDLIN(4944)											e1->gnormy = ((e1->lnormx * _this19->body->axisx) + (e1->lnormy * _this19->body->axisy));
            										}
HXDLIN(4944)										e1->gprojection = (((_this19->body->posx * e1->gnormx) + (_this19->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN(4944)										if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE(4944)											e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN(4944)											e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            										}
HXDLIN(4944)										e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN(4944)										e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(4947)				cx_ite4 = cx_ite4->next;
            			}
            		}
HXLINE(4950)		body->sweepFrozen = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,static_validation,(void))

void ZPP_Space_obj::validation(){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_4952_validation)
HXLINE(4953)		{
HXLINE(4953)			 ::zpp_nape::space::ZPP_CbSetManager _this = this->cbsets;
HXDLIN(4953)			if (!(_this->cbsets->empty())) {
HXLINE(4953)				 ::zpp_nape::util::ZPP_Set_ZPP_CbSet set_ite = _this->cbsets->parent;
HXDLIN(4953)				while(hx::IsNotNull( set_ite->prev )){
HXLINE(4953)					set_ite = set_ite->prev;
            				}
HXDLIN(4953)				while(hx::IsNotNull( set_ite )){
HXLINE(4953)					 ::zpp_nape::callbacks::ZPP_CbSet cb = set_ite->data;
HXDLIN(4953)					cb->validate();
HXDLIN(4953)					if (hx::IsNotNull( set_ite->next )) {
HXLINE(4953)						set_ite = set_ite->next;
HXDLIN(4953)						while(hx::IsNotNull( set_ite->prev )){
HXLINE(4953)							set_ite = set_ite->prev;
            						}
            					}
            					else {
HXLINE(4953)						while(true){
HXLINE(4953)							bool _hx_tmp;
HXDLIN(4953)							if (hx::IsNotNull( set_ite->parent )) {
HXLINE(4953)								_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            							}
            							else {
HXLINE(4953)								_hx_tmp = false;
            							}
HXDLIN(4953)							if (!(_hx_tmp)) {
HXLINE(4953)								goto _hx_goto_245;
            							}
HXDLIN(4953)							set_ite = set_ite->parent;
            						}
            						_hx_goto_245:;
HXDLIN(4953)						set_ite = set_ite->parent;
            					}
            				}
            			}
            		}
HXLINE(4955)		{
HXLINE(4956)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;
HXLINE(4957)			while(hx::IsNotNull( cx_ite )){
HXLINE(4958)				 ::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;
HXLINE(4959)				{
HXLINE(4960)					cur->sweepRadius = ( (Float)(0) );
HXLINE(4961)					{
HXLINE(4962)						 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;
HXLINE(4963)						while(hx::IsNotNull( cx_ite1 )){
HXLINE(4964)							 ::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;
HXLINE(4965)							{
HXLINE(4966)								if ((s->type == 1)) {
HXLINE(4967)									{
HXLINE(4967)										 ::zpp_nape::shape::ZPP_Polygon _this1 = s->polygon;
HXDLIN(4967)										if (_this1->zip_sanitation) {
HXLINE(4967)											_this1->zip_sanitation = false;
HXDLIN(4967)											_this1->splice_collinear_real();
            										}
            									}
HXLINE(4969)									 ::nape::shape::ValidationResult res = s->polygon->valid();
HXLINE(4970)									if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE(4970)										::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(4970)										::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN(4970)										::zpp_nape::util::ZPP_Flags_obj::internal = false;
            									}
HXDLIN(4970)									if (hx::IsNotEq( res,::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE(4971)										::String _hx_tmp1 = ((HX_("Error: Cannot simulate with an invalid Polygon : ",3b,8a,46,28) + s->polygon->outer->toString()) + HX_(" is invalid : ",85,20,62,1d));
HXDLIN(4971)										HX_STACK_DO_THROW((_hx_tmp1 + res->toString()));
            									}
HXLINE(4974)									{
HXLINE(4974)										 ::zpp_nape::shape::ZPP_Polygon _this2 = s->polygon;
HXDLIN(4974)										if (_this2->zip_gaxi) {
HXLINE(4974)											if (hx::IsNotNull( _this2->body )) {
HXLINE(4974)												_this2->zip_gaxi = false;
HXDLIN(4974)												_this2->validate_laxi();
HXDLIN(4974)												{
HXLINE(4974)													 ::zpp_nape::phys::ZPP_Body _this3 = _this2->body;
HXDLIN(4974)													if (_this3->zip_axis) {
HXLINE(4974)														_this3->zip_axis = false;
HXDLIN(4974)														{
HXLINE(4974)															_this3->axisx = ::Math_obj::sin(_this3->rot);
HXDLIN(4974)															_this3->axisy = ::Math_obj::cos(_this3->rot);
            														}
            													}
            												}
HXDLIN(4974)												if (_this2->zip_gverts) {
HXLINE(4974)													if (hx::IsNotNull( _this2->body )) {
HXLINE(4974)														_this2->zip_gverts = false;
HXDLIN(4974)														_this2->validate_lverts();
HXDLIN(4974)														{
HXLINE(4974)															 ::zpp_nape::phys::ZPP_Body _this4 = _this2->body;
HXDLIN(4974)															if (_this4->zip_axis) {
HXLINE(4974)																_this4->zip_axis = false;
HXDLIN(4974)																{
HXLINE(4974)																	_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN(4974)																	_this4->axisy = ::Math_obj::cos(_this4->rot);
            																}
            															}
            														}
HXDLIN(4974)														 ::zpp_nape::geom::ZPP_Vec2 li = _this2->lverts->next;
HXDLIN(4974)														{
HXLINE(4974)															 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this2->gverts->next;
HXDLIN(4974)															while(hx::IsNotNull( cx_ite2 )){
HXLINE(4974)																 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;
HXDLIN(4974)																{
HXLINE(4974)																	 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(4974)																	li = li->next;
HXDLIN(4974)																	{
HXLINE(4974)																		g->x = (_this2->body->posx + ((_this2->body->axisy * l->x) - (_this2->body->axisx * l->y)));
HXDLIN(4974)																		g->y = (_this2->body->posy + ((l->x * _this2->body->axisx) + (l->y * _this2->body->axisy)));
            																	}
            																}
HXDLIN(4974)																cx_ite2 = cx_ite2->next;
            															}
            														}
            													}
            												}
HXDLIN(4974)												 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this2->edges->head;
HXDLIN(4974)												{
HXLINE(4974)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this2->gverts->next;
HXDLIN(4974)													 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite3;
HXDLIN(4974)													cx_ite3 = cx_ite3->next;
HXDLIN(4974)													while(hx::IsNotNull( cx_ite3 )){
HXLINE(4974)														 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite3;
HXDLIN(4974)														{
HXLINE(4974)															 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN(4974)															ite = ite->next;
HXDLIN(4974)															e->gp0 = u;
HXDLIN(4974)															e->gp1 = v;
HXDLIN(4974)															{
HXLINE(4974)																e->gnormx = ((_this2->body->axisy * e->lnormx) - (_this2->body->axisx * e->lnormy));
HXDLIN(4974)																e->gnormy = ((e->lnormx * _this2->body->axisx) + (e->lnormy * _this2->body->axisy));
            															}
HXDLIN(4974)															e->gprojection = (((_this2->body->posx * e->gnormx) + (_this2->body->posy * e->gnormy)) + e->lprojection);
HXDLIN(4974)															if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE(4974)																e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN(4974)																e->wrap_gnorm->zpp_inner->y = e->gnormy;
            															}
HXDLIN(4974)															e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN(4974)															e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            														}
HXDLIN(4974)														u = v;
HXDLIN(4974)														cx_ite3 = cx_ite3->next;
            													}
HXDLIN(4974)													 ::zpp_nape::geom::ZPP_Vec2 v1 = _this2->gverts->next;
HXDLIN(4974)													{
HXLINE(4974)														 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN(4974)														ite = ite->next;
HXDLIN(4974)														e1->gp0 = u;
HXDLIN(4974)														e1->gp1 = v1;
HXDLIN(4974)														{
HXLINE(4974)															e1->gnormx = ((_this2->body->axisy * e1->lnormx) - (_this2->body->axisx * e1->lnormy));
HXDLIN(4974)															e1->gnormy = ((e1->lnormx * _this2->body->axisx) + (e1->lnormy * _this2->body->axisy));
            														}
HXDLIN(4974)														e1->gprojection = (((_this2->body->posx * e1->gnormx) + (_this2->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN(4974)														if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE(4974)															e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN(4974)															e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            														}
HXDLIN(4974)														e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN(4974)														e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            													}
            												}
            											}
            										}
            									}
            								}
HXLINE(4976)								s->validate_sweepRadius();
HXLINE(4977)								if ((s->sweepRadius > cur->sweepRadius)) {
HXLINE(4977)									cur->sweepRadius = s->sweepRadius;
            								}
            							}
HXLINE(4979)							cx_ite1 = cx_ite1->next;
            						}
            					}
HXLINE(4982)					cur->validate_mass();
HXLINE(4983)					cur->validate_inertia();
HXLINE(4984)					if (hx::IsNotNull( cur->shapes->head )) {
HXLINE(4985)						{
HXLINE(4985)							if (hx::IsNull( cur->shapes->head )) {
HXLINE(4985)								HX_STACK_DO_THROW(HX_("Error: Body bounds only makes sense if it contains shapes",7b,b0,85,6c));
            							}
HXDLIN(4985)							if (cur->zip_aabb) {
HXLINE(4985)								cur->zip_aabb = false;
HXDLIN(4985)								{
HXLINE(4985)									cur->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(4985)									cur->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
            								}
HXDLIN(4985)								{
HXLINE(4985)									cur->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(4985)									cur->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
            								}
HXDLIN(4985)								{
HXLINE(4985)									 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite4 = cur->shapes->head;
HXDLIN(4985)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(4985)										 ::zpp_nape::shape::ZPP_Shape s1 = cx_ite4->elt;
HXDLIN(4985)										{
HXLINE(4985)											if (s1->zip_aabb) {
HXLINE(4985)												if (hx::IsNotNull( s1->body )) {
HXLINE(4985)													s1->zip_aabb = false;
HXDLIN(4985)													if ((s1->type == 0)) {
HXLINE(4985)														 ::zpp_nape::shape::ZPP_Circle _this5 = s1->circle;
HXDLIN(4985)														if (_this5->zip_worldCOM) {
HXLINE(4985)															if (hx::IsNotNull( _this5->body )) {
HXLINE(4985)																_this5->zip_worldCOM = false;
HXDLIN(4985)																if (_this5->zip_localCOM) {
HXLINE(4985)																	_this5->zip_localCOM = false;
HXDLIN(4985)																	if ((_this5->type == 1)) {
HXLINE(4985)																		 ::zpp_nape::shape::ZPP_Polygon _this6 = _this5->polygon;
HXDLIN(4985)																		if (hx::IsNull( _this6->lverts->next )) {
HXLINE(4985)																			HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            																		}
HXDLIN(4985)																		if (hx::IsNull( _this6->lverts->next->next )) {
HXLINE(4985)																			_this6->localCOMx = _this6->lverts->next->x;
HXDLIN(4985)																			_this6->localCOMy = _this6->lverts->next->y;
            																		}
            																		else {
HXLINE(4985)																			if (hx::IsNull( _this6->lverts->next->next->next )) {
HXLINE(4985)																				{
HXLINE(4985)																					_this6->localCOMx = _this6->lverts->next->x;
HXDLIN(4985)																					_this6->localCOMy = _this6->lverts->next->y;
            																				}
HXDLIN(4985)																				{
HXLINE(4985)																					Float t = ((Float)1.0);
HXDLIN(4985)																					 ::zpp_nape::shape::ZPP_Polygon _this7 = _this6;
HXDLIN(4985)																					_this7->localCOMx = (_this7->localCOMx + (_this6->lverts->next->next->x * t));
HXDLIN(4985)																					 ::zpp_nape::shape::ZPP_Polygon _this8 = _this6;
HXDLIN(4985)																					_this8->localCOMy = (_this8->localCOMy + (_this6->lverts->next->next->y * t));
            																				}
HXDLIN(4985)																				{
HXLINE(4985)																					Float t1 = ((Float)0.5);
HXDLIN(4985)																					 ::zpp_nape::shape::ZPP_Polygon _this9 = _this6;
HXDLIN(4985)																					_this9->localCOMx = (_this9->localCOMx * t1);
HXDLIN(4985)																					 ::zpp_nape::shape::ZPP_Polygon _this10 = _this6;
HXDLIN(4985)																					_this10->localCOMy = (_this10->localCOMy * t1);
            																				}
            																			}
            																			else {
HXLINE(4985)																				{
HXLINE(4985)																					_this6->localCOMx = ( (Float)(0) );
HXDLIN(4985)																					_this6->localCOMy = ( (Float)(0) );
            																				}
HXDLIN(4985)																				Float area = ((Float)0.0);
HXDLIN(4985)																				{
HXLINE(4985)																					 ::zpp_nape::geom::ZPP_Vec2 cx_ite5 = _this6->lverts->next;
HXDLIN(4985)																					 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite5;
HXDLIN(4985)																					cx_ite5 = cx_ite5->next;
HXDLIN(4985)																					 ::zpp_nape::geom::ZPP_Vec2 v2 = cx_ite5;
HXDLIN(4985)																					cx_ite5 = cx_ite5->next;
HXDLIN(4985)																					while(hx::IsNotNull( cx_ite5 )){
HXLINE(4985)																						 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite5;
HXDLIN(4985)																						{
HXLINE(4985)																							area = (area + (v2->x * (w->y - u1->y)));
HXDLIN(4985)																							Float cf = ((w->y * v2->x) - (w->x * v2->y));
HXDLIN(4985)																							 ::zpp_nape::shape::ZPP_Polygon _this11 = _this6;
HXDLIN(4985)																							_this11->localCOMx = (_this11->localCOMx + ((v2->x + w->x) * cf));
HXDLIN(4985)																							 ::zpp_nape::shape::ZPP_Polygon _this12 = _this6;
HXDLIN(4985)																							_this12->localCOMy = (_this12->localCOMy + ((v2->y + w->y) * cf));
            																						}
HXDLIN(4985)																						u1 = v2;
HXDLIN(4985)																						v2 = w;
HXDLIN(4985)																						cx_ite5 = cx_ite5->next;
            																					}
HXDLIN(4985)																					cx_ite5 = _this6->lverts->next;
HXDLIN(4985)																					 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite5;
HXDLIN(4985)																					{
HXLINE(4985)																						area = (area + (v2->x * (w1->y - u1->y)));
HXDLIN(4985)																						Float cf1 = ((w1->y * v2->x) - (w1->x * v2->y));
HXDLIN(4985)																						 ::zpp_nape::shape::ZPP_Polygon _this13 = _this6;
HXDLIN(4985)																						_this13->localCOMx = (_this13->localCOMx + ((v2->x + w1->x) * cf1));
HXDLIN(4985)																						 ::zpp_nape::shape::ZPP_Polygon _this14 = _this6;
HXDLIN(4985)																						_this14->localCOMy = (_this14->localCOMy + ((v2->y + w1->y) * cf1));
            																					}
HXDLIN(4985)																					u1 = v2;
HXDLIN(4985)																					v2 = w1;
HXDLIN(4985)																					cx_ite5 = cx_ite5->next;
HXDLIN(4985)																					 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite5;
HXDLIN(4985)																					{
HXLINE(4985)																						area = (area + (v2->x * (w2->y - u1->y)));
HXDLIN(4985)																						Float cf2 = ((w2->y * v2->x) - (w2->x * v2->y));
HXDLIN(4985)																						 ::zpp_nape::shape::ZPP_Polygon _this15 = _this6;
HXDLIN(4985)																						_this15->localCOMx = (_this15->localCOMx + ((v2->x + w2->x) * cf2));
HXDLIN(4985)																						 ::zpp_nape::shape::ZPP_Polygon _this16 = _this6;
HXDLIN(4985)																						_this16->localCOMy = (_this16->localCOMy + ((v2->y + w2->y) * cf2));
            																					}
            																				}
HXDLIN(4985)																				area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(4985)																				{
HXLINE(4985)																					Float t2 = area;
HXDLIN(4985)																					 ::zpp_nape::shape::ZPP_Polygon _this17 = _this6;
HXDLIN(4985)																					_this17->localCOMx = (_this17->localCOMx * t2);
HXDLIN(4985)																					 ::zpp_nape::shape::ZPP_Polygon _this18 = _this6;
HXDLIN(4985)																					_this18->localCOMy = (_this18->localCOMy * t2);
            																				}
            																			}
            																		}
            																	}
HXDLIN(4985)																	if (hx::IsNotNull( _this5->wrap_localCOM )) {
HXLINE(4985)																		_this5->wrap_localCOM->zpp_inner->x = _this5->localCOMx;
HXDLIN(4985)																		_this5->wrap_localCOM->zpp_inner->y = _this5->localCOMy;
            																	}
            																}
HXDLIN(4985)																{
HXLINE(4985)																	 ::zpp_nape::phys::ZPP_Body _this19 = _this5->body;
HXDLIN(4985)																	if (_this19->zip_axis) {
HXLINE(4985)																		_this19->zip_axis = false;
HXDLIN(4985)																		{
HXLINE(4985)																			_this19->axisx = ::Math_obj::sin(_this19->rot);
HXDLIN(4985)																			_this19->axisy = ::Math_obj::cos(_this19->rot);
            																		}
            																	}
            																}
HXDLIN(4985)																{
HXLINE(4985)																	_this5->worldCOMx = (_this5->body->posx + ((_this5->body->axisy * _this5->localCOMx) - (_this5->body->axisx * _this5->localCOMy)));
HXDLIN(4985)																	_this5->worldCOMy = (_this5->body->posy + ((_this5->localCOMx * _this5->body->axisx) + (_this5->localCOMy * _this5->body->axisy)));
            																}
            															}
            														}
HXDLIN(4985)														Float rx = _this5->radius;
HXDLIN(4985)														Float ry = _this5->radius;
HXDLIN(4985)														{
HXLINE(4985)															_this5->aabb->minx = (_this5->worldCOMx - rx);
HXDLIN(4985)															_this5->aabb->miny = (_this5->worldCOMy - ry);
            														}
HXDLIN(4985)														{
HXLINE(4985)															_this5->aabb->maxx = (_this5->worldCOMx + rx);
HXDLIN(4985)															_this5->aabb->maxy = (_this5->worldCOMy + ry);
            														}
            													}
            													else {
HXLINE(4985)														 ::zpp_nape::shape::ZPP_Polygon _this20 = s1->polygon;
HXDLIN(4985)														if (_this20->zip_gverts) {
HXLINE(4985)															if (hx::IsNotNull( _this20->body )) {
HXLINE(4985)																_this20->zip_gverts = false;
HXDLIN(4985)																_this20->validate_lverts();
HXDLIN(4985)																{
HXLINE(4985)																	 ::zpp_nape::phys::ZPP_Body _this21 = _this20->body;
HXDLIN(4985)																	if (_this21->zip_axis) {
HXLINE(4985)																		_this21->zip_axis = false;
HXDLIN(4985)																		{
HXLINE(4985)																			_this21->axisx = ::Math_obj::sin(_this21->rot);
HXDLIN(4985)																			_this21->axisy = ::Math_obj::cos(_this21->rot);
            																		}
            																	}
            																}
HXDLIN(4985)																 ::zpp_nape::geom::ZPP_Vec2 li1 = _this20->lverts->next;
HXDLIN(4985)																{
HXLINE(4985)																	 ::zpp_nape::geom::ZPP_Vec2 cx_ite6 = _this20->gverts->next;
HXDLIN(4985)																	while(hx::IsNotNull( cx_ite6 )){
HXLINE(4985)																		 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite6;
HXDLIN(4985)																		{
HXLINE(4985)																			 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN(4985)																			li1 = li1->next;
HXDLIN(4985)																			{
HXLINE(4985)																				g1->x = (_this20->body->posx + ((_this20->body->axisy * l1->x) - (_this20->body->axisx * l1->y)));
HXDLIN(4985)																				g1->y = (_this20->body->posy + ((l1->x * _this20->body->axisx) + (l1->y * _this20->body->axisy)));
            																			}
            																		}
HXDLIN(4985)																		cx_ite6 = cx_ite6->next;
            																	}
            																}
            															}
            														}
HXDLIN(4985)														if (hx::IsNull( _this20->lverts->next )) {
HXLINE(4985)															HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            														}
HXDLIN(4985)														 ::zpp_nape::geom::ZPP_Vec2 p0 = _this20->gverts->next;
HXDLIN(4985)														{
HXLINE(4985)															_this20->aabb->minx = p0->x;
HXDLIN(4985)															_this20->aabb->miny = p0->y;
            														}
HXDLIN(4985)														{
HXLINE(4985)															_this20->aabb->maxx = p0->x;
HXDLIN(4985)															_this20->aabb->maxy = p0->y;
            														}
HXDLIN(4985)														{
HXLINE(4985)															 ::zpp_nape::geom::ZPP_Vec2 cx_ite7 = _this20->gverts->next->next;
HXDLIN(4985)															while(hx::IsNotNull( cx_ite7 )){
HXLINE(4985)																 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite7;
HXDLIN(4985)																{
HXLINE(4985)																	if ((p->x < _this20->aabb->minx)) {
HXLINE(4985)																		_this20->aabb->minx = p->x;
            																	}
HXDLIN(4985)																	if ((p->x > _this20->aabb->maxx)) {
HXLINE(4985)																		_this20->aabb->maxx = p->x;
            																	}
HXDLIN(4985)																	if ((p->y < _this20->aabb->miny)) {
HXLINE(4985)																		_this20->aabb->miny = p->y;
            																	}
HXDLIN(4985)																	if ((p->y > _this20->aabb->maxy)) {
HXLINE(4985)																		_this20->aabb->maxy = p->y;
            																	}
            																}
HXDLIN(4985)																cx_ite7 = cx_ite7->next;
            															}
            														}
            													}
            												}
            											}
HXDLIN(4985)											{
HXLINE(4985)												 ::zpp_nape::geom::ZPP_AABB _this22 = cur->aabb;
HXDLIN(4985)												 ::zpp_nape::geom::ZPP_AABB x = s1->aabb;
HXDLIN(4985)												if ((x->minx < _this22->minx)) {
HXLINE(4985)													_this22->minx = x->minx;
            												}
HXDLIN(4985)												if ((x->maxx > _this22->maxx)) {
HXLINE(4985)													_this22->maxx = x->maxx;
            												}
HXDLIN(4985)												if ((x->miny < _this22->miny)) {
HXLINE(4985)													_this22->miny = x->miny;
            												}
HXDLIN(4985)												if ((x->maxy > _this22->maxy)) {
HXLINE(4985)													_this22->maxy = x->maxy;
            												}
            											}
            										}
HXDLIN(4985)										cx_ite4 = cx_ite4->next;
            									}
            								}
            							}
            						}
HXLINE(4986)						cur->validate_worldCOM();
            					}
HXLINE(4988)					cur->validate_gravMass();
HXLINE(4989)					if (cur->zip_axis) {
HXLINE(4989)						cur->zip_axis = false;
HXDLIN(4989)						{
HXLINE(4989)							cur->axisx = ::Math_obj::sin(cur->rot);
HXDLIN(4989)							cur->axisy = ::Math_obj::cos(cur->rot);
            						}
            					}
HXLINE(4991)					bool _hx_tmp2;
HXDLIN(4991)					bool _hx_tmp3;
HXDLIN(4991)					if (!(cur->nomove)) {
HXLINE(4991)						_hx_tmp3 = (cur->type == 2);
            					}
            					else {
HXLINE(4991)						_hx_tmp3 = false;
            					}
HXDLIN(4991)					if (_hx_tmp3) {
HXLINE(4991)						_hx_tmp2 = (cur->mass == 0);
            					}
            					else {
HXLINE(4991)						_hx_tmp2 = false;
            					}
HXDLIN(4991)					if (_hx_tmp2) {
HXLINE(4992)						HX_STACK_DO_THROW(HX_("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false",52,b2,78,1f));
            					}
HXLINE(4994)					bool _hx_tmp4;
HXDLIN(4994)					bool _hx_tmp5;
HXDLIN(4994)					if (!(cur->norotate)) {
HXLINE(4994)						_hx_tmp5 = (cur->type == 2);
            					}
            					else {
HXLINE(4994)						_hx_tmp5 = false;
            					}
HXDLIN(4994)					if (_hx_tmp5) {
HXLINE(4994)						_hx_tmp4 = (cur->inertia == 0);
            					}
            					else {
HXLINE(4994)						_hx_tmp4 = false;
            					}
HXDLIN(4994)					if (_hx_tmp4) {
HXLINE(4995)						HX_STACK_DO_THROW(HX_("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false",93,3f,65,99));
            					}
HXLINE(4998)					{
HXLINE(4999)						bool _hx_tmp6;
HXDLIN(4999)						if (cur->component->woken) {
HXLINE(4999)							_hx_tmp6 = hx::IsNotNull( cur->cbSet );
            						}
            						else {
HXLINE(4999)							_hx_tmp6 = false;
            						}
HXDLIN(4999)						if (_hx_tmp6) {
HXLINE(5001)							 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite8 = cur->cbSet->bodylisteners->head;
HXLINE(5002)							while(hx::IsNotNull( cx_ite8 )){
HXLINE(5003)								 ::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite8->elt;
HXLINE(5004)								{
HXLINE(5005)									if ((i->event != 2)) {
HXLINE(5006)										cx_ite8 = cx_ite8->next;
HXLINE(5007)										continue;
            									}
HXLINE(5009)									 ::zpp_nape::callbacks::ZPP_Callback cb1 = this->push_callback(i);
HXLINE(5010)									cb1->event = 2;
HXLINE(5011)									cb1->body = cur;
            								}
HXLINE(5013)								cx_ite8 = cx_ite8->next;
            							}
            						}
HXLINE(5017)						cur->component->woken = false;
            					}
HXLINE(5019)					{
HXLINE(5020)						 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite9 = cur->shapes->head;
HXLINE(5021)						while(hx::IsNotNull( cx_ite9 )){
HXLINE(5022)							 ::zpp_nape::shape::ZPP_Shape shape = cx_ite9->elt;
HXLINE(5023)							this->bphase->sync(shape);
HXLINE(5024)							cx_ite9 = cx_ite9->next;
            						}
            					}
            				}
HXLINE(5028)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(5033)		{
HXLINE(5034)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite10 = this->kinematics->head;
HXLINE(5035)			while(hx::IsNotNull( cx_ite10 )){
HXLINE(5036)				 ::zpp_nape::phys::ZPP_Body cur1 = cx_ite10->elt;
HXLINE(5037)				{
HXLINE(5038)					cur1->sweepRadius = ( (Float)(0) );
HXLINE(5039)					{
HXLINE(5040)						 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite11 = cur1->shapes->head;
HXLINE(5041)						while(hx::IsNotNull( cx_ite11 )){
HXLINE(5042)							 ::zpp_nape::shape::ZPP_Shape s2 = cx_ite11->elt;
HXLINE(5043)							{
HXLINE(5044)								if ((s2->type == 1)) {
HXLINE(5045)									{
HXLINE(5045)										 ::zpp_nape::shape::ZPP_Polygon _this23 = s2->polygon;
HXDLIN(5045)										if (_this23->zip_sanitation) {
HXLINE(5045)											_this23->zip_sanitation = false;
HXDLIN(5045)											_this23->splice_collinear_real();
            										}
            									}
HXLINE(5047)									 ::nape::shape::ValidationResult res1 = s2->polygon->valid();
HXLINE(5048)									if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE(5048)										::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(5048)										::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN(5048)										::zpp_nape::util::ZPP_Flags_obj::internal = false;
            									}
HXDLIN(5048)									if (hx::IsNotEq( res1,::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE(5049)										::String _hx_tmp7 = ((HX_("Error: Cannot simulate with an invalid Polygon : ",3b,8a,46,28) + s2->polygon->outer->toString()) + HX_(" is invalid : ",85,20,62,1d));
HXDLIN(5049)										HX_STACK_DO_THROW((_hx_tmp7 + res1->toString()));
            									}
HXLINE(5052)									{
HXLINE(5052)										 ::zpp_nape::shape::ZPP_Polygon _this24 = s2->polygon;
HXDLIN(5052)										if (_this24->zip_gaxi) {
HXLINE(5052)											if (hx::IsNotNull( _this24->body )) {
HXLINE(5052)												_this24->zip_gaxi = false;
HXDLIN(5052)												_this24->validate_laxi();
HXDLIN(5052)												{
HXLINE(5052)													 ::zpp_nape::phys::ZPP_Body _this25 = _this24->body;
HXDLIN(5052)													if (_this25->zip_axis) {
HXLINE(5052)														_this25->zip_axis = false;
HXDLIN(5052)														{
HXLINE(5052)															_this25->axisx = ::Math_obj::sin(_this25->rot);
HXDLIN(5052)															_this25->axisy = ::Math_obj::cos(_this25->rot);
            														}
            													}
            												}
HXDLIN(5052)												if (_this24->zip_gverts) {
HXLINE(5052)													if (hx::IsNotNull( _this24->body )) {
HXLINE(5052)														_this24->zip_gverts = false;
HXDLIN(5052)														_this24->validate_lverts();
HXDLIN(5052)														{
HXLINE(5052)															 ::zpp_nape::phys::ZPP_Body _this26 = _this24->body;
HXDLIN(5052)															if (_this26->zip_axis) {
HXLINE(5052)																_this26->zip_axis = false;
HXDLIN(5052)																{
HXLINE(5052)																	_this26->axisx = ::Math_obj::sin(_this26->rot);
HXDLIN(5052)																	_this26->axisy = ::Math_obj::cos(_this26->rot);
            																}
            															}
            														}
HXDLIN(5052)														 ::zpp_nape::geom::ZPP_Vec2 li2 = _this24->lverts->next;
HXDLIN(5052)														{
HXLINE(5052)															 ::zpp_nape::geom::ZPP_Vec2 cx_ite12 = _this24->gverts->next;
HXDLIN(5052)															while(hx::IsNotNull( cx_ite12 )){
HXLINE(5052)																 ::zpp_nape::geom::ZPP_Vec2 g2 = cx_ite12;
HXDLIN(5052)																{
HXLINE(5052)																	 ::zpp_nape::geom::ZPP_Vec2 l2 = li2;
HXDLIN(5052)																	li2 = li2->next;
HXDLIN(5052)																	{
HXLINE(5052)																		g2->x = (_this24->body->posx + ((_this24->body->axisy * l2->x) - (_this24->body->axisx * l2->y)));
HXDLIN(5052)																		g2->y = (_this24->body->posy + ((l2->x * _this24->body->axisx) + (l2->y * _this24->body->axisy)));
            																	}
            																}
HXDLIN(5052)																cx_ite12 = cx_ite12->next;
            															}
            														}
            													}
            												}
HXDLIN(5052)												 ::zpp_nape::util::ZNPNode_ZPP_Edge ite1 = _this24->edges->head;
HXDLIN(5052)												{
HXLINE(5052)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite13 = _this24->gverts->next;
HXDLIN(5052)													 ::zpp_nape::geom::ZPP_Vec2 u2 = cx_ite13;
HXDLIN(5052)													cx_ite13 = cx_ite13->next;
HXDLIN(5052)													while(hx::IsNotNull( cx_ite13 )){
HXLINE(5052)														 ::zpp_nape::geom::ZPP_Vec2 v3 = cx_ite13;
HXDLIN(5052)														{
HXLINE(5052)															 ::zpp_nape::shape::ZPP_Edge e2 = ite1->elt;
HXDLIN(5052)															ite1 = ite1->next;
HXDLIN(5052)															e2->gp0 = u2;
HXDLIN(5052)															e2->gp1 = v3;
HXDLIN(5052)															{
HXLINE(5052)																e2->gnormx = ((_this24->body->axisy * e2->lnormx) - (_this24->body->axisx * e2->lnormy));
HXDLIN(5052)																e2->gnormy = ((e2->lnormx * _this24->body->axisx) + (e2->lnormy * _this24->body->axisy));
            															}
HXDLIN(5052)															e2->gprojection = (((_this24->body->posx * e2->gnormx) + (_this24->body->posy * e2->gnormy)) + e2->lprojection);
HXDLIN(5052)															if (hx::IsNotNull( e2->wrap_gnorm )) {
HXLINE(5052)																e2->wrap_gnorm->zpp_inner->x = e2->gnormx;
HXDLIN(5052)																e2->wrap_gnorm->zpp_inner->y = e2->gnormy;
            															}
HXDLIN(5052)															e2->tp0 = ((e2->gp0->y * e2->gnormx) - (e2->gp0->x * e2->gnormy));
HXDLIN(5052)															e2->tp1 = ((e2->gp1->y * e2->gnormx) - (e2->gp1->x * e2->gnormy));
            														}
HXDLIN(5052)														u2 = v3;
HXDLIN(5052)														cx_ite13 = cx_ite13->next;
            													}
HXDLIN(5052)													 ::zpp_nape::geom::ZPP_Vec2 v4 = _this24->gverts->next;
HXDLIN(5052)													{
HXLINE(5052)														 ::zpp_nape::shape::ZPP_Edge e3 = ite1->elt;
HXDLIN(5052)														ite1 = ite1->next;
HXDLIN(5052)														e3->gp0 = u2;
HXDLIN(5052)														e3->gp1 = v4;
HXDLIN(5052)														{
HXLINE(5052)															e3->gnormx = ((_this24->body->axisy * e3->lnormx) - (_this24->body->axisx * e3->lnormy));
HXDLIN(5052)															e3->gnormy = ((e3->lnormx * _this24->body->axisx) + (e3->lnormy * _this24->body->axisy));
            														}
HXDLIN(5052)														e3->gprojection = (((_this24->body->posx * e3->gnormx) + (_this24->body->posy * e3->gnormy)) + e3->lprojection);
HXDLIN(5052)														if (hx::IsNotNull( e3->wrap_gnorm )) {
HXLINE(5052)															e3->wrap_gnorm->zpp_inner->x = e3->gnormx;
HXDLIN(5052)															e3->wrap_gnorm->zpp_inner->y = e3->gnormy;
            														}
HXDLIN(5052)														e3->tp0 = ((e3->gp0->y * e3->gnormx) - (e3->gp0->x * e3->gnormy));
HXDLIN(5052)														e3->tp1 = ((e3->gp1->y * e3->gnormx) - (e3->gp1->x * e3->gnormy));
            													}
            												}
            											}
            										}
            									}
            								}
HXLINE(5054)								s2->validate_sweepRadius();
HXLINE(5055)								if ((s2->sweepRadius > cur1->sweepRadius)) {
HXLINE(5055)									cur1->sweepRadius = s2->sweepRadius;
            								}
            							}
HXLINE(5057)							cx_ite11 = cx_ite11->next;
            						}
            					}
HXLINE(5060)					cur1->validate_mass();
HXLINE(5061)					cur1->validate_inertia();
HXLINE(5062)					if (hx::IsNotNull( cur1->shapes->head )) {
HXLINE(5063)						{
HXLINE(5063)							if (hx::IsNull( cur1->shapes->head )) {
HXLINE(5063)								HX_STACK_DO_THROW(HX_("Error: Body bounds only makes sense if it contains shapes",7b,b0,85,6c));
            							}
HXDLIN(5063)							if (cur1->zip_aabb) {
HXLINE(5063)								cur1->zip_aabb = false;
HXDLIN(5063)								{
HXLINE(5063)									cur1->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(5063)									cur1->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
            								}
HXDLIN(5063)								{
HXLINE(5063)									cur1->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(5063)									cur1->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
            								}
HXDLIN(5063)								{
HXLINE(5063)									 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite14 = cur1->shapes->head;
HXDLIN(5063)									while(hx::IsNotNull( cx_ite14 )){
HXLINE(5063)										 ::zpp_nape::shape::ZPP_Shape s3 = cx_ite14->elt;
HXDLIN(5063)										{
HXLINE(5063)											if (s3->zip_aabb) {
HXLINE(5063)												if (hx::IsNotNull( s3->body )) {
HXLINE(5063)													s3->zip_aabb = false;
HXDLIN(5063)													if ((s3->type == 0)) {
HXLINE(5063)														 ::zpp_nape::shape::ZPP_Circle _this27 = s3->circle;
HXDLIN(5063)														if (_this27->zip_worldCOM) {
HXLINE(5063)															if (hx::IsNotNull( _this27->body )) {
HXLINE(5063)																_this27->zip_worldCOM = false;
HXDLIN(5063)																if (_this27->zip_localCOM) {
HXLINE(5063)																	_this27->zip_localCOM = false;
HXDLIN(5063)																	if ((_this27->type == 1)) {
HXLINE(5063)																		 ::zpp_nape::shape::ZPP_Polygon _this28 = _this27->polygon;
HXDLIN(5063)																		if (hx::IsNull( _this28->lverts->next )) {
HXLINE(5063)																			HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            																		}
HXDLIN(5063)																		if (hx::IsNull( _this28->lverts->next->next )) {
HXLINE(5063)																			_this28->localCOMx = _this28->lverts->next->x;
HXDLIN(5063)																			_this28->localCOMy = _this28->lverts->next->y;
            																		}
            																		else {
HXLINE(5063)																			if (hx::IsNull( _this28->lverts->next->next->next )) {
HXLINE(5063)																				{
HXLINE(5063)																					_this28->localCOMx = _this28->lverts->next->x;
HXDLIN(5063)																					_this28->localCOMy = _this28->lverts->next->y;
            																				}
HXDLIN(5063)																				{
HXLINE(5063)																					Float t3 = ((Float)1.0);
HXDLIN(5063)																					 ::zpp_nape::shape::ZPP_Polygon _this29 = _this28;
HXDLIN(5063)																					_this29->localCOMx = (_this29->localCOMx + (_this28->lverts->next->next->x * t3));
HXDLIN(5063)																					 ::zpp_nape::shape::ZPP_Polygon _this30 = _this28;
HXDLIN(5063)																					_this30->localCOMy = (_this30->localCOMy + (_this28->lverts->next->next->y * t3));
            																				}
HXDLIN(5063)																				{
HXLINE(5063)																					Float t4 = ((Float)0.5);
HXDLIN(5063)																					 ::zpp_nape::shape::ZPP_Polygon _this31 = _this28;
HXDLIN(5063)																					_this31->localCOMx = (_this31->localCOMx * t4);
HXDLIN(5063)																					 ::zpp_nape::shape::ZPP_Polygon _this32 = _this28;
HXDLIN(5063)																					_this32->localCOMy = (_this32->localCOMy * t4);
            																				}
            																			}
            																			else {
HXLINE(5063)																				{
HXLINE(5063)																					_this28->localCOMx = ( (Float)(0) );
HXDLIN(5063)																					_this28->localCOMy = ( (Float)(0) );
            																				}
HXDLIN(5063)																				Float area1 = ((Float)0.0);
HXDLIN(5063)																				{
HXLINE(5063)																					 ::zpp_nape::geom::ZPP_Vec2 cx_ite15 = _this28->lverts->next;
HXDLIN(5063)																					 ::zpp_nape::geom::ZPP_Vec2 u3 = cx_ite15;
HXDLIN(5063)																					cx_ite15 = cx_ite15->next;
HXDLIN(5063)																					 ::zpp_nape::geom::ZPP_Vec2 v5 = cx_ite15;
HXDLIN(5063)																					cx_ite15 = cx_ite15->next;
HXDLIN(5063)																					while(hx::IsNotNull( cx_ite15 )){
HXLINE(5063)																						 ::zpp_nape::geom::ZPP_Vec2 w3 = cx_ite15;
HXDLIN(5063)																						{
HXLINE(5063)																							area1 = (area1 + (v5->x * (w3->y - u3->y)));
HXDLIN(5063)																							Float cf3 = ((w3->y * v5->x) - (w3->x * v5->y));
HXDLIN(5063)																							 ::zpp_nape::shape::ZPP_Polygon _this33 = _this28;
HXDLIN(5063)																							_this33->localCOMx = (_this33->localCOMx + ((v5->x + w3->x) * cf3));
HXDLIN(5063)																							 ::zpp_nape::shape::ZPP_Polygon _this34 = _this28;
HXDLIN(5063)																							_this34->localCOMy = (_this34->localCOMy + ((v5->y + w3->y) * cf3));
            																						}
HXDLIN(5063)																						u3 = v5;
HXDLIN(5063)																						v5 = w3;
HXDLIN(5063)																						cx_ite15 = cx_ite15->next;
            																					}
HXDLIN(5063)																					cx_ite15 = _this28->lverts->next;
HXDLIN(5063)																					 ::zpp_nape::geom::ZPP_Vec2 w4 = cx_ite15;
HXDLIN(5063)																					{
HXLINE(5063)																						area1 = (area1 + (v5->x * (w4->y - u3->y)));
HXDLIN(5063)																						Float cf4 = ((w4->y * v5->x) - (w4->x * v5->y));
HXDLIN(5063)																						 ::zpp_nape::shape::ZPP_Polygon _this35 = _this28;
HXDLIN(5063)																						_this35->localCOMx = (_this35->localCOMx + ((v5->x + w4->x) * cf4));
HXDLIN(5063)																						 ::zpp_nape::shape::ZPP_Polygon _this36 = _this28;
HXDLIN(5063)																						_this36->localCOMy = (_this36->localCOMy + ((v5->y + w4->y) * cf4));
            																					}
HXDLIN(5063)																					u3 = v5;
HXDLIN(5063)																					v5 = w4;
HXDLIN(5063)																					cx_ite15 = cx_ite15->next;
HXDLIN(5063)																					 ::zpp_nape::geom::ZPP_Vec2 w5 = cx_ite15;
HXDLIN(5063)																					{
HXLINE(5063)																						area1 = (area1 + (v5->x * (w5->y - u3->y)));
HXDLIN(5063)																						Float cf5 = ((w5->y * v5->x) - (w5->x * v5->y));
HXDLIN(5063)																						 ::zpp_nape::shape::ZPP_Polygon _this37 = _this28;
HXDLIN(5063)																						_this37->localCOMx = (_this37->localCOMx + ((v5->x + w5->x) * cf5));
HXDLIN(5063)																						 ::zpp_nape::shape::ZPP_Polygon _this38 = _this28;
HXDLIN(5063)																						_this38->localCOMy = (_this38->localCOMy + ((v5->y + w5->y) * cf5));
            																					}
            																				}
HXDLIN(5063)																				area1 = (( (Float)(1) ) / (( (Float)(3) ) * area1));
HXDLIN(5063)																				{
HXLINE(5063)																					Float t5 = area1;
HXDLIN(5063)																					 ::zpp_nape::shape::ZPP_Polygon _this39 = _this28;
HXDLIN(5063)																					_this39->localCOMx = (_this39->localCOMx * t5);
HXDLIN(5063)																					 ::zpp_nape::shape::ZPP_Polygon _this40 = _this28;
HXDLIN(5063)																					_this40->localCOMy = (_this40->localCOMy * t5);
            																				}
            																			}
            																		}
            																	}
HXDLIN(5063)																	if (hx::IsNotNull( _this27->wrap_localCOM )) {
HXLINE(5063)																		_this27->wrap_localCOM->zpp_inner->x = _this27->localCOMx;
HXDLIN(5063)																		_this27->wrap_localCOM->zpp_inner->y = _this27->localCOMy;
            																	}
            																}
HXDLIN(5063)																{
HXLINE(5063)																	 ::zpp_nape::phys::ZPP_Body _this41 = _this27->body;
HXDLIN(5063)																	if (_this41->zip_axis) {
HXLINE(5063)																		_this41->zip_axis = false;
HXDLIN(5063)																		{
HXLINE(5063)																			_this41->axisx = ::Math_obj::sin(_this41->rot);
HXDLIN(5063)																			_this41->axisy = ::Math_obj::cos(_this41->rot);
            																		}
            																	}
            																}
HXDLIN(5063)																{
HXLINE(5063)																	_this27->worldCOMx = (_this27->body->posx + ((_this27->body->axisy * _this27->localCOMx) - (_this27->body->axisx * _this27->localCOMy)));
HXDLIN(5063)																	_this27->worldCOMy = (_this27->body->posy + ((_this27->localCOMx * _this27->body->axisx) + (_this27->localCOMy * _this27->body->axisy)));
            																}
            															}
            														}
HXDLIN(5063)														Float rx1 = _this27->radius;
HXDLIN(5063)														Float ry1 = _this27->radius;
HXDLIN(5063)														{
HXLINE(5063)															_this27->aabb->minx = (_this27->worldCOMx - rx1);
HXDLIN(5063)															_this27->aabb->miny = (_this27->worldCOMy - ry1);
            														}
HXDLIN(5063)														{
HXLINE(5063)															_this27->aabb->maxx = (_this27->worldCOMx + rx1);
HXDLIN(5063)															_this27->aabb->maxy = (_this27->worldCOMy + ry1);
            														}
            													}
            													else {
HXLINE(5063)														 ::zpp_nape::shape::ZPP_Polygon _this42 = s3->polygon;
HXDLIN(5063)														if (_this42->zip_gverts) {
HXLINE(5063)															if (hx::IsNotNull( _this42->body )) {
HXLINE(5063)																_this42->zip_gverts = false;
HXDLIN(5063)																_this42->validate_lverts();
HXDLIN(5063)																{
HXLINE(5063)																	 ::zpp_nape::phys::ZPP_Body _this43 = _this42->body;
HXDLIN(5063)																	if (_this43->zip_axis) {
HXLINE(5063)																		_this43->zip_axis = false;
HXDLIN(5063)																		{
HXLINE(5063)																			_this43->axisx = ::Math_obj::sin(_this43->rot);
HXDLIN(5063)																			_this43->axisy = ::Math_obj::cos(_this43->rot);
            																		}
            																	}
            																}
HXDLIN(5063)																 ::zpp_nape::geom::ZPP_Vec2 li3 = _this42->lverts->next;
HXDLIN(5063)																{
HXLINE(5063)																	 ::zpp_nape::geom::ZPP_Vec2 cx_ite16 = _this42->gverts->next;
HXDLIN(5063)																	while(hx::IsNotNull( cx_ite16 )){
HXLINE(5063)																		 ::zpp_nape::geom::ZPP_Vec2 g3 = cx_ite16;
HXDLIN(5063)																		{
HXLINE(5063)																			 ::zpp_nape::geom::ZPP_Vec2 l3 = li3;
HXDLIN(5063)																			li3 = li3->next;
HXDLIN(5063)																			{
HXLINE(5063)																				g3->x = (_this42->body->posx + ((_this42->body->axisy * l3->x) - (_this42->body->axisx * l3->y)));
HXDLIN(5063)																				g3->y = (_this42->body->posy + ((l3->x * _this42->body->axisx) + (l3->y * _this42->body->axisy)));
            																			}
            																		}
HXDLIN(5063)																		cx_ite16 = cx_ite16->next;
            																	}
            																}
            															}
            														}
HXDLIN(5063)														if (hx::IsNull( _this42->lverts->next )) {
HXLINE(5063)															HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            														}
HXDLIN(5063)														 ::zpp_nape::geom::ZPP_Vec2 p01 = _this42->gverts->next;
HXDLIN(5063)														{
HXLINE(5063)															_this42->aabb->minx = p01->x;
HXDLIN(5063)															_this42->aabb->miny = p01->y;
            														}
HXDLIN(5063)														{
HXLINE(5063)															_this42->aabb->maxx = p01->x;
HXDLIN(5063)															_this42->aabb->maxy = p01->y;
            														}
HXDLIN(5063)														{
HXLINE(5063)															 ::zpp_nape::geom::ZPP_Vec2 cx_ite17 = _this42->gverts->next->next;
HXDLIN(5063)															while(hx::IsNotNull( cx_ite17 )){
HXLINE(5063)																 ::zpp_nape::geom::ZPP_Vec2 p1 = cx_ite17;
HXDLIN(5063)																{
HXLINE(5063)																	if ((p1->x < _this42->aabb->minx)) {
HXLINE(5063)																		_this42->aabb->minx = p1->x;
            																	}
HXDLIN(5063)																	if ((p1->x > _this42->aabb->maxx)) {
HXLINE(5063)																		_this42->aabb->maxx = p1->x;
            																	}
HXDLIN(5063)																	if ((p1->y < _this42->aabb->miny)) {
HXLINE(5063)																		_this42->aabb->miny = p1->y;
            																	}
HXDLIN(5063)																	if ((p1->y > _this42->aabb->maxy)) {
HXLINE(5063)																		_this42->aabb->maxy = p1->y;
            																	}
            																}
HXDLIN(5063)																cx_ite17 = cx_ite17->next;
            															}
            														}
            													}
            												}
            											}
HXDLIN(5063)											{
HXLINE(5063)												 ::zpp_nape::geom::ZPP_AABB _this44 = cur1->aabb;
HXDLIN(5063)												 ::zpp_nape::geom::ZPP_AABB x1 = s3->aabb;
HXDLIN(5063)												if ((x1->minx < _this44->minx)) {
HXLINE(5063)													_this44->minx = x1->minx;
            												}
HXDLIN(5063)												if ((x1->maxx > _this44->maxx)) {
HXLINE(5063)													_this44->maxx = x1->maxx;
            												}
HXDLIN(5063)												if ((x1->miny < _this44->miny)) {
HXLINE(5063)													_this44->miny = x1->miny;
            												}
HXDLIN(5063)												if ((x1->maxy > _this44->maxy)) {
HXLINE(5063)													_this44->maxy = x1->maxy;
            												}
            											}
            										}
HXDLIN(5063)										cx_ite14 = cx_ite14->next;
            									}
            								}
            							}
            						}
HXLINE(5064)						cur1->validate_worldCOM();
            					}
HXLINE(5066)					cur1->validate_gravMass();
HXLINE(5067)					if (cur1->zip_axis) {
HXLINE(5067)						cur1->zip_axis = false;
HXDLIN(5067)						{
HXLINE(5067)							cur1->axisx = ::Math_obj::sin(cur1->rot);
HXDLIN(5067)							cur1->axisy = ::Math_obj::cos(cur1->rot);
            						}
            					}
HXLINE(5069)					bool _hx_tmp8;
HXDLIN(5069)					bool _hx_tmp9;
HXDLIN(5069)					if (!(cur1->nomove)) {
HXLINE(5069)						_hx_tmp9 = (cur1->type == 2);
            					}
            					else {
HXLINE(5069)						_hx_tmp9 = false;
            					}
HXDLIN(5069)					if (_hx_tmp9) {
HXLINE(5069)						_hx_tmp8 = (cur1->mass == 0);
            					}
            					else {
HXLINE(5069)						_hx_tmp8 = false;
            					}
HXDLIN(5069)					if (_hx_tmp8) {
HXLINE(5070)						HX_STACK_DO_THROW(HX_("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false",52,b2,78,1f));
            					}
HXLINE(5072)					bool _hx_tmp10;
HXDLIN(5072)					bool _hx_tmp11;
HXDLIN(5072)					if (!(cur1->norotate)) {
HXLINE(5072)						_hx_tmp11 = (cur1->type == 2);
            					}
            					else {
HXLINE(5072)						_hx_tmp11 = false;
            					}
HXDLIN(5072)					if (_hx_tmp11) {
HXLINE(5072)						_hx_tmp10 = (cur1->inertia == 0);
            					}
            					else {
HXLINE(5072)						_hx_tmp10 = false;
            					}
HXDLIN(5072)					if (_hx_tmp10) {
HXLINE(5073)						HX_STACK_DO_THROW(HX_("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false",93,3f,65,99));
            					}
HXLINE(5097)					{
HXLINE(5098)						 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite18 = cur1->shapes->head;
HXLINE(5099)						while(hx::IsNotNull( cx_ite18 )){
HXLINE(5100)							 ::zpp_nape::shape::ZPP_Shape shape1 = cx_ite18->elt;
HXLINE(5101)							this->bphase->sync(shape1);
HXLINE(5102)							cx_ite18 = cx_ite18->next;
            						}
            					}
            				}
HXLINE(5106)				cx_ite10 = cx_ite10->next;
            			}
            		}
HXLINE(5110)		{
HXLINE(5111)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite19 = this->live_constraints->head;
HXLINE(5112)			while(hx::IsNotNull( cx_ite19 )){
HXLINE(5113)				 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite19->elt;
HXLINE(5115)				if (con->active) {
HXLINE(5117)					con->validate();
HXLINE(5119)					bool _hx_tmp12;
HXDLIN(5119)					if (con->component->woken) {
HXLINE(5119)						_hx_tmp12 = hx::IsNotNull( con->cbSet );
            					}
            					else {
HXLINE(5119)						_hx_tmp12 = false;
            					}
HXDLIN(5119)					if (_hx_tmp12) {
HXLINE(5121)						 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite20 = con->cbSet->conlisteners->head;
HXLINE(5122)						while(hx::IsNotNull( cx_ite20 )){
HXLINE(5123)							 ::zpp_nape::callbacks::ZPP_ConstraintListener i1 = cx_ite20->elt;
HXLINE(5124)							{
HXLINE(5125)								if ((i1->event != 2)) {
HXLINE(5126)									cx_ite20 = cx_ite20->next;
HXLINE(5127)									continue;
            								}
HXLINE(5129)								 ::zpp_nape::callbacks::ZPP_Callback cb2 = this->push_callback(i1);
HXLINE(5130)								cb2->event = 2;
HXLINE(5131)								cb2->constraint = con;
            							}
HXLINE(5133)							cx_ite20 = cx_ite20->next;
            						}
            					}
HXLINE(5137)					con->component->woken = false;
            				}
HXLINE(5140)				cx_ite19 = cx_ite19->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,validation,(void))

void ZPP_Space_obj::updateVel(Float dt){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5144_updateVel)
HXLINE(5145)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXLINE(5146)		Float linDrag = (( (Float)(1) ) - (dt * this->global_lin_drag));
HXLINE(5147)		Float angDrag = (( (Float)(1) ) - (dt * this->global_ang_drag));
HXLINE(5148)		{
HXLINE(5149)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;
HXLINE(5150)			while(hx::IsNotNull( cx_ite )){
HXLINE(5151)				 ::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;
HXLINE(5152)				{
HXLINE(5153)					if ((cur->smass != ((Float)0.0))) {
HXLINE(5154)						Float time = (dt * cur->imass);
HXLINE(5155)						cur->velx = ((linDrag * cur->velx) + ((cur->forcex + (this->gravityx * cur->gravMass)) * time));
HXLINE(5156)						cur->vely = ((linDrag * cur->vely) + ((cur->forcey + (this->gravityy * cur->gravMass)) * time));
            					}
HXLINE(5158)					if ((cur->sinertia != ((Float)0.0))) {
HXLINE(5159)						Float dpx = ((Float)0.0);
HXLINE(5160)						Float dpy = ((Float)0.0);
HXLINE(5161)						{
HXLINE(5162)							dpx = (cur->worldCOMx - cur->posx);
HXLINE(5163)							dpy = (cur->worldCOMy - cur->posy);
            						}
HXLINE(5165)						Float torque = (cur->torque + (((this->gravityy * dpx) - (this->gravityx * dpy)) * cur->gravMass));
HXLINE(5166)						cur->angvel = ((angDrag * cur->angvel) + ((torque * dt) * cur->iinertia));
            					}
HXLINE(5168)					pre = cx_ite;
            				}
HXLINE(5170)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updateVel,(void))

void ZPP_Space_obj::updatePos(Float dt){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5174_updatePos)
HXLINE(5175)		Float MAX_VEL = ((( (Float)(2) ) * ::Math_obj::PI) / dt);
HXLINE(5177)		{
HXLINE(5178)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;
HXLINE(5179)			while(hx::IsNotNull( cx_ite )){
HXLINE(5180)				 ::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;
HXLINE(5181)				{
HXLINE(5182)					{
HXLINE(5183)						cur->pre_posx = cur->posx;
HXLINE(5184)						cur->pre_posy = cur->posy;
            					}
HXLINE(5202)					cur->pre_rot = cur->rot;
HXLINE(5203)					cur->sweepTime = ( (Float)(0) );
HXLINE(5204)					cur->sweep_angvel = hx::Mod(cur->angvel,MAX_VEL);
HXLINE(5205)					{
HXLINE(5205)						Float delta = (dt - cur->sweepTime);
HXDLIN(5205)						if ((delta != 0)) {
HXLINE(5205)							cur->sweepTime = dt;
HXDLIN(5205)							{
HXLINE(5205)								Float t = delta;
HXDLIN(5205)								 ::zpp_nape::phys::ZPP_Body cur1 = cur;
HXDLIN(5205)								cur1->posx = (cur1->posx + (cur->velx * t));
HXDLIN(5205)								 ::zpp_nape::phys::ZPP_Body cur2 = cur;
HXDLIN(5205)								cur2->posy = (cur2->posy + (cur->vely * t));
            							}
HXDLIN(5205)							if ((cur->angvel != 0)) {
HXLINE(5205)								Float dr = (cur->sweep_angvel * delta);
HXDLIN(5205)								 ::zpp_nape::phys::ZPP_Body cur3 = cur;
HXDLIN(5205)								cur3->rot = (cur3->rot + dr);
HXDLIN(5205)								if (((dr * dr) > ((Float)0.0001))) {
HXLINE(5205)									cur->axisx = ::Math_obj::sin(cur->rot);
HXDLIN(5205)									cur->axisy = ::Math_obj::cos(cur->rot);
            								}
            								else {
HXLINE(5205)									Float d2 = (dr * dr);
HXDLIN(5205)									Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(5205)									Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(5205)									Float nx = (((p * cur->axisx) + (dr * cur->axisy)) * m);
HXDLIN(5205)									cur->axisy = (((p * cur->axisy) - (dr * cur->axisx)) * m);
HXDLIN(5205)									cur->axisx = nx;
            								}
            							}
            						}
            					}
HXLINE(5206)					if (!(cur->disableCCD)) {
HXLINE(5207)						Float linThreshold = (::nape::Config_obj::staticCCDLinearThreshold * cur->sweepRadius);
HXLINE(5208)						Float angThreshold = ::nape::Config_obj::staticCCDAngularThreshold;
HXLINE(5209)						bool _hx_tmp;
HXDLIN(5209)						bool _hx_tmp1;
HXDLIN(5209)						if (!((((((cur->velx * cur->velx) + (cur->vely * cur->vely)) * dt) * dt) > (linThreshold * linThreshold)))) {
HXLINE(5209)							_hx_tmp1 = ((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold * angThreshold));
            						}
            						else {
HXLINE(5209)							_hx_tmp1 = true;
            						}
HXDLIN(5209)						if (!(_hx_tmp1)) {
HXLINE(5209)							_hx_tmp = (cur->type == 3);
            						}
            						else {
HXLINE(5209)							_hx_tmp = true;
            						}
HXDLIN(5209)						if (_hx_tmp) {
HXLINE(5210)							Float angvel = cur->sweep_angvel;
HXLINE(5211)							if ((angvel < 0)) {
HXLINE(5211)								angvel = -(angvel);
            							}
HXLINE(5212)							Float iangvel = (( (Float)(1) ) / angvel);
HXLINE(5213)							{
HXLINE(5214)								 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;
HXLINE(5215)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(5216)									 ::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;
HXLINE(5217)									{
HXLINE(5218)										 ::zpp_nape::geom::ZPP_AABB aabb = s->aabb;
HXLINE(5219)										Float minx = aabb->minx;
HXLINE(5220)										Float miny = aabb->miny;
HXLINE(5221)										Float maxx = aabb->maxx;
HXLINE(5222)										Float maxy = aabb->maxy;
HXLINE(5223)										int count = ::Std_obj::_hx_int((((angvel * dt) * s->sweepCoef) * ((Float)0.00833333333333333322)));
HXLINE(5224)										if ((count > 8)) {
HXLINE(5224)											count = 8;
            										}
HXLINE(5225)										Float anginc = ((angvel * dt) / ( (Float)(count) ));
HXLINE(5226)										{
HXLINE(5226)											Float delta1 = (dt - cur->sweepTime);
HXDLIN(5226)											if ((delta1 != 0)) {
HXLINE(5226)												cur->sweepTime = dt;
HXDLIN(5226)												{
HXLINE(5226)													Float t1 = delta1;
HXDLIN(5226)													 ::zpp_nape::phys::ZPP_Body cur4 = cur;
HXDLIN(5226)													cur4->posx = (cur4->posx + (cur->velx * t1));
HXDLIN(5226)													 ::zpp_nape::phys::ZPP_Body cur5 = cur;
HXDLIN(5226)													cur5->posy = (cur5->posy + (cur->vely * t1));
            												}
HXDLIN(5226)												if ((cur->angvel != 0)) {
HXLINE(5226)													Float dr1 = (cur->sweep_angvel * delta1);
HXDLIN(5226)													 ::zpp_nape::phys::ZPP_Body cur6 = cur;
HXDLIN(5226)													cur6->rot = (cur6->rot + dr1);
HXDLIN(5226)													if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(5226)														cur->axisx = ::Math_obj::sin(cur->rot);
HXDLIN(5226)														cur->axisy = ::Math_obj::cos(cur->rot);
            													}
            													else {
HXLINE(5226)														Float d21 = (dr1 * dr1);
HXDLIN(5226)														Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(5226)														Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(5226)														Float nx1 = (((p1 * cur->axisx) + (dr1 * cur->axisy)) * m1);
HXDLIN(5226)														cur->axisy = (((p1 * cur->axisy) - (dr1 * cur->axisx)) * m1);
HXDLIN(5226)														cur->axisx = nx1;
            													}
            												}
            											}
            										}
HXLINE(5227)										if ((s->type == 0)) {
HXLINE(5227)											 ::zpp_nape::shape::ZPP_Circle _this = s->circle;
HXDLIN(5227)											{
HXLINE(5227)												_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(5227)												_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            											}
HXDLIN(5227)											_this->aabb->minx = (_this->worldCOMx - _this->radius);
HXDLIN(5227)											_this->aabb->miny = (_this->worldCOMy - _this->radius);
HXDLIN(5227)											_this->aabb->maxx = (_this->worldCOMx + _this->radius);
HXDLIN(5227)											_this->aabb->maxy = (_this->worldCOMy + _this->radius);
            										}
            										else {
HXLINE(5227)											 ::zpp_nape::shape::ZPP_Polygon _this1 = s->polygon;
HXDLIN(5227)											 ::zpp_nape::geom::ZPP_Vec2 li = _this1->lverts->next;
HXDLIN(5227)											 ::zpp_nape::geom::ZPP_Vec2 p0 = _this1->gverts->next;
HXDLIN(5227)											 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(5227)											li = li->next;
HXDLIN(5227)											{
HXLINE(5227)												p0->x = (_this1->body->posx + ((_this1->body->axisy * l->x) - (_this1->body->axisx * l->y)));
HXDLIN(5227)												p0->y = (_this1->body->posy + ((l->x * _this1->body->axisx) + (l->y * _this1->body->axisy)));
            											}
HXDLIN(5227)											{
HXLINE(5227)												_this1->aabb->minx = p0->x;
HXDLIN(5227)												_this1->aabb->miny = p0->y;
            											}
HXDLIN(5227)											{
HXLINE(5227)												_this1->aabb->maxx = p0->x;
HXDLIN(5227)												_this1->aabb->maxy = p0->y;
            											}
HXDLIN(5227)											{
HXLINE(5227)												 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this1->gverts->next->next;
HXDLIN(5227)												while(hx::IsNotNull( cx_ite2 )){
HXLINE(5227)													 ::zpp_nape::geom::ZPP_Vec2 p2 = cx_ite2;
HXDLIN(5227)													{
HXLINE(5227)														 ::zpp_nape::geom::ZPP_Vec2 l1 = li;
HXDLIN(5227)														li = li->next;
HXDLIN(5227)														{
HXLINE(5227)															p2->x = (_this1->body->posx + ((_this1->body->axisy * l1->x) - (_this1->body->axisx * l1->y)));
HXDLIN(5227)															p2->y = (_this1->body->posy + ((l1->x * _this1->body->axisx) + (l1->y * _this1->body->axisy)));
            														}
HXDLIN(5227)														if ((p2->x < _this1->aabb->minx)) {
HXLINE(5227)															_this1->aabb->minx = p2->x;
            														}
HXDLIN(5227)														if ((p2->x > _this1->aabb->maxx)) {
HXLINE(5227)															_this1->aabb->maxx = p2->x;
            														}
HXDLIN(5227)														if ((p2->y < _this1->aabb->miny)) {
HXLINE(5227)															_this1->aabb->miny = p2->y;
            														}
HXDLIN(5227)														if ((p2->y > _this1->aabb->maxy)) {
HXLINE(5227)															_this1->aabb->maxy = p2->y;
            														}
            													}
HXDLIN(5227)													cx_ite2 = cx_ite2->next;
            												}
            											}
            										}
HXLINE(5228)										if ((minx < aabb->minx)) {
HXLINE(5228)											aabb->minx = minx;
            										}
            										else {
HXLINE(5228)											minx = aabb->minx;
            										}
HXLINE(5229)										if ((miny < aabb->miny)) {
HXLINE(5229)											aabb->miny = miny;
            										}
            										else {
HXLINE(5229)											miny = aabb->miny;
            										}
HXLINE(5230)										if ((maxx > aabb->maxx)) {
HXLINE(5230)											aabb->maxx = maxx;
            										}
            										else {
HXLINE(5230)											maxx = aabb->maxx;
            										}
HXLINE(5231)										if ((maxy > aabb->maxy)) {
HXLINE(5231)											aabb->maxy = maxy;
            										}
            										else {
HXLINE(5231)											maxy = aabb->maxy;
            										}
HXLINE(5232)										{
HXLINE(5232)											int _g = 1;
HXDLIN(5232)											int _g1 = count;
HXDLIN(5232)											while((_g < _g1)){
HXLINE(5232)												_g = (_g + 1);
HXDLIN(5232)												int i = (_g - 1);
HXLINE(5233)												{
HXLINE(5233)													Float dt1 = ((anginc * ( (Float)(i) )) * iangvel);
HXDLIN(5233)													Float delta2 = (dt1 - cur->sweepTime);
HXDLIN(5233)													if ((delta2 != 0)) {
HXLINE(5233)														cur->sweepTime = dt1;
HXDLIN(5233)														{
HXLINE(5233)															Float t2 = delta2;
HXDLIN(5233)															 ::zpp_nape::phys::ZPP_Body cur7 = cur;
HXDLIN(5233)															cur7->posx = (cur7->posx + (cur->velx * t2));
HXDLIN(5233)															 ::zpp_nape::phys::ZPP_Body cur8 = cur;
HXDLIN(5233)															cur8->posy = (cur8->posy + (cur->vely * t2));
            														}
HXDLIN(5233)														if ((cur->angvel != 0)) {
HXLINE(5233)															Float dr2 = (cur->sweep_angvel * delta2);
HXDLIN(5233)															 ::zpp_nape::phys::ZPP_Body cur9 = cur;
HXDLIN(5233)															cur9->rot = (cur9->rot + dr2);
HXDLIN(5233)															if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(5233)																cur->axisx = ::Math_obj::sin(cur->rot);
HXDLIN(5233)																cur->axisy = ::Math_obj::cos(cur->rot);
            															}
            															else {
HXLINE(5233)																Float d22 = (dr2 * dr2);
HXDLIN(5233)																Float p3 = (( (Float)(1) ) - (((Float)0.5) * d22));
HXDLIN(5233)																Float m2 = (( (Float)(1) ) - ((d22 * d22) / ( (Float)(8) )));
HXDLIN(5233)																Float nx2 = (((p3 * cur->axisx) + (dr2 * cur->axisy)) * m2);
HXDLIN(5233)																cur->axisy = (((p3 * cur->axisy) - (dr2 * cur->axisx)) * m2);
HXDLIN(5233)																cur->axisx = nx2;
            															}
            														}
            													}
            												}
HXLINE(5234)												if ((s->type == 0)) {
HXLINE(5234)													 ::zpp_nape::shape::ZPP_Circle _this2 = s->circle;
HXDLIN(5234)													{
HXLINE(5234)														_this2->worldCOMx = (_this2->body->posx + ((_this2->body->axisy * _this2->localCOMx) - (_this2->body->axisx * _this2->localCOMy)));
HXDLIN(5234)														_this2->worldCOMy = (_this2->body->posy + ((_this2->localCOMx * _this2->body->axisx) + (_this2->localCOMy * _this2->body->axisy)));
            													}
HXDLIN(5234)													_this2->aabb->minx = (_this2->worldCOMx - _this2->radius);
HXDLIN(5234)													_this2->aabb->miny = (_this2->worldCOMy - _this2->radius);
HXDLIN(5234)													_this2->aabb->maxx = (_this2->worldCOMx + _this2->radius);
HXDLIN(5234)													_this2->aabb->maxy = (_this2->worldCOMy + _this2->radius);
            												}
            												else {
HXLINE(5234)													 ::zpp_nape::shape::ZPP_Polygon _this3 = s->polygon;
HXDLIN(5234)													 ::zpp_nape::geom::ZPP_Vec2 li1 = _this3->lverts->next;
HXDLIN(5234)													 ::zpp_nape::geom::ZPP_Vec2 p01 = _this3->gverts->next;
HXDLIN(5234)													 ::zpp_nape::geom::ZPP_Vec2 l2 = li1;
HXDLIN(5234)													li1 = li1->next;
HXDLIN(5234)													{
HXLINE(5234)														p01->x = (_this3->body->posx + ((_this3->body->axisy * l2->x) - (_this3->body->axisx * l2->y)));
HXDLIN(5234)														p01->y = (_this3->body->posy + ((l2->x * _this3->body->axisx) + (l2->y * _this3->body->axisy)));
            													}
HXDLIN(5234)													{
HXLINE(5234)														_this3->aabb->minx = p01->x;
HXDLIN(5234)														_this3->aabb->miny = p01->y;
            													}
HXDLIN(5234)													{
HXLINE(5234)														_this3->aabb->maxx = p01->x;
HXDLIN(5234)														_this3->aabb->maxy = p01->y;
            													}
HXDLIN(5234)													{
HXLINE(5234)														 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this3->gverts->next->next;
HXDLIN(5234)														while(hx::IsNotNull( cx_ite3 )){
HXLINE(5234)															 ::zpp_nape::geom::ZPP_Vec2 p4 = cx_ite3;
HXDLIN(5234)															{
HXLINE(5234)																 ::zpp_nape::geom::ZPP_Vec2 l3 = li1;
HXDLIN(5234)																li1 = li1->next;
HXDLIN(5234)																{
HXLINE(5234)																	p4->x = (_this3->body->posx + ((_this3->body->axisy * l3->x) - (_this3->body->axisx * l3->y)));
HXDLIN(5234)																	p4->y = (_this3->body->posy + ((l3->x * _this3->body->axisx) + (l3->y * _this3->body->axisy)));
            																}
HXDLIN(5234)																if ((p4->x < _this3->aabb->minx)) {
HXLINE(5234)																	_this3->aabb->minx = p4->x;
            																}
HXDLIN(5234)																if ((p4->x > _this3->aabb->maxx)) {
HXLINE(5234)																	_this3->aabb->maxx = p4->x;
            																}
HXDLIN(5234)																if ((p4->y < _this3->aabb->miny)) {
HXLINE(5234)																	_this3->aabb->miny = p4->y;
            																}
HXDLIN(5234)																if ((p4->y > _this3->aabb->maxy)) {
HXLINE(5234)																	_this3->aabb->maxy = p4->y;
            																}
            															}
HXDLIN(5234)															cx_ite3 = cx_ite3->next;
            														}
            													}
            												}
HXLINE(5235)												if ((minx < aabb->minx)) {
HXLINE(5235)													aabb->minx = minx;
            												}
            												else {
HXLINE(5235)													minx = aabb->minx;
            												}
HXLINE(5236)												if ((miny < aabb->miny)) {
HXLINE(5236)													aabb->miny = miny;
            												}
            												else {
HXLINE(5236)													miny = aabb->miny;
            												}
HXLINE(5237)												if ((maxx > aabb->maxx)) {
HXLINE(5237)													aabb->maxx = maxx;
            												}
            												else {
HXLINE(5237)													maxx = aabb->maxx;
            												}
HXLINE(5238)												if ((maxy > aabb->maxy)) {
HXLINE(5238)													aabb->maxy = maxy;
            												}
            												else {
HXLINE(5238)													maxy = aabb->maxy;
            												}
            											}
            										}
HXLINE(5240)										this->bphase->sync(s);
            									}
HXLINE(5242)									cx_ite1 = cx_ite1->next;
            								}
            							}
HXLINE(5245)							cur->sweepFrozen = false;
HXLINE(5246)							bool _hx_tmp2;
HXDLIN(5246)							if ((cur->type == 2)) {
HXLINE(5246)								_hx_tmp2 = cur->bulletEnabled;
            							}
            							else {
HXLINE(5246)								_hx_tmp2 = false;
            							}
HXDLIN(5246)							if (_hx_tmp2) {
HXLINE(5247)								Float linThreshold2 = (::nape::Config_obj::bulletCCDLinearThreshold * cur->sweepRadius);
HXLINE(5248)								Float angThreshold2 = ::nape::Config_obj::bulletCCDAngularThreshold;
HXLINE(5249)								bool _hx_tmp3;
HXDLIN(5249)								if (!((((((cur->velx * cur->velx) + (cur->vely * cur->vely)) * dt) * dt) > (linThreshold2 * linThreshold2)))) {
HXLINE(5249)									_hx_tmp3 = ((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold2 * angThreshold2));
            								}
            								else {
HXLINE(5249)									_hx_tmp3 = true;
            								}
HXDLIN(5249)								if (_hx_tmp3) {
HXLINE(5250)									cur->bullet = true;
            								}
            							}
            						}
            						else {
HXLINE(5255)							cur->sweepFrozen = true;
HXLINE(5256)							cur->bullet = false;
            						}
            					}
            					else {
HXLINE(5260)						cur->sweepFrozen = true;
HXLINE(5261)						cur->bullet = false;
            					}
            				}
HXLINE(5264)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(5269)		{
HXLINE(5270)			 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite4 = this->kinematics->head;
HXLINE(5271)			while(hx::IsNotNull( cx_ite4 )){
HXLINE(5272)				 ::zpp_nape::phys::ZPP_Body cur10 = cx_ite4->elt;
HXLINE(5273)				{
HXLINE(5274)					{
HXLINE(5275)						cur10->pre_posx = cur10->posx;
HXLINE(5276)						cur10->pre_posy = cur10->posy;
            					}
HXLINE(5294)					cur10->pre_rot = cur10->rot;
HXLINE(5295)					cur10->sweepTime = ( (Float)(0) );
HXLINE(5296)					cur10->sweep_angvel = hx::Mod(cur10->angvel,MAX_VEL);
HXLINE(5297)					{
HXLINE(5297)						Float delta3 = (dt - cur10->sweepTime);
HXDLIN(5297)						if ((delta3 != 0)) {
HXLINE(5297)							cur10->sweepTime = dt;
HXDLIN(5297)							{
HXLINE(5297)								Float t3 = delta3;
HXDLIN(5297)								 ::zpp_nape::phys::ZPP_Body cur11 = cur10;
HXDLIN(5297)								cur11->posx = (cur11->posx + (cur10->velx * t3));
HXDLIN(5297)								 ::zpp_nape::phys::ZPP_Body cur12 = cur10;
HXDLIN(5297)								cur12->posy = (cur12->posy + (cur10->vely * t3));
            							}
HXDLIN(5297)							if ((cur10->angvel != 0)) {
HXLINE(5297)								Float dr3 = (cur10->sweep_angvel * delta3);
HXDLIN(5297)								 ::zpp_nape::phys::ZPP_Body cur13 = cur10;
HXDLIN(5297)								cur13->rot = (cur13->rot + dr3);
HXDLIN(5297)								if (((dr3 * dr3) > ((Float)0.0001))) {
HXLINE(5297)									cur10->axisx = ::Math_obj::sin(cur10->rot);
HXDLIN(5297)									cur10->axisy = ::Math_obj::cos(cur10->rot);
            								}
            								else {
HXLINE(5297)									Float d23 = (dr3 * dr3);
HXDLIN(5297)									Float p5 = (( (Float)(1) ) - (((Float)0.5) * d23));
HXDLIN(5297)									Float m3 = (( (Float)(1) ) - ((d23 * d23) / ( (Float)(8) )));
HXDLIN(5297)									Float nx3 = (((p5 * cur10->axisx) + (dr3 * cur10->axisy)) * m3);
HXDLIN(5297)									cur10->axisy = (((p5 * cur10->axisy) - (dr3 * cur10->axisx)) * m3);
HXDLIN(5297)									cur10->axisx = nx3;
            								}
            							}
            						}
            					}
HXLINE(5298)					if (!(cur10->disableCCD)) {
HXLINE(5299)						Float linThreshold1 = (::nape::Config_obj::staticCCDLinearThreshold * cur10->sweepRadius);
HXLINE(5300)						Float angThreshold1 = ::nape::Config_obj::staticCCDAngularThreshold;
HXLINE(5301)						bool _hx_tmp4;
HXDLIN(5301)						bool _hx_tmp5;
HXDLIN(5301)						if (!((((((cur10->velx * cur10->velx) + (cur10->vely * cur10->vely)) * dt) * dt) > (linThreshold1 * linThreshold1)))) {
HXLINE(5301)							_hx_tmp5 = ((((cur10->angvel * cur10->angvel) * dt) * dt) > (angThreshold1 * angThreshold1));
            						}
            						else {
HXLINE(5301)							_hx_tmp5 = true;
            						}
HXDLIN(5301)						if (!(_hx_tmp5)) {
HXLINE(5301)							_hx_tmp4 = (cur10->type == 3);
            						}
            						else {
HXLINE(5301)							_hx_tmp4 = true;
            						}
HXDLIN(5301)						if (_hx_tmp4) {
HXLINE(5302)							Float angvel1 = cur10->sweep_angvel;
HXLINE(5303)							if ((angvel1 < 0)) {
HXLINE(5303)								angvel1 = -(angvel1);
            							}
HXLINE(5304)							Float iangvel1 = (( (Float)(1) ) / angvel1);
HXLINE(5305)							{
HXLINE(5306)								 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite5 = cur10->shapes->head;
HXLINE(5307)								while(hx::IsNotNull( cx_ite5 )){
HXLINE(5308)									 ::zpp_nape::shape::ZPP_Shape s1 = cx_ite5->elt;
HXLINE(5309)									{
HXLINE(5310)										 ::zpp_nape::geom::ZPP_AABB aabb1 = s1->aabb;
HXLINE(5311)										Float minx1 = aabb1->minx;
HXLINE(5312)										Float miny1 = aabb1->miny;
HXLINE(5313)										Float maxx1 = aabb1->maxx;
HXLINE(5314)										Float maxy1 = aabb1->maxy;
HXLINE(5315)										int count1 = ::Std_obj::_hx_int((((angvel1 * dt) * s1->sweepCoef) * ((Float)0.00833333333333333322)));
HXLINE(5316)										if ((count1 > 8)) {
HXLINE(5316)											count1 = 8;
            										}
HXLINE(5317)										Float anginc1 = ((angvel1 * dt) / ( (Float)(count1) ));
HXLINE(5318)										{
HXLINE(5318)											Float delta4 = (dt - cur10->sweepTime);
HXDLIN(5318)											if ((delta4 != 0)) {
HXLINE(5318)												cur10->sweepTime = dt;
HXDLIN(5318)												{
HXLINE(5318)													Float t4 = delta4;
HXDLIN(5318)													 ::zpp_nape::phys::ZPP_Body cur14 = cur10;
HXDLIN(5318)													cur14->posx = (cur14->posx + (cur10->velx * t4));
HXDLIN(5318)													 ::zpp_nape::phys::ZPP_Body cur15 = cur10;
HXDLIN(5318)													cur15->posy = (cur15->posy + (cur10->vely * t4));
            												}
HXDLIN(5318)												if ((cur10->angvel != 0)) {
HXLINE(5318)													Float dr4 = (cur10->sweep_angvel * delta4);
HXDLIN(5318)													 ::zpp_nape::phys::ZPP_Body cur16 = cur10;
HXDLIN(5318)													cur16->rot = (cur16->rot + dr4);
HXDLIN(5318)													if (((dr4 * dr4) > ((Float)0.0001))) {
HXLINE(5318)														cur10->axisx = ::Math_obj::sin(cur10->rot);
HXDLIN(5318)														cur10->axisy = ::Math_obj::cos(cur10->rot);
            													}
            													else {
HXLINE(5318)														Float d24 = (dr4 * dr4);
HXDLIN(5318)														Float p6 = (( (Float)(1) ) - (((Float)0.5) * d24));
HXDLIN(5318)														Float m4 = (( (Float)(1) ) - ((d24 * d24) / ( (Float)(8) )));
HXDLIN(5318)														Float nx4 = (((p6 * cur10->axisx) + (dr4 * cur10->axisy)) * m4);
HXDLIN(5318)														cur10->axisy = (((p6 * cur10->axisy) - (dr4 * cur10->axisx)) * m4);
HXDLIN(5318)														cur10->axisx = nx4;
            													}
            												}
            											}
            										}
HXLINE(5319)										if ((s1->type == 0)) {
HXLINE(5319)											 ::zpp_nape::shape::ZPP_Circle _this4 = s1->circle;
HXDLIN(5319)											{
HXLINE(5319)												_this4->worldCOMx = (_this4->body->posx + ((_this4->body->axisy * _this4->localCOMx) - (_this4->body->axisx * _this4->localCOMy)));
HXDLIN(5319)												_this4->worldCOMy = (_this4->body->posy + ((_this4->localCOMx * _this4->body->axisx) + (_this4->localCOMy * _this4->body->axisy)));
            											}
HXDLIN(5319)											_this4->aabb->minx = (_this4->worldCOMx - _this4->radius);
HXDLIN(5319)											_this4->aabb->miny = (_this4->worldCOMy - _this4->radius);
HXDLIN(5319)											_this4->aabb->maxx = (_this4->worldCOMx + _this4->radius);
HXDLIN(5319)											_this4->aabb->maxy = (_this4->worldCOMy + _this4->radius);
            										}
            										else {
HXLINE(5319)											 ::zpp_nape::shape::ZPP_Polygon _this5 = s1->polygon;
HXDLIN(5319)											 ::zpp_nape::geom::ZPP_Vec2 li2 = _this5->lverts->next;
HXDLIN(5319)											 ::zpp_nape::geom::ZPP_Vec2 p02 = _this5->gverts->next;
HXDLIN(5319)											 ::zpp_nape::geom::ZPP_Vec2 l4 = li2;
HXDLIN(5319)											li2 = li2->next;
HXDLIN(5319)											{
HXLINE(5319)												p02->x = (_this5->body->posx + ((_this5->body->axisy * l4->x) - (_this5->body->axisx * l4->y)));
HXDLIN(5319)												p02->y = (_this5->body->posy + ((l4->x * _this5->body->axisx) + (l4->y * _this5->body->axisy)));
            											}
HXDLIN(5319)											{
HXLINE(5319)												_this5->aabb->minx = p02->x;
HXDLIN(5319)												_this5->aabb->miny = p02->y;
            											}
HXDLIN(5319)											{
HXLINE(5319)												_this5->aabb->maxx = p02->x;
HXDLIN(5319)												_this5->aabb->maxy = p02->y;
            											}
HXDLIN(5319)											{
HXLINE(5319)												 ::zpp_nape::geom::ZPP_Vec2 cx_ite6 = _this5->gverts->next->next;
HXDLIN(5319)												while(hx::IsNotNull( cx_ite6 )){
HXLINE(5319)													 ::zpp_nape::geom::ZPP_Vec2 p7 = cx_ite6;
HXDLIN(5319)													{
HXLINE(5319)														 ::zpp_nape::geom::ZPP_Vec2 l5 = li2;
HXDLIN(5319)														li2 = li2->next;
HXDLIN(5319)														{
HXLINE(5319)															p7->x = (_this5->body->posx + ((_this5->body->axisy * l5->x) - (_this5->body->axisx * l5->y)));
HXDLIN(5319)															p7->y = (_this5->body->posy + ((l5->x * _this5->body->axisx) + (l5->y * _this5->body->axisy)));
            														}
HXDLIN(5319)														if ((p7->x < _this5->aabb->minx)) {
HXLINE(5319)															_this5->aabb->minx = p7->x;
            														}
HXDLIN(5319)														if ((p7->x > _this5->aabb->maxx)) {
HXLINE(5319)															_this5->aabb->maxx = p7->x;
            														}
HXDLIN(5319)														if ((p7->y < _this5->aabb->miny)) {
HXLINE(5319)															_this5->aabb->miny = p7->y;
            														}
HXDLIN(5319)														if ((p7->y > _this5->aabb->maxy)) {
HXLINE(5319)															_this5->aabb->maxy = p7->y;
            														}
            													}
HXDLIN(5319)													cx_ite6 = cx_ite6->next;
            												}
            											}
            										}
HXLINE(5320)										if ((minx1 < aabb1->minx)) {
HXLINE(5320)											aabb1->minx = minx1;
            										}
            										else {
HXLINE(5320)											minx1 = aabb1->minx;
            										}
HXLINE(5321)										if ((miny1 < aabb1->miny)) {
HXLINE(5321)											aabb1->miny = miny1;
            										}
            										else {
HXLINE(5321)											miny1 = aabb1->miny;
            										}
HXLINE(5322)										if ((maxx1 > aabb1->maxx)) {
HXLINE(5322)											aabb1->maxx = maxx1;
            										}
            										else {
HXLINE(5322)											maxx1 = aabb1->maxx;
            										}
HXLINE(5323)										if ((maxy1 > aabb1->maxy)) {
HXLINE(5323)											aabb1->maxy = maxy1;
            										}
            										else {
HXLINE(5323)											maxy1 = aabb1->maxy;
            										}
HXLINE(5324)										{
HXLINE(5324)											int _g2 = 1;
HXDLIN(5324)											int _g11 = count1;
HXDLIN(5324)											while((_g2 < _g11)){
HXLINE(5324)												_g2 = (_g2 + 1);
HXDLIN(5324)												int i1 = (_g2 - 1);
HXLINE(5325)												{
HXLINE(5325)													Float dt2 = ((anginc1 * ( (Float)(i1) )) * iangvel1);
HXDLIN(5325)													Float delta5 = (dt2 - cur10->sweepTime);
HXDLIN(5325)													if ((delta5 != 0)) {
HXLINE(5325)														cur10->sweepTime = dt2;
HXDLIN(5325)														{
HXLINE(5325)															Float t5 = delta5;
HXDLIN(5325)															 ::zpp_nape::phys::ZPP_Body cur17 = cur10;
HXDLIN(5325)															cur17->posx = (cur17->posx + (cur10->velx * t5));
HXDLIN(5325)															 ::zpp_nape::phys::ZPP_Body cur18 = cur10;
HXDLIN(5325)															cur18->posy = (cur18->posy + (cur10->vely * t5));
            														}
HXDLIN(5325)														if ((cur10->angvel != 0)) {
HXLINE(5325)															Float dr5 = (cur10->sweep_angvel * delta5);
HXDLIN(5325)															 ::zpp_nape::phys::ZPP_Body cur19 = cur10;
HXDLIN(5325)															cur19->rot = (cur19->rot + dr5);
HXDLIN(5325)															if (((dr5 * dr5) > ((Float)0.0001))) {
HXLINE(5325)																cur10->axisx = ::Math_obj::sin(cur10->rot);
HXDLIN(5325)																cur10->axisy = ::Math_obj::cos(cur10->rot);
            															}
            															else {
HXLINE(5325)																Float d25 = (dr5 * dr5);
HXDLIN(5325)																Float p8 = (( (Float)(1) ) - (((Float)0.5) * d25));
HXDLIN(5325)																Float m5 = (( (Float)(1) ) - ((d25 * d25) / ( (Float)(8) )));
HXDLIN(5325)																Float nx5 = (((p8 * cur10->axisx) + (dr5 * cur10->axisy)) * m5);
HXDLIN(5325)																cur10->axisy = (((p8 * cur10->axisy) - (dr5 * cur10->axisx)) * m5);
HXDLIN(5325)																cur10->axisx = nx5;
            															}
            														}
            													}
            												}
HXLINE(5326)												if ((s1->type == 0)) {
HXLINE(5326)													 ::zpp_nape::shape::ZPP_Circle _this6 = s1->circle;
HXDLIN(5326)													{
HXLINE(5326)														_this6->worldCOMx = (_this6->body->posx + ((_this6->body->axisy * _this6->localCOMx) - (_this6->body->axisx * _this6->localCOMy)));
HXDLIN(5326)														_this6->worldCOMy = (_this6->body->posy + ((_this6->localCOMx * _this6->body->axisx) + (_this6->localCOMy * _this6->body->axisy)));
            													}
HXDLIN(5326)													_this6->aabb->minx = (_this6->worldCOMx - _this6->radius);
HXDLIN(5326)													_this6->aabb->miny = (_this6->worldCOMy - _this6->radius);
HXDLIN(5326)													_this6->aabb->maxx = (_this6->worldCOMx + _this6->radius);
HXDLIN(5326)													_this6->aabb->maxy = (_this6->worldCOMy + _this6->radius);
            												}
            												else {
HXLINE(5326)													 ::zpp_nape::shape::ZPP_Polygon _this7 = s1->polygon;
HXDLIN(5326)													 ::zpp_nape::geom::ZPP_Vec2 li3 = _this7->lverts->next;
HXDLIN(5326)													 ::zpp_nape::geom::ZPP_Vec2 p03 = _this7->gverts->next;
HXDLIN(5326)													 ::zpp_nape::geom::ZPP_Vec2 l6 = li3;
HXDLIN(5326)													li3 = li3->next;
HXDLIN(5326)													{
HXLINE(5326)														p03->x = (_this7->body->posx + ((_this7->body->axisy * l6->x) - (_this7->body->axisx * l6->y)));
HXDLIN(5326)														p03->y = (_this7->body->posy + ((l6->x * _this7->body->axisx) + (l6->y * _this7->body->axisy)));
            													}
HXDLIN(5326)													{
HXLINE(5326)														_this7->aabb->minx = p03->x;
HXDLIN(5326)														_this7->aabb->miny = p03->y;
            													}
HXDLIN(5326)													{
HXLINE(5326)														_this7->aabb->maxx = p03->x;
HXDLIN(5326)														_this7->aabb->maxy = p03->y;
            													}
HXDLIN(5326)													{
HXLINE(5326)														 ::zpp_nape::geom::ZPP_Vec2 cx_ite7 = _this7->gverts->next->next;
HXDLIN(5326)														while(hx::IsNotNull( cx_ite7 )){
HXLINE(5326)															 ::zpp_nape::geom::ZPP_Vec2 p9 = cx_ite7;
HXDLIN(5326)															{
HXLINE(5326)																 ::zpp_nape::geom::ZPP_Vec2 l7 = li3;
HXDLIN(5326)																li3 = li3->next;
HXDLIN(5326)																{
HXLINE(5326)																	p9->x = (_this7->body->posx + ((_this7->body->axisy * l7->x) - (_this7->body->axisx * l7->y)));
HXDLIN(5326)																	p9->y = (_this7->body->posy + ((l7->x * _this7->body->axisx) + (l7->y * _this7->body->axisy)));
            																}
HXDLIN(5326)																if ((p9->x < _this7->aabb->minx)) {
HXLINE(5326)																	_this7->aabb->minx = p9->x;
            																}
HXDLIN(5326)																if ((p9->x > _this7->aabb->maxx)) {
HXLINE(5326)																	_this7->aabb->maxx = p9->x;
            																}
HXDLIN(5326)																if ((p9->y < _this7->aabb->miny)) {
HXLINE(5326)																	_this7->aabb->miny = p9->y;
            																}
HXDLIN(5326)																if ((p9->y > _this7->aabb->maxy)) {
HXLINE(5326)																	_this7->aabb->maxy = p9->y;
            																}
            															}
HXDLIN(5326)															cx_ite7 = cx_ite7->next;
            														}
            													}
            												}
HXLINE(5327)												if ((minx1 < aabb1->minx)) {
HXLINE(5327)													aabb1->minx = minx1;
            												}
            												else {
HXLINE(5327)													minx1 = aabb1->minx;
            												}
HXLINE(5328)												if ((miny1 < aabb1->miny)) {
HXLINE(5328)													aabb1->miny = miny1;
            												}
            												else {
HXLINE(5328)													miny1 = aabb1->miny;
            												}
HXLINE(5329)												if ((maxx1 > aabb1->maxx)) {
HXLINE(5329)													aabb1->maxx = maxx1;
            												}
            												else {
HXLINE(5329)													maxx1 = aabb1->maxx;
            												}
HXLINE(5330)												if ((maxy1 > aabb1->maxy)) {
HXLINE(5330)													aabb1->maxy = maxy1;
            												}
            												else {
HXLINE(5330)													maxy1 = aabb1->maxy;
            												}
            											}
            										}
HXLINE(5332)										this->bphase->sync(s1);
            									}
HXLINE(5334)									cx_ite5 = cx_ite5->next;
            								}
            							}
HXLINE(5337)							cur10->sweepFrozen = false;
HXLINE(5338)							bool _hx_tmp6;
HXDLIN(5338)							if ((cur10->type == 2)) {
HXLINE(5338)								_hx_tmp6 = cur10->bulletEnabled;
            							}
            							else {
HXLINE(5338)								_hx_tmp6 = false;
            							}
HXDLIN(5338)							if (_hx_tmp6) {
HXLINE(5339)								Float linThreshold21 = (::nape::Config_obj::bulletCCDLinearThreshold * cur10->sweepRadius);
HXLINE(5340)								Float angThreshold21 = ::nape::Config_obj::bulletCCDAngularThreshold;
HXLINE(5341)								bool _hx_tmp7;
HXDLIN(5341)								if (!((((((cur10->velx * cur10->velx) + (cur10->vely * cur10->vely)) * dt) * dt) > (linThreshold21 * linThreshold21)))) {
HXLINE(5341)									_hx_tmp7 = ((((cur10->angvel * cur10->angvel) * dt) * dt) > (angThreshold21 * angThreshold21));
            								}
            								else {
HXLINE(5341)									_hx_tmp7 = true;
            								}
HXDLIN(5341)								if (_hx_tmp7) {
HXLINE(5342)									cur10->bullet = true;
            								}
            							}
            						}
            						else {
HXLINE(5347)							cur10->sweepFrozen = true;
HXLINE(5348)							cur10->bullet = false;
            						}
            					}
            					else {
HXLINE(5352)						cur10->sweepFrozen = true;
HXLINE(5353)						cur10->bullet = false;
            					}
            				}
HXLINE(5356)				cx_ite4 = cx_ite4->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updatePos,(void))

bool ZPP_Space_obj::presteparb( ::zpp_nape::dynamics::ZPP_Arbiter arb,Float dt, ::Dynamic __o_cont){
            		 ::Dynamic cont = __o_cont;
            		if (hx::IsNull(__o_cont)) cont = false;
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_5362_presteparb)
HXDLIN(5362)		 ::zpp_nape::space::ZPP_Space _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(5363)		bool _hx_tmp;
HXDLIN(5363)		if (!(arb->cleared)) {
HXLINE(5363)			if (arb->b1->component->sleeping) {
HXLINE(5363)				_hx_tmp = arb->b2->component->sleeping;
            			}
            			else {
HXLINE(5363)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(5363)			_hx_tmp = false;
            		}
HXDLIN(5363)		if (_hx_tmp) {
HXLINE(5372)			arb->sleep_stamp = this->stamp;
HXLINE(5373)			arb->sleeping = true;
HXLINE(5374)			return true;
            		}
HXLINE(5378)		bool _hx_tmp1;
HXDLIN(5378)		bool _hx_tmp2;
HXDLIN(5378)		if (!(!(arb->cleared))) {
HXLINE(5378)			_hx_tmp2 = (arb->present != 0);
            		}
            		else {
HXLINE(5378)			_hx_tmp2 = true;
            		}
HXDLIN(5378)		if (!(_hx_tmp2)) {
HXLINE(5378)			_hx_tmp1 = arb->intchange;
            		}
            		else {
HXLINE(5378)			_hx_tmp1 = true;
            		}
HXDLIN(5378)		if (_hx_tmp1) {
HXLINE(5379)			bool endcb;
HXDLIN(5379)			bool endcb1;
HXDLIN(5379)			bool endcb2;
HXDLIN(5379)			if (!(( (bool)(cont) ))) {
HXLINE(5379)				endcb2 = (arb->up_stamp == (this->stamp - 1));
            			}
            			else {
HXLINE(5379)				endcb2 = false;
            			}
HXDLIN(5379)			if (endcb2) {
HXLINE(5379)				endcb1 = !(arb->cleared);
            			}
            			else {
HXLINE(5379)				endcb1 = false;
            			}
HXDLIN(5379)			if (endcb1) {
HXLINE(5379)				endcb = !(arb->intchange);
            			}
            			else {
HXLINE(5379)				endcb = false;
            			}
HXLINE(5380)			bool begcb;
HXDLIN(5380)			bool begcb1;
HXDLIN(5380)			if (arb->fresh) {
HXLINE(5380)				begcb1 = !(arb->cleared);
            			}
            			else {
HXLINE(5380)				begcb1 = false;
            			}
HXDLIN(5380)			if (begcb1) {
HXLINE(5380)				begcb = !(arb->intchange);
            			}
            			else {
HXLINE(5380)				begcb = false;
            			}
HXLINE(5389)			if (endcb) {
HXLINE(5390)				arb->endGenerated = this->stamp;
            			}
HXLINE(5392)			bool _hx_tmp3;
HXDLIN(5392)			bool _hx_tmp4;
HXDLIN(5392)			bool _hx_tmp5;
HXDLIN(5392)			if (!(begcb)) {
HXLINE(5392)				_hx_tmp5 = endcb;
            			}
            			else {
HXLINE(5392)				_hx_tmp5 = true;
            			}
HXDLIN(5392)			if (!(_hx_tmp5)) {
HXLINE(5392)				_hx_tmp4 = arb->cleared;
            			}
            			else {
HXLINE(5392)				_hx_tmp4 = true;
            			}
HXDLIN(5392)			if (!(_hx_tmp4)) {
HXLINE(5392)				_hx_tmp3 = arb->intchange;
            			}
            			else {
HXLINE(5392)				_hx_tmp3 = true;
            			}
HXDLIN(5392)			if (_hx_tmp3) {
HXLINE(5393)				{
HXLINE(5393)					 ::zpp_nape::shape::ZPP_Shape s1 = arb->ws1;
HXDLIN(5393)					 ::zpp_nape::shape::ZPP_Shape s2 = arb->ws2;
HXDLIN(5393)					{
HXLINE(5393)						 ::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;
HXDLIN(5393)						{
HXLINE(5393)							while(hx::IsNotNull( _this->head )){
HXLINE(5393)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;
HXDLIN(5393)								_this->head = ret->next;
HXDLIN(5393)								{
HXLINE(5393)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXDLIN(5393)									o->elt = null();
HXDLIN(5393)									o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            								}
HXDLIN(5393)								if (hx::IsNull( _this->head )) {
HXLINE(5393)									_this->pushmod = true;
            								}
HXDLIN(5393)								_this->modified = true;
HXDLIN(5393)								_this->length--;
            							}
HXDLIN(5393)							_this->pushmod = true;
            						}
            					}
HXDLIN(5393)					{
HXLINE(5393)						 ::zpp_nape::util::ZNPList_ZPP_Interactor _this1 = this->mrca2;
HXDLIN(5393)						{
HXLINE(5393)							while(hx::IsNotNull( _this1->head )){
HXLINE(5393)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this1->head;
HXDLIN(5393)								_this1->head = ret1->next;
HXDLIN(5393)								{
HXLINE(5393)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor o1 = ret1;
HXDLIN(5393)									o1->elt = null();
HXDLIN(5393)									o1->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o1;
            								}
HXDLIN(5393)								if (hx::IsNull( _this1->head )) {
HXLINE(5393)									_this1->pushmod = true;
            								}
HXDLIN(5393)								_this1->modified = true;
HXDLIN(5393)								_this1->length--;
            							}
HXDLIN(5393)							_this1->pushmod = true;
            						}
            					}
HXDLIN(5393)					if (hx::IsNotNull( s1->cbSet )) {
HXLINE(5393)						 ::zpp_nape::util::ZNPList_ZPP_Interactor _this2 = this->mrca1;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret2;
HXDLIN(5393)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5393)							ret2 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5393)							ret2 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret2->next;
HXDLIN(5393)							ret2->next = null();
            						}
HXDLIN(5393)						ret2->elt = s1;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret2;
HXDLIN(5393)						temp->next = _this2->head;
HXDLIN(5393)						_this2->head = temp;
HXDLIN(5393)						_this2->modified = true;
HXDLIN(5393)						_this2->length++;
            					}
HXDLIN(5393)					if (hx::IsNotNull( s1->body->cbSet )) {
HXLINE(5393)						 ::zpp_nape::util::ZNPList_ZPP_Interactor _this3 = this->mrca1;
HXDLIN(5393)						 ::zpp_nape::phys::ZPP_Interactor o2 = s1->body;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret3;
HXDLIN(5393)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5393)							ret3 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5393)							ret3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret3->next;
HXDLIN(5393)							ret3->next = null();
            						}
HXDLIN(5393)						ret3->elt = o2;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp1 = ret3;
HXDLIN(5393)						temp1->next = _this3->head;
HXDLIN(5393)						_this3->head = temp1;
HXDLIN(5393)						_this3->modified = true;
HXDLIN(5393)						_this3->length++;
            					}
HXDLIN(5393)					if (hx::IsNotNull( s2->cbSet )) {
HXLINE(5393)						 ::zpp_nape::util::ZNPList_ZPP_Interactor _this4 = this->mrca2;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret4;
HXDLIN(5393)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5393)							ret4 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5393)							ret4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret4->next;
HXDLIN(5393)							ret4->next = null();
            						}
HXDLIN(5393)						ret4->elt = s2;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp2 = ret4;
HXDLIN(5393)						temp2->next = _this4->head;
HXDLIN(5393)						_this4->head = temp2;
HXDLIN(5393)						_this4->modified = true;
HXDLIN(5393)						_this4->length++;
            					}
HXDLIN(5393)					if (hx::IsNotNull( s2->body->cbSet )) {
HXLINE(5393)						 ::zpp_nape::util::ZNPList_ZPP_Interactor _this5 = this->mrca2;
HXDLIN(5393)						 ::zpp_nape::phys::ZPP_Interactor o3 = s2->body;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret5;
HXDLIN(5393)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5393)							ret5 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5393)							ret5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)							::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret5->next;
HXDLIN(5393)							ret5->next = null();
            						}
HXDLIN(5393)						ret5->elt = o3;
HXDLIN(5393)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp3 = ret5;
HXDLIN(5393)						temp3->next = _this5->head;
HXDLIN(5393)						_this5->head = temp3;
HXDLIN(5393)						_this5->modified = true;
HXDLIN(5393)						_this5->length++;
            					}
HXDLIN(5393)					 ::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;
HXDLIN(5393)					 ::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;
HXDLIN(5393)					while(hx::IsNotEq( c1,c2 )){
HXLINE(5393)						int d1;
HXDLIN(5393)						if (hx::IsNull( c1 )) {
HXLINE(5393)							d1 = 0;
            						}
            						else {
HXLINE(5393)							d1 = c1->depth;
            						}
HXDLIN(5393)						int d2;
HXDLIN(5393)						if (hx::IsNull( c2 )) {
HXLINE(5393)							d2 = 0;
            						}
            						else {
HXLINE(5393)							d2 = c2->depth;
            						}
HXDLIN(5393)						if ((d1 < d2)) {
HXLINE(5393)							if (hx::IsNotNull( c2->cbSet )) {
HXLINE(5393)								 ::zpp_nape::util::ZNPList_ZPP_Interactor _this6 = this->mrca2;
HXDLIN(5393)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret6;
HXDLIN(5393)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5393)									ret6 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(5393)									ret6 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret6->next;
HXDLIN(5393)									ret6->next = null();
            								}
HXDLIN(5393)								ret6->elt = c2;
HXDLIN(5393)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp4 = ret6;
HXDLIN(5393)								temp4->next = _this6->head;
HXDLIN(5393)								_this6->head = temp4;
HXDLIN(5393)								_this6->modified = true;
HXDLIN(5393)								_this6->length++;
            							}
HXDLIN(5393)							c2 = c2->compound;
            						}
            						else {
HXLINE(5393)							if (hx::IsNotNull( c1->cbSet )) {
HXLINE(5393)								 ::zpp_nape::util::ZNPList_ZPP_Interactor _this7 = this->mrca1;
HXDLIN(5393)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret7;
HXDLIN(5393)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5393)									ret7 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(5393)									ret7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5393)									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret7->next;
HXDLIN(5393)									ret7->next = null();
            								}
HXDLIN(5393)								ret7->elt = c1;
HXDLIN(5393)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp5 = ret7;
HXDLIN(5393)								temp5->next = _this7->head;
HXDLIN(5393)								_this7->head = temp5;
HXDLIN(5393)								_this7->modified = true;
HXDLIN(5393)								_this7->length++;
            							}
HXDLIN(5393)							c1 = c1->compound;
            						}
            					}
            				}
HXLINE(5394)				{
HXLINE(5395)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->mrca1->head;
HXLINE(5396)					while(hx::IsNotNull( cx_ite )){
HXLINE(5397)						 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;
HXLINE(5399)						{
HXLINE(5400)							 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca2->head;
HXLINE(5401)							while(hx::IsNotNull( cx_ite1 )){
HXLINE(5402)								 ::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;
HXLINE(5403)								{
HXLINE(5404)									 ::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;
HXLINE(5405)									 ::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;
HXLINE(5414)									 ::zpp_nape::space::ZPP_CbSetManager _this8 = cb1->manager;
HXDLIN(5414)									 ::zpp_nape::callbacks::ZPP_CbSetPair ret8 = null();
HXDLIN(5414)									 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN(5414)									if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(5414)										pairs = cb1->cbpairs;
            									}
            									else {
HXLINE(5414)										pairs = cb2->cbpairs;
            									}
HXDLIN(5414)									{
HXLINE(5414)										 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;
HXDLIN(5414)										while(hx::IsNotNull( cx_ite2 )){
HXLINE(5414)											 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;
HXDLIN(5414)											bool _hx_tmp6;
HXDLIN(5414)											bool _hx_tmp7;
HXDLIN(5414)											if (hx::IsEq( p->a,cb1 )) {
HXLINE(5414)												_hx_tmp7 = hx::IsEq( p->b,cb2 );
            											}
            											else {
HXLINE(5414)												_hx_tmp7 = false;
            											}
HXDLIN(5414)											if (!(_hx_tmp7)) {
HXLINE(5414)												if (hx::IsEq( p->a,cb2 )) {
HXLINE(5414)													_hx_tmp6 = hx::IsEq( p->b,cb1 );
            												}
            												else {
HXLINE(5414)													_hx_tmp6 = false;
            												}
            											}
            											else {
HXLINE(5414)												_hx_tmp6 = true;
            											}
HXDLIN(5414)											if (_hx_tmp6) {
HXLINE(5414)												ret8 = p;
HXDLIN(5414)												goto _hx_goto_286;
            											}
HXDLIN(5414)											cx_ite2 = cx_ite2->next;
            										}
            										_hx_goto_286:;
            									}
HXDLIN(5414)									if (hx::IsNull( ret8 )) {
HXLINE(5414)										 ::zpp_nape::callbacks::ZPP_CbSetPair ret9;
HXDLIN(5414)										{
HXLINE(5414)											if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(5414)												ret9 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(5414)												ret9 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5414)												::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret9->next;
HXDLIN(5414)												ret9->next = null();
            											}
HXDLIN(5414)											ret9->zip_listeners = true;
            										}
HXDLIN(5414)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(5414)											ret9->a = cb1;
HXDLIN(5414)											ret9->b = cb2;
            										}
            										else {
HXLINE(5414)											ret9->a = cb2;
HXDLIN(5414)											ret9->b = cb1;
            										}
HXDLIN(5414)										ret8 = ret9;
HXDLIN(5414)										cb1->cbpairs->add(ret8);
HXDLIN(5414)										if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(5414)											cb2->cbpairs->add(ret8);
            										}
            									}
HXDLIN(5414)									if (ret8->zip_listeners) {
HXLINE(5414)										ret8->zip_listeners = false;
HXDLIN(5414)										ret8->_hx___validate();
            									}
HXDLIN(5414)									if (hx::IsNull( ret8->listeners->head )) {
HXLINE(5415)										cx_ite1 = cx_ite1->next;
HXLINE(5416)										continue;
            									}
HXLINE(5418)									 ::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
HXLINE(5419)									bool _hx_tmp8;
HXDLIN(5419)									if (!(begcb)) {
HXLINE(5419)										_hx_tmp8 = arb->intchange;
            									}
            									else {
HXLINE(5419)										_hx_tmp8 = true;
            									}
HXDLIN(5419)									if (_hx_tmp8) {
HXLINE(5420)										if (hx::IsNull( callbackset )) {
HXLINE(5421)											callbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
HXLINE(5422)											this->add_callbackset(callbackset);
            										}
HXLINE(5424)										{
HXLINE(5424)											 ::zpp_nape::space::ZPP_CbSetManager _this9 = cb1->manager;
HXDLIN(5424)											 ::zpp_nape::callbacks::ZPP_CbSetPair ret10 = null();
HXDLIN(5424)											 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs1;
HXDLIN(5424)											if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(5424)												pairs1 = cb1->cbpairs;
            											}
            											else {
HXLINE(5424)												pairs1 = cb2->cbpairs;
            											}
HXDLIN(5424)											{
HXLINE(5424)												 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs1->head;
HXDLIN(5424)												while(hx::IsNotNull( cx_ite3 )){
HXLINE(5424)													 ::zpp_nape::callbacks::ZPP_CbSetPair p1 = cx_ite3->elt;
HXDLIN(5424)													bool _hx_tmp9;
HXDLIN(5424)													bool _hx_tmp10;
HXDLIN(5424)													if (hx::IsEq( p1->a,cb1 )) {
HXLINE(5424)														_hx_tmp10 = hx::IsEq( p1->b,cb2 );
            													}
            													else {
HXLINE(5424)														_hx_tmp10 = false;
            													}
HXDLIN(5424)													if (!(_hx_tmp10)) {
HXLINE(5424)														if (hx::IsEq( p1->a,cb2 )) {
HXLINE(5424)															_hx_tmp9 = hx::IsEq( p1->b,cb1 );
            														}
            														else {
HXLINE(5424)															_hx_tmp9 = false;
            														}
            													}
            													else {
HXLINE(5424)														_hx_tmp9 = true;
            													}
HXDLIN(5424)													if (_hx_tmp9) {
HXLINE(5424)														ret10 = p1;
HXDLIN(5424)														goto _hx_goto_287;
            													}
HXDLIN(5424)													cx_ite3 = cx_ite3->next;
            												}
            												_hx_goto_287:;
            											}
HXDLIN(5424)											if (hx::IsNull( ret10 )) {
HXLINE(5424)												 ::zpp_nape::callbacks::ZPP_CbSetPair ret11;
HXDLIN(5424)												{
HXLINE(5424)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(5424)														ret11 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(5424)														ret11 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5424)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret11->next;
HXDLIN(5424)														ret11->next = null();
            													}
HXDLIN(5424)													ret11->zip_listeners = true;
            												}
HXDLIN(5424)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(5424)													ret11->a = cb1;
HXDLIN(5424)													ret11->b = cb2;
            												}
            												else {
HXLINE(5424)													ret11->a = cb2;
HXDLIN(5424)													ret11->b = cb1;
            												}
HXDLIN(5424)												ret10 = ret11;
HXDLIN(5424)												cb1->cbpairs->add(ret10);
HXDLIN(5424)												if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(5424)													cb2->cbpairs->add(ret10);
            												}
            											}
HXDLIN(5424)											if (ret10->zip_listeners) {
HXLINE(5424)												ret10->zip_listeners = false;
HXDLIN(5424)												ret10->_hx___validate();
            											}
HXDLIN(5424)											{
HXLINE(5424)												 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite4 = ret10->listeners->head;
HXDLIN(5424)												while(hx::IsNotNull( cx_ite4 )){
HXLINE(5424)													 ::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite4->elt;
HXDLIN(5424)													if ((x->event == 0)) {
HXLINE(5425)														bool _hx_tmp11;
HXDLIN(5425)														if (((x->itype & arb->type) != 0)) {
HXLINE(5425)															_hx_tmp11 = callbackset->empty_arb(x->itype);
            														}
            														else {
HXLINE(5425)															_hx_tmp11 = false;
            														}
HXDLIN(5425)														if (_hx_tmp11) {
HXLINE(5426)															 ::zpp_nape::callbacks::ZPP_Callback cb = _gthis->push_callback(x);
HXLINE(5427)															cb->event = 0;
HXLINE(5428)															{
HXLINE(5428)																 ::zpp_nape::phys::ZPP_Interactor o11 = callbackset->int1;
HXDLIN(5428)																 ::zpp_nape::phys::ZPP_Interactor o21 = callbackset->int2;
HXDLIN(5428)																bool _hx_tmp12;
HXDLIN(5428)																 ::zpp_nape::callbacks::ZPP_OptionType _this10 = x->options1;
HXDLIN(5428)																 ::zpp_nape::util::ZNPList_ZPP_CbType xs = o11->cbTypes;
HXDLIN(5428)																bool _hx_tmp13;
HXDLIN(5428)																if (_this10->nonemptyintersection(xs,_this10->includes)) {
HXLINE(5428)																	_hx_tmp13 = !(_this10->nonemptyintersection(xs,_this10->excludes));
            																}
            																else {
HXLINE(5428)																	_hx_tmp13 = false;
            																}
HXDLIN(5428)																if (_hx_tmp13) {
HXLINE(5428)																	 ::zpp_nape::callbacks::ZPP_OptionType _this11 = x->options2;
HXDLIN(5428)																	 ::zpp_nape::util::ZNPList_ZPP_CbType xs1 = o21->cbTypes;
HXDLIN(5428)																	if (_this11->nonemptyintersection(xs1,_this11->includes)) {
HXLINE(5428)																		_hx_tmp12 = !(_this11->nonemptyintersection(xs1,_this11->excludes));
            																	}
            																	else {
HXLINE(5428)																		_hx_tmp12 = false;
            																	}
            																}
            																else {
HXLINE(5428)																	_hx_tmp12 = false;
            																}
HXDLIN(5428)																if (_hx_tmp12) {
HXLINE(5428)																	cb->int1 = o11;
HXDLIN(5428)																	cb->int2 = o21;
            																}
            																else {
HXLINE(5428)																	cb->int1 = o21;
HXDLIN(5428)																	cb->int2 = o11;
            																}
            															}
HXLINE(5429)															cb->set = callbackset;
            														}
            													}
HXLINE(5424)													cx_ite4 = cx_ite4->next;
            												}
            											}
            										}
HXLINE(5432)										bool _hx_tmp14;
HXDLIN(5432)										bool ret12;
HXDLIN(5432)										{
HXLINE(5432)											ret12 = false;
HXDLIN(5432)											{
HXLINE(5432)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite5 = callbackset->arbiters->head;
HXDLIN(5432)												while(hx::IsNotNull( cx_ite5 )){
HXLINE(5432)													 ::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite5->elt;
HXDLIN(5432)													if (hx::IsEq( npite,arb )) {
HXLINE(5432)														ret12 = true;
HXDLIN(5432)														goto _hx_goto_289;
            													}
HXDLIN(5432)													cx_ite5 = cx_ite5->next;
            												}
            												_hx_goto_289:;
            											}
            										}
HXDLIN(5432)										if (!(ret12)) {
HXLINE(5432)											{
HXLINE(5432)												 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this12 = callbackset->arbiters;
HXDLIN(5432)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret13;
HXDLIN(5432)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(5432)													ret13 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(5432)													ret13 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5432)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret13->next;
HXDLIN(5432)													ret13->next = null();
            												}
HXDLIN(5432)												ret13->elt = arb;
HXDLIN(5432)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp6 = ret13;
HXDLIN(5432)												temp6->next = _this12->head;
HXDLIN(5432)												_this12->head = temp6;
HXDLIN(5432)												_this12->modified = true;
HXDLIN(5432)												_this12->length++;
            											}
HXDLIN(5432)											_hx_tmp14 = true;
            										}
            										else {
HXLINE(5432)											_hx_tmp14 = false;
            										}
HXDLIN(5432)										if (_hx_tmp14) {
HXLINE(5432)											arb->present++;
            										}
            									}
            									else {
HXLINE(5435)										arb->present--;
HXLINE(5452)										callbackset->remove_arb(arb);
HXLINE(5453)										{
HXLINE(5453)											 ::zpp_nape::space::ZPP_CbSetManager _this13 = cb1->manager;
HXDLIN(5453)											 ::zpp_nape::callbacks::ZPP_CbSetPair ret14 = null();
HXDLIN(5453)											 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs2;
HXDLIN(5453)											if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(5453)												pairs2 = cb1->cbpairs;
            											}
            											else {
HXLINE(5453)												pairs2 = cb2->cbpairs;
            											}
HXDLIN(5453)											{
HXLINE(5453)												 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite6 = pairs2->head;
HXDLIN(5453)												while(hx::IsNotNull( cx_ite6 )){
HXLINE(5453)													 ::zpp_nape::callbacks::ZPP_CbSetPair p2 = cx_ite6->elt;
HXDLIN(5453)													bool _hx_tmp15;
HXDLIN(5453)													bool _hx_tmp16;
HXDLIN(5453)													if (hx::IsEq( p2->a,cb1 )) {
HXLINE(5453)														_hx_tmp16 = hx::IsEq( p2->b,cb2 );
            													}
            													else {
HXLINE(5453)														_hx_tmp16 = false;
            													}
HXDLIN(5453)													if (!(_hx_tmp16)) {
HXLINE(5453)														if (hx::IsEq( p2->a,cb2 )) {
HXLINE(5453)															_hx_tmp15 = hx::IsEq( p2->b,cb1 );
            														}
            														else {
HXLINE(5453)															_hx_tmp15 = false;
            														}
            													}
            													else {
HXLINE(5453)														_hx_tmp15 = true;
            													}
HXDLIN(5453)													if (_hx_tmp15) {
HXLINE(5453)														ret14 = p2;
HXDLIN(5453)														goto _hx_goto_290;
            													}
HXDLIN(5453)													cx_ite6 = cx_ite6->next;
            												}
            												_hx_goto_290:;
            											}
HXDLIN(5453)											if (hx::IsNull( ret14 )) {
HXLINE(5453)												 ::zpp_nape::callbacks::ZPP_CbSetPair ret15;
HXDLIN(5453)												{
HXLINE(5453)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(5453)														ret15 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(5453)														ret15 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5453)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret15->next;
HXDLIN(5453)														ret15->next = null();
            													}
HXDLIN(5453)													ret15->zip_listeners = true;
            												}
HXDLIN(5453)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(5453)													ret15->a = cb1;
HXDLIN(5453)													ret15->b = cb2;
            												}
            												else {
HXLINE(5453)													ret15->a = cb2;
HXDLIN(5453)													ret15->b = cb1;
            												}
HXDLIN(5453)												ret14 = ret15;
HXDLIN(5453)												cb1->cbpairs->add(ret14);
HXDLIN(5453)												if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(5453)													cb2->cbpairs->add(ret14);
            												}
            											}
HXDLIN(5453)											if (ret14->zip_listeners) {
HXLINE(5453)												ret14->zip_listeners = false;
HXDLIN(5453)												ret14->_hx___validate();
            											}
HXDLIN(5453)											{
HXLINE(5453)												 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite7 = ret14->listeners->head;
HXDLIN(5453)												while(hx::IsNotNull( cx_ite7 )){
HXLINE(5453)													 ::zpp_nape::callbacks::ZPP_InteractionListener x1 = cx_ite7->elt;
HXDLIN(5453)													if ((x1->event == 1)) {
HXLINE(5454)														bool _hx_tmp17;
HXDLIN(5454)														if (((x1->itype & arb->type) != 0)) {
HXLINE(5454)															_hx_tmp17 = callbackset->empty_arb(x1->itype);
            														}
            														else {
HXLINE(5454)															_hx_tmp17 = false;
            														}
HXDLIN(5454)														if (_hx_tmp17) {
HXLINE(5455)															 ::zpp_nape::callbacks::ZPP_Callback cb3 = _gthis->push_callback(x1);
HXLINE(5456)															cb3->event = 1;
HXLINE(5457)															{
HXLINE(5457)																 ::zpp_nape::phys::ZPP_Interactor o12 = callbackset->int1;
HXDLIN(5457)																 ::zpp_nape::phys::ZPP_Interactor o22 = callbackset->int2;
HXDLIN(5457)																bool _hx_tmp18;
HXDLIN(5457)																 ::zpp_nape::callbacks::ZPP_OptionType _this14 = x1->options1;
HXDLIN(5457)																 ::zpp_nape::util::ZNPList_ZPP_CbType xs2 = o12->cbTypes;
HXDLIN(5457)																bool _hx_tmp19;
HXDLIN(5457)																if (_this14->nonemptyintersection(xs2,_this14->includes)) {
HXLINE(5457)																	_hx_tmp19 = !(_this14->nonemptyintersection(xs2,_this14->excludes));
            																}
            																else {
HXLINE(5457)																	_hx_tmp19 = false;
            																}
HXDLIN(5457)																if (_hx_tmp19) {
HXLINE(5457)																	 ::zpp_nape::callbacks::ZPP_OptionType _this15 = x1->options2;
HXDLIN(5457)																	 ::zpp_nape::util::ZNPList_ZPP_CbType xs3 = o22->cbTypes;
HXDLIN(5457)																	if (_this15->nonemptyintersection(xs3,_this15->includes)) {
HXLINE(5457)																		_hx_tmp18 = !(_this15->nonemptyintersection(xs3,_this15->excludes));
            																	}
            																	else {
HXLINE(5457)																		_hx_tmp18 = false;
            																	}
            																}
            																else {
HXLINE(5457)																	_hx_tmp18 = false;
            																}
HXDLIN(5457)																if (_hx_tmp18) {
HXLINE(5457)																	cb3->int1 = o12;
HXDLIN(5457)																	cb3->int2 = o22;
            																}
            																else {
HXLINE(5457)																	cb3->int1 = o22;
HXDLIN(5457)																	cb3->int2 = o12;
            																}
            															}
HXLINE(5458)															cb3->set = callbackset;
            														}
            													}
HXLINE(5453)													cx_ite7 = cx_ite7->next;
            												}
            											}
            										}
HXLINE(5461)										if (hx::IsNull( callbackset->arbiters->head )) {
HXLINE(5462)											this->remove_callbackset(callbackset);
            										}
            									}
            								}
HXLINE(5466)								cx_ite1 = cx_ite1->next;
            							}
            						}
HXLINE(5470)						cx_ite = cx_ite->next;
            					}
            				}
            			}
HXLINE(5474)			arb->fresh = false;
HXLINE(5475)			arb->intchange = false;
            		}
HXLINE(5477)		bool _hx_tmp20;
HXDLIN(5477)		if (!(arb->cleared)) {
HXLINE(5477)			int _hx_tmp21;
HXDLIN(5477)			if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(5477)				_hx_tmp21 = ::nape::Config_obj::arbiterExpirationDelay;
            			}
            			else {
HXLINE(5477)				_hx_tmp21 = 0;
            			}
HXDLIN(5477)			_hx_tmp20 = ((arb->up_stamp + _hx_tmp21) < this->stamp);
            		}
            		else {
HXLINE(5477)			_hx_tmp20 = true;
            		}
HXDLIN(5477)		if (_hx_tmp20) {
HXLINE(5478)			if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR)) {
HXLINE(5478)				 ::zpp_nape::dynamics::ZPP_SensorArbiter _this16 = arb->sensorarb;
HXDLIN(5478)				{
HXLINE(5478)					if (!(_this16->cleared)) {
HXLINE(5478)						{
HXLINE(5478)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this17 = _this16->b1->arbiters;
HXDLIN(5478)							{
HXLINE(5478)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();
HXDLIN(5478)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this17->head;
HXDLIN(5478)								bool ret16 = false;
HXDLIN(5478)								while(hx::IsNotNull( cur )){
HXLINE(5478)									if (hx::IsEq( cur->elt,_this16 )) {
HXLINE(5478)										{
HXLINE(5478)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old;
HXDLIN(5478)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret17;
HXDLIN(5478)											if (hx::IsNull( pre )) {
HXLINE(5478)												old = _this17->head;
HXDLIN(5478)												ret17 = old->next;
HXDLIN(5478)												_this17->head = ret17;
HXDLIN(5478)												if (hx::IsNull( _this17->head )) {
HXLINE(5478)													_this17->pushmod = true;
            												}
            											}
            											else {
HXLINE(5478)												old = pre->next;
HXDLIN(5478)												ret17 = old->next;
HXDLIN(5478)												pre->next = ret17;
HXDLIN(5478)												if (hx::IsNull( ret17 )) {
HXLINE(5478)													_this17->pushmod = true;
            												}
            											}
HXDLIN(5478)											{
HXLINE(5478)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o4 = old;
HXDLIN(5478)												o4->elt = null();
HXDLIN(5478)												o4->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5478)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o4;
            											}
HXDLIN(5478)											_this17->modified = true;
HXDLIN(5478)											_this17->length--;
HXDLIN(5478)											_this17->pushmod = true;
            										}
HXDLIN(5478)										ret16 = true;
HXDLIN(5478)										goto _hx_goto_292;
            									}
HXDLIN(5478)									pre = cur;
HXDLIN(5478)									cur = cur->next;
            								}
            								_hx_goto_292:;
            							}
            						}
HXDLIN(5478)						{
HXLINE(5478)							 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this18 = _this16->b2->arbiters;
HXDLIN(5478)							{
HXLINE(5478)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();
HXDLIN(5478)								 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur1 = _this18->head;
HXDLIN(5478)								bool ret18 = false;
HXDLIN(5478)								while(hx::IsNotNull( cur1 )){
HXLINE(5478)									if (hx::IsEq( cur1->elt,_this16 )) {
HXLINE(5478)										{
HXLINE(5478)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old1;
HXDLIN(5478)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret19;
HXDLIN(5478)											if (hx::IsNull( pre1 )) {
HXLINE(5478)												old1 = _this18->head;
HXDLIN(5478)												ret19 = old1->next;
HXDLIN(5478)												_this18->head = ret19;
HXDLIN(5478)												if (hx::IsNull( _this18->head )) {
HXLINE(5478)													_this18->pushmod = true;
            												}
            											}
            											else {
HXLINE(5478)												old1 = pre1->next;
HXDLIN(5478)												ret19 = old1->next;
HXDLIN(5478)												pre1->next = ret19;
HXDLIN(5478)												if (hx::IsNull( ret19 )) {
HXLINE(5478)													_this18->pushmod = true;
            												}
            											}
HXDLIN(5478)											{
HXLINE(5478)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o5 = old1;
HXDLIN(5478)												o5->elt = null();
HXDLIN(5478)												o5->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5478)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o5;
            											}
HXDLIN(5478)											_this18->modified = true;
HXDLIN(5478)											_this18->length--;
HXDLIN(5478)											_this18->pushmod = true;
            										}
HXDLIN(5478)										ret18 = true;
HXDLIN(5478)										goto _hx_goto_293;
            									}
HXDLIN(5478)									pre1 = cur1;
HXDLIN(5478)									cur1 = cur1->next;
            								}
            								_hx_goto_293:;
            							}
            						}
HXDLIN(5478)						if (hx::IsNotNull( _this16->pair )) {
HXLINE(5478)							_this16->pair->arb = null();
HXDLIN(5478)							_this16->pair = null();
            						}
            					}
HXDLIN(5478)					_this16->b1 = (_this16->b2 = null());
HXDLIN(5478)					_this16->active = false;
HXDLIN(5478)					_this16->intchange = false;
            				}
HXDLIN(5478)				{
HXLINE(5478)					 ::zpp_nape::dynamics::ZPP_SensorArbiter o6 = _this16;
HXDLIN(5478)					o6->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(5478)					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o6;
            				}
            			}
            			else {
HXLINE(5479)				if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(5479)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _this19 = arb->fluidarb;
HXDLIN(5479)					{
HXLINE(5479)						if (!(_this19->cleared)) {
HXLINE(5479)							{
HXLINE(5479)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this20 = _this19->b1->arbiters;
HXDLIN(5479)								{
HXLINE(5479)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre2 = null();
HXDLIN(5479)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur2 = _this20->head;
HXDLIN(5479)									bool ret20 = false;
HXDLIN(5479)									while(hx::IsNotNull( cur2 )){
HXLINE(5479)										if (hx::IsEq( cur2->elt,_this19 )) {
HXLINE(5479)											{
HXLINE(5479)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old2;
HXDLIN(5479)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret21;
HXDLIN(5479)												if (hx::IsNull( pre2 )) {
HXLINE(5479)													old2 = _this20->head;
HXDLIN(5479)													ret21 = old2->next;
HXDLIN(5479)													_this20->head = ret21;
HXDLIN(5479)													if (hx::IsNull( _this20->head )) {
HXLINE(5479)														_this20->pushmod = true;
            													}
            												}
            												else {
HXLINE(5479)													old2 = pre2->next;
HXDLIN(5479)													ret21 = old2->next;
HXDLIN(5479)													pre2->next = ret21;
HXDLIN(5479)													if (hx::IsNull( ret21 )) {
HXLINE(5479)														_this20->pushmod = true;
            													}
            												}
HXDLIN(5479)												{
HXLINE(5479)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o7 = old2;
HXDLIN(5479)													o7->elt = null();
HXDLIN(5479)													o7->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5479)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o7;
            												}
HXDLIN(5479)												_this20->modified = true;
HXDLIN(5479)												_this20->length--;
HXDLIN(5479)												_this20->pushmod = true;
            											}
HXDLIN(5479)											ret20 = true;
HXDLIN(5479)											goto _hx_goto_294;
            										}
HXDLIN(5479)										pre2 = cur2;
HXDLIN(5479)										cur2 = cur2->next;
            									}
            									_hx_goto_294:;
            								}
            							}
HXDLIN(5479)							{
HXLINE(5479)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this21 = _this19->b2->arbiters;
HXDLIN(5479)								{
HXLINE(5479)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre3 = null();
HXDLIN(5479)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur3 = _this21->head;
HXDLIN(5479)									bool ret22 = false;
HXDLIN(5479)									while(hx::IsNotNull( cur3 )){
HXLINE(5479)										if (hx::IsEq( cur3->elt,_this19 )) {
HXLINE(5479)											{
HXLINE(5479)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old3;
HXDLIN(5479)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret23;
HXDLIN(5479)												if (hx::IsNull( pre3 )) {
HXLINE(5479)													old3 = _this21->head;
HXDLIN(5479)													ret23 = old3->next;
HXDLIN(5479)													_this21->head = ret23;
HXDLIN(5479)													if (hx::IsNull( _this21->head )) {
HXLINE(5479)														_this21->pushmod = true;
            													}
            												}
            												else {
HXLINE(5479)													old3 = pre3->next;
HXDLIN(5479)													ret23 = old3->next;
HXDLIN(5479)													pre3->next = ret23;
HXDLIN(5479)													if (hx::IsNull( ret23 )) {
HXLINE(5479)														_this21->pushmod = true;
            													}
            												}
HXDLIN(5479)												{
HXLINE(5479)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o8 = old3;
HXDLIN(5479)													o8->elt = null();
HXDLIN(5479)													o8->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5479)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o8;
            												}
HXDLIN(5479)												_this21->modified = true;
HXDLIN(5479)												_this21->length--;
HXDLIN(5479)												_this21->pushmod = true;
            											}
HXDLIN(5479)											ret22 = true;
HXDLIN(5479)											goto _hx_goto_295;
            										}
HXDLIN(5479)										pre3 = cur3;
HXDLIN(5479)										cur3 = cur3->next;
            									}
            									_hx_goto_295:;
            								}
            							}
HXDLIN(5479)							if (hx::IsNotNull( _this19->pair )) {
HXLINE(5479)								_this19->pair->arb = null();
HXDLIN(5479)								_this19->pair = null();
            							}
            						}
HXDLIN(5479)						_this19->b1 = (_this19->b2 = null());
HXDLIN(5479)						_this19->active = false;
HXDLIN(5479)						_this19->intchange = false;
            					}
HXDLIN(5479)					{
HXLINE(5479)						 ::zpp_nape::dynamics::ZPP_FluidArbiter o9 = _this19;
HXDLIN(5479)						o9->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(5479)						::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o9;
            					}
HXDLIN(5479)					_this19->pre_dt = ((Float)-1.0);
            				}
            				else {
HXLINE(5480)					 ::zpp_nape::dynamics::ZPP_ColArbiter _this22 = arb->colarb;
HXDLIN(5480)					{
HXLINE(5480)						if (!(_this22->cleared)) {
HXLINE(5480)							{
HXLINE(5480)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this23 = _this22->b1->arbiters;
HXDLIN(5480)								{
HXLINE(5480)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre4 = null();
HXDLIN(5480)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur4 = _this23->head;
HXDLIN(5480)									bool ret24 = false;
HXDLIN(5480)									while(hx::IsNotNull( cur4 )){
HXLINE(5480)										if (hx::IsEq( cur4->elt,_this22 )) {
HXLINE(5480)											{
HXLINE(5480)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old4;
HXDLIN(5480)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret25;
HXDLIN(5480)												if (hx::IsNull( pre4 )) {
HXLINE(5480)													old4 = _this23->head;
HXDLIN(5480)													ret25 = old4->next;
HXDLIN(5480)													_this23->head = ret25;
HXDLIN(5480)													if (hx::IsNull( _this23->head )) {
HXLINE(5480)														_this23->pushmod = true;
            													}
            												}
            												else {
HXLINE(5480)													old4 = pre4->next;
HXDLIN(5480)													ret25 = old4->next;
HXDLIN(5480)													pre4->next = ret25;
HXDLIN(5480)													if (hx::IsNull( ret25 )) {
HXLINE(5480)														_this23->pushmod = true;
            													}
            												}
HXDLIN(5480)												{
HXLINE(5480)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o10 = old4;
HXDLIN(5480)													o10->elt = null();
HXDLIN(5480)													o10->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5480)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o10;
            												}
HXDLIN(5480)												_this23->modified = true;
HXDLIN(5480)												_this23->length--;
HXDLIN(5480)												_this23->pushmod = true;
            											}
HXDLIN(5480)											ret24 = true;
HXDLIN(5480)											goto _hx_goto_296;
            										}
HXDLIN(5480)										pre4 = cur4;
HXDLIN(5480)										cur4 = cur4->next;
            									}
            									_hx_goto_296:;
            								}
            							}
HXDLIN(5480)							{
HXLINE(5480)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this24 = _this22->b2->arbiters;
HXDLIN(5480)								{
HXLINE(5480)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre5 = null();
HXDLIN(5480)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur5 = _this24->head;
HXDLIN(5480)									bool ret26 = false;
HXDLIN(5480)									while(hx::IsNotNull( cur5 )){
HXLINE(5480)										if (hx::IsEq( cur5->elt,_this22 )) {
HXLINE(5480)											{
HXLINE(5480)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old5;
HXDLIN(5480)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret27;
HXDLIN(5480)												if (hx::IsNull( pre5 )) {
HXLINE(5480)													old5 = _this24->head;
HXDLIN(5480)													ret27 = old5->next;
HXDLIN(5480)													_this24->head = ret27;
HXDLIN(5480)													if (hx::IsNull( _this24->head )) {
HXLINE(5480)														_this24->pushmod = true;
            													}
            												}
            												else {
HXLINE(5480)													old5 = pre5->next;
HXDLIN(5480)													ret27 = old5->next;
HXDLIN(5480)													pre5->next = ret27;
HXDLIN(5480)													if (hx::IsNull( ret27 )) {
HXLINE(5480)														_this24->pushmod = true;
            													}
            												}
HXDLIN(5480)												{
HXLINE(5480)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o13 = old5;
HXDLIN(5480)													o13->elt = null();
HXDLIN(5480)													o13->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5480)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o13;
            												}
HXDLIN(5480)												_this24->modified = true;
HXDLIN(5480)												_this24->length--;
HXDLIN(5480)												_this24->pushmod = true;
            											}
HXDLIN(5480)											ret26 = true;
HXDLIN(5480)											goto _hx_goto_297;
            										}
HXDLIN(5480)										pre5 = cur5;
HXDLIN(5480)										cur5 = cur5->next;
            									}
            									_hx_goto_297:;
            								}
            							}
HXDLIN(5480)							if (hx::IsNotNull( _this22->pair )) {
HXLINE(5480)								_this22->pair->arb = null();
HXDLIN(5480)								_this22->pair = null();
            							}
            						}
HXDLIN(5480)						_this22->b1 = (_this22->b2 = null());
HXDLIN(5480)						_this22->active = false;
HXDLIN(5480)						_this22->intchange = false;
            					}
HXDLIN(5480)					while(hx::IsNotNull( _this22->contacts->next )){
HXLINE(5480)						{
HXLINE(5480)							 ::zpp_nape::dynamics::ZPP_Contact _this25 = _this22->contacts;
HXDLIN(5480)							 ::zpp_nape::dynamics::ZPP_Contact ret28 = _this25->next;
HXDLIN(5480)							_this25->pop();
HXDLIN(5480)							 ::zpp_nape::dynamics::ZPP_Contact o14 = ret28;
HXDLIN(5480)							o14->arbiter = null();
HXDLIN(5480)							o14->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN(5480)							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o14;
            						}
HXDLIN(5480)						{
HXLINE(5480)							 ::zpp_nape::dynamics::ZPP_IContact _this26 = _this22->innards;
HXDLIN(5480)							 ::zpp_nape::dynamics::ZPP_IContact ret29 = _this26->next;
HXDLIN(5480)							_this26->next = ret29->next;
HXDLIN(5480)							ret29->_inuse = false;
HXDLIN(5480)							if (hx::IsNull( _this26->next )) {
HXLINE(5480)								_this26->pushmod = true;
            							}
HXDLIN(5480)							_this26->modified = true;
HXDLIN(5480)							_this26->length--;
            						}
            					}
HXDLIN(5480)					{
HXLINE(5480)						 ::zpp_nape::dynamics::ZPP_ColArbiter o15 = _this22;
HXDLIN(5480)						{
HXLINE(5480)							o15->userdef_dyn_fric = false;
HXDLIN(5480)							o15->userdef_stat_fric = false;
HXDLIN(5480)							o15->userdef_restitution = false;
HXDLIN(5480)							o15->userdef_rfric = false;
HXDLIN(5480)							o15->_hx___ref_edge1 = (o15->_hx___ref_edge2 = null());
            						}
HXDLIN(5480)						o15->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(5480)						::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o15;
            					}
HXDLIN(5480)					_this22->pre_dt = ((Float)-1.0);
            				}
            			}
HXLINE(5481)			return true;
            		}
HXLINE(5483)		bool pact = arb->active;
HXLINE(5484)		arb->active = (arb->presentable = (arb->up_stamp == this->stamp));
HXLINE(5485)		if (((arb->immState & 1) != 0)) {
HXLINE(5486)			bool _hx_tmp22;
HXDLIN(5486)			if (arb->active) {
HXLINE(5486)				_hx_tmp22 = (arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR);
            			}
            			else {
HXLINE(5486)				_hx_tmp22 = false;
            			}
HXDLIN(5486)			if (_hx_tmp22) {
HXLINE(5487)				if (hx::IsNotNull( arb->colarb )) {
HXLINE(5488)					 ::zpp_nape::dynamics::ZPP_ColArbiter _this27 = arb->colarb;
HXDLIN(5488)					if (_this27->invalidated) {
HXLINE(5488)						_this27->invalidated = false;
HXDLIN(5488)						{
HXLINE(5488)							if (!(_this27->userdef_restitution)) {
HXLINE(5488)								bool _hx_tmp23;
HXDLIN(5488)								if (!((_this27->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))) {
HXLINE(5488)									_hx_tmp23 = (_this27->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY);
            								}
            								else {
HXLINE(5488)									_hx_tmp23 = true;
            								}
HXDLIN(5488)								if (_hx_tmp23) {
HXLINE(5488)									_this27->restitution = ( (Float)(0) );
            								}
            								else {
HXLINE(5488)									bool _hx_tmp24;
HXDLIN(5488)									if (!((_this27->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))) {
HXLINE(5488)										_hx_tmp24 = (_this27->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY);
            									}
            									else {
HXLINE(5488)										_hx_tmp24 = true;
            									}
HXDLIN(5488)									if (_hx_tmp24) {
HXLINE(5488)										_this27->restitution = ( (Float)(1) );
            									}
            									else {
HXLINE(5488)										_this27->restitution = ((_this27->s1->material->elasticity + _this27->s2->material->elasticity) / ( (Float)(2) ));
            									}
            								}
HXDLIN(5488)								if ((_this27->restitution < 0)) {
HXLINE(5488)									_this27->restitution = ( (Float)(0) );
            								}
HXDLIN(5488)								if ((_this27->restitution > 1)) {
HXLINE(5488)									_this27->restitution = ( (Float)(1) );
            								}
            							}
HXDLIN(5488)							if (!(_this27->userdef_dyn_fric)) {
HXLINE(5488)								_this27->dyn_fric = ::Math_obj::sqrt((_this27->s1->material->dynamicFriction * _this27->s2->material->dynamicFriction));
            							}
HXDLIN(5488)							if (!(_this27->userdef_stat_fric)) {
HXLINE(5488)								_this27->stat_fric = ::Math_obj::sqrt((_this27->s1->material->staticFriction * _this27->s2->material->staticFriction));
            							}
HXDLIN(5488)							if (!(_this27->userdef_rfric)) {
HXLINE(5488)								_this27->rfric = ::Math_obj::sqrt((_this27->s1->material->rollingFriction * _this27->s2->material->rollingFriction));
            							}
            						}
            					}
HXDLIN(5488)					if ((_this27->pre_dt == ((Float)-1.0))) {
HXLINE(5488)						_this27->pre_dt = dt;
            					}
HXDLIN(5488)					Float dtratio = (dt / _this27->pre_dt);
HXDLIN(5488)					_this27->pre_dt = dt;
HXDLIN(5488)					Float mass_sum = (_this27->b1->smass + _this27->b2->smass);
HXDLIN(5488)					_this27->hc2 = false;
HXDLIN(5488)					bool fst = true;
HXDLIN(5488)					bool statType;
HXDLIN(5488)					if ((_this27->b1->type == 2)) {
HXLINE(5488)						statType = (_this27->b2->type != 2);
            					}
            					else {
HXLINE(5488)						statType = true;
            					}
HXDLIN(5488)					Float bias;
HXDLIN(5488)					if (statType) {
HXLINE(5488)						if (_this27->continuous) {
HXLINE(5488)							bias = ::nape::Config_obj::contactContinuousStaticBiasCoef;
            						}
            						else {
HXLINE(5488)							bias = ::nape::Config_obj::contactStaticBiasCoef;
            						}
            					}
            					else {
HXLINE(5488)						if (_this27->continuous) {
HXLINE(5488)							bias = ::nape::Config_obj::contactContinuousBiasCoef;
            						}
            						else {
HXLINE(5488)							bias = ::nape::Config_obj::contactBiasCoef;
            						}
            					}
HXDLIN(5488)					_this27->biasCoef = bias;
HXDLIN(5488)					_this27->continuous = false;
HXDLIN(5488)					 ::zpp_nape::dynamics::ZPP_Contact pre6 = null();
HXDLIN(5488)					 ::zpp_nape::dynamics::ZPP_IContact prei = null();
HXDLIN(5488)					 ::zpp_nape::dynamics::ZPP_IContact cx_itei = _this27->innards->next;
HXDLIN(5488)					{
HXLINE(5488)						 ::zpp_nape::dynamics::ZPP_Contact cx_ite8 = _this27->contacts->next;
HXDLIN(5488)						while(hx::IsNotNull( cx_ite8 )){
HXLINE(5488)							 ::zpp_nape::dynamics::ZPP_Contact c = cx_ite8;
HXDLIN(5488)							{
HXLINE(5488)								if (((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < _this27->stamp)) {
HXLINE(5488)									 ::zpp_nape::dynamics::ZPP_Contact _this28 = _this27->contacts;
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_Contact old6;
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_Contact ret30;
HXDLIN(5488)									if (hx::IsNull( pre6 )) {
HXLINE(5488)										old6 = _this28->next;
HXDLIN(5488)										ret30 = old6->next;
HXDLIN(5488)										_this28->next = ret30;
HXDLIN(5488)										if (hx::IsNull( _this28->next )) {
HXLINE(5488)											_this28->pushmod = true;
            										}
            									}
            									else {
HXLINE(5488)										old6 = pre6->next;
HXDLIN(5488)										ret30 = old6->next;
HXDLIN(5488)										pre6->next = ret30;
HXDLIN(5488)										if (hx::IsNull( ret30 )) {
HXLINE(5488)											_this28->pushmod = true;
            										}
            									}
HXDLIN(5488)									old6->_inuse = false;
HXDLIN(5488)									_this28->modified = true;
HXDLIN(5488)									_this28->length--;
HXDLIN(5488)									_this28->pushmod = true;
HXDLIN(5488)									cx_ite8 = ret30;
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_IContact _this29 = _this27->innards;
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_IContact old7;
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_IContact ret31;
HXDLIN(5488)									if (hx::IsNull( prei )) {
HXLINE(5488)										old7 = _this29->next;
HXDLIN(5488)										ret31 = old7->next;
HXDLIN(5488)										_this29->next = ret31;
HXDLIN(5488)										if (hx::IsNull( _this29->next )) {
HXLINE(5488)											_this29->pushmod = true;
            										}
            									}
            									else {
HXLINE(5488)										old7 = prei->next;
HXDLIN(5488)										ret31 = old7->next;
HXDLIN(5488)										prei->next = ret31;
HXDLIN(5488)										if (hx::IsNull( ret31 )) {
HXLINE(5488)											_this29->pushmod = true;
            										}
            									}
HXDLIN(5488)									old7->_inuse = false;
HXDLIN(5488)									_this29->modified = true;
HXDLIN(5488)									_this29->length--;
HXDLIN(5488)									_this29->pushmod = true;
HXDLIN(5488)									cx_itei = ret31;
HXDLIN(5488)									{
HXLINE(5488)										 ::zpp_nape::dynamics::ZPP_Contact o16 = c;
HXDLIN(5488)										o16->arbiter = null();
HXDLIN(5488)										o16->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN(5488)										::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o16;
            									}
HXDLIN(5488)									continue;
            								}
HXDLIN(5488)								 ::zpp_nape::dynamics::ZPP_IContact ci = c->inner;
HXDLIN(5488)								bool pact1 = c->active;
HXDLIN(5488)								c->active = (c->stamp == _this27->stamp);
HXDLIN(5488)								if (c->active) {
HXLINE(5488)									if (fst) {
HXLINE(5488)										fst = false;
HXDLIN(5488)										_this27->c1 = ci;
HXDLIN(5488)										_this27->oc1 = c;
            									}
            									else {
HXLINE(5488)										_this27->hc2 = true;
HXDLIN(5488)										_this27->c2 = ci;
HXDLIN(5488)										_this27->oc2 = c;
            									}
HXDLIN(5488)									{
HXLINE(5488)										ci->r2x = (c->px - _this27->b2->posx);
HXDLIN(5488)										ci->r2y = (c->py - _this27->b2->posy);
            									}
HXDLIN(5488)									{
HXLINE(5488)										ci->r1x = (c->px - _this27->b1->posx);
HXDLIN(5488)										ci->r1y = (c->py - _this27->b1->posy);
            									}
HXDLIN(5488)									Float x2 = ((ci->r2x * _this27->nx) + (ci->r2y * _this27->ny));
HXDLIN(5488)									Float kt = (mass_sum + (_this27->b2->sinertia * (x2 * x2)));
HXDLIN(5488)									Float x3 = ((ci->r1x * _this27->nx) + (ci->r1y * _this27->ny));
HXDLIN(5488)									kt = (kt + (_this27->b1->sinertia * (x3 * x3)));
HXDLIN(5488)									Float _hx_tmp25;
HXDLIN(5488)									if ((kt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(5488)										_hx_tmp25 = ( (Float)(0) );
            									}
            									else {
HXLINE(5488)										_hx_tmp25 = (((Float)1.0) / kt);
            									}
HXDLIN(5488)									ci->tMass = _hx_tmp25;
HXDLIN(5488)									Float x4 = ((_this27->ny * ci->r2x) - (_this27->nx * ci->r2y));
HXDLIN(5488)									Float nt = (mass_sum + (_this27->b2->sinertia * (x4 * x4)));
HXDLIN(5488)									Float x5 = ((_this27->ny * ci->r1x) - (_this27->nx * ci->r1y));
HXDLIN(5488)									nt = (nt + (_this27->b1->sinertia * (x5 * x5)));
HXDLIN(5488)									Float _hx_tmp26;
HXDLIN(5488)									if ((nt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(5488)										_hx_tmp26 = ( (Float)(0) );
            									}
            									else {
HXLINE(5488)										_hx_tmp26 = (((Float)1.0) / nt);
            									}
HXDLIN(5488)									ci->nMass = _hx_tmp26;
HXDLIN(5488)									Float vrx = ((Float)0.0);
HXDLIN(5488)									Float vry = ((Float)0.0);
HXDLIN(5488)									{
HXLINE(5488)										Float ang = (_this27->b2->angvel + _this27->b2->kinangvel);
HXDLIN(5488)										vrx = ((_this27->b2->velx + _this27->b2->kinvelx) - (ci->r2y * ang));
HXDLIN(5488)										vry = ((_this27->b2->vely + _this27->b2->kinvely) + (ci->r2x * ang));
HXDLIN(5488)										ang = (_this27->b1->angvel + _this27->b1->kinangvel);
HXDLIN(5488)										vrx = (vrx - ((_this27->b1->velx + _this27->b1->kinvelx) - (ci->r1y * ang)));
HXDLIN(5488)										vry = (vry - ((_this27->b1->vely + _this27->b1->kinvely) + (ci->r1x * ang)));
            									}
HXDLIN(5488)									Float vdot = ((_this27->nx * vrx) + (_this27->ny * vry));
HXDLIN(5488)									c->elasticity = _this27->restitution;
HXDLIN(5488)									ci->bounce = (vdot * c->elasticity);
HXDLIN(5488)									if ((ci->bounce > -(::nape::Config_obj::elasticThreshold))) {
HXLINE(5488)										ci->bounce = ( (Float)(0) );
            									}
HXDLIN(5488)									vdot = ((vry * _this27->nx) - (vrx * _this27->ny));
HXDLIN(5488)									Float thr = ::nape::Config_obj::staticFrictionThreshold;
HXDLIN(5488)									if (((vdot * vdot) > (thr * thr))) {
HXLINE(5488)										ci->friction = _this27->dyn_fric;
            									}
            									else {
HXLINE(5488)										ci->friction = _this27->stat_fric;
            									}
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_IContact ci1 = ci;
HXDLIN(5488)									ci1->jnAcc = (ci1->jnAcc * dtratio);
HXDLIN(5488)									 ::zpp_nape::dynamics::ZPP_IContact ci2 = ci;
HXDLIN(5488)									ci2->jtAcc = (ci2->jtAcc * dtratio);
            								}
HXDLIN(5488)								if ((pact1 != c->active)) {
HXLINE(5488)									_this27->contacts->modified = true;
            								}
HXDLIN(5488)								pre6 = cx_ite8;
HXDLIN(5488)								prei = cx_itei;
HXDLIN(5488)								cx_itei = cx_itei->next;
            							}
HXDLIN(5488)							cx_ite8 = cx_ite8->next;
            						}
            					}
HXDLIN(5488)					if (_this27->hc2) {
HXLINE(5488)						_this27->hpc2 = true;
HXDLIN(5488)						if (_this27->oc1->posOnly) {
HXLINE(5488)							 ::zpp_nape::dynamics::ZPP_IContact tmp = _this27->c1;
HXDLIN(5488)							_this27->c1 = _this27->c2;
HXDLIN(5488)							_this27->c2 = tmp;
HXDLIN(5488)							 ::zpp_nape::dynamics::ZPP_Contact tmp2 = _this27->oc1;
HXDLIN(5488)							_this27->oc1 = _this27->oc2;
HXDLIN(5488)							_this27->oc2 = tmp2;
HXDLIN(5488)							_this27->hc2 = false;
            						}
            						else {
HXLINE(5488)							if (_this27->oc2->posOnly) {
HXLINE(5488)								_this27->hc2 = false;
            							}
            						}
HXDLIN(5488)						if (_this27->oc1->posOnly) {
HXLINE(5488)							fst = true;
            						}
            					}
            					else {
HXLINE(5488)						_this27->hpc2 = false;
            					}
HXDLIN(5488)					 ::zpp_nape::dynamics::ZPP_ColArbiter _this30 = _this27;
HXDLIN(5488)					_this30->jrAcc = (_this30->jrAcc * dtratio);
HXDLIN(5488)					if (!(fst)) {
HXLINE(5488)						_this27->rn1a = ((_this27->ny * _this27->c1->r1x) - (_this27->nx * _this27->c1->r1y));
HXDLIN(5488)						_this27->rt1a = ((_this27->c1->r1x * _this27->nx) + (_this27->c1->r1y * _this27->ny));
HXDLIN(5488)						_this27->rn1b = ((_this27->ny * _this27->c1->r2x) - (_this27->nx * _this27->c1->r2y));
HXDLIN(5488)						_this27->rt1b = ((_this27->c1->r2x * _this27->nx) + (_this27->c1->r2y * _this27->ny));
HXDLIN(5488)						_this27->k1x = ((_this27->b2->kinvelx - (_this27->c1->r2y * _this27->b2->kinangvel)) - (_this27->b1->kinvelx - (_this27->c1->r1y * _this27->b1->kinangvel)));
HXDLIN(5488)						_this27->k1y = ((_this27->b2->kinvely + (_this27->c1->r2x * _this27->b2->kinangvel)) - (_this27->b1->kinvely + (_this27->c1->r1x * _this27->b1->kinangvel)));
            					}
HXDLIN(5488)					if (_this27->hc2) {
HXLINE(5488)						_this27->rn2a = ((_this27->ny * _this27->c2->r1x) - (_this27->nx * _this27->c2->r1y));
HXDLIN(5488)						_this27->rt2a = ((_this27->c2->r1x * _this27->nx) + (_this27->c2->r1y * _this27->ny));
HXDLIN(5488)						_this27->rn2b = ((_this27->ny * _this27->c2->r2x) - (_this27->nx * _this27->c2->r2y));
HXDLIN(5488)						_this27->rt2b = ((_this27->c2->r2x * _this27->nx) + (_this27->c2->r2y * _this27->ny));
HXDLIN(5488)						_this27->k2x = ((_this27->b2->kinvelx - (_this27->c2->r2y * _this27->b2->kinangvel)) - (_this27->b1->kinvelx - (_this27->c2->r1y * _this27->b1->kinangvel)));
HXDLIN(5488)						_this27->k2y = ((_this27->b2->kinvely + (_this27->c2->r2x * _this27->b2->kinangvel)) - (_this27->b1->kinvely + (_this27->c2->r1x * _this27->b1->kinangvel)));
HXDLIN(5488)						{
HXLINE(5488)							_this27->kMassa = ((mass_sum + ((_this27->b1->sinertia * _this27->rn1a) * _this27->rn1a)) + ((_this27->b2->sinertia * _this27->rn1b) * _this27->rn1b));
HXDLIN(5488)							_this27->kMassb = ((mass_sum + ((_this27->b1->sinertia * _this27->rn1a) * _this27->rn2a)) + ((_this27->b2->sinertia * _this27->rn1b) * _this27->rn2b));
HXDLIN(5488)							_this27->kMassc = ((mass_sum + ((_this27->b1->sinertia * _this27->rn2a) * _this27->rn2a)) + ((_this27->b2->sinertia * _this27->rn2b) * _this27->rn2b));
            						}
HXDLIN(5488)						Float norm = (((_this27->kMassa * _this27->kMassa) + ((( (Float)(2) ) * _this27->kMassb) * _this27->kMassb)) + (_this27->kMassc * _this27->kMassc));
HXDLIN(5488)						if ((norm < (::nape::Config_obj::illConditionedThreshold * ((_this27->kMassa * _this27->kMassc) - (_this27->kMassb * _this27->kMassb))))) {
HXLINE(5488)							{
HXLINE(5488)								_this27->Ka = _this27->kMassa;
HXDLIN(5488)								_this27->Kb = _this27->kMassb;
HXDLIN(5488)								_this27->Kc = _this27->kMassc;
            							}
HXDLIN(5488)							{
HXLINE(5488)								Float det = ((_this27->kMassa * _this27->kMassc) - (_this27->kMassb * _this27->kMassb));
HXDLIN(5488)								if ((det != det)) {
HXLINE(5488)									_this27->kMassa = (_this27->kMassb = (_this27->kMassc = ( (Float)(0) )));
            								}
            								else {
HXLINE(5488)									if ((det == 0)) {
HXLINE(5488)										int flag = 0;
HXDLIN(5488)										if ((_this27->kMassa != 0)) {
HXLINE(5488)											_this27->kMassa = (( (Float)(1) ) / _this27->kMassa);
            										}
            										else {
HXLINE(5488)											_this27->kMassa = ( (Float)(0) );
HXDLIN(5488)											flag = (flag | 1);
            										}
HXDLIN(5488)										if ((_this27->kMassc != 0)) {
HXLINE(5488)											_this27->kMassc = (( (Float)(1) ) / _this27->kMassc);
            										}
            										else {
HXLINE(5488)											_this27->kMassc = ( (Float)(0) );
HXDLIN(5488)											flag = (flag | 2);
            										}
HXDLIN(5488)										_this27->kMassb = ( (Float)(0) );
            									}
            									else {
HXLINE(5488)										det = (( (Float)(1) ) / det);
HXDLIN(5488)										Float t = (_this27->kMassc * det);
HXDLIN(5488)										_this27->kMassc = (_this27->kMassa * det);
HXDLIN(5488)										_this27->kMassa = t;
HXDLIN(5488)										 ::zpp_nape::dynamics::ZPP_ColArbiter _this31 = _this27;
HXDLIN(5488)										_this31->kMassb = (_this31->kMassb * -(det));
            									}
            								}
            							}
            						}
            						else {
HXLINE(5488)							_this27->hc2 = false;
HXDLIN(5488)							if ((_this27->oc2->dist < _this27->oc1->dist)) {
HXLINE(5488)								 ::zpp_nape::dynamics::ZPP_IContact t1 = _this27->c1;
HXDLIN(5488)								_this27->c1 = _this27->c2;
HXDLIN(5488)								_this27->c2 = t1;
            							}
HXDLIN(5488)							_this27->oc2->active = false;
HXDLIN(5488)							_this27->contacts->modified = true;
            						}
            					}
HXDLIN(5488)					{
HXLINE(5488)						_this27->surfacex = _this27->b2->svelx;
HXDLIN(5488)						_this27->surfacey = _this27->b2->svely;
            					}
HXDLIN(5488)					{
HXLINE(5488)						Float t2 = ((Float)1.0);
HXDLIN(5488)						 ::zpp_nape::dynamics::ZPP_ColArbiter _this32 = _this27;
HXDLIN(5488)						_this32->surfacex = (_this32->surfacex + (_this27->b1->svelx * t2));
HXDLIN(5488)						 ::zpp_nape::dynamics::ZPP_ColArbiter _this33 = _this27;
HXDLIN(5488)						_this33->surfacey = (_this33->surfacey + (_this27->b1->svely * t2));
            					}
HXDLIN(5488)					{
HXLINE(5488)						_this27->surfacex = -(_this27->surfacex);
HXDLIN(5488)						_this27->surfacey = -(_this27->surfacey);
            					}
HXDLIN(5488)					_this27->rMass = (_this27->b1->sinertia + _this27->b2->sinertia);
HXDLIN(5488)					if ((_this27->rMass != 0)) {
HXLINE(5488)						_this27->rMass = (( (Float)(1) ) / _this27->rMass);
            					}
HXDLIN(5488)					if (fst) {
HXLINE(5489)						arb->active = false;
            					}
            				}
            				else {
HXLINE(5492)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _this34 = arb->fluidarb;
HXDLIN(5492)					if ((_this34->pre_dt == ((Float)-1.0))) {
HXLINE(5492)						_this34->pre_dt = dt;
            					}
HXDLIN(5492)					Float dtratio1 = (dt / _this34->pre_dt);
HXDLIN(5492)					_this34->pre_dt = dt;
HXDLIN(5492)					{
HXLINE(5492)						_this34->r1x = (_this34->centroidx - _this34->b1->posx);
HXDLIN(5492)						_this34->r1y = (_this34->centroidy - _this34->b1->posy);
            					}
HXDLIN(5492)					{
HXLINE(5492)						_this34->r2x = (_this34->centroidx - _this34->b2->posx);
HXDLIN(5492)						_this34->r2y = (_this34->centroidy - _this34->b2->posy);
            					}
HXDLIN(5492)					Float g1x = ((Float)0.0);
HXDLIN(5492)					Float g1y = ((Float)0.0);
HXDLIN(5492)					bool _hx_tmp27;
HXDLIN(5492)					if (_this34->ws1->fluidEnabled) {
HXLINE(5492)						_hx_tmp27 = hx::IsNotNull( _this34->ws1->fluidProperties->wrap_gravity );
            					}
            					else {
HXLINE(5492)						_hx_tmp27 = false;
            					}
HXDLIN(5492)					if (_hx_tmp27) {
HXLINE(5492)						g1x = _this34->ws1->fluidProperties->gravityx;
HXDLIN(5492)						g1y = _this34->ws1->fluidProperties->gravityy;
            					}
            					else {
HXLINE(5492)						g1x = this->gravityx;
HXDLIN(5492)						g1y = this->gravityy;
            					}
HXDLIN(5492)					Float g2x = ((Float)0.0);
HXDLIN(5492)					Float g2y = ((Float)0.0);
HXDLIN(5492)					bool _hx_tmp28;
HXDLIN(5492)					if (_this34->ws2->fluidEnabled) {
HXLINE(5492)						_hx_tmp28 = hx::IsNotNull( _this34->ws2->fluidProperties->wrap_gravity );
            					}
            					else {
HXLINE(5492)						_hx_tmp28 = false;
            					}
HXDLIN(5492)					if (_hx_tmp28) {
HXLINE(5492)						g2x = _this34->ws2->fluidProperties->gravityx;
HXDLIN(5492)						g2y = _this34->ws2->fluidProperties->gravityy;
            					}
            					else {
HXLINE(5492)						g2x = this->gravityx;
HXDLIN(5492)						g2y = this->gravityy;
            					}
HXDLIN(5492)					Float buoyx = ( (Float)(0) );
HXDLIN(5492)					Float buoyy = ( (Float)(0) );
HXDLIN(5492)					bool _hx_tmp29;
HXDLIN(5492)					if (_this34->ws1->fluidEnabled) {
HXLINE(5492)						_hx_tmp29 = _this34->ws2->fluidEnabled;
            					}
            					else {
HXLINE(5492)						_hx_tmp29 = false;
            					}
HXDLIN(5492)					if (_hx_tmp29) {
HXLINE(5492)						Float mass1 = (_this34->overlap * _this34->ws1->fluidProperties->density);
HXDLIN(5492)						Float mass2 = (_this34->overlap * _this34->ws2->fluidProperties->density);
HXDLIN(5492)						if ((mass1 > mass2)) {
HXLINE(5492)							Float t3 = (mass1 + mass2);
HXDLIN(5492)							buoyx = (buoyx - (g1x * t3));
HXDLIN(5492)							buoyy = (buoyy - (g1y * t3));
            						}
            						else {
HXLINE(5492)							if ((mass1 < mass2)) {
HXLINE(5492)								Float t4 = (mass1 + mass2);
HXDLIN(5492)								buoyx = (buoyx + (g2x * t4));
HXDLIN(5492)								buoyy = (buoyy + (g2y * t4));
            							}
            							else {
HXLINE(5492)								Float gx = ((Float)0.0);
HXDLIN(5492)								Float gy = ((Float)0.0);
HXDLIN(5492)								{
HXLINE(5492)									gx = (g1x + g2x);
HXDLIN(5492)									gy = (g1y + g2y);
            								}
HXDLIN(5492)								{
HXLINE(5492)									Float t5 = ((Float)0.5);
HXDLIN(5492)									gx = (gx * t5);
HXDLIN(5492)									gy = (gy * t5);
            								}
HXDLIN(5492)								if ((((_this34->ws1->worldCOMx * gx) + (_this34->ws1->worldCOMy * gy)) > ((_this34->ws2->worldCOMx * gx) + (_this34->ws2->worldCOMy * gy)))) {
HXLINE(5492)									Float t6 = (mass1 + mass2);
HXDLIN(5492)									buoyx = (buoyx - (gx * t6));
HXDLIN(5492)									buoyy = (buoyy - (gy * t6));
            								}
            								else {
HXLINE(5492)									Float t7 = (mass1 + mass2);
HXDLIN(5492)									buoyx = (buoyx + (gx * t7));
HXDLIN(5492)									buoyy = (buoyy + (gy * t7));
            								}
            							}
            						}
            					}
            					else {
HXLINE(5492)						if (_this34->ws1->fluidEnabled) {
HXLINE(5492)							Float mass = (_this34->overlap * _this34->ws1->fluidProperties->density);
HXDLIN(5492)							{
HXLINE(5492)								Float t8 = mass;
HXDLIN(5492)								buoyx = (buoyx - (g1x * t8));
HXDLIN(5492)								buoyy = (buoyy - (g1y * t8));
            							}
            						}
            						else {
HXLINE(5492)							if (_this34->ws2->fluidEnabled) {
HXLINE(5492)								Float mass3 = (_this34->overlap * _this34->ws2->fluidProperties->density);
HXDLIN(5492)								{
HXLINE(5492)									Float t9 = mass3;
HXDLIN(5492)									buoyx = (buoyx + (g2x * t9));
HXDLIN(5492)									buoyy = (buoyy + (g2y * t9));
            								}
            							}
            						}
            					}
HXDLIN(5492)					{
HXLINE(5492)						Float t10 = dt;
HXDLIN(5492)						buoyx = (buoyx * t10);
HXDLIN(5492)						buoyy = (buoyy * t10);
            					}
HXDLIN(5492)					{
HXLINE(5492)						_this34->buoyx = buoyx;
HXDLIN(5492)						_this34->buoyy = buoyy;
            					}
HXDLIN(5492)					if ((_this34->b1->type == 2)) {
HXLINE(5492)						{
HXLINE(5492)							Float t11 = _this34->b1->imass;
HXDLIN(5492)							 ::zpp_nape::phys::ZPP_Body _this35 = _this34->b1;
HXDLIN(5492)							_this35->velx = (_this35->velx - (buoyx * t11));
HXDLIN(5492)							 ::zpp_nape::phys::ZPP_Body _this36 = _this34->b1;
HXDLIN(5492)							_this36->vely = (_this36->vely - (buoyy * t11));
            						}
HXDLIN(5492)						 ::zpp_nape::phys::ZPP_Body _this37 = _this34->b1;
HXDLIN(5492)						_this37->angvel = (_this37->angvel - (((buoyy * _this34->r1x) - (buoyx * _this34->r1y)) * _this34->b1->iinertia));
            					}
HXDLIN(5492)					if ((_this34->b2->type == 2)) {
HXLINE(5492)						{
HXLINE(5492)							Float t12 = _this34->b2->imass;
HXDLIN(5492)							 ::zpp_nape::phys::ZPP_Body _this38 = _this34->b2;
HXDLIN(5492)							_this38->velx = (_this38->velx + (buoyx * t12));
HXDLIN(5492)							 ::zpp_nape::phys::ZPP_Body _this39 = _this34->b2;
HXDLIN(5492)							_this39->vely = (_this39->vely + (buoyy * t12));
            						}
HXDLIN(5492)						 ::zpp_nape::phys::ZPP_Body _this40 = _this34->b2;
HXDLIN(5492)						_this40->angvel = (_this40->angvel + (((buoyy * _this34->r2x) - (buoyx * _this34->r2y)) * _this34->b2->iinertia));
            					}
HXDLIN(5492)					bool _hx_tmp30;
HXDLIN(5492)					bool _hx_tmp31;
HXDLIN(5492)					if (!(!(_this34->ws1->fluidEnabled))) {
HXLINE(5492)						_hx_tmp31 = (_this34->ws1->fluidProperties->viscosity == 0);
            					}
            					else {
HXLINE(5492)						_hx_tmp31 = true;
            					}
HXDLIN(5492)					if (_hx_tmp31) {
HXLINE(5492)						if (!(!(_this34->ws2->fluidEnabled))) {
HXLINE(5492)							_hx_tmp30 = (_this34->ws2->fluidProperties->viscosity == 0);
            						}
            						else {
HXLINE(5492)							_hx_tmp30 = true;
            						}
            					}
            					else {
HXLINE(5492)						_hx_tmp30 = false;
            					}
HXDLIN(5492)					if (_hx_tmp30) {
HXLINE(5492)						_this34->nodrag = true;
HXDLIN(5492)						{
HXLINE(5492)							_this34->dampx = ( (Float)(0) );
HXDLIN(5492)							_this34->dampy = ( (Float)(0) );
            						}
HXDLIN(5492)						_this34->adamp = ( (Float)(0) );
            					}
            					else {
HXLINE(5492)						_this34->nodrag = false;
HXDLIN(5492)						Float tViscosity = ((Float)0.0);
HXDLIN(5492)						if (_this34->ws1->fluidEnabled) {
HXLINE(5492)							_this34->ws2->validate_angDrag();
HXDLIN(5492)							tViscosity = (tViscosity + (((_this34->ws1->fluidProperties->viscosity * _this34->ws2->angDrag) * _this34->overlap) / _this34->ws2->area));
            						}
HXDLIN(5492)						if (_this34->ws2->fluidEnabled) {
HXLINE(5492)							_this34->ws1->validate_angDrag();
HXDLIN(5492)							tViscosity = (tViscosity + (((_this34->ws2->fluidProperties->viscosity * _this34->ws1->angDrag) * _this34->overlap) / _this34->ws1->area));
            						}
HXDLIN(5492)						if ((tViscosity != 0)) {
HXLINE(5492)							Float iSum = (_this34->b1->sinertia + _this34->b2->sinertia);
HXDLIN(5492)							if ((iSum != 0)) {
HXLINE(5492)								_this34->wMass = (( (Float)(1) ) / iSum);
            							}
            							else {
HXLINE(5492)								_this34->wMass = ((Float)0.0);
            							}
HXDLIN(5492)							tViscosity = (tViscosity * ((Float)0.0004));
HXDLIN(5492)							 ::zpp_nape::dynamics::ZPP_FluidArbiter _this41 = _this34;
HXDLIN(5492)							Float omega = ((( (Float)(2) ) * ::Math_obj::PI) * tViscosity);
HXDLIN(5492)							_this34->agamma = (( (Float)(1) ) / ((dt * omega) * (2 + (omega * dt))));
HXDLIN(5492)							Float ig = (( (Float)(1) ) / (1 + _this34->agamma));
HXDLIN(5492)							Float biasCoef = (((dt * omega) * omega) * _this34->agamma);
HXDLIN(5492)							 ::zpp_nape::dynamics::ZPP_FluidArbiter _this42 = _this34;
HXDLIN(5492)							_this42->agamma = (_this42->agamma * ig);
HXDLIN(5492)							_this41->wMass = (_this41->wMass * ig);
            						}
            						else {
HXLINE(5492)							_this34->wMass = ((Float)0.0);
HXDLIN(5492)							_this34->agamma = ((Float)0.0);
            						}
HXDLIN(5492)						Float vrnx = (((_this34->b2->velx + _this34->b2->kinvelx) - (_this34->r2y * (_this34->b2->angvel + _this34->b2->kinangvel))) - ((_this34->b1->velx + _this34->b1->kinvelx) - (_this34->r1y * (_this34->b2->angvel + _this34->b2->kinangvel))));
HXDLIN(5492)						Float vrny = (((_this34->b2->vely + _this34->b2->kinvely) + (_this34->r2x * (_this34->b2->angvel + _this34->b2->kinangvel))) - ((_this34->b1->vely + _this34->b1->kinvely) + (_this34->r1x * (_this34->b1->angvel + _this34->b1->kinangvel))));
HXDLIN(5492)						if (!((((vrnx * vrnx) + (vrny * vrny)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))) {
HXLINE(5492)							{
HXLINE(5492)								Float d = ((vrnx * vrnx) + (vrny * vrny));
HXDLIN(5492)								Float imag = (((Float)1.0) / ::Math_obj::sqrt(d));
HXDLIN(5492)								{
HXLINE(5492)									Float t13 = imag;
HXDLIN(5492)									vrnx = (vrnx * t13);
HXDLIN(5492)									vrny = (vrny * t13);
            								}
            							}
HXDLIN(5492)							{
HXLINE(5492)								_this34->nx = vrnx;
HXDLIN(5492)								_this34->ny = vrny;
            							}
            						}
HXDLIN(5492)						Float tViscosity1 = ((Float)0.0);
HXDLIN(5492)						if (_this34->ws1->fluidEnabled) {
HXLINE(5492)							Float f = ((-(_this34->ws1->fluidProperties->viscosity) * _this34->overlap) / _this34->ws2->area);
HXDLIN(5492)							if ((_this34->ws2->type == 0)) {
HXLINE(5492)								tViscosity1 = (tViscosity1 - (((f * _this34->ws2->circle->radius) * ::nape::Config_obj::fluidLinearDrag) / ((( (Float)(2) ) * _this34->ws2->circle->radius) * ::Math_obj::PI)));
            							}
            							else {
HXLINE(5492)								 ::zpp_nape::shape::ZPP_Polygon poly = _this34->ws2->polygon;
HXDLIN(5492)								Float bord = ((Float)0.0);
HXDLIN(5492)								Float acc = ((Float)0.0);
HXDLIN(5492)								{
HXLINE(5492)									 ::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite9 = poly->edges->head;
HXDLIN(5492)									while(hx::IsNotNull( cx_ite9 )){
HXLINE(5492)										 ::zpp_nape::shape::ZPP_Edge ex = cx_ite9->elt;
HXDLIN(5492)										{
HXLINE(5492)											bord = (bord + ex->length);
HXDLIN(5492)											Float fact = ((f * ex->length) * ((ex->gnormx * _this34->nx) + (ex->gnormy * _this34->ny)));
HXDLIN(5492)											if ((fact > 0)) {
HXLINE(5492)												fact = (fact * -(::nape::Config_obj::fluidVacuumDrag));
HXDLIN(5492)												fact = fact;
            											}
HXDLIN(5492)											acc = (acc - ((fact * ((Float)0.5)) * ::nape::Config_obj::fluidLinearDrag));
            										}
HXDLIN(5492)										cx_ite9 = cx_ite9->next;
            									}
            								}
HXDLIN(5492)								tViscosity1 = (tViscosity1 + (acc / bord));
            							}
            						}
HXDLIN(5492)						if (_this34->ws2->fluidEnabled) {
HXLINE(5492)							Float f1 = ((-(_this34->ws2->fluidProperties->viscosity) * _this34->overlap) / _this34->ws1->area);
HXDLIN(5492)							if ((_this34->ws1->type == 0)) {
HXLINE(5492)								tViscosity1 = (tViscosity1 - (((f1 * _this34->ws1->circle->radius) * ::nape::Config_obj::fluidLinearDrag) / ((( (Float)(2) ) * _this34->ws1->circle->radius) * ::Math_obj::PI)));
            							}
            							else {
HXLINE(5492)								 ::zpp_nape::shape::ZPP_Polygon poly1 = _this34->ws1->polygon;
HXDLIN(5492)								Float bord1 = ((Float)0.0);
HXDLIN(5492)								Float acc1 = ((Float)0.0);
HXDLIN(5492)								{
HXLINE(5492)									 ::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite10 = poly1->edges->head;
HXDLIN(5492)									while(hx::IsNotNull( cx_ite10 )){
HXLINE(5492)										 ::zpp_nape::shape::ZPP_Edge ex1 = cx_ite10->elt;
HXDLIN(5492)										{
HXLINE(5492)											bord1 = (bord1 + ex1->length);
HXDLIN(5492)											Float fact1 = ((f1 * ex1->length) * ((ex1->gnormx * _this34->nx) + (ex1->gnormy * _this34->ny)));
HXDLIN(5492)											if ((fact1 > 0)) {
HXLINE(5492)												fact1 = (fact1 * -(::nape::Config_obj::fluidVacuumDrag));
HXDLIN(5492)												fact1 = fact1;
            											}
HXDLIN(5492)											acc1 = (acc1 - ((fact1 * ((Float)0.5)) * ::nape::Config_obj::fluidLinearDrag));
            										}
HXDLIN(5492)										cx_ite10 = cx_ite10->next;
            									}
            								}
HXDLIN(5492)								tViscosity1 = (tViscosity1 + (acc1 / bord1));
            							}
            						}
HXDLIN(5492)						if ((tViscosity1 != 0)) {
HXLINE(5492)							Float m = (_this34->b1->smass + _this34->b2->smass);
HXDLIN(5492)							Float Ka = ((Float)0.0);
HXDLIN(5492)							Float Kb = ((Float)0.0);
HXDLIN(5492)							Float Kc = ((Float)0.0);
HXDLIN(5492)							{
HXLINE(5492)								Ka = m;
HXDLIN(5492)								Kb = ( (Float)(0) );
HXDLIN(5492)								Kc = m;
            							}
HXDLIN(5492)							if ((_this34->b1->sinertia != 0)) {
HXLINE(5492)								Float X = (_this34->r1x * _this34->b1->sinertia);
HXDLIN(5492)								Float Y = (_this34->r1y * _this34->b1->sinertia);
HXDLIN(5492)								{
HXLINE(5492)									Ka = (Ka + (Y * _this34->r1y));
HXDLIN(5492)									Kb = (Kb + (-(Y) * _this34->r1x));
HXDLIN(5492)									Kc = (Kc + (X * _this34->r1x));
            								}
            							}
HXDLIN(5492)							if ((_this34->b2->sinertia != 0)) {
HXLINE(5492)								Float X1 = (_this34->r2x * _this34->b2->sinertia);
HXDLIN(5492)								Float Y1 = (_this34->r2y * _this34->b2->sinertia);
HXDLIN(5492)								{
HXLINE(5492)									Ka = (Ka + (Y1 * _this34->r2y));
HXDLIN(5492)									Kb = (Kb + (-(Y1) * _this34->r2x));
HXDLIN(5492)									Kc = (Kc + (X1 * _this34->r2x));
            								}
            							}
HXDLIN(5492)							{
HXLINE(5492)								Float det1 = ((Ka * Kc) - (Kb * Kb));
HXDLIN(5492)								if ((det1 != det1)) {
HXLINE(5492)									Kc = ( (Float)(0) );
HXDLIN(5492)									Kb = Kc;
HXDLIN(5492)									Ka = Kb;
            								}
            								else {
HXLINE(5492)									if ((det1 == 0)) {
HXLINE(5492)										int flag1 = 0;
HXDLIN(5492)										if ((Ka != 0)) {
HXLINE(5492)											Ka = (( (Float)(1) ) / Ka);
            										}
            										else {
HXLINE(5492)											Ka = ( (Float)(0) );
HXDLIN(5492)											flag1 = (flag1 | 1);
            										}
HXDLIN(5492)										if ((Kc != 0)) {
HXLINE(5492)											Kc = (( (Float)(1) ) / Kc);
            										}
            										else {
HXLINE(5492)											Kc = ( (Float)(0) );
HXDLIN(5492)											flag1 = (flag1 | 2);
            										}
HXDLIN(5492)										Kb = ( (Float)(0) );
            									}
            									else {
HXLINE(5492)										det1 = (( (Float)(1) ) / det1);
HXDLIN(5492)										Float t14 = (Kc * det1);
HXDLIN(5492)										Kc = (Ka * det1);
HXDLIN(5492)										Ka = t14;
HXDLIN(5492)										Kb = (Kb * -(det1));
            									}
            								}
            							}
HXDLIN(5492)							{
HXLINE(5492)								_this34->vMassa = Ka;
HXDLIN(5492)								_this34->vMassb = Kb;
HXDLIN(5492)								_this34->vMassc = Kc;
            							}
HXDLIN(5492)							Float biasCoef1;
HXDLIN(5492)							{
HXLINE(5492)								Float omega1 = ((( (Float)(2) ) * ::Math_obj::PI) * tViscosity1);
HXDLIN(5492)								_this34->lgamma = (( (Float)(1) ) / ((dt * omega1) * (2 + (omega1 * dt))));
HXDLIN(5492)								Float ig1 = (( (Float)(1) ) / (1 + _this34->lgamma));
HXDLIN(5492)								biasCoef1 = (((dt * omega1) * omega1) * _this34->lgamma);
HXDLIN(5492)								 ::zpp_nape::dynamics::ZPP_FluidArbiter _this43 = _this34;
HXDLIN(5492)								_this43->lgamma = (_this43->lgamma * ig1);
HXDLIN(5492)								Float X2 = ig1;
HXDLIN(5492)								 ::zpp_nape::dynamics::ZPP_FluidArbiter _this44 = _this34;
HXDLIN(5492)								_this44->vMassa = (_this44->vMassa * X2);
HXDLIN(5492)								 ::zpp_nape::dynamics::ZPP_FluidArbiter _this45 = _this34;
HXDLIN(5492)								_this45->vMassb = (_this45->vMassb * X2);
HXDLIN(5492)								 ::zpp_nape::dynamics::ZPP_FluidArbiter _this46 = _this34;
HXDLIN(5492)								_this46->vMassc = (_this46->vMassc * X2);
            							}
            						}
            						else {
HXLINE(5492)							{
HXLINE(5492)								_this34->vMassa = ( (Float)(0) );
HXDLIN(5492)								_this34->vMassb = ( (Float)(0) );
HXDLIN(5492)								_this34->vMassc = ( (Float)(0) );
            							}
HXDLIN(5492)							_this34->lgamma = ((Float)0.0);
            						}
            					}
HXDLIN(5492)					{
HXLINE(5492)						Float t15 = dtratio1;
HXDLIN(5492)						 ::zpp_nape::dynamics::ZPP_FluidArbiter _this47 = _this34;
HXDLIN(5492)						_this47->dampx = (_this47->dampx * t15);
HXDLIN(5492)						 ::zpp_nape::dynamics::ZPP_FluidArbiter _this48 = _this34;
HXDLIN(5492)						_this48->dampy = (_this48->dampy * t15);
            					}
HXDLIN(5492)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _this49 = _this34;
HXDLIN(5492)					_this49->adamp = (_this49->adamp * dtratio1);
            				}
            			}
            		}
            		else {
HXLINE(5495)			if (hx::IsNotNull( arb->colarb )) {
HXLINE(5496)				 ::zpp_nape::dynamics::ZPP_ColArbiter _this50 = arb->colarb;
HXDLIN(5496)				bool fst1 = true;
HXDLIN(5496)				 ::zpp_nape::dynamics::ZPP_Contact pre7 = null();
HXDLIN(5496)				 ::zpp_nape::dynamics::ZPP_IContact prei1 = null();
HXDLIN(5496)				 ::zpp_nape::dynamics::ZPP_IContact cx_itei1 = _this50->innards->next;
HXDLIN(5496)				_this50->hc2 = false;
HXDLIN(5496)				{
HXLINE(5496)					 ::zpp_nape::dynamics::ZPP_Contact cx_ite11 = _this50->contacts->next;
HXDLIN(5496)					while(hx::IsNotNull( cx_ite11 )){
HXLINE(5496)						 ::zpp_nape::dynamics::ZPP_Contact c3 = cx_ite11;
HXDLIN(5496)						{
HXLINE(5496)							if (((c3->stamp + ::nape::Config_obj::arbiterExpirationDelay) < _this50->stamp)) {
HXLINE(5496)								 ::zpp_nape::dynamics::ZPP_Contact _this51 = _this50->contacts;
HXDLIN(5496)								 ::zpp_nape::dynamics::ZPP_Contact old8;
HXDLIN(5496)								 ::zpp_nape::dynamics::ZPP_Contact ret32;
HXDLIN(5496)								if (hx::IsNull( pre7 )) {
HXLINE(5496)									old8 = _this51->next;
HXDLIN(5496)									ret32 = old8->next;
HXDLIN(5496)									_this51->next = ret32;
HXDLIN(5496)									if (hx::IsNull( _this51->next )) {
HXLINE(5496)										_this51->pushmod = true;
            									}
            								}
            								else {
HXLINE(5496)									old8 = pre7->next;
HXDLIN(5496)									ret32 = old8->next;
HXDLIN(5496)									pre7->next = ret32;
HXDLIN(5496)									if (hx::IsNull( ret32 )) {
HXLINE(5496)										_this51->pushmod = true;
            									}
            								}
HXDLIN(5496)								old8->_inuse = false;
HXDLIN(5496)								_this51->modified = true;
HXDLIN(5496)								_this51->length--;
HXDLIN(5496)								_this51->pushmod = true;
HXDLIN(5496)								cx_ite11 = ret32;
HXDLIN(5496)								 ::zpp_nape::dynamics::ZPP_IContact _this52 = _this50->innards;
HXDLIN(5496)								 ::zpp_nape::dynamics::ZPP_IContact old9;
HXDLIN(5496)								 ::zpp_nape::dynamics::ZPP_IContact ret33;
HXDLIN(5496)								if (hx::IsNull( prei1 )) {
HXLINE(5496)									old9 = _this52->next;
HXDLIN(5496)									ret33 = old9->next;
HXDLIN(5496)									_this52->next = ret33;
HXDLIN(5496)									if (hx::IsNull( _this52->next )) {
HXLINE(5496)										_this52->pushmod = true;
            									}
            								}
            								else {
HXLINE(5496)									old9 = prei1->next;
HXDLIN(5496)									ret33 = old9->next;
HXDLIN(5496)									prei1->next = ret33;
HXDLIN(5496)									if (hx::IsNull( ret33 )) {
HXLINE(5496)										_this52->pushmod = true;
            									}
            								}
HXDLIN(5496)								old9->_inuse = false;
HXDLIN(5496)								_this52->modified = true;
HXDLIN(5496)								_this52->length--;
HXDLIN(5496)								_this52->pushmod = true;
HXDLIN(5496)								cx_itei1 = ret33;
HXDLIN(5496)								{
HXLINE(5496)									 ::zpp_nape::dynamics::ZPP_Contact o17 = c3;
HXDLIN(5496)									o17->arbiter = null();
HXDLIN(5496)									o17->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN(5496)									::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o17;
            								}
HXDLIN(5496)								continue;
            							}
HXDLIN(5496)							 ::zpp_nape::dynamics::ZPP_IContact ci3 = c3->inner;
HXDLIN(5496)							bool pact2 = c3->active;
HXDLIN(5496)							c3->active = (c3->stamp == _this50->stamp);
HXDLIN(5496)							if (c3->active) {
HXLINE(5496)								if (fst1) {
HXLINE(5496)									fst1 = false;
HXDLIN(5496)									_this50->c1 = ci3;
HXDLIN(5496)									_this50->oc1 = c3;
            								}
            								else {
HXLINE(5496)									_this50->hc2 = true;
HXDLIN(5496)									_this50->c2 = ci3;
HXDLIN(5496)									_this50->oc2 = c3;
            								}
            							}
HXDLIN(5496)							if ((pact2 != c3->active)) {
HXLINE(5496)								_this50->contacts->modified = true;
            							}
HXDLIN(5496)							pre7 = cx_ite11;
HXDLIN(5496)							prei1 = cx_itei1;
HXDLIN(5496)							cx_itei1 = cx_itei1->next;
            						}
HXDLIN(5496)						cx_ite11 = cx_ite11->next;
            					}
            				}
HXDLIN(5496)				if (_this50->hc2) {
HXLINE(5496)					_this50->hpc2 = true;
HXDLIN(5496)					if (_this50->oc1->posOnly) {
HXLINE(5496)						 ::zpp_nape::dynamics::ZPP_IContact tmp1 = _this50->c1;
HXDLIN(5496)						_this50->c1 = _this50->c2;
HXDLIN(5496)						_this50->c2 = tmp1;
HXDLIN(5496)						 ::zpp_nape::dynamics::ZPP_Contact tmp21 = _this50->oc1;
HXDLIN(5496)						_this50->oc1 = _this50->oc2;
HXDLIN(5496)						_this50->oc2 = tmp21;
HXDLIN(5496)						_this50->hc2 = false;
            					}
            					else {
HXLINE(5496)						if (_this50->oc2->posOnly) {
HXLINE(5496)							_this50->hc2 = false;
            						}
            					}
HXDLIN(5496)					if (_this50->oc1->posOnly) {
HXLINE(5496)						fst1 = true;
            					}
            				}
            				else {
HXLINE(5496)					_this50->hpc2 = false;
            				}
HXDLIN(5496)				if (fst1) {
HXLINE(5496)					arb->active = false;
            				}
            			}
            		}
HXLINE(5498)		if ((pact != arb->active)) {
HXLINE(5499)			arb->b1->arbiters->modified = true;
HXLINE(5500)			arb->b2->arbiters->modified = true;
HXLINE(5501)			this->c_arbiters_true->modified = (this->c_arbiters_false->modified = true);
HXLINE(5502)			this->s_arbiters->modified = (this->f_arbiters->modified = true);
            		}
HXLINE(5504)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,presteparb,return )

void ZPP_Space_obj::prestep(Float dt){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5506_prestep)
HXLINE(5507)		 ::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();
HXLINE(5508)		{
HXLINE(5509)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;
HXLINE(5510)			while(hx::IsNotNull( cx_ite )){
HXLINE(5511)				 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXLINE(5512)				{
HXLINE(5513)					if (con->preStep(dt)) {
HXLINE(5514)						cx_ite = this->live_constraints->erase(pre);
HXLINE(5515)						con->broken();
HXLINE(5516)						this->constraintCbBreak(con);
HXLINE(5517)						if (con->removeOnBreak) {
HXLINE(5518)							con->component->sleeping = true;
HXLINE(5519)							this->midstep = false;
HXLINE(5520)							if (hx::IsNotNull( con->compound )) {
HXLINE(5520)								con->compound->wrap_constraints->remove(con->outer);
            							}
            							else {
HXLINE(5521)								this->wrap_constraints->remove(con->outer);
            							}
HXLINE(5522)							this->midstep = true;
            						}
            						else {
HXLINE(5524)							con->active = false;
            						}
HXLINE(5525)						con->clearcache();
HXLINE(5526)						continue;
            					}
HXLINE(5528)					pre = cx_ite;
            				}
HXLINE(5530)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(5533)		{
HXLINE(5534)			 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre1 = null();
HXLINE(5535)			 ::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = this->c_arbiters_true;
HXLINE(5536)			 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;
HXLINE(5537)			bool fst = hx::IsNotNull( this->c_arbiters_false );
HXLINE(5539)			bool _hx_tmp;
HXDLIN(5539)			if (fst) {
HXLINE(5539)				_hx_tmp = hx::IsNull( arbite );
            			}
            			else {
HXLINE(5539)				_hx_tmp = false;
            			}
HXDLIN(5539)			if (_hx_tmp) {
HXLINE(5540)				fst = false;
HXLINE(5541)				arbite = this->c_arbiters_false->head;
HXLINE(5542)				arbs = this->c_arbiters_false;
HXLINE(5543)				pre1 = null();
            			}
HXLINE(5546)			while(hx::IsNotNull( arbite )){
HXLINE(5547)				 ::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;
HXLINE(5548)				if (this->presteparb(arb,dt,null())) {
HXLINE(5549)					 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;
HXDLIN(5549)					 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;
HXDLIN(5549)					if (hx::IsNull( pre1 )) {
HXLINE(5549)						old = arbs->head;
HXDLIN(5549)						ret = old->next;
HXDLIN(5549)						arbs->head = ret;
HXDLIN(5549)						if (hx::IsNull( arbs->head )) {
HXLINE(5549)							arbs->pushmod = true;
            						}
            					}
            					else {
HXLINE(5549)						old = pre1->next;
HXDLIN(5549)						ret = old->next;
HXDLIN(5549)						pre1->next = ret;
HXDLIN(5549)						if (hx::IsNull( ret )) {
HXLINE(5549)							arbs->pushmod = true;
            						}
            					}
HXDLIN(5549)					{
HXLINE(5549)						 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;
HXDLIN(5549)						o->elt = null();
HXDLIN(5549)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(5549)						::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            					}
HXDLIN(5549)					arbs->modified = true;
HXDLIN(5549)					arbs->length--;
HXDLIN(5549)					arbs->pushmod = true;
HXDLIN(5549)					arbite = ret;
HXLINE(5551)					bool _hx_tmp1;
HXDLIN(5551)					if (fst) {
HXLINE(5551)						_hx_tmp1 = hx::IsNull( arbite );
            					}
            					else {
HXLINE(5551)						_hx_tmp1 = false;
            					}
HXDLIN(5551)					if (_hx_tmp1) {
HXLINE(5552)						fst = false;
HXLINE(5553)						arbite = this->c_arbiters_false->head;
HXLINE(5554)						arbs = this->c_arbiters_false;
HXLINE(5555)						pre1 = null();
            					}
HXLINE(5558)					continue;
            				}
HXLINE(5560)				pre1 = arbite;
HXLINE(5561)				arbite = arbite->next;
HXLINE(5563)				bool _hx_tmp2;
HXDLIN(5563)				if (fst) {
HXLINE(5563)					_hx_tmp2 = hx::IsNull( arbite );
            				}
            				else {
HXLINE(5563)					_hx_tmp2 = false;
            				}
HXDLIN(5563)				if (_hx_tmp2) {
HXLINE(5564)					fst = false;
HXLINE(5565)					arbite = this->c_arbiters_false->head;
HXLINE(5566)					arbs = this->c_arbiters_false;
HXLINE(5567)					pre1 = null();
            				}
            			}
            		}
HXLINE(5572)		{
HXLINE(5573)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre2 = null();
HXLINE(5574)			 ::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs1 = this->f_arbiters;
HXLINE(5575)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite1 = arbs1->head;
HXLINE(5576)			bool fst1 = false;
HXLINE(5578)			bool _hx_tmp3;
HXDLIN(5578)			if (fst1) {
HXLINE(5578)				_hx_tmp3 = hx::IsNull( arbite1 );
            			}
            			else {
HXLINE(5578)				_hx_tmp3 = false;
            			}
HXDLIN(5578)			if (_hx_tmp3) {
HXLINE(5579)				fst1 = false;
HXLINE(5581)				arbs1 = null();
HXLINE(5582)				pre2 = null();
            			}
HXLINE(5585)			while(hx::IsNotNull( arbite1 )){
HXLINE(5586)				 ::zpp_nape::dynamics::ZPP_FluidArbiter arb1 = arbite1->elt;
HXLINE(5587)				if (this->presteparb(arb1,dt,null())) {
HXLINE(5588)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old1;
HXDLIN(5588)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;
HXDLIN(5588)					if (hx::IsNull( pre2 )) {
HXLINE(5588)						old1 = arbs1->head;
HXDLIN(5588)						ret1 = old1->next;
HXDLIN(5588)						arbs1->head = ret1;
HXDLIN(5588)						if (hx::IsNull( arbs1->head )) {
HXLINE(5588)							arbs1->pushmod = true;
            						}
            					}
            					else {
HXLINE(5588)						old1 = pre2->next;
HXDLIN(5588)						ret1 = old1->next;
HXDLIN(5588)						pre2->next = ret1;
HXDLIN(5588)						if (hx::IsNull( ret1 )) {
HXLINE(5588)							arbs1->pushmod = true;
            						}
            					}
HXDLIN(5588)					{
HXLINE(5588)						 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o1 = old1;
HXDLIN(5588)						o1->elt = null();
HXDLIN(5588)						o1->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(5588)						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o1;
            					}
HXDLIN(5588)					arbs1->modified = true;
HXDLIN(5588)					arbs1->length--;
HXDLIN(5588)					arbs1->pushmod = true;
HXDLIN(5588)					arbite1 = ret1;
HXLINE(5590)					bool _hx_tmp4;
HXDLIN(5590)					if (fst1) {
HXLINE(5590)						_hx_tmp4 = hx::IsNull( arbite1 );
            					}
            					else {
HXLINE(5590)						_hx_tmp4 = false;
            					}
HXDLIN(5590)					if (_hx_tmp4) {
HXLINE(5591)						fst1 = false;
HXLINE(5593)						arbs1 = null();
HXLINE(5594)						pre2 = null();
            					}
HXLINE(5597)					continue;
            				}
HXLINE(5599)				pre2 = arbite1;
HXLINE(5600)				arbite1 = arbite1->next;
HXLINE(5602)				bool _hx_tmp5;
HXDLIN(5602)				if (fst1) {
HXLINE(5602)					_hx_tmp5 = hx::IsNull( arbite1 );
            				}
            				else {
HXLINE(5602)					_hx_tmp5 = false;
            				}
HXDLIN(5602)				if (_hx_tmp5) {
HXLINE(5603)					fst1 = false;
HXLINE(5605)					arbs1 = null();
HXLINE(5606)					pre2 = null();
            				}
            			}
            		}
HXLINE(5611)		{
HXLINE(5612)			 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre3 = null();
HXLINE(5613)			 ::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs2 = this->s_arbiters;
HXLINE(5614)			 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite2 = arbs2->head;
HXLINE(5615)			bool fst2 = false;
HXLINE(5617)			bool _hx_tmp6;
HXDLIN(5617)			if (fst2) {
HXLINE(5617)				_hx_tmp6 = hx::IsNull( arbite2 );
            			}
            			else {
HXLINE(5617)				_hx_tmp6 = false;
            			}
HXDLIN(5617)			if (_hx_tmp6) {
HXLINE(5618)				fst2 = false;
HXLINE(5620)				arbs2 = null();
HXLINE(5621)				pre3 = null();
            			}
HXLINE(5624)			while(hx::IsNotNull( arbite2 )){
HXLINE(5625)				 ::zpp_nape::dynamics::ZPP_SensorArbiter arb2 = arbite2->elt;
HXLINE(5626)				if (this->presteparb(arb2,dt,null())) {
HXLINE(5627)					 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old2;
HXDLIN(5627)					 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret2;
HXDLIN(5627)					if (hx::IsNull( pre3 )) {
HXLINE(5627)						old2 = arbs2->head;
HXDLIN(5627)						ret2 = old2->next;
HXDLIN(5627)						arbs2->head = ret2;
HXDLIN(5627)						if (hx::IsNull( arbs2->head )) {
HXLINE(5627)							arbs2->pushmod = true;
            						}
            					}
            					else {
HXLINE(5627)						old2 = pre3->next;
HXDLIN(5627)						ret2 = old2->next;
HXDLIN(5627)						pre3->next = ret2;
HXDLIN(5627)						if (hx::IsNull( ret2 )) {
HXLINE(5627)							arbs2->pushmod = true;
            						}
            					}
HXDLIN(5627)					{
HXLINE(5627)						 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o2 = old2;
HXDLIN(5627)						o2->elt = null();
HXDLIN(5627)						o2->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(5627)						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o2;
            					}
HXDLIN(5627)					arbs2->modified = true;
HXDLIN(5627)					arbs2->length--;
HXDLIN(5627)					arbs2->pushmod = true;
HXDLIN(5627)					arbite2 = ret2;
HXLINE(5629)					bool _hx_tmp7;
HXDLIN(5629)					if (fst2) {
HXLINE(5629)						_hx_tmp7 = hx::IsNull( arbite2 );
            					}
            					else {
HXLINE(5629)						_hx_tmp7 = false;
            					}
HXDLIN(5629)					if (_hx_tmp7) {
HXLINE(5630)						fst2 = false;
HXLINE(5632)						arbs2 = null();
HXLINE(5633)						pre3 = null();
            					}
HXLINE(5636)					continue;
            				}
HXLINE(5638)				pre3 = arbite2;
HXLINE(5639)				arbite2 = arbite2->next;
HXLINE(5641)				bool _hx_tmp8;
HXDLIN(5641)				if (fst2) {
HXLINE(5641)					_hx_tmp8 = hx::IsNull( arbite2 );
            				}
            				else {
HXLINE(5641)					_hx_tmp8 = false;
            				}
HXDLIN(5641)				if (_hx_tmp8) {
HXLINE(5642)					fst2 = false;
HXLINE(5644)					arbs2 = null();
HXLINE(5645)					pre3 = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prestep,(void))

void ZPP_Space_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5651_warmStart)
HXLINE(5652)		{
HXLINE(5653)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;
HXLINE(5654)			while(hx::IsNotNull( cx_ite )){
HXLINE(5655)				 ::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;
HXLINE(5656)				bool _hx_tmp;
HXDLIN(5656)				if (arb->active) {
HXLINE(5656)					_hx_tmp = ((arb->immState & 1) != 0);
            				}
            				else {
HXLINE(5656)					_hx_tmp = false;
            				}
HXDLIN(5656)				if (_hx_tmp) {
HXLINE(5656)					{
HXLINE(5656)						Float t = arb->b1->imass;
HXDLIN(5656)						 ::zpp_nape::phys::ZPP_Body arb1 = arb->b1;
HXDLIN(5656)						arb1->velx = (arb1->velx - (arb->dampx * t));
HXDLIN(5656)						 ::zpp_nape::phys::ZPP_Body arb2 = arb->b1;
HXDLIN(5656)						arb2->vely = (arb2->vely - (arb->dampy * t));
            					}
HXDLIN(5656)					{
HXLINE(5656)						Float t1 = arb->b2->imass;
HXDLIN(5656)						 ::zpp_nape::phys::ZPP_Body arb3 = arb->b2;
HXDLIN(5656)						arb3->velx = (arb3->velx + (arb->dampx * t1));
HXDLIN(5656)						 ::zpp_nape::phys::ZPP_Body arb4 = arb->b2;
HXDLIN(5656)						arb4->vely = (arb4->vely + (arb->dampy * t1));
            					}
HXDLIN(5656)					 ::zpp_nape::phys::ZPP_Body arb5 = arb->b1;
HXDLIN(5656)					arb5->angvel = (arb5->angvel - (arb->b1->iinertia * ((arb->dampy * arb->r1x) - (arb->dampx * arb->r1y))));
HXDLIN(5656)					 ::zpp_nape::phys::ZPP_Body arb6 = arb->b2;
HXDLIN(5656)					arb6->angvel = (arb6->angvel + (arb->b2->iinertia * ((arb->dampy * arb->r2x) - (arb->dampx * arb->r2y))));
HXDLIN(5656)					 ::zpp_nape::phys::ZPP_Body arb7 = arb->b1;
HXDLIN(5656)					arb7->angvel = (arb7->angvel - (arb->adamp * arb->b1->iinertia));
HXDLIN(5656)					 ::zpp_nape::phys::ZPP_Body arb8 = arb->b2;
HXDLIN(5656)					arb8->angvel = (arb8->angvel + (arb->adamp * arb->b2->iinertia));
            				}
HXLINE(5657)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(5660)		{
HXLINE(5661)			 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;
HXLINE(5662)			bool fst = true;
HXLINE(5663)			if (hx::IsNull( arbi )) {
HXLINE(5664)				arbi = this->c_arbiters_true->head;
HXLINE(5665)				fst = false;
            			}
HXLINE(5667)			while(hx::IsNotNull( arbi )){
HXLINE(5668)				 ::zpp_nape::dynamics::ZPP_ColArbiter arb9 = arbi->elt;
HXLINE(5670)				bool _hx_tmp1;
HXDLIN(5670)				if (arb9->active) {
HXLINE(5670)					_hx_tmp1 = ((arb9->immState & 1) != 0);
            				}
            				else {
HXLINE(5670)					_hx_tmp1 = false;
            				}
HXDLIN(5670)				if (_hx_tmp1) {
HXLINE(5670)					{
HXLINE(5670)						Float jx = ((arb9->nx * arb9->c1->jnAcc) - (arb9->ny * arb9->c1->jtAcc));
HXDLIN(5670)						Float jy = ((arb9->ny * arb9->c1->jnAcc) + (arb9->nx * arb9->c1->jtAcc));
HXDLIN(5670)						{
HXLINE(5670)							Float t2 = arb9->b1->imass;
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb10 = arb9->b1;
HXDLIN(5670)							arb10->velx = (arb10->velx - (jx * t2));
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb11 = arb9->b1;
HXDLIN(5670)							arb11->vely = (arb11->vely - (jy * t2));
            						}
HXDLIN(5670)						 ::zpp_nape::phys::ZPP_Body arb12 = arb9->b1;
HXDLIN(5670)						arb12->angvel = (arb12->angvel - (arb9->b1->iinertia * ((jy * arb9->c1->r1x) - (jx * arb9->c1->r1y))));
HXDLIN(5670)						{
HXLINE(5670)							Float t3 = arb9->b2->imass;
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb13 = arb9->b2;
HXDLIN(5670)							arb13->velx = (arb13->velx + (jx * t3));
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb14 = arb9->b2;
HXDLIN(5670)							arb14->vely = (arb14->vely + (jy * t3));
            						}
HXDLIN(5670)						 ::zpp_nape::phys::ZPP_Body arb15 = arb9->b2;
HXDLIN(5670)						arb15->angvel = (arb15->angvel + (arb9->b2->iinertia * ((jy * arb9->c1->r2x) - (jx * arb9->c1->r2y))));
            					}
HXDLIN(5670)					if (arb9->hc2) {
HXLINE(5670)						Float jx1 = ((arb9->nx * arb9->c2->jnAcc) - (arb9->ny * arb9->c2->jtAcc));
HXDLIN(5670)						Float jy1 = ((arb9->ny * arb9->c2->jnAcc) + (arb9->nx * arb9->c2->jtAcc));
HXDLIN(5670)						{
HXLINE(5670)							Float t4 = arb9->b1->imass;
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb16 = arb9->b1;
HXDLIN(5670)							arb16->velx = (arb16->velx - (jx1 * t4));
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb17 = arb9->b1;
HXDLIN(5670)							arb17->vely = (arb17->vely - (jy1 * t4));
            						}
HXDLIN(5670)						 ::zpp_nape::phys::ZPP_Body arb18 = arb9->b1;
HXDLIN(5670)						arb18->angvel = (arb18->angvel - (arb9->b1->iinertia * ((jy1 * arb9->c2->r1x) - (jx1 * arb9->c2->r1y))));
HXDLIN(5670)						{
HXLINE(5670)							Float t5 = arb9->b2->imass;
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb19 = arb9->b2;
HXDLIN(5670)							arb19->velx = (arb19->velx + (jx1 * t5));
HXDLIN(5670)							 ::zpp_nape::phys::ZPP_Body arb20 = arb9->b2;
HXDLIN(5670)							arb20->vely = (arb20->vely + (jy1 * t5));
            						}
HXDLIN(5670)						 ::zpp_nape::phys::ZPP_Body arb21 = arb9->b2;
HXDLIN(5670)						arb21->angvel = (arb21->angvel + (arb9->b2->iinertia * ((jy1 * arb9->c2->r2x) - (jx1 * arb9->c2->r2y))));
            					}
HXDLIN(5670)					 ::zpp_nape::phys::ZPP_Body arb22 = arb9->b2;
HXDLIN(5670)					arb22->angvel = (arb22->angvel + (arb9->jrAcc * arb9->b2->iinertia));
HXDLIN(5670)					 ::zpp_nape::phys::ZPP_Body arb23 = arb9->b1;
HXDLIN(5670)					arb23->angvel = (arb23->angvel - (arb9->jrAcc * arb9->b1->iinertia));
            				}
HXLINE(5672)				arbi = arbi->next;
HXLINE(5673)				bool _hx_tmp2;
HXDLIN(5673)				if (fst) {
HXLINE(5673)					_hx_tmp2 = hx::IsNull( arbi );
            				}
            				else {
HXLINE(5673)					_hx_tmp2 = false;
            				}
HXDLIN(5673)				if (_hx_tmp2) {
HXLINE(5674)					arbi = this->c_arbiters_true->head;
HXLINE(5675)					fst = false;
            				}
            			}
            		}
HXLINE(5679)		{
HXLINE(5680)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite1 = this->live_constraints->head;
HXLINE(5681)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(5682)				 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite1->elt;
HXLINE(5683)				con->warmStart();
HXLINE(5684)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,warmStart,(void))

void ZPP_Space_obj::iterateVel(int times){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5689_iterateVel)
HXDLIN(5689)		int _g = 0;
HXDLIN(5689)		int _g1 = times;
HXDLIN(5689)		while((_g < _g1)){
HXDLIN(5689)			_g = (_g + 1);
HXDLIN(5689)			int i = (_g - 1);
HXLINE(5690)			{
HXLINE(5691)				 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;
HXLINE(5692)				while(hx::IsNotNull( cx_ite )){
HXLINE(5693)					 ::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;
HXLINE(5694)					bool _hx_tmp;
HXDLIN(5694)					if (arb->active) {
HXLINE(5694)						_hx_tmp = ((arb->immState & 1) != 0);
            					}
            					else {
HXLINE(5694)						_hx_tmp = false;
            					}
HXDLIN(5694)					if (_hx_tmp) {
HXLINE(5694)						if (!(arb->nodrag)) {
HXLINE(5694)							Float w1 = (arb->b1->angvel + arb->b1->kinangvel);
HXDLIN(5694)							Float w2 = (arb->b2->angvel + arb->b2->kinangvel);
HXDLIN(5694)							Float jx = (((arb->b1->velx + arb->b1->kinvelx) - (arb->r1y * w1)) - ((arb->b2->velx + arb->b2->kinvelx) - (arb->r2y * w2)));
HXDLIN(5694)							Float jy = (((arb->b1->vely + arb->b1->kinvely) + (arb->r1x * w1)) - ((arb->b2->vely + arb->b2->kinvely) + (arb->r2x * w2)));
HXDLIN(5694)							{
HXLINE(5694)								Float t = ((arb->vMassa * jx) + (arb->vMassb * jy));
HXDLIN(5694)								jy = ((arb->vMassb * jx) + (arb->vMassc * jy));
HXDLIN(5694)								jx = t;
            							}
HXDLIN(5694)							{
HXLINE(5694)								Float t1 = arb->lgamma;
HXDLIN(5694)								jx = (jx - (arb->dampx * t1));
HXDLIN(5694)								jy = (jy - (arb->dampy * t1));
            							}
HXDLIN(5694)							{
HXLINE(5694)								Float t2 = ((Float)1.0);
HXDLIN(5694)								 ::zpp_nape::dynamics::ZPP_FluidArbiter arb1 = arb;
HXDLIN(5694)								arb1->dampx = (arb1->dampx + (jx * t2));
HXDLIN(5694)								 ::zpp_nape::dynamics::ZPP_FluidArbiter arb2 = arb;
HXDLIN(5694)								arb2->dampy = (arb2->dampy + (jy * t2));
            							}
HXDLIN(5694)							{
HXLINE(5694)								Float t3 = arb->b1->imass;
HXDLIN(5694)								 ::zpp_nape::phys::ZPP_Body arb3 = arb->b1;
HXDLIN(5694)								arb3->velx = (arb3->velx - (jx * t3));
HXDLIN(5694)								 ::zpp_nape::phys::ZPP_Body arb4 = arb->b1;
HXDLIN(5694)								arb4->vely = (arb4->vely - (jy * t3));
            							}
HXDLIN(5694)							{
HXLINE(5694)								Float t4 = arb->b2->imass;
HXDLIN(5694)								 ::zpp_nape::phys::ZPP_Body arb5 = arb->b2;
HXDLIN(5694)								arb5->velx = (arb5->velx + (jx * t4));
HXDLIN(5694)								 ::zpp_nape::phys::ZPP_Body arb6 = arb->b2;
HXDLIN(5694)								arb6->vely = (arb6->vely + (jy * t4));
            							}
HXDLIN(5694)							 ::zpp_nape::phys::ZPP_Body arb7 = arb->b1;
HXDLIN(5694)							arb7->angvel = (arb7->angvel - (arb->b1->iinertia * ((jy * arb->r1x) - (jx * arb->r1y))));
HXDLIN(5694)							 ::zpp_nape::phys::ZPP_Body arb8 = arb->b2;
HXDLIN(5694)							arb8->angvel = (arb8->angvel + (arb->b2->iinertia * ((jy * arb->r2x) - (jx * arb->r2y))));
HXDLIN(5694)							Float j_damp = (((w1 - w2) * arb->wMass) - (arb->adamp * arb->agamma));
HXDLIN(5694)							 ::zpp_nape::dynamics::ZPP_FluidArbiter arb9 = arb;
HXDLIN(5694)							arb9->adamp = (arb9->adamp + j_damp);
HXDLIN(5694)							 ::zpp_nape::phys::ZPP_Body arb10 = arb->b1;
HXDLIN(5694)							arb10->angvel = (arb10->angvel - (j_damp * arb->b1->iinertia));
HXDLIN(5694)							 ::zpp_nape::phys::ZPP_Body arb11 = arb->b2;
HXDLIN(5694)							arb11->angvel = (arb11->angvel + (j_damp * arb->b2->iinertia));
            						}
            					}
HXLINE(5695)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(5698)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();
HXLINE(5699)			{
HXLINE(5700)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite1 = this->live_constraints->head;
HXLINE(5701)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(5702)					 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite1->elt;
HXLINE(5703)					{
HXLINE(5704)						if (con->applyImpulseVel()) {
HXLINE(5705)							cx_ite1 = this->live_constraints->erase(pre);
HXLINE(5706)							con->broken();
HXLINE(5707)							this->constraintCbBreak(con);
HXLINE(5708)							if (con->removeOnBreak) {
HXLINE(5709)								con->component->sleeping = true;
HXLINE(5710)								this->midstep = false;
HXLINE(5711)								if (hx::IsNotNull( con->compound )) {
HXLINE(5711)									con->compound->wrap_constraints->remove(con->outer);
            								}
            								else {
HXLINE(5712)									this->wrap_constraints->remove(con->outer);
            								}
HXLINE(5713)								this->midstep = true;
            							}
            							else {
HXLINE(5715)								con->active = false;
            							}
HXLINE(5716)							con->clearcache();
HXLINE(5717)							continue;
            						}
HXLINE(5719)						pre = cx_ite1;
            					}
HXLINE(5721)					cx_ite1 = cx_ite1->next;
            				}
            			}
HXLINE(5724)			{
HXLINE(5725)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;
HXLINE(5726)				bool fst = true;
HXLINE(5727)				if (hx::IsNull( arbi )) {
HXLINE(5728)					arbi = this->c_arbiters_true->head;
HXLINE(5729)					fst = false;
            				}
HXLINE(5731)				while(hx::IsNotNull( arbi )){
HXLINE(5732)					 ::zpp_nape::dynamics::ZPP_ColArbiter arb12 = arbi->elt;
HXLINE(5734)					bool _hx_tmp1;
HXDLIN(5734)					if (arb12->active) {
HXLINE(5734)						_hx_tmp1 = ((arb12->immState & 1) != 0);
            					}
            					else {
HXLINE(5734)						_hx_tmp1 = false;
            					}
HXDLIN(5734)					if (_hx_tmp1) {
HXLINE(5734)						Float v1x = (((arb12->k1x + arb12->b2->velx) - (arb12->c1->r2y * arb12->b2->angvel)) - (arb12->b1->velx - (arb12->c1->r1y * arb12->b1->angvel)));
HXDLIN(5734)						Float v1y = (((arb12->k1y + arb12->b2->vely) + (arb12->c1->r2x * arb12->b2->angvel)) - (arb12->b1->vely + (arb12->c1->r1x * arb12->b1->angvel)));
HXDLIN(5734)						Float j = ((((v1y * arb12->nx) - (v1x * arb12->ny)) + arb12->surfacex) * arb12->c1->tMass);
HXDLIN(5734)						Float jMax = (arb12->c1->friction * arb12->c1->jnAcc);
HXDLIN(5734)						Float jOld = arb12->c1->jtAcc;
HXDLIN(5734)						Float cjAcc = (jOld - j);
HXDLIN(5734)						if ((cjAcc > jMax)) {
HXLINE(5734)							cjAcc = jMax;
            						}
            						else {
HXLINE(5734)							if ((cjAcc < -(jMax))) {
HXLINE(5734)								cjAcc = -(jMax);
            							}
            						}
HXDLIN(5734)						j = (cjAcc - jOld);
HXDLIN(5734)						arb12->c1->jtAcc = cjAcc;
HXDLIN(5734)						Float jx1 = (-(arb12->ny) * j);
HXDLIN(5734)						Float jy1 = (arb12->nx * j);
HXDLIN(5734)						 ::zpp_nape::phys::ZPP_Body arb13 = arb12->b2;
HXDLIN(5734)						arb13->velx = (arb13->velx + (jx1 * arb12->b2->imass));
HXDLIN(5734)						 ::zpp_nape::phys::ZPP_Body arb14 = arb12->b2;
HXDLIN(5734)						arb14->vely = (arb14->vely + (jy1 * arb12->b2->imass));
HXDLIN(5734)						 ::zpp_nape::phys::ZPP_Body arb15 = arb12->b1;
HXDLIN(5734)						arb15->velx = (arb15->velx - (jx1 * arb12->b1->imass));
HXDLIN(5734)						 ::zpp_nape::phys::ZPP_Body arb16 = arb12->b1;
HXDLIN(5734)						arb16->vely = (arb16->vely - (jy1 * arb12->b1->imass));
HXDLIN(5734)						 ::zpp_nape::phys::ZPP_Body arb17 = arb12->b2;
HXDLIN(5734)						arb17->angvel = (arb17->angvel + ((arb12->rt1b * j) * arb12->b2->iinertia));
HXDLIN(5734)						 ::zpp_nape::phys::ZPP_Body arb18 = arb12->b1;
HXDLIN(5734)						arb18->angvel = (arb18->angvel - ((arb12->rt1a * j) * arb12->b1->iinertia));
HXDLIN(5734)						if (arb12->hc2) {
HXLINE(5734)							Float v2x = (((arb12->k2x + arb12->b2->velx) - (arb12->c2->r2y * arb12->b2->angvel)) - (arb12->b1->velx - (arb12->c2->r1y * arb12->b1->angvel)));
HXDLIN(5734)							Float v2y = (((arb12->k2y + arb12->b2->vely) + (arb12->c2->r2x * arb12->b2->angvel)) - (arb12->b1->vely + (arb12->c2->r1x * arb12->b1->angvel)));
HXDLIN(5734)							j = ((((v2y * arb12->nx) - (v2x * arb12->ny)) + arb12->surfacex) * arb12->c2->tMass);
HXDLIN(5734)							jMax = (arb12->c2->friction * arb12->c2->jnAcc);
HXDLIN(5734)							jOld = arb12->c2->jtAcc;
HXDLIN(5734)							cjAcc = (jOld - j);
HXDLIN(5734)							if ((cjAcc > jMax)) {
HXLINE(5734)								cjAcc = jMax;
            							}
            							else {
HXLINE(5734)								if ((cjAcc < -(jMax))) {
HXLINE(5734)									cjAcc = -(jMax);
            								}
            							}
HXDLIN(5734)							j = (cjAcc - jOld);
HXDLIN(5734)							arb12->c2->jtAcc = cjAcc;
HXDLIN(5734)							jx1 = (-(arb12->ny) * j);
HXDLIN(5734)							jy1 = (arb12->nx * j);
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb19 = arb12->b2;
HXDLIN(5734)							arb19->velx = (arb19->velx + (jx1 * arb12->b2->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb20 = arb12->b2;
HXDLIN(5734)							arb20->vely = (arb20->vely + (jy1 * arb12->b2->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb21 = arb12->b1;
HXDLIN(5734)							arb21->velx = (arb21->velx - (jx1 * arb12->b1->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb22 = arb12->b1;
HXDLIN(5734)							arb22->vely = (arb22->vely - (jy1 * arb12->b1->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb23 = arb12->b2;
HXDLIN(5734)							arb23->angvel = (arb23->angvel + ((arb12->rt2b * j) * arb12->b2->iinertia));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb24 = arb12->b1;
HXDLIN(5734)							arb24->angvel = (arb24->angvel - ((arb12->rt2a * j) * arb12->b1->iinertia));
HXDLIN(5734)							v1x = (((arb12->k1x + arb12->b2->velx) - (arb12->c1->r2y * arb12->b2->angvel)) - (arb12->b1->velx - (arb12->c1->r1y * arb12->b1->angvel)));
HXDLIN(5734)							v1y = (((arb12->k1y + arb12->b2->vely) + (arb12->c1->r2x * arb12->b2->angvel)) - (arb12->b1->vely + (arb12->c1->r1x * arb12->b1->angvel)));
HXDLIN(5734)							v2x = (((arb12->k2x + arb12->b2->velx) - (arb12->c2->r2y * arb12->b2->angvel)) - (arb12->b1->velx - (arb12->c2->r1y * arb12->b1->angvel)));
HXDLIN(5734)							v2y = (((arb12->k2y + arb12->b2->vely) + (arb12->c2->r2x * arb12->b2->angvel)) - (arb12->b1->vely + (arb12->c2->r1x * arb12->b1->angvel)));
HXDLIN(5734)							Float ax = arb12->c1->jnAcc;
HXDLIN(5734)							Float ay = arb12->c2->jnAcc;
HXDLIN(5734)							Float jnx = (((((v1x * arb12->nx) + (v1y * arb12->ny)) + arb12->surfacey) + arb12->c1->bounce) - ((arb12->Ka * ax) + (arb12->Kb * ay)));
HXDLIN(5734)							Float jny = (((((v2x * arb12->nx) + (v2y * arb12->ny)) + arb12->surfacey) + arb12->c2->bounce) - ((arb12->Kb * ax) + (arb12->Kc * ay)));
HXDLIN(5734)							Float xx = -(((arb12->kMassa * jnx) + (arb12->kMassb * jny)));
HXDLIN(5734)							Float xy = -(((arb12->kMassb * jnx) + (arb12->kMassc * jny)));
HXDLIN(5734)							bool _hx_tmp2;
HXDLIN(5734)							if ((xx >= 0)) {
HXLINE(5734)								_hx_tmp2 = (xy >= 0);
            							}
            							else {
HXLINE(5734)								_hx_tmp2 = false;
            							}
HXDLIN(5734)							if (_hx_tmp2) {
HXLINE(5734)								{
HXLINE(5734)									jnx = (xx - ax);
HXDLIN(5734)									jny = (xy - ay);
            								}
HXDLIN(5734)								arb12->c1->jnAcc = xx;
HXDLIN(5734)								arb12->c2->jnAcc = xy;
            							}
            							else {
HXLINE(5734)								xx = (-(arb12->c1->nMass) * jnx);
HXDLIN(5734)								bool _hx_tmp3;
HXDLIN(5734)								if ((xx >= 0)) {
HXLINE(5734)									_hx_tmp3 = (((arb12->Kb * xx) + jny) >= 0);
            								}
            								else {
HXLINE(5734)									_hx_tmp3 = false;
            								}
HXDLIN(5734)								if (_hx_tmp3) {
HXLINE(5734)									jnx = (xx - ax);
HXDLIN(5734)									jny = -(ay);
HXDLIN(5734)									arb12->c1->jnAcc = xx;
HXDLIN(5734)									arb12->c2->jnAcc = ( (Float)(0) );
            								}
            								else {
HXLINE(5734)									xy = (-(arb12->c2->nMass) * jny);
HXDLIN(5734)									bool _hx_tmp4;
HXDLIN(5734)									if ((xy >= 0)) {
HXLINE(5734)										_hx_tmp4 = (((arb12->Kb * xy) + jnx) >= 0);
            									}
            									else {
HXLINE(5734)										_hx_tmp4 = false;
            									}
HXDLIN(5734)									if (_hx_tmp4) {
HXLINE(5734)										jnx = -(ax);
HXDLIN(5734)										jny = (xy - ay);
HXDLIN(5734)										arb12->c1->jnAcc = ( (Float)(0) );
HXDLIN(5734)										arb12->c2->jnAcc = xy;
            									}
            									else {
HXLINE(5734)										bool _hx_tmp5;
HXDLIN(5734)										if ((jnx >= 0)) {
HXLINE(5734)											_hx_tmp5 = (jny >= 0);
            										}
            										else {
HXLINE(5734)											_hx_tmp5 = false;
            										}
HXDLIN(5734)										if (_hx_tmp5) {
HXLINE(5734)											jnx = -(ax);
HXDLIN(5734)											jny = -(ay);
HXDLIN(5734)											arb12->c1->jnAcc = (arb12->c2->jnAcc = ( (Float)(0) ));
            										}
            										else {
HXLINE(5734)											jnx = ( (Float)(0) );
HXDLIN(5734)											jny = ( (Float)(0) );
            										}
            									}
            								}
            							}
HXDLIN(5734)							j = (jnx + jny);
HXDLIN(5734)							jx1 = (arb12->nx * j);
HXDLIN(5734)							jy1 = (arb12->ny * j);
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb25 = arb12->b2;
HXDLIN(5734)							arb25->velx = (arb25->velx + (jx1 * arb12->b2->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb26 = arb12->b2;
HXDLIN(5734)							arb26->vely = (arb26->vely + (jy1 * arb12->b2->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb27 = arb12->b1;
HXDLIN(5734)							arb27->velx = (arb27->velx - (jx1 * arb12->b1->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb28 = arb12->b1;
HXDLIN(5734)							arb28->vely = (arb28->vely - (jy1 * arb12->b1->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb29 = arb12->b2;
HXDLIN(5734)							arb29->angvel = (arb29->angvel + (((arb12->rn1b * jnx) + (arb12->rn2b * jny)) * arb12->b2->iinertia));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb30 = arb12->b1;
HXDLIN(5734)							arb30->angvel = (arb30->angvel - (((arb12->rn1a * jnx) + (arb12->rn2a * jny)) * arb12->b1->iinertia));
            						}
            						else {
HXLINE(5734)							if ((arb12->radius != ((Float)0.0))) {
HXLINE(5734)								Float dw = (arb12->b2->angvel - arb12->b1->angvel);
HXDLIN(5734)								j = (dw * arb12->rMass);
HXDLIN(5734)								jMax = (arb12->rfric * arb12->c1->jnAcc);
HXDLIN(5734)								jOld = arb12->jrAcc;
HXDLIN(5734)								 ::zpp_nape::dynamics::ZPP_ColArbiter arb31 = arb12;
HXDLIN(5734)								arb31->jrAcc = (arb31->jrAcc - j);
HXDLIN(5734)								if ((arb12->jrAcc > jMax)) {
HXLINE(5734)									arb12->jrAcc = jMax;
            								}
            								else {
HXLINE(5734)									if ((arb12->jrAcc < -(jMax))) {
HXLINE(5734)										arb12->jrAcc = -(jMax);
            									}
            								}
HXDLIN(5734)								j = (arb12->jrAcc - jOld);
HXDLIN(5734)								 ::zpp_nape::phys::ZPP_Body arb32 = arb12->b2;
HXDLIN(5734)								arb32->angvel = (arb32->angvel + (j * arb12->b2->iinertia));
HXDLIN(5734)								 ::zpp_nape::phys::ZPP_Body arb33 = arb12->b1;
HXDLIN(5734)								arb33->angvel = (arb33->angvel - (j * arb12->b1->iinertia));
            							}
HXDLIN(5734)							v1x = (((arb12->k1x + arb12->b2->velx) - (arb12->c1->r2y * arb12->b2->angvel)) - (arb12->b1->velx - (arb12->c1->r1y * arb12->b1->angvel)));
HXDLIN(5734)							v1y = (((arb12->k1y + arb12->b2->vely) + (arb12->c1->r2x * arb12->b2->angvel)) - (arb12->b1->vely + (arb12->c1->r1x * arb12->b1->angvel)));
HXDLIN(5734)							j = (((arb12->c1->bounce + ((arb12->nx * v1x) + (arb12->ny * v1y))) + arb12->surfacey) * arb12->c1->nMass);
HXDLIN(5734)							jOld = arb12->c1->jnAcc;
HXDLIN(5734)							cjAcc = (jOld - j);
HXDLIN(5734)							if ((cjAcc < ((Float)0.0))) {
HXLINE(5734)								cjAcc = ((Float)0.0);
            							}
HXDLIN(5734)							j = (cjAcc - jOld);
HXDLIN(5734)							arb12->c1->jnAcc = cjAcc;
HXDLIN(5734)							jx1 = (arb12->nx * j);
HXDLIN(5734)							jy1 = (arb12->ny * j);
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb34 = arb12->b2;
HXDLIN(5734)							arb34->velx = (arb34->velx + (jx1 * arb12->b2->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb35 = arb12->b2;
HXDLIN(5734)							arb35->vely = (arb35->vely + (jy1 * arb12->b2->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb36 = arb12->b1;
HXDLIN(5734)							arb36->velx = (arb36->velx - (jx1 * arb12->b1->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb37 = arb12->b1;
HXDLIN(5734)							arb37->vely = (arb37->vely - (jy1 * arb12->b1->imass));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb38 = arb12->b2;
HXDLIN(5734)							arb38->angvel = (arb38->angvel + ((arb12->rn1b * j) * arb12->b2->iinertia));
HXDLIN(5734)							 ::zpp_nape::phys::ZPP_Body arb39 = arb12->b1;
HXDLIN(5734)							arb39->angvel = (arb39->angvel - ((arb12->rn1a * j) * arb12->b1->iinertia));
            						}
            					}
HXLINE(5736)					arbi = arbi->next;
HXLINE(5737)					bool _hx_tmp6;
HXDLIN(5737)					if (fst) {
HXLINE(5737)						_hx_tmp6 = hx::IsNull( arbi );
            					}
            					else {
HXLINE(5737)						_hx_tmp6 = false;
            					}
HXDLIN(5737)					if (_hx_tmp6) {
HXLINE(5738)						arbi = this->c_arbiters_true->head;
HXLINE(5739)						fst = false;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iterateVel,(void))

void ZPP_Space_obj::iteratePos(int times){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5746_iteratePos)
HXDLIN(5746)		int _g = 0;
HXDLIN(5746)		int _g1 = times;
HXDLIN(5746)		while((_g < _g1)){
HXDLIN(5746)			_g = (_g + 1);
HXDLIN(5746)			int i = (_g - 1);
HXLINE(5747)			 ::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();
HXLINE(5748)			{
HXLINE(5749)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;
HXLINE(5750)				while(hx::IsNotNull( cx_ite )){
HXLINE(5751)					 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXLINE(5752)					{
HXLINE(5753)						bool _hx_tmp;
HXDLIN(5753)						if (!(con->_hx___velocity)) {
HXLINE(5753)							_hx_tmp = con->stiff;
            						}
            						else {
HXLINE(5753)							_hx_tmp = false;
            						}
HXDLIN(5753)						if (_hx_tmp) {
HXLINE(5754)							if (con->applyImpulsePos()) {
HXLINE(5755)								cx_ite = this->live_constraints->erase(pre);
HXLINE(5756)								con->broken();
HXLINE(5757)								this->constraintCbBreak(con);
HXLINE(5758)								if (con->removeOnBreak) {
HXLINE(5759)									con->component->sleeping = true;
HXLINE(5760)									this->midstep = false;
HXLINE(5761)									if (hx::IsNotNull( con->compound )) {
HXLINE(5761)										con->compound->wrap_constraints->remove(con->outer);
            									}
            									else {
HXLINE(5762)										this->wrap_constraints->remove(con->outer);
            									}
HXLINE(5763)									this->midstep = true;
            								}
            								else {
HXLINE(5765)									con->active = false;
            								}
HXLINE(5766)								con->clearcache();
HXLINE(5767)								continue;
            							}
            						}
HXLINE(5770)						pre = cx_ite;
            					}
HXLINE(5772)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(5775)			{
HXLINE(5776)				 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;
HXLINE(5777)				bool fst = true;
HXLINE(5778)				if (hx::IsNull( arbi )) {
HXLINE(5779)					arbi = this->c_arbiters_true->head;
HXLINE(5780)					fst = false;
            				}
HXLINE(5782)				while(hx::IsNotNull( arbi )){
HXLINE(5783)					 ::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;
HXLINE(5786)					bool _hx_tmp1;
HXDLIN(5786)					if (arb->active) {
HXLINE(5786)						_hx_tmp1 = ((arb->immState & 1) != 0);
            					}
            					else {
HXLINE(5786)						_hx_tmp1 = false;
            					}
HXDLIN(5786)					if (_hx_tmp1) {
HXLINE(5787)						if ((arb->ptype == 2)) {
HXLINE(5787)							 ::zpp_nape::dynamics::ZPP_IContact c = arb->c1;
HXDLIN(5787)							Float dx = ((Float)0.0);
HXDLIN(5787)							Float dy = ((Float)0.0);
HXDLIN(5787)							Float r2x = ((Float)0.0);
HXDLIN(5787)							Float r2y = ((Float)0.0);
HXDLIN(5787)							{
HXLINE(5787)								r2x = ((arb->b2->axisy * c->lr2x) - (arb->b2->axisx * c->lr2y));
HXDLIN(5787)								r2y = ((c->lr2x * arb->b2->axisx) + (c->lr2y * arb->b2->axisy));
            							}
HXDLIN(5787)							{
HXLINE(5787)								Float t = ((Float)1.0);
HXDLIN(5787)								r2x = (r2x + (arb->b2->posx * t));
HXDLIN(5787)								r2y = (r2y + (arb->b2->posy * t));
            							}
HXDLIN(5787)							Float r1x = ((Float)0.0);
HXDLIN(5787)							Float r1y = ((Float)0.0);
HXDLIN(5787)							{
HXLINE(5787)								r1x = ((arb->b1->axisy * c->lr1x) - (arb->b1->axisx * c->lr1y));
HXDLIN(5787)								r1y = ((c->lr1x * arb->b1->axisx) + (c->lr1y * arb->b1->axisy));
            							}
HXDLIN(5787)							{
HXLINE(5787)								Float t1 = ((Float)1.0);
HXDLIN(5787)								r1x = (r1x + (arb->b1->posx * t1));
HXDLIN(5787)								r1y = (r1y + (arb->b1->posy * t1));
            							}
HXDLIN(5787)							Float dx1 = ((Float)0.0);
HXDLIN(5787)							Float dy1 = ((Float)0.0);
HXDLIN(5787)							{
HXLINE(5787)								dx1 = (r2x - r1x);
HXDLIN(5787)								dy1 = (r2y - r1y);
            							}
HXDLIN(5787)							Float dl = ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));
HXDLIN(5787)							Float r = (arb->radius - ::nape::Config_obj::collisionSlop);
HXDLIN(5787)							Float err = (dl - r);
HXDLIN(5787)							if ((((dx1 * arb->nx) + (dy1 * arb->ny)) < 0)) {
HXLINE(5787)								{
HXLINE(5787)									dx1 = -(dx1);
HXDLIN(5787)									dy1 = -(dy1);
            								}
HXDLIN(5787)								err = (err - arb->radius);
            							}
HXDLIN(5787)							if ((err < 0)) {
HXLINE(5787)								if ((dl < ::nape::Config_obj::epsilon)) {
HXLINE(5787)									if ((arb->b1->smass != ((Float)0.0))) {
HXLINE(5787)										 ::zpp_nape::phys::ZPP_Body arb1 = arb->b1;
HXDLIN(5787)										arb1->posx = (arb1->posx + (::nape::Config_obj::epsilon * ( (Float)(10) )));
            									}
            									else {
HXLINE(5787)										 ::zpp_nape::phys::ZPP_Body arb2 = arb->b2;
HXDLIN(5787)										arb2->posx = (arb2->posx + (::nape::Config_obj::epsilon * ( (Float)(10) )));
            									}
            								}
            								else {
HXLINE(5787)									{
HXLINE(5787)										Float t2 = (((Float)1.0) / dl);
HXDLIN(5787)										dx1 = (dx1 * t2);
HXDLIN(5787)										dy1 = (dy1 * t2);
            									}
HXDLIN(5787)									Float px = (((Float)0.5) * (r1x + r2x));
HXDLIN(5787)									Float py = (((Float)0.5) * (r1y + r2y));
HXDLIN(5787)									Float pen = (dl - r);
HXDLIN(5787)									{
HXLINE(5787)										r1x = (px - arb->b1->posx);
HXDLIN(5787)										r1y = (py - arb->b1->posy);
            									}
HXDLIN(5787)									{
HXLINE(5787)										r2x = (px - arb->b2->posx);
HXDLIN(5787)										r2y = (py - arb->b2->posy);
            									}
HXDLIN(5787)									Float rn1 = ((dy1 * r1x) - (dx1 * r1y));
HXDLIN(5787)									Float rn2 = ((dy1 * r2x) - (dx1 * r2y));
HXDLIN(5787)									Float K = (((arb->b2->smass + ((rn2 * rn2) * arb->b2->sinertia)) + arb->b1->smass) + ((rn1 * rn1) * arb->b1->sinertia));
HXDLIN(5787)									if ((K != 0)) {
HXLINE(5787)										Float jn = ((-(arb->biasCoef) * pen) / K);
HXDLIN(5787)										Float Jx = ((Float)0.0);
HXDLIN(5787)										Float Jy = ((Float)0.0);
HXDLIN(5787)										{
HXLINE(5787)											Float t3 = jn;
HXDLIN(5787)											Jx = (dx1 * t3);
HXDLIN(5787)											Jy = (dy1 * t3);
            										}
HXDLIN(5787)										{
HXLINE(5787)											Float t4 = arb->b1->imass;
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb3 = arb->b1;
HXDLIN(5787)											arb3->posx = (arb3->posx - (Jx * t4));
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb4 = arb->b1;
HXDLIN(5787)											arb4->posy = (arb4->posy - (Jy * t4));
            										}
HXDLIN(5787)										{
HXLINE(5787)											 ::zpp_nape::phys::ZPP_Body _this = arb->b1;
HXDLIN(5787)											Float dr = ((-(rn1) * arb->b1->iinertia) * jn);
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body _this1 = _this;
HXDLIN(5787)											_this1->rot = (_this1->rot + dr);
HXDLIN(5787)											if (((dr * dr) > ((Float)0.0001))) {
HXLINE(5787)												_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(5787)												_this->axisy = ::Math_obj::cos(_this->rot);
            											}
            											else {
HXLINE(5787)												Float d2 = (dr * dr);
HXDLIN(5787)												Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(5787)												Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(5787)												Float nx = (((p * _this->axisx) + (dr * _this->axisy)) * m);
HXDLIN(5787)												_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m);
HXDLIN(5787)												_this->axisx = nx;
            											}
            										}
HXDLIN(5787)										{
HXLINE(5787)											Float t5 = arb->b2->imass;
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb5 = arb->b2;
HXDLIN(5787)											arb5->posx = (arb5->posx + (Jx * t5));
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb6 = arb->b2;
HXDLIN(5787)											arb6->posy = (arb6->posy + (Jy * t5));
            										}
HXDLIN(5787)										{
HXLINE(5787)											 ::zpp_nape::phys::ZPP_Body _this2 = arb->b2;
HXDLIN(5787)											Float dr1 = ((rn2 * arb->b2->iinertia) * jn);
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body _this3 = _this2;
HXDLIN(5787)											_this3->rot = (_this3->rot + dr1);
HXDLIN(5787)											if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(5787)												_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(5787)												_this2->axisy = ::Math_obj::cos(_this2->rot);
            											}
            											else {
HXLINE(5787)												Float d21 = (dr1 * dr1);
HXDLIN(5787)												Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(5787)												Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(5787)												Float nx1 = (((p1 * _this2->axisx) + (dr1 * _this2->axisy)) * m1);
HXDLIN(5787)												_this2->axisy = (((p1 * _this2->axisy) - (dr1 * _this2->axisx)) * m1);
HXDLIN(5787)												_this2->axisx = nx1;
            											}
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE(5787)							Float gnormx = ((Float)0.0);
HXDLIN(5787)							Float gnormy = ((Float)0.0);
HXDLIN(5787)							Float gproj;
HXDLIN(5787)							Float clip1x = ((Float)0.0);
HXDLIN(5787)							Float clip1y = ((Float)0.0);
HXDLIN(5787)							Float clip2x = ( (Float)(0) );
HXDLIN(5787)							Float clip2y = ( (Float)(0) );
HXDLIN(5787)							if ((arb->ptype == 0)) {
HXLINE(5787)								{
HXLINE(5787)									gnormx = ((arb->b1->axisy * arb->lnormx) - (arb->b1->axisx * arb->lnormy));
HXDLIN(5787)									gnormy = ((arb->lnormx * arb->b1->axisx) + (arb->lnormy * arb->b1->axisy));
            								}
HXDLIN(5787)								gproj = (arb->lproj + ((gnormx * arb->b1->posx) + (gnormy * arb->b1->posy)));
HXDLIN(5787)								{
HXLINE(5787)									clip1x = ((arb->b2->axisy * arb->c1->lr1x) - (arb->b2->axisx * arb->c1->lr1y));
HXDLIN(5787)									clip1y = ((arb->c1->lr1x * arb->b2->axisx) + (arb->c1->lr1y * arb->b2->axisy));
            								}
HXDLIN(5787)								{
HXLINE(5787)									Float t6 = ((Float)1.0);
HXDLIN(5787)									clip1x = (clip1x + (arb->b2->posx * t6));
HXDLIN(5787)									clip1y = (clip1y + (arb->b2->posy * t6));
            								}
HXDLIN(5787)								if (arb->hpc2) {
HXLINE(5787)									{
HXLINE(5787)										clip2x = ((arb->b2->axisy * arb->c2->lr1x) - (arb->b2->axisx * arb->c2->lr1y));
HXDLIN(5787)										clip2y = ((arb->c2->lr1x * arb->b2->axisx) + (arb->c2->lr1y * arb->b2->axisy));
            									}
HXDLIN(5787)									{
HXLINE(5787)										Float t7 = ((Float)1.0);
HXDLIN(5787)										clip2x = (clip2x + (arb->b2->posx * t7));
HXDLIN(5787)										clip2y = (clip2y + (arb->b2->posy * t7));
            									}
            								}
            							}
            							else {
HXLINE(5787)								{
HXLINE(5787)									gnormx = ((arb->b2->axisy * arb->lnormx) - (arb->b2->axisx * arb->lnormy));
HXDLIN(5787)									gnormy = ((arb->lnormx * arb->b2->axisx) + (arb->lnormy * arb->b2->axisy));
            								}
HXDLIN(5787)								gproj = (arb->lproj + ((gnormx * arb->b2->posx) + (gnormy * arb->b2->posy)));
HXDLIN(5787)								{
HXLINE(5787)									clip1x = ((arb->b1->axisy * arb->c1->lr1x) - (arb->b1->axisx * arb->c1->lr1y));
HXDLIN(5787)									clip1y = ((arb->c1->lr1x * arb->b1->axisx) + (arb->c1->lr1y * arb->b1->axisy));
            								}
HXDLIN(5787)								{
HXLINE(5787)									Float t8 = ((Float)1.0);
HXDLIN(5787)									clip1x = (clip1x + (arb->b1->posx * t8));
HXDLIN(5787)									clip1y = (clip1y + (arb->b1->posy * t8));
            								}
HXDLIN(5787)								if (arb->hpc2) {
HXLINE(5787)									{
HXLINE(5787)										clip2x = ((arb->b1->axisy * arb->c2->lr1x) - (arb->b1->axisx * arb->c2->lr1y));
HXDLIN(5787)										clip2y = ((arb->c2->lr1x * arb->b1->axisx) + (arb->c2->lr1y * arb->b1->axisy));
            									}
HXDLIN(5787)									{
HXLINE(5787)										Float t9 = ((Float)1.0);
HXDLIN(5787)										clip2x = (clip2x + (arb->b1->posx * t9));
HXDLIN(5787)										clip2y = (clip2y + (arb->b1->posy * t9));
            									}
            								}
            							}
HXDLIN(5787)							Float err1 = ((((clip1x * gnormx) + (clip1y * gnormy)) - gproj) - arb->radius);
HXDLIN(5787)							err1 = (err1 + ::nape::Config_obj::collisionSlop);
HXDLIN(5787)							Float err2 = ((Float)0.0);
HXDLIN(5787)							if (arb->hpc2) {
HXLINE(5787)								err2 = ((((clip2x * gnormx) + (clip2y * gnormy)) - gproj) - arb->radius);
HXDLIN(5787)								err2 = (err2 + ::nape::Config_obj::collisionSlop);
            							}
HXDLIN(5787)							bool _hx_tmp2;
HXDLIN(5787)							if (!((err1 < 0))) {
HXLINE(5787)								_hx_tmp2 = (err2 < 0);
            							}
            							else {
HXLINE(5787)								_hx_tmp2 = true;
            							}
HXDLIN(5787)							if (_hx_tmp2) {
HXLINE(5787)								if (arb->rev) {
HXLINE(5787)									gnormx = -(gnormx);
HXDLIN(5787)									gnormy = -(gnormy);
            								}
HXDLIN(5787)								Float c1r1x = ((Float)0.0);
HXDLIN(5787)								Float c1r1y = ((Float)0.0);
HXDLIN(5787)								{
HXLINE(5787)									c1r1x = (clip1x - arb->b1->posx);
HXDLIN(5787)									c1r1y = (clip1y - arb->b1->posy);
            								}
HXDLIN(5787)								Float c1r2x = ((Float)0.0);
HXDLIN(5787)								Float c1r2y = ((Float)0.0);
HXDLIN(5787)								{
HXLINE(5787)									c1r2x = (clip1x - arb->b2->posx);
HXDLIN(5787)									c1r2y = (clip1y - arb->b2->posy);
            								}
HXDLIN(5787)								Float c2r1x = ( (Float)(0) );
HXDLIN(5787)								Float c2r1y = ( (Float)(0) );
HXDLIN(5787)								Float c2r2x = ( (Float)(0) );
HXDLIN(5787)								Float c2r2y = ( (Float)(0) );
HXDLIN(5787)								if (arb->hpc2) {
HXLINE(5787)									{
HXLINE(5787)										c2r1x = (clip2x - arb->b1->posx);
HXDLIN(5787)										c2r1y = (clip2y - arb->b1->posy);
            									}
HXDLIN(5787)									{
HXLINE(5787)										c2r2x = (clip2x - arb->b2->posx);
HXDLIN(5787)										c2r2y = (clip2y - arb->b2->posy);
            									}
HXDLIN(5787)									Float rn1a = ((gnormy * c1r1x) - (gnormx * c1r1y));
HXDLIN(5787)									Float rn1b = ((gnormy * c1r2x) - (gnormx * c1r2y));
HXDLIN(5787)									Float rn2a = ((gnormy * c2r1x) - (gnormx * c2r1y));
HXDLIN(5787)									Float rn2b = ((gnormy * c2r2x) - (gnormx * c2r2y));
HXDLIN(5787)									Float mass_sum = (arb->b1->smass + arb->b2->smass);
HXDLIN(5787)									{
HXLINE(5787)										arb->kMassa = ((mass_sum + ((arb->b1->sinertia * rn1a) * rn1a)) + ((arb->b2->sinertia * rn1b) * rn1b));
HXDLIN(5787)										arb->kMassb = ((mass_sum + ((arb->b1->sinertia * rn1a) * rn2a)) + ((arb->b2->sinertia * rn1b) * rn2b));
HXDLIN(5787)										arb->kMassc = ((mass_sum + ((arb->b1->sinertia * rn2a) * rn2a)) + ((arb->b2->sinertia * rn2b) * rn2b));
            									}
HXDLIN(5787)									Float Ka = ((Float)0.0);
HXDLIN(5787)									Float Kb = ((Float)0.0);
HXDLIN(5787)									Float Kc = ((Float)0.0);
HXDLIN(5787)									{
HXLINE(5787)										Ka = arb->kMassa;
HXDLIN(5787)										Kb = arb->kMassb;
HXDLIN(5787)										Kc = arb->kMassc;
            									}
HXDLIN(5787)									Float bx = (err1 * arb->biasCoef);
HXDLIN(5787)									Float by = (err2 * arb->biasCoef);
HXDLIN(5787)									while(true){
HXLINE(5787)										Float xx = ((Float)0.0);
HXDLIN(5787)										Float xy = ((Float)0.0);
HXDLIN(5787)										{
HXLINE(5787)											xx = bx;
HXDLIN(5787)											xy = by;
            										}
HXDLIN(5787)										{
HXLINE(5787)											xx = -(xx);
HXDLIN(5787)											xy = -(xy);
            										}
HXDLIN(5787)										{
HXLINE(5787)											Float det = ((arb->kMassa * arb->kMassc) - (arb->kMassb * arb->kMassb));
HXDLIN(5787)											if ((det != det)) {
HXLINE(5787)												xy = ( (Float)(0) );
HXDLIN(5787)												xx = xy;
            											}
            											else {
HXLINE(5787)												if ((det == 0)) {
HXLINE(5787)													if ((arb->kMassa != 0)) {
HXLINE(5787)														xx = (xx / arb->kMassa);
            													}
            													else {
HXLINE(5787)														xx = ( (Float)(0) );
            													}
HXDLIN(5787)													if ((arb->kMassc != 0)) {
HXLINE(5787)														xy = (xy / arb->kMassc);
            													}
            													else {
HXLINE(5787)														xy = ( (Float)(0) );
            													}
            												}
            												else {
HXLINE(5787)													det = (( (Float)(1) ) / det);
HXDLIN(5787)													Float t10 = (det * ((arb->kMassc * xx) - (arb->kMassb * xy)));
HXDLIN(5787)													xy = (det * ((arb->kMassa * xy) - (arb->kMassb * xx)));
HXDLIN(5787)													xx = t10;
            												}
            											}
            										}
HXDLIN(5787)										bool _hx_tmp3;
HXDLIN(5787)										if ((xx >= 0)) {
HXLINE(5787)											_hx_tmp3 = (xy >= 0);
            										}
            										else {
HXLINE(5787)											_hx_tmp3 = false;
            										}
HXDLIN(5787)										if (_hx_tmp3) {
HXLINE(5787)											{
HXLINE(5787)												Float t11 = ((xx + xy) * arb->b1->imass);
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb7 = arb->b1;
HXDLIN(5787)												arb7->posx = (arb7->posx - (gnormx * t11));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb8 = arb->b1;
HXDLIN(5787)												arb8->posy = (arb8->posy - (gnormy * t11));
            											}
HXDLIN(5787)											{
HXLINE(5787)												 ::zpp_nape::phys::ZPP_Body _this4 = arb->b1;
HXDLIN(5787)												Float dr2 = (-(arb->b1->iinertia) * ((rn1a * xx) + (rn2a * xy)));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body _this5 = _this4;
HXDLIN(5787)												_this5->rot = (_this5->rot + dr2);
HXDLIN(5787)												if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(5787)													_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN(5787)													_this4->axisy = ::Math_obj::cos(_this4->rot);
            												}
            												else {
HXLINE(5787)													Float d22 = (dr2 * dr2);
HXDLIN(5787)													Float p2 = (( (Float)(1) ) - (((Float)0.5) * d22));
HXDLIN(5787)													Float m2 = (( (Float)(1) ) - ((d22 * d22) / ( (Float)(8) )));
HXDLIN(5787)													Float nx2 = (((p2 * _this4->axisx) + (dr2 * _this4->axisy)) * m2);
HXDLIN(5787)													_this4->axisy = (((p2 * _this4->axisy) - (dr2 * _this4->axisx)) * m2);
HXDLIN(5787)													_this4->axisx = nx2;
            												}
            											}
HXDLIN(5787)											{
HXLINE(5787)												Float t12 = ((xx + xy) * arb->b2->imass);
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb9 = arb->b2;
HXDLIN(5787)												arb9->posx = (arb9->posx + (gnormx * t12));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb10 = arb->b2;
HXDLIN(5787)												arb10->posy = (arb10->posy + (gnormy * t12));
            											}
HXDLIN(5787)											{
HXLINE(5787)												 ::zpp_nape::phys::ZPP_Body _this6 = arb->b2;
HXDLIN(5787)												Float dr3 = (arb->b2->iinertia * ((rn1b * xx) + (rn2b * xy)));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body _this7 = _this6;
HXDLIN(5787)												_this7->rot = (_this7->rot + dr3);
HXDLIN(5787)												if (((dr3 * dr3) > ((Float)0.0001))) {
HXLINE(5787)													_this6->axisx = ::Math_obj::sin(_this6->rot);
HXDLIN(5787)													_this6->axisy = ::Math_obj::cos(_this6->rot);
            												}
            												else {
HXLINE(5787)													Float d23 = (dr3 * dr3);
HXDLIN(5787)													Float p3 = (( (Float)(1) ) - (((Float)0.5) * d23));
HXDLIN(5787)													Float m3 = (( (Float)(1) ) - ((d23 * d23) / ( (Float)(8) )));
HXDLIN(5787)													Float nx3 = (((p3 * _this6->axisx) + (dr3 * _this6->axisy)) * m3);
HXDLIN(5787)													_this6->axisy = (((p3 * _this6->axisy) - (dr3 * _this6->axisx)) * m3);
HXDLIN(5787)													_this6->axisx = nx3;
            												}
            											}
HXDLIN(5787)											goto _hx_goto_321;
            										}
HXDLIN(5787)										{
HXLINE(5787)											xx = (-(bx) / Ka);
HXDLIN(5787)											xy = ( (Float)(0) );
            										}
HXDLIN(5787)										Float vn2 = ((Kb * xx) + by);
HXDLIN(5787)										bool _hx_tmp4;
HXDLIN(5787)										if ((xx >= 0)) {
HXLINE(5787)											_hx_tmp4 = (vn2 >= 0);
            										}
            										else {
HXLINE(5787)											_hx_tmp4 = false;
            										}
HXDLIN(5787)										if (_hx_tmp4) {
HXLINE(5787)											{
HXLINE(5787)												Float t13 = ((xx + xy) * arb->b1->imass);
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb11 = arb->b1;
HXDLIN(5787)												arb11->posx = (arb11->posx - (gnormx * t13));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb12 = arb->b1;
HXDLIN(5787)												arb12->posy = (arb12->posy - (gnormy * t13));
            											}
HXDLIN(5787)											{
HXLINE(5787)												 ::zpp_nape::phys::ZPP_Body _this8 = arb->b1;
HXDLIN(5787)												Float dr4 = (-(arb->b1->iinertia) * ((rn1a * xx) + (rn2a * xy)));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body _this9 = _this8;
HXDLIN(5787)												_this9->rot = (_this9->rot + dr4);
HXDLIN(5787)												if (((dr4 * dr4) > ((Float)0.0001))) {
HXLINE(5787)													_this8->axisx = ::Math_obj::sin(_this8->rot);
HXDLIN(5787)													_this8->axisy = ::Math_obj::cos(_this8->rot);
            												}
            												else {
HXLINE(5787)													Float d24 = (dr4 * dr4);
HXDLIN(5787)													Float p4 = (( (Float)(1) ) - (((Float)0.5) * d24));
HXDLIN(5787)													Float m4 = (( (Float)(1) ) - ((d24 * d24) / ( (Float)(8) )));
HXDLIN(5787)													Float nx4 = (((p4 * _this8->axisx) + (dr4 * _this8->axisy)) * m4);
HXDLIN(5787)													_this8->axisy = (((p4 * _this8->axisy) - (dr4 * _this8->axisx)) * m4);
HXDLIN(5787)													_this8->axisx = nx4;
            												}
            											}
HXDLIN(5787)											{
HXLINE(5787)												Float t14 = ((xx + xy) * arb->b2->imass);
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb13 = arb->b2;
HXDLIN(5787)												arb13->posx = (arb13->posx + (gnormx * t14));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb14 = arb->b2;
HXDLIN(5787)												arb14->posy = (arb14->posy + (gnormy * t14));
            											}
HXDLIN(5787)											{
HXLINE(5787)												 ::zpp_nape::phys::ZPP_Body _this10 = arb->b2;
HXDLIN(5787)												Float dr5 = (arb->b2->iinertia * ((rn1b * xx) + (rn2b * xy)));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body _this11 = _this10;
HXDLIN(5787)												_this11->rot = (_this11->rot + dr5);
HXDLIN(5787)												if (((dr5 * dr5) > ((Float)0.0001))) {
HXLINE(5787)													_this10->axisx = ::Math_obj::sin(_this10->rot);
HXDLIN(5787)													_this10->axisy = ::Math_obj::cos(_this10->rot);
            												}
            												else {
HXLINE(5787)													Float d25 = (dr5 * dr5);
HXDLIN(5787)													Float p5 = (( (Float)(1) ) - (((Float)0.5) * d25));
HXDLIN(5787)													Float m5 = (( (Float)(1) ) - ((d25 * d25) / ( (Float)(8) )));
HXDLIN(5787)													Float nx5 = (((p5 * _this10->axisx) + (dr5 * _this10->axisy)) * m5);
HXDLIN(5787)													_this10->axisy = (((p5 * _this10->axisy) - (dr5 * _this10->axisx)) * m5);
HXDLIN(5787)													_this10->axisx = nx5;
            												}
            											}
HXDLIN(5787)											goto _hx_goto_321;
            										}
HXDLIN(5787)										{
HXLINE(5787)											xx = ( (Float)(0) );
HXDLIN(5787)											xy = (-(by) / Kc);
            										}
HXDLIN(5787)										Float vn1 = ((Kb * xy) + bx);
HXDLIN(5787)										bool _hx_tmp5;
HXDLIN(5787)										if ((xy >= 0)) {
HXLINE(5787)											_hx_tmp5 = (vn1 >= 0);
            										}
            										else {
HXLINE(5787)											_hx_tmp5 = false;
            										}
HXDLIN(5787)										if (_hx_tmp5) {
HXLINE(5787)											{
HXLINE(5787)												Float t15 = ((xx + xy) * arb->b1->imass);
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb15 = arb->b1;
HXDLIN(5787)												arb15->posx = (arb15->posx - (gnormx * t15));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb16 = arb->b1;
HXDLIN(5787)												arb16->posy = (arb16->posy - (gnormy * t15));
            											}
HXDLIN(5787)											{
HXLINE(5787)												 ::zpp_nape::phys::ZPP_Body _this12 = arb->b1;
HXDLIN(5787)												Float dr6 = (-(arb->b1->iinertia) * ((rn1a * xx) + (rn2a * xy)));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body _this13 = _this12;
HXDLIN(5787)												_this13->rot = (_this13->rot + dr6);
HXDLIN(5787)												if (((dr6 * dr6) > ((Float)0.0001))) {
HXLINE(5787)													_this12->axisx = ::Math_obj::sin(_this12->rot);
HXDLIN(5787)													_this12->axisy = ::Math_obj::cos(_this12->rot);
            												}
            												else {
HXLINE(5787)													Float d26 = (dr6 * dr6);
HXDLIN(5787)													Float p6 = (( (Float)(1) ) - (((Float)0.5) * d26));
HXDLIN(5787)													Float m6 = (( (Float)(1) ) - ((d26 * d26) / ( (Float)(8) )));
HXDLIN(5787)													Float nx6 = (((p6 * _this12->axisx) + (dr6 * _this12->axisy)) * m6);
HXDLIN(5787)													_this12->axisy = (((p6 * _this12->axisy) - (dr6 * _this12->axisx)) * m6);
HXDLIN(5787)													_this12->axisx = nx6;
            												}
            											}
HXDLIN(5787)											{
HXLINE(5787)												Float t16 = ((xx + xy) * arb->b2->imass);
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb17 = arb->b2;
HXDLIN(5787)												arb17->posx = (arb17->posx + (gnormx * t16));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body arb18 = arb->b2;
HXDLIN(5787)												arb18->posy = (arb18->posy + (gnormy * t16));
            											}
HXDLIN(5787)											{
HXLINE(5787)												 ::zpp_nape::phys::ZPP_Body _this14 = arb->b2;
HXDLIN(5787)												Float dr7 = (arb->b2->iinertia * ((rn1b * xx) + (rn2b * xy)));
HXDLIN(5787)												 ::zpp_nape::phys::ZPP_Body _this15 = _this14;
HXDLIN(5787)												_this15->rot = (_this15->rot + dr7);
HXDLIN(5787)												if (((dr7 * dr7) > ((Float)0.0001))) {
HXLINE(5787)													_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN(5787)													_this14->axisy = ::Math_obj::cos(_this14->rot);
            												}
            												else {
HXLINE(5787)													Float d27 = (dr7 * dr7);
HXDLIN(5787)													Float p7 = (( (Float)(1) ) - (((Float)0.5) * d27));
HXDLIN(5787)													Float m7 = (( (Float)(1) ) - ((d27 * d27) / ( (Float)(8) )));
HXDLIN(5787)													Float nx7 = (((p7 * _this14->axisx) + (dr7 * _this14->axisy)) * m7);
HXDLIN(5787)													_this14->axisy = (((p7 * _this14->axisy) - (dr7 * _this14->axisx)) * m7);
HXDLIN(5787)													_this14->axisx = nx7;
            												}
            											}
HXDLIN(5787)											goto _hx_goto_321;
            										}
HXDLIN(5787)										if (!(false)) {
HXLINE(5787)											goto _hx_goto_321;
            										}
            									}
            									_hx_goto_321:;
            								}
            								else {
HXLINE(5787)									Float rn11 = ((gnormy * c1r1x) - (gnormx * c1r1y));
HXDLIN(5787)									Float rn21 = ((gnormy * c1r2x) - (gnormx * c1r2y));
HXDLIN(5787)									Float K1 = (((arb->b2->smass + ((rn21 * rn21) * arb->b2->sinertia)) + arb->b1->smass) + ((rn11 * rn11) * arb->b1->sinertia));
HXDLIN(5787)									if ((K1 != 0)) {
HXLINE(5787)										Float jn1 = ((-(arb->biasCoef) * err1) / K1);
HXDLIN(5787)										Float Jx1 = ((Float)0.0);
HXDLIN(5787)										Float Jy1 = ((Float)0.0);
HXDLIN(5787)										{
HXLINE(5787)											Float t17 = jn1;
HXDLIN(5787)											Jx1 = (gnormx * t17);
HXDLIN(5787)											Jy1 = (gnormy * t17);
            										}
HXDLIN(5787)										{
HXLINE(5787)											Float t18 = arb->b1->imass;
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb19 = arb->b1;
HXDLIN(5787)											arb19->posx = (arb19->posx - (Jx1 * t18));
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb20 = arb->b1;
HXDLIN(5787)											arb20->posy = (arb20->posy - (Jy1 * t18));
            										}
HXDLIN(5787)										{
HXLINE(5787)											 ::zpp_nape::phys::ZPP_Body _this16 = arb->b1;
HXDLIN(5787)											Float dr8 = ((-(rn11) * arb->b1->iinertia) * jn1);
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body _this17 = _this16;
HXDLIN(5787)											_this17->rot = (_this17->rot + dr8);
HXDLIN(5787)											if (((dr8 * dr8) > ((Float)0.0001))) {
HXLINE(5787)												_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN(5787)												_this16->axisy = ::Math_obj::cos(_this16->rot);
            											}
            											else {
HXLINE(5787)												Float d28 = (dr8 * dr8);
HXDLIN(5787)												Float p8 = (( (Float)(1) ) - (((Float)0.5) * d28));
HXDLIN(5787)												Float m8 = (( (Float)(1) ) - ((d28 * d28) / ( (Float)(8) )));
HXDLIN(5787)												Float nx8 = (((p8 * _this16->axisx) + (dr8 * _this16->axisy)) * m8);
HXDLIN(5787)												_this16->axisy = (((p8 * _this16->axisy) - (dr8 * _this16->axisx)) * m8);
HXDLIN(5787)												_this16->axisx = nx8;
            											}
            										}
HXDLIN(5787)										{
HXLINE(5787)											Float t19 = arb->b2->imass;
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb21 = arb->b2;
HXDLIN(5787)											arb21->posx = (arb21->posx + (Jx1 * t19));
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body arb22 = arb->b2;
HXDLIN(5787)											arb22->posy = (arb22->posy + (Jy1 * t19));
            										}
HXDLIN(5787)										{
HXLINE(5787)											 ::zpp_nape::phys::ZPP_Body _this18 = arb->b2;
HXDLIN(5787)											Float dr9 = ((rn21 * arb->b2->iinertia) * jn1);
HXDLIN(5787)											 ::zpp_nape::phys::ZPP_Body _this19 = _this18;
HXDLIN(5787)											_this19->rot = (_this19->rot + dr9);
HXDLIN(5787)											if (((dr9 * dr9) > ((Float)0.0001))) {
HXLINE(5787)												_this18->axisx = ::Math_obj::sin(_this18->rot);
HXDLIN(5787)												_this18->axisy = ::Math_obj::cos(_this18->rot);
            											}
            											else {
HXLINE(5787)												Float d29 = (dr9 * dr9);
HXDLIN(5787)												Float p9 = (( (Float)(1) ) - (((Float)0.5) * d29));
HXDLIN(5787)												Float m9 = (( (Float)(1) ) - ((d29 * d29) / ( (Float)(8) )));
HXDLIN(5787)												Float nx9 = (((p9 * _this18->axisx) + (dr9 * _this18->axisy)) * m9);
HXDLIN(5787)												_this18->axisy = (((p9 * _this18->axisy) - (dr9 * _this18->axisx)) * m9);
HXDLIN(5787)												_this18->axisx = nx9;
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXLINE(5791)					arbi = arbi->next;
HXLINE(5792)					bool _hx_tmp6;
HXDLIN(5792)					if (fst) {
HXLINE(5792)						_hx_tmp6 = hx::IsNull( arbi );
            					}
            					else {
HXLINE(5792)						_hx_tmp6 = false;
            					}
HXDLIN(5792)					if (_hx_tmp6) {
HXLINE(5793)						arbi = this->c_arbiters_true->head;
HXLINE(5794)						fst = false;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iteratePos,(void))

bool ZPP_Space_obj::group_ignore( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5802_group_ignore)
HXLINE(5803)		 ::zpp_nape::phys::ZPP_Interactor cur = s1;
HXDLIN(5803)		while(true){
HXLINE(5803)			bool _hx_tmp;
HXDLIN(5803)			if (hx::IsNotNull( cur )) {
HXLINE(5803)				_hx_tmp = hx::IsNull( cur->group );
            			}
            			else {
HXLINE(5803)				_hx_tmp = false;
            			}
HXDLIN(5803)			if (!(_hx_tmp)) {
HXLINE(5803)				goto _hx_goto_323;
            			}
HXDLIN(5803)			if (hx::IsNotNull( cur->ishape )) {
HXLINE(5803)				cur = cur->ishape->body;
            			}
            			else {
HXLINE(5803)				if (hx::IsNotNull( cur->icompound )) {
HXLINE(5803)					cur = cur->icompound->compound;
            				}
            				else {
HXLINE(5803)					cur = cur->ibody->compound;
            				}
            			}
            		}
            		_hx_goto_323:;
HXDLIN(5803)		 ::zpp_nape::dynamics::ZPP_InteractionGroup g1;
HXDLIN(5803)		if (hx::IsNull( cur )) {
HXLINE(5803)			g1 = null();
            		}
            		else {
HXLINE(5803)			g1 = cur->group;
            		}
HXLINE(5804)		if (hx::IsNull( g1 )) {
HXLINE(5804)			return false;
            		}
            		else {
HXLINE(5806)			 ::zpp_nape::phys::ZPP_Interactor cur1 = s2;
HXDLIN(5806)			while(true){
HXLINE(5806)				bool _hx_tmp1;
HXDLIN(5806)				if (hx::IsNotNull( cur1 )) {
HXLINE(5806)					_hx_tmp1 = hx::IsNull( cur1->group );
            				}
            				else {
HXLINE(5806)					_hx_tmp1 = false;
            				}
HXDLIN(5806)				if (!(_hx_tmp1)) {
HXLINE(5806)					goto _hx_goto_324;
            				}
HXDLIN(5806)				if (hx::IsNotNull( cur1->ishape )) {
HXLINE(5806)					cur1 = cur1->ishape->body;
            				}
            				else {
HXLINE(5806)					if (hx::IsNotNull( cur1->icompound )) {
HXLINE(5806)						cur1 = cur1->icompound->compound;
            					}
            					else {
HXLINE(5806)						cur1 = cur1->ibody->compound;
            					}
            				}
            			}
            			_hx_goto_324:;
HXDLIN(5806)			 ::zpp_nape::dynamics::ZPP_InteractionGroup g2;
HXDLIN(5806)			if (hx::IsNull( cur1 )) {
HXLINE(5806)				g2 = null();
            			}
            			else {
HXLINE(5806)				g2 = cur1->group;
            			}
HXLINE(5807)			if (hx::IsNull( g2 )) {
HXLINE(5807)				return false;
            			}
            			else {
HXLINE(5809)				bool ret = false;
HXLINE(5810)				while(true){
HXLINE(5810)					bool _hx_tmp2;
HXDLIN(5810)					if (hx::IsNotNull( g1 )) {
HXLINE(5810)						_hx_tmp2 = hx::IsNotNull( g2 );
            					}
            					else {
HXLINE(5810)						_hx_tmp2 = false;
            					}
HXDLIN(5810)					if (!(_hx_tmp2)) {
HXLINE(5810)						goto _hx_goto_325;
            					}
HXLINE(5811)					if (hx::IsEq( g1,g2 )) {
HXLINE(5812)						ret = g1->ignore;
HXLINE(5813)						goto _hx_goto_325;
            					}
HXLINE(5815)					if ((g1->depth < g2->depth)) {
HXLINE(5815)						g2 = g2->group;
            					}
            					else {
HXLINE(5816)						g1 = g1->group;
            					}
            				}
            				_hx_goto_325:;
HXLINE(5818)				return ret;
            			}
            		}
HXLINE(5804)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,group_ignore,return )

int ZPP_Space_obj::interactionType( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2, ::zpp_nape::phys::ZPP_Body b1, ::zpp_nape::phys::ZPP_Body b2){
            	HX_STACKFRAME(&_hx_pos_76b1af9228667226_5824_interactionType)
HXLINE(5841)		bool con_ignore;
HXLINE(5842)		{
HXLINE(5843)			con_ignore = false;
HXLINE(5844)			{
HXLINE(5845)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;
HXLINE(5846)				while(hx::IsNotNull( cx_ite )){
HXLINE(5847)					 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXLINE(5849)					bool _hx_tmp;
HXDLIN(5849)					if (con->ignore) {
HXLINE(5849)						_hx_tmp = con->pair_exists(b1->id,b2->id);
            					}
            					else {
HXLINE(5849)						_hx_tmp = false;
            					}
HXDLIN(5849)					if (_hx_tmp) {
HXLINE(5850)						con_ignore = true;
HXLINE(5851)						goto _hx_goto_327;
            					}
HXLINE(5854)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_327:;
            			}
            		}
HXLINE(5858)		bool _hx_tmp1;
HXDLIN(5858)		if (!(con_ignore)) {
HXLINE(5858)			 ::zpp_nape::phys::ZPP_Interactor cur = s1;
HXDLIN(5858)			while(true){
HXLINE(5858)				bool _hx_tmp2;
HXDLIN(5858)				if (hx::IsNotNull( cur )) {
HXLINE(5858)					_hx_tmp2 = hx::IsNull( cur->group );
            				}
            				else {
HXLINE(5858)					_hx_tmp2 = false;
            				}
HXDLIN(5858)				if (!(_hx_tmp2)) {
HXLINE(5858)					goto _hx_goto_328;
            				}
HXDLIN(5858)				if (hx::IsNotNull( cur->ishape )) {
HXLINE(5858)					cur = cur->ishape->body;
            				}
            				else {
HXLINE(5858)					if (hx::IsNotNull( cur->icompound )) {
HXLINE(5858)						cur = cur->icompound->compound;
            					}
            					else {
HXLINE(5858)						cur = cur->ibody->compound;
            					}
            				}
            			}
            			_hx_goto_328:;
HXDLIN(5858)			 ::zpp_nape::dynamics::ZPP_InteractionGroup g1;
HXDLIN(5858)			if (hx::IsNull( cur )) {
HXLINE(5858)				g1 = null();
            			}
            			else {
HXLINE(5858)				g1 = cur->group;
            			}
HXDLIN(5858)			bool _hx_tmp3;
HXDLIN(5858)			if (hx::IsNull( g1 )) {
HXLINE(5858)				_hx_tmp3 = false;
            			}
            			else {
HXLINE(5858)				 ::zpp_nape::phys::ZPP_Interactor cur1 = s2;
HXDLIN(5858)				while(true){
HXLINE(5858)					bool _hx_tmp4;
HXDLIN(5858)					if (hx::IsNotNull( cur1 )) {
HXLINE(5858)						_hx_tmp4 = hx::IsNull( cur1->group );
            					}
            					else {
HXLINE(5858)						_hx_tmp4 = false;
            					}
HXDLIN(5858)					if (!(_hx_tmp4)) {
HXLINE(5858)						goto _hx_goto_329;
            					}
HXDLIN(5858)					if (hx::IsNotNull( cur1->ishape )) {
HXLINE(5858)						cur1 = cur1->ishape->body;
            					}
            					else {
HXLINE(5858)						if (hx::IsNotNull( cur1->icompound )) {
HXLINE(5858)							cur1 = cur1->icompound->compound;
            						}
            						else {
HXLINE(5858)							cur1 = cur1->ibody->compound;
            						}
            					}
            				}
            				_hx_goto_329:;
HXDLIN(5858)				 ::zpp_nape::dynamics::ZPP_InteractionGroup g2;
HXDLIN(5858)				if (hx::IsNull( cur1 )) {
HXLINE(5858)					g2 = null();
            				}
            				else {
HXLINE(5858)					g2 = cur1->group;
            				}
HXDLIN(5858)				if (hx::IsNull( g2 )) {
HXLINE(5858)					_hx_tmp3 = false;
            				}
            				else {
HXLINE(5858)					bool ret = false;
HXDLIN(5858)					while(true){
HXLINE(5858)						bool _hx_tmp5;
HXDLIN(5858)						if (hx::IsNotNull( g1 )) {
HXLINE(5858)							_hx_tmp5 = hx::IsNotNull( g2 );
            						}
            						else {
HXLINE(5858)							_hx_tmp5 = false;
            						}
HXDLIN(5858)						if (!(_hx_tmp5)) {
HXLINE(5858)							goto _hx_goto_330;
            						}
HXDLIN(5858)						if (hx::IsEq( g1,g2 )) {
HXLINE(5858)							ret = g1->ignore;
HXDLIN(5858)							goto _hx_goto_330;
            						}
HXDLIN(5858)						if ((g1->depth < g2->depth)) {
HXLINE(5858)							g2 = g2->group;
            						}
            						else {
HXLINE(5858)							g1 = g1->group;
            						}
            					}
            					_hx_goto_330:;
HXDLIN(5858)					_hx_tmp3 = ret;
            				}
            			}
HXDLIN(5858)			_hx_tmp1 = !(_hx_tmp3);
            		}
            		else {
HXLINE(5858)			_hx_tmp1 = false;
            		}
HXDLIN(5858)		if (_hx_tmp1) {
HXLINE(5859)			bool _hx_tmp6;
HXDLIN(5859)			bool _hx_tmp7;
HXDLIN(5859)			if (!(s1->sensorEnabled)) {
HXLINE(5859)				_hx_tmp7 = s2->sensorEnabled;
            			}
            			else {
HXLINE(5859)				_hx_tmp7 = true;
            			}
HXDLIN(5859)			if (_hx_tmp7) {
HXLINE(5859)				 ::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;
HXDLIN(5859)				 ::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;
HXDLIN(5859)				if (((_this->sensorMask & x->sensorGroup) != 0)) {
HXLINE(5859)					_hx_tmp6 = ((x->sensorMask & _this->sensorGroup) != 0);
            				}
            				else {
HXLINE(5859)					_hx_tmp6 = false;
            				}
            			}
            			else {
HXLINE(5859)				_hx_tmp6 = false;
            			}
HXDLIN(5859)			if (_hx_tmp6) {
HXLINE(5860)				return 2;
            			}
            			else {
HXLINE(5862)				bool _hx_tmp8;
HXDLIN(5862)				bool _hx_tmp9;
HXDLIN(5862)				bool _hx_tmp10;
HXDLIN(5862)				if (!(s1->fluidEnabled)) {
HXLINE(5862)					_hx_tmp10 = s2->fluidEnabled;
            				}
            				else {
HXLINE(5862)					_hx_tmp10 = true;
            				}
HXDLIN(5862)				if (_hx_tmp10) {
HXLINE(5862)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = s1->filter;
HXDLIN(5862)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x1 = s2->filter;
HXDLIN(5862)					if (((_this1->fluidMask & x1->fluidGroup) != 0)) {
HXLINE(5862)						_hx_tmp9 = ((x1->fluidMask & _this1->fluidGroup) != 0);
            					}
            					else {
HXLINE(5862)						_hx_tmp9 = false;
            					}
            				}
            				else {
HXLINE(5862)					_hx_tmp9 = false;
            				}
HXDLIN(5862)				if (_hx_tmp9) {
HXLINE(5862)					bool _hx_tmp11;
HXDLIN(5862)					bool _hx_tmp12;
HXDLIN(5862)					bool _hx_tmp13;
HXDLIN(5862)					if ((b1->imass == 0)) {
HXLINE(5862)						_hx_tmp13 = (b2->imass == 0);
            					}
            					else {
HXLINE(5862)						_hx_tmp13 = false;
            					}
HXDLIN(5862)					if (_hx_tmp13) {
HXLINE(5862)						_hx_tmp12 = (b1->iinertia == 0);
            					}
            					else {
HXLINE(5862)						_hx_tmp12 = false;
            					}
HXDLIN(5862)					if (_hx_tmp12) {
HXLINE(5862)						_hx_tmp11 = (b2->iinertia == 0);
            					}
            					else {
HXLINE(5862)						_hx_tmp11 = false;
            					}
HXDLIN(5862)					_hx_tmp8 = !(_hx_tmp11);
            				}
            				else {
HXLINE(5862)					_hx_tmp8 = false;
            				}
HXDLIN(5862)				if (_hx_tmp8) {
HXLINE(5863)					return 0;
            				}
            				else {
HXLINE(5865)					bool _hx_tmp14;
HXDLIN(5865)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this2 = s1->filter;
HXDLIN(5865)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x2 = s2->filter;
HXDLIN(5865)					bool _hx_tmp15;
HXDLIN(5865)					if (((_this2->collisionMask & x2->collisionGroup) != 0)) {
HXLINE(5865)						_hx_tmp15 = ((x2->collisionMask & _this2->collisionGroup) != 0);
            					}
            					else {
HXLINE(5865)						_hx_tmp15 = false;
            					}
HXDLIN(5865)					if (_hx_tmp15) {
HXLINE(5865)						bool _hx_tmp16;
HXDLIN(5865)						bool _hx_tmp17;
HXDLIN(5865)						bool _hx_tmp18;
HXDLIN(5865)						if ((b1->imass == 0)) {
HXLINE(5865)							_hx_tmp18 = (b2->imass == 0);
            						}
            						else {
HXLINE(5865)							_hx_tmp18 = false;
            						}
HXDLIN(5865)						if (_hx_tmp18) {
HXLINE(5865)							_hx_tmp17 = (b1->iinertia == 0);
            						}
            						else {
HXLINE(5865)							_hx_tmp17 = false;
            						}
HXDLIN(5865)						if (_hx_tmp17) {
HXLINE(5865)							_hx_tmp16 = (b2->iinertia == 0);
            						}
            						else {
HXLINE(5865)							_hx_tmp16 = false;
            						}
HXDLIN(5865)						_hx_tmp14 = !(_hx_tmp16);
            					}
            					else {
HXLINE(5865)						_hx_tmp14 = false;
            					}
HXDLIN(5865)					if (_hx_tmp14) {
HXLINE(5866)						return 1;
            					}
            					else {
HXLINE(5868)						return -1;
            					}
            				}
            			}
            		}
            		else {
HXLINE(5870)			return -1;
            		}
HXLINE(5858)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,interactionType,return )

 ::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::narrowPhase( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,bool stat, ::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool continuous){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_5874_narrowPhase)
HXDLIN(5874)		 ::zpp_nape::space::ZPP_Space _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(5877)		 ::zpp_nape::dynamics::ZPP_Arbiter ret = null();
HXLINE(5878)		 ::zpp_nape::phys::ZPP_Body b1 = s1->body;
HXLINE(5879)		 ::zpp_nape::phys::ZPP_Body b2 = s2->body;
HXLINE(5880)		bool con_ignore;
HXDLIN(5880)		{
HXLINE(5880)			con_ignore = false;
HXDLIN(5880)			{
HXLINE(5880)				 ::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;
HXDLIN(5880)				while(hx::IsNotNull( cx_ite )){
HXLINE(5880)					 ::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;
HXDLIN(5880)					bool _hx_tmp;
HXDLIN(5880)					if (con->ignore) {
HXLINE(5880)						_hx_tmp = con->pair_exists(b1->id,b2->id);
            					}
            					else {
HXLINE(5880)						_hx_tmp = false;
            					}
HXDLIN(5880)					if (_hx_tmp) {
HXLINE(5880)						con_ignore = true;
HXDLIN(5880)						goto _hx_goto_332;
            					}
HXDLIN(5880)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_332:;
            			}
            		}
HXDLIN(5880)		int itype;
HXDLIN(5880)		bool itype1;
HXDLIN(5880)		if (!(con_ignore)) {
HXLINE(5880)			 ::zpp_nape::phys::ZPP_Interactor cur = s1;
HXDLIN(5880)			while(true){
HXLINE(5880)				bool itype2;
HXDLIN(5880)				if (hx::IsNotNull( cur )) {
HXLINE(5880)					itype2 = hx::IsNull( cur->group );
            				}
            				else {
HXLINE(5880)					itype2 = false;
            				}
HXDLIN(5880)				if (!(itype2)) {
HXLINE(5880)					goto _hx_goto_333;
            				}
HXDLIN(5880)				if (hx::IsNotNull( cur->ishape )) {
HXLINE(5880)					cur = cur->ishape->body;
            				}
            				else {
HXLINE(5880)					if (hx::IsNotNull( cur->icompound )) {
HXLINE(5880)						cur = cur->icompound->compound;
            					}
            					else {
HXLINE(5880)						cur = cur->ibody->compound;
            					}
            				}
            			}
            			_hx_goto_333:;
HXDLIN(5880)			 ::zpp_nape::dynamics::ZPP_InteractionGroup g1;
HXDLIN(5880)			if (hx::IsNull( cur )) {
HXLINE(5880)				g1 = null();
            			}
            			else {
HXLINE(5880)				g1 = cur->group;
            			}
HXDLIN(5880)			bool itype3;
HXDLIN(5880)			if (hx::IsNull( g1 )) {
HXLINE(5880)				itype3 = false;
            			}
            			else {
HXLINE(5880)				 ::zpp_nape::phys::ZPP_Interactor cur1 = s2;
HXDLIN(5880)				while(true){
HXLINE(5880)					bool itype4;
HXDLIN(5880)					if (hx::IsNotNull( cur1 )) {
HXLINE(5880)						itype4 = hx::IsNull( cur1->group );
            					}
            					else {
HXLINE(5880)						itype4 = false;
            					}
HXDLIN(5880)					if (!(itype4)) {
HXLINE(5880)						goto _hx_goto_334;
            					}
HXDLIN(5880)					if (hx::IsNotNull( cur1->ishape )) {
HXLINE(5880)						cur1 = cur1->ishape->body;
            					}
            					else {
HXLINE(5880)						if (hx::IsNotNull( cur1->icompound )) {
HXLINE(5880)							cur1 = cur1->icompound->compound;
            						}
            						else {
HXLINE(5880)							cur1 = cur1->ibody->compound;
            						}
            					}
            				}
            				_hx_goto_334:;
HXDLIN(5880)				 ::zpp_nape::dynamics::ZPP_InteractionGroup g2;
HXDLIN(5880)				if (hx::IsNull( cur1 )) {
HXLINE(5880)					g2 = null();
            				}
            				else {
HXLINE(5880)					g2 = cur1->group;
            				}
HXDLIN(5880)				if (hx::IsNull( g2 )) {
HXLINE(5880)					itype3 = false;
            				}
            				else {
HXLINE(5880)					bool ret1 = false;
HXDLIN(5880)					while(true){
HXLINE(5880)						bool itype5;
HXDLIN(5880)						if (hx::IsNotNull( g1 )) {
HXLINE(5880)							itype5 = hx::IsNotNull( g2 );
            						}
            						else {
HXLINE(5880)							itype5 = false;
            						}
HXDLIN(5880)						if (!(itype5)) {
HXLINE(5880)							goto _hx_goto_335;
            						}
HXDLIN(5880)						if (hx::IsEq( g1,g2 )) {
HXLINE(5880)							ret1 = g1->ignore;
HXDLIN(5880)							goto _hx_goto_335;
            						}
HXDLIN(5880)						if ((g1->depth < g2->depth)) {
HXLINE(5880)							g2 = g2->group;
            						}
            						else {
HXLINE(5880)							g1 = g1->group;
            						}
            					}
            					_hx_goto_335:;
HXDLIN(5880)					itype3 = ret1;
            				}
            			}
HXDLIN(5880)			itype1 = !(itype3);
            		}
            		else {
HXLINE(5880)			itype1 = false;
            		}
HXDLIN(5880)		if (itype1) {
HXLINE(5880)			bool itype6;
HXDLIN(5880)			bool itype7;
HXDLIN(5880)			if (!(s1->sensorEnabled)) {
HXLINE(5880)				itype7 = s2->sensorEnabled;
            			}
            			else {
HXLINE(5880)				itype7 = true;
            			}
HXDLIN(5880)			if (itype7) {
HXLINE(5880)				 ::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;
HXDLIN(5880)				 ::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;
HXDLIN(5880)				if (((_this->sensorMask & x->sensorGroup) != 0)) {
HXLINE(5880)					itype6 = ((x->sensorMask & _this->sensorGroup) != 0);
            				}
            				else {
HXLINE(5880)					itype6 = false;
            				}
            			}
            			else {
HXLINE(5880)				itype6 = false;
            			}
HXDLIN(5880)			if (itype6) {
HXLINE(5880)				itype = 2;
            			}
            			else {
HXLINE(5880)				bool itype8;
HXDLIN(5880)				bool itype9;
HXDLIN(5880)				bool itype10;
HXDLIN(5880)				if (!(s1->fluidEnabled)) {
HXLINE(5880)					itype10 = s2->fluidEnabled;
            				}
            				else {
HXLINE(5880)					itype10 = true;
            				}
HXDLIN(5880)				if (itype10) {
HXLINE(5880)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = s1->filter;
HXDLIN(5880)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x1 = s2->filter;
HXDLIN(5880)					if (((_this1->fluidMask & x1->fluidGroup) != 0)) {
HXLINE(5880)						itype9 = ((x1->fluidMask & _this1->fluidGroup) != 0);
            					}
            					else {
HXLINE(5880)						itype9 = false;
            					}
            				}
            				else {
HXLINE(5880)					itype9 = false;
            				}
HXDLIN(5880)				if (itype9) {
HXLINE(5880)					bool itype11;
HXDLIN(5880)					bool itype12;
HXDLIN(5880)					bool itype13;
HXDLIN(5880)					if ((b1->imass == 0)) {
HXLINE(5880)						itype13 = (b2->imass == 0);
            					}
            					else {
HXLINE(5880)						itype13 = false;
            					}
HXDLIN(5880)					if (itype13) {
HXLINE(5880)						itype12 = (b1->iinertia == 0);
            					}
            					else {
HXLINE(5880)						itype12 = false;
            					}
HXDLIN(5880)					if (itype12) {
HXLINE(5880)						itype11 = (b2->iinertia == 0);
            					}
            					else {
HXLINE(5880)						itype11 = false;
            					}
HXDLIN(5880)					itype8 = !(itype11);
            				}
            				else {
HXLINE(5880)					itype8 = false;
            				}
HXDLIN(5880)				if (itype8) {
HXLINE(5880)					itype = 0;
            				}
            				else {
HXLINE(5880)					bool itype14;
HXDLIN(5880)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this2 = s1->filter;
HXDLIN(5880)					 ::zpp_nape::dynamics::ZPP_InteractionFilter x2 = s2->filter;
HXDLIN(5880)					bool itype15;
HXDLIN(5880)					if (((_this2->collisionMask & x2->collisionGroup) != 0)) {
HXLINE(5880)						itype15 = ((x2->collisionMask & _this2->collisionGroup) != 0);
            					}
            					else {
HXLINE(5880)						itype15 = false;
            					}
HXDLIN(5880)					if (itype15) {
HXLINE(5880)						bool itype16;
HXDLIN(5880)						bool itype17;
HXDLIN(5880)						bool itype18;
HXDLIN(5880)						if ((b1->imass == 0)) {
HXLINE(5880)							itype18 = (b2->imass == 0);
            						}
            						else {
HXLINE(5880)							itype18 = false;
            						}
HXDLIN(5880)						if (itype18) {
HXLINE(5880)							itype17 = (b1->iinertia == 0);
            						}
            						else {
HXLINE(5880)							itype17 = false;
            						}
HXDLIN(5880)						if (itype17) {
HXLINE(5880)							itype16 = (b2->iinertia == 0);
            						}
            						else {
HXLINE(5880)							itype16 = false;
            						}
HXDLIN(5880)						itype14 = !(itype16);
            					}
            					else {
HXLINE(5880)						itype14 = false;
            					}
HXDLIN(5880)					if (itype14) {
HXLINE(5880)						itype = 1;
            					}
            					else {
HXLINE(5880)						itype = -1;
            					}
            				}
            			}
            		}
            		else {
HXLINE(5880)			itype = -1;
            		}
HXLINE(5881)		if ((itype != -1)) {
HXLINE(5882)			 ::zpp_nape::shape::ZPP_Shape sa;
HXDLIN(5882)			 ::zpp_nape::shape::ZPP_Shape sb;
HXLINE(5883)			if ((s1->type > s2->type)) {
HXLINE(5884)				sa = s2;
HXLINE(5885)				sb = s1;
            			}
            			else {
HXLINE(5887)				if ((s1->type == s2->type)) {
HXLINE(5888)					if ((s1->id < s2->id)) {
HXLINE(5889)						sa = s1;
HXLINE(5890)						sb = s2;
            					}
            					else {
HXLINE(5893)						sb = s1;
HXLINE(5894)						sa = s2;
            					}
            				}
            				else {
HXLINE(5898)					sa = s1;
HXLINE(5899)					sb = s2;
            				}
            			}
HXLINE(5901)			bool reverse = hx::IsEq( sa,s2 );
HXLINE(5902)			if ((itype == 0)) {
HXLINE(5903)				 ::zpp_nape::dynamics::ZPP_Arbiter xarb;
HXDLIN(5903)				if (hx::IsNull( in_arb )) {
HXLINE(5904)					 ::zpp_nape::dynamics::ZPP_Arbiter ret2 = null();
HXLINE(5905)					 ::zpp_nape::phys::ZPP_Body b;
HXDLIN(5905)					if ((b1->arbiters->length < b2->arbiters->length)) {
HXLINE(5905)						b = b1;
            					}
            					else {
HXLINE(5905)						b = b2;
            					}
HXLINE(5906)					{
HXLINE(5907)						 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite1 = b->arbiters->head;
HXLINE(5908)						while(hx::IsNotNull( cx_ite1 )){
HXLINE(5909)							 ::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite1->elt;
HXLINE(5919)							bool xarb1;
HXDLIN(5919)							if ((arb->id == sa->id)) {
HXLINE(5919)								xarb1 = (arb->di == sb->id);
            							}
            							else {
HXLINE(5919)								xarb1 = false;
            							}
HXDLIN(5919)							if (xarb1) {
HXLINE(5920)								ret2 = arb;
HXLINE(5921)								goto _hx_goto_336;
            							}
HXLINE(5924)							cx_ite1 = cx_ite1->next;
            						}
            						_hx_goto_336:;
            					}
HXLINE(5903)					xarb = ret2;
            				}
            				else {
HXLINE(5903)					xarb = in_arb;
            				}
HXLINE(5929)				bool first = hx::IsNull( xarb );
HXLINE(5930)				 ::zpp_nape::dynamics::ZPP_FluidArbiter arb1;
HXLINE(5931)				bool swapped = false;
HXLINE(5932)				if (first) {
HXLINE(5933)					if (hx::IsNull( ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(5934)						arb1 =  ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(5940)						arb1 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(5941)						::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb1->next;
HXLINE(5942)						arb1->next = null();
            					}
            				}
            				else {
HXLINE(5950)					if (hx::IsNull( xarb->fluidarb )) {
HXLINE(5951)						{
HXLINE(5951)							xarb->cleared = true;
HXDLIN(5951)							{
HXLINE(5951)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this3 = xarb->b1->arbiters;
HXDLIN(5951)								{
HXLINE(5951)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();
HXDLIN(5951)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur2 = _this3->head;
HXDLIN(5951)									bool ret3 = false;
HXDLIN(5951)									while(hx::IsNotNull( cur2 )){
HXLINE(5951)										if (hx::IsEq( cur2->elt,xarb )) {
HXLINE(5951)											{
HXLINE(5951)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old;
HXDLIN(5951)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret4;
HXDLIN(5951)												if (hx::IsNull( pre )) {
HXLINE(5951)													old = _this3->head;
HXDLIN(5951)													ret4 = old->next;
HXDLIN(5951)													_this3->head = ret4;
HXDLIN(5951)													if (hx::IsNull( _this3->head )) {
HXLINE(5951)														_this3->pushmod = true;
            													}
            												}
            												else {
HXLINE(5951)													old = pre->next;
HXDLIN(5951)													ret4 = old->next;
HXDLIN(5951)													pre->next = ret4;
HXDLIN(5951)													if (hx::IsNull( ret4 )) {
HXLINE(5951)														_this3->pushmod = true;
            													}
            												}
HXDLIN(5951)												{
HXLINE(5951)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;
HXDLIN(5951)													o->elt = null();
HXDLIN(5951)													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5951)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            												}
HXDLIN(5951)												_this3->modified = true;
HXDLIN(5951)												_this3->length--;
HXDLIN(5951)												_this3->pushmod = true;
            											}
HXDLIN(5951)											ret3 = true;
HXDLIN(5951)											goto _hx_goto_337;
            										}
HXDLIN(5951)										pre = cur2;
HXDLIN(5951)										cur2 = cur2->next;
            									}
            									_hx_goto_337:;
            								}
            							}
HXDLIN(5951)							{
HXLINE(5951)								 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this4 = xarb->b2->arbiters;
HXDLIN(5951)								{
HXLINE(5951)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();
HXDLIN(5951)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur3 = _this4->head;
HXDLIN(5951)									bool ret5 = false;
HXDLIN(5951)									while(hx::IsNotNull( cur3 )){
HXLINE(5951)										if (hx::IsEq( cur3->elt,xarb )) {
HXLINE(5951)											{
HXLINE(5951)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old1;
HXDLIN(5951)												 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret6;
HXDLIN(5951)												if (hx::IsNull( pre1 )) {
HXLINE(5951)													old1 = _this4->head;
HXDLIN(5951)													ret6 = old1->next;
HXDLIN(5951)													_this4->head = ret6;
HXDLIN(5951)													if (hx::IsNull( _this4->head )) {
HXLINE(5951)														_this4->pushmod = true;
            													}
            												}
            												else {
HXLINE(5951)													old1 = pre1->next;
HXDLIN(5951)													ret6 = old1->next;
HXDLIN(5951)													pre1->next = ret6;
HXDLIN(5951)													if (hx::IsNull( ret6 )) {
HXLINE(5951)														_this4->pushmod = true;
            													}
            												}
HXDLIN(5951)												{
HXLINE(5951)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o1 = old1;
HXDLIN(5951)													o1->elt = null();
HXDLIN(5951)													o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5951)													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            												}
HXDLIN(5951)												_this4->modified = true;
HXDLIN(5951)												_this4->length--;
HXDLIN(5951)												_this4->pushmod = true;
            											}
HXDLIN(5951)											ret5 = true;
HXDLIN(5951)											goto _hx_goto_338;
            										}
HXDLIN(5951)										pre1 = cur3;
HXDLIN(5951)										cur3 = cur3->next;
            									}
            									_hx_goto_338:;
            								}
            							}
HXDLIN(5951)							if (hx::IsNotNull( xarb->pair )) {
HXLINE(5951)								xarb->pair->arb = null();
HXDLIN(5951)								xarb->pair = null();
            							}
HXDLIN(5951)							xarb->active = false;
HXDLIN(5951)							this->f_arbiters->modified = true;
            						}
HXLINE(5953)						if (hx::IsNull( ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(5954)							arb1 =  ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5960)							arb1 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(5961)							::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb1->next;
HXLINE(5962)							arb1->next = null();
            						}
HXLINE(5969)						arb1->intchange = true;
HXLINE(5970)						first = true;
HXLINE(5971)						swapped = true;
            					}
            					else {
HXLINE(5973)						arb1 = xarb->fluidarb;
            					}
            				}
HXLINE(5976)				int inttype = 4;
HXLINE(5977)				bool ret7;
HXDLIN(5977)				bool ret8;
HXDLIN(5977)				if (!(first)) {
HXLINE(5977)					ret8 = (arb1->stamp != this->stamp);
            				}
            				else {
HXLINE(5977)					ret8 = true;
            				}
HXDLIN(5977)				if (!(ret8)) {
HXLINE(5977)					ret7 = continuous;
            				}
            				else {
HXLINE(5977)					ret7 = true;
            				}
HXDLIN(5977)				if (ret7) {
HXLINE(5978)					arb1->stamp = this->stamp;
HXLINE(5979)					if (::zpp_nape::geom::ZPP_Collide_obj::flowCollide(sa,sb,arb1)) {
HXLINE(5980)						if (first) {
HXLINE(5981)							{
HXLINE(5981)								int di = sb->id;
HXDLIN(5981)								{
HXLINE(5981)									arb1->b1 = s1->body;
HXDLIN(5981)									arb1->ws1 = s1;
HXDLIN(5981)									arb1->b2 = s2->body;
HXDLIN(5981)									arb1->ws2 = s2;
HXDLIN(5981)									arb1->id = sa->id;
HXDLIN(5981)									arb1->di = di;
HXDLIN(5981)									{
HXLINE(5981)										 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this5 = arb1->b1->arbiters;
HXDLIN(5981)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret9;
HXDLIN(5981)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(5981)											ret9 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(5981)											ret9 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5981)											::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret9->next;
HXDLIN(5981)											ret9->next = null();
            										}
HXDLIN(5981)										ret9->elt = arb1;
HXDLIN(5981)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = ret9;
HXDLIN(5981)										temp->next = _this5->head;
HXDLIN(5981)										_this5->head = temp;
HXDLIN(5981)										_this5->modified = true;
HXDLIN(5981)										_this5->length++;
            									}
HXDLIN(5981)									{
HXLINE(5981)										 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this6 = arb1->b2->arbiters;
HXDLIN(5981)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret10;
HXDLIN(5981)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(5981)											ret10 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(5981)											ret10 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(5981)											::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret10->next;
HXDLIN(5981)											ret10->next = null();
            										}
HXDLIN(5981)										ret10->elt = arb1;
HXDLIN(5981)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp1 = ret10;
HXDLIN(5981)										temp1->next = _this6->head;
HXDLIN(5981)										_this6->head = temp1;
HXDLIN(5981)										_this6->modified = true;
HXDLIN(5981)										_this6->length++;
            									}
HXDLIN(5981)									arb1->active = true;
HXDLIN(5981)									arb1->present = 0;
HXDLIN(5981)									arb1->cleared = false;
HXDLIN(5981)									arb1->sleeping = false;
HXDLIN(5981)									arb1->fresh = false;
HXDLIN(5981)									arb1->presentable = false;
            								}
HXDLIN(5981)								{
HXLINE(5981)									arb1->nx = ( (Float)(0) );
HXDLIN(5981)									arb1->ny = ( (Float)(1) );
            								}
HXDLIN(5981)								{
HXLINE(5981)									arb1->dampx = ( (Float)(0) );
HXDLIN(5981)									arb1->dampy = ( (Float)(0) );
            								}
HXDLIN(5981)								arb1->adamp = ((Float)0.0);
            							}
HXLINE(5982)							{
HXLINE(5982)								 ::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this7 = this->f_arbiters;
HXDLIN(5982)								 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret11;
HXDLIN(5982)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(5982)									ret11 =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(5982)									ret11 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(5982)									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret11->next;
HXDLIN(5982)									ret11->next = null();
            								}
HXDLIN(5982)								ret11->elt = arb1;
HXDLIN(5982)								 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp2 = ret11;
HXDLIN(5982)								temp2->next = _this7->head;
HXDLIN(5982)								_this7->head = temp2;
HXDLIN(5982)								_this7->modified = true;
HXDLIN(5982)								_this7->length++;
            							}
HXLINE(5983)							arb1->fresh = !(swapped);
            						}
            						else {
HXLINE(5986)							bool ret12;
HXDLIN(5986)							if ((arb1->up_stamp >= (this->stamp - 1))) {
HXLINE(5986)								if ((arb1->endGenerated == this->stamp)) {
HXLINE(5986)									ret12 = continuous;
            								}
            								else {
HXLINE(5986)									ret12 = false;
            								}
            							}
            							else {
HXLINE(5986)								ret12 = true;
            							}
HXDLIN(5986)							arb1->fresh = ret12;
            						}
HXLINE(5988)						arb1->up_stamp = arb1->stamp;
HXLINE(5989)						bool ret13;
HXDLIN(5989)						if (!(arb1->fresh)) {
HXLINE(5989)							ret13 = ((arb1->immState & 4) == 0);
            						}
            						else {
HXLINE(5989)							ret13 = true;
            						}
HXDLIN(5989)						if (ret13) {
HXLINE(5990)							arb1->immState = 1;
HXLINE(5991)							bool anyimpure = false;
HXLINE(5992)							 ::zpp_nape::shape::ZPP_Shape arbs1;
HXDLIN(5992)							if ((arb1->ws1->id > arb1->ws2->id)) {
HXLINE(5992)								arbs1 = arb1->ws2;
            							}
            							else {
HXLINE(5992)								arbs1 = arb1->ws1;
            							}
HXLINE(5993)							 ::zpp_nape::shape::ZPP_Shape arbs2;
HXDLIN(5993)							if ((arb1->ws1->id > arb1->ws2->id)) {
HXLINE(5993)								arbs2 = arb1->ws1;
            							}
            							else {
HXLINE(5993)								arbs2 = arb1->ws2;
            							}
HXLINE(5994)							{
HXLINE(5994)								{
HXLINE(5994)									 ::zpp_nape::util::ZNPList_ZPP_Interactor _this8 = this->mrca1;
HXDLIN(5994)									{
HXLINE(5994)										while(hx::IsNotNull( _this8->head )){
HXLINE(5994)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret14 = _this8->head;
HXDLIN(5994)											_this8->head = ret14->next;
HXDLIN(5994)											{
HXLINE(5994)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor o2 = ret14;
HXDLIN(5994)												o2->elt = null();
HXDLIN(5994)												o2->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o2;
            											}
HXDLIN(5994)											if (hx::IsNull( _this8->head )) {
HXLINE(5994)												_this8->pushmod = true;
            											}
HXDLIN(5994)											_this8->modified = true;
HXDLIN(5994)											_this8->length--;
            										}
HXDLIN(5994)										_this8->pushmod = true;
            									}
            								}
HXDLIN(5994)								{
HXLINE(5994)									 ::zpp_nape::util::ZNPList_ZPP_Interactor _this9 = this->mrca2;
HXDLIN(5994)									{
HXLINE(5994)										while(hx::IsNotNull( _this9->head )){
HXLINE(5994)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret15 = _this9->head;
HXDLIN(5994)											_this9->head = ret15->next;
HXDLIN(5994)											{
HXLINE(5994)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor o3 = ret15;
HXDLIN(5994)												o3->elt = null();
HXDLIN(5994)												o3->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o3;
            											}
HXDLIN(5994)											if (hx::IsNull( _this9->head )) {
HXLINE(5994)												_this9->pushmod = true;
            											}
HXDLIN(5994)											_this9->modified = true;
HXDLIN(5994)											_this9->length--;
            										}
HXDLIN(5994)										_this9->pushmod = true;
            									}
            								}
HXDLIN(5994)								if (hx::IsNotNull( arbs1->cbSet )) {
HXLINE(5994)									 ::zpp_nape::util::ZNPList_ZPP_Interactor _this10 = this->mrca1;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret16;
HXDLIN(5994)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5994)										ret16 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(5994)										ret16 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret16->next;
HXDLIN(5994)										ret16->next = null();
            									}
HXDLIN(5994)									ret16->elt = arbs1;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp3 = ret16;
HXDLIN(5994)									temp3->next = _this10->head;
HXDLIN(5994)									_this10->head = temp3;
HXDLIN(5994)									_this10->modified = true;
HXDLIN(5994)									_this10->length++;
            								}
HXDLIN(5994)								if (hx::IsNotNull( arbs1->body->cbSet )) {
HXLINE(5994)									 ::zpp_nape::util::ZNPList_ZPP_Interactor _this11 = this->mrca1;
HXDLIN(5994)									 ::zpp_nape::phys::ZPP_Interactor o4 = arbs1->body;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret17;
HXDLIN(5994)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5994)										ret17 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(5994)										ret17 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret17->next;
HXDLIN(5994)										ret17->next = null();
            									}
HXDLIN(5994)									ret17->elt = o4;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp4 = ret17;
HXDLIN(5994)									temp4->next = _this11->head;
HXDLIN(5994)									_this11->head = temp4;
HXDLIN(5994)									_this11->modified = true;
HXDLIN(5994)									_this11->length++;
            								}
HXDLIN(5994)								if (hx::IsNotNull( arbs2->cbSet )) {
HXLINE(5994)									 ::zpp_nape::util::ZNPList_ZPP_Interactor _this12 = this->mrca2;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret18;
HXDLIN(5994)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5994)										ret18 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(5994)										ret18 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret18->next;
HXDLIN(5994)										ret18->next = null();
            									}
HXDLIN(5994)									ret18->elt = arbs2;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp5 = ret18;
HXDLIN(5994)									temp5->next = _this12->head;
HXDLIN(5994)									_this12->head = temp5;
HXDLIN(5994)									_this12->modified = true;
HXDLIN(5994)									_this12->length++;
            								}
HXDLIN(5994)								if (hx::IsNotNull( arbs2->body->cbSet )) {
HXLINE(5994)									 ::zpp_nape::util::ZNPList_ZPP_Interactor _this13 = this->mrca2;
HXDLIN(5994)									 ::zpp_nape::phys::ZPP_Interactor o5 = arbs2->body;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret19;
HXDLIN(5994)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5994)										ret19 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(5994)										ret19 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)										::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret19->next;
HXDLIN(5994)										ret19->next = null();
            									}
HXDLIN(5994)									ret19->elt = o5;
HXDLIN(5994)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp6 = ret19;
HXDLIN(5994)									temp6->next = _this13->head;
HXDLIN(5994)									_this13->head = temp6;
HXDLIN(5994)									_this13->modified = true;
HXDLIN(5994)									_this13->length++;
            								}
HXDLIN(5994)								 ::zpp_nape::phys::ZPP_Compound c1 = arbs1->body->compound;
HXDLIN(5994)								 ::zpp_nape::phys::ZPP_Compound c2 = arbs2->body->compound;
HXDLIN(5994)								while(hx::IsNotEq( c1,c2 )){
HXLINE(5994)									int d1;
HXDLIN(5994)									if (hx::IsNull( c1 )) {
HXLINE(5994)										d1 = 0;
            									}
            									else {
HXLINE(5994)										d1 = c1->depth;
            									}
HXDLIN(5994)									int d2;
HXDLIN(5994)									if (hx::IsNull( c2 )) {
HXLINE(5994)										d2 = 0;
            									}
            									else {
HXLINE(5994)										d2 = c2->depth;
            									}
HXDLIN(5994)									if ((d1 < d2)) {
HXLINE(5994)										if (hx::IsNotNull( c2->cbSet )) {
HXLINE(5994)											 ::zpp_nape::util::ZNPList_ZPP_Interactor _this14 = this->mrca2;
HXDLIN(5994)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret20;
HXDLIN(5994)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5994)												ret20 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(5994)												ret20 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret20->next;
HXDLIN(5994)												ret20->next = null();
            											}
HXDLIN(5994)											ret20->elt = c2;
HXDLIN(5994)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp7 = ret20;
HXDLIN(5994)											temp7->next = _this14->head;
HXDLIN(5994)											_this14->head = temp7;
HXDLIN(5994)											_this14->modified = true;
HXDLIN(5994)											_this14->length++;
            										}
HXDLIN(5994)										c2 = c2->compound;
            									}
            									else {
HXLINE(5994)										if (hx::IsNotNull( c1->cbSet )) {
HXLINE(5994)											 ::zpp_nape::util::ZNPList_ZPP_Interactor _this15 = this->mrca1;
HXDLIN(5994)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret21;
HXDLIN(5994)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(5994)												ret21 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(5994)												ret21 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(5994)												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret21->next;
HXDLIN(5994)												ret21->next = null();
            											}
HXDLIN(5994)											ret21->elt = c1;
HXDLIN(5994)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp8 = ret21;
HXDLIN(5994)											temp8->next = _this15->head;
HXDLIN(5994)											_this15->head = temp8;
HXDLIN(5994)											_this15->modified = true;
HXDLIN(5994)											_this15->length++;
            										}
HXDLIN(5994)										c1 = c1->compound;
            									}
            								}
            							}
HXLINE(5995)							{
HXLINE(5996)								 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca1->head;
HXLINE(5997)								while(hx::IsNotNull( cx_ite2 )){
HXLINE(5998)									 ::zpp_nape::phys::ZPP_Interactor i1 = cx_ite2->elt;
HXLINE(6000)									{
HXLINE(6001)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite3 = this->mrca2->head;
HXLINE(6002)										while(hx::IsNotNull( cx_ite3 )){
HXLINE(6003)											 ::zpp_nape::phys::ZPP_Interactor i2 = cx_ite3->elt;
HXLINE(6004)											{
HXLINE(6005)												 ::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;
HXLINE(6006)												 ::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;
HXLINE(6015)												 ::zpp_nape::space::ZPP_CbSetManager _this16 = cb1->manager;
HXDLIN(6015)												 ::zpp_nape::callbacks::ZPP_CbSetPair ret22 = null();
HXDLIN(6015)												 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN(6015)												if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(6015)													pairs = cb1->cbpairs;
            												}
            												else {
HXLINE(6015)													pairs = cb2->cbpairs;
            												}
HXDLIN(6015)												{
HXLINE(6015)													 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite4 = pairs->head;
HXDLIN(6015)													while(hx::IsNotNull( cx_ite4 )){
HXLINE(6015)														 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite4->elt;
HXDLIN(6015)														bool ret23;
HXDLIN(6015)														bool ret24;
HXDLIN(6015)														if (hx::IsEq( p->a,cb1 )) {
HXLINE(6015)															ret24 = hx::IsEq( p->b,cb2 );
            														}
            														else {
HXLINE(6015)															ret24 = false;
            														}
HXDLIN(6015)														if (!(ret24)) {
HXLINE(6015)															if (hx::IsEq( p->a,cb2 )) {
HXLINE(6015)																ret23 = hx::IsEq( p->b,cb1 );
            															}
            															else {
HXLINE(6015)																ret23 = false;
            															}
            														}
            														else {
HXLINE(6015)															ret23 = true;
            														}
HXDLIN(6015)														if (ret23) {
HXLINE(6015)															ret22 = p;
HXDLIN(6015)															goto _hx_goto_344;
            														}
HXDLIN(6015)														cx_ite4 = cx_ite4->next;
            													}
            													_hx_goto_344:;
            												}
HXDLIN(6015)												if (hx::IsNull( ret22 )) {
HXLINE(6015)													 ::zpp_nape::callbacks::ZPP_CbSetPair ret25;
HXDLIN(6015)													{
HXLINE(6015)														if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(6015)															ret25 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(6015)															ret25 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(6015)															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret25->next;
HXDLIN(6015)															ret25->next = null();
            														}
HXDLIN(6015)														ret25->zip_listeners = true;
            													}
HXDLIN(6015)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(6015)														ret25->a = cb1;
HXDLIN(6015)														ret25->b = cb2;
            													}
            													else {
HXLINE(6015)														ret25->a = cb2;
HXDLIN(6015)														ret25->b = cb1;
            													}
HXDLIN(6015)													ret22 = ret25;
HXDLIN(6015)													cb1->cbpairs->add(ret22);
HXDLIN(6015)													if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(6015)														cb2->cbpairs->add(ret22);
            													}
            												}
HXDLIN(6015)												if (ret22->zip_listeners) {
HXLINE(6015)													ret22->zip_listeners = false;
HXDLIN(6015)													ret22->_hx___validate();
            												}
HXDLIN(6015)												if (hx::IsNull( ret22->listeners->head )) {
HXLINE(6016)													cx_ite3 = cx_ite3->next;
HXLINE(6017)													continue;
            												}
HXLINE(6019)												 ::zpp_nape::space::ZPP_CallbackSet callbackset = null();
HXLINE(6020)												 ::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();
HXLINE(6021)												{
HXLINE(6021)													 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this17 = this->prelisteners;
HXDLIN(6021)													{
HXLINE(6021)														while(hx::IsNotNull( _this17->head )){
HXLINE(6021)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret26 = _this17->head;
HXDLIN(6021)															_this17->head = ret26->next;
HXDLIN(6021)															{
HXLINE(6021)																 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener o6 = ret26;
HXDLIN(6021)																o6->elt = null();
HXDLIN(6021)																o6->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN(6021)																::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o6;
            															}
HXDLIN(6021)															if (hx::IsNull( _this17->head )) {
HXLINE(6021)																_this17->pushmod = true;
            															}
HXDLIN(6021)															_this17->modified = true;
HXDLIN(6021)															_this17->length--;
            														}
HXDLIN(6021)														_this17->pushmod = true;
            													}
            												}
HXLINE(6022)												 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();
HXLINE(6023)												{
HXLINE(6023)													 ::zpp_nape::space::ZPP_CbSetManager _this18 = cb1->manager;
HXDLIN(6023)													 ::zpp_nape::callbacks::ZPP_CbSetPair ret27 = null();
HXDLIN(6023)													 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs1;
HXDLIN(6023)													if ((cb1->cbpairs->length < cb2->cbpairs->length)) {
HXLINE(6023)														pairs1 = cb1->cbpairs;
            													}
            													else {
HXLINE(6023)														pairs1 = cb2->cbpairs;
            													}
HXDLIN(6023)													{
HXLINE(6023)														 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite5 = pairs1->head;
HXDLIN(6023)														while(hx::IsNotNull( cx_ite5 )){
HXLINE(6023)															 ::zpp_nape::callbacks::ZPP_CbSetPair p1 = cx_ite5->elt;
HXDLIN(6023)															bool ret28;
HXDLIN(6023)															bool ret29;
HXDLIN(6023)															if (hx::IsEq( p1->a,cb1 )) {
HXLINE(6023)																ret29 = hx::IsEq( p1->b,cb2 );
            															}
            															else {
HXLINE(6023)																ret29 = false;
            															}
HXDLIN(6023)															if (!(ret29)) {
HXLINE(6023)																if (hx::IsEq( p1->a,cb2 )) {
HXLINE(6023)																	ret28 = hx::IsEq( p1->b,cb1 );
            																}
            																else {
HXLINE(6023)																	ret28 = false;
            																}
            															}
            															else {
HXLINE(6023)																ret28 = true;
            															}
HXDLIN(6023)															if (ret28) {
HXLINE(6023)																ret27 = p1;
HXDLIN(6023)																goto _hx_goto_346;
            															}
HXDLIN(6023)															cx_ite5 = cx_ite5->next;
            														}
            														_hx_goto_346:;
            													}
HXDLIN(6023)													if (hx::IsNull( ret27 )) {
HXLINE(6023)														 ::zpp_nape::callbacks::ZPP_CbSetPair ret30;
HXDLIN(6023)														{
HXLINE(6023)															if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(6023)																ret30 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(6023)																ret30 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(6023)																::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret30->next;
HXDLIN(6023)																ret30->next = null();
            															}
HXDLIN(6023)															ret30->zip_listeners = true;
            														}
HXDLIN(6023)														if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2)) {
HXLINE(6023)															ret30->a = cb1;
HXDLIN(6023)															ret30->b = cb2;
            														}
            														else {
HXLINE(6023)															ret30->a = cb2;
HXDLIN(6023)															ret30->b = cb1;
            														}
HXDLIN(6023)														ret27 = ret30;
HXDLIN(6023)														cb1->cbpairs->add(ret27);
HXDLIN(6023)														if (hx::IsNotEq( cb2,cb1 )) {
HXLINE(6023)															cb2->cbpairs->add(ret27);
            														}
            													}
HXDLIN(6023)													if (ret27->zip_listeners) {
HXLINE(6023)														ret27->zip_listeners = false;
HXDLIN(6023)														ret27->_hx___validate();
            													}
HXDLIN(6023)													{
HXLINE(6023)														 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite6 = ret27->listeners->head;
HXDLIN(6023)														while(hx::IsNotNull( cx_ite6 )){
HXLINE(6023)															 ::zpp_nape::callbacks::ZPP_InteractionListener x3 = cx_ite6->elt;
HXDLIN(6023)															if ((x3->event == 5)) {
HXLINE(6024)																if (((x3->itype & inttype) != 0)) {
HXLINE(6025)																	 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this19 = _gthis->prelisteners;
HXDLIN(6025)																	 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret31;
HXDLIN(6025)																	if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE(6025)																		ret31 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(6025)																		ret31 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN(6025)																		::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret31->next;
HXDLIN(6025)																		ret31->next = null();
            																	}
HXDLIN(6025)																	ret31->elt = x3;
HXDLIN(6025)																	 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp9 = ret31;
HXDLIN(6025)																	if (hx::IsNull( lite )) {
HXLINE(6025)																		temp9->next = _this19->head;
HXDLIN(6025)																		_this19->head = temp9;
            																	}
            																	else {
HXLINE(6025)																		temp9->next = lite->next;
HXDLIN(6025)																		lite->next = temp9;
            																	}
HXDLIN(6025)																	_this19->pushmod = (_this19->modified = true);
HXDLIN(6025)																	_this19->length++;
HXDLIN(6025)																	lite = temp9;
HXLINE(6026)																	if (!(anyimpure)) {
HXLINE(6026)																		anyimpure = !(x3->pure);
            																	}
            																	else {
HXLINE(6026)																		anyimpure = true;
            																	}
            																}
            															}
HXLINE(6023)															cx_ite6 = cx_ite6->next;
            														}
            													}
            												}
HXLINE(6029)												if (hx::IsNull( this->prelisteners->head )) {
HXLINE(6030)													cx_ite3 = cx_ite3->next;
HXLINE(6031)													continue;
            												}
HXLINE(6033)												callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);
HXLINE(6034)												if (hx::IsNull( callbackset )) {
HXLINE(6035)													ncallbackset = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);
HXLINE(6036)													this->add_callbackset(ncallbackset);
            												}
HXLINE(6038)												bool ret32;
HXDLIN(6038)												if (hx::IsNotNull( callbackset )) {
HXLINE(6038)													bool ret33;
HXDLIN(6038)													if ((callbackset->FLUIDstamp == this->stamp)) {
HXLINE(6038)														ret33 = continuous;
            													}
            													else {
HXLINE(6038)														ret33 = true;
            													}
HXDLIN(6038)													if (ret33) {
HXLINE(6038)														ret32 = ((callbackset->FLUIDstate & 4) == 0);
            													}
            													else {
HXLINE(6038)														ret32 = false;
            													}
            												}
            												else {
HXLINE(6038)													ret32 = true;
            												}
HXDLIN(6038)												if (ret32) {
HXLINE(6039)													if (hx::IsNotNull( ncallbackset )) {
HXLINE(6039)														callbackset = ncallbackset;
            													}
HXLINE(6040)													if (hx::IsNotNull( callbackset )) {
HXLINE(6042)														 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite7 = this->prelisteners->head;
HXLINE(6043)														while(hx::IsNotNull( cx_ite7 )){
HXLINE(6044)															 ::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite7->elt;
HXLINE(6046)															if ((listener->itype == 7)) {
HXLINE(6047)																callbackset->COLLISIONstamp = this->stamp;
HXLINE(6048)																callbackset->SENSORstamp = this->stamp;
HXLINE(6049)																callbackset->FLUIDstamp = this->stamp;
            															}
            															else {
HXLINE(6051)																callbackset->FLUIDstamp = this->stamp;
            															}
HXLINE(6053)															cx_ite7 = cx_ite7->next;
            														}
            													}
HXLINE(6058)													{
HXLINE(6058)														arb1->_hx_mutable = true;
HXDLIN(6058)														if (hx::IsNotNull( arb1->wrap_position )) {
HXLINE(6058)															arb1->wrap_position->zpp_inner->_immutable = false;
            														}
            													}
HXLINE(6060)													bool pact = arb1->active;
HXLINE(6061)													arb1->active = true;
HXLINE(6062)													bool emptycontacts = false;
HXLINE(6065)													this->precb->zpp_inner->pre_arbiter = arb1;
HXLINE(6066)													this->precb->zpp_inner->set = callbackset;
HXLINE(6067)													{
HXLINE(6068)														 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite8 = this->prelisteners->head;
HXLINE(6069)														while(hx::IsNotNull( cx_ite8 )){
HXLINE(6070)															 ::zpp_nape::callbacks::ZPP_InteractionListener listener1 = cx_ite8->elt;
HXLINE(6071)															{
HXLINE(6072)																this->precb->zpp_inner->listener = listener1;
HXLINE(6099)																{
HXLINE(6099)																	 ::zpp_nape::callbacks::ZPP_Callback cb = this->precb->zpp_inner;
HXDLIN(6099)																	 ::zpp_nape::phys::ZPP_Interactor o11 = callbackset->int1;
HXDLIN(6099)																	 ::zpp_nape::phys::ZPP_Interactor o21 = callbackset->int2;
HXDLIN(6099)																	bool ret34;
HXDLIN(6099)																	 ::zpp_nape::callbacks::ZPP_OptionType _this20 = listener1->options1;
HXDLIN(6099)																	 ::zpp_nape::util::ZNPList_ZPP_CbType xs = o11->cbTypes;
HXDLIN(6099)																	bool ret35;
HXDLIN(6099)																	if (_this20->nonemptyintersection(xs,_this20->includes)) {
HXLINE(6099)																		ret35 = !(_this20->nonemptyintersection(xs,_this20->excludes));
            																	}
            																	else {
HXLINE(6099)																		ret35 = false;
            																	}
HXDLIN(6099)																	if (ret35) {
HXLINE(6099)																		 ::zpp_nape::callbacks::ZPP_OptionType _this21 = listener1->options2;
HXDLIN(6099)																		 ::zpp_nape::util::ZNPList_ZPP_CbType xs1 = o21->cbTypes;
HXDLIN(6099)																		if (_this21->nonemptyintersection(xs1,_this21->includes)) {
HXLINE(6099)																			ret34 = !(_this21->nonemptyintersection(xs1,_this21->excludes));
            																		}
            																		else {
HXLINE(6099)																			ret34 = false;
            																		}
            																	}
            																	else {
HXLINE(6099)																		ret34 = false;
            																	}
HXDLIN(6099)																	if (ret34) {
HXLINE(6099)																		cb->int1 = o11;
HXDLIN(6099)																		cb->int2 = o21;
            																	}
            																	else {
HXLINE(6099)																		cb->int1 = o21;
HXDLIN(6099)																		cb->int2 = o11;
            																	}
            																}
HXLINE(6100)																this->precb->zpp_inner->pre_swapped = hx::IsNotEq( i1,this->precb->zpp_inner->int1 );
HXLINE(6101)																 ::nape::callbacks::PreFlag ret36 = ( ( ::nape::callbacks::PreFlag)(listener1->handlerp(this->precb)) );
HXLINE(6102)																if (hx::IsNotNull( ret36 )) {
HXLINE(6103)																	int ret37;
HXDLIN(6103)																	if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE(6103)																		::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6103)																		::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6103)																		::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																	}
HXDLIN(6103)																	if (hx::IsEq( ret36,::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE(6103)																		ret37 = 5;
            																	}
            																	else {
HXLINE(6103)																		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE(6103)																			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6103)																			::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6103)																			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																		}
HXDLIN(6103)																		if (hx::IsEq( ret36,::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE(6103)																			ret37 = 1;
            																		}
            																		else {
HXLINE(6103)																			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE(6103)																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6103)																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6103)																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																			}
HXDLIN(6103)																			if (hx::IsEq( ret36,::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE(6103)																				ret37 = 6;
            																			}
            																			else {
HXLINE(6103)																				ret37 = 2;
            																			}
            																		}
            																	}
HXDLIN(6103)																	arb1->immState = ret37;
            																}
            															}
HXLINE(6106)															cx_ite8 = cx_ite8->next;
            														}
            													}
HXLINE(6110)													{
HXLINE(6110)														arb1->_hx_mutable = false;
HXDLIN(6110)														if (hx::IsNotNull( arb1->wrap_position )) {
HXLINE(6110)															arb1->wrap_position->zpp_inner->_immutable = true;
            														}
            													}
HXLINE(6112)													arb1->active = pact;
HXLINE(6113)													if (hx::IsNotNull( callbackset )) {
HXLINE(6115)														 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite9 = this->prelisteners->head;
HXLINE(6116)														while(hx::IsNotNull( cx_ite9 )){
HXLINE(6117)															 ::zpp_nape::callbacks::ZPP_InteractionListener listener2 = cx_ite9->elt;
HXLINE(6119)															if ((listener2->itype == 7)) {
HXLINE(6120)																callbackset->COLLISIONstate = arb1->immState;
HXLINE(6121)																callbackset->SENSORstate = arb1->immState;
HXLINE(6122)																callbackset->FLUIDstate = arb1->immState;
            															}
            															else {
HXLINE(6124)																callbackset->FLUIDstate = arb1->immState;
            															}
HXLINE(6126)															cx_ite9 = cx_ite9->next;
            														}
            													}
            												}
            												else {
HXLINE(6131)													if (hx::IsNull( callbackset )) {
HXLINE(6132)														if (((arb1->immState & 4) == 0)) {
HXLINE(6132)															arb1->immState = 1;
            														}
            													}
            													else {
HXLINE(6134)														arb1->immState = callbackset->FLUIDstate;
            													}
            												}
            											}
HXLINE(6136)											cx_ite3 = cx_ite3->next;
            										}
            									}
HXLINE(6140)									cx_ite2 = cx_ite2->next;
            								}
            							}
HXLINE(6143)							bool ret38;
HXDLIN(6143)							if (anyimpure) {
HXLINE(6143)								ret38 = ((arb1->immState & 4) == 0);
            							}
            							else {
HXLINE(6143)								ret38 = false;
            							}
HXDLIN(6143)							if (ret38) {
HXLINE(6145)								if ((arb1->b1->type == 2)) {
HXLINE(6146)									 ::zpp_nape::phys::ZPP_Body o7 = arb1->b1;
HXLINE(6155)									if (!(o7->world)) {
HXLINE(6164)										int ret39;
HXDLIN(6164)										if (this->midstep) {
HXLINE(6164)											ret39 = 0;
            										}
            										else {
HXLINE(6164)											ret39 = 1;
            										}
HXDLIN(6164)										o7->component->waket = (this->stamp + ret39);
HXLINE(6165)										if ((o7->type == 3)) {
HXLINE(6165)											o7->kinematicDelaySleep = true;
            										}
HXLINE(6166)										if (o7->component->sleeping) {
HXLINE(6167)											this->really_wake(o7,false);
            										}
            									}
            								}
HXLINE(6171)								if ((arb1->b1->type == 2)) {
HXLINE(6172)									 ::zpp_nape::phys::ZPP_Body o8 = arb1->b2;
HXLINE(6181)									if (!(o8->world)) {
HXLINE(6190)										int ret40;
HXDLIN(6190)										if (this->midstep) {
HXLINE(6190)											ret40 = 0;
            										}
            										else {
HXLINE(6190)											ret40 = 1;
            										}
HXDLIN(6190)										o8->component->waket = (this->stamp + ret40);
HXLINE(6191)										if ((o8->type == 3)) {
HXLINE(6191)											o8->kinematicDelaySleep = true;
            										}
HXLINE(6192)										if (o8->component->sleeping) {
HXLINE(6193)											this->really_wake(o8,false);
            										}
            									}
            								}
            							}
            						}
HXLINE(6254)						if (((arb1->immState & 1) != 0)) {
HXLINE(6255)							bool ret41;
HXDLIN(6255)							if ((arb1->b1->type == 2)) {
HXLINE(6255)								ret41 = arb1->b1->component->sleeping;
            							}
            							else {
HXLINE(6255)								ret41 = false;
            							}
HXDLIN(6255)							if (ret41) {
HXLINE(6256)								 ::zpp_nape::phys::ZPP_Body o9 = arb1->b1;
HXLINE(6265)								if (!(o9->world)) {
HXLINE(6274)									int ret42;
HXDLIN(6274)									if (this->midstep) {
HXLINE(6274)										ret42 = 0;
            									}
            									else {
HXLINE(6274)										ret42 = 1;
            									}
HXDLIN(6274)									o9->component->waket = (this->stamp + ret42);
HXLINE(6275)									if ((o9->type == 3)) {
HXLINE(6275)										o9->kinematicDelaySleep = true;
            									}
HXLINE(6276)									if (o9->component->sleeping) {
HXLINE(6277)										this->really_wake(o9,false);
            									}
            								}
            							}
HXLINE(6281)							bool ret43;
HXDLIN(6281)							if ((arb1->b2->type == 2)) {
HXLINE(6281)								ret43 = arb1->b2->component->sleeping;
            							}
            							else {
HXLINE(6281)								ret43 = false;
            							}
HXDLIN(6281)							if (ret43) {
HXLINE(6282)								 ::zpp_nape::phys::ZPP_Body o10 = arb1->b2;
HXLINE(6291)								if (!(o10->world)) {
HXLINE(6300)									int ret44;
HXDLIN(6300)									if (this->midstep) {
HXLINE(6300)										ret44 = 0;
            									}
            									else {
HXLINE(6300)										ret44 = 1;
            									}
HXDLIN(6300)									o10->component->waket = (this->stamp + ret44);
HXLINE(6301)									if ((o10->type == 3)) {
HXLINE(6301)										o10->kinematicDelaySleep = true;
            									}
HXLINE(6302)									if (o10->component->sleeping) {
HXLINE(6303)										this->really_wake(o10,false);
            									}
            								}
            							}
            						}
HXLINE(6308)						if (arb1->sleeping) {
HXLINE(6309)							arb1->sleeping = false;
HXLINE(6310)							{
HXLINE(6310)								 ::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this22 = this->f_arbiters;
HXDLIN(6310)								 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret45;
HXDLIN(6310)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(6310)									ret45 =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(6310)									ret45 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(6310)									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret45->next;
HXDLIN(6310)									ret45->next = null();
            								}
HXDLIN(6310)								ret45->elt = arb1;
HXDLIN(6310)								 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp10 = ret45;
HXDLIN(6310)								temp10->next = _this22->head;
HXDLIN(6310)								_this22->head = temp10;
HXDLIN(6310)								_this22->modified = true;
HXDLIN(6310)								_this22->length++;
            							}
            						}
HXLINE(6312)						ret = arb1;
            					}
            					else {
HXLINE(6314)						if (first) {
HXLINE(6315)							{
HXLINE(6316)								 ::zpp_nape::dynamics::ZPP_FluidArbiter o12 = arb1;
HXLINE(6326)								o12->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(6327)								::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o12;
            							}
HXLINE(6332)							ret = null();
            						}
            						else {
HXLINE(6334)							ret = arb1;
            						}
            					}
            				}
            				else {
HXLINE(6336)					ret = arb1;
            				}
            			}
            			else {
HXLINE(6339)				if ((itype == 1)) {
HXLINE(6340)					 ::zpp_nape::util::ZNPList_ZPP_ColArbiter carbs;
HXDLIN(6340)					if (stat) {
HXLINE(6340)						carbs = this->c_arbiters_true;
            					}
            					else {
HXLINE(6340)						carbs = this->c_arbiters_false;
            					}
HXLINE(6341)					 ::zpp_nape::dynamics::ZPP_Arbiter xarb2;
HXDLIN(6341)					if (hx::IsNull( in_arb )) {
HXLINE(6342)						 ::zpp_nape::dynamics::ZPP_Arbiter ret46 = null();
HXLINE(6343)						 ::zpp_nape::phys::ZPP_Body b3;
HXDLIN(6343)						if ((b1->arbiters->length < b2->arbiters->length)) {
HXLINE(6343)							b3 = b1;
            						}
            						else {
HXLINE(6343)							b3 = b2;
            						}
HXLINE(6344)						{
HXLINE(6345)							 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite10 = b3->arbiters->head;
HXLINE(6346)							while(hx::IsNotNull( cx_ite10 )){
HXLINE(6347)								 ::zpp_nape::dynamics::ZPP_Arbiter arb2 = cx_ite10->elt;
HXLINE(6357)								bool xarb3;
HXDLIN(6357)								if ((arb2->id == sa->id)) {
HXLINE(6357)									xarb3 = (arb2->di == sb->id);
            								}
            								else {
HXLINE(6357)									xarb3 = false;
            								}
HXDLIN(6357)								if (xarb3) {
HXLINE(6358)									ret46 = arb2;
HXLINE(6359)									goto _hx_goto_351;
            								}
HXLINE(6362)								cx_ite10 = cx_ite10->next;
            							}
            							_hx_goto_351:;
            						}
HXLINE(6341)						xarb2 = ret46;
            					}
            					else {
HXLINE(6341)						xarb2 = in_arb;
            					}
HXLINE(6367)					bool first1 = hx::IsNull( xarb2 );
HXLINE(6368)					 ::zpp_nape::dynamics::ZPP_ColArbiter arb3;
HXLINE(6369)					bool swapped1 = false;
HXLINE(6370)					if (first1) {
HXLINE(6372)						if (hx::IsNull( ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(6373)							arb3 =  ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(6379)							arb3 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXLINE(6380)							::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb3->next;
HXLINE(6381)							arb3->next = null();
            						}
HXLINE(6388)						arb3->stat = stat;
            					}
            					else {
HXLINE(6391)						if (hx::IsNull( xarb2->colarb )) {
HXLINE(6392)							{
HXLINE(6392)								xarb2->cleared = true;
HXDLIN(6392)								{
HXLINE(6392)									 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this23 = xarb2->b1->arbiters;
HXDLIN(6392)									{
HXLINE(6392)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre2 = null();
HXDLIN(6392)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur4 = _this23->head;
HXDLIN(6392)										bool ret47 = false;
HXDLIN(6392)										while(hx::IsNotNull( cur4 )){
HXLINE(6392)											if (hx::IsEq( cur4->elt,xarb2 )) {
HXLINE(6392)												{
HXLINE(6392)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old2;
HXDLIN(6392)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret48;
HXDLIN(6392)													if (hx::IsNull( pre2 )) {
HXLINE(6392)														old2 = _this23->head;
HXDLIN(6392)														ret48 = old2->next;
HXDLIN(6392)														_this23->head = ret48;
HXDLIN(6392)														if (hx::IsNull( _this23->head )) {
HXLINE(6392)															_this23->pushmod = true;
            														}
            													}
            													else {
HXLINE(6392)														old2 = pre2->next;
HXDLIN(6392)														ret48 = old2->next;
HXDLIN(6392)														pre2->next = ret48;
HXDLIN(6392)														if (hx::IsNull( ret48 )) {
HXLINE(6392)															_this23->pushmod = true;
            														}
            													}
HXDLIN(6392)													{
HXLINE(6392)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o13 = old2;
HXDLIN(6392)														o13->elt = null();
HXDLIN(6392)														o13->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6392)														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o13;
            													}
HXDLIN(6392)													_this23->modified = true;
HXDLIN(6392)													_this23->length--;
HXDLIN(6392)													_this23->pushmod = true;
            												}
HXDLIN(6392)												ret47 = true;
HXDLIN(6392)												goto _hx_goto_352;
            											}
HXDLIN(6392)											pre2 = cur4;
HXDLIN(6392)											cur4 = cur4->next;
            										}
            										_hx_goto_352:;
            									}
            								}
HXDLIN(6392)								{
HXLINE(6392)									 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this24 = xarb2->b2->arbiters;
HXDLIN(6392)									{
HXLINE(6392)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre3 = null();
HXDLIN(6392)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur5 = _this24->head;
HXDLIN(6392)										bool ret49 = false;
HXDLIN(6392)										while(hx::IsNotNull( cur5 )){
HXLINE(6392)											if (hx::IsEq( cur5->elt,xarb2 )) {
HXLINE(6392)												{
HXLINE(6392)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old3;
HXDLIN(6392)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret50;
HXDLIN(6392)													if (hx::IsNull( pre3 )) {
HXLINE(6392)														old3 = _this24->head;
HXDLIN(6392)														ret50 = old3->next;
HXDLIN(6392)														_this24->head = ret50;
HXDLIN(6392)														if (hx::IsNull( _this24->head )) {
HXLINE(6392)															_this24->pushmod = true;
            														}
            													}
            													else {
HXLINE(6392)														old3 = pre3->next;
HXDLIN(6392)														ret50 = old3->next;
HXDLIN(6392)														pre3->next = ret50;
HXDLIN(6392)														if (hx::IsNull( ret50 )) {
HXLINE(6392)															_this24->pushmod = true;
            														}
            													}
HXDLIN(6392)													{
HXLINE(6392)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o14 = old3;
HXDLIN(6392)														o14->elt = null();
HXDLIN(6392)														o14->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6392)														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o14;
            													}
HXDLIN(6392)													_this24->modified = true;
HXDLIN(6392)													_this24->length--;
HXDLIN(6392)													_this24->pushmod = true;
            												}
HXDLIN(6392)												ret49 = true;
HXDLIN(6392)												goto _hx_goto_353;
            											}
HXDLIN(6392)											pre3 = cur5;
HXDLIN(6392)											cur5 = cur5->next;
            										}
            										_hx_goto_353:;
            									}
            								}
HXDLIN(6392)								if (hx::IsNotNull( xarb2->pair )) {
HXLINE(6392)									xarb2->pair->arb = null();
HXDLIN(6392)									xarb2->pair = null();
            								}
HXDLIN(6392)								xarb2->active = false;
HXDLIN(6392)								this->f_arbiters->modified = true;
            							}
HXLINE(6394)							if (hx::IsNull( ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(6395)								arb3 =  ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(6401)								arb3 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXLINE(6402)								::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb3->next;
HXLINE(6403)								arb3->next = null();
            							}
HXLINE(6410)							arb3->intchange = true;
HXLINE(6411)							arb3->stat = stat;
HXLINE(6412)							first1 = true;
HXLINE(6413)							swapped1 = true;
            						}
            						else {
HXLINE(6416)							arb3 = xarb2->colarb;
HXLINE(6417)							reverse = hx::IsNotEq( sa,arb3->s1 );
HXLINE(6418)							if ((arb3->stat != stat)) {
HXLINE(6419)								arb3->stat = stat;
HXLINE(6420)								if (!(arb3->sleeping)) {
HXLINE(6421)									 ::zpp_nape::util::ZNPList_ZPP_ColArbiter _hx_tmp1;
HXDLIN(6421)									if (stat) {
HXLINE(6421)										_hx_tmp1 = this->c_arbiters_false;
            									}
            									else {
HXLINE(6421)										_hx_tmp1 = this->c_arbiters_true;
            									}
HXDLIN(6421)									_hx_tmp1->remove(arb3);
HXLINE(6422)									carbs->add(arb3);
            								}
            							}
            						}
            					}
HXLINE(6428)					int inttype1 = 1;
HXLINE(6429)					bool ret51;
HXDLIN(6429)					bool ret52;
HXDLIN(6429)					if (!(first1)) {
HXLINE(6429)						ret52 = (arb3->stamp != this->stamp);
            					}
            					else {
HXLINE(6429)						ret52 = true;
            					}
HXDLIN(6429)					if (!(ret52)) {
HXLINE(6429)						ret51 = continuous;
            					}
            					else {
HXLINE(6429)						ret51 = true;
            					}
HXDLIN(6429)					if (ret51) {
HXLINE(6430)						arb3->stamp = this->stamp;
HXLINE(6431)						if (::zpp_nape::geom::ZPP_Collide_obj::contactCollide(sa,sb,arb3,reverse)) {
HXLINE(6432)							if (first1) {
HXLINE(6433)								{
HXLINE(6433)									int di1 = sb->id;
HXDLIN(6433)									{
HXLINE(6433)										arb3->b1 = s1->body;
HXDLIN(6433)										arb3->ws1 = s1;
HXDLIN(6433)										arb3->b2 = s2->body;
HXDLIN(6433)										arb3->ws2 = s2;
HXDLIN(6433)										arb3->id = sa->id;
HXDLIN(6433)										arb3->di = di1;
HXDLIN(6433)										{
HXLINE(6433)											 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this25 = arb3->b1->arbiters;
HXDLIN(6433)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret53;
HXDLIN(6433)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(6433)												ret53 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(6433)												ret53 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6433)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret53->next;
HXDLIN(6433)												ret53->next = null();
            											}
HXDLIN(6433)											ret53->elt = arb3;
HXDLIN(6433)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp11 = ret53;
HXDLIN(6433)											temp11->next = _this25->head;
HXDLIN(6433)											_this25->head = temp11;
HXDLIN(6433)											_this25->modified = true;
HXDLIN(6433)											_this25->length++;
            										}
HXDLIN(6433)										{
HXLINE(6433)											 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this26 = arb3->b2->arbiters;
HXDLIN(6433)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret54;
HXDLIN(6433)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(6433)												ret54 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(6433)												ret54 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6433)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret54->next;
HXDLIN(6433)												ret54->next = null();
            											}
HXDLIN(6433)											ret54->elt = arb3;
HXDLIN(6433)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp12 = ret54;
HXDLIN(6433)											temp12->next = _this26->head;
HXDLIN(6433)											_this26->head = temp12;
HXDLIN(6433)											_this26->modified = true;
HXDLIN(6433)											_this26->length++;
            										}
HXDLIN(6433)										arb3->active = true;
HXDLIN(6433)										arb3->present = 0;
HXDLIN(6433)										arb3->cleared = false;
HXDLIN(6433)										arb3->sleeping = false;
HXDLIN(6433)										arb3->fresh = false;
HXDLIN(6433)										arb3->presentable = false;
            									}
HXDLIN(6433)									arb3->s1 = s1;
HXDLIN(6433)									arb3->s2 = s2;
HXDLIN(6433)									{
HXLINE(6433)										if (!(arb3->userdef_restitution)) {
HXLINE(6433)											bool ret55;
HXDLIN(6433)											if (!((arb3->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))) {
HXLINE(6433)												ret55 = (arb3->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY);
            											}
            											else {
HXLINE(6433)												ret55 = true;
            											}
HXDLIN(6433)											if (ret55) {
HXLINE(6433)												arb3->restitution = ( (Float)(0) );
            											}
            											else {
HXLINE(6433)												bool ret56;
HXDLIN(6433)												if (!((arb3->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))) {
HXLINE(6433)													ret56 = (arb3->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY);
            												}
            												else {
HXLINE(6433)													ret56 = true;
            												}
HXDLIN(6433)												if (ret56) {
HXLINE(6433)													arb3->restitution = ( (Float)(1) );
            												}
            												else {
HXLINE(6433)													arb3->restitution = ((arb3->s1->material->elasticity + arb3->s2->material->elasticity) / ( (Float)(2) ));
            												}
            											}
HXDLIN(6433)											if ((arb3->restitution < 0)) {
HXLINE(6433)												arb3->restitution = ( (Float)(0) );
            											}
HXDLIN(6433)											if ((arb3->restitution > 1)) {
HXLINE(6433)												arb3->restitution = ( (Float)(1) );
            											}
            										}
HXDLIN(6433)										if (!(arb3->userdef_dyn_fric)) {
HXLINE(6433)											arb3->dyn_fric = ::Math_obj::sqrt((arb3->s1->material->dynamicFriction * arb3->s2->material->dynamicFriction));
            										}
HXDLIN(6433)										if (!(arb3->userdef_stat_fric)) {
HXLINE(6433)											arb3->stat_fric = ::Math_obj::sqrt((arb3->s1->material->staticFriction * arb3->s2->material->staticFriction));
            										}
HXDLIN(6433)										if (!(arb3->userdef_rfric)) {
HXLINE(6433)											arb3->rfric = ::Math_obj::sqrt((arb3->s1->material->rollingFriction * arb3->s2->material->rollingFriction));
            										}
            									}
            								}
HXLINE(6434)								{
HXLINE(6434)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret57;
HXDLIN(6434)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(6434)										ret57 =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(6434)										ret57 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(6434)										::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret57->next;
HXDLIN(6434)										ret57->next = null();
            									}
HXDLIN(6434)									ret57->elt = arb3;
HXDLIN(6434)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp13 = ret57;
HXDLIN(6434)									temp13->next = carbs->head;
HXDLIN(6434)									carbs->head = temp13;
HXDLIN(6434)									carbs->modified = true;
HXDLIN(6434)									carbs->length++;
            								}
HXLINE(6435)								arb3->fresh = !(swapped1);
            							}
            							else {
HXLINE(6438)								bool ret58;
HXDLIN(6438)								if ((arb3->up_stamp >= (this->stamp - 1))) {
HXLINE(6438)									if ((arb3->endGenerated == this->stamp)) {
HXLINE(6438)										ret58 = continuous;
            									}
            									else {
HXLINE(6438)										ret58 = false;
            									}
            								}
            								else {
HXLINE(6438)									ret58 = true;
            								}
HXDLIN(6438)								arb3->fresh = ret58;
            							}
HXLINE(6440)							arb3->up_stamp = arb3->stamp;
HXLINE(6441)							bool ret59;
HXDLIN(6441)							if (!(arb3->fresh)) {
HXLINE(6441)								ret59 = ((arb3->immState & 4) == 0);
            							}
            							else {
HXLINE(6441)								ret59 = true;
            							}
HXDLIN(6441)							if (ret59) {
HXLINE(6442)								arb3->immState = 1;
HXLINE(6443)								bool anyimpure1 = false;
HXLINE(6444)								 ::zpp_nape::shape::ZPP_Shape arbs11;
HXDLIN(6444)								if ((arb3->ws1->id > arb3->ws2->id)) {
HXLINE(6444)									arbs11 = arb3->ws2;
            								}
            								else {
HXLINE(6444)									arbs11 = arb3->ws1;
            								}
HXLINE(6445)								 ::zpp_nape::shape::ZPP_Shape arbs21;
HXDLIN(6445)								if ((arb3->ws1->id > arb3->ws2->id)) {
HXLINE(6445)									arbs21 = arb3->ws1;
            								}
            								else {
HXLINE(6445)									arbs21 = arb3->ws2;
            								}
HXLINE(6446)								{
HXLINE(6446)									{
HXLINE(6446)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this27 = this->mrca1;
HXDLIN(6446)										{
HXLINE(6446)											while(hx::IsNotNull( _this27->head )){
HXLINE(6446)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret60 = _this27->head;
HXDLIN(6446)												_this27->head = ret60->next;
HXDLIN(6446)												{
HXLINE(6446)													 ::zpp_nape::util::ZNPNode_ZPP_Interactor o15 = ret60;
HXDLIN(6446)													o15->elt = null();
HXDLIN(6446)													o15->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o15;
            												}
HXDLIN(6446)												if (hx::IsNull( _this27->head )) {
HXLINE(6446)													_this27->pushmod = true;
            												}
HXDLIN(6446)												_this27->modified = true;
HXDLIN(6446)												_this27->length--;
            											}
HXDLIN(6446)											_this27->pushmod = true;
            										}
            									}
HXDLIN(6446)									{
HXLINE(6446)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this28 = this->mrca2;
HXDLIN(6446)										{
HXLINE(6446)											while(hx::IsNotNull( _this28->head )){
HXLINE(6446)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret61 = _this28->head;
HXDLIN(6446)												_this28->head = ret61->next;
HXDLIN(6446)												{
HXLINE(6446)													 ::zpp_nape::util::ZNPNode_ZPP_Interactor o16 = ret61;
HXDLIN(6446)													o16->elt = null();
HXDLIN(6446)													o16->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o16;
            												}
HXDLIN(6446)												if (hx::IsNull( _this28->head )) {
HXLINE(6446)													_this28->pushmod = true;
            												}
HXDLIN(6446)												_this28->modified = true;
HXDLIN(6446)												_this28->length--;
            											}
HXDLIN(6446)											_this28->pushmod = true;
            										}
            									}
HXDLIN(6446)									if (hx::IsNotNull( arbs11->cbSet )) {
HXLINE(6446)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this29 = this->mrca1;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret62;
HXDLIN(6446)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6446)											ret62 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6446)											ret62 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret62->next;
HXDLIN(6446)											ret62->next = null();
            										}
HXDLIN(6446)										ret62->elt = arbs11;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp14 = ret62;
HXDLIN(6446)										temp14->next = _this29->head;
HXDLIN(6446)										_this29->head = temp14;
HXDLIN(6446)										_this29->modified = true;
HXDLIN(6446)										_this29->length++;
            									}
HXDLIN(6446)									if (hx::IsNotNull( arbs11->body->cbSet )) {
HXLINE(6446)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this30 = this->mrca1;
HXDLIN(6446)										 ::zpp_nape::phys::ZPP_Interactor o17 = arbs11->body;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret63;
HXDLIN(6446)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6446)											ret63 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6446)											ret63 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret63->next;
HXDLIN(6446)											ret63->next = null();
            										}
HXDLIN(6446)										ret63->elt = o17;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp15 = ret63;
HXDLIN(6446)										temp15->next = _this30->head;
HXDLIN(6446)										_this30->head = temp15;
HXDLIN(6446)										_this30->modified = true;
HXDLIN(6446)										_this30->length++;
            									}
HXDLIN(6446)									if (hx::IsNotNull( arbs21->cbSet )) {
HXLINE(6446)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this31 = this->mrca2;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret64;
HXDLIN(6446)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6446)											ret64 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6446)											ret64 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret64->next;
HXDLIN(6446)											ret64->next = null();
            										}
HXDLIN(6446)										ret64->elt = arbs21;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp16 = ret64;
HXDLIN(6446)										temp16->next = _this31->head;
HXDLIN(6446)										_this31->head = temp16;
HXDLIN(6446)										_this31->modified = true;
HXDLIN(6446)										_this31->length++;
            									}
HXDLIN(6446)									if (hx::IsNotNull( arbs21->body->cbSet )) {
HXLINE(6446)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this32 = this->mrca2;
HXDLIN(6446)										 ::zpp_nape::phys::ZPP_Interactor o18 = arbs21->body;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret65;
HXDLIN(6446)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6446)											ret65 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6446)											ret65 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret65->next;
HXDLIN(6446)											ret65->next = null();
            										}
HXDLIN(6446)										ret65->elt = o18;
HXDLIN(6446)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp17 = ret65;
HXDLIN(6446)										temp17->next = _this32->head;
HXDLIN(6446)										_this32->head = temp17;
HXDLIN(6446)										_this32->modified = true;
HXDLIN(6446)										_this32->length++;
            									}
HXDLIN(6446)									 ::zpp_nape::phys::ZPP_Compound c11 = arbs11->body->compound;
HXDLIN(6446)									 ::zpp_nape::phys::ZPP_Compound c21 = arbs21->body->compound;
HXDLIN(6446)									while(hx::IsNotEq( c11,c21 )){
HXLINE(6446)										int d11;
HXDLIN(6446)										if (hx::IsNull( c11 )) {
HXLINE(6446)											d11 = 0;
            										}
            										else {
HXLINE(6446)											d11 = c11->depth;
            										}
HXDLIN(6446)										int d21;
HXDLIN(6446)										if (hx::IsNull( c21 )) {
HXLINE(6446)											d21 = 0;
            										}
            										else {
HXLINE(6446)											d21 = c21->depth;
            										}
HXDLIN(6446)										if ((d11 < d21)) {
HXLINE(6446)											if (hx::IsNotNull( c21->cbSet )) {
HXLINE(6446)												 ::zpp_nape::util::ZNPList_ZPP_Interactor _this33 = this->mrca2;
HXDLIN(6446)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret66;
HXDLIN(6446)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6446)													ret66 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(6446)													ret66 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret66->next;
HXDLIN(6446)													ret66->next = null();
            												}
HXDLIN(6446)												ret66->elt = c21;
HXDLIN(6446)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp18 = ret66;
HXDLIN(6446)												temp18->next = _this33->head;
HXDLIN(6446)												_this33->head = temp18;
HXDLIN(6446)												_this33->modified = true;
HXDLIN(6446)												_this33->length++;
            											}
HXDLIN(6446)											c21 = c21->compound;
            										}
            										else {
HXLINE(6446)											if (hx::IsNotNull( c11->cbSet )) {
HXLINE(6446)												 ::zpp_nape::util::ZNPList_ZPP_Interactor _this34 = this->mrca1;
HXDLIN(6446)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret67;
HXDLIN(6446)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6446)													ret67 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(6446)													ret67 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6446)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret67->next;
HXDLIN(6446)													ret67->next = null();
            												}
HXDLIN(6446)												ret67->elt = c11;
HXDLIN(6446)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp19 = ret67;
HXDLIN(6446)												temp19->next = _this34->head;
HXDLIN(6446)												_this34->head = temp19;
HXDLIN(6446)												_this34->modified = true;
HXDLIN(6446)												_this34->length++;
            											}
HXDLIN(6446)											c11 = c11->compound;
            										}
            									}
            								}
HXLINE(6447)								{
HXLINE(6448)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite11 = this->mrca1->head;
HXLINE(6449)									while(hx::IsNotNull( cx_ite11 )){
HXLINE(6450)										 ::zpp_nape::phys::ZPP_Interactor i11 = cx_ite11->elt;
HXLINE(6452)										{
HXLINE(6453)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite12 = this->mrca2->head;
HXLINE(6454)											while(hx::IsNotNull( cx_ite12 )){
HXLINE(6455)												 ::zpp_nape::phys::ZPP_Interactor i21 = cx_ite12->elt;
HXLINE(6456)												{
HXLINE(6457)													 ::zpp_nape::callbacks::ZPP_CbSet cb11 = i11->cbSet;
HXLINE(6458)													 ::zpp_nape::callbacks::ZPP_CbSet cb21 = i21->cbSet;
HXLINE(6467)													 ::zpp_nape::space::ZPP_CbSetManager _this35 = cb11->manager;
HXDLIN(6467)													 ::zpp_nape::callbacks::ZPP_CbSetPair ret68 = null();
HXDLIN(6467)													 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs2;
HXDLIN(6467)													if ((cb11->cbpairs->length < cb21->cbpairs->length)) {
HXLINE(6467)														pairs2 = cb11->cbpairs;
            													}
            													else {
HXLINE(6467)														pairs2 = cb21->cbpairs;
            													}
HXDLIN(6467)													{
HXLINE(6467)														 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite13 = pairs2->head;
HXDLIN(6467)														while(hx::IsNotNull( cx_ite13 )){
HXLINE(6467)															 ::zpp_nape::callbacks::ZPP_CbSetPair p2 = cx_ite13->elt;
HXDLIN(6467)															bool ret69;
HXDLIN(6467)															bool ret70;
HXDLIN(6467)															if (hx::IsEq( p2->a,cb11 )) {
HXLINE(6467)																ret70 = hx::IsEq( p2->b,cb21 );
            															}
            															else {
HXLINE(6467)																ret70 = false;
            															}
HXDLIN(6467)															if (!(ret70)) {
HXLINE(6467)																if (hx::IsEq( p2->a,cb21 )) {
HXLINE(6467)																	ret69 = hx::IsEq( p2->b,cb11 );
            																}
            																else {
HXLINE(6467)																	ret69 = false;
            																}
            															}
            															else {
HXLINE(6467)																ret69 = true;
            															}
HXDLIN(6467)															if (ret69) {
HXLINE(6467)																ret68 = p2;
HXDLIN(6467)																goto _hx_goto_359;
            															}
HXDLIN(6467)															cx_ite13 = cx_ite13->next;
            														}
            														_hx_goto_359:;
            													}
HXDLIN(6467)													if (hx::IsNull( ret68 )) {
HXLINE(6467)														 ::zpp_nape::callbacks::ZPP_CbSetPair ret71;
HXDLIN(6467)														{
HXLINE(6467)															if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(6467)																ret71 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(6467)																ret71 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(6467)																::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret71->next;
HXDLIN(6467)																ret71->next = null();
            															}
HXDLIN(6467)															ret71->zip_listeners = true;
            														}
HXDLIN(6467)														if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb11,cb21)) {
HXLINE(6467)															ret71->a = cb11;
HXDLIN(6467)															ret71->b = cb21;
            														}
            														else {
HXLINE(6467)															ret71->a = cb21;
HXDLIN(6467)															ret71->b = cb11;
            														}
HXDLIN(6467)														ret68 = ret71;
HXDLIN(6467)														cb11->cbpairs->add(ret68);
HXDLIN(6467)														if (hx::IsNotEq( cb21,cb11 )) {
HXLINE(6467)															cb21->cbpairs->add(ret68);
            														}
            													}
HXDLIN(6467)													if (ret68->zip_listeners) {
HXLINE(6467)														ret68->zip_listeners = false;
HXDLIN(6467)														ret68->_hx___validate();
            													}
HXDLIN(6467)													if (hx::IsNull( ret68->listeners->head )) {
HXLINE(6468)														cx_ite12 = cx_ite12->next;
HXLINE(6469)														continue;
            													}
HXLINE(6471)													 ::zpp_nape::space::ZPP_CallbackSet callbackset1 = null();
HXLINE(6472)													 ::zpp_nape::space::ZPP_CallbackSet ncallbackset1 = null();
HXLINE(6473)													{
HXLINE(6473)														 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this36 = this->prelisteners;
HXDLIN(6473)														{
HXLINE(6473)															while(hx::IsNotNull( _this36->head )){
HXLINE(6473)																 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret72 = _this36->head;
HXDLIN(6473)																_this36->head = ret72->next;
HXDLIN(6473)																{
HXLINE(6473)																	 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener o19 = ret72;
HXDLIN(6473)																	o19->elt = null();
HXDLIN(6473)																	o19->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN(6473)																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o19;
            																}
HXDLIN(6473)																if (hx::IsNull( _this36->head )) {
HXLINE(6473)																	_this36->pushmod = true;
            																}
HXDLIN(6473)																_this36->modified = true;
HXDLIN(6473)																_this36->length--;
            															}
HXDLIN(6473)															_this36->pushmod = true;
            														}
            													}
HXLINE(6474)													 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite1 = null();
HXLINE(6475)													{
HXLINE(6475)														 ::zpp_nape::space::ZPP_CbSetManager _this37 = cb11->manager;
HXDLIN(6475)														 ::zpp_nape::callbacks::ZPP_CbSetPair ret73 = null();
HXDLIN(6475)														 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs3;
HXDLIN(6475)														if ((cb11->cbpairs->length < cb21->cbpairs->length)) {
HXLINE(6475)															pairs3 = cb11->cbpairs;
            														}
            														else {
HXLINE(6475)															pairs3 = cb21->cbpairs;
            														}
HXDLIN(6475)														{
HXLINE(6475)															 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite14 = pairs3->head;
HXDLIN(6475)															while(hx::IsNotNull( cx_ite14 )){
HXLINE(6475)																 ::zpp_nape::callbacks::ZPP_CbSetPair p3 = cx_ite14->elt;
HXDLIN(6475)																bool ret74;
HXDLIN(6475)																bool ret75;
HXDLIN(6475)																if (hx::IsEq( p3->a,cb11 )) {
HXLINE(6475)																	ret75 = hx::IsEq( p3->b,cb21 );
            																}
            																else {
HXLINE(6475)																	ret75 = false;
            																}
HXDLIN(6475)																if (!(ret75)) {
HXLINE(6475)																	if (hx::IsEq( p3->a,cb21 )) {
HXLINE(6475)																		ret74 = hx::IsEq( p3->b,cb11 );
            																	}
            																	else {
HXLINE(6475)																		ret74 = false;
            																	}
            																}
            																else {
HXLINE(6475)																	ret74 = true;
            																}
HXDLIN(6475)																if (ret74) {
HXLINE(6475)																	ret73 = p3;
HXDLIN(6475)																	goto _hx_goto_361;
            																}
HXDLIN(6475)																cx_ite14 = cx_ite14->next;
            															}
            															_hx_goto_361:;
            														}
HXDLIN(6475)														if (hx::IsNull( ret73 )) {
HXLINE(6475)															 ::zpp_nape::callbacks::ZPP_CbSetPair ret76;
HXDLIN(6475)															{
HXLINE(6475)																if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(6475)																	ret76 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(6475)																	ret76 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(6475)																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret76->next;
HXDLIN(6475)																	ret76->next = null();
            																}
HXDLIN(6475)																ret76->zip_listeners = true;
            															}
HXDLIN(6475)															if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb11,cb21)) {
HXLINE(6475)																ret76->a = cb11;
HXDLIN(6475)																ret76->b = cb21;
            															}
            															else {
HXLINE(6475)																ret76->a = cb21;
HXDLIN(6475)																ret76->b = cb11;
            															}
HXDLIN(6475)															ret73 = ret76;
HXDLIN(6475)															cb11->cbpairs->add(ret73);
HXDLIN(6475)															if (hx::IsNotEq( cb21,cb11 )) {
HXLINE(6475)																cb21->cbpairs->add(ret73);
            															}
            														}
HXDLIN(6475)														if (ret73->zip_listeners) {
HXLINE(6475)															ret73->zip_listeners = false;
HXDLIN(6475)															ret73->_hx___validate();
            														}
HXDLIN(6475)														{
HXLINE(6475)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite15 = ret73->listeners->head;
HXDLIN(6475)															while(hx::IsNotNull( cx_ite15 )){
HXLINE(6475)																 ::zpp_nape::callbacks::ZPP_InteractionListener x4 = cx_ite15->elt;
HXDLIN(6475)																if ((x4->event == 5)) {
HXLINE(6476)																	if (((x4->itype & inttype1) != 0)) {
HXLINE(6477)																		 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this38 = _gthis->prelisteners;
HXDLIN(6477)																		 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret77;
HXDLIN(6477)																		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE(6477)																			ret77 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(6477)																			ret77 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN(6477)																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret77->next;
HXDLIN(6477)																			ret77->next = null();
            																		}
HXDLIN(6477)																		ret77->elt = x4;
HXDLIN(6477)																		 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp20 = ret77;
HXDLIN(6477)																		if (hx::IsNull( lite1 )) {
HXLINE(6477)																			temp20->next = _this38->head;
HXDLIN(6477)																			_this38->head = temp20;
            																		}
            																		else {
HXLINE(6477)																			temp20->next = lite1->next;
HXDLIN(6477)																			lite1->next = temp20;
            																		}
HXDLIN(6477)																		_this38->pushmod = (_this38->modified = true);
HXDLIN(6477)																		_this38->length++;
HXDLIN(6477)																		lite1 = temp20;
HXLINE(6478)																		if (!(anyimpure1)) {
HXLINE(6478)																			anyimpure1 = !(x4->pure);
            																		}
            																		else {
HXLINE(6478)																			anyimpure1 = true;
            																		}
            																	}
            																}
HXLINE(6475)																cx_ite15 = cx_ite15->next;
            															}
            														}
            													}
HXLINE(6481)													if (hx::IsNull( this->prelisteners->head )) {
HXLINE(6482)														cx_ite12 = cx_ite12->next;
HXLINE(6483)														continue;
            													}
HXLINE(6485)													callbackset1 = ::zpp_nape::phys::ZPP_Interactor_obj::get(i11,i21);
HXLINE(6486)													if (hx::IsNull( callbackset1 )) {
HXLINE(6487)														ncallbackset1 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i11,i21);
HXLINE(6488)														this->add_callbackset(ncallbackset1);
            													}
HXLINE(6490)													bool ret78;
HXDLIN(6490)													if (hx::IsNotNull( callbackset1 )) {
HXLINE(6490)														bool ret79;
HXDLIN(6490)														if ((callbackset1->COLLISIONstamp == this->stamp)) {
HXLINE(6490)															ret79 = continuous;
            														}
            														else {
HXLINE(6490)															ret79 = true;
            														}
HXDLIN(6490)														if (ret79) {
HXLINE(6490)															ret78 = ((callbackset1->COLLISIONstate & 4) == 0);
            														}
            														else {
HXLINE(6490)															ret78 = false;
            														}
            													}
            													else {
HXLINE(6490)														ret78 = true;
            													}
HXDLIN(6490)													if (ret78) {
HXLINE(6491)														if (hx::IsNotNull( ncallbackset1 )) {
HXLINE(6491)															callbackset1 = ncallbackset1;
            														}
HXLINE(6492)														if (hx::IsNotNull( callbackset1 )) {
HXLINE(6494)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite16 = this->prelisteners->head;
HXLINE(6495)															while(hx::IsNotNull( cx_ite16 )){
HXLINE(6496)																 ::zpp_nape::callbacks::ZPP_InteractionListener listener3 = cx_ite16->elt;
HXLINE(6498)																if ((listener3->itype == 7)) {
HXLINE(6499)																	callbackset1->COLLISIONstamp = this->stamp;
HXLINE(6500)																	callbackset1->SENSORstamp = this->stamp;
HXLINE(6501)																	callbackset1->FLUIDstamp = this->stamp;
            																}
            																else {
HXLINE(6503)																	callbackset1->COLLISIONstamp = this->stamp;
            																}
HXLINE(6505)																cx_ite16 = cx_ite16->next;
            															}
            														}
HXLINE(6510)														{
HXLINE(6510)															arb3->_hx_mutable = true;
HXDLIN(6510)															if (hx::IsNotNull( arb3->wrap_normal )) {
HXLINE(6510)																arb3->wrap_normal->zpp_inner->_immutable = false;
            															}
HXDLIN(6510)															if (hx::IsNotNull( arb3->wrap_contacts )) {
HXLINE(6510)																arb3->wrap_contacts->zpp_inner->immutable = false;
            															}
            														}
HXLINE(6512)														bool pact1 = arb3->active;
HXLINE(6513)														arb3->active = true;
HXLINE(6514)														bool emptycontacts1 = false;
HXLINE(6515)														{
HXLINE(6515)															bool fst = true;
HXDLIN(6515)															 ::zpp_nape::dynamics::ZPP_Contact pre4 = null();
HXDLIN(6515)															 ::zpp_nape::dynamics::ZPP_IContact prei = null();
HXDLIN(6515)															 ::zpp_nape::dynamics::ZPP_IContact cx_itei = arb3->innards->next;
HXDLIN(6515)															arb3->hc2 = false;
HXDLIN(6515)															{
HXLINE(6515)																 ::zpp_nape::dynamics::ZPP_Contact cx_ite17 = arb3->contacts->next;
HXDLIN(6515)																while(hx::IsNotNull( cx_ite17 )){
HXLINE(6515)																	 ::zpp_nape::dynamics::ZPP_Contact c = cx_ite17;
HXDLIN(6515)																	{
HXLINE(6515)																		if (((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < arb3->stamp)) {
HXLINE(6515)																			 ::zpp_nape::dynamics::ZPP_Contact _this39 = arb3->contacts;
HXDLIN(6515)																			 ::zpp_nape::dynamics::ZPP_Contact old4;
HXDLIN(6515)																			 ::zpp_nape::dynamics::ZPP_Contact ret80;
HXDLIN(6515)																			if (hx::IsNull( pre4 )) {
HXLINE(6515)																				old4 = _this39->next;
HXDLIN(6515)																				ret80 = old4->next;
HXDLIN(6515)																				_this39->next = ret80;
HXDLIN(6515)																				if (hx::IsNull( _this39->next )) {
HXLINE(6515)																					_this39->pushmod = true;
            																				}
            																			}
            																			else {
HXLINE(6515)																				old4 = pre4->next;
HXDLIN(6515)																				ret80 = old4->next;
HXDLIN(6515)																				pre4->next = ret80;
HXDLIN(6515)																				if (hx::IsNull( ret80 )) {
HXLINE(6515)																					_this39->pushmod = true;
            																				}
            																			}
HXDLIN(6515)																			old4->_inuse = false;
HXDLIN(6515)																			_this39->modified = true;
HXDLIN(6515)																			_this39->length--;
HXDLIN(6515)																			_this39->pushmod = true;
HXDLIN(6515)																			cx_ite17 = ret80;
HXDLIN(6515)																			 ::zpp_nape::dynamics::ZPP_IContact _this40 = arb3->innards;
HXDLIN(6515)																			 ::zpp_nape::dynamics::ZPP_IContact old5;
HXDLIN(6515)																			 ::zpp_nape::dynamics::ZPP_IContact ret81;
HXDLIN(6515)																			if (hx::IsNull( prei )) {
HXLINE(6515)																				old5 = _this40->next;
HXDLIN(6515)																				ret81 = old5->next;
HXDLIN(6515)																				_this40->next = ret81;
HXDLIN(6515)																				if (hx::IsNull( _this40->next )) {
HXLINE(6515)																					_this40->pushmod = true;
            																				}
            																			}
            																			else {
HXLINE(6515)																				old5 = prei->next;
HXDLIN(6515)																				ret81 = old5->next;
HXDLIN(6515)																				prei->next = ret81;
HXDLIN(6515)																				if (hx::IsNull( ret81 )) {
HXLINE(6515)																					_this40->pushmod = true;
            																				}
            																			}
HXDLIN(6515)																			old5->_inuse = false;
HXDLIN(6515)																			_this40->modified = true;
HXDLIN(6515)																			_this40->length--;
HXDLIN(6515)																			_this40->pushmod = true;
HXDLIN(6515)																			cx_itei = ret81;
HXDLIN(6515)																			{
HXLINE(6515)																				 ::zpp_nape::dynamics::ZPP_Contact o20 = c;
HXDLIN(6515)																				o20->arbiter = null();
HXDLIN(6515)																				o20->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN(6515)																				::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o20;
            																			}
HXDLIN(6515)																			continue;
            																		}
HXDLIN(6515)																		 ::zpp_nape::dynamics::ZPP_IContact ci = c->inner;
HXDLIN(6515)																		bool pact2 = c->active;
HXDLIN(6515)																		c->active = (c->stamp == arb3->stamp);
HXDLIN(6515)																		if (c->active) {
HXLINE(6515)																			if (fst) {
HXLINE(6515)																				fst = false;
HXDLIN(6515)																				arb3->c1 = ci;
HXDLIN(6515)																				arb3->oc1 = c;
            																			}
            																			else {
HXLINE(6515)																				arb3->hc2 = true;
HXDLIN(6515)																				arb3->c2 = ci;
HXDLIN(6515)																				arb3->oc2 = c;
            																			}
            																		}
HXDLIN(6515)																		if ((pact2 != c->active)) {
HXLINE(6515)																			arb3->contacts->modified = true;
            																		}
HXDLIN(6515)																		pre4 = cx_ite17;
HXDLIN(6515)																		prei = cx_itei;
HXDLIN(6515)																		cx_itei = cx_itei->next;
            																	}
HXDLIN(6515)																	cx_ite17 = cx_ite17->next;
            																}
            															}
HXDLIN(6515)															if (arb3->hc2) {
HXLINE(6515)																arb3->hpc2 = true;
HXDLIN(6515)																if (arb3->oc1->posOnly) {
HXLINE(6515)																	 ::zpp_nape::dynamics::ZPP_IContact tmp = arb3->c1;
HXDLIN(6515)																	arb3->c1 = arb3->c2;
HXDLIN(6515)																	arb3->c2 = tmp;
HXDLIN(6515)																	 ::zpp_nape::dynamics::ZPP_Contact tmp2 = arb3->oc1;
HXDLIN(6515)																	arb3->oc1 = arb3->oc2;
HXDLIN(6515)																	arb3->oc2 = tmp2;
HXDLIN(6515)																	arb3->hc2 = false;
            																}
            																else {
HXLINE(6515)																	if (arb3->oc2->posOnly) {
HXLINE(6515)																		arb3->hc2 = false;
            																	}
            																}
HXDLIN(6515)																if (arb3->oc1->posOnly) {
HXLINE(6515)																	fst = true;
            																}
            															}
            															else {
HXLINE(6515)																arb3->hpc2 = false;
            															}
            														}
HXLINE(6517)														this->precb->zpp_inner->pre_arbiter = arb3;
HXLINE(6518)														this->precb->zpp_inner->set = callbackset1;
HXLINE(6519)														{
HXLINE(6520)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite18 = this->prelisteners->head;
HXLINE(6521)															while(hx::IsNotNull( cx_ite18 )){
HXLINE(6522)																 ::zpp_nape::callbacks::ZPP_InteractionListener listener4 = cx_ite18->elt;
HXLINE(6523)																{
HXLINE(6524)																	this->precb->zpp_inner->listener = listener4;
HXLINE(6551)																	{
HXLINE(6551)																		 ::zpp_nape::callbacks::ZPP_Callback cb3 = this->precb->zpp_inner;
HXDLIN(6551)																		 ::zpp_nape::phys::ZPP_Interactor o110 = callbackset1->int1;
HXDLIN(6551)																		 ::zpp_nape::phys::ZPP_Interactor o22 = callbackset1->int2;
HXDLIN(6551)																		bool ret82;
HXDLIN(6551)																		 ::zpp_nape::callbacks::ZPP_OptionType _this41 = listener4->options1;
HXDLIN(6551)																		 ::zpp_nape::util::ZNPList_ZPP_CbType xs2 = o110->cbTypes;
HXDLIN(6551)																		bool ret83;
HXDLIN(6551)																		if (_this41->nonemptyintersection(xs2,_this41->includes)) {
HXLINE(6551)																			ret83 = !(_this41->nonemptyintersection(xs2,_this41->excludes));
            																		}
            																		else {
HXLINE(6551)																			ret83 = false;
            																		}
HXDLIN(6551)																		if (ret83) {
HXLINE(6551)																			 ::zpp_nape::callbacks::ZPP_OptionType _this42 = listener4->options2;
HXDLIN(6551)																			 ::zpp_nape::util::ZNPList_ZPP_CbType xs3 = o22->cbTypes;
HXDLIN(6551)																			if (_this42->nonemptyintersection(xs3,_this42->includes)) {
HXLINE(6551)																				ret82 = !(_this42->nonemptyintersection(xs3,_this42->excludes));
            																			}
            																			else {
HXLINE(6551)																				ret82 = false;
            																			}
            																		}
            																		else {
HXLINE(6551)																			ret82 = false;
            																		}
HXDLIN(6551)																		if (ret82) {
HXLINE(6551)																			cb3->int1 = o110;
HXDLIN(6551)																			cb3->int2 = o22;
            																		}
            																		else {
HXLINE(6551)																			cb3->int1 = o22;
HXDLIN(6551)																			cb3->int2 = o110;
            																		}
            																	}
HXLINE(6552)																	this->precb->zpp_inner->pre_swapped = hx::IsNotEq( i11,this->precb->zpp_inner->int1 );
HXLINE(6553)																	 ::nape::callbacks::PreFlag ret84 = ( ( ::nape::callbacks::PreFlag)(listener4->handlerp(this->precb)) );
HXLINE(6554)																	if (hx::IsNotNull( ret84 )) {
HXLINE(6555)																		int ret85;
HXDLIN(6555)																		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE(6555)																			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6555)																			::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6555)																			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																		}
HXDLIN(6555)																		if (hx::IsEq( ret84,::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE(6555)																			ret85 = 5;
            																		}
            																		else {
HXLINE(6555)																			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE(6555)																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6555)																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6555)																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																			}
HXDLIN(6555)																			if (hx::IsEq( ret84,::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE(6555)																				ret85 = 1;
            																			}
            																			else {
HXLINE(6555)																				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE(6555)																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6555)																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6555)																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																				}
HXDLIN(6555)																				if (hx::IsEq( ret84,::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE(6555)																					ret85 = 6;
            																				}
            																				else {
HXLINE(6555)																					ret85 = 2;
            																				}
            																			}
            																		}
HXDLIN(6555)																		arb3->immState = ret85;
            																	}
            																}
HXLINE(6558)																cx_ite18 = cx_ite18->next;
            															}
            														}
HXLINE(6562)														{
HXLINE(6562)															arb3->_hx_mutable = false;
HXDLIN(6562)															if (hx::IsNotNull( arb3->wrap_normal )) {
HXLINE(6562)																arb3->wrap_normal->zpp_inner->_immutable = true;
            															}
HXDLIN(6562)															if (hx::IsNotNull( arb3->wrap_contacts )) {
HXLINE(6562)																arb3->wrap_contacts->zpp_inner->immutable = true;
            															}
            														}
HXLINE(6564)														arb3->active = pact1;
HXLINE(6565)														if (hx::IsNotNull( callbackset1 )) {
HXLINE(6567)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite19 = this->prelisteners->head;
HXLINE(6568)															while(hx::IsNotNull( cx_ite19 )){
HXLINE(6569)																 ::zpp_nape::callbacks::ZPP_InteractionListener listener5 = cx_ite19->elt;
HXLINE(6571)																if ((listener5->itype == 7)) {
HXLINE(6572)																	callbackset1->COLLISIONstate = arb3->immState;
HXLINE(6573)																	callbackset1->SENSORstate = arb3->immState;
HXLINE(6574)																	callbackset1->FLUIDstate = arb3->immState;
            																}
            																else {
HXLINE(6576)																	callbackset1->COLLISIONstate = arb3->immState;
            																}
HXLINE(6578)																cx_ite19 = cx_ite19->next;
            															}
            														}
            													}
            													else {
HXLINE(6583)														if (hx::IsNull( callbackset1 )) {
HXLINE(6584)															if (((arb3->immState & 4) == 0)) {
HXLINE(6584)																arb3->immState = 1;
            															}
            														}
            														else {
HXLINE(6586)															arb3->immState = callbackset1->COLLISIONstate;
            														}
            													}
            												}
HXLINE(6588)												cx_ite12 = cx_ite12->next;
            											}
            										}
HXLINE(6592)										cx_ite11 = cx_ite11->next;
            									}
            								}
HXLINE(6595)								bool ret86;
HXDLIN(6595)								if (anyimpure1) {
HXLINE(6595)									ret86 = ((arb3->immState & 4) == 0);
            								}
            								else {
HXLINE(6595)									ret86 = false;
            								}
HXDLIN(6595)								if (ret86) {
HXLINE(6597)									if ((arb3->b1->type == 2)) {
HXLINE(6598)										 ::zpp_nape::phys::ZPP_Body o23 = arb3->b1;
HXLINE(6607)										if (!(o23->world)) {
HXLINE(6616)											int ret87;
HXDLIN(6616)											if (this->midstep) {
HXLINE(6616)												ret87 = 0;
            											}
            											else {
HXLINE(6616)												ret87 = 1;
            											}
HXDLIN(6616)											o23->component->waket = (this->stamp + ret87);
HXLINE(6617)											if ((o23->type == 3)) {
HXLINE(6617)												o23->kinematicDelaySleep = true;
            											}
HXLINE(6618)											if (o23->component->sleeping) {
HXLINE(6619)												this->really_wake(o23,false);
            											}
            										}
            									}
HXLINE(6623)									if ((arb3->b1->type == 2)) {
HXLINE(6624)										 ::zpp_nape::phys::ZPP_Body o24 = arb3->b2;
HXLINE(6633)										if (!(o24->world)) {
HXLINE(6642)											int ret88;
HXDLIN(6642)											if (this->midstep) {
HXLINE(6642)												ret88 = 0;
            											}
            											else {
HXLINE(6642)												ret88 = 1;
            											}
HXDLIN(6642)											o24->component->waket = (this->stamp + ret88);
HXLINE(6643)											if ((o24->type == 3)) {
HXLINE(6643)												o24->kinematicDelaySleep = true;
            											}
HXLINE(6644)											if (o24->component->sleeping) {
HXLINE(6645)												this->really_wake(o24,false);
            											}
            										}
            									}
            								}
            							}
HXLINE(6706)							if (((arb3->immState & 1) != 0)) {
HXLINE(6707)								bool ret89;
HXDLIN(6707)								if ((arb3->b1->type == 2)) {
HXLINE(6707)									ret89 = arb3->b1->component->sleeping;
            								}
            								else {
HXLINE(6707)									ret89 = false;
            								}
HXDLIN(6707)								if (ret89) {
HXLINE(6708)									 ::zpp_nape::phys::ZPP_Body o25 = arb3->b1;
HXLINE(6717)									if (!(o25->world)) {
HXLINE(6726)										int ret90;
HXDLIN(6726)										if (this->midstep) {
HXLINE(6726)											ret90 = 0;
            										}
            										else {
HXLINE(6726)											ret90 = 1;
            										}
HXDLIN(6726)										o25->component->waket = (this->stamp + ret90);
HXLINE(6727)										if ((o25->type == 3)) {
HXLINE(6727)											o25->kinematicDelaySleep = true;
            										}
HXLINE(6728)										if (o25->component->sleeping) {
HXLINE(6729)											this->really_wake(o25,false);
            										}
            									}
            								}
HXLINE(6733)								bool ret91;
HXDLIN(6733)								if ((arb3->b2->type == 2)) {
HXLINE(6733)									ret91 = arb3->b2->component->sleeping;
            								}
            								else {
HXLINE(6733)									ret91 = false;
            								}
HXDLIN(6733)								if (ret91) {
HXLINE(6734)									 ::zpp_nape::phys::ZPP_Body o26 = arb3->b2;
HXLINE(6743)									if (!(o26->world)) {
HXLINE(6752)										int ret92;
HXDLIN(6752)										if (this->midstep) {
HXLINE(6752)											ret92 = 0;
            										}
            										else {
HXLINE(6752)											ret92 = 1;
            										}
HXDLIN(6752)										o26->component->waket = (this->stamp + ret92);
HXLINE(6753)										if ((o26->type == 3)) {
HXLINE(6753)											o26->kinematicDelaySleep = true;
            										}
HXLINE(6754)										if (o26->component->sleeping) {
HXLINE(6755)											this->really_wake(o26,false);
            										}
            									}
            								}
            							}
HXLINE(6760)							if (arb3->sleeping) {
HXLINE(6761)								arb3->sleeping = false;
HXLINE(6762)								{
HXLINE(6762)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret93;
HXDLIN(6762)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(6762)										ret93 =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(6762)										ret93 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(6762)										::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret93->next;
HXDLIN(6762)										ret93->next = null();
            									}
HXDLIN(6762)									ret93->elt = arb3;
HXDLIN(6762)									 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp21 = ret93;
HXDLIN(6762)									temp21->next = carbs->head;
HXDLIN(6762)									carbs->head = temp21;
HXDLIN(6762)									carbs->modified = true;
HXDLIN(6762)									carbs->length++;
            								}
            							}
HXLINE(6764)							ret = arb3;
            						}
            						else {
HXLINE(6766)							if (first1) {
HXLINE(6767)								{
HXLINE(6768)									 ::zpp_nape::dynamics::ZPP_ColArbiter o27 = arb3;
HXLINE(6777)									{
HXLINE(6777)										o27->userdef_dyn_fric = false;
HXDLIN(6777)										o27->userdef_stat_fric = false;
HXDLIN(6777)										o27->userdef_restitution = false;
HXDLIN(6777)										o27->userdef_rfric = false;
HXDLIN(6777)										o27->_hx___ref_edge1 = (o27->_hx___ref_edge2 = null());
            									}
HXLINE(6778)									o27->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXLINE(6779)									::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o27;
            								}
HXLINE(6784)								ret = null();
            							}
            							else {
HXLINE(6786)								ret = arb3;
            							}
            						}
            					}
            					else {
HXLINE(6788)						ret = arb3;
            					}
            				}
            				else {
HXLINE(6792)					 ::zpp_nape::dynamics::ZPP_Arbiter xarb4;
HXDLIN(6792)					if (hx::IsNull( in_arb )) {
HXLINE(6793)						 ::zpp_nape::dynamics::ZPP_Arbiter ret94 = null();
HXLINE(6794)						 ::zpp_nape::phys::ZPP_Body b4;
HXDLIN(6794)						if ((b1->arbiters->length < b2->arbiters->length)) {
HXLINE(6794)							b4 = b1;
            						}
            						else {
HXLINE(6794)							b4 = b2;
            						}
HXLINE(6795)						{
HXLINE(6796)							 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite20 = b4->arbiters->head;
HXLINE(6797)							while(hx::IsNotNull( cx_ite20 )){
HXLINE(6798)								 ::zpp_nape::dynamics::ZPP_Arbiter arb4 = cx_ite20->elt;
HXLINE(6808)								bool xarb5;
HXDLIN(6808)								if ((arb4->id == sa->id)) {
HXLINE(6808)									xarb5 = (arb4->di == sb->id);
            								}
            								else {
HXLINE(6808)									xarb5 = false;
            								}
HXDLIN(6808)								if (xarb5) {
HXLINE(6809)									ret94 = arb4;
HXLINE(6810)									goto _hx_goto_367;
            								}
HXLINE(6813)								cx_ite20 = cx_ite20->next;
            							}
            							_hx_goto_367:;
            						}
HXLINE(6792)						xarb4 = ret94;
            					}
            					else {
HXLINE(6792)						xarb4 = in_arb;
            					}
HXLINE(6818)					bool first2 = hx::IsNull( xarb4 );
HXLINE(6819)					 ::zpp_nape::dynamics::ZPP_SensorArbiter arb5;
HXLINE(6820)					bool swapped2 = false;
HXLINE(6821)					if (first2) {
HXLINE(6822)						if (hx::IsNull( ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(6823)							arb5 =  ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(6829)							arb5 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(6830)							::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb5->next;
HXLINE(6831)							arb5->next = null();
            						}
            					}
            					else {
HXLINE(6839)						if (hx::IsNull( xarb4->sensorarb )) {
HXLINE(6840)							{
HXLINE(6840)								xarb4->cleared = true;
HXDLIN(6840)								{
HXLINE(6840)									 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this43 = xarb4->b1->arbiters;
HXDLIN(6840)									{
HXLINE(6840)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre5 = null();
HXDLIN(6840)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur6 = _this43->head;
HXDLIN(6840)										bool ret95 = false;
HXDLIN(6840)										while(hx::IsNotNull( cur6 )){
HXLINE(6840)											if (hx::IsEq( cur6->elt,xarb4 )) {
HXLINE(6840)												{
HXLINE(6840)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old6;
HXDLIN(6840)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret96;
HXDLIN(6840)													if (hx::IsNull( pre5 )) {
HXLINE(6840)														old6 = _this43->head;
HXDLIN(6840)														ret96 = old6->next;
HXDLIN(6840)														_this43->head = ret96;
HXDLIN(6840)														if (hx::IsNull( _this43->head )) {
HXLINE(6840)															_this43->pushmod = true;
            														}
            													}
            													else {
HXLINE(6840)														old6 = pre5->next;
HXDLIN(6840)														ret96 = old6->next;
HXDLIN(6840)														pre5->next = ret96;
HXDLIN(6840)														if (hx::IsNull( ret96 )) {
HXLINE(6840)															_this43->pushmod = true;
            														}
            													}
HXDLIN(6840)													{
HXLINE(6840)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o28 = old6;
HXDLIN(6840)														o28->elt = null();
HXDLIN(6840)														o28->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6840)														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o28;
            													}
HXDLIN(6840)													_this43->modified = true;
HXDLIN(6840)													_this43->length--;
HXDLIN(6840)													_this43->pushmod = true;
            												}
HXDLIN(6840)												ret95 = true;
HXDLIN(6840)												goto _hx_goto_368;
            											}
HXDLIN(6840)											pre5 = cur6;
HXDLIN(6840)											cur6 = cur6->next;
            										}
            										_hx_goto_368:;
            									}
            								}
HXDLIN(6840)								{
HXLINE(6840)									 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this44 = xarb4->b2->arbiters;
HXDLIN(6840)									{
HXLINE(6840)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre6 = null();
HXDLIN(6840)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur7 = _this44->head;
HXDLIN(6840)										bool ret97 = false;
HXDLIN(6840)										while(hx::IsNotNull( cur7 )){
HXLINE(6840)											if (hx::IsEq( cur7->elt,xarb4 )) {
HXLINE(6840)												{
HXLINE(6840)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old7;
HXDLIN(6840)													 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret98;
HXDLIN(6840)													if (hx::IsNull( pre6 )) {
HXLINE(6840)														old7 = _this44->head;
HXDLIN(6840)														ret98 = old7->next;
HXDLIN(6840)														_this44->head = ret98;
HXDLIN(6840)														if (hx::IsNull( _this44->head )) {
HXLINE(6840)															_this44->pushmod = true;
            														}
            													}
            													else {
HXLINE(6840)														old7 = pre6->next;
HXDLIN(6840)														ret98 = old7->next;
HXDLIN(6840)														pre6->next = ret98;
HXDLIN(6840)														if (hx::IsNull( ret98 )) {
HXLINE(6840)															_this44->pushmod = true;
            														}
            													}
HXDLIN(6840)													{
HXLINE(6840)														 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o29 = old7;
HXDLIN(6840)														o29->elt = null();
HXDLIN(6840)														o29->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6840)														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o29;
            													}
HXDLIN(6840)													_this44->modified = true;
HXDLIN(6840)													_this44->length--;
HXDLIN(6840)													_this44->pushmod = true;
            												}
HXDLIN(6840)												ret97 = true;
HXDLIN(6840)												goto _hx_goto_369;
            											}
HXDLIN(6840)											pre6 = cur7;
HXDLIN(6840)											cur7 = cur7->next;
            										}
            										_hx_goto_369:;
            									}
            								}
HXDLIN(6840)								if (hx::IsNotNull( xarb4->pair )) {
HXLINE(6840)									xarb4->pair->arb = null();
HXDLIN(6840)									xarb4->pair = null();
            								}
HXDLIN(6840)								xarb4->active = false;
HXDLIN(6840)								this->f_arbiters->modified = true;
            							}
HXLINE(6842)							if (hx::IsNull( ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(6843)								arb5 =  ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(6849)								arb5 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(6850)								::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb5->next;
HXLINE(6851)								arb5->next = null();
            							}
HXLINE(6858)							arb5->intchange = true;
HXLINE(6859)							first2 = true;
HXLINE(6860)							swapped2 = true;
            						}
            						else {
HXLINE(6862)							arb5 = xarb4->sensorarb;
            						}
            					}
HXLINE(6865)					int inttype2 = 2;
HXLINE(6866)					bool ret99;
HXDLIN(6866)					bool ret100;
HXDLIN(6866)					if (!(first2)) {
HXLINE(6866)						ret100 = (arb5->stamp != this->stamp);
            					}
            					else {
HXLINE(6866)						ret100 = true;
            					}
HXDLIN(6866)					if (!(ret100)) {
HXLINE(6866)						ret99 = continuous;
            					}
            					else {
HXLINE(6866)						ret99 = true;
            					}
HXDLIN(6866)					if (ret99) {
HXLINE(6867)						arb5->stamp = this->stamp;
HXLINE(6868)						if (::zpp_nape::geom::ZPP_Collide_obj::testCollide(sa,sb)) {
HXLINE(6869)							if (first2) {
HXLINE(6870)								{
HXLINE(6870)									int di2 = sb->id;
HXDLIN(6870)									{
HXLINE(6870)										arb5->b1 = s1->body;
HXDLIN(6870)										arb5->ws1 = s1;
HXDLIN(6870)										arb5->b2 = s2->body;
HXDLIN(6870)										arb5->ws2 = s2;
HXDLIN(6870)										arb5->id = sa->id;
HXDLIN(6870)										arb5->di = di2;
HXDLIN(6870)										{
HXLINE(6870)											 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this45 = arb5->b1->arbiters;
HXDLIN(6870)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret101;
HXDLIN(6870)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(6870)												ret101 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(6870)												ret101 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6870)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret101->next;
HXDLIN(6870)												ret101->next = null();
            											}
HXDLIN(6870)											ret101->elt = arb5;
HXDLIN(6870)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp22 = ret101;
HXDLIN(6870)											temp22->next = _this45->head;
HXDLIN(6870)											_this45->head = temp22;
HXDLIN(6870)											_this45->modified = true;
HXDLIN(6870)											_this45->length++;
            										}
HXDLIN(6870)										{
HXLINE(6870)											 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this46 = arb5->b2->arbiters;
HXDLIN(6870)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret102;
HXDLIN(6870)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(6870)												ret102 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(6870)												ret102 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(6870)												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret102->next;
HXDLIN(6870)												ret102->next = null();
            											}
HXDLIN(6870)											ret102->elt = arb5;
HXDLIN(6870)											 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp23 = ret102;
HXDLIN(6870)											temp23->next = _this46->head;
HXDLIN(6870)											_this46->head = temp23;
HXDLIN(6870)											_this46->modified = true;
HXDLIN(6870)											_this46->length++;
            										}
HXDLIN(6870)										arb5->active = true;
HXDLIN(6870)										arb5->present = 0;
HXDLIN(6870)										arb5->cleared = false;
HXDLIN(6870)										arb5->sleeping = false;
HXDLIN(6870)										arb5->fresh = false;
HXDLIN(6870)										arb5->presentable = false;
            									}
            								}
HXLINE(6871)								{
HXLINE(6871)									 ::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this47 = this->s_arbiters;
HXDLIN(6871)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret103;
HXDLIN(6871)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(6871)										ret103 =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(6871)										ret103 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(6871)										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret103->next;
HXDLIN(6871)										ret103->next = null();
            									}
HXDLIN(6871)									ret103->elt = arb5;
HXDLIN(6871)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp24 = ret103;
HXDLIN(6871)									temp24->next = _this47->head;
HXDLIN(6871)									_this47->head = temp24;
HXDLIN(6871)									_this47->modified = true;
HXDLIN(6871)									_this47->length++;
            								}
HXLINE(6872)								arb5->fresh = !(swapped2);
            							}
            							else {
HXLINE(6875)								bool ret104;
HXDLIN(6875)								if ((arb5->up_stamp >= (this->stamp - 1))) {
HXLINE(6875)									if ((arb5->endGenerated == this->stamp)) {
HXLINE(6875)										ret104 = continuous;
            									}
            									else {
HXLINE(6875)										ret104 = false;
            									}
            								}
            								else {
HXLINE(6875)									ret104 = true;
            								}
HXDLIN(6875)								arb5->fresh = ret104;
            							}
HXLINE(6877)							arb5->up_stamp = arb5->stamp;
HXLINE(6878)							bool ret105;
HXDLIN(6878)							if (!(arb5->fresh)) {
HXLINE(6878)								ret105 = ((arb5->immState & 4) == 0);
            							}
            							else {
HXLINE(6878)								ret105 = true;
            							}
HXDLIN(6878)							if (ret105) {
HXLINE(6879)								arb5->immState = 1;
HXLINE(6880)								bool anyimpure2 = false;
HXLINE(6881)								 ::zpp_nape::shape::ZPP_Shape arbs12;
HXDLIN(6881)								if ((arb5->ws1->id > arb5->ws2->id)) {
HXLINE(6881)									arbs12 = arb5->ws2;
            								}
            								else {
HXLINE(6881)									arbs12 = arb5->ws1;
            								}
HXLINE(6882)								 ::zpp_nape::shape::ZPP_Shape arbs22;
HXDLIN(6882)								if ((arb5->ws1->id > arb5->ws2->id)) {
HXLINE(6882)									arbs22 = arb5->ws1;
            								}
            								else {
HXLINE(6882)									arbs22 = arb5->ws2;
            								}
HXLINE(6883)								{
HXLINE(6883)									{
HXLINE(6883)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this48 = this->mrca1;
HXDLIN(6883)										{
HXLINE(6883)											while(hx::IsNotNull( _this48->head )){
HXLINE(6883)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret106 = _this48->head;
HXDLIN(6883)												_this48->head = ret106->next;
HXDLIN(6883)												{
HXLINE(6883)													 ::zpp_nape::util::ZNPNode_ZPP_Interactor o30 = ret106;
HXDLIN(6883)													o30->elt = null();
HXDLIN(6883)													o30->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o30;
            												}
HXDLIN(6883)												if (hx::IsNull( _this48->head )) {
HXLINE(6883)													_this48->pushmod = true;
            												}
HXDLIN(6883)												_this48->modified = true;
HXDLIN(6883)												_this48->length--;
            											}
HXDLIN(6883)											_this48->pushmod = true;
            										}
            									}
HXDLIN(6883)									{
HXLINE(6883)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this49 = this->mrca2;
HXDLIN(6883)										{
HXLINE(6883)											while(hx::IsNotNull( _this49->head )){
HXLINE(6883)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret107 = _this49->head;
HXDLIN(6883)												_this49->head = ret107->next;
HXDLIN(6883)												{
HXLINE(6883)													 ::zpp_nape::util::ZNPNode_ZPP_Interactor o31 = ret107;
HXDLIN(6883)													o31->elt = null();
HXDLIN(6883)													o31->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o31;
            												}
HXDLIN(6883)												if (hx::IsNull( _this49->head )) {
HXLINE(6883)													_this49->pushmod = true;
            												}
HXDLIN(6883)												_this49->modified = true;
HXDLIN(6883)												_this49->length--;
            											}
HXDLIN(6883)											_this49->pushmod = true;
            										}
            									}
HXDLIN(6883)									if (hx::IsNotNull( arbs12->cbSet )) {
HXLINE(6883)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this50 = this->mrca1;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret108;
HXDLIN(6883)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6883)											ret108 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6883)											ret108 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret108->next;
HXDLIN(6883)											ret108->next = null();
            										}
HXDLIN(6883)										ret108->elt = arbs12;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp25 = ret108;
HXDLIN(6883)										temp25->next = _this50->head;
HXDLIN(6883)										_this50->head = temp25;
HXDLIN(6883)										_this50->modified = true;
HXDLIN(6883)										_this50->length++;
            									}
HXDLIN(6883)									if (hx::IsNotNull( arbs12->body->cbSet )) {
HXLINE(6883)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this51 = this->mrca1;
HXDLIN(6883)										 ::zpp_nape::phys::ZPP_Interactor o32 = arbs12->body;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret109;
HXDLIN(6883)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6883)											ret109 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6883)											ret109 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret109->next;
HXDLIN(6883)											ret109->next = null();
            										}
HXDLIN(6883)										ret109->elt = o32;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp26 = ret109;
HXDLIN(6883)										temp26->next = _this51->head;
HXDLIN(6883)										_this51->head = temp26;
HXDLIN(6883)										_this51->modified = true;
HXDLIN(6883)										_this51->length++;
            									}
HXDLIN(6883)									if (hx::IsNotNull( arbs22->cbSet )) {
HXLINE(6883)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this52 = this->mrca2;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret110;
HXDLIN(6883)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6883)											ret110 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6883)											ret110 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret110->next;
HXDLIN(6883)											ret110->next = null();
            										}
HXDLIN(6883)										ret110->elt = arbs22;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp27 = ret110;
HXDLIN(6883)										temp27->next = _this52->head;
HXDLIN(6883)										_this52->head = temp27;
HXDLIN(6883)										_this52->modified = true;
HXDLIN(6883)										_this52->length++;
            									}
HXDLIN(6883)									if (hx::IsNotNull( arbs22->body->cbSet )) {
HXLINE(6883)										 ::zpp_nape::util::ZNPList_ZPP_Interactor _this53 = this->mrca2;
HXDLIN(6883)										 ::zpp_nape::phys::ZPP_Interactor o33 = arbs22->body;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret111;
HXDLIN(6883)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6883)											ret111 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(6883)											ret111 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret111->next;
HXDLIN(6883)											ret111->next = null();
            										}
HXDLIN(6883)										ret111->elt = o33;
HXDLIN(6883)										 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp28 = ret111;
HXDLIN(6883)										temp28->next = _this53->head;
HXDLIN(6883)										_this53->head = temp28;
HXDLIN(6883)										_this53->modified = true;
HXDLIN(6883)										_this53->length++;
            									}
HXDLIN(6883)									 ::zpp_nape::phys::ZPP_Compound c12 = arbs12->body->compound;
HXDLIN(6883)									 ::zpp_nape::phys::ZPP_Compound c22 = arbs22->body->compound;
HXDLIN(6883)									while(hx::IsNotEq( c12,c22 )){
HXLINE(6883)										int d12;
HXDLIN(6883)										if (hx::IsNull( c12 )) {
HXLINE(6883)											d12 = 0;
            										}
            										else {
HXLINE(6883)											d12 = c12->depth;
            										}
HXDLIN(6883)										int d22;
HXDLIN(6883)										if (hx::IsNull( c22 )) {
HXLINE(6883)											d22 = 0;
            										}
            										else {
HXLINE(6883)											d22 = c22->depth;
            										}
HXDLIN(6883)										if ((d12 < d22)) {
HXLINE(6883)											if (hx::IsNotNull( c22->cbSet )) {
HXLINE(6883)												 ::zpp_nape::util::ZNPList_ZPP_Interactor _this54 = this->mrca2;
HXDLIN(6883)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret112;
HXDLIN(6883)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6883)													ret112 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(6883)													ret112 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret112->next;
HXDLIN(6883)													ret112->next = null();
            												}
HXDLIN(6883)												ret112->elt = c22;
HXDLIN(6883)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp29 = ret112;
HXDLIN(6883)												temp29->next = _this54->head;
HXDLIN(6883)												_this54->head = temp29;
HXDLIN(6883)												_this54->modified = true;
HXDLIN(6883)												_this54->length++;
            											}
HXDLIN(6883)											c22 = c22->compound;
            										}
            										else {
HXLINE(6883)											if (hx::IsNotNull( c12->cbSet )) {
HXLINE(6883)												 ::zpp_nape::util::ZNPList_ZPP_Interactor _this55 = this->mrca1;
HXDLIN(6883)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret113;
HXDLIN(6883)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(6883)													ret113 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(6883)													ret113 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(6883)													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret113->next;
HXDLIN(6883)													ret113->next = null();
            												}
HXDLIN(6883)												ret113->elt = c12;
HXDLIN(6883)												 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp30 = ret113;
HXDLIN(6883)												temp30->next = _this55->head;
HXDLIN(6883)												_this55->head = temp30;
HXDLIN(6883)												_this55->modified = true;
HXDLIN(6883)												_this55->length++;
            											}
HXDLIN(6883)											c12 = c12->compound;
            										}
            									}
            								}
HXLINE(6884)								{
HXLINE(6885)									 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite21 = this->mrca1->head;
HXLINE(6886)									while(hx::IsNotNull( cx_ite21 )){
HXLINE(6887)										 ::zpp_nape::phys::ZPP_Interactor i12 = cx_ite21->elt;
HXLINE(6889)										{
HXLINE(6890)											 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite22 = this->mrca2->head;
HXLINE(6891)											while(hx::IsNotNull( cx_ite22 )){
HXLINE(6892)												 ::zpp_nape::phys::ZPP_Interactor i22 = cx_ite22->elt;
HXLINE(6893)												{
HXLINE(6894)													 ::zpp_nape::callbacks::ZPP_CbSet cb12 = i12->cbSet;
HXLINE(6895)													 ::zpp_nape::callbacks::ZPP_CbSet cb22 = i22->cbSet;
HXLINE(6904)													 ::zpp_nape::space::ZPP_CbSetManager _this56 = cb12->manager;
HXDLIN(6904)													 ::zpp_nape::callbacks::ZPP_CbSetPair ret114 = null();
HXDLIN(6904)													 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs4;
HXDLIN(6904)													if ((cb12->cbpairs->length < cb22->cbpairs->length)) {
HXLINE(6904)														pairs4 = cb12->cbpairs;
            													}
            													else {
HXLINE(6904)														pairs4 = cb22->cbpairs;
            													}
HXDLIN(6904)													{
HXLINE(6904)														 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite23 = pairs4->head;
HXDLIN(6904)														while(hx::IsNotNull( cx_ite23 )){
HXLINE(6904)															 ::zpp_nape::callbacks::ZPP_CbSetPair p4 = cx_ite23->elt;
HXDLIN(6904)															bool ret115;
HXDLIN(6904)															bool ret116;
HXDLIN(6904)															if (hx::IsEq( p4->a,cb12 )) {
HXLINE(6904)																ret116 = hx::IsEq( p4->b,cb22 );
            															}
            															else {
HXLINE(6904)																ret116 = false;
            															}
HXDLIN(6904)															if (!(ret116)) {
HXLINE(6904)																if (hx::IsEq( p4->a,cb22 )) {
HXLINE(6904)																	ret115 = hx::IsEq( p4->b,cb12 );
            																}
            																else {
HXLINE(6904)																	ret115 = false;
            																}
            															}
            															else {
HXLINE(6904)																ret115 = true;
            															}
HXDLIN(6904)															if (ret115) {
HXLINE(6904)																ret114 = p4;
HXDLIN(6904)																goto _hx_goto_375;
            															}
HXDLIN(6904)															cx_ite23 = cx_ite23->next;
            														}
            														_hx_goto_375:;
            													}
HXDLIN(6904)													if (hx::IsNull( ret114 )) {
HXLINE(6904)														 ::zpp_nape::callbacks::ZPP_CbSetPair ret117;
HXDLIN(6904)														{
HXLINE(6904)															if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(6904)																ret117 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(6904)																ret117 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(6904)																::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret117->next;
HXDLIN(6904)																ret117->next = null();
            															}
HXDLIN(6904)															ret117->zip_listeners = true;
            														}
HXDLIN(6904)														if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb12,cb22)) {
HXLINE(6904)															ret117->a = cb12;
HXDLIN(6904)															ret117->b = cb22;
            														}
            														else {
HXLINE(6904)															ret117->a = cb22;
HXDLIN(6904)															ret117->b = cb12;
            														}
HXDLIN(6904)														ret114 = ret117;
HXDLIN(6904)														cb12->cbpairs->add(ret114);
HXDLIN(6904)														if (hx::IsNotEq( cb22,cb12 )) {
HXLINE(6904)															cb22->cbpairs->add(ret114);
            														}
            													}
HXDLIN(6904)													if (ret114->zip_listeners) {
HXLINE(6904)														ret114->zip_listeners = false;
HXDLIN(6904)														ret114->_hx___validate();
            													}
HXDLIN(6904)													if (hx::IsNull( ret114->listeners->head )) {
HXLINE(6905)														cx_ite22 = cx_ite22->next;
HXLINE(6906)														continue;
            													}
HXLINE(6908)													 ::zpp_nape::space::ZPP_CallbackSet callbackset2 = null();
HXLINE(6909)													 ::zpp_nape::space::ZPP_CallbackSet ncallbackset2 = null();
HXLINE(6910)													{
HXLINE(6910)														 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this57 = this->prelisteners;
HXDLIN(6910)														{
HXLINE(6910)															while(hx::IsNotNull( _this57->head )){
HXLINE(6910)																 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret118 = _this57->head;
HXDLIN(6910)																_this57->head = ret118->next;
HXDLIN(6910)																{
HXLINE(6910)																	 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener o34 = ret118;
HXDLIN(6910)																	o34->elt = null();
HXDLIN(6910)																	o34->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN(6910)																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o34;
            																}
HXDLIN(6910)																if (hx::IsNull( _this57->head )) {
HXLINE(6910)																	_this57->pushmod = true;
            																}
HXDLIN(6910)																_this57->modified = true;
HXDLIN(6910)																_this57->length--;
            															}
HXDLIN(6910)															_this57->pushmod = true;
            														}
            													}
HXLINE(6911)													 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite2 = null();
HXLINE(6912)													{
HXLINE(6912)														 ::zpp_nape::space::ZPP_CbSetManager _this58 = cb12->manager;
HXDLIN(6912)														 ::zpp_nape::callbacks::ZPP_CbSetPair ret119 = null();
HXDLIN(6912)														 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs5;
HXDLIN(6912)														if ((cb12->cbpairs->length < cb22->cbpairs->length)) {
HXLINE(6912)															pairs5 = cb12->cbpairs;
            														}
            														else {
HXLINE(6912)															pairs5 = cb22->cbpairs;
            														}
HXDLIN(6912)														{
HXLINE(6912)															 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite24 = pairs5->head;
HXDLIN(6912)															while(hx::IsNotNull( cx_ite24 )){
HXLINE(6912)																 ::zpp_nape::callbacks::ZPP_CbSetPair p5 = cx_ite24->elt;
HXDLIN(6912)																bool ret120;
HXDLIN(6912)																bool ret121;
HXDLIN(6912)																if (hx::IsEq( p5->a,cb12 )) {
HXLINE(6912)																	ret121 = hx::IsEq( p5->b,cb22 );
            																}
            																else {
HXLINE(6912)																	ret121 = false;
            																}
HXDLIN(6912)																if (!(ret121)) {
HXLINE(6912)																	if (hx::IsEq( p5->a,cb22 )) {
HXLINE(6912)																		ret120 = hx::IsEq( p5->b,cb12 );
            																	}
            																	else {
HXLINE(6912)																		ret120 = false;
            																	}
            																}
            																else {
HXLINE(6912)																	ret120 = true;
            																}
HXDLIN(6912)																if (ret120) {
HXLINE(6912)																	ret119 = p5;
HXDLIN(6912)																	goto _hx_goto_377;
            																}
HXDLIN(6912)																cx_ite24 = cx_ite24->next;
            															}
            															_hx_goto_377:;
            														}
HXDLIN(6912)														if (hx::IsNull( ret119 )) {
HXLINE(6912)															 ::zpp_nape::callbacks::ZPP_CbSetPair ret122;
HXDLIN(6912)															{
HXLINE(6912)																if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(6912)																	ret122 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(6912)																	ret122 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(6912)																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret122->next;
HXDLIN(6912)																	ret122->next = null();
            																}
HXDLIN(6912)																ret122->zip_listeners = true;
            															}
HXDLIN(6912)															if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb12,cb22)) {
HXLINE(6912)																ret122->a = cb12;
HXDLIN(6912)																ret122->b = cb22;
            															}
            															else {
HXLINE(6912)																ret122->a = cb22;
HXDLIN(6912)																ret122->b = cb12;
            															}
HXDLIN(6912)															ret119 = ret122;
HXDLIN(6912)															cb12->cbpairs->add(ret119);
HXDLIN(6912)															if (hx::IsNotEq( cb22,cb12 )) {
HXLINE(6912)																cb22->cbpairs->add(ret119);
            															}
            														}
HXDLIN(6912)														if (ret119->zip_listeners) {
HXLINE(6912)															ret119->zip_listeners = false;
HXDLIN(6912)															ret119->_hx___validate();
            														}
HXDLIN(6912)														{
HXLINE(6912)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite25 = ret119->listeners->head;
HXDLIN(6912)															while(hx::IsNotNull( cx_ite25 )){
HXLINE(6912)																 ::zpp_nape::callbacks::ZPP_InteractionListener x5 = cx_ite25->elt;
HXDLIN(6912)																if ((x5->event == 5)) {
HXLINE(6913)																	if (((x5->itype & inttype2) != 0)) {
HXLINE(6914)																		 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this59 = _gthis->prelisteners;
HXDLIN(6914)																		 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret123;
HXDLIN(6914)																		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE(6914)																			ret123 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(6914)																			ret123 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN(6914)																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret123->next;
HXDLIN(6914)																			ret123->next = null();
            																		}
HXDLIN(6914)																		ret123->elt = x5;
HXDLIN(6914)																		 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp31 = ret123;
HXDLIN(6914)																		if (hx::IsNull( lite2 )) {
HXLINE(6914)																			temp31->next = _this59->head;
HXDLIN(6914)																			_this59->head = temp31;
            																		}
            																		else {
HXLINE(6914)																			temp31->next = lite2->next;
HXDLIN(6914)																			lite2->next = temp31;
            																		}
HXDLIN(6914)																		_this59->pushmod = (_this59->modified = true);
HXDLIN(6914)																		_this59->length++;
HXDLIN(6914)																		lite2 = temp31;
HXLINE(6915)																		if (!(anyimpure2)) {
HXLINE(6915)																			anyimpure2 = !(x5->pure);
            																		}
            																		else {
HXLINE(6915)																			anyimpure2 = true;
            																		}
            																	}
            																}
HXLINE(6912)																cx_ite25 = cx_ite25->next;
            															}
            														}
            													}
HXLINE(6918)													if (hx::IsNull( this->prelisteners->head )) {
HXLINE(6919)														cx_ite22 = cx_ite22->next;
HXLINE(6920)														continue;
            													}
HXLINE(6922)													callbackset2 = ::zpp_nape::phys::ZPP_Interactor_obj::get(i12,i22);
HXLINE(6923)													if (hx::IsNull( callbackset2 )) {
HXLINE(6924)														ncallbackset2 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i12,i22);
HXLINE(6925)														this->add_callbackset(ncallbackset2);
            													}
HXLINE(6927)													bool ret124;
HXDLIN(6927)													if (hx::IsNotNull( callbackset2 )) {
HXLINE(6927)														bool ret125;
HXDLIN(6927)														if ((callbackset2->SENSORstamp == this->stamp)) {
HXLINE(6927)															ret125 = continuous;
            														}
            														else {
HXLINE(6927)															ret125 = true;
            														}
HXDLIN(6927)														if (ret125) {
HXLINE(6927)															ret124 = ((callbackset2->SENSORstate & 4) == 0);
            														}
            														else {
HXLINE(6927)															ret124 = false;
            														}
            													}
            													else {
HXLINE(6927)														ret124 = true;
            													}
HXDLIN(6927)													if (ret124) {
HXLINE(6928)														if (hx::IsNotNull( ncallbackset2 )) {
HXLINE(6928)															callbackset2 = ncallbackset2;
            														}
HXLINE(6929)														if (hx::IsNotNull( callbackset2 )) {
HXLINE(6931)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite26 = this->prelisteners->head;
HXLINE(6932)															while(hx::IsNotNull( cx_ite26 )){
HXLINE(6933)																 ::zpp_nape::callbacks::ZPP_InteractionListener listener6 = cx_ite26->elt;
HXLINE(6935)																if ((listener6->itype == 7)) {
HXLINE(6936)																	callbackset2->COLLISIONstamp = this->stamp;
HXLINE(6937)																	callbackset2->SENSORstamp = this->stamp;
HXLINE(6938)																	callbackset2->FLUIDstamp = this->stamp;
            																}
            																else {
HXLINE(6940)																	callbackset2->SENSORstamp = this->stamp;
            																}
HXLINE(6942)																cx_ite26 = cx_ite26->next;
            															}
            														}
HXLINE(6949)														bool pact3 = arb5->active;
HXLINE(6950)														arb5->active = true;
HXLINE(6951)														bool emptycontacts2 = false;
HXLINE(6954)														this->precb->zpp_inner->pre_arbiter = arb5;
HXLINE(6955)														this->precb->zpp_inner->set = callbackset2;
HXLINE(6956)														{
HXLINE(6957)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite27 = this->prelisteners->head;
HXLINE(6958)															while(hx::IsNotNull( cx_ite27 )){
HXLINE(6959)																 ::zpp_nape::callbacks::ZPP_InteractionListener listener7 = cx_ite27->elt;
HXLINE(6960)																{
HXLINE(6961)																	this->precb->zpp_inner->listener = listener7;
HXLINE(6988)																	{
HXLINE(6988)																		 ::zpp_nape::callbacks::ZPP_Callback cb4 = this->precb->zpp_inner;
HXDLIN(6988)																		 ::zpp_nape::phys::ZPP_Interactor o111 = callbackset2->int1;
HXDLIN(6988)																		 ::zpp_nape::phys::ZPP_Interactor o210 = callbackset2->int2;
HXDLIN(6988)																		bool ret126;
HXDLIN(6988)																		 ::zpp_nape::callbacks::ZPP_OptionType _this60 = listener7->options1;
HXDLIN(6988)																		 ::zpp_nape::util::ZNPList_ZPP_CbType xs4 = o111->cbTypes;
HXDLIN(6988)																		bool ret127;
HXDLIN(6988)																		if (_this60->nonemptyintersection(xs4,_this60->includes)) {
HXLINE(6988)																			ret127 = !(_this60->nonemptyintersection(xs4,_this60->excludes));
            																		}
            																		else {
HXLINE(6988)																			ret127 = false;
            																		}
HXDLIN(6988)																		if (ret127) {
HXLINE(6988)																			 ::zpp_nape::callbacks::ZPP_OptionType _this61 = listener7->options2;
HXDLIN(6988)																			 ::zpp_nape::util::ZNPList_ZPP_CbType xs5 = o210->cbTypes;
HXDLIN(6988)																			if (_this61->nonemptyintersection(xs5,_this61->includes)) {
HXLINE(6988)																				ret126 = !(_this61->nonemptyintersection(xs5,_this61->excludes));
            																			}
            																			else {
HXLINE(6988)																				ret126 = false;
            																			}
            																		}
            																		else {
HXLINE(6988)																			ret126 = false;
            																		}
HXDLIN(6988)																		if (ret126) {
HXLINE(6988)																			cb4->int1 = o111;
HXDLIN(6988)																			cb4->int2 = o210;
            																		}
            																		else {
HXLINE(6988)																			cb4->int1 = o210;
HXDLIN(6988)																			cb4->int2 = o111;
            																		}
            																	}
HXLINE(6989)																	this->precb->zpp_inner->pre_swapped = hx::IsNotEq( i12,this->precb->zpp_inner->int1 );
HXLINE(6990)																	 ::nape::callbacks::PreFlag ret128 = ( ( ::nape::callbacks::PreFlag)(listener7->handlerp(this->precb)) );
HXLINE(6991)																	if (hx::IsNotNull( ret128 )) {
HXLINE(6992)																		int ret129;
HXDLIN(6992)																		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE(6992)																			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6992)																			::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6992)																			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																		}
HXDLIN(6992)																		if (hx::IsEq( ret128,::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE(6992)																			ret129 = 5;
            																		}
            																		else {
HXLINE(6992)																			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE(6992)																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6992)																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6992)																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																			}
HXDLIN(6992)																			if (hx::IsEq( ret128,::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE(6992)																				ret129 = 1;
            																			}
            																			else {
HXLINE(6992)																				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE(6992)																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(6992)																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN(6992)																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            																				}
HXDLIN(6992)																				if (hx::IsEq( ret128,::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE(6992)																					ret129 = 6;
            																				}
            																				else {
HXLINE(6992)																					ret129 = 2;
            																				}
            																			}
            																		}
HXDLIN(6992)																		arb5->immState = ret129;
            																	}
            																}
HXLINE(6995)																cx_ite27 = cx_ite27->next;
            															}
            														}
HXLINE(7001)														arb5->active = pact3;
HXLINE(7002)														if (hx::IsNotNull( callbackset2 )) {
HXLINE(7004)															 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite28 = this->prelisteners->head;
HXLINE(7005)															while(hx::IsNotNull( cx_ite28 )){
HXLINE(7006)																 ::zpp_nape::callbacks::ZPP_InteractionListener listener8 = cx_ite28->elt;
HXLINE(7008)																if ((listener8->itype == 7)) {
HXLINE(7009)																	callbackset2->COLLISIONstate = arb5->immState;
HXLINE(7010)																	callbackset2->SENSORstate = arb5->immState;
HXLINE(7011)																	callbackset2->FLUIDstate = arb5->immState;
            																}
            																else {
HXLINE(7013)																	callbackset2->SENSORstate = arb5->immState;
            																}
HXLINE(7015)																cx_ite28 = cx_ite28->next;
            															}
            														}
            													}
            													else {
HXLINE(7020)														if (hx::IsNull( callbackset2 )) {
HXLINE(7021)															if (((arb5->immState & 4) == 0)) {
HXLINE(7021)																arb5->immState = 1;
            															}
            														}
            														else {
HXLINE(7023)															arb5->immState = callbackset2->SENSORstate;
            														}
            													}
            												}
HXLINE(7025)												cx_ite22 = cx_ite22->next;
            											}
            										}
HXLINE(7029)										cx_ite21 = cx_ite21->next;
            									}
            								}
HXLINE(7032)								bool ret130;
HXDLIN(7032)								if (anyimpure2) {
HXLINE(7032)									ret130 = ((arb5->immState & 4) == 0);
            								}
            								else {
HXLINE(7032)									ret130 = false;
            								}
HXDLIN(7032)								if (ret130) {
HXLINE(7088)									if ((arb5->b1->type != 1)) {
HXLINE(7089)										 ::zpp_nape::phys::ZPP_Body o35 = arb5->b1;
HXLINE(7098)										if (!(o35->world)) {
HXLINE(7107)											int ret131;
HXDLIN(7107)											if (this->midstep) {
HXLINE(7107)												ret131 = 0;
            											}
            											else {
HXLINE(7107)												ret131 = 1;
            											}
HXDLIN(7107)											o35->component->waket = (this->stamp + ret131);
HXLINE(7108)											if ((o35->type == 3)) {
HXLINE(7108)												o35->kinematicDelaySleep = true;
            											}
HXLINE(7109)											if (o35->component->sleeping) {
HXLINE(7110)												this->really_wake(o35,false);
            											}
            										}
            									}
HXLINE(7114)									if ((arb5->b2->type != 1)) {
HXLINE(7115)										 ::zpp_nape::phys::ZPP_Body o36 = arb5->b2;
HXLINE(7124)										if (!(o36->world)) {
HXLINE(7133)											int ret132;
HXDLIN(7133)											if (this->midstep) {
HXLINE(7133)												ret132 = 0;
            											}
            											else {
HXLINE(7133)												ret132 = 1;
            											}
HXDLIN(7133)											o36->component->waket = (this->stamp + ret132);
HXLINE(7134)											if ((o36->type == 3)) {
HXLINE(7134)												o36->kinematicDelaySleep = true;
            											}
HXLINE(7135)											if (o36->component->sleeping) {
HXLINE(7136)												this->really_wake(o36,false);
            											}
            										}
            									}
            								}
            							}
HXLINE(7197)							if (arb5->sleeping) {
HXLINE(7198)								arb5->sleeping = false;
HXLINE(7199)								{
HXLINE(7199)									 ::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this62 = this->s_arbiters;
HXDLIN(7199)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret133;
HXDLIN(7199)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(7199)										ret133 =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(7199)										ret133 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(7199)										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret133->next;
HXDLIN(7199)										ret133->next = null();
            									}
HXDLIN(7199)									ret133->elt = arb5;
HXDLIN(7199)									 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp32 = ret133;
HXDLIN(7199)									temp32->next = _this62->head;
HXDLIN(7199)									_this62->head = temp32;
HXDLIN(7199)									_this62->modified = true;
HXDLIN(7199)									_this62->length++;
            								}
            							}
HXLINE(7201)							ret = arb5;
            						}
            						else {
HXLINE(7203)							if (first2) {
HXLINE(7204)								{
HXLINE(7205)									 ::zpp_nape::dynamics::ZPP_SensorArbiter o37 = arb5;
HXLINE(7215)									o37->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(7216)									::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o37;
            								}
HXLINE(7221)								ret = null();
            							}
            							else {
HXLINE(7223)								ret = arb5;
            							}
            						}
            					}
            					else {
HXLINE(7225)						ret = arb5;
            					}
            				}
            			}
            		}
HXLINE(7231)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,narrowPhase,return )

void ZPP_Space_obj::MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_7236_MRCA_chains)
HXDLIN(7236)		{
HXDLIN(7236)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;
HXDLIN(7236)			{
HXDLIN(7236)				while(hx::IsNotNull( _this->head )){
HXDLIN(7236)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;
HXDLIN(7236)					_this->head = ret->next;
HXDLIN(7236)					{
HXDLIN(7236)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXDLIN(7236)						o->elt = null();
HXDLIN(7236)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            					}
HXDLIN(7236)					if (hx::IsNull( _this->head )) {
HXDLIN(7236)						_this->pushmod = true;
            					}
HXDLIN(7236)					_this->modified = true;
HXDLIN(7236)					_this->length--;
            				}
HXDLIN(7236)				_this->pushmod = true;
            			}
            		}
HXDLIN(7236)		{
HXDLIN(7236)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this1 = this->mrca2;
HXDLIN(7236)			{
HXDLIN(7236)				while(hx::IsNotNull( _this1->head )){
HXDLIN(7236)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this1->head;
HXDLIN(7236)					_this1->head = ret1->next;
HXDLIN(7236)					{
HXDLIN(7236)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o1 = ret1;
HXDLIN(7236)						o1->elt = null();
HXDLIN(7236)						o1->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o1;
            					}
HXDLIN(7236)					if (hx::IsNull( _this1->head )) {
HXDLIN(7236)						_this1->pushmod = true;
            					}
HXDLIN(7236)					_this1->modified = true;
HXDLIN(7236)					_this1->length--;
            				}
HXDLIN(7236)				_this1->pushmod = true;
            			}
            		}
HXDLIN(7236)		if (hx::IsNotNull( s1->cbSet )) {
HXDLIN(7236)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this2 = this->mrca1;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret2;
HXDLIN(7236)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(7236)				ret2 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXDLIN(7236)				ret2 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret2->next;
HXDLIN(7236)				ret2->next = null();
            			}
HXDLIN(7236)			ret2->elt = s1;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret2;
HXDLIN(7236)			temp->next = _this2->head;
HXDLIN(7236)			_this2->head = temp;
HXDLIN(7236)			_this2->modified = true;
HXDLIN(7236)			_this2->length++;
            		}
HXDLIN(7236)		if (hx::IsNotNull( s1->body->cbSet )) {
HXDLIN(7236)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this3 = this->mrca1;
HXDLIN(7236)			 ::zpp_nape::phys::ZPP_Interactor o2 = s1->body;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret3;
HXDLIN(7236)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(7236)				ret3 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXDLIN(7236)				ret3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret3->next;
HXDLIN(7236)				ret3->next = null();
            			}
HXDLIN(7236)			ret3->elt = o2;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp1 = ret3;
HXDLIN(7236)			temp1->next = _this3->head;
HXDLIN(7236)			_this3->head = temp1;
HXDLIN(7236)			_this3->modified = true;
HXDLIN(7236)			_this3->length++;
            		}
HXDLIN(7236)		if (hx::IsNotNull( s2->cbSet )) {
HXDLIN(7236)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this4 = this->mrca2;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret4;
HXDLIN(7236)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(7236)				ret4 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXDLIN(7236)				ret4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret4->next;
HXDLIN(7236)				ret4->next = null();
            			}
HXDLIN(7236)			ret4->elt = s2;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp2 = ret4;
HXDLIN(7236)			temp2->next = _this4->head;
HXDLIN(7236)			_this4->head = temp2;
HXDLIN(7236)			_this4->modified = true;
HXDLIN(7236)			_this4->length++;
            		}
HXDLIN(7236)		if (hx::IsNotNull( s2->body->cbSet )) {
HXDLIN(7236)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this5 = this->mrca2;
HXDLIN(7236)			 ::zpp_nape::phys::ZPP_Interactor o3 = s2->body;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret5;
HXDLIN(7236)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(7236)				ret5 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXDLIN(7236)				ret5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret5->next;
HXDLIN(7236)				ret5->next = null();
            			}
HXDLIN(7236)			ret5->elt = o3;
HXDLIN(7236)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp3 = ret5;
HXDLIN(7236)			temp3->next = _this5->head;
HXDLIN(7236)			_this5->head = temp3;
HXDLIN(7236)			_this5->modified = true;
HXDLIN(7236)			_this5->length++;
            		}
HXDLIN(7236)		 ::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;
HXDLIN(7236)		 ::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;
HXDLIN(7236)		while(hx::IsNotEq( c1,c2 )){
HXDLIN(7236)			int d1;
HXDLIN(7236)			if (hx::IsNull( c1 )) {
HXDLIN(7236)				d1 = 0;
            			}
            			else {
HXDLIN(7236)				d1 = c1->depth;
            			}
HXDLIN(7236)			int d2;
HXDLIN(7236)			if (hx::IsNull( c2 )) {
HXDLIN(7236)				d2 = 0;
            			}
            			else {
HXDLIN(7236)				d2 = c2->depth;
            			}
HXDLIN(7236)			if ((d1 < d2)) {
HXDLIN(7236)				if (hx::IsNotNull( c2->cbSet )) {
HXDLIN(7236)					 ::zpp_nape::util::ZNPList_ZPP_Interactor _this6 = this->mrca2;
HXDLIN(7236)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret6;
HXDLIN(7236)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(7236)						ret6 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            					}
            					else {
HXDLIN(7236)						ret6 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret6->next;
HXDLIN(7236)						ret6->next = null();
            					}
HXDLIN(7236)					ret6->elt = c2;
HXDLIN(7236)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp4 = ret6;
HXDLIN(7236)					temp4->next = _this6->head;
HXDLIN(7236)					_this6->head = temp4;
HXDLIN(7236)					_this6->modified = true;
HXDLIN(7236)					_this6->length++;
            				}
HXDLIN(7236)				c2 = c2->compound;
            			}
            			else {
HXDLIN(7236)				if (hx::IsNotNull( c1->cbSet )) {
HXDLIN(7236)					 ::zpp_nape::util::ZNPList_ZPP_Interactor _this7 = this->mrca1;
HXDLIN(7236)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret7;
HXDLIN(7236)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(7236)						ret7 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            					}
            					else {
HXDLIN(7236)						ret7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7236)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret7->next;
HXDLIN(7236)						ret7->next = null();
            					}
HXDLIN(7236)					ret7->elt = c1;
HXDLIN(7236)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp5 = ret7;
HXDLIN(7236)					temp5->next = _this7->head;
HXDLIN(7236)					_this7->head = temp5;
HXDLIN(7236)					_this7->modified = true;
HXDLIN(7236)					_this7->length++;
            				}
HXDLIN(7236)				c1 = c1->compound;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,MRCA_chains,(void))

void ZPP_Space_obj::inlined_MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2){
            	HX_GC_STACKFRAME(&_hx_pos_76b1af9228667226_7240_inlined_MRCA_chains)
HXLINE(7249)		{
HXLINE(7249)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;
HXDLIN(7249)			{
HXLINE(7249)				while(hx::IsNotNull( _this->head )){
HXLINE(7249)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;
HXDLIN(7249)					_this->head = ret->next;
HXDLIN(7249)					{
HXLINE(7249)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXDLIN(7249)						o->elt = null();
HXDLIN(7249)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7249)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            					}
HXDLIN(7249)					if (hx::IsNull( _this->head )) {
HXLINE(7249)						_this->pushmod = true;
            					}
HXDLIN(7249)					_this->modified = true;
HXDLIN(7249)					_this->length--;
            				}
HXDLIN(7249)				_this->pushmod = true;
            			}
            		}
HXLINE(7250)		{
HXLINE(7250)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this1 = this->mrca2;
HXDLIN(7250)			{
HXLINE(7250)				while(hx::IsNotNull( _this1->head )){
HXLINE(7250)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this1->head;
HXDLIN(7250)					_this1->head = ret1->next;
HXDLIN(7250)					{
HXLINE(7250)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o1 = ret1;
HXDLIN(7250)						o1->elt = null();
HXDLIN(7250)						o1->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7250)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o1;
            					}
HXDLIN(7250)					if (hx::IsNull( _this1->head )) {
HXLINE(7250)						_this1->pushmod = true;
            					}
HXDLIN(7250)					_this1->modified = true;
HXDLIN(7250)					_this1->length--;
            				}
HXDLIN(7250)				_this1->pushmod = true;
            			}
            		}
HXLINE(7251)		if (hx::IsNotNull( s1->cbSet )) {
HXLINE(7251)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this2 = this->mrca1;
HXDLIN(7251)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret2;
HXDLIN(7251)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(7251)				ret2 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(7251)				ret2 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7251)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret2->next;
HXDLIN(7251)				ret2->next = null();
            			}
HXDLIN(7251)			ret2->elt = s1;
HXDLIN(7251)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret2;
HXDLIN(7251)			temp->next = _this2->head;
HXDLIN(7251)			_this2->head = temp;
HXDLIN(7251)			_this2->modified = true;
HXDLIN(7251)			_this2->length++;
            		}
HXLINE(7252)		if (hx::IsNotNull( s1->body->cbSet )) {
HXLINE(7252)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this3 = this->mrca1;
HXDLIN(7252)			 ::zpp_nape::phys::ZPP_Interactor o2 = s1->body;
HXDLIN(7252)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret3;
HXDLIN(7252)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(7252)				ret3 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(7252)				ret3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7252)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret3->next;
HXDLIN(7252)				ret3->next = null();
            			}
HXDLIN(7252)			ret3->elt = o2;
HXDLIN(7252)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp1 = ret3;
HXDLIN(7252)			temp1->next = _this3->head;
HXDLIN(7252)			_this3->head = temp1;
HXDLIN(7252)			_this3->modified = true;
HXDLIN(7252)			_this3->length++;
            		}
HXLINE(7253)		if (hx::IsNotNull( s2->cbSet )) {
HXLINE(7253)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this4 = this->mrca2;
HXDLIN(7253)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret4;
HXDLIN(7253)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(7253)				ret4 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(7253)				ret4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7253)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret4->next;
HXDLIN(7253)				ret4->next = null();
            			}
HXDLIN(7253)			ret4->elt = s2;
HXDLIN(7253)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp2 = ret4;
HXDLIN(7253)			temp2->next = _this4->head;
HXDLIN(7253)			_this4->head = temp2;
HXDLIN(7253)			_this4->modified = true;
HXDLIN(7253)			_this4->length++;
            		}
HXLINE(7254)		if (hx::IsNotNull( s2->body->cbSet )) {
HXLINE(7254)			 ::zpp_nape::util::ZNPList_ZPP_Interactor _this5 = this->mrca2;
HXDLIN(7254)			 ::zpp_nape::phys::ZPP_Interactor o3 = s2->body;
HXDLIN(7254)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret5;
HXDLIN(7254)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(7254)				ret5 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(7254)				ret5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7254)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret5->next;
HXDLIN(7254)				ret5->next = null();
            			}
HXDLIN(7254)			ret5->elt = o3;
HXDLIN(7254)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp3 = ret5;
HXDLIN(7254)			temp3->next = _this5->head;
HXDLIN(7254)			_this5->head = temp3;
HXDLIN(7254)			_this5->modified = true;
HXDLIN(7254)			_this5->length++;
            		}
HXLINE(7255)		 ::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;
HXLINE(7256)		 ::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;
HXLINE(7257)		while(hx::IsNotEq( c1,c2 )){
HXLINE(7258)			int d1;
HXDLIN(7258)			if (hx::IsNull( c1 )) {
HXLINE(7258)				d1 = 0;
            			}
            			else {
HXLINE(7258)				d1 = c1->depth;
            			}
HXLINE(7259)			int d2;
HXDLIN(7259)			if (hx::IsNull( c2 )) {
HXLINE(7259)				d2 = 0;
            			}
            			else {
HXLINE(7259)				d2 = c2->depth;
            			}
HXLINE(7260)			if ((d1 < d2)) {
HXLINE(7261)				if (hx::IsNotNull( c2->cbSet )) {
HXLINE(7261)					 ::zpp_nape::util::ZNPList_ZPP_Interactor _this6 = this->mrca2;
HXDLIN(7261)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret6;
HXDLIN(7261)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(7261)						ret6 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(7261)						ret6 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7261)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret6->next;
HXDLIN(7261)						ret6->next = null();
            					}
HXDLIN(7261)					ret6->elt = c2;
HXDLIN(7261)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp4 = ret6;
HXDLIN(7261)					temp4->next = _this6->head;
HXDLIN(7261)					_this6->head = temp4;
HXDLIN(7261)					_this6->modified = true;
HXDLIN(7261)					_this6->length++;
            				}
HXLINE(7262)				c2 = c2->compound;
            			}
            			else {
HXLINE(7265)				if (hx::IsNotNull( c1->cbSet )) {
HXLINE(7265)					 ::zpp_nape::util::ZNPList_ZPP_Interactor _this7 = this->mrca1;
HXDLIN(7265)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret7;
HXDLIN(7265)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(7265)						ret7 =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(7265)						ret7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(7265)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret7->next;
HXDLIN(7265)						ret7->next = null();
            					}
HXDLIN(7265)					ret7->elt = c1;
HXDLIN(7265)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp5 = ret7;
HXDLIN(7265)					temp5->next = _this7->head;
HXDLIN(7265)					_this7->head = temp5;
HXDLIN(7265)					_this7->modified = true;
HXDLIN(7265)					_this7->length++;
            				}
HXLINE(7266)				c1 = c1->compound;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,inlined_MRCA_chains,(void))


hx::ObjectPtr< ZPP_Space_obj > ZPP_Space_obj::__new( ::zpp_nape::geom::ZPP_Vec2 gravity, ::nape::space::Broadphase broadphase) {
	hx::ObjectPtr< ZPP_Space_obj > __this = new ZPP_Space_obj();
	__this->__construct(gravity,broadphase);
	return __this;
}

hx::ObjectPtr< ZPP_Space_obj > ZPP_Space_obj::__alloc(hx::Ctx *_hx_ctx, ::zpp_nape::geom::ZPP_Vec2 gravity, ::nape::space::Broadphase broadphase) {
	ZPP_Space_obj *__this = (ZPP_Space_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Space_obj), true, "zpp_nape.space.ZPP_Space"));
	*(void **)__this = ZPP_Space_obj::_hx_vtable;
	__this->__construct(gravity,broadphase);
	return __this;
}

ZPP_Space_obj::ZPP_Space_obj()
{
}

void ZPP_Space_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Space);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(gravityx,"gravityx");
	HX_MARK_MEMBER_NAME(gravityy,"gravityy");
	HX_MARK_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_MARK_MEMBER_NAME(bodies,"bodies");
	HX_MARK_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_MARK_MEMBER_NAME(compounds,"compounds");
	HX_MARK_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_MEMBER_NAME(kinematics,"kinematics");
	HX_MARK_MEMBER_NAME(bphase,"bphase");
	HX_MARK_MEMBER_NAME(_hx___static,"__static");
	HX_MARK_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_MARK_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_MARK_MEMBER_NAME(stamp,"stamp");
	HX_MARK_MEMBER_NAME(midstep,"midstep");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_MARK_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_MARK_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_MARK_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_MARK_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_MARK_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_MARK_MEMBER_NAME(live,"live");
	HX_MARK_MEMBER_NAME(wrap_live,"wrap_live");
	HX_MARK_MEMBER_NAME(live_constraints,"live_constraints");
	HX_MARK_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_MARK_MEMBER_NAME(staticsleep,"staticsleep");
	HX_MARK_MEMBER_NAME(islands,"islands");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_MARK_MEMBER_NAME(callbacks,"callbacks");
	HX_MARK_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	HX_MARK_MEMBER_NAME(toiEvents,"toiEvents");
	HX_MARK_MEMBER_NAME(continuous,"continuous");
	HX_MARK_MEMBER_NAME(precb,"precb");
	HX_MARK_MEMBER_NAME(prelisteners,"prelisteners");
	HX_MARK_MEMBER_NAME(mrca1,"mrca1");
	HX_MARK_MEMBER_NAME(mrca2,"mrca2");
	HX_MARK_END_CLASS();
}

void ZPP_Space_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(gravityx,"gravityx");
	HX_VISIT_MEMBER_NAME(gravityy,"gravityy");
	HX_VISIT_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_VISIT_MEMBER_NAME(bodies,"bodies");
	HX_VISIT_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_VISIT_MEMBER_NAME(compounds,"compounds");
	HX_VISIT_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_VISIT_MEMBER_NAME(kinematics,"kinematics");
	HX_VISIT_MEMBER_NAME(bphase,"bphase");
	HX_VISIT_MEMBER_NAME(_hx___static,"__static");
	HX_VISIT_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_VISIT_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_VISIT_MEMBER_NAME(stamp,"stamp");
	HX_VISIT_MEMBER_NAME(midstep,"midstep");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_VISIT_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_VISIT_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_VISIT_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_VISIT_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_VISIT_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_VISIT_MEMBER_NAME(live,"live");
	HX_VISIT_MEMBER_NAME(wrap_live,"wrap_live");
	HX_VISIT_MEMBER_NAME(live_constraints,"live_constraints");
	HX_VISIT_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_VISIT_MEMBER_NAME(staticsleep,"staticsleep");
	HX_VISIT_MEMBER_NAME(islands,"islands");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_VISIT_MEMBER_NAME(callbacks,"callbacks");
	HX_VISIT_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
	HX_VISIT_MEMBER_NAME(toiEvents,"toiEvents");
	HX_VISIT_MEMBER_NAME(continuous,"continuous");
	HX_VISIT_MEMBER_NAME(precb,"precb");
	HX_VISIT_MEMBER_NAME(prelisteners,"prelisteners");
	HX_VISIT_MEMBER_NAME(mrca1,"mrca1");
	HX_VISIT_MEMBER_NAME(mrca2,"mrca2");
}

hx::Val ZPP_Space_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"live") ) { return hx::Val( live ); }
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"precb") ) { return hx::Val( precb ); }
		if (HX_FIELD_EQ(inName,"mrca1") ) { return hx::Val( mrca1 ); }
		if (HX_FIELD_EQ(inName,"mrca2") ) { return hx::Val( mrca2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { return hx::Val( bodies ); }
		if (HX_FIELD_EQ(inName,"bphase") ) { return hx::Val( bphase ); }
		if (HX_FIELD_EQ(inName,"cbsets") ) { return hx::Val( cbsets ); }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return hx::Val( pre_dt ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midstep") ) { return hx::Val( midstep ); }
		if (HX_FIELD_EQ(inName,"islands") ) { return hx::Val( islands ); }
		if (HX_FIELD_EQ(inName,"addBody") ) { return hx::Val( addBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"remBody") ) { return hx::Val( remBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"prestep") ) { return hx::Val( prestep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData ); }
		if (HX_FIELD_EQ(inName,"gravityx") ) { return hx::Val( gravityx ); }
		if (HX_FIELD_EQ(inName,"gravityy") ) { return hx::Val( gravityy ); }
		if (HX_FIELD_EQ(inName,"__static") ) { return hx::Val( _hx___static ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compounds") ) { return hx::Val( compounds ); }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { return hx::Val( wrap_live ); }
		if (HX_FIELD_EQ(inName,"listeners") ) { return hx::Val( listeners ); }
		if (HX_FIELD_EQ(inName,"callbacks") ) { return hx::Val( callbacks ); }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { return hx::Val( toiEvents ); }
		if (HX_FIELD_EQ(inName,"doForests") ) { return hx::Val( doForests_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateVel") ) { return hx::Val( updateVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePos") ) { return hx::Val( updatePos_dyn() ); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getgravity") ) { return hx::Val( getgravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"kinematics") ) { return hx::Val( kinematics ); }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { return hx::Val( f_arbiters ); }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { return hx::Val( s_arbiters ); }
		if (HX_FIELD_EQ(inName,"convexCast") ) { return hx::Val( convexCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodyCbWake") ) { return hx::Val( bodyCbWake_dyn() ); }
		if (HX_FIELD_EQ(inName,"wakeIsland") ) { return hx::Val( wakeIsland_dyn() ); }
		if (HX_FIELD_EQ(inName,"validation") ) { return hx::Val( validation_dyn() ); }
		if (HX_FIELD_EQ(inName,"continuous") ) { return hx::Val( continuous ); }
		if (HX_FIELD_EQ(inName,"presteparb") ) { return hx::Val( presteparb_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterateVel") ) { return hx::Val( iterateVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"iteratePos") ) { return hx::Val( iteratePos_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { return hx::Val( wrap_bodies ); }
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints ); }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { return hx::Val( staticsleep ); }
		if (HX_FIELD_EQ(inName,"addListener") ) { return hx::Val( addListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"remListener") ) { return hx::Val( remListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"added_shape") ) { return hx::Val( added_shape_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCompound") ) { return hx::Val( addCompound_dyn() ); }
		if (HX_FIELD_EQ(inName,"remCompound") ) { return hx::Val( remCompound_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepareCast") ) { return hx::Val( prepareCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodyCbSleep") ) { return hx::Val( bodyCbSleep_dyn() ); }
		if (HX_FIELD_EQ(inName,"really_wake") ) { return hx::Val( really_wake_dyn() ); }
		if (HX_FIELD_EQ(inName,"narrowPhase") ) { return hx::Val( narrowPhase_dyn() ); }
		if (HX_FIELD_EQ(inName,"MRCA_chains") ) { return hx::Val( MRCA_chains_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { return hx::Val( wrap_gravity ); }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { return hx::Val( sortcontacts ); }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { return hx::Val( wrap_livecon ); }
		if (HX_FIELD_EQ(inName,"bodies_adder") ) { return hx::Val( bodies_adder_dyn() ); }
		if (HX_FIELD_EQ(inName,"transmitType") ) { return hx::Val( transmitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"wakeCompound") ) { return hx::Val( wakeCompound_dyn() ); }
		if (HX_FIELD_EQ(inName,"group_ignore") ) { return hx::Val( group_ignore_dyn() ); }
		if (HX_FIELD_EQ(inName,"prelisteners") ) { return hx::Val( prelisteners ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { return hx::Val( wrap_arbiters ); }
		if (HX_FIELD_EQ(inName,"bodies_subber") ) { return hx::Val( bodies_subber_dyn() ); }
		if (HX_FIELD_EQ(inName,"removed_shape") ) { return hx::Val( removed_shape_dyn() ); }
		if (HX_FIELD_EQ(inName,"addConstraint") ) { return hx::Val( addConstraint_dyn() ); }
		if (HX_FIELD_EQ(inName,"remConstraint") ) { return hx::Val( remConstraint_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"push_callback") ) { return hx::Val( push_callback_dyn() ); }
		if (HX_FIELD_EQ(inName,"sleepArbiters") ) { return hx::Val( sleepArbiters_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { return hx::Val( wrap_compounds ); }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { return hx::Val( wrap_listeners ); }
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { return hx::Val( global_lin_drag ); }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { return hx::Val( global_ang_drag ); }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { return hx::Val( c_arbiters_true ); }
		if (HX_FIELD_EQ(inName,"compounds_adder") ) { return hx::Val( compounds_adder_dyn() ); }
		if (HX_FIELD_EQ(inName,"listeners_adder") ) { return hx::Val( listeners_adder_dyn() ); }
		if (HX_FIELD_EQ(inName,"revoke_listener") ) { return hx::Val( revoke_listener_dyn() ); }
		if (HX_FIELD_EQ(inName,"add_callbackset") ) { return hx::Val( add_callbackset_dyn() ); }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { return hx::Val( convexShapeList ); }
		if (HX_FIELD_EQ(inName,"convexMultiCast") ) { return hx::Val( convexMultiCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"continuousEvent") ) { return hx::Val( continuousEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"wake_constraint") ) { return hx::Val( wake_constraint_dyn() ); }
		if (HX_FIELD_EQ(inName,"interactionType") ) { return hx::Val( interactionType_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gravity_validate") ) { return hx::Val( gravity_validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return hx::Val( wrap_constraints ); }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { return hx::Val( c_arbiters_false ); }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { return hx::Val( live_constraints ); }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { return hx::Val( callbackset_list ); }
		if (HX_FIELD_EQ(inName,"compounds_subber") ) { return hx::Val( compounds_subber_dyn() ); }
		if (HX_FIELD_EQ(inName,"listeners_subber") ) { return hx::Val( listeners_subber_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"constraintCbWake") ) { return hx::Val( constraintCbWake_dyn() ); }
		if (HX_FIELD_EQ(inName,"nullListenerType") ) { return hx::Val( nullListenerType_dyn() ); }
		if (HX_FIELD_EQ(inName,"non_inlined_wake") ) { return hx::Val( non_inlined_wake_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"bodies_modifiable") ) { return hx::Val( bodies_modifiable_dyn() ); }
		if (HX_FIELD_EQ(inName,"constraints_adder") ) { return hx::Val( constraints_adder_dyn() ); }
		if (HX_FIELD_EQ(inName,"unrevoke_listener") ) { return hx::Val( unrevoke_listener_dyn() ); }
		if (HX_FIELD_EQ(inName,"constraintCbSleep") ) { return hx::Val( constraintCbSleep_dyn() ); }
		if (HX_FIELD_EQ(inName,"constraintCbBreak") ) { return hx::Val( constraintCbBreak_dyn() ); }
		if (HX_FIELD_EQ(inName,"freshListenerType") ) { return hx::Val( freshListenerType_dyn() ); }
		if (HX_FIELD_EQ(inName,"static_validation") ) { return hx::Val( static_validation_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gravity_invalidate") ) { return hx::Val( gravity_invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"constraints_subber") ) { return hx::Val( constraints_subber_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove_callbackset") ) { return hx::Val( remove_callbackset_dyn() ); }
		if (HX_FIELD_EQ(inName,"nullInteractorType") ) { return hx::Val( nullInteractorType_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"freshInteractorType") ) { return hx::Val( freshInteractorType_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_MRCA_chains") ) { return hx::Val( inlined_MRCA_chains_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"compounds_modifiable") ) { return hx::Val( compounds_modifiable_dyn() ); }
		if (HX_FIELD_EQ(inName,"listeners_modifiable") ) { return hx::Val( listeners_modifiable_dyn() ); }
		if (HX_FIELD_EQ(inName,"continuousCollisions") ) { return hx::Val( continuousCollisions_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"constraints_modifiable") ) { return hx::Val( constraints_modifiable_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Space_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live") ) { live=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::space::Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stamp") ) { stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"precb") ) { precb=inValue.Cast<  ::nape::callbacks::PreCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { mrca1=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca2") ) { mrca2=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { bodies=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bphase") ) { bphase=inValue.Cast<  ::zpp_nape::space::ZPP_Broadphase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast<  ::zpp_nape::space::ZPP_CbSetManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midstep") ) { midstep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"islands") ) { islands=inValue.Cast<  ::zpp_nape::space::ZPP_Island >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { gravityx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { gravityy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__static") ) { _hx___static=inValue.Cast<  ::nape::phys::Body >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compounds") ) { compounds=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Compound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { wrap_live=inValue.Cast<  ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Listener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=inValue.Cast<  ::zpp_nape::callbacks::ZPP_Callback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { toiEvents=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_ToiEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"kinematics") ) { kinematics=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { f_arbiters=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_FluidArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { s_arbiters=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_SensorArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"continuous") ) { continuous=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { wrap_bodies=inValue.Cast<  ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { staticsleep=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { wrap_gravity=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { sortcontacts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { wrap_livecon=inValue.Cast<  ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prelisteners") ) { prelisteners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { wrap_arbiters=inValue.Cast<  ::nape::dynamics::ArbiterList >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { wrap_compounds=inValue.Cast<  ::nape::phys::CompoundList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { wrap_listeners=inValue.Cast<  ::nape::callbacks::ListenerList >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { global_lin_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { global_ang_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { c_arbiters_true=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { convexShapeList=inValue.Cast<  ::nape::shape::ShapeList >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast<  ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { c_arbiters_false=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { live_constraints=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { callbackset_list=inValue.Cast<  ::zpp_nape::space::ZPP_CallbackSet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Space_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("gravityx",6a,16,81,87));
	outFields->push(HX_("gravityy",6b,16,81,87));
	outFields->push(HX_("wrap_gravity",99,db,94,ca));
	outFields->push(HX_("bodies",80,1b,dd,5a));
	outFields->push(HX_("wrap_bodies",95,20,6c,45));
	outFields->push(HX_("compounds",a8,3a,fb,13));
	outFields->push(HX_("wrap_compounds",b3,d0,be,48));
	outFields->push(HX_("constraints",76,51,b4,17));
	outFields->push(HX_("wrap_constraints",41,c0,11,b5));
	outFields->push(HX_("kinematics",ce,6b,8a,9b));
	outFields->push(HX_("bphase",99,84,e2,f0));
	outFields->push(HX_("__static",ce,47,2b,ae));
	outFields->push(HX_("global_lin_drag",7e,d4,ba,d7));
	outFields->push(HX_("global_ang_drag",55,b8,fb,65));
	outFields->push(HX_("stamp",03,70,0b,84));
	outFields->push(HX_("midstep",d4,5c,8a,90));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("sortcontacts",31,87,72,cc));
	outFields->push(HX_("c_arbiters_true",67,0e,78,6a));
	outFields->push(HX_("c_arbiters_false",6a,04,b5,a3));
	outFields->push(HX_("f_arbiters",a3,e6,f3,06));
	outFields->push(HX_("s_arbiters",f6,fc,bb,ca));
	outFields->push(HX_("wrap_arbiters",bf,60,dc,11));
	outFields->push(HX_("live",ec,1e,b3,47));
	outFields->push(HX_("wrap_live",c1,44,0d,0b));
	outFields->push(HX_("live_constraints",63,d0,19,e2));
	outFields->push(HX_("wrap_livecon",21,ea,72,0d));
	outFields->push(HX_("staticsleep",a9,29,64,00));
	outFields->push(HX_("islands",fe,5b,10,79));
	outFields->push(HX_("listeners",7f,65,8e,f3));
	outFields->push(HX_("wrap_listeners",8a,fb,51,28));
	outFields->push(HX_("callbacks",0e,f3,bf,a6));
	outFields->push(HX_("callbackset_list",20,98,58,06));
	outFields->push(HX_("cbsets",b0,24,ea,4e));
	outFields->push(HX_("convexShapeList",b8,93,73,cc));
	outFields->push(HX_("pre_dt",6c,85,b1,ae));
	outFields->push(HX_("toiEvents",47,88,8f,3b));
	outFields->push(HX_("continuous",0f,05,17,de));
	outFields->push(HX_("precb",82,45,88,c8));
	outFields->push(HX_("prelisteners",fc,68,bb,f7));
	outFields->push(HX_("mrca1",8e,01,53,0e));
	outFields->push(HX_("mrca2",8f,01,53,0e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Space_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::space::Space */ ,(int)offsetof(ZPP_Space_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ZPP_Space_obj,userData),HX_("userData",15,96,28,05)},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,gravityx),HX_("gravityx",6a,16,81,87)},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,gravityy),HX_("gravityy",6b,16,81,87)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_Space_obj,wrap_gravity),HX_("wrap_gravity",99,db,94,ca)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Body */ ,(int)offsetof(ZPP_Space_obj,bodies),HX_("bodies",80,1b,dd,5a)},
	{hx::fsObject /*  ::nape::phys::BodyList */ ,(int)offsetof(ZPP_Space_obj,wrap_bodies),HX_("wrap_bodies",95,20,6c,45)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Compound */ ,(int)offsetof(ZPP_Space_obj,compounds),HX_("compounds",a8,3a,fb,13)},
	{hx::fsObject /*  ::nape::phys::CompoundList */ ,(int)offsetof(ZPP_Space_obj,wrap_compounds),HX_("wrap_compounds",b3,d0,be,48)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Constraint */ ,(int)offsetof(ZPP_Space_obj,constraints),HX_("constraints",76,51,b4,17)},
	{hx::fsObject /*  ::nape::constraint::ConstraintList */ ,(int)offsetof(ZPP_Space_obj,wrap_constraints),HX_("wrap_constraints",41,c0,11,b5)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Body */ ,(int)offsetof(ZPP_Space_obj,kinematics),HX_("kinematics",ce,6b,8a,9b)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Broadphase */ ,(int)offsetof(ZPP_Space_obj,bphase),HX_("bphase",99,84,e2,f0)},
	{hx::fsObject /*  ::nape::phys::Body */ ,(int)offsetof(ZPP_Space_obj,_hx___static),HX_("__static",ce,47,2b,ae)},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,global_lin_drag),HX_("global_lin_drag",7e,d4,ba,d7)},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,global_ang_drag),HX_("global_ang_drag",55,b8,fb,65)},
	{hx::fsInt,(int)offsetof(ZPP_Space_obj,stamp),HX_("stamp",03,70,0b,84)},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,midstep),HX_("midstep",d4,5c,8a,90)},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,time),HX_("time",0d,cc,fc,4c)},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,sortcontacts),HX_("sortcontacts",31,87,72,cc)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_ColArbiter */ ,(int)offsetof(ZPP_Space_obj,c_arbiters_true),HX_("c_arbiters_true",67,0e,78,6a)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_ColArbiter */ ,(int)offsetof(ZPP_Space_obj,c_arbiters_false),HX_("c_arbiters_false",6a,04,b5,a3)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_FluidArbiter */ ,(int)offsetof(ZPP_Space_obj,f_arbiters),HX_("f_arbiters",a3,e6,f3,06)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_SensorArbiter */ ,(int)offsetof(ZPP_Space_obj,s_arbiters),HX_("s_arbiters",f6,fc,bb,ca)},
	{hx::fsObject /*  ::nape::dynamics::ArbiterList */ ,(int)offsetof(ZPP_Space_obj,wrap_arbiters),HX_("wrap_arbiters",bf,60,dc,11)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Body */ ,(int)offsetof(ZPP_Space_obj,live),HX_("live",ec,1e,b3,47)},
	{hx::fsObject /*  ::nape::phys::BodyList */ ,(int)offsetof(ZPP_Space_obj,wrap_live),HX_("wrap_live",c1,44,0d,0b)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Constraint */ ,(int)offsetof(ZPP_Space_obj,live_constraints),HX_("live_constraints",63,d0,19,e2)},
	{hx::fsObject /*  ::nape::constraint::ConstraintList */ ,(int)offsetof(ZPP_Space_obj,wrap_livecon),HX_("wrap_livecon",21,ea,72,0d)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Body */ ,(int)offsetof(ZPP_Space_obj,staticsleep),HX_("staticsleep",a9,29,64,00)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Island */ ,(int)offsetof(ZPP_Space_obj,islands),HX_("islands",fe,5b,10,79)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Listener */ ,(int)offsetof(ZPP_Space_obj,listeners),HX_("listeners",7f,65,8e,f3)},
	{hx::fsObject /*  ::nape::callbacks::ListenerList */ ,(int)offsetof(ZPP_Space_obj,wrap_listeners),HX_("wrap_listeners",8a,fb,51,28)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_Callback */ ,(int)offsetof(ZPP_Space_obj,callbacks),HX_("callbacks",0e,f3,bf,a6)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_CallbackSet */ ,(int)offsetof(ZPP_Space_obj,callbackset_list),HX_("callbackset_list",20,98,58,06)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_CbSetManager */ ,(int)offsetof(ZPP_Space_obj,cbsets),HX_("cbsets",b0,24,ea,4e)},
	{hx::fsObject /*  ::nape::shape::ShapeList */ ,(int)offsetof(ZPP_Space_obj,convexShapeList),HX_("convexShapeList",b8,93,73,cc)},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,pre_dt),HX_("pre_dt",6c,85,b1,ae)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_ToiEvent */ ,(int)offsetof(ZPP_Space_obj,toiEvents),HX_("toiEvents",47,88,8f,3b)},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,continuous),HX_("continuous",0f,05,17,de)},
	{hx::fsObject /*  ::nape::callbacks::PreCallback */ ,(int)offsetof(ZPP_Space_obj,precb),HX_("precb",82,45,88,c8)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_InteractionListener */ ,(int)offsetof(ZPP_Space_obj,prelisteners),HX_("prelisteners",fc,68,bb,f7)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Interactor */ ,(int)offsetof(ZPP_Space_obj,mrca1),HX_("mrca1",8e,01,53,0e)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Interactor */ ,(int)offsetof(ZPP_Space_obj,mrca2),HX_("mrca2",8f,01,53,0e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Space_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Space_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("userData",15,96,28,05),
	HX_("gravityx",6a,16,81,87),
	HX_("gravityy",6b,16,81,87),
	HX_("wrap_gravity",99,db,94,ca),
	HX_("getgravity",78,cc,0f,fa),
	HX_("gravity_invalidate",0c,9f,82,bd),
	HX_("gravity_validate",e7,1f,cd,f2),
	HX_("bodies",80,1b,dd,5a),
	HX_("wrap_bodies",95,20,6c,45),
	HX_("compounds",a8,3a,fb,13),
	HX_("wrap_compounds",b3,d0,be,48),
	HX_("constraints",76,51,b4,17),
	HX_("wrap_constraints",41,c0,11,b5),
	HX_("kinematics",ce,6b,8a,9b),
	HX_("bphase",99,84,e2,f0),
	HX_("__static",ce,47,2b,ae),
	HX_("global_lin_drag",7e,d4,ba,d7),
	HX_("global_ang_drag",55,b8,fb,65),
	HX_("stamp",03,70,0b,84),
	HX_("midstep",d4,5c,8a,90),
	HX_("time",0d,cc,fc,4c),
	HX_("sortcontacts",31,87,72,cc),
	HX_("c_arbiters_true",67,0e,78,6a),
	HX_("c_arbiters_false",6a,04,b5,a3),
	HX_("f_arbiters",a3,e6,f3,06),
	HX_("s_arbiters",f6,fc,bb,ca),
	HX_("wrap_arbiters",bf,60,dc,11),
	HX_("live",ec,1e,b3,47),
	HX_("wrap_live",c1,44,0d,0b),
	HX_("live_constraints",63,d0,19,e2),
	HX_("wrap_livecon",21,ea,72,0d),
	HX_("staticsleep",a9,29,64,00),
	HX_("islands",fe,5b,10,79),
	HX_("listeners",7f,65,8e,f3),
	HX_("wrap_listeners",8a,fb,51,28),
	HX_("callbacks",0e,f3,bf,a6),
	HX_("callbackset_list",20,98,58,06),
	HX_("cbsets",b0,24,ea,4e),
	HX_("clear",8d,71,5b,48),
	HX_("bodies_adder",8f,d7,09,05),
	HX_("bodies_subber",ee,61,7a,5e),
	HX_("bodies_modifiable",a3,60,59,a5),
	HX_("compounds_adder",b7,c4,63,01),
	HX_("compounds_subber",c6,f7,cf,30),
	HX_("compounds_modifiable",7b,c2,2a,d9),
	HX_("constraints_adder",05,ea,56,64),
	HX_("constraints_subber",b8,76,9d,62),
	HX_("constraints_modifiable",6d,a2,87,49),
	HX_("listeners_adder",ce,2a,39,c3),
	HX_("listeners_subber",cf,e5,b3,09),
	HX_("listeners_modifiable",04,e9,38,ec),
	HX_("revoke_listener",cd,80,49,09),
	HX_("unrevoke_listener",94,26,6a,79),
	HX_("addListener",b5,37,8e,69),
	HX_("remListener",ee,7f,1a,23),
	HX_("add_callbackset",9f,78,34,f1),
	HX_("remove_callbackset",42,4b,1b,b7),
	HX_("transmitType",4a,19,df,11),
	HX_("added_shape",22,0f,f8,9e),
	HX_("removed_shape",02,c2,cf,c1),
	HX_("addConstraint",de,49,15,c5),
	HX_("remConstraint",57,d2,6e,30),
	HX_("addCompound",ac,fa,2b,b3),
	HX_("remCompound",e5,42,b8,6c),
	HX_("addBody",63,bd,58,7d),
	HX_("remBody",1c,35,3c,d5),
	HX_("shapesUnderPoint",ea,ec,bc,47),
	HX_("bodiesUnderPoint",b8,1b,30,80),
	HX_("shapesInAABB",d7,1c,84,f9),
	HX_("bodiesInAABB",a5,4c,28,9e),
	HX_("shapesInCircle",27,d4,f7,6c),
	HX_("bodiesInCircle",75,13,e2,a6),
	HX_("shapesInShape",ea,90,2a,d1),
	HX_("bodiesInShape",5c,35,30,3c),
	HX_("rayCast",c9,5d,3c,25),
	HX_("rayMultiCast",8e,02,7d,23),
	HX_("convexShapeList",b8,93,73,cc),
	HX_("convexCast",c6,01,bf,38),
	HX_("prepareCast",e6,ab,25,ec),
	HX_("convexMultiCast",71,c9,d5,6c),
	HX_("push_callback",0a,74,7b,59),
	HX_("pre_dt",6c,85,b1,ae),
	HX_("step",4c,e7,5b,4c),
	HX_("toiEvents",47,88,8f,3b),
	HX_("continuousCollisions",b0,4d,c1,d4),
	HX_("continuousEvent",8b,7c,a3,7f),
	HX_("bodyCbWake",a5,ae,81,83),
	HX_("bodyCbSleep",76,9b,9d,47),
	HX_("constraintCbWake",a0,b2,11,08),
	HX_("constraintCbSleep",1b,13,11,c1),
	HX_("constraintCbBreak",c3,7a,38,fb),
	HX_("nullListenerType",75,82,a7,3f),
	HX_("nullInteractorType",9a,76,84,83),
	HX_("freshListenerType",dc,28,8f,75),
	HX_("freshInteractorType",c1,c4,6f,bf),
	HX_("wakeCompound",af,9f,22,58),
	HX_("wakeIsland",19,22,f3,4e),
	HX_("non_inlined_wake",ea,75,91,ad),
	HX_("really_wake",b8,36,6e,3d),
	HX_("wake_constraint",d8,5b,f4,49),
	HX_("doForests",ab,5c,70,da),
	HX_("sleepArbiters",a1,14,5e,0c),
	HX_("static_validation",6a,ff,ac,7c),
	HX_("validation",39,0c,ed,e1),
	HX_("updateVel",d4,bf,e6,82),
	HX_("updatePos",0b,3b,e2,82),
	HX_("continuous",0f,05,17,de),
	HX_("presteparb",c2,e8,50,22),
	HX_("prestep",ef,94,e7,39),
	HX_("warmStart",dd,27,03,eb),
	HX_("iterateVel",83,18,82,5f),
	HX_("iteratePos",ba,93,7d,5f),
	HX_("group_ignore",52,8d,01,a7),
	HX_("interactionType",ac,a7,c8,08),
	HX_("precb",82,45,88,c8),
	HX_("prelisteners",fc,68,bb,f7),
	HX_("narrowPhase",a0,1b,1e,95),
	HX_("mrca1",8e,01,53,0e),
	HX_("mrca2",8f,01,53,0e),
	HX_("MRCA_chains",0e,fb,a3,3b),
	HX_("inlined_MRCA_chains",7a,a1,4a,9e),
	::String(null()) };

hx::Class ZPP_Space_obj::__mClass;

void ZPP_Space_obj::__register()
{
	ZPP_Space_obj _hx_dummy;
	ZPP_Space_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.space.ZPP_Space",b8,5d,a4,56);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Space_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Space_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Space_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Space_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace space
