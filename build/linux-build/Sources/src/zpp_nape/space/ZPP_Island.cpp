// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#include <hxinc/zpp_nape/space/ZPP_Island.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Component
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Component.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_52322f25c8b72a2f_174_new,"zpp_nape.space.ZPP_Island","new",0x3d045015,"zpp_nape.space.ZPP_Island.new","zpp_nape/space/Space.hx",174,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_179_elem,"zpp_nape.space.ZPP_Island","elem",0x20d4173a,"zpp_nape.space.ZPP_Island.elem","zpp_nape/space/Space.hx",179,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_184_begin,"zpp_nape.space.ZPP_Island","begin",0xd9ed811e,"zpp_nape.space.ZPP_Island.begin","zpp_nape/space/Space.hx",184,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_192_setbegin,"zpp_nape.space.ZPP_Island","setbegin",0xa2185372,"zpp_nape.space.ZPP_Island.setbegin","zpp_nape/space/Space.hx",192,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_198_add,"zpp_nape.space.ZPP_Island","add",0x3cfa71d6,"zpp_nape.space.ZPP_Island.add","zpp_nape/space/Space.hx",198,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_202_inlined_add,"zpp_nape.space.ZPP_Island","inlined_add",0x56a50942,"zpp_nape.space.ZPP_Island.inlined_add","zpp_nape/space/Space.hx",202,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_230_addAll,"zpp_nape.space.ZPP_Island","addAll",0xda0788eb,"zpp_nape.space.ZPP_Island.addAll","zpp_nape/space/Space.hx",230,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_240_insert,"zpp_nape.space.ZPP_Island","insert",0xd8e9c2a4,"zpp_nape.space.ZPP_Island.insert","zpp_nape/space/Space.hx",240,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_244_inlined_insert,"zpp_nape.space.ZPP_Island","inlined_insert",0xbc1a96b8,"zpp_nape.space.ZPP_Island.inlined_insert","zpp_nape/space/Space.hx",244,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_270_pop,"zpp_nape.space.ZPP_Island","pop",0x3d05dd46,"zpp_nape.space.ZPP_Island.pop","zpp_nape/space/Space.hx",270,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_274_inlined_pop,"zpp_nape.space.ZPP_Island","inlined_pop",0x56b074b2,"zpp_nape.space.ZPP_Island.inlined_pop","zpp_nape/space/Space.hx",274,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_294_pop_unsafe,"zpp_nape.space.ZPP_Island","pop_unsafe",0xa6848d3f,"zpp_nape.space.ZPP_Island.pop_unsafe","zpp_nape/space/Space.hx",294,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_298_inlined_pop_unsafe,"zpp_nape.space.ZPP_Island","inlined_pop_unsafe",0x58b2fb53,"zpp_nape.space.ZPP_Island.inlined_pop_unsafe","zpp_nape/space/Space.hx",298,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_320_remove,"zpp_nape.space.ZPP_Island","remove",0x3f951baf,"zpp_nape.space.ZPP_Island.remove","zpp_nape/space/Space.hx",320,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_322_try_remove,"zpp_nape.space.ZPP_Island","try_remove",0xbdaec2f3,"zpp_nape.space.ZPP_Island.try_remove","zpp_nape/space/Space.hx",322,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_356_inlined_remove,"zpp_nape.space.ZPP_Island","inlined_remove",0x22c5efc3,"zpp_nape.space.ZPP_Island.inlined_remove","zpp_nape/space/Space.hx",356,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_360_inlined_try_remove,"zpp_nape.space.ZPP_Island","inlined_try_remove",0x6fdd3107,"zpp_nape.space.ZPP_Island.inlined_try_remove","zpp_nape/space/Space.hx",360,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_384_erase,"zpp_nape.space.ZPP_Island","erase",0x9cb47fdb,"zpp_nape.space.ZPP_Island.erase","zpp_nape/space/Space.hx",384,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_388_inlined_erase,"zpp_nape.space.ZPP_Island","inlined_erase",0x67c4ca47,"zpp_nape.space.ZPP_Island.inlined_erase","zpp_nape/space/Space.hx",388,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_420_splice,"zpp_nape.space.ZPP_Island","splice",0xfaab04e7,"zpp_nape.space.ZPP_Island.splice","zpp_nape/space/Space.hx",420,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_425_clear,"zpp_nape.space.ZPP_Island","clear",0x71f30882,"zpp_nape.space.ZPP_Island.clear","zpp_nape/space/Space.hx",425,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_430_inlined_clear,"zpp_nape.space.ZPP_Island","inlined_clear",0x3d0352ee,"zpp_nape.space.ZPP_Island.inlined_clear","zpp_nape/space/Space.hx",430,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_435_reverse,"zpp_nape.space.ZPP_Island","reverse",0x8adf3757,"zpp_nape.space.ZPP_Island.reverse","zpp_nape/space/Space.hx",435,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_451_empty,"zpp_nape.space.ZPP_Island","empty",0x9971d182,"zpp_nape.space.ZPP_Island.empty","zpp_nape/space/Space.hx",451,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_456_size,"zpp_nape.space.ZPP_Island","size",0x2a12df6c,"zpp_nape.space.ZPP_Island.size","zpp_nape/space/Space.hx",456,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_459_has,"zpp_nape.space.ZPP_Island","has",0x3cffbf0f,"zpp_nape.space.ZPP_Island.has","zpp_nape/space/Space.hx",459,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_463_inlined_has,"zpp_nape.space.ZPP_Island","inlined_has",0x56aa567b,"zpp_nape.space.ZPP_Island.inlined_has","zpp_nape/space/Space.hx",463,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_494_front,"zpp_nape.space.ZPP_Island","front",0x3025af9e,"zpp_nape.space.ZPP_Island.front","zpp_nape/space/Space.hx",494,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_496_back,"zpp_nape.space.ZPP_Island","back",0x1ed018d2,"zpp_nape.space.ZPP_Island.back","zpp_nape/space/Space.hx",496,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_505_iterator_at,"zpp_nape.space.ZPP_Island","iterator_at",0x5b494699,"zpp_nape.space.ZPP_Island.iterator_at","zpp_nape/space/Space.hx",505,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_518_at,"zpp_nape.space.ZPP_Island","at",0x8a0802de,"zpp_nape.space.ZPP_Island.at","zpp_nape/space/Space.hx",518,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_560_free,"zpp_nape.space.ZPP_Island","free",0x2181db57,"zpp_nape.space.ZPP_Island.free","zpp_nape/space/Space.hx",560,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_572_alloc,"zpp_nape.space.ZPP_Island","alloc",0x4b2b3b6a,"zpp_nape.space.ZPP_Island.alloc","zpp_nape/space/Space.hx",572,0x2b65ed03)
HX_LOCAL_STACK_FRAME(_hx_pos_52322f25c8b72a2f_533_boot,"zpp_nape.space.ZPP_Island","boot",0x1edac2dd,"zpp_nape.space.ZPP_Island.boot","zpp_nape/space/Space.hx",533,0x2b65ed03)
namespace zpp_nape{
namespace space{

void ZPP_Island_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_52322f25c8b72a2f_174_new)
HXLINE( 532)		this->waket = 0;
HXLINE( 531)		this->sleep = false;
HXLINE( 530)		this->comps = null();
HXLINE( 189)		this->length = 0;
HXLINE( 188)		this->pushmod = false;
HXLINE( 187)		this->modified = false;
HXLINE( 186)		this->_inuse = false;
HXLINE( 175)		this->next = null();
HXLINE( 575)		this->comps =  ::zpp_nape::util::ZNPList_ZPP_Component_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_Island_obj::__CreateEmpty() { return new ZPP_Island_obj; }

void *ZPP_Island_obj::_hx_vtable = 0;

Dynamic ZPP_Island_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Island_obj > _hx_result = new ZPP_Island_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Island_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x105e3353;
}

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::elem(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_179_elem)
HXDLIN( 179)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,elem,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_184_begin)
HXDLIN( 184)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,begin,return )

void ZPP_Island_obj::setbegin( ::zpp_nape::space::ZPP_Island i){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_192_setbegin)
HXLINE( 193)		this->next = i;
HXLINE( 194)		this->modified = true;
HXLINE( 195)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,setbegin,(void))

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::add( ::zpp_nape::space::ZPP_Island o){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_198_add)
HXDLIN( 198)		o->_inuse = true;
HXDLIN( 198)		 ::zpp_nape::space::ZPP_Island temp = o;
HXDLIN( 198)		temp->next = this->next;
HXDLIN( 198)		this->next = temp;
HXDLIN( 198)		this->modified = true;
HXDLIN( 198)		this->length++;
HXDLIN( 198)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,add,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::inlined_add( ::zpp_nape::space::ZPP_Island o){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_202_inlined_add)
HXLINE( 212)		o->_inuse = true;
HXLINE( 211)		 ::zpp_nape::space::ZPP_Island temp = o;
HXLINE( 215)		temp->next = this->next;
HXLINE( 216)		this->next = temp;
HXLINE( 217)		this->modified = true;
HXLINE( 218)		this->length++;
HXLINE( 219)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,inlined_add,return )

void ZPP_Island_obj::addAll( ::zpp_nape::space::ZPP_Island x){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_230_addAll)
HXLINE( 231)		 ::zpp_nape::space::ZPP_Island cx_ite = x->next;
HXLINE( 232)		while(hx::IsNotNull( cx_ite )){
HXLINE( 233)			 ::zpp_nape::space::ZPP_Island i = cx_ite;
HXLINE( 234)			this->add(i);
HXLINE( 235)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,addAll,(void))

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::insert( ::zpp_nape::space::ZPP_Island cur, ::zpp_nape::space::ZPP_Island o){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_240_insert)
HXDLIN( 240)		o->_inuse = true;
HXDLIN( 240)		 ::zpp_nape::space::ZPP_Island temp = o;
HXDLIN( 240)		if (hx::IsNull( cur )) {
HXDLIN( 240)			temp->next = this->next;
HXDLIN( 240)			this->next = temp;
            		}
            		else {
HXDLIN( 240)			temp->next = cur->next;
HXDLIN( 240)			cur->next = temp;
            		}
HXDLIN( 240)		this->pushmod = (this->modified = true);
HXDLIN( 240)		this->length++;
HXDLIN( 240)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Island_obj,insert,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::inlined_insert( ::zpp_nape::space::ZPP_Island cur, ::zpp_nape::space::ZPP_Island o){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_244_inlined_insert)
HXLINE( 254)		o->_inuse = true;
HXLINE( 253)		 ::zpp_nape::space::ZPP_Island temp = o;
HXLINE( 257)		if (hx::IsNull( cur )) {
HXLINE( 258)			temp->next = this->next;
HXLINE( 259)			this->next = temp;
            		}
            		else {
HXLINE( 262)			temp->next = cur->next;
HXLINE( 263)			cur->next = temp;
            		}
HXLINE( 265)		this->pushmod = (this->modified = true);
HXLINE( 266)		this->length++;
HXLINE( 267)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Island_obj,inlined_insert,return )

void ZPP_Island_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_270_pop)
HXDLIN( 270)		 ::zpp_nape::space::ZPP_Island ret = this->next;
HXDLIN( 270)		this->next = ret->next;
HXDLIN( 270)		ret->_inuse = false;
HXDLIN( 270)		if (hx::IsNull( this->next )) {
HXDLIN( 270)			this->pushmod = true;
            		}
HXDLIN( 270)		this->modified = true;
HXDLIN( 270)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,pop,(void))

void ZPP_Island_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_274_inlined_pop)
HXLINE( 283)		 ::zpp_nape::space::ZPP_Island ret = this->next;
HXLINE( 284)		this->next = ret->next;
HXLINE( 286)		ret->_inuse = false;
HXLINE( 289)		if (hx::IsNull( this->next )) {
HXLINE( 289)			this->pushmod = true;
            		}
HXLINE( 290)		this->modified = true;
HXLINE( 291)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,inlined_pop,(void))

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_294_pop_unsafe)
HXDLIN( 294)		 ::zpp_nape::space::ZPP_Island ret = this->next;
HXDLIN( 294)		this->pop();
HXDLIN( 294)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,pop_unsafe,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_298_inlined_pop_unsafe)
HXLINE( 307)		 ::zpp_nape::space::ZPP_Island ret = this->next;
HXLINE( 308)		this->pop();
HXLINE( 309)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,inlined_pop_unsafe,return )

void ZPP_Island_obj::remove( ::zpp_nape::space::ZPP_Island obj){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_320_remove)
HXDLIN( 320)		 ::zpp_nape::space::ZPP_Island pre = null();
HXDLIN( 320)		 ::zpp_nape::space::ZPP_Island cur = this->next;
HXDLIN( 320)		bool ret = false;
HXDLIN( 320)		while(hx::IsNotNull( cur )){
HXDLIN( 320)			if (hx::IsEq( cur,obj )) {
HXDLIN( 320)				{
HXDLIN( 320)					 ::zpp_nape::space::ZPP_Island old;
HXDLIN( 320)					 ::zpp_nape::space::ZPP_Island ret1;
HXDLIN( 320)					if (hx::IsNull( pre )) {
HXDLIN( 320)						old = this->next;
HXDLIN( 320)						ret1 = old->next;
HXDLIN( 320)						this->next = ret1;
HXDLIN( 320)						if (hx::IsNull( this->next )) {
HXDLIN( 320)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 320)						old = pre->next;
HXDLIN( 320)						ret1 = old->next;
HXDLIN( 320)						pre->next = ret1;
HXDLIN( 320)						if (hx::IsNull( ret1 )) {
HXDLIN( 320)							this->pushmod = true;
            						}
            					}
HXDLIN( 320)					old->_inuse = false;
HXDLIN( 320)					this->modified = true;
HXDLIN( 320)					this->length--;
HXDLIN( 320)					this->pushmod = true;
            				}
HXDLIN( 320)				ret = true;
HXDLIN( 320)				goto _hx_goto_14;
            			}
HXDLIN( 320)			pre = cur;
HXDLIN( 320)			cur = cur->next;
            		}
            		_hx_goto_14:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,remove,(void))

bool ZPP_Island_obj::try_remove( ::zpp_nape::space::ZPP_Island obj){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_322_try_remove)
HXLINE( 331)		 ::zpp_nape::space::ZPP_Island pre = null();
HXLINE( 332)		 ::zpp_nape::space::ZPP_Island cur = this->next;
HXLINE( 333)		bool ret = false;
HXLINE( 334)		while(hx::IsNotNull( cur )){
HXLINE( 335)			if (hx::IsEq( cur,obj )) {
HXLINE( 336)				this->erase(pre);
HXLINE( 337)				ret = true;
HXLINE( 338)				goto _hx_goto_16;
            			}
HXLINE( 340)			pre = cur;
HXLINE( 341)			cur = cur->next;
            		}
            		_hx_goto_16:;
HXLINE( 343)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,try_remove,return )

void ZPP_Island_obj::inlined_remove( ::zpp_nape::space::ZPP_Island obj){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_356_inlined_remove)
HXDLIN( 356)		 ::zpp_nape::space::ZPP_Island pre = null();
HXDLIN( 356)		 ::zpp_nape::space::ZPP_Island cur = this->next;
HXDLIN( 356)		bool ret = false;
HXDLIN( 356)		while(hx::IsNotNull( cur )){
HXDLIN( 356)			if (hx::IsEq( cur,obj )) {
HXDLIN( 356)				{
HXDLIN( 356)					 ::zpp_nape::space::ZPP_Island old;
HXDLIN( 356)					 ::zpp_nape::space::ZPP_Island ret1;
HXDLIN( 356)					if (hx::IsNull( pre )) {
HXDLIN( 356)						old = this->next;
HXDLIN( 356)						ret1 = old->next;
HXDLIN( 356)						this->next = ret1;
HXDLIN( 356)						if (hx::IsNull( this->next )) {
HXDLIN( 356)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 356)						old = pre->next;
HXDLIN( 356)						ret1 = old->next;
HXDLIN( 356)						pre->next = ret1;
HXDLIN( 356)						if (hx::IsNull( ret1 )) {
HXDLIN( 356)							this->pushmod = true;
            						}
            					}
HXDLIN( 356)					old->_inuse = false;
HXDLIN( 356)					this->modified = true;
HXDLIN( 356)					this->length--;
HXDLIN( 356)					this->pushmod = true;
            				}
HXDLIN( 356)				ret = true;
HXDLIN( 356)				goto _hx_goto_18;
            			}
HXDLIN( 356)			pre = cur;
HXDLIN( 356)			cur = cur->next;
            		}
            		_hx_goto_18:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,inlined_remove,(void))

bool ZPP_Island_obj::inlined_try_remove( ::zpp_nape::space::ZPP_Island obj){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_360_inlined_try_remove)
HXLINE( 369)		 ::zpp_nape::space::ZPP_Island pre = null();
HXLINE( 370)		 ::zpp_nape::space::ZPP_Island cur = this->next;
HXLINE( 371)		bool ret = false;
HXLINE( 372)		while(hx::IsNotNull( cur )){
HXLINE( 373)			if (hx::IsEq( cur,obj )) {
HXLINE( 374)				{
HXLINE( 374)					 ::zpp_nape::space::ZPP_Island old;
HXDLIN( 374)					 ::zpp_nape::space::ZPP_Island ret1;
HXDLIN( 374)					if (hx::IsNull( pre )) {
HXLINE( 374)						old = this->next;
HXDLIN( 374)						ret1 = old->next;
HXDLIN( 374)						this->next = ret1;
HXDLIN( 374)						if (hx::IsNull( this->next )) {
HXLINE( 374)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 374)						old = pre->next;
HXDLIN( 374)						ret1 = old->next;
HXDLIN( 374)						pre->next = ret1;
HXDLIN( 374)						if (hx::IsNull( ret1 )) {
HXLINE( 374)							this->pushmod = true;
            						}
            					}
HXDLIN( 374)					old->_inuse = false;
HXDLIN( 374)					this->modified = true;
HXDLIN( 374)					this->length--;
HXDLIN( 374)					this->pushmod = true;
            				}
HXLINE( 375)				ret = true;
HXLINE( 376)				goto _hx_goto_20;
            			}
HXLINE( 378)			pre = cur;
HXLINE( 379)			cur = cur->next;
            		}
            		_hx_goto_20:;
HXLINE( 381)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,inlined_try_remove,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::erase( ::zpp_nape::space::ZPP_Island pre){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_384_erase)
HXDLIN( 384)		 ::zpp_nape::space::ZPP_Island old;
HXDLIN( 384)		 ::zpp_nape::space::ZPP_Island ret;
HXDLIN( 384)		if (hx::IsNull( pre )) {
HXDLIN( 384)			old = this->next;
HXDLIN( 384)			ret = old->next;
HXDLIN( 384)			this->next = ret;
HXDLIN( 384)			if (hx::IsNull( this->next )) {
HXDLIN( 384)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN( 384)			old = pre->next;
HXDLIN( 384)			ret = old->next;
HXDLIN( 384)			pre->next = ret;
HXDLIN( 384)			if (hx::IsNull( ret )) {
HXDLIN( 384)				this->pushmod = true;
            			}
            		}
HXDLIN( 384)		old->_inuse = false;
HXDLIN( 384)		this->modified = true;
HXDLIN( 384)		this->length--;
HXDLIN( 384)		this->pushmod = true;
HXDLIN( 384)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,erase,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::inlined_erase( ::zpp_nape::space::ZPP_Island pre){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_388_inlined_erase)
HXLINE( 397)		 ::zpp_nape::space::ZPP_Island old;
HXLINE( 398)		 ::zpp_nape::space::ZPP_Island ret;
HXLINE( 399)		if (hx::IsNull( pre )) {
HXLINE( 400)			old = this->next;
HXLINE( 401)			ret = old->next;
HXLINE( 402)			this->next = ret;
HXLINE( 403)			if (hx::IsNull( this->next )) {
HXLINE( 403)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 406)			old = pre->next;
HXLINE( 407)			ret = old->next;
HXLINE( 408)			pre->next = ret;
HXLINE( 409)			if (hx::IsNull( ret )) {
HXLINE( 409)				this->pushmod = true;
            			}
            		}
HXLINE( 412)		old->_inuse = false;
HXLINE( 415)		this->modified = true;
HXLINE( 416)		this->length--;
HXLINE( 417)		this->pushmod = true;
HXLINE( 418)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,inlined_erase,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::splice( ::zpp_nape::space::ZPP_Island pre,int n){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_420_splice)
HXLINE( 421)		while(true){
HXLINE( 421)			bool _hx_tmp;
HXDLIN( 421)			n = (n - 1);
HXDLIN( 421)			if (((n + 1) > 0)) {
HXLINE( 421)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 421)				_hx_tmp = false;
            			}
HXDLIN( 421)			if (!(_hx_tmp)) {
HXLINE( 421)				goto _hx_goto_24;
            			}
HXDLIN( 421)			this->erase(pre);
            		}
            		_hx_goto_24:;
HXLINE( 422)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Island_obj,splice,return )

void ZPP_Island_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_425_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,clear,(void))

void ZPP_Island_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_430_inlined_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,inlined_clear,(void))

void ZPP_Island_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_435_reverse)
HXLINE( 436)		 ::zpp_nape::space::ZPP_Island cur = this->next;
HXLINE( 437)		 ::zpp_nape::space::ZPP_Island pre = null();
HXLINE( 438)		while(hx::IsNotNull( cur )){
HXLINE( 439)			 ::zpp_nape::space::ZPP_Island nx = cur->next;
HXLINE( 440)			cur->next = pre;
HXLINE( 441)			this->next = cur;
HXLINE( 442)			pre = cur;
HXLINE( 443)			cur = nx;
            		}
HXLINE( 445)		this->modified = true;
HXLINE( 446)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,reverse,(void))

bool ZPP_Island_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_451_empty)
HXDLIN( 451)		return hx::IsNull( this->next );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,empty,return )

int ZPP_Island_obj::size(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_456_size)
HXDLIN( 456)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,size,return )

bool ZPP_Island_obj::has( ::zpp_nape::space::ZPP_Island obj){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_459_has)
HXDLIN( 459)		bool ret;
HXDLIN( 459)		{
HXDLIN( 459)			ret = false;
HXDLIN( 459)			{
HXDLIN( 459)				 ::zpp_nape::space::ZPP_Island cx_ite = this->next;
HXDLIN( 459)				while(hx::IsNotNull( cx_ite )){
HXDLIN( 459)					 ::zpp_nape::space::ZPP_Island npite = cx_ite;
HXDLIN( 459)					if (hx::IsEq( npite,obj )) {
HXDLIN( 459)						ret = true;
HXDLIN( 459)						goto _hx_goto_32;
            					}
HXDLIN( 459)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_32:;
            			}
            		}
HXDLIN( 459)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,has,return )

bool ZPP_Island_obj::inlined_has( ::zpp_nape::space::ZPP_Island obj){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_463_inlined_has)
HXLINE( 472)		bool ret;
HXLINE( 473)		{
HXLINE( 474)			ret = false;
HXLINE( 475)			{
HXLINE( 476)				 ::zpp_nape::space::ZPP_Island cx_ite = this->next;
HXLINE( 477)				while(hx::IsNotNull( cx_ite )){
HXLINE( 478)					 ::zpp_nape::space::ZPP_Island npite = cx_ite;
HXLINE( 480)					if (hx::IsEq( npite,obj )) {
HXLINE( 481)						ret = true;
HXLINE( 482)						goto _hx_goto_34;
            					}
HXLINE( 485)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_34:;
            			}
            		}
HXLINE( 489)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,inlined_has,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::front(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_494_front)
HXDLIN( 494)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,front,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::back(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_496_back)
HXLINE( 497)		 ::zpp_nape::space::ZPP_Island ret = this->next;
HXLINE( 498)		 ::zpp_nape::space::ZPP_Island cur = ret;
HXLINE( 499)		while(hx::IsNotNull( cur )){
HXLINE( 500)			ret = cur;
HXLINE( 501)			cur = cur->next;
            		}
HXLINE( 503)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,back,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_505_iterator_at)
HXLINE( 514)		 ::zpp_nape::space::ZPP_Island ret = this->next;
HXLINE( 515)		while(true){
HXLINE( 515)			bool _hx_tmp;
HXDLIN( 515)			ind = (ind - 1);
HXDLIN( 515)			if (((ind + 1) > 0)) {
HXLINE( 515)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE( 515)				_hx_tmp = false;
            			}
HXDLIN( 515)			if (!(_hx_tmp)) {
HXLINE( 515)				goto _hx_goto_39;
            			}
HXDLIN( 515)			ret = ret->next;
            		}
            		_hx_goto_39:;
HXLINE( 516)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,iterator_at,return )

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_518_at)
HXLINE( 527)		 ::zpp_nape::space::ZPP_Island it = this->iterator_at(ind);
HXLINE( 528)		if (hx::IsNotNull( it )) {
HXLINE( 528)			return it;
            		}
            		else {
HXLINE( 528)			return null();
            		}
HXDLIN( 528)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Island_obj,at,return )

void ZPP_Island_obj::free(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_560_free)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,free,(void))

void ZPP_Island_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_572_alloc)
HXDLIN( 572)		this->waket = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Island_obj,alloc,(void))

 ::zpp_nape::space::ZPP_Island ZPP_Island_obj::zpp_pool;


hx::ObjectPtr< ZPP_Island_obj > ZPP_Island_obj::__new() {
	hx::ObjectPtr< ZPP_Island_obj > __this = new ZPP_Island_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Island_obj > ZPP_Island_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Island_obj *__this = (ZPP_Island_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Island_obj), true, "zpp_nape.space.ZPP_Island"));
	*(void **)__this = ZPP_Island_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Island_obj::ZPP_Island_obj()
{
}

void ZPP_Island_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Island);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(_inuse,"_inuse");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(comps,"comps");
	HX_MARK_MEMBER_NAME(sleep,"sleep");
	HX_MARK_MEMBER_NAME(waket,"waket");
	HX_MARK_END_CLASS();
}

void ZPP_Island_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(_inuse,"_inuse");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(comps,"comps");
	HX_VISIT_MEMBER_NAME(sleep,"sleep");
	HX_VISIT_MEMBER_NAME(waket,"waket");
}

hx::Val ZPP_Island_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"elem") ) { return hx::Val( elem_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		if (HX_FIELD_EQ(inName,"comps") ) { return hx::Val( comps ); }
		if (HX_FIELD_EQ(inName,"sleep") ) { return hx::Val( sleep ); }
		if (HX_FIELD_EQ(inName,"waket") ) { return hx::Val( waket ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_inuse") ) { return hx::Val( _inuse ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Island_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
	}
	return false;
}

hx::Val ZPP_Island_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::space::ZPP_Island >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"comps") ) { comps=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Component >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sleep") ) { sleep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waket") ) { waket=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_inuse") ) { _inuse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Island_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::space::ZPP_Island >(); return true; }
	}
	return false;
}

void ZPP_Island_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("_inuse",c3,d4,08,ba));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("comps",84,34,5d,4a));
	outFields->push(HX_("sleep",17,bd,c4,7e));
	outFields->push(HX_("waket",d0,43,1e,c5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Island_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Island */ ,(int)offsetof(ZPP_Island_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsBool,(int)offsetof(ZPP_Island_obj,_inuse),HX_("_inuse",c3,d4,08,ba)},
	{hx::fsBool,(int)offsetof(ZPP_Island_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZPP_Island_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZPP_Island_obj,length),HX_("length",e6,94,07,9f)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Component */ ,(int)offsetof(ZPP_Island_obj,comps),HX_("comps",84,34,5d,4a)},
	{hx::fsBool,(int)offsetof(ZPP_Island_obj,sleep),HX_("sleep",17,bd,c4,7e)},
	{hx::fsInt,(int)offsetof(ZPP_Island_obj,waket),HX_("waket",d0,43,1e,c5)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Island_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Island */ ,(void *) &ZPP_Island_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Island_obj_sMemberFields[] = {
	HX_("next",f3,84,02,49),
	HX_("elem",8f,d8,14,43),
	HX_("begin",29,ea,55,b0),
	HX_("_inuse",c3,d4,08,ba),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	HX_("comps",84,34,5d,4a),
	HX_("sleep",17,bd,c4,7e),
	HX_("waket",d0,43,1e,c5),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	::String(null()) };

static void ZPP_Island_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Island_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Island_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Island_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Island_obj::__mClass;

static ::String ZPP_Island_obj_sStaticFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	::String(null())
};

void ZPP_Island_obj::__register()
{
	ZPP_Island_obj _hx_dummy;
	ZPP_Island_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.space.ZPP_Island",a3,a1,13,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Island_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Island_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Island_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Island_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Island_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Island_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Island_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Island_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Island_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Island_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_52322f25c8b72a2f_533_boot)
HXDLIN( 533)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace space
