// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <hxinc/nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <hxinc/nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <hxinc/nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <hxinc/nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <hxinc/zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <hxinc/zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <hxinc/zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <hxinc/zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <hxinc/zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <hxinc/zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBTree
#include <hxinc/zpp_nape/space/ZPP_AABBTree.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <hxinc/zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <hxinc/zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_AABBNode
#include <hxinc/zpp_nape/util/ZNPList_ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_AABBPair
#include <hxinc/zpp_nape/util/ZNPList_ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_AABBNode
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_AABBPair
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_AABBPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bef38b12d532b2cb_694_new,"zpp_nape.space.ZPP_DynAABBPhase","new",0x58f75962,"zpp_nape.space.ZPP_DynAABBPhase.new","zpp_nape/space/DynAABBPhase.hx",694,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_714_dyn,"zpp_nape.space.ZPP_DynAABBPhase","dyn",0x58efd43b,"zpp_nape.space.ZPP_DynAABBPhase.dyn","zpp_nape/space/DynAABBPhase.hx",714,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_717___insert,"zpp_nape.space.ZPP_DynAABBPhase","__insert",0x6faf3e17,"zpp_nape.space.ZPP_DynAABBPhase.__insert","zpp_nape/space/DynAABBPhase.hx",717,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_777___remove,"zpp_nape.space.ZPP_DynAABBPhase","__remove",0xd65a9722,"zpp_nape.space.ZPP_DynAABBPhase.__remove","zpp_nape/space/DynAABBPhase.hx",777,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_944___sync,"zpp_nape.space.ZPP_DynAABBPhase","__sync",0xfa22a1b9,"zpp_nape.space.ZPP_DynAABBPhase.__sync","zpp_nape/space/DynAABBPhase.hx",944,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_986_sync_broadphase,"zpp_nape.space.ZPP_DynAABBPhase","sync_broadphase",0xd127ac5f,"zpp_nape.space.ZPP_DynAABBPhase.sync_broadphase","zpp_nape/space/DynAABBPhase.hx",986,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_1106_broadphase,"zpp_nape.space.ZPP_DynAABBPhase","broadphase",0x9b51d8f7,"zpp_nape.space.ZPP_DynAABBPhase.broadphase","zpp_nape/space/DynAABBPhase.hx",1106,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_1882_clear,"zpp_nape.space.ZPP_DynAABBPhase","clear",0xb7b4bf0f,"zpp_nape.space.ZPP_DynAABBPhase.clear","zpp_nape/space/DynAABBPhase.hx",1882,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_1932_shapesUnderPoint,"zpp_nape.space.ZPP_DynAABBPhase","shapesUnderPoint",0x4c326aa8,"zpp_nape.space.ZPP_DynAABBPhase.shapesUnderPoint","zpp_nape/space/DynAABBPhase.hx",1932,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2029_bodiesUnderPoint,"zpp_nape.space.ZPP_DynAABBPhase","bodiesUnderPoint",0x84a59976,"zpp_nape.space.ZPP_DynAABBPhase.bodiesUnderPoint","zpp_nape/space/DynAABBPhase.hx",2029,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2133_shapesInAABB,"zpp_nape.space.ZPP_DynAABBPhase","shapesInAABB",0x4f3c6395,"zpp_nape.space.ZPP_DynAABBPhase.shapesInAABB","zpp_nape/space/DynAABBPhase.hx",2133,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2277_bodiesInAABB,"zpp_nape.space.ZPP_DynAABBPhase","bodiesInAABB",0xf3e09363,"zpp_nape.space.ZPP_DynAABBPhase.bodiesInAABB","zpp_nape/space/DynAABBPhase.hx",2277,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2468_shapesInCircle,"zpp_nape.space.ZPP_DynAABBPhase","shapesInCircle",0xd65dc665,"zpp_nape.space.ZPP_DynAABBPhase.shapesInCircle","zpp_nape/space/DynAABBPhase.hx",2468,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2545_bodiesInCircle,"zpp_nape.space.ZPP_DynAABBPhase","bodiesInCircle",0x104805b3,"zpp_nape.space.ZPP_DynAABBPhase.bodiesInCircle","zpp_nape/space/DynAABBPhase.hx",2545,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2644_shapesInShape,"zpp_nape.space.ZPP_DynAABBPhase","shapesInShape",0x7cb0306c,"zpp_nape.space.ZPP_DynAABBPhase.shapesInShape","zpp_nape/space/DynAABBPhase.hx",2644,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2721_bodiesInShape,"zpp_nape.space.ZPP_DynAABBPhase","bodiesInShape",0xe7b5d4de,"zpp_nape.space.ZPP_DynAABBPhase.bodiesInShape","zpp_nape/space/DynAABBPhase.hx",2721,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2821_rayCast,"zpp_nape.space.ZPP_DynAABBPhase","rayCast",0x17a58fcb,"zpp_nape.space.ZPP_DynAABBPhase.rayCast","zpp_nape/space/DynAABBPhase.hx",2821,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_2950_rayMultiCast,"zpp_nape.space.ZPP_DynAABBPhase","rayMultiCast",0x7935494c,"zpp_nape.space.ZPP_DynAABBPhase.rayMultiCast","zpp_nape/space/DynAABBPhase.hx",2950,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_696_boot,"zpp_nape.space.ZPP_DynAABBPhase","boot",0x778fdcf0,"zpp_nape.space.ZPP_DynAABBPhase.boot","zpp_nape/space/DynAABBPhase.hx",696,0x55500cf1)
HX_LOCAL_STACK_FRAME(_hx_pos_bef38b12d532b2cb_698_boot,"zpp_nape.space.ZPP_DynAABBPhase","boot",0x778fdcf0,"zpp_nape.space.ZPP_DynAABBPhase.boot","zpp_nape/space/DynAABBPhase.hx",698,0x55500cf1)
namespace zpp_nape{
namespace space{

void ZPP_DynAABBPhase_obj::__construct( ::zpp_nape::space::ZPP_Space space){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_694_new)
HXLINE(2820)		this->openlist = null();
HXLINE(2276)		this->failed = null();
HXLINE(2132)		this->treeStack2 = null();
HXLINE(1931)		this->treeStack = null();
HXLINE( 703)		this->moves = null();
HXLINE( 702)		this->syncs = null();
HXLINE( 701)		this->pairs = null();
HXLINE( 700)		this->dtree = null();
HXLINE( 699)		this->stree = null();
HXLINE( 704)		super::__construct();
HXLINE( 705)		this->space = space;
HXLINE( 706)		this->is_sweep = false;
HXLINE( 707)		this->dynab = hx::ObjectPtr<OBJ_>(this);
HXLINE( 708)		this->stree =  ::zpp_nape::space::ZPP_AABBTree_obj::__alloc( HX_CTX );
HXLINE( 709)		this->dtree =  ::zpp_nape::space::ZPP_AABBTree_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_DynAABBPhase_obj::__CreateEmpty() { return new ZPP_DynAABBPhase_obj; }

void *ZPP_DynAABBPhase_obj::_hx_vtable = 0;

Dynamic ZPP_DynAABBPhase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_DynAABBPhase_obj > _hx_result = new ZPP_DynAABBPhase_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZPP_DynAABBPhase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x124bfd3c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x124bfd3c;
	} else {
		return inClassId==(int)0x7fc88af7;
	}
}

bool ZPP_DynAABBPhase_obj::dyn( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_bef38b12d532b2cb_714_dyn)
HXDLIN( 714)		if ((shape->body->type == 1)) {
HXDLIN( 714)			return false;
            		}
            		else {
HXLINE( 715)			return !(shape->body->component->sleeping);
            		}
HXLINE( 714)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DynAABBPhase_obj,dyn,return )

void ZPP_DynAABBPhase_obj::__insert( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_717___insert)
HXLINE( 734)		 ::zpp_nape::space::ZPP_AABBNode node;
HXLINE( 735)		{
HXLINE( 736)			if (hx::IsNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )) {
HXLINE( 737)				node =  ::zpp_nape::space::ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 743)				node = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXLINE( 744)				::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = node->next;
HXLINE( 745)				node->next = null();
            			}
HXLINE( 750)			{
HXLINE( 750)				if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 750)					node->aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 750)					node->aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 750)					::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = node->aabb->next;
HXDLIN( 750)					node->aabb->next = null();
            				}
HXDLIN( 750)				node->moved = false;
HXDLIN( 750)				node->synced = false;
HXDLIN( 750)				node->first_sync = false;
            			}
            		}
HXLINE( 752)		node->shape = shape;
HXLINE( 753)		shape->node = node;
HXLINE( 762)		node->synced = true;
HXLINE( 763)		node->first_sync = true;
HXLINE( 764)		{
HXLINE( 773)			node->snext = this->syncs;
HXLINE( 774)			this->syncs = node;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DynAABBPhase_obj,__insert,(void))

void ZPP_DynAABBPhase_obj::__remove( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_bef38b12d532b2cb_777___remove)
HXLINE( 794)		 ::zpp_nape::space::ZPP_AABBNode node = shape->node;
HXLINE( 795)		if (!(node->first_sync)) {
HXLINE( 796)			if (node->dyn) {
HXLINE( 796)				this->dtree->removeLeaf(node);
            			}
            			else {
HXLINE( 797)				this->stree->removeLeaf(node);
            			}
            		}
HXLINE( 799)		shape->node = null();
HXLINE( 800)		if (node->synced) {
HXLINE( 801)			{
HXLINE( 802)				 ::zpp_nape::space::ZPP_AABBNode pre = null();
HXLINE( 803)				 ::zpp_nape::space::ZPP_AABBNode cur = this->syncs;
HXLINE( 804)				while(hx::IsNotNull( cur )){
HXLINE( 805)					if (hx::IsEq( cur,node )) {
HXLINE( 805)						goto _hx_goto_3;
            					}
HXLINE( 806)					pre = cur;
HXLINE( 807)					cur = cur->snext;
            				}
            				_hx_goto_3:;
HXLINE( 809)				{
HXLINE( 818)					if (hx::IsNull( pre )) {
HXLINE( 818)						this->syncs = cur->snext;
            					}
            					else {
HXLINE( 819)						pre->snext = cur->snext;
            					}
HXLINE( 820)					cur->snext = null();
            				}
            			}
HXLINE( 823)			node->synced = false;
            		}
HXLINE( 825)		if (node->moved) {
HXLINE( 826)			{
HXLINE( 827)				 ::zpp_nape::space::ZPP_AABBNode pre1 = null();
HXLINE( 828)				 ::zpp_nape::space::ZPP_AABBNode cur1 = this->moves;
HXLINE( 829)				while(hx::IsNotNull( cur1 )){
HXLINE( 830)					if (hx::IsEq( cur1,node )) {
HXLINE( 830)						goto _hx_goto_4;
            					}
HXLINE( 831)					pre1 = cur1;
HXLINE( 832)					cur1 = cur1->mnext;
            				}
            				_hx_goto_4:;
HXLINE( 834)				{
HXLINE( 843)					if (hx::IsNull( pre1 )) {
HXLINE( 843)						this->moves = cur1->mnext;
            					}
            					else {
HXLINE( 844)						pre1->mnext = cur1->mnext;
            					}
HXLINE( 845)					cur1->mnext = null();
            				}
            			}
HXLINE( 848)			node->moved = false;
            		}
HXLINE( 850)		 ::Dynamic pre2 = null();
HXLINE( 851)		 ::zpp_nape::space::ZPP_AABBPair cur2 = this->pairs;
HXLINE( 852)		while(hx::IsNotNull( cur2 )){
HXLINE( 861)			 ::zpp_nape::space::ZPP_AABBPair nxt = cur2->next;
HXLINE( 862)			bool _hx_tmp;
HXDLIN( 862)			if (hx::IsNotEq( cur2->n1,node )) {
HXLINE( 862)				_hx_tmp = hx::IsEq( cur2->n2,node );
            			}
            			else {
HXLINE( 862)				_hx_tmp = true;
            			}
HXDLIN( 862)			if (_hx_tmp) {
HXLINE( 863)				if (hx::IsNull( pre2 )) {
HXLINE( 863)					this->pairs = nxt;
            				}
            				else {
HXLINE( 864)					pre2->__SetField(HX_("next",f3,84,02,49),nxt,hx::paccDynamic);
            				}
HXLINE( 865)				if (hx::IsNotNull( cur2->arb )) {
HXLINE( 865)					cur2->arb->pair = null();
            				}
HXLINE( 866)				cur2->arb = null();
HXLINE( 867)				cur2->n1->shape->pairs->remove(cur2);
HXLINE( 868)				cur2->n2->shape->pairs->remove(cur2);
HXLINE( 869)				{
HXLINE( 870)					 ::zpp_nape::space::ZPP_AABBPair o = cur2;
HXLINE( 879)					{
HXLINE( 879)						o->n1 = (o->n2 = null());
HXDLIN( 879)						o->sleeping = false;
            					}
HXLINE( 880)					o->next = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE( 881)					::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = o;
            				}
HXLINE( 886)				cur2 = nxt;
HXLINE( 887)				continue;
            			}
HXLINE( 889)			pre2 = cur2;
HXLINE( 890)			cur2 = nxt;
            		}
HXLINE( 892)		while(hx::IsNotNull( shape->pairs->head )){
HXLINE( 893)			 ::zpp_nape::space::ZPP_AABBPair cur3 = shape->pairs->pop_unsafe();
HXLINE( 902)			if (hx::IsEq( cur3->n1,node )) {
HXLINE( 902)				cur3->n2->shape->pairs->remove(cur3);
            			}
            			else {
HXLINE( 903)				cur3->n1->shape->pairs->remove(cur3);
            			}
HXLINE( 904)			if (hx::IsNotNull( cur3->arb )) {
HXLINE( 904)				cur3->arb->pair = null();
            			}
HXLINE( 905)			cur3->arb = null();
HXLINE( 906)			{
HXLINE( 907)				 ::zpp_nape::space::ZPP_AABBPair o1 = cur3;
HXLINE( 916)				{
HXLINE( 916)					o1->n1 = (o1->n2 = null());
HXDLIN( 916)					o1->sleeping = false;
            				}
HXLINE( 917)				o1->next = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE( 918)				::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 924)		{
HXLINE( 925)			 ::zpp_nape::space::ZPP_AABBNode o2 = node;
HXLINE( 934)			{
HXLINE( 934)				o2->height = -1;
HXDLIN( 934)				{
HXLINE( 934)					 ::zpp_nape::geom::ZPP_AABB o3 = o2->aabb;
HXDLIN( 934)					{
HXLINE( 934)						if (hx::IsNotNull( o3->outer )) {
HXLINE( 934)							o3->outer->zpp_inner = null();
HXDLIN( 934)							o3->outer = null();
            						}
HXDLIN( 934)						o3->wrap_min = (o3->wrap_max = null());
HXDLIN( 934)						o3->_invalidate = null();
HXDLIN( 934)						o3->_validate = null();
            					}
HXDLIN( 934)					o3->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 934)					::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o3;
            				}
HXDLIN( 934)				o2->child1 = (o2->child2 = (o2->parent = null()));
HXDLIN( 934)				o2->next = null();
HXDLIN( 934)				o2->snext = null();
HXDLIN( 934)				o2->mnext = null();
            			}
HXLINE( 935)			o2->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXLINE( 936)			::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DynAABBPhase_obj,__remove,(void))

void ZPP_DynAABBPhase_obj::_hx___sync( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_bef38b12d532b2cb_944___sync)
HXLINE( 953)		 ::zpp_nape::space::ZPP_AABBNode node = shape->node;
HXLINE( 962)		if (!(node->synced)) {
HXLINE( 963)			if (!(this->space->continuous)) {
HXLINE( 963)				if (shape->zip_aabb) {
HXLINE( 963)					if (hx::IsNotNull( shape->body )) {
HXLINE( 963)						shape->zip_aabb = false;
HXDLIN( 963)						if ((shape->type == 0)) {
HXLINE( 963)							 ::zpp_nape::shape::ZPP_Circle _this = shape->circle;
HXDLIN( 963)							if (_this->zip_worldCOM) {
HXLINE( 963)								if (hx::IsNotNull( _this->body )) {
HXLINE( 963)									_this->zip_worldCOM = false;
HXDLIN( 963)									if (_this->zip_localCOM) {
HXLINE( 963)										_this->zip_localCOM = false;
HXDLIN( 963)										if ((_this->type == 1)) {
HXLINE( 963)											 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN( 963)											if (hx::IsNull( _this1->lverts->next )) {
HXLINE( 963)												HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            											}
HXDLIN( 963)											if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE( 963)												_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 963)												_this1->localCOMy = _this1->lverts->next->y;
            											}
            											else {
HXLINE( 963)												if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE( 963)													{
HXLINE( 963)														_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 963)														_this1->localCOMy = _this1->lverts->next->y;
            													}
HXDLIN( 963)													{
HXLINE( 963)														Float t = ((Float)1.0);
HXDLIN( 963)														 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN( 963)														_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN( 963)														 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN( 963)														_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            													}
HXDLIN( 963)													{
HXLINE( 963)														Float t1 = ((Float)0.5);
HXDLIN( 963)														 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN( 963)														_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN( 963)														 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN( 963)														_this5->localCOMy = (_this5->localCOMy * t1);
            													}
            												}
            												else {
HXLINE( 963)													{
HXLINE( 963)														_this1->localCOMx = ( (Float)(0) );
HXDLIN( 963)														_this1->localCOMy = ( (Float)(0) );
            													}
HXDLIN( 963)													Float area = ((Float)0.0);
HXDLIN( 963)													{
HXLINE( 963)														 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN( 963)														 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 963)														cx_ite = cx_ite->next;
HXDLIN( 963)														 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 963)														cx_ite = cx_ite->next;
HXDLIN( 963)														while(hx::IsNotNull( cx_ite )){
HXLINE( 963)															 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 963)															{
HXLINE( 963)																area = (area + (v->x * (w->y - u->y)));
HXDLIN( 963)																Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 963)																 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN( 963)																_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 963)																 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN( 963)																_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            															}
HXDLIN( 963)															u = v;
HXDLIN( 963)															v = w;
HXDLIN( 963)															cx_ite = cx_ite->next;
            														}
HXDLIN( 963)														cx_ite = _this1->lverts->next;
HXDLIN( 963)														 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 963)														{
HXLINE( 963)															area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 963)															Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 963)															 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN( 963)															_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 963)															 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN( 963)															_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            														}
HXDLIN( 963)														u = v;
HXDLIN( 963)														v = w1;
HXDLIN( 963)														cx_ite = cx_ite->next;
HXDLIN( 963)														 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 963)														{
HXLINE( 963)															area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 963)															Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 963)															 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN( 963)															_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 963)															 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN( 963)															_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            														}
            													}
HXDLIN( 963)													area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 963)													{
HXLINE( 963)														Float t2 = area;
HXDLIN( 963)														 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN( 963)														_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN( 963)														 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN( 963)														_this13->localCOMy = (_this13->localCOMy * t2);
            													}
            												}
            											}
            										}
HXDLIN( 963)										if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE( 963)											_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN( 963)											_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            										}
            									}
HXDLIN( 963)									{
HXLINE( 963)										 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN( 963)										if (_this14->zip_axis) {
HXLINE( 963)											_this14->zip_axis = false;
HXDLIN( 963)											{
HXLINE( 963)												_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN( 963)												_this14->axisy = ::Math_obj::cos(_this14->rot);
            											}
            										}
            									}
HXDLIN( 963)									{
HXLINE( 963)										_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 963)										_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            									}
            								}
            							}
HXDLIN( 963)							Float rx = _this->radius;
HXDLIN( 963)							Float ry = _this->radius;
HXDLIN( 963)							{
HXLINE( 963)								_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN( 963)								_this->aabb->miny = (_this->worldCOMy - ry);
            							}
HXDLIN( 963)							{
HXLINE( 963)								_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN( 963)								_this->aabb->maxy = (_this->worldCOMy + ry);
            							}
            						}
            						else {
HXLINE( 963)							 ::zpp_nape::shape::ZPP_Polygon _this15 = shape->polygon;
HXDLIN( 963)							if (_this15->zip_gverts) {
HXLINE( 963)								if (hx::IsNotNull( _this15->body )) {
HXLINE( 963)									_this15->zip_gverts = false;
HXDLIN( 963)									_this15->validate_lverts();
HXDLIN( 963)									{
HXLINE( 963)										 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN( 963)										if (_this16->zip_axis) {
HXLINE( 963)											_this16->zip_axis = false;
HXDLIN( 963)											{
HXLINE( 963)												_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN( 963)												_this16->axisy = ::Math_obj::cos(_this16->rot);
            											}
            										}
            									}
HXDLIN( 963)									 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN( 963)									{
HXLINE( 963)										 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN( 963)										while(hx::IsNotNull( cx_ite1 )){
HXLINE( 963)											 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN( 963)											{
HXLINE( 963)												 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 963)												li = li->next;
HXDLIN( 963)												{
HXLINE( 963)													g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN( 963)													g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            												}
            											}
HXDLIN( 963)											cx_ite1 = cx_ite1->next;
            										}
            									}
            								}
            							}
HXDLIN( 963)							if (hx::IsNull( _this15->lverts->next )) {
HXLINE( 963)								HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            							}
HXDLIN( 963)							 ::zpp_nape::geom::ZPP_Vec2 p0 = _this15->gverts->next;
HXDLIN( 963)							{
HXLINE( 963)								_this15->aabb->minx = p0->x;
HXDLIN( 963)								_this15->aabb->miny = p0->y;
            							}
HXDLIN( 963)							{
HXLINE( 963)								_this15->aabb->maxx = p0->x;
HXDLIN( 963)								_this15->aabb->maxy = p0->y;
            							}
HXDLIN( 963)							{
HXLINE( 963)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next->next;
HXDLIN( 963)								while(hx::IsNotNull( cx_ite2 )){
HXLINE( 963)									 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN( 963)									{
HXLINE( 963)										if ((p->x < _this15->aabb->minx)) {
HXLINE( 963)											_this15->aabb->minx = p->x;
            										}
HXDLIN( 963)										if ((p->x > _this15->aabb->maxx)) {
HXLINE( 963)											_this15->aabb->maxx = p->x;
            										}
HXDLIN( 963)										if ((p->y < _this15->aabb->miny)) {
HXLINE( 963)											_this15->aabb->miny = p->y;
            										}
HXDLIN( 963)										if ((p->y > _this15->aabb->maxy)) {
HXLINE( 963)											_this15->aabb->maxy = p->y;
            										}
            									}
HXDLIN( 963)									cx_ite2 = cx_ite2->next;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 964)			bool sync;
HXDLIN( 964)			bool sync1;
HXDLIN( 964)			if ((shape->body->type == 1)) {
HXLINE( 964)				sync1 = false;
            			}
            			else {
HXLINE( 964)				sync1 = !(shape->body->component->sleeping);
            			}
HXDLIN( 964)			if ((node->dyn == sync1)) {
HXLINE( 964)				 ::zpp_nape::geom::ZPP_AABB _this17 = node->aabb;
HXDLIN( 964)				 ::zpp_nape::geom::ZPP_AABB x = shape->aabb;
HXDLIN( 964)				bool sync2;
HXDLIN( 964)				bool sync3;
HXDLIN( 964)				bool sync4;
HXDLIN( 964)				if ((x->minx >= _this17->minx)) {
HXLINE( 964)					sync4 = (x->miny >= _this17->miny);
            				}
            				else {
HXLINE( 964)					sync4 = false;
            				}
HXDLIN( 964)				if (sync4) {
HXLINE( 964)					sync3 = (x->maxx <= _this17->maxx);
            				}
            				else {
HXLINE( 964)					sync3 = false;
            				}
HXDLIN( 964)				if (sync3) {
HXLINE( 964)					sync2 = (x->maxy <= _this17->maxy);
            				}
            				else {
HXLINE( 964)					sync2 = false;
            				}
HXDLIN( 964)				sync = !(sync2);
            			}
            			else {
HXLINE( 964)				sync = true;
            			}
HXLINE( 965)			if (sync) {
HXLINE( 968)				node->synced = true;
HXLINE( 969)				{
HXLINE( 978)					node->snext = this->syncs;
HXLINE( 979)					this->syncs = node;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DynAABBPhase_obj,_hx___sync,(void))

void ZPP_DynAABBPhase_obj::sync_broadphase(){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_986_sync_broadphase)
HXLINE( 987)		this->space->validation();
HXLINE( 988)		if (hx::IsNotNull( this->syncs )) {
HXLINE( 989)			if (hx::IsNull( this->moves )) {
HXLINE( 990)				 ::zpp_nape::space::ZPP_AABBNode node = this->syncs;
HXLINE( 991)				while(hx::IsNotNull( node )){
HXLINE( 992)					{
HXLINE( 993)						 ::zpp_nape::shape::ZPP_Shape shape = node->shape;
HXLINE(1010)						if (!(node->first_sync)) {
HXLINE(1011)							 ::zpp_nape::space::ZPP_AABBTree tree;
HXDLIN(1011)							if (node->dyn) {
HXLINE(1011)								tree = this->dtree;
            							}
            							else {
HXLINE(1011)								tree = this->stree;
            							}
HXLINE(1012)							if (hx::IsEq( node,tree->root )) {
HXLINE(1012)								tree->root = null();
            							}
            							else {
HXLINE(1012)								 ::zpp_nape::space::ZPP_AABBNode parent = node->parent;
HXDLIN(1012)								 ::zpp_nape::space::ZPP_AABBNode gparent = parent->parent;
HXDLIN(1012)								 ::zpp_nape::space::ZPP_AABBNode sibling;
HXDLIN(1012)								if (hx::IsEq( parent->child1,node )) {
HXLINE(1012)									sibling = parent->child2;
            								}
            								else {
HXLINE(1012)									sibling = parent->child1;
            								}
HXDLIN(1012)								if (hx::IsNotNull( gparent )) {
HXLINE(1012)									if (hx::IsEq( gparent->child1,parent )) {
HXLINE(1012)										gparent->child1 = sibling;
            									}
            									else {
HXLINE(1012)										gparent->child2 = sibling;
            									}
HXDLIN(1012)									sibling->parent = gparent;
HXDLIN(1012)									{
HXLINE(1012)										 ::zpp_nape::space::ZPP_AABBNode o = parent;
HXDLIN(1012)										{
HXLINE(1012)											o->height = -1;
HXDLIN(1012)											{
HXLINE(1012)												 ::zpp_nape::geom::ZPP_AABB o1 = o->aabb;
HXDLIN(1012)												{
HXLINE(1012)													if (hx::IsNotNull( o1->outer )) {
HXLINE(1012)														o1->outer->zpp_inner = null();
HXDLIN(1012)														o1->outer = null();
            													}
HXDLIN(1012)													o1->wrap_min = (o1->wrap_max = null());
HXDLIN(1012)													o1->_invalidate = null();
HXDLIN(1012)													o1->_validate = null();
            												}
HXDLIN(1012)												o1->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1012)												::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o1;
            											}
HXDLIN(1012)											o->child1 = (o->child2 = (o->parent = null()));
HXDLIN(1012)											o->next = null();
HXDLIN(1012)											o->snext = null();
HXDLIN(1012)											o->mnext = null();
            										}
HXDLIN(1012)										o->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1012)										::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o;
            									}
HXDLIN(1012)									 ::zpp_nape::space::ZPP_AABBNode node1 = gparent;
HXDLIN(1012)									while(hx::IsNotNull( node1 )){
HXLINE(1012)										bool node2;
HXDLIN(1012)										if (hx::IsNotNull( node1->child1 )) {
HXLINE(1012)											node2 = (node1->height < 2);
            										}
            										else {
HXLINE(1012)											node2 = true;
            										}
HXDLIN(1012)										if (node2) {
HXLINE(1012)											node1 = node1;
            										}
            										else {
HXLINE(1012)											 ::zpp_nape::space::ZPP_AABBNode b = node1->child1;
HXDLIN(1012)											 ::zpp_nape::space::ZPP_AABBNode c = node1->child2;
HXDLIN(1012)											int balance = (c->height - b->height);
HXDLIN(1012)											if ((balance > 1)) {
HXLINE(1012)												 ::zpp_nape::space::ZPP_AABBNode f = c->child1;
HXDLIN(1012)												 ::zpp_nape::space::ZPP_AABBNode g = c->child2;
HXDLIN(1012)												c->child1 = node1;
HXDLIN(1012)												c->parent = node1->parent;
HXDLIN(1012)												node1->parent = c;
HXDLIN(1012)												if (hx::IsNotNull( c->parent )) {
HXLINE(1012)													if (hx::IsEq( c->parent->child1,node1 )) {
HXLINE(1012)														c->parent->child1 = c;
            													}
            													else {
HXLINE(1012)														c->parent->child2 = c;
            													}
            												}
            												else {
HXLINE(1012)													tree->root = c;
            												}
HXDLIN(1012)												if ((f->height > g->height)) {
HXLINE(1012)													c->child2 = f;
HXDLIN(1012)													node1->child2 = g;
HXDLIN(1012)													g->parent = node1;
HXDLIN(1012)													{
HXLINE(1012)														 ::zpp_nape::geom::ZPP_AABB _this = node1->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB a = b->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB b1 = g->aabb;
HXDLIN(1012)														Float node3;
HXDLIN(1012)														if ((a->minx < b1->minx)) {
HXLINE(1012)															node3 = a->minx;
            														}
            														else {
HXLINE(1012)															node3 = b1->minx;
            														}
HXDLIN(1012)														_this->minx = node3;
HXDLIN(1012)														Float node4;
HXDLIN(1012)														if ((a->miny < b1->miny)) {
HXLINE(1012)															node4 = a->miny;
            														}
            														else {
HXLINE(1012)															node4 = b1->miny;
            														}
HXDLIN(1012)														_this->miny = node4;
HXDLIN(1012)														Float node5;
HXDLIN(1012)														if ((a->maxx > b1->maxx)) {
HXLINE(1012)															node5 = a->maxx;
            														}
            														else {
HXLINE(1012)															node5 = b1->maxx;
            														}
HXDLIN(1012)														_this->maxx = node5;
HXDLIN(1012)														Float node6;
HXDLIN(1012)														if ((a->maxy > b1->maxy)) {
HXLINE(1012)															node6 = a->maxy;
            														}
            														else {
HXLINE(1012)															node6 = b1->maxy;
            														}
HXDLIN(1012)														_this->maxy = node6;
            													}
HXDLIN(1012)													{
HXLINE(1012)														 ::zpp_nape::geom::ZPP_AABB _this1 = c->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB a1 = node1->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB b2 = f->aabb;
HXDLIN(1012)														Float node7;
HXDLIN(1012)														if ((a1->minx < b2->minx)) {
HXLINE(1012)															node7 = a1->minx;
            														}
            														else {
HXLINE(1012)															node7 = b2->minx;
            														}
HXDLIN(1012)														_this1->minx = node7;
HXDLIN(1012)														Float node8;
HXDLIN(1012)														if ((a1->miny < b2->miny)) {
HXLINE(1012)															node8 = a1->miny;
            														}
            														else {
HXLINE(1012)															node8 = b2->miny;
            														}
HXDLIN(1012)														_this1->miny = node8;
HXDLIN(1012)														Float node9;
HXDLIN(1012)														if ((a1->maxx > b2->maxx)) {
HXLINE(1012)															node9 = a1->maxx;
            														}
            														else {
HXLINE(1012)															node9 = b2->maxx;
            														}
HXDLIN(1012)														_this1->maxx = node9;
HXDLIN(1012)														Float node10;
HXDLIN(1012)														if ((a1->maxy > b2->maxy)) {
HXLINE(1012)															node10 = a1->maxy;
            														}
            														else {
HXLINE(1012)															node10 = b2->maxy;
            														}
HXDLIN(1012)														_this1->maxy = node10;
            													}
HXDLIN(1012)													int x = b->height;
HXDLIN(1012)													int y = g->height;
HXDLIN(1012)													int node11;
HXDLIN(1012)													if ((x > y)) {
HXLINE(1012)														node11 = x;
            													}
            													else {
HXLINE(1012)														node11 = y;
            													}
HXDLIN(1012)													node1->height = (1 + node11);
HXDLIN(1012)													int x1 = node1->height;
HXDLIN(1012)													int y1 = f->height;
HXDLIN(1012)													int node12;
HXDLIN(1012)													if ((x1 > y1)) {
HXLINE(1012)														node12 = x1;
            													}
            													else {
HXLINE(1012)														node12 = y1;
            													}
HXDLIN(1012)													c->height = (1 + node12);
            												}
            												else {
HXLINE(1012)													c->child2 = g;
HXDLIN(1012)													node1->child2 = f;
HXDLIN(1012)													f->parent = node1;
HXDLIN(1012)													{
HXLINE(1012)														 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB a2 = b->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB b3 = f->aabb;
HXDLIN(1012)														Float node13;
HXDLIN(1012)														if ((a2->minx < b3->minx)) {
HXLINE(1012)															node13 = a2->minx;
            														}
            														else {
HXLINE(1012)															node13 = b3->minx;
            														}
HXDLIN(1012)														_this2->minx = node13;
HXDLIN(1012)														Float node14;
HXDLIN(1012)														if ((a2->miny < b3->miny)) {
HXLINE(1012)															node14 = a2->miny;
            														}
            														else {
HXLINE(1012)															node14 = b3->miny;
            														}
HXDLIN(1012)														_this2->miny = node14;
HXDLIN(1012)														Float node15;
HXDLIN(1012)														if ((a2->maxx > b3->maxx)) {
HXLINE(1012)															node15 = a2->maxx;
            														}
            														else {
HXLINE(1012)															node15 = b3->maxx;
            														}
HXDLIN(1012)														_this2->maxx = node15;
HXDLIN(1012)														Float node16;
HXDLIN(1012)														if ((a2->maxy > b3->maxy)) {
HXLINE(1012)															node16 = a2->maxy;
            														}
            														else {
HXLINE(1012)															node16 = b3->maxy;
            														}
HXDLIN(1012)														_this2->maxy = node16;
            													}
HXDLIN(1012)													{
HXLINE(1012)														 ::zpp_nape::geom::ZPP_AABB _this3 = c->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB a3 = node1->aabb;
HXDLIN(1012)														 ::zpp_nape::geom::ZPP_AABB b4 = g->aabb;
HXDLIN(1012)														Float node17;
HXDLIN(1012)														if ((a3->minx < b4->minx)) {
HXLINE(1012)															node17 = a3->minx;
            														}
            														else {
HXLINE(1012)															node17 = b4->minx;
            														}
HXDLIN(1012)														_this3->minx = node17;
HXDLIN(1012)														Float node18;
HXDLIN(1012)														if ((a3->miny < b4->miny)) {
HXLINE(1012)															node18 = a3->miny;
            														}
            														else {
HXLINE(1012)															node18 = b4->miny;
            														}
HXDLIN(1012)														_this3->miny = node18;
HXDLIN(1012)														Float node19;
HXDLIN(1012)														if ((a3->maxx > b4->maxx)) {
HXLINE(1012)															node19 = a3->maxx;
            														}
            														else {
HXLINE(1012)															node19 = b4->maxx;
            														}
HXDLIN(1012)														_this3->maxx = node19;
HXDLIN(1012)														Float node20;
HXDLIN(1012)														if ((a3->maxy > b4->maxy)) {
HXLINE(1012)															node20 = a3->maxy;
            														}
            														else {
HXLINE(1012)															node20 = b4->maxy;
            														}
HXDLIN(1012)														_this3->maxy = node20;
            													}
HXDLIN(1012)													int x2 = b->height;
HXDLIN(1012)													int y2 = f->height;
HXDLIN(1012)													int node21;
HXDLIN(1012)													if ((x2 > y2)) {
HXLINE(1012)														node21 = x2;
            													}
            													else {
HXLINE(1012)														node21 = y2;
            													}
HXDLIN(1012)													node1->height = (1 + node21);
HXDLIN(1012)													int x3 = node1->height;
HXDLIN(1012)													int y3 = g->height;
HXDLIN(1012)													int node22;
HXDLIN(1012)													if ((x3 > y3)) {
HXLINE(1012)														node22 = x3;
            													}
            													else {
HXLINE(1012)														node22 = y3;
            													}
HXDLIN(1012)													c->height = (1 + node22);
            												}
HXDLIN(1012)												node1 = c;
            											}
            											else {
HXLINE(1012)												if ((balance < -1)) {
HXLINE(1012)													 ::zpp_nape::space::ZPP_AABBNode f1 = b->child1;
HXDLIN(1012)													 ::zpp_nape::space::ZPP_AABBNode g1 = b->child2;
HXDLIN(1012)													b->child1 = node1;
HXDLIN(1012)													b->parent = node1->parent;
HXDLIN(1012)													node1->parent = b;
HXDLIN(1012)													if (hx::IsNotNull( b->parent )) {
HXLINE(1012)														if (hx::IsEq( b->parent->child1,node1 )) {
HXLINE(1012)															b->parent->child1 = b;
            														}
            														else {
HXLINE(1012)															b->parent->child2 = b;
            														}
            													}
            													else {
HXLINE(1012)														tree->root = b;
            													}
HXDLIN(1012)													if ((f1->height > g1->height)) {
HXLINE(1012)														b->child2 = f1;
HXDLIN(1012)														node1->child1 = g1;
HXDLIN(1012)														g1->parent = node1;
HXDLIN(1012)														{
HXLINE(1012)															 ::zpp_nape::geom::ZPP_AABB _this4 = node1->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB a4 = c->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB b5 = g1->aabb;
HXDLIN(1012)															Float node23;
HXDLIN(1012)															if ((a4->minx < b5->minx)) {
HXLINE(1012)																node23 = a4->minx;
            															}
            															else {
HXLINE(1012)																node23 = b5->minx;
            															}
HXDLIN(1012)															_this4->minx = node23;
HXDLIN(1012)															Float node24;
HXDLIN(1012)															if ((a4->miny < b5->miny)) {
HXLINE(1012)																node24 = a4->miny;
            															}
            															else {
HXLINE(1012)																node24 = b5->miny;
            															}
HXDLIN(1012)															_this4->miny = node24;
HXDLIN(1012)															Float node25;
HXDLIN(1012)															if ((a4->maxx > b5->maxx)) {
HXLINE(1012)																node25 = a4->maxx;
            															}
            															else {
HXLINE(1012)																node25 = b5->maxx;
            															}
HXDLIN(1012)															_this4->maxx = node25;
HXDLIN(1012)															Float node26;
HXDLIN(1012)															if ((a4->maxy > b5->maxy)) {
HXLINE(1012)																node26 = a4->maxy;
            															}
            															else {
HXLINE(1012)																node26 = b5->maxy;
            															}
HXDLIN(1012)															_this4->maxy = node26;
            														}
HXDLIN(1012)														{
HXLINE(1012)															 ::zpp_nape::geom::ZPP_AABB _this5 = b->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB a5 = node1->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB b6 = f1->aabb;
HXDLIN(1012)															Float node27;
HXDLIN(1012)															if ((a5->minx < b6->minx)) {
HXLINE(1012)																node27 = a5->minx;
            															}
            															else {
HXLINE(1012)																node27 = b6->minx;
            															}
HXDLIN(1012)															_this5->minx = node27;
HXDLIN(1012)															Float node28;
HXDLIN(1012)															if ((a5->miny < b6->miny)) {
HXLINE(1012)																node28 = a5->miny;
            															}
            															else {
HXLINE(1012)																node28 = b6->miny;
            															}
HXDLIN(1012)															_this5->miny = node28;
HXDLIN(1012)															Float node29;
HXDLIN(1012)															if ((a5->maxx > b6->maxx)) {
HXLINE(1012)																node29 = a5->maxx;
            															}
            															else {
HXLINE(1012)																node29 = b6->maxx;
            															}
HXDLIN(1012)															_this5->maxx = node29;
HXDLIN(1012)															Float node30;
HXDLIN(1012)															if ((a5->maxy > b6->maxy)) {
HXLINE(1012)																node30 = a5->maxy;
            															}
            															else {
HXLINE(1012)																node30 = b6->maxy;
            															}
HXDLIN(1012)															_this5->maxy = node30;
            														}
HXDLIN(1012)														int x4 = c->height;
HXDLIN(1012)														int y4 = g1->height;
HXDLIN(1012)														int node31;
HXDLIN(1012)														if ((x4 > y4)) {
HXLINE(1012)															node31 = x4;
            														}
            														else {
HXLINE(1012)															node31 = y4;
            														}
HXDLIN(1012)														node1->height = (1 + node31);
HXDLIN(1012)														int x5 = node1->height;
HXDLIN(1012)														int y5 = f1->height;
HXDLIN(1012)														int node32;
HXDLIN(1012)														if ((x5 > y5)) {
HXLINE(1012)															node32 = x5;
            														}
            														else {
HXLINE(1012)															node32 = y5;
            														}
HXDLIN(1012)														b->height = (1 + node32);
            													}
            													else {
HXLINE(1012)														b->child2 = g1;
HXDLIN(1012)														node1->child1 = f1;
HXDLIN(1012)														f1->parent = node1;
HXDLIN(1012)														{
HXLINE(1012)															 ::zpp_nape::geom::ZPP_AABB _this6 = node1->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB a6 = c->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB b7 = f1->aabb;
HXDLIN(1012)															Float node33;
HXDLIN(1012)															if ((a6->minx < b7->minx)) {
HXLINE(1012)																node33 = a6->minx;
            															}
            															else {
HXLINE(1012)																node33 = b7->minx;
            															}
HXDLIN(1012)															_this6->minx = node33;
HXDLIN(1012)															Float node34;
HXDLIN(1012)															if ((a6->miny < b7->miny)) {
HXLINE(1012)																node34 = a6->miny;
            															}
            															else {
HXLINE(1012)																node34 = b7->miny;
            															}
HXDLIN(1012)															_this6->miny = node34;
HXDLIN(1012)															Float node35;
HXDLIN(1012)															if ((a6->maxx > b7->maxx)) {
HXLINE(1012)																node35 = a6->maxx;
            															}
            															else {
HXLINE(1012)																node35 = b7->maxx;
            															}
HXDLIN(1012)															_this6->maxx = node35;
HXDLIN(1012)															Float node36;
HXDLIN(1012)															if ((a6->maxy > b7->maxy)) {
HXLINE(1012)																node36 = a6->maxy;
            															}
            															else {
HXLINE(1012)																node36 = b7->maxy;
            															}
HXDLIN(1012)															_this6->maxy = node36;
            														}
HXDLIN(1012)														{
HXLINE(1012)															 ::zpp_nape::geom::ZPP_AABB _this7 = b->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB a7 = node1->aabb;
HXDLIN(1012)															 ::zpp_nape::geom::ZPP_AABB b8 = g1->aabb;
HXDLIN(1012)															Float node37;
HXDLIN(1012)															if ((a7->minx < b8->minx)) {
HXLINE(1012)																node37 = a7->minx;
            															}
            															else {
HXLINE(1012)																node37 = b8->minx;
            															}
HXDLIN(1012)															_this7->minx = node37;
HXDLIN(1012)															Float node38;
HXDLIN(1012)															if ((a7->miny < b8->miny)) {
HXLINE(1012)																node38 = a7->miny;
            															}
            															else {
HXLINE(1012)																node38 = b8->miny;
            															}
HXDLIN(1012)															_this7->miny = node38;
HXDLIN(1012)															Float node39;
HXDLIN(1012)															if ((a7->maxx > b8->maxx)) {
HXLINE(1012)																node39 = a7->maxx;
            															}
            															else {
HXLINE(1012)																node39 = b8->maxx;
            															}
HXDLIN(1012)															_this7->maxx = node39;
HXDLIN(1012)															Float node40;
HXDLIN(1012)															if ((a7->maxy > b8->maxy)) {
HXLINE(1012)																node40 = a7->maxy;
            															}
            															else {
HXLINE(1012)																node40 = b8->maxy;
            															}
HXDLIN(1012)															_this7->maxy = node40;
            														}
HXDLIN(1012)														int x6 = c->height;
HXDLIN(1012)														int y6 = f1->height;
HXDLIN(1012)														int node41;
HXDLIN(1012)														if ((x6 > y6)) {
HXLINE(1012)															node41 = x6;
            														}
            														else {
HXLINE(1012)															node41 = y6;
            														}
HXDLIN(1012)														node1->height = (1 + node41);
HXDLIN(1012)														int x7 = node1->height;
HXDLIN(1012)														int y7 = g1->height;
HXDLIN(1012)														int node42;
HXDLIN(1012)														if ((x7 > y7)) {
HXLINE(1012)															node42 = x7;
            														}
            														else {
HXLINE(1012)															node42 = y7;
            														}
HXDLIN(1012)														b->height = (1 + node42);
            													}
HXDLIN(1012)													node1 = b;
            												}
            												else {
HXLINE(1012)													node1 = node1;
            												}
            											}
            										}
HXDLIN(1012)										 ::zpp_nape::space::ZPP_AABBNode child1 = node1->child1;
HXDLIN(1012)										 ::zpp_nape::space::ZPP_AABBNode child2 = node1->child2;
HXDLIN(1012)										{
HXLINE(1012)											 ::zpp_nape::geom::ZPP_AABB _this8 = node1->aabb;
HXDLIN(1012)											 ::zpp_nape::geom::ZPP_AABB a8 = child1->aabb;
HXDLIN(1012)											 ::zpp_nape::geom::ZPP_AABB b9 = child2->aabb;
HXDLIN(1012)											Float _hx_tmp;
HXDLIN(1012)											if ((a8->minx < b9->minx)) {
HXLINE(1012)												_hx_tmp = a8->minx;
            											}
            											else {
HXLINE(1012)												_hx_tmp = b9->minx;
            											}
HXDLIN(1012)											_this8->minx = _hx_tmp;
HXDLIN(1012)											Float _hx_tmp1;
HXDLIN(1012)											if ((a8->miny < b9->miny)) {
HXLINE(1012)												_hx_tmp1 = a8->miny;
            											}
            											else {
HXLINE(1012)												_hx_tmp1 = b9->miny;
            											}
HXDLIN(1012)											_this8->miny = _hx_tmp1;
HXDLIN(1012)											Float _hx_tmp2;
HXDLIN(1012)											if ((a8->maxx > b9->maxx)) {
HXLINE(1012)												_hx_tmp2 = a8->maxx;
            											}
            											else {
HXLINE(1012)												_hx_tmp2 = b9->maxx;
            											}
HXDLIN(1012)											_this8->maxx = _hx_tmp2;
HXDLIN(1012)											Float _hx_tmp3;
HXDLIN(1012)											if ((a8->maxy > b9->maxy)) {
HXLINE(1012)												_hx_tmp3 = a8->maxy;
            											}
            											else {
HXLINE(1012)												_hx_tmp3 = b9->maxy;
            											}
HXDLIN(1012)											_this8->maxy = _hx_tmp3;
            										}
HXDLIN(1012)										int x8 = child1->height;
HXDLIN(1012)										int y8 = child2->height;
HXDLIN(1012)										int _hx_tmp4;
HXDLIN(1012)										if ((x8 > y8)) {
HXLINE(1012)											_hx_tmp4 = x8;
            										}
            										else {
HXLINE(1012)											_hx_tmp4 = y8;
            										}
HXDLIN(1012)										node1->height = (1 + _hx_tmp4);
HXDLIN(1012)										node1 = node1->parent;
            									}
            								}
            								else {
HXLINE(1012)									tree->root = sibling;
HXDLIN(1012)									sibling->parent = null();
HXDLIN(1012)									{
HXLINE(1012)										 ::zpp_nape::space::ZPP_AABBNode o2 = parent;
HXDLIN(1012)										{
HXLINE(1012)											o2->height = -1;
HXDLIN(1012)											{
HXLINE(1012)												 ::zpp_nape::geom::ZPP_AABB o3 = o2->aabb;
HXDLIN(1012)												{
HXLINE(1012)													if (hx::IsNotNull( o3->outer )) {
HXLINE(1012)														o3->outer->zpp_inner = null();
HXDLIN(1012)														o3->outer = null();
            													}
HXDLIN(1012)													o3->wrap_min = (o3->wrap_max = null());
HXDLIN(1012)													o3->_invalidate = null();
HXDLIN(1012)													o3->_validate = null();
            												}
HXDLIN(1012)												o3->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1012)												::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o3;
            											}
HXDLIN(1012)											o2->child1 = (o2->child2 = (o2->parent = null()));
HXDLIN(1012)											o2->next = null();
HXDLIN(1012)											o2->snext = null();
HXDLIN(1012)											o2->mnext = null();
            										}
HXDLIN(1012)										o2->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1012)										::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o2;
            									}
            								}
            							}
            						}
            						else {
HXLINE(1014)							node->first_sync = false;
            						}
HXLINE(1015)						 ::zpp_nape::geom::ZPP_AABB aabb = node->aabb;
HXLINE(1016)						if (!(this->space->continuous)) {
HXLINE(1016)							if (shape->zip_aabb) {
HXLINE(1016)								if (hx::IsNotNull( shape->body )) {
HXLINE(1016)									shape->zip_aabb = false;
HXDLIN(1016)									if ((shape->type == 0)) {
HXLINE(1016)										 ::zpp_nape::shape::ZPP_Circle _this9 = shape->circle;
HXDLIN(1016)										if (_this9->zip_worldCOM) {
HXLINE(1016)											if (hx::IsNotNull( _this9->body )) {
HXLINE(1016)												_this9->zip_worldCOM = false;
HXDLIN(1016)												if (_this9->zip_localCOM) {
HXLINE(1016)													_this9->zip_localCOM = false;
HXDLIN(1016)													if ((_this9->type == 1)) {
HXLINE(1016)														 ::zpp_nape::shape::ZPP_Polygon _this10 = _this9->polygon;
HXDLIN(1016)														if (hx::IsNull( _this10->lverts->next )) {
HXLINE(1016)															HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            														}
HXDLIN(1016)														if (hx::IsNull( _this10->lverts->next->next )) {
HXLINE(1016)															_this10->localCOMx = _this10->lverts->next->x;
HXDLIN(1016)															_this10->localCOMy = _this10->lverts->next->y;
            														}
            														else {
HXLINE(1016)															if (hx::IsNull( _this10->lverts->next->next->next )) {
HXLINE(1016)																{
HXLINE(1016)																	_this10->localCOMx = _this10->lverts->next->x;
HXDLIN(1016)																	_this10->localCOMy = _this10->lverts->next->y;
            																}
HXDLIN(1016)																{
HXLINE(1016)																	Float t = ((Float)1.0);
HXDLIN(1016)																	 ::zpp_nape::shape::ZPP_Polygon _this11 = _this10;
HXDLIN(1016)																	_this11->localCOMx = (_this11->localCOMx + (_this10->lverts->next->next->x * t));
HXDLIN(1016)																	 ::zpp_nape::shape::ZPP_Polygon _this12 = _this10;
HXDLIN(1016)																	_this12->localCOMy = (_this12->localCOMy + (_this10->lverts->next->next->y * t));
            																}
HXDLIN(1016)																{
HXLINE(1016)																	Float t1 = ((Float)0.5);
HXDLIN(1016)																	 ::zpp_nape::shape::ZPP_Polygon _this13 = _this10;
HXDLIN(1016)																	_this13->localCOMx = (_this13->localCOMx * t1);
HXDLIN(1016)																	 ::zpp_nape::shape::ZPP_Polygon _this14 = _this10;
HXDLIN(1016)																	_this14->localCOMy = (_this14->localCOMy * t1);
            																}
            															}
            															else {
HXLINE(1016)																{
HXLINE(1016)																	_this10->localCOMx = ( (Float)(0) );
HXDLIN(1016)																	_this10->localCOMy = ( (Float)(0) );
            																}
HXDLIN(1016)																Float area = ((Float)0.0);
HXDLIN(1016)																{
HXLINE(1016)																	 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this10->lverts->next;
HXDLIN(1016)																	 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(1016)																	cx_ite = cx_ite->next;
HXDLIN(1016)																	 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(1016)																	cx_ite = cx_ite->next;
HXDLIN(1016)																	while(hx::IsNotNull( cx_ite )){
HXLINE(1016)																		 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(1016)																		{
HXLINE(1016)																			area = (area + (v->x * (w->y - u->y)));
HXDLIN(1016)																			Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1016)																			 ::zpp_nape::shape::ZPP_Polygon _this15 = _this10;
HXDLIN(1016)																			_this15->localCOMx = (_this15->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1016)																			 ::zpp_nape::shape::ZPP_Polygon _this16 = _this10;
HXDLIN(1016)																			_this16->localCOMy = (_this16->localCOMy + ((v->y + w->y) * cf));
            																		}
HXDLIN(1016)																		u = v;
HXDLIN(1016)																		v = w;
HXDLIN(1016)																		cx_ite = cx_ite->next;
            																	}
HXDLIN(1016)																	cx_ite = _this10->lverts->next;
HXDLIN(1016)																	 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(1016)																	{
HXLINE(1016)																		area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1016)																		Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1016)																		 ::zpp_nape::shape::ZPP_Polygon _this17 = _this10;
HXDLIN(1016)																		_this17->localCOMx = (_this17->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1016)																		 ::zpp_nape::shape::ZPP_Polygon _this18 = _this10;
HXDLIN(1016)																		_this18->localCOMy = (_this18->localCOMy + ((v->y + w1->y) * cf1));
            																	}
HXDLIN(1016)																	u = v;
HXDLIN(1016)																	v = w1;
HXDLIN(1016)																	cx_ite = cx_ite->next;
HXDLIN(1016)																	 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(1016)																	{
HXLINE(1016)																		area = (area + (v->x * (w2->y - u->y)));
HXDLIN(1016)																		Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(1016)																		 ::zpp_nape::shape::ZPP_Polygon _this19 = _this10;
HXDLIN(1016)																		_this19->localCOMx = (_this19->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(1016)																		 ::zpp_nape::shape::ZPP_Polygon _this20 = _this10;
HXDLIN(1016)																		_this20->localCOMy = (_this20->localCOMy + ((v->y + w2->y) * cf2));
            																	}
            																}
HXDLIN(1016)																area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(1016)																{
HXLINE(1016)																	Float t2 = area;
HXDLIN(1016)																	 ::zpp_nape::shape::ZPP_Polygon _this21 = _this10;
HXDLIN(1016)																	_this21->localCOMx = (_this21->localCOMx * t2);
HXDLIN(1016)																	 ::zpp_nape::shape::ZPP_Polygon _this22 = _this10;
HXDLIN(1016)																	_this22->localCOMy = (_this22->localCOMy * t2);
            																}
            															}
            														}
            													}
HXDLIN(1016)													if (hx::IsNotNull( _this9->wrap_localCOM )) {
HXLINE(1016)														_this9->wrap_localCOM->zpp_inner->x = _this9->localCOMx;
HXDLIN(1016)														_this9->wrap_localCOM->zpp_inner->y = _this9->localCOMy;
            													}
            												}
HXDLIN(1016)												{
HXLINE(1016)													 ::zpp_nape::phys::ZPP_Body _this23 = _this9->body;
HXDLIN(1016)													if (_this23->zip_axis) {
HXLINE(1016)														_this23->zip_axis = false;
HXDLIN(1016)														{
HXLINE(1016)															_this23->axisx = ::Math_obj::sin(_this23->rot);
HXDLIN(1016)															_this23->axisy = ::Math_obj::cos(_this23->rot);
            														}
            													}
            												}
HXDLIN(1016)												{
HXLINE(1016)													_this9->worldCOMx = (_this9->body->posx + ((_this9->body->axisy * _this9->localCOMx) - (_this9->body->axisx * _this9->localCOMy)));
HXDLIN(1016)													_this9->worldCOMy = (_this9->body->posy + ((_this9->localCOMx * _this9->body->axisx) + (_this9->localCOMy * _this9->body->axisy)));
            												}
            											}
            										}
HXDLIN(1016)										Float rx = _this9->radius;
HXDLIN(1016)										Float ry = _this9->radius;
HXDLIN(1016)										{
HXLINE(1016)											_this9->aabb->minx = (_this9->worldCOMx - rx);
HXDLIN(1016)											_this9->aabb->miny = (_this9->worldCOMy - ry);
            										}
HXDLIN(1016)										{
HXLINE(1016)											_this9->aabb->maxx = (_this9->worldCOMx + rx);
HXDLIN(1016)											_this9->aabb->maxy = (_this9->worldCOMy + ry);
            										}
            									}
            									else {
HXLINE(1016)										 ::zpp_nape::shape::ZPP_Polygon _this24 = shape->polygon;
HXDLIN(1016)										if (_this24->zip_gverts) {
HXLINE(1016)											if (hx::IsNotNull( _this24->body )) {
HXLINE(1016)												_this24->zip_gverts = false;
HXDLIN(1016)												_this24->validate_lverts();
HXDLIN(1016)												{
HXLINE(1016)													 ::zpp_nape::phys::ZPP_Body _this25 = _this24->body;
HXDLIN(1016)													if (_this25->zip_axis) {
HXLINE(1016)														_this25->zip_axis = false;
HXDLIN(1016)														{
HXLINE(1016)															_this25->axisx = ::Math_obj::sin(_this25->rot);
HXDLIN(1016)															_this25->axisy = ::Math_obj::cos(_this25->rot);
            														}
            													}
            												}
HXDLIN(1016)												 ::zpp_nape::geom::ZPP_Vec2 li = _this24->lverts->next;
HXDLIN(1016)												{
HXLINE(1016)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this24->gverts->next;
HXDLIN(1016)													while(hx::IsNotNull( cx_ite1 )){
HXLINE(1016)														 ::zpp_nape::geom::ZPP_Vec2 g2 = cx_ite1;
HXDLIN(1016)														{
HXLINE(1016)															 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(1016)															li = li->next;
HXDLIN(1016)															{
HXLINE(1016)																g2->x = (_this24->body->posx + ((_this24->body->axisy * l->x) - (_this24->body->axisx * l->y)));
HXDLIN(1016)																g2->y = (_this24->body->posy + ((l->x * _this24->body->axisx) + (l->y * _this24->body->axisy)));
            															}
            														}
HXDLIN(1016)														cx_ite1 = cx_ite1->next;
            													}
            												}
            											}
            										}
HXDLIN(1016)										if (hx::IsNull( _this24->lverts->next )) {
HXLINE(1016)											HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            										}
HXDLIN(1016)										 ::zpp_nape::geom::ZPP_Vec2 p0 = _this24->gverts->next;
HXDLIN(1016)										{
HXLINE(1016)											_this24->aabb->minx = p0->x;
HXDLIN(1016)											_this24->aabb->miny = p0->y;
            										}
HXDLIN(1016)										{
HXLINE(1016)											_this24->aabb->maxx = p0->x;
HXDLIN(1016)											_this24->aabb->maxy = p0->y;
            										}
HXDLIN(1016)										{
HXLINE(1016)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this24->gverts->next->next;
HXDLIN(1016)											while(hx::IsNotNull( cx_ite2 )){
HXLINE(1016)												 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN(1016)												{
HXLINE(1016)													if ((p->x < _this24->aabb->minx)) {
HXLINE(1016)														_this24->aabb->minx = p->x;
            													}
HXDLIN(1016)													if ((p->x > _this24->aabb->maxx)) {
HXLINE(1016)														_this24->aabb->maxx = p->x;
            													}
HXDLIN(1016)													if ((p->y < _this24->aabb->miny)) {
HXLINE(1016)														_this24->aabb->miny = p->y;
            													}
HXDLIN(1016)													if ((p->y > _this24->aabb->maxy)) {
HXLINE(1016)														_this24->aabb->maxy = p->y;
            													}
            												}
HXDLIN(1016)												cx_ite2 = cx_ite2->next;
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE(1017)						{
HXLINE(1017)							 ::zpp_nape::geom::ZPP_AABB a9 = shape->aabb;
HXDLIN(1017)							aabb->minx = (a9->minx - ((Float)3.0));
HXDLIN(1017)							aabb->miny = (a9->miny - ((Float)3.0));
HXDLIN(1017)							aabb->maxx = (a9->maxx + ((Float)3.0));
HXDLIN(1017)							aabb->maxy = (a9->maxy + ((Float)3.0));
            						}
HXLINE(1018)						 ::zpp_nape::space::ZPP_AABBTree tree1;
HXDLIN(1018)						bool tree2;
HXDLIN(1018)						if ((shape->body->type == 1)) {
HXLINE(1018)							tree2 = false;
            						}
            						else {
HXLINE(1018)							tree2 = !(shape->body->component->sleeping);
            						}
HXDLIN(1018)						if ((node->dyn = tree2)) {
HXLINE(1018)							tree1 = this->dtree;
            						}
            						else {
HXLINE(1018)							tree1 = this->stree;
            						}
HXLINE(1019)						if (hx::IsNull( tree1->root )) {
HXLINE(1019)							tree1->root = node;
HXDLIN(1019)							tree1->root->parent = null();
            						}
            						else {
HXLINE(1019)							 ::zpp_nape::geom::ZPP_AABB leafaabb = node->aabb;
HXDLIN(1019)							 ::zpp_nape::space::ZPP_AABBNode node43 = tree1->root;
HXDLIN(1019)							while(hx::IsNotNull( node43->child1 )){
HXLINE(1019)								 ::zpp_nape::space::ZPP_AABBNode child11 = node43->child1;
HXDLIN(1019)								 ::zpp_nape::space::ZPP_AABBNode child21 = node43->child2;
HXDLIN(1019)								 ::zpp_nape::geom::ZPP_AABB _this26 = node43->aabb;
HXDLIN(1019)								Float area1 = (((_this26->maxx - _this26->minx) + (_this26->maxy - _this26->miny)) * ( (Float)(2) ));
HXDLIN(1019)								{
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this27 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB a10 = node43->aabb;
HXDLIN(1019)									Float _hx_tmp5;
HXDLIN(1019)									if ((a10->minx < leafaabb->minx)) {
HXLINE(1019)										_hx_tmp5 = a10->minx;
            									}
            									else {
HXLINE(1019)										_hx_tmp5 = leafaabb->minx;
            									}
HXDLIN(1019)									_this27->minx = _hx_tmp5;
HXDLIN(1019)									Float _hx_tmp6;
HXDLIN(1019)									if ((a10->miny < leafaabb->miny)) {
HXLINE(1019)										_hx_tmp6 = a10->miny;
            									}
            									else {
HXLINE(1019)										_hx_tmp6 = leafaabb->miny;
            									}
HXDLIN(1019)									_this27->miny = _hx_tmp6;
HXDLIN(1019)									Float _hx_tmp7;
HXDLIN(1019)									if ((a10->maxx > leafaabb->maxx)) {
HXLINE(1019)										_hx_tmp7 = a10->maxx;
            									}
            									else {
HXLINE(1019)										_hx_tmp7 = leafaabb->maxx;
            									}
HXDLIN(1019)									_this27->maxx = _hx_tmp7;
HXDLIN(1019)									Float _hx_tmp8;
HXDLIN(1019)									if ((a10->maxy > leafaabb->maxy)) {
HXLINE(1019)										_hx_tmp8 = a10->maxy;
            									}
            									else {
HXLINE(1019)										_hx_tmp8 = leafaabb->maxy;
            									}
HXDLIN(1019)									_this27->maxy = _hx_tmp8;
            								}
HXDLIN(1019)								 ::zpp_nape::geom::ZPP_AABB _this28 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)								Float carea = (((_this28->maxx - _this28->minx) + (_this28->maxy - _this28->miny)) * ( (Float)(2) ));
HXDLIN(1019)								Float cost = (( (Float)(2) ) * carea);
HXDLIN(1019)								Float icost = (( (Float)(2) ) * (carea - area1));
HXDLIN(1019)								{
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this29 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB b10 = child11->aabb;
HXDLIN(1019)									Float _hx_tmp9;
HXDLIN(1019)									if ((leafaabb->minx < b10->minx)) {
HXLINE(1019)										_hx_tmp9 = leafaabb->minx;
            									}
            									else {
HXLINE(1019)										_hx_tmp9 = b10->minx;
            									}
HXDLIN(1019)									_this29->minx = _hx_tmp9;
HXDLIN(1019)									Float _hx_tmp10;
HXDLIN(1019)									if ((leafaabb->miny < b10->miny)) {
HXLINE(1019)										_hx_tmp10 = leafaabb->miny;
            									}
            									else {
HXLINE(1019)										_hx_tmp10 = b10->miny;
            									}
HXDLIN(1019)									_this29->miny = _hx_tmp10;
HXDLIN(1019)									Float _hx_tmp11;
HXDLIN(1019)									if ((leafaabb->maxx > b10->maxx)) {
HXLINE(1019)										_hx_tmp11 = leafaabb->maxx;
            									}
            									else {
HXLINE(1019)										_hx_tmp11 = b10->maxx;
            									}
HXDLIN(1019)									_this29->maxx = _hx_tmp11;
HXDLIN(1019)									Float _hx_tmp12;
HXDLIN(1019)									if ((leafaabb->maxy > b10->maxy)) {
HXLINE(1019)										_hx_tmp12 = leafaabb->maxy;
            									}
            									else {
HXLINE(1019)										_hx_tmp12 = b10->maxy;
            									}
HXDLIN(1019)									_this29->maxy = _hx_tmp12;
            								}
HXDLIN(1019)								Float cost1;
HXDLIN(1019)								if (hx::IsNull( child11->child1 )) {
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this30 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									cost1 = ((((_this30->maxx - _this30->minx) + (_this30->maxy - _this30->miny)) * ( (Float)(2) )) + icost);
            								}
            								else {
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this31 = child11->aabb;
HXDLIN(1019)									Float oarea = (((_this31->maxx - _this31->minx) + (_this31->maxy - _this31->miny)) * ( (Float)(2) ));
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB _this32 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									Float narea = (((_this32->maxx - _this32->minx) + (_this32->maxy - _this32->miny)) * ( (Float)(2) ));
HXDLIN(1019)									cost1 = ((narea - oarea) + icost);
            								}
HXDLIN(1019)								{
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this33 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB b11 = child21->aabb;
HXDLIN(1019)									Float _hx_tmp13;
HXDLIN(1019)									if ((leafaabb->minx < b11->minx)) {
HXLINE(1019)										_hx_tmp13 = leafaabb->minx;
            									}
            									else {
HXLINE(1019)										_hx_tmp13 = b11->minx;
            									}
HXDLIN(1019)									_this33->minx = _hx_tmp13;
HXDLIN(1019)									Float _hx_tmp14;
HXDLIN(1019)									if ((leafaabb->miny < b11->miny)) {
HXLINE(1019)										_hx_tmp14 = leafaabb->miny;
            									}
            									else {
HXLINE(1019)										_hx_tmp14 = b11->miny;
            									}
HXDLIN(1019)									_this33->miny = _hx_tmp14;
HXDLIN(1019)									Float _hx_tmp15;
HXDLIN(1019)									if ((leafaabb->maxx > b11->maxx)) {
HXLINE(1019)										_hx_tmp15 = leafaabb->maxx;
            									}
            									else {
HXLINE(1019)										_hx_tmp15 = b11->maxx;
            									}
HXDLIN(1019)									_this33->maxx = _hx_tmp15;
HXDLIN(1019)									Float _hx_tmp16;
HXDLIN(1019)									if ((leafaabb->maxy > b11->maxy)) {
HXLINE(1019)										_hx_tmp16 = leafaabb->maxy;
            									}
            									else {
HXLINE(1019)										_hx_tmp16 = b11->maxy;
            									}
HXDLIN(1019)									_this33->maxy = _hx_tmp16;
            								}
HXDLIN(1019)								Float cost2;
HXDLIN(1019)								if (hx::IsNull( child21->child1 )) {
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this34 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									cost2 = ((((_this34->maxx - _this34->minx) + (_this34->maxy - _this34->miny)) * ( (Float)(2) )) + icost);
            								}
            								else {
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this35 = child21->aabb;
HXDLIN(1019)									Float oarea1 = (((_this35->maxx - _this35->minx) + (_this35->maxy - _this35->miny)) * ( (Float)(2) ));
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB _this36 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1019)									Float narea1 = (((_this36->maxx - _this36->minx) + (_this36->maxy - _this36->miny)) * ( (Float)(2) ));
HXDLIN(1019)									cost2 = ((narea1 - oarea1) + icost);
            								}
HXDLIN(1019)								bool _hx_tmp17;
HXDLIN(1019)								if ((cost < cost1)) {
HXLINE(1019)									_hx_tmp17 = (cost < cost2);
            								}
            								else {
HXLINE(1019)									_hx_tmp17 = false;
            								}
HXDLIN(1019)								if (_hx_tmp17) {
HXLINE(1019)									goto _hx_goto_17;
            								}
            								else {
HXLINE(1019)									if ((cost1 < cost2)) {
HXLINE(1019)										node43 = child11;
            									}
            									else {
HXLINE(1019)										node43 = child21;
            									}
            								}
            							}
            							_hx_goto_17:;
HXDLIN(1019)							 ::zpp_nape::space::ZPP_AABBNode sibling1 = node43;
HXDLIN(1019)							 ::zpp_nape::space::ZPP_AABBNode oparent = sibling1->parent;
HXDLIN(1019)							 ::zpp_nape::space::ZPP_AABBNode nparent;
HXDLIN(1019)							{
HXLINE(1019)								if (hx::IsNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(1019)									nparent =  ::zpp_nape::space::ZPP_AABBNode_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1019)									nparent = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1019)									::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = nparent->next;
HXDLIN(1019)									nparent->next = null();
            								}
HXDLIN(1019)								{
HXLINE(1019)									if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE(1019)										nparent->aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1019)										nparent->aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1019)										::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = nparent->aabb->next;
HXDLIN(1019)										nparent->aabb->next = null();
            									}
HXDLIN(1019)									nparent->moved = false;
HXDLIN(1019)									nparent->synced = false;
HXDLIN(1019)									nparent->first_sync = false;
            								}
            							}
HXDLIN(1019)							nparent->parent = oparent;
HXDLIN(1019)							{
HXLINE(1019)								 ::zpp_nape::geom::ZPP_AABB _this37 = nparent->aabb;
HXDLIN(1019)								 ::zpp_nape::geom::ZPP_AABB b12 = sibling1->aabb;
HXDLIN(1019)								Float _hx_tmp18;
HXDLIN(1019)								if ((leafaabb->minx < b12->minx)) {
HXLINE(1019)									_hx_tmp18 = leafaabb->minx;
            								}
            								else {
HXLINE(1019)									_hx_tmp18 = b12->minx;
            								}
HXDLIN(1019)								_this37->minx = _hx_tmp18;
HXDLIN(1019)								Float _hx_tmp19;
HXDLIN(1019)								if ((leafaabb->miny < b12->miny)) {
HXLINE(1019)									_hx_tmp19 = leafaabb->miny;
            								}
            								else {
HXLINE(1019)									_hx_tmp19 = b12->miny;
            								}
HXDLIN(1019)								_this37->miny = _hx_tmp19;
HXDLIN(1019)								Float _hx_tmp20;
HXDLIN(1019)								if ((leafaabb->maxx > b12->maxx)) {
HXLINE(1019)									_hx_tmp20 = leafaabb->maxx;
            								}
            								else {
HXLINE(1019)									_hx_tmp20 = b12->maxx;
            								}
HXDLIN(1019)								_this37->maxx = _hx_tmp20;
HXDLIN(1019)								Float _hx_tmp21;
HXDLIN(1019)								if ((leafaabb->maxy > b12->maxy)) {
HXLINE(1019)									_hx_tmp21 = leafaabb->maxy;
            								}
            								else {
HXLINE(1019)									_hx_tmp21 = b12->maxy;
            								}
HXDLIN(1019)								_this37->maxy = _hx_tmp21;
            							}
HXDLIN(1019)							nparent->height = (sibling1->height + 1);
HXDLIN(1019)							if (hx::IsNotNull( oparent )) {
HXLINE(1019)								if (hx::IsEq( oparent->child1,sibling1 )) {
HXLINE(1019)									oparent->child1 = nparent;
            								}
            								else {
HXLINE(1019)									oparent->child2 = nparent;
            								}
HXDLIN(1019)								nparent->child1 = sibling1;
HXDLIN(1019)								nparent->child2 = node;
HXDLIN(1019)								sibling1->parent = nparent;
HXDLIN(1019)								node->parent = nparent;
            							}
            							else {
HXLINE(1019)								nparent->child1 = sibling1;
HXDLIN(1019)								nparent->child2 = node;
HXDLIN(1019)								sibling1->parent = nparent;
HXDLIN(1019)								node->parent = nparent;
HXDLIN(1019)								tree1->root = nparent;
            							}
HXDLIN(1019)							node43 = node->parent;
HXDLIN(1019)							while(hx::IsNotNull( node43 )){
HXLINE(1019)								bool node44;
HXDLIN(1019)								if (hx::IsNotNull( node43->child1 )) {
HXLINE(1019)									node44 = (node43->height < 2);
            								}
            								else {
HXLINE(1019)									node44 = true;
            								}
HXDLIN(1019)								if (node44) {
HXLINE(1019)									node43 = node43;
            								}
            								else {
HXLINE(1019)									 ::zpp_nape::space::ZPP_AABBNode b13 = node43->child1;
HXDLIN(1019)									 ::zpp_nape::space::ZPP_AABBNode c1 = node43->child2;
HXDLIN(1019)									int balance1 = (c1->height - b13->height);
HXDLIN(1019)									if ((balance1 > 1)) {
HXLINE(1019)										 ::zpp_nape::space::ZPP_AABBNode f2 = c1->child1;
HXDLIN(1019)										 ::zpp_nape::space::ZPP_AABBNode g3 = c1->child2;
HXDLIN(1019)										c1->child1 = node43;
HXDLIN(1019)										c1->parent = node43->parent;
HXDLIN(1019)										node43->parent = c1;
HXDLIN(1019)										if (hx::IsNotNull( c1->parent )) {
HXLINE(1019)											if (hx::IsEq( c1->parent->child1,node43 )) {
HXLINE(1019)												c1->parent->child1 = c1;
            											}
            											else {
HXLINE(1019)												c1->parent->child2 = c1;
            											}
            										}
            										else {
HXLINE(1019)											tree1->root = c1;
            										}
HXDLIN(1019)										if ((f2->height > g3->height)) {
HXLINE(1019)											c1->child2 = f2;
HXDLIN(1019)											node43->child2 = g3;
HXDLIN(1019)											g3->parent = node43;
HXDLIN(1019)											{
HXLINE(1019)												 ::zpp_nape::geom::ZPP_AABB _this38 = node43->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB a11 = b13->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB b14 = g3->aabb;
HXDLIN(1019)												Float node45;
HXDLIN(1019)												if ((a11->minx < b14->minx)) {
HXLINE(1019)													node45 = a11->minx;
            												}
            												else {
HXLINE(1019)													node45 = b14->minx;
            												}
HXDLIN(1019)												_this38->minx = node45;
HXDLIN(1019)												Float node46;
HXDLIN(1019)												if ((a11->miny < b14->miny)) {
HXLINE(1019)													node46 = a11->miny;
            												}
            												else {
HXLINE(1019)													node46 = b14->miny;
            												}
HXDLIN(1019)												_this38->miny = node46;
HXDLIN(1019)												Float node47;
HXDLIN(1019)												if ((a11->maxx > b14->maxx)) {
HXLINE(1019)													node47 = a11->maxx;
            												}
            												else {
HXLINE(1019)													node47 = b14->maxx;
            												}
HXDLIN(1019)												_this38->maxx = node47;
HXDLIN(1019)												Float node48;
HXDLIN(1019)												if ((a11->maxy > b14->maxy)) {
HXLINE(1019)													node48 = a11->maxy;
            												}
            												else {
HXLINE(1019)													node48 = b14->maxy;
            												}
HXDLIN(1019)												_this38->maxy = node48;
            											}
HXDLIN(1019)											{
HXLINE(1019)												 ::zpp_nape::geom::ZPP_AABB _this39 = c1->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB a12 = node43->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB b15 = f2->aabb;
HXDLIN(1019)												Float node49;
HXDLIN(1019)												if ((a12->minx < b15->minx)) {
HXLINE(1019)													node49 = a12->minx;
            												}
            												else {
HXLINE(1019)													node49 = b15->minx;
            												}
HXDLIN(1019)												_this39->minx = node49;
HXDLIN(1019)												Float node50;
HXDLIN(1019)												if ((a12->miny < b15->miny)) {
HXLINE(1019)													node50 = a12->miny;
            												}
            												else {
HXLINE(1019)													node50 = b15->miny;
            												}
HXDLIN(1019)												_this39->miny = node50;
HXDLIN(1019)												Float node51;
HXDLIN(1019)												if ((a12->maxx > b15->maxx)) {
HXLINE(1019)													node51 = a12->maxx;
            												}
            												else {
HXLINE(1019)													node51 = b15->maxx;
            												}
HXDLIN(1019)												_this39->maxx = node51;
HXDLIN(1019)												Float node52;
HXDLIN(1019)												if ((a12->maxy > b15->maxy)) {
HXLINE(1019)													node52 = a12->maxy;
            												}
            												else {
HXLINE(1019)													node52 = b15->maxy;
            												}
HXDLIN(1019)												_this39->maxy = node52;
            											}
HXDLIN(1019)											int x9 = b13->height;
HXDLIN(1019)											int y9 = g3->height;
HXDLIN(1019)											int node53;
HXDLIN(1019)											if ((x9 > y9)) {
HXLINE(1019)												node53 = x9;
            											}
            											else {
HXLINE(1019)												node53 = y9;
            											}
HXDLIN(1019)											node43->height = (1 + node53);
HXDLIN(1019)											int x10 = node43->height;
HXDLIN(1019)											int y10 = f2->height;
HXDLIN(1019)											int node54;
HXDLIN(1019)											if ((x10 > y10)) {
HXLINE(1019)												node54 = x10;
            											}
            											else {
HXLINE(1019)												node54 = y10;
            											}
HXDLIN(1019)											c1->height = (1 + node54);
            										}
            										else {
HXLINE(1019)											c1->child2 = g3;
HXDLIN(1019)											node43->child2 = f2;
HXDLIN(1019)											f2->parent = node43;
HXDLIN(1019)											{
HXLINE(1019)												 ::zpp_nape::geom::ZPP_AABB _this40 = node43->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB a13 = b13->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB b16 = f2->aabb;
HXDLIN(1019)												Float node55;
HXDLIN(1019)												if ((a13->minx < b16->minx)) {
HXLINE(1019)													node55 = a13->minx;
            												}
            												else {
HXLINE(1019)													node55 = b16->minx;
            												}
HXDLIN(1019)												_this40->minx = node55;
HXDLIN(1019)												Float node56;
HXDLIN(1019)												if ((a13->miny < b16->miny)) {
HXLINE(1019)													node56 = a13->miny;
            												}
            												else {
HXLINE(1019)													node56 = b16->miny;
            												}
HXDLIN(1019)												_this40->miny = node56;
HXDLIN(1019)												Float node57;
HXDLIN(1019)												if ((a13->maxx > b16->maxx)) {
HXLINE(1019)													node57 = a13->maxx;
            												}
            												else {
HXLINE(1019)													node57 = b16->maxx;
            												}
HXDLIN(1019)												_this40->maxx = node57;
HXDLIN(1019)												Float node58;
HXDLIN(1019)												if ((a13->maxy > b16->maxy)) {
HXLINE(1019)													node58 = a13->maxy;
            												}
            												else {
HXLINE(1019)													node58 = b16->maxy;
            												}
HXDLIN(1019)												_this40->maxy = node58;
            											}
HXDLIN(1019)											{
HXLINE(1019)												 ::zpp_nape::geom::ZPP_AABB _this41 = c1->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB a14 = node43->aabb;
HXDLIN(1019)												 ::zpp_nape::geom::ZPP_AABB b17 = g3->aabb;
HXDLIN(1019)												Float node59;
HXDLIN(1019)												if ((a14->minx < b17->minx)) {
HXLINE(1019)													node59 = a14->minx;
            												}
            												else {
HXLINE(1019)													node59 = b17->minx;
            												}
HXDLIN(1019)												_this41->minx = node59;
HXDLIN(1019)												Float node60;
HXDLIN(1019)												if ((a14->miny < b17->miny)) {
HXLINE(1019)													node60 = a14->miny;
            												}
            												else {
HXLINE(1019)													node60 = b17->miny;
            												}
HXDLIN(1019)												_this41->miny = node60;
HXDLIN(1019)												Float node61;
HXDLIN(1019)												if ((a14->maxx > b17->maxx)) {
HXLINE(1019)													node61 = a14->maxx;
            												}
            												else {
HXLINE(1019)													node61 = b17->maxx;
            												}
HXDLIN(1019)												_this41->maxx = node61;
HXDLIN(1019)												Float node62;
HXDLIN(1019)												if ((a14->maxy > b17->maxy)) {
HXLINE(1019)													node62 = a14->maxy;
            												}
            												else {
HXLINE(1019)													node62 = b17->maxy;
            												}
HXDLIN(1019)												_this41->maxy = node62;
            											}
HXDLIN(1019)											int x11 = b13->height;
HXDLIN(1019)											int y11 = f2->height;
HXDLIN(1019)											int node63;
HXDLIN(1019)											if ((x11 > y11)) {
HXLINE(1019)												node63 = x11;
            											}
            											else {
HXLINE(1019)												node63 = y11;
            											}
HXDLIN(1019)											node43->height = (1 + node63);
HXDLIN(1019)											int x12 = node43->height;
HXDLIN(1019)											int y12 = g3->height;
HXDLIN(1019)											int node64;
HXDLIN(1019)											if ((x12 > y12)) {
HXLINE(1019)												node64 = x12;
            											}
            											else {
HXLINE(1019)												node64 = y12;
            											}
HXDLIN(1019)											c1->height = (1 + node64);
            										}
HXDLIN(1019)										node43 = c1;
            									}
            									else {
HXLINE(1019)										if ((balance1 < -1)) {
HXLINE(1019)											 ::zpp_nape::space::ZPP_AABBNode f3 = b13->child1;
HXDLIN(1019)											 ::zpp_nape::space::ZPP_AABBNode g4 = b13->child2;
HXDLIN(1019)											b13->child1 = node43;
HXDLIN(1019)											b13->parent = node43->parent;
HXDLIN(1019)											node43->parent = b13;
HXDLIN(1019)											if (hx::IsNotNull( b13->parent )) {
HXLINE(1019)												if (hx::IsEq( b13->parent->child1,node43 )) {
HXLINE(1019)													b13->parent->child1 = b13;
            												}
            												else {
HXLINE(1019)													b13->parent->child2 = b13;
            												}
            											}
            											else {
HXLINE(1019)												tree1->root = b13;
            											}
HXDLIN(1019)											if ((f3->height > g4->height)) {
HXLINE(1019)												b13->child2 = f3;
HXDLIN(1019)												node43->child1 = g4;
HXDLIN(1019)												g4->parent = node43;
HXDLIN(1019)												{
HXLINE(1019)													 ::zpp_nape::geom::ZPP_AABB _this42 = node43->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB a15 = c1->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB b18 = g4->aabb;
HXDLIN(1019)													Float node65;
HXDLIN(1019)													if ((a15->minx < b18->minx)) {
HXLINE(1019)														node65 = a15->minx;
            													}
            													else {
HXLINE(1019)														node65 = b18->minx;
            													}
HXDLIN(1019)													_this42->minx = node65;
HXDLIN(1019)													Float node66;
HXDLIN(1019)													if ((a15->miny < b18->miny)) {
HXLINE(1019)														node66 = a15->miny;
            													}
            													else {
HXLINE(1019)														node66 = b18->miny;
            													}
HXDLIN(1019)													_this42->miny = node66;
HXDLIN(1019)													Float node67;
HXDLIN(1019)													if ((a15->maxx > b18->maxx)) {
HXLINE(1019)														node67 = a15->maxx;
            													}
            													else {
HXLINE(1019)														node67 = b18->maxx;
            													}
HXDLIN(1019)													_this42->maxx = node67;
HXDLIN(1019)													Float node68;
HXDLIN(1019)													if ((a15->maxy > b18->maxy)) {
HXLINE(1019)														node68 = a15->maxy;
            													}
            													else {
HXLINE(1019)														node68 = b18->maxy;
            													}
HXDLIN(1019)													_this42->maxy = node68;
            												}
HXDLIN(1019)												{
HXLINE(1019)													 ::zpp_nape::geom::ZPP_AABB _this43 = b13->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB a16 = node43->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB b19 = f3->aabb;
HXDLIN(1019)													Float node69;
HXDLIN(1019)													if ((a16->minx < b19->minx)) {
HXLINE(1019)														node69 = a16->minx;
            													}
            													else {
HXLINE(1019)														node69 = b19->minx;
            													}
HXDLIN(1019)													_this43->minx = node69;
HXDLIN(1019)													Float node70;
HXDLIN(1019)													if ((a16->miny < b19->miny)) {
HXLINE(1019)														node70 = a16->miny;
            													}
            													else {
HXLINE(1019)														node70 = b19->miny;
            													}
HXDLIN(1019)													_this43->miny = node70;
HXDLIN(1019)													Float node71;
HXDLIN(1019)													if ((a16->maxx > b19->maxx)) {
HXLINE(1019)														node71 = a16->maxx;
            													}
            													else {
HXLINE(1019)														node71 = b19->maxx;
            													}
HXDLIN(1019)													_this43->maxx = node71;
HXDLIN(1019)													Float node72;
HXDLIN(1019)													if ((a16->maxy > b19->maxy)) {
HXLINE(1019)														node72 = a16->maxy;
            													}
            													else {
HXLINE(1019)														node72 = b19->maxy;
            													}
HXDLIN(1019)													_this43->maxy = node72;
            												}
HXDLIN(1019)												int x13 = c1->height;
HXDLIN(1019)												int y13 = g4->height;
HXDLIN(1019)												int node73;
HXDLIN(1019)												if ((x13 > y13)) {
HXLINE(1019)													node73 = x13;
            												}
            												else {
HXLINE(1019)													node73 = y13;
            												}
HXDLIN(1019)												node43->height = (1 + node73);
HXDLIN(1019)												int x14 = node43->height;
HXDLIN(1019)												int y14 = f3->height;
HXDLIN(1019)												int node74;
HXDLIN(1019)												if ((x14 > y14)) {
HXLINE(1019)													node74 = x14;
            												}
            												else {
HXLINE(1019)													node74 = y14;
            												}
HXDLIN(1019)												b13->height = (1 + node74);
            											}
            											else {
HXLINE(1019)												b13->child2 = g4;
HXDLIN(1019)												node43->child1 = f3;
HXDLIN(1019)												f3->parent = node43;
HXDLIN(1019)												{
HXLINE(1019)													 ::zpp_nape::geom::ZPP_AABB _this44 = node43->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB a17 = c1->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB b20 = f3->aabb;
HXDLIN(1019)													Float node75;
HXDLIN(1019)													if ((a17->minx < b20->minx)) {
HXLINE(1019)														node75 = a17->minx;
            													}
            													else {
HXLINE(1019)														node75 = b20->minx;
            													}
HXDLIN(1019)													_this44->minx = node75;
HXDLIN(1019)													Float node76;
HXDLIN(1019)													if ((a17->miny < b20->miny)) {
HXLINE(1019)														node76 = a17->miny;
            													}
            													else {
HXLINE(1019)														node76 = b20->miny;
            													}
HXDLIN(1019)													_this44->miny = node76;
HXDLIN(1019)													Float node77;
HXDLIN(1019)													if ((a17->maxx > b20->maxx)) {
HXLINE(1019)														node77 = a17->maxx;
            													}
            													else {
HXLINE(1019)														node77 = b20->maxx;
            													}
HXDLIN(1019)													_this44->maxx = node77;
HXDLIN(1019)													Float node78;
HXDLIN(1019)													if ((a17->maxy > b20->maxy)) {
HXLINE(1019)														node78 = a17->maxy;
            													}
            													else {
HXLINE(1019)														node78 = b20->maxy;
            													}
HXDLIN(1019)													_this44->maxy = node78;
            												}
HXDLIN(1019)												{
HXLINE(1019)													 ::zpp_nape::geom::ZPP_AABB _this45 = b13->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB a18 = node43->aabb;
HXDLIN(1019)													 ::zpp_nape::geom::ZPP_AABB b21 = g4->aabb;
HXDLIN(1019)													Float node79;
HXDLIN(1019)													if ((a18->minx < b21->minx)) {
HXLINE(1019)														node79 = a18->minx;
            													}
            													else {
HXLINE(1019)														node79 = b21->minx;
            													}
HXDLIN(1019)													_this45->minx = node79;
HXDLIN(1019)													Float node80;
HXDLIN(1019)													if ((a18->miny < b21->miny)) {
HXLINE(1019)														node80 = a18->miny;
            													}
            													else {
HXLINE(1019)														node80 = b21->miny;
            													}
HXDLIN(1019)													_this45->miny = node80;
HXDLIN(1019)													Float node81;
HXDLIN(1019)													if ((a18->maxx > b21->maxx)) {
HXLINE(1019)														node81 = a18->maxx;
            													}
            													else {
HXLINE(1019)														node81 = b21->maxx;
            													}
HXDLIN(1019)													_this45->maxx = node81;
HXDLIN(1019)													Float node82;
HXDLIN(1019)													if ((a18->maxy > b21->maxy)) {
HXLINE(1019)														node82 = a18->maxy;
            													}
            													else {
HXLINE(1019)														node82 = b21->maxy;
            													}
HXDLIN(1019)													_this45->maxy = node82;
            												}
HXDLIN(1019)												int x15 = c1->height;
HXDLIN(1019)												int y15 = f3->height;
HXDLIN(1019)												int node83;
HXDLIN(1019)												if ((x15 > y15)) {
HXLINE(1019)													node83 = x15;
            												}
            												else {
HXLINE(1019)													node83 = y15;
            												}
HXDLIN(1019)												node43->height = (1 + node83);
HXDLIN(1019)												int x16 = node43->height;
HXDLIN(1019)												int y16 = g4->height;
HXDLIN(1019)												int node84;
HXDLIN(1019)												if ((x16 > y16)) {
HXLINE(1019)													node84 = x16;
            												}
            												else {
HXLINE(1019)													node84 = y16;
            												}
HXDLIN(1019)												b13->height = (1 + node84);
            											}
HXDLIN(1019)											node43 = b13;
            										}
            										else {
HXLINE(1019)											node43 = node43;
            										}
            									}
            								}
HXDLIN(1019)								 ::zpp_nape::space::ZPP_AABBNode child12 = node43->child1;
HXDLIN(1019)								 ::zpp_nape::space::ZPP_AABBNode child22 = node43->child2;
HXDLIN(1019)								int x17 = child12->height;
HXDLIN(1019)								int y17 = child22->height;
HXDLIN(1019)								int _hx_tmp22;
HXDLIN(1019)								if ((x17 > y17)) {
HXLINE(1019)									_hx_tmp22 = x17;
            								}
            								else {
HXLINE(1019)									_hx_tmp22 = y17;
            								}
HXDLIN(1019)								node43->height = (1 + _hx_tmp22);
HXDLIN(1019)								{
HXLINE(1019)									 ::zpp_nape::geom::ZPP_AABB _this46 = node43->aabb;
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB a19 = child12->aabb;
HXDLIN(1019)									 ::zpp_nape::geom::ZPP_AABB b22 = child22->aabb;
HXDLIN(1019)									Float _hx_tmp23;
HXDLIN(1019)									if ((a19->minx < b22->minx)) {
HXLINE(1019)										_hx_tmp23 = a19->minx;
            									}
            									else {
HXLINE(1019)										_hx_tmp23 = b22->minx;
            									}
HXDLIN(1019)									_this46->minx = _hx_tmp23;
HXDLIN(1019)									Float _hx_tmp24;
HXDLIN(1019)									if ((a19->miny < b22->miny)) {
HXLINE(1019)										_hx_tmp24 = a19->miny;
            									}
            									else {
HXLINE(1019)										_hx_tmp24 = b22->miny;
            									}
HXDLIN(1019)									_this46->miny = _hx_tmp24;
HXDLIN(1019)									Float _hx_tmp25;
HXDLIN(1019)									if ((a19->maxx > b22->maxx)) {
HXLINE(1019)										_hx_tmp25 = a19->maxx;
            									}
            									else {
HXLINE(1019)										_hx_tmp25 = b22->maxx;
            									}
HXDLIN(1019)									_this46->maxx = _hx_tmp25;
HXDLIN(1019)									Float _hx_tmp26;
HXDLIN(1019)									if ((a19->maxy > b22->maxy)) {
HXLINE(1019)										_hx_tmp26 = a19->maxy;
            									}
            									else {
HXLINE(1019)										_hx_tmp26 = b22->maxy;
            									}
HXDLIN(1019)									_this46->maxy = _hx_tmp26;
            								}
HXDLIN(1019)								node43 = node43->parent;
            							}
            						}
HXLINE(1020)						node->synced = false;
            					}
HXLINE(1030)					node->moved = true;
HXLINE(1031)					node->mnext = node->snext;
HXLINE(1032)					node->snext = null();
HXLINE(1033)					node = node->mnext;
            				}
HXLINE(1035)				{
HXLINE(1036)					 ::zpp_nape::space::ZPP_AABBNode t3 = this->syncs;
HXLINE(1037)					this->syncs = this->moves;
HXLINE(1038)					this->moves = t3;
            				}
            			}
            			else {
HXLINE(1042)				while(hx::IsNotNull( this->syncs )){
HXLINE(1052)					 ::zpp_nape::space::ZPP_AABBNode ret = this->syncs;
HXLINE(1053)					this->syncs = ret->snext;
HXLINE(1054)					ret->snext = null();
HXLINE(1043)					 ::zpp_nape::space::ZPP_AABBNode node85 = ret;
HXLINE(1057)					{
HXLINE(1058)						 ::zpp_nape::shape::ZPP_Shape shape1 = node85->shape;
HXLINE(1075)						if (!(node85->first_sync)) {
HXLINE(1076)							 ::zpp_nape::space::ZPP_AABBTree tree3;
HXDLIN(1076)							if (node85->dyn) {
HXLINE(1076)								tree3 = this->dtree;
            							}
            							else {
HXLINE(1076)								tree3 = this->stree;
            							}
HXLINE(1077)							if (hx::IsEq( node85,tree3->root )) {
HXLINE(1077)								tree3->root = null();
            							}
            							else {
HXLINE(1077)								 ::zpp_nape::space::ZPP_AABBNode parent1 = node85->parent;
HXDLIN(1077)								 ::zpp_nape::space::ZPP_AABBNode gparent1 = parent1->parent;
HXDLIN(1077)								 ::zpp_nape::space::ZPP_AABBNode sibling2;
HXDLIN(1077)								if (hx::IsEq( parent1->child1,node85 )) {
HXLINE(1077)									sibling2 = parent1->child2;
            								}
            								else {
HXLINE(1077)									sibling2 = parent1->child1;
            								}
HXDLIN(1077)								if (hx::IsNotNull( gparent1 )) {
HXLINE(1077)									if (hx::IsEq( gparent1->child1,parent1 )) {
HXLINE(1077)										gparent1->child1 = sibling2;
            									}
            									else {
HXLINE(1077)										gparent1->child2 = sibling2;
            									}
HXDLIN(1077)									sibling2->parent = gparent1;
HXDLIN(1077)									{
HXLINE(1077)										 ::zpp_nape::space::ZPP_AABBNode o4 = parent1;
HXDLIN(1077)										{
HXLINE(1077)											o4->height = -1;
HXDLIN(1077)											{
HXLINE(1077)												 ::zpp_nape::geom::ZPP_AABB o5 = o4->aabb;
HXDLIN(1077)												{
HXLINE(1077)													if (hx::IsNotNull( o5->outer )) {
HXLINE(1077)														o5->outer->zpp_inner = null();
HXDLIN(1077)														o5->outer = null();
            													}
HXDLIN(1077)													o5->wrap_min = (o5->wrap_max = null());
HXDLIN(1077)													o5->_invalidate = null();
HXDLIN(1077)													o5->_validate = null();
            												}
HXDLIN(1077)												o5->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1077)												::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o5;
            											}
HXDLIN(1077)											o4->child1 = (o4->child2 = (o4->parent = null()));
HXDLIN(1077)											o4->next = null();
HXDLIN(1077)											o4->snext = null();
HXDLIN(1077)											o4->mnext = null();
            										}
HXDLIN(1077)										o4->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1077)										::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o4;
            									}
HXDLIN(1077)									 ::zpp_nape::space::ZPP_AABBNode node86 = gparent1;
HXDLIN(1077)									while(hx::IsNotNull( node86 )){
HXLINE(1077)										bool node87;
HXDLIN(1077)										if (hx::IsNotNull( node86->child1 )) {
HXLINE(1077)											node87 = (node86->height < 2);
            										}
            										else {
HXLINE(1077)											node87 = true;
            										}
HXDLIN(1077)										if (node87) {
HXLINE(1077)											node86 = node86;
            										}
            										else {
HXLINE(1077)											 ::zpp_nape::space::ZPP_AABBNode b23 = node86->child1;
HXDLIN(1077)											 ::zpp_nape::space::ZPP_AABBNode c2 = node86->child2;
HXDLIN(1077)											int balance2 = (c2->height - b23->height);
HXDLIN(1077)											if ((balance2 > 1)) {
HXLINE(1077)												 ::zpp_nape::space::ZPP_AABBNode f4 = c2->child1;
HXDLIN(1077)												 ::zpp_nape::space::ZPP_AABBNode g5 = c2->child2;
HXDLIN(1077)												c2->child1 = node86;
HXDLIN(1077)												c2->parent = node86->parent;
HXDLIN(1077)												node86->parent = c2;
HXDLIN(1077)												if (hx::IsNotNull( c2->parent )) {
HXLINE(1077)													if (hx::IsEq( c2->parent->child1,node86 )) {
HXLINE(1077)														c2->parent->child1 = c2;
            													}
            													else {
HXLINE(1077)														c2->parent->child2 = c2;
            													}
            												}
            												else {
HXLINE(1077)													tree3->root = c2;
            												}
HXDLIN(1077)												if ((f4->height > g5->height)) {
HXLINE(1077)													c2->child2 = f4;
HXDLIN(1077)													node86->child2 = g5;
HXDLIN(1077)													g5->parent = node86;
HXDLIN(1077)													{
HXLINE(1077)														 ::zpp_nape::geom::ZPP_AABB _this47 = node86->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB a20 = b23->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB b24 = g5->aabb;
HXDLIN(1077)														Float node88;
HXDLIN(1077)														if ((a20->minx < b24->minx)) {
HXLINE(1077)															node88 = a20->minx;
            														}
            														else {
HXLINE(1077)															node88 = b24->minx;
            														}
HXDLIN(1077)														_this47->minx = node88;
HXDLIN(1077)														Float node89;
HXDLIN(1077)														if ((a20->miny < b24->miny)) {
HXLINE(1077)															node89 = a20->miny;
            														}
            														else {
HXLINE(1077)															node89 = b24->miny;
            														}
HXDLIN(1077)														_this47->miny = node89;
HXDLIN(1077)														Float node90;
HXDLIN(1077)														if ((a20->maxx > b24->maxx)) {
HXLINE(1077)															node90 = a20->maxx;
            														}
            														else {
HXLINE(1077)															node90 = b24->maxx;
            														}
HXDLIN(1077)														_this47->maxx = node90;
HXDLIN(1077)														Float node91;
HXDLIN(1077)														if ((a20->maxy > b24->maxy)) {
HXLINE(1077)															node91 = a20->maxy;
            														}
            														else {
HXLINE(1077)															node91 = b24->maxy;
            														}
HXDLIN(1077)														_this47->maxy = node91;
            													}
HXDLIN(1077)													{
HXLINE(1077)														 ::zpp_nape::geom::ZPP_AABB _this48 = c2->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB a21 = node86->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB b25 = f4->aabb;
HXDLIN(1077)														Float node92;
HXDLIN(1077)														if ((a21->minx < b25->minx)) {
HXLINE(1077)															node92 = a21->minx;
            														}
            														else {
HXLINE(1077)															node92 = b25->minx;
            														}
HXDLIN(1077)														_this48->minx = node92;
HXDLIN(1077)														Float node93;
HXDLIN(1077)														if ((a21->miny < b25->miny)) {
HXLINE(1077)															node93 = a21->miny;
            														}
            														else {
HXLINE(1077)															node93 = b25->miny;
            														}
HXDLIN(1077)														_this48->miny = node93;
HXDLIN(1077)														Float node94;
HXDLIN(1077)														if ((a21->maxx > b25->maxx)) {
HXLINE(1077)															node94 = a21->maxx;
            														}
            														else {
HXLINE(1077)															node94 = b25->maxx;
            														}
HXDLIN(1077)														_this48->maxx = node94;
HXDLIN(1077)														Float node95;
HXDLIN(1077)														if ((a21->maxy > b25->maxy)) {
HXLINE(1077)															node95 = a21->maxy;
            														}
            														else {
HXLINE(1077)															node95 = b25->maxy;
            														}
HXDLIN(1077)														_this48->maxy = node95;
            													}
HXDLIN(1077)													int x18 = b23->height;
HXDLIN(1077)													int y18 = g5->height;
HXDLIN(1077)													int node96;
HXDLIN(1077)													if ((x18 > y18)) {
HXLINE(1077)														node96 = x18;
            													}
            													else {
HXLINE(1077)														node96 = y18;
            													}
HXDLIN(1077)													node86->height = (1 + node96);
HXDLIN(1077)													int x19 = node86->height;
HXDLIN(1077)													int y19 = f4->height;
HXDLIN(1077)													int node97;
HXDLIN(1077)													if ((x19 > y19)) {
HXLINE(1077)														node97 = x19;
            													}
            													else {
HXLINE(1077)														node97 = y19;
            													}
HXDLIN(1077)													c2->height = (1 + node97);
            												}
            												else {
HXLINE(1077)													c2->child2 = g5;
HXDLIN(1077)													node86->child2 = f4;
HXDLIN(1077)													f4->parent = node86;
HXDLIN(1077)													{
HXLINE(1077)														 ::zpp_nape::geom::ZPP_AABB _this49 = node86->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB a22 = b23->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB b26 = f4->aabb;
HXDLIN(1077)														Float node98;
HXDLIN(1077)														if ((a22->minx < b26->minx)) {
HXLINE(1077)															node98 = a22->minx;
            														}
            														else {
HXLINE(1077)															node98 = b26->minx;
            														}
HXDLIN(1077)														_this49->minx = node98;
HXDLIN(1077)														Float node99;
HXDLIN(1077)														if ((a22->miny < b26->miny)) {
HXLINE(1077)															node99 = a22->miny;
            														}
            														else {
HXLINE(1077)															node99 = b26->miny;
            														}
HXDLIN(1077)														_this49->miny = node99;
HXDLIN(1077)														Float node100;
HXDLIN(1077)														if ((a22->maxx > b26->maxx)) {
HXLINE(1077)															node100 = a22->maxx;
            														}
            														else {
HXLINE(1077)															node100 = b26->maxx;
            														}
HXDLIN(1077)														_this49->maxx = node100;
HXDLIN(1077)														Float node101;
HXDLIN(1077)														if ((a22->maxy > b26->maxy)) {
HXLINE(1077)															node101 = a22->maxy;
            														}
            														else {
HXLINE(1077)															node101 = b26->maxy;
            														}
HXDLIN(1077)														_this49->maxy = node101;
            													}
HXDLIN(1077)													{
HXLINE(1077)														 ::zpp_nape::geom::ZPP_AABB _this50 = c2->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB a23 = node86->aabb;
HXDLIN(1077)														 ::zpp_nape::geom::ZPP_AABB b27 = g5->aabb;
HXDLIN(1077)														Float node102;
HXDLIN(1077)														if ((a23->minx < b27->minx)) {
HXLINE(1077)															node102 = a23->minx;
            														}
            														else {
HXLINE(1077)															node102 = b27->minx;
            														}
HXDLIN(1077)														_this50->minx = node102;
HXDLIN(1077)														Float node103;
HXDLIN(1077)														if ((a23->miny < b27->miny)) {
HXLINE(1077)															node103 = a23->miny;
            														}
            														else {
HXLINE(1077)															node103 = b27->miny;
            														}
HXDLIN(1077)														_this50->miny = node103;
HXDLIN(1077)														Float node104;
HXDLIN(1077)														if ((a23->maxx > b27->maxx)) {
HXLINE(1077)															node104 = a23->maxx;
            														}
            														else {
HXLINE(1077)															node104 = b27->maxx;
            														}
HXDLIN(1077)														_this50->maxx = node104;
HXDLIN(1077)														Float node105;
HXDLIN(1077)														if ((a23->maxy > b27->maxy)) {
HXLINE(1077)															node105 = a23->maxy;
            														}
            														else {
HXLINE(1077)															node105 = b27->maxy;
            														}
HXDLIN(1077)														_this50->maxy = node105;
            													}
HXDLIN(1077)													int x20 = b23->height;
HXDLIN(1077)													int y20 = f4->height;
HXDLIN(1077)													int node106;
HXDLIN(1077)													if ((x20 > y20)) {
HXLINE(1077)														node106 = x20;
            													}
            													else {
HXLINE(1077)														node106 = y20;
            													}
HXDLIN(1077)													node86->height = (1 + node106);
HXDLIN(1077)													int x21 = node86->height;
HXDLIN(1077)													int y21 = g5->height;
HXDLIN(1077)													int node107;
HXDLIN(1077)													if ((x21 > y21)) {
HXLINE(1077)														node107 = x21;
            													}
            													else {
HXLINE(1077)														node107 = y21;
            													}
HXDLIN(1077)													c2->height = (1 + node107);
            												}
HXDLIN(1077)												node86 = c2;
            											}
            											else {
HXLINE(1077)												if ((balance2 < -1)) {
HXLINE(1077)													 ::zpp_nape::space::ZPP_AABBNode f5 = b23->child1;
HXDLIN(1077)													 ::zpp_nape::space::ZPP_AABBNode g6 = b23->child2;
HXDLIN(1077)													b23->child1 = node86;
HXDLIN(1077)													b23->parent = node86->parent;
HXDLIN(1077)													node86->parent = b23;
HXDLIN(1077)													if (hx::IsNotNull( b23->parent )) {
HXLINE(1077)														if (hx::IsEq( b23->parent->child1,node86 )) {
HXLINE(1077)															b23->parent->child1 = b23;
            														}
            														else {
HXLINE(1077)															b23->parent->child2 = b23;
            														}
            													}
            													else {
HXLINE(1077)														tree3->root = b23;
            													}
HXDLIN(1077)													if ((f5->height > g6->height)) {
HXLINE(1077)														b23->child2 = f5;
HXDLIN(1077)														node86->child1 = g6;
HXDLIN(1077)														g6->parent = node86;
HXDLIN(1077)														{
HXLINE(1077)															 ::zpp_nape::geom::ZPP_AABB _this51 = node86->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB a24 = c2->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB b28 = g6->aabb;
HXDLIN(1077)															Float node108;
HXDLIN(1077)															if ((a24->minx < b28->minx)) {
HXLINE(1077)																node108 = a24->minx;
            															}
            															else {
HXLINE(1077)																node108 = b28->minx;
            															}
HXDLIN(1077)															_this51->minx = node108;
HXDLIN(1077)															Float node109;
HXDLIN(1077)															if ((a24->miny < b28->miny)) {
HXLINE(1077)																node109 = a24->miny;
            															}
            															else {
HXLINE(1077)																node109 = b28->miny;
            															}
HXDLIN(1077)															_this51->miny = node109;
HXDLIN(1077)															Float node110;
HXDLIN(1077)															if ((a24->maxx > b28->maxx)) {
HXLINE(1077)																node110 = a24->maxx;
            															}
            															else {
HXLINE(1077)																node110 = b28->maxx;
            															}
HXDLIN(1077)															_this51->maxx = node110;
HXDLIN(1077)															Float node111;
HXDLIN(1077)															if ((a24->maxy > b28->maxy)) {
HXLINE(1077)																node111 = a24->maxy;
            															}
            															else {
HXLINE(1077)																node111 = b28->maxy;
            															}
HXDLIN(1077)															_this51->maxy = node111;
            														}
HXDLIN(1077)														{
HXLINE(1077)															 ::zpp_nape::geom::ZPP_AABB _this52 = b23->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB a25 = node86->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB b29 = f5->aabb;
HXDLIN(1077)															Float node112;
HXDLIN(1077)															if ((a25->minx < b29->minx)) {
HXLINE(1077)																node112 = a25->minx;
            															}
            															else {
HXLINE(1077)																node112 = b29->minx;
            															}
HXDLIN(1077)															_this52->minx = node112;
HXDLIN(1077)															Float node113;
HXDLIN(1077)															if ((a25->miny < b29->miny)) {
HXLINE(1077)																node113 = a25->miny;
            															}
            															else {
HXLINE(1077)																node113 = b29->miny;
            															}
HXDLIN(1077)															_this52->miny = node113;
HXDLIN(1077)															Float node114;
HXDLIN(1077)															if ((a25->maxx > b29->maxx)) {
HXLINE(1077)																node114 = a25->maxx;
            															}
            															else {
HXLINE(1077)																node114 = b29->maxx;
            															}
HXDLIN(1077)															_this52->maxx = node114;
HXDLIN(1077)															Float node115;
HXDLIN(1077)															if ((a25->maxy > b29->maxy)) {
HXLINE(1077)																node115 = a25->maxy;
            															}
            															else {
HXLINE(1077)																node115 = b29->maxy;
            															}
HXDLIN(1077)															_this52->maxy = node115;
            														}
HXDLIN(1077)														int x22 = c2->height;
HXDLIN(1077)														int y22 = g6->height;
HXDLIN(1077)														int node116;
HXDLIN(1077)														if ((x22 > y22)) {
HXLINE(1077)															node116 = x22;
            														}
            														else {
HXLINE(1077)															node116 = y22;
            														}
HXDLIN(1077)														node86->height = (1 + node116);
HXDLIN(1077)														int x23 = node86->height;
HXDLIN(1077)														int y23 = f5->height;
HXDLIN(1077)														int node117;
HXDLIN(1077)														if ((x23 > y23)) {
HXLINE(1077)															node117 = x23;
            														}
            														else {
HXLINE(1077)															node117 = y23;
            														}
HXDLIN(1077)														b23->height = (1 + node117);
            													}
            													else {
HXLINE(1077)														b23->child2 = g6;
HXDLIN(1077)														node86->child1 = f5;
HXDLIN(1077)														f5->parent = node86;
HXDLIN(1077)														{
HXLINE(1077)															 ::zpp_nape::geom::ZPP_AABB _this53 = node86->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB a26 = c2->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB b30 = f5->aabb;
HXDLIN(1077)															Float node118;
HXDLIN(1077)															if ((a26->minx < b30->minx)) {
HXLINE(1077)																node118 = a26->minx;
            															}
            															else {
HXLINE(1077)																node118 = b30->minx;
            															}
HXDLIN(1077)															_this53->minx = node118;
HXDLIN(1077)															Float node119;
HXDLIN(1077)															if ((a26->miny < b30->miny)) {
HXLINE(1077)																node119 = a26->miny;
            															}
            															else {
HXLINE(1077)																node119 = b30->miny;
            															}
HXDLIN(1077)															_this53->miny = node119;
HXDLIN(1077)															Float node120;
HXDLIN(1077)															if ((a26->maxx > b30->maxx)) {
HXLINE(1077)																node120 = a26->maxx;
            															}
            															else {
HXLINE(1077)																node120 = b30->maxx;
            															}
HXDLIN(1077)															_this53->maxx = node120;
HXDLIN(1077)															Float node121;
HXDLIN(1077)															if ((a26->maxy > b30->maxy)) {
HXLINE(1077)																node121 = a26->maxy;
            															}
            															else {
HXLINE(1077)																node121 = b30->maxy;
            															}
HXDLIN(1077)															_this53->maxy = node121;
            														}
HXDLIN(1077)														{
HXLINE(1077)															 ::zpp_nape::geom::ZPP_AABB _this54 = b23->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB a27 = node86->aabb;
HXDLIN(1077)															 ::zpp_nape::geom::ZPP_AABB b31 = g6->aabb;
HXDLIN(1077)															Float node122;
HXDLIN(1077)															if ((a27->minx < b31->minx)) {
HXLINE(1077)																node122 = a27->minx;
            															}
            															else {
HXLINE(1077)																node122 = b31->minx;
            															}
HXDLIN(1077)															_this54->minx = node122;
HXDLIN(1077)															Float node123;
HXDLIN(1077)															if ((a27->miny < b31->miny)) {
HXLINE(1077)																node123 = a27->miny;
            															}
            															else {
HXLINE(1077)																node123 = b31->miny;
            															}
HXDLIN(1077)															_this54->miny = node123;
HXDLIN(1077)															Float node124;
HXDLIN(1077)															if ((a27->maxx > b31->maxx)) {
HXLINE(1077)																node124 = a27->maxx;
            															}
            															else {
HXLINE(1077)																node124 = b31->maxx;
            															}
HXDLIN(1077)															_this54->maxx = node124;
HXDLIN(1077)															Float node125;
HXDLIN(1077)															if ((a27->maxy > b31->maxy)) {
HXLINE(1077)																node125 = a27->maxy;
            															}
            															else {
HXLINE(1077)																node125 = b31->maxy;
            															}
HXDLIN(1077)															_this54->maxy = node125;
            														}
HXDLIN(1077)														int x24 = c2->height;
HXDLIN(1077)														int y24 = f5->height;
HXDLIN(1077)														int node126;
HXDLIN(1077)														if ((x24 > y24)) {
HXLINE(1077)															node126 = x24;
            														}
            														else {
HXLINE(1077)															node126 = y24;
            														}
HXDLIN(1077)														node86->height = (1 + node126);
HXDLIN(1077)														int x25 = node86->height;
HXDLIN(1077)														int y25 = g6->height;
HXDLIN(1077)														int node127;
HXDLIN(1077)														if ((x25 > y25)) {
HXLINE(1077)															node127 = x25;
            														}
            														else {
HXLINE(1077)															node127 = y25;
            														}
HXDLIN(1077)														b23->height = (1 + node127);
            													}
HXDLIN(1077)													node86 = b23;
            												}
            												else {
HXLINE(1077)													node86 = node86;
            												}
            											}
            										}
HXDLIN(1077)										 ::zpp_nape::space::ZPP_AABBNode child13 = node86->child1;
HXDLIN(1077)										 ::zpp_nape::space::ZPP_AABBNode child23 = node86->child2;
HXDLIN(1077)										{
HXLINE(1077)											 ::zpp_nape::geom::ZPP_AABB _this55 = node86->aabb;
HXDLIN(1077)											 ::zpp_nape::geom::ZPP_AABB a28 = child13->aabb;
HXDLIN(1077)											 ::zpp_nape::geom::ZPP_AABB b32 = child23->aabb;
HXDLIN(1077)											Float _hx_tmp27;
HXDLIN(1077)											if ((a28->minx < b32->minx)) {
HXLINE(1077)												_hx_tmp27 = a28->minx;
            											}
            											else {
HXLINE(1077)												_hx_tmp27 = b32->minx;
            											}
HXDLIN(1077)											_this55->minx = _hx_tmp27;
HXDLIN(1077)											Float _hx_tmp28;
HXDLIN(1077)											if ((a28->miny < b32->miny)) {
HXLINE(1077)												_hx_tmp28 = a28->miny;
            											}
            											else {
HXLINE(1077)												_hx_tmp28 = b32->miny;
            											}
HXDLIN(1077)											_this55->miny = _hx_tmp28;
HXDLIN(1077)											Float _hx_tmp29;
HXDLIN(1077)											if ((a28->maxx > b32->maxx)) {
HXLINE(1077)												_hx_tmp29 = a28->maxx;
            											}
            											else {
HXLINE(1077)												_hx_tmp29 = b32->maxx;
            											}
HXDLIN(1077)											_this55->maxx = _hx_tmp29;
HXDLIN(1077)											Float _hx_tmp30;
HXDLIN(1077)											if ((a28->maxy > b32->maxy)) {
HXLINE(1077)												_hx_tmp30 = a28->maxy;
            											}
            											else {
HXLINE(1077)												_hx_tmp30 = b32->maxy;
            											}
HXDLIN(1077)											_this55->maxy = _hx_tmp30;
            										}
HXDLIN(1077)										int x26 = child13->height;
HXDLIN(1077)										int y26 = child23->height;
HXDLIN(1077)										int _hx_tmp31;
HXDLIN(1077)										if ((x26 > y26)) {
HXLINE(1077)											_hx_tmp31 = x26;
            										}
            										else {
HXLINE(1077)											_hx_tmp31 = y26;
            										}
HXDLIN(1077)										node86->height = (1 + _hx_tmp31);
HXDLIN(1077)										node86 = node86->parent;
            									}
            								}
            								else {
HXLINE(1077)									tree3->root = sibling2;
HXDLIN(1077)									sibling2->parent = null();
HXDLIN(1077)									{
HXLINE(1077)										 ::zpp_nape::space::ZPP_AABBNode o6 = parent1;
HXDLIN(1077)										{
HXLINE(1077)											o6->height = -1;
HXDLIN(1077)											{
HXLINE(1077)												 ::zpp_nape::geom::ZPP_AABB o7 = o6->aabb;
HXDLIN(1077)												{
HXLINE(1077)													if (hx::IsNotNull( o7->outer )) {
HXLINE(1077)														o7->outer->zpp_inner = null();
HXDLIN(1077)														o7->outer = null();
            													}
HXDLIN(1077)													o7->wrap_min = (o7->wrap_max = null());
HXDLIN(1077)													o7->_invalidate = null();
HXDLIN(1077)													o7->_validate = null();
            												}
HXDLIN(1077)												o7->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1077)												::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o7;
            											}
HXDLIN(1077)											o6->child1 = (o6->child2 = (o6->parent = null()));
HXDLIN(1077)											o6->next = null();
HXDLIN(1077)											o6->snext = null();
HXDLIN(1077)											o6->mnext = null();
            										}
HXDLIN(1077)										o6->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1077)										::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o6;
            									}
            								}
            							}
            						}
            						else {
HXLINE(1079)							node85->first_sync = false;
            						}
HXLINE(1080)						 ::zpp_nape::geom::ZPP_AABB aabb1 = node85->aabb;
HXLINE(1081)						if (!(this->space->continuous)) {
HXLINE(1081)							if (shape1->zip_aabb) {
HXLINE(1081)								if (hx::IsNotNull( shape1->body )) {
HXLINE(1081)									shape1->zip_aabb = false;
HXDLIN(1081)									if ((shape1->type == 0)) {
HXLINE(1081)										 ::zpp_nape::shape::ZPP_Circle _this56 = shape1->circle;
HXDLIN(1081)										if (_this56->zip_worldCOM) {
HXLINE(1081)											if (hx::IsNotNull( _this56->body )) {
HXLINE(1081)												_this56->zip_worldCOM = false;
HXDLIN(1081)												if (_this56->zip_localCOM) {
HXLINE(1081)													_this56->zip_localCOM = false;
HXDLIN(1081)													if ((_this56->type == 1)) {
HXLINE(1081)														 ::zpp_nape::shape::ZPP_Polygon _this57 = _this56->polygon;
HXDLIN(1081)														if (hx::IsNull( _this57->lverts->next )) {
HXLINE(1081)															HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            														}
HXDLIN(1081)														if (hx::IsNull( _this57->lverts->next->next )) {
HXLINE(1081)															_this57->localCOMx = _this57->lverts->next->x;
HXDLIN(1081)															_this57->localCOMy = _this57->lverts->next->y;
            														}
            														else {
HXLINE(1081)															if (hx::IsNull( _this57->lverts->next->next->next )) {
HXLINE(1081)																{
HXLINE(1081)																	_this57->localCOMx = _this57->lverts->next->x;
HXDLIN(1081)																	_this57->localCOMy = _this57->lverts->next->y;
            																}
HXDLIN(1081)																{
HXLINE(1081)																	Float t4 = ((Float)1.0);
HXDLIN(1081)																	 ::zpp_nape::shape::ZPP_Polygon _this58 = _this57;
HXDLIN(1081)																	_this58->localCOMx = (_this58->localCOMx + (_this57->lverts->next->next->x * t4));
HXDLIN(1081)																	 ::zpp_nape::shape::ZPP_Polygon _this59 = _this57;
HXDLIN(1081)																	_this59->localCOMy = (_this59->localCOMy + (_this57->lverts->next->next->y * t4));
            																}
HXDLIN(1081)																{
HXLINE(1081)																	Float t5 = ((Float)0.5);
HXDLIN(1081)																	 ::zpp_nape::shape::ZPP_Polygon _this60 = _this57;
HXDLIN(1081)																	_this60->localCOMx = (_this60->localCOMx * t5);
HXDLIN(1081)																	 ::zpp_nape::shape::ZPP_Polygon _this61 = _this57;
HXDLIN(1081)																	_this61->localCOMy = (_this61->localCOMy * t5);
            																}
            															}
            															else {
HXLINE(1081)																{
HXLINE(1081)																	_this57->localCOMx = ( (Float)(0) );
HXDLIN(1081)																	_this57->localCOMy = ( (Float)(0) );
            																}
HXDLIN(1081)																Float area2 = ((Float)0.0);
HXDLIN(1081)																{
HXLINE(1081)																	 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this57->lverts->next;
HXDLIN(1081)																	 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite3;
HXDLIN(1081)																	cx_ite3 = cx_ite3->next;
HXDLIN(1081)																	 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite3;
HXDLIN(1081)																	cx_ite3 = cx_ite3->next;
HXDLIN(1081)																	while(hx::IsNotNull( cx_ite3 )){
HXLINE(1081)																		 ::zpp_nape::geom::ZPP_Vec2 w3 = cx_ite3;
HXDLIN(1081)																		{
HXLINE(1081)																			area2 = (area2 + (v1->x * (w3->y - u1->y)));
HXDLIN(1081)																			Float cf3 = ((w3->y * v1->x) - (w3->x * v1->y));
HXDLIN(1081)																			 ::zpp_nape::shape::ZPP_Polygon _this62 = _this57;
HXDLIN(1081)																			_this62->localCOMx = (_this62->localCOMx + ((v1->x + w3->x) * cf3));
HXDLIN(1081)																			 ::zpp_nape::shape::ZPP_Polygon _this63 = _this57;
HXDLIN(1081)																			_this63->localCOMy = (_this63->localCOMy + ((v1->y + w3->y) * cf3));
            																		}
HXDLIN(1081)																		u1 = v1;
HXDLIN(1081)																		v1 = w3;
HXDLIN(1081)																		cx_ite3 = cx_ite3->next;
            																	}
HXDLIN(1081)																	cx_ite3 = _this57->lverts->next;
HXDLIN(1081)																	 ::zpp_nape::geom::ZPP_Vec2 w4 = cx_ite3;
HXDLIN(1081)																	{
HXLINE(1081)																		area2 = (area2 + (v1->x * (w4->y - u1->y)));
HXDLIN(1081)																		Float cf4 = ((w4->y * v1->x) - (w4->x * v1->y));
HXDLIN(1081)																		 ::zpp_nape::shape::ZPP_Polygon _this64 = _this57;
HXDLIN(1081)																		_this64->localCOMx = (_this64->localCOMx + ((v1->x + w4->x) * cf4));
HXDLIN(1081)																		 ::zpp_nape::shape::ZPP_Polygon _this65 = _this57;
HXDLIN(1081)																		_this65->localCOMy = (_this65->localCOMy + ((v1->y + w4->y) * cf4));
            																	}
HXDLIN(1081)																	u1 = v1;
HXDLIN(1081)																	v1 = w4;
HXDLIN(1081)																	cx_ite3 = cx_ite3->next;
HXDLIN(1081)																	 ::zpp_nape::geom::ZPP_Vec2 w5 = cx_ite3;
HXDLIN(1081)																	{
HXLINE(1081)																		area2 = (area2 + (v1->x * (w5->y - u1->y)));
HXDLIN(1081)																		Float cf5 = ((w5->y * v1->x) - (w5->x * v1->y));
HXDLIN(1081)																		 ::zpp_nape::shape::ZPP_Polygon _this66 = _this57;
HXDLIN(1081)																		_this66->localCOMx = (_this66->localCOMx + ((v1->x + w5->x) * cf5));
HXDLIN(1081)																		 ::zpp_nape::shape::ZPP_Polygon _this67 = _this57;
HXDLIN(1081)																		_this67->localCOMy = (_this67->localCOMy + ((v1->y + w5->y) * cf5));
            																	}
            																}
HXDLIN(1081)																area2 = (( (Float)(1) ) / (( (Float)(3) ) * area2));
HXDLIN(1081)																{
HXLINE(1081)																	Float t6 = area2;
HXDLIN(1081)																	 ::zpp_nape::shape::ZPP_Polygon _this68 = _this57;
HXDLIN(1081)																	_this68->localCOMx = (_this68->localCOMx * t6);
HXDLIN(1081)																	 ::zpp_nape::shape::ZPP_Polygon _this69 = _this57;
HXDLIN(1081)																	_this69->localCOMy = (_this69->localCOMy * t6);
            																}
            															}
            														}
            													}
HXDLIN(1081)													if (hx::IsNotNull( _this56->wrap_localCOM )) {
HXLINE(1081)														_this56->wrap_localCOM->zpp_inner->x = _this56->localCOMx;
HXDLIN(1081)														_this56->wrap_localCOM->zpp_inner->y = _this56->localCOMy;
            													}
            												}
HXDLIN(1081)												{
HXLINE(1081)													 ::zpp_nape::phys::ZPP_Body _this70 = _this56->body;
HXDLIN(1081)													if (_this70->zip_axis) {
HXLINE(1081)														_this70->zip_axis = false;
HXDLIN(1081)														{
HXLINE(1081)															_this70->axisx = ::Math_obj::sin(_this70->rot);
HXDLIN(1081)															_this70->axisy = ::Math_obj::cos(_this70->rot);
            														}
            													}
            												}
HXDLIN(1081)												{
HXLINE(1081)													_this56->worldCOMx = (_this56->body->posx + ((_this56->body->axisy * _this56->localCOMx) - (_this56->body->axisx * _this56->localCOMy)));
HXDLIN(1081)													_this56->worldCOMy = (_this56->body->posy + ((_this56->localCOMx * _this56->body->axisx) + (_this56->localCOMy * _this56->body->axisy)));
            												}
            											}
            										}
HXDLIN(1081)										Float rx1 = _this56->radius;
HXDLIN(1081)										Float ry1 = _this56->radius;
HXDLIN(1081)										{
HXLINE(1081)											_this56->aabb->minx = (_this56->worldCOMx - rx1);
HXDLIN(1081)											_this56->aabb->miny = (_this56->worldCOMy - ry1);
            										}
HXDLIN(1081)										{
HXLINE(1081)											_this56->aabb->maxx = (_this56->worldCOMx + rx1);
HXDLIN(1081)											_this56->aabb->maxy = (_this56->worldCOMy + ry1);
            										}
            									}
            									else {
HXLINE(1081)										 ::zpp_nape::shape::ZPP_Polygon _this71 = shape1->polygon;
HXDLIN(1081)										if (_this71->zip_gverts) {
HXLINE(1081)											if (hx::IsNotNull( _this71->body )) {
HXLINE(1081)												_this71->zip_gverts = false;
HXDLIN(1081)												_this71->validate_lverts();
HXDLIN(1081)												{
HXLINE(1081)													 ::zpp_nape::phys::ZPP_Body _this72 = _this71->body;
HXDLIN(1081)													if (_this72->zip_axis) {
HXLINE(1081)														_this72->zip_axis = false;
HXDLIN(1081)														{
HXLINE(1081)															_this72->axisx = ::Math_obj::sin(_this72->rot);
HXDLIN(1081)															_this72->axisy = ::Math_obj::cos(_this72->rot);
            														}
            													}
            												}
HXDLIN(1081)												 ::zpp_nape::geom::ZPP_Vec2 li1 = _this71->lverts->next;
HXDLIN(1081)												{
HXLINE(1081)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = _this71->gverts->next;
HXDLIN(1081)													while(hx::IsNotNull( cx_ite4 )){
HXLINE(1081)														 ::zpp_nape::geom::ZPP_Vec2 g7 = cx_ite4;
HXDLIN(1081)														{
HXLINE(1081)															 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN(1081)															li1 = li1->next;
HXDLIN(1081)															{
HXLINE(1081)																g7->x = (_this71->body->posx + ((_this71->body->axisy * l1->x) - (_this71->body->axisx * l1->y)));
HXDLIN(1081)																g7->y = (_this71->body->posy + ((l1->x * _this71->body->axisx) + (l1->y * _this71->body->axisy)));
            															}
            														}
HXDLIN(1081)														cx_ite4 = cx_ite4->next;
            													}
            												}
            											}
            										}
HXDLIN(1081)										if (hx::IsNull( _this71->lverts->next )) {
HXLINE(1081)											HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            										}
HXDLIN(1081)										 ::zpp_nape::geom::ZPP_Vec2 p01 = _this71->gverts->next;
HXDLIN(1081)										{
HXLINE(1081)											_this71->aabb->minx = p01->x;
HXDLIN(1081)											_this71->aabb->miny = p01->y;
            										}
HXDLIN(1081)										{
HXLINE(1081)											_this71->aabb->maxx = p01->x;
HXDLIN(1081)											_this71->aabb->maxy = p01->y;
            										}
HXDLIN(1081)										{
HXLINE(1081)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite5 = _this71->gverts->next->next;
HXDLIN(1081)											while(hx::IsNotNull( cx_ite5 )){
HXLINE(1081)												 ::zpp_nape::geom::ZPP_Vec2 p1 = cx_ite5;
HXDLIN(1081)												{
HXLINE(1081)													if ((p1->x < _this71->aabb->minx)) {
HXLINE(1081)														_this71->aabb->minx = p1->x;
            													}
HXDLIN(1081)													if ((p1->x > _this71->aabb->maxx)) {
HXLINE(1081)														_this71->aabb->maxx = p1->x;
            													}
HXDLIN(1081)													if ((p1->y < _this71->aabb->miny)) {
HXLINE(1081)														_this71->aabb->miny = p1->y;
            													}
HXDLIN(1081)													if ((p1->y > _this71->aabb->maxy)) {
HXLINE(1081)														_this71->aabb->maxy = p1->y;
            													}
            												}
HXDLIN(1081)												cx_ite5 = cx_ite5->next;
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE(1082)						{
HXLINE(1082)							 ::zpp_nape::geom::ZPP_AABB a29 = shape1->aabb;
HXDLIN(1082)							aabb1->minx = (a29->minx - ((Float)3.0));
HXDLIN(1082)							aabb1->miny = (a29->miny - ((Float)3.0));
HXDLIN(1082)							aabb1->maxx = (a29->maxx + ((Float)3.0));
HXDLIN(1082)							aabb1->maxy = (a29->maxy + ((Float)3.0));
            						}
HXLINE(1083)						 ::zpp_nape::space::ZPP_AABBTree tree4;
HXDLIN(1083)						bool tree5;
HXDLIN(1083)						if ((shape1->body->type == 1)) {
HXLINE(1083)							tree5 = false;
            						}
            						else {
HXLINE(1083)							tree5 = !(shape1->body->component->sleeping);
            						}
HXDLIN(1083)						if ((node85->dyn = tree5)) {
HXLINE(1083)							tree4 = this->dtree;
            						}
            						else {
HXLINE(1083)							tree4 = this->stree;
            						}
HXLINE(1084)						if (hx::IsNull( tree4->root )) {
HXLINE(1084)							tree4->root = node85;
HXDLIN(1084)							tree4->root->parent = null();
            						}
            						else {
HXLINE(1084)							 ::zpp_nape::geom::ZPP_AABB leafaabb1 = node85->aabb;
HXDLIN(1084)							 ::zpp_nape::space::ZPP_AABBNode node128 = tree4->root;
HXDLIN(1084)							while(hx::IsNotNull( node128->child1 )){
HXLINE(1084)								 ::zpp_nape::space::ZPP_AABBNode child14 = node128->child1;
HXDLIN(1084)								 ::zpp_nape::space::ZPP_AABBNode child24 = node128->child2;
HXDLIN(1084)								 ::zpp_nape::geom::ZPP_AABB _this73 = node128->aabb;
HXDLIN(1084)								Float area3 = (((_this73->maxx - _this73->minx) + (_this73->maxy - _this73->miny)) * ( (Float)(2) ));
HXDLIN(1084)								{
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this74 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB a30 = node128->aabb;
HXDLIN(1084)									Float _hx_tmp32;
HXDLIN(1084)									if ((a30->minx < leafaabb1->minx)) {
HXLINE(1084)										_hx_tmp32 = a30->minx;
            									}
            									else {
HXLINE(1084)										_hx_tmp32 = leafaabb1->minx;
            									}
HXDLIN(1084)									_this74->minx = _hx_tmp32;
HXDLIN(1084)									Float _hx_tmp33;
HXDLIN(1084)									if ((a30->miny < leafaabb1->miny)) {
HXLINE(1084)										_hx_tmp33 = a30->miny;
            									}
            									else {
HXLINE(1084)										_hx_tmp33 = leafaabb1->miny;
            									}
HXDLIN(1084)									_this74->miny = _hx_tmp33;
HXDLIN(1084)									Float _hx_tmp34;
HXDLIN(1084)									if ((a30->maxx > leafaabb1->maxx)) {
HXLINE(1084)										_hx_tmp34 = a30->maxx;
            									}
            									else {
HXLINE(1084)										_hx_tmp34 = leafaabb1->maxx;
            									}
HXDLIN(1084)									_this74->maxx = _hx_tmp34;
HXDLIN(1084)									Float _hx_tmp35;
HXDLIN(1084)									if ((a30->maxy > leafaabb1->maxy)) {
HXLINE(1084)										_hx_tmp35 = a30->maxy;
            									}
            									else {
HXLINE(1084)										_hx_tmp35 = leafaabb1->maxy;
            									}
HXDLIN(1084)									_this74->maxy = _hx_tmp35;
            								}
HXDLIN(1084)								 ::zpp_nape::geom::ZPP_AABB _this75 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)								Float carea1 = (((_this75->maxx - _this75->minx) + (_this75->maxy - _this75->miny)) * ( (Float)(2) ));
HXDLIN(1084)								Float cost3 = (( (Float)(2) ) * carea1);
HXDLIN(1084)								Float icost1 = (( (Float)(2) ) * (carea1 - area3));
HXDLIN(1084)								{
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this76 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB b33 = child14->aabb;
HXDLIN(1084)									Float _hx_tmp36;
HXDLIN(1084)									if ((leafaabb1->minx < b33->minx)) {
HXLINE(1084)										_hx_tmp36 = leafaabb1->minx;
            									}
            									else {
HXLINE(1084)										_hx_tmp36 = b33->minx;
            									}
HXDLIN(1084)									_this76->minx = _hx_tmp36;
HXDLIN(1084)									Float _hx_tmp37;
HXDLIN(1084)									if ((leafaabb1->miny < b33->miny)) {
HXLINE(1084)										_hx_tmp37 = leafaabb1->miny;
            									}
            									else {
HXLINE(1084)										_hx_tmp37 = b33->miny;
            									}
HXDLIN(1084)									_this76->miny = _hx_tmp37;
HXDLIN(1084)									Float _hx_tmp38;
HXDLIN(1084)									if ((leafaabb1->maxx > b33->maxx)) {
HXLINE(1084)										_hx_tmp38 = leafaabb1->maxx;
            									}
            									else {
HXLINE(1084)										_hx_tmp38 = b33->maxx;
            									}
HXDLIN(1084)									_this76->maxx = _hx_tmp38;
HXDLIN(1084)									Float _hx_tmp39;
HXDLIN(1084)									if ((leafaabb1->maxy > b33->maxy)) {
HXLINE(1084)										_hx_tmp39 = leafaabb1->maxy;
            									}
            									else {
HXLINE(1084)										_hx_tmp39 = b33->maxy;
            									}
HXDLIN(1084)									_this76->maxy = _hx_tmp39;
            								}
HXDLIN(1084)								Float cost11;
HXDLIN(1084)								if (hx::IsNull( child14->child1 )) {
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this77 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									cost11 = ((((_this77->maxx - _this77->minx) + (_this77->maxy - _this77->miny)) * ( (Float)(2) )) + icost1);
            								}
            								else {
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this78 = child14->aabb;
HXDLIN(1084)									Float oarea2 = (((_this78->maxx - _this78->minx) + (_this78->maxy - _this78->miny)) * ( (Float)(2) ));
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB _this79 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									Float narea2 = (((_this79->maxx - _this79->minx) + (_this79->maxy - _this79->miny)) * ( (Float)(2) ));
HXDLIN(1084)									cost11 = ((narea2 - oarea2) + icost1);
            								}
HXDLIN(1084)								{
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this80 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB b34 = child24->aabb;
HXDLIN(1084)									Float _hx_tmp40;
HXDLIN(1084)									if ((leafaabb1->minx < b34->minx)) {
HXLINE(1084)										_hx_tmp40 = leafaabb1->minx;
            									}
            									else {
HXLINE(1084)										_hx_tmp40 = b34->minx;
            									}
HXDLIN(1084)									_this80->minx = _hx_tmp40;
HXDLIN(1084)									Float _hx_tmp41;
HXDLIN(1084)									if ((leafaabb1->miny < b34->miny)) {
HXLINE(1084)										_hx_tmp41 = leafaabb1->miny;
            									}
            									else {
HXLINE(1084)										_hx_tmp41 = b34->miny;
            									}
HXDLIN(1084)									_this80->miny = _hx_tmp41;
HXDLIN(1084)									Float _hx_tmp42;
HXDLIN(1084)									if ((leafaabb1->maxx > b34->maxx)) {
HXLINE(1084)										_hx_tmp42 = leafaabb1->maxx;
            									}
            									else {
HXLINE(1084)										_hx_tmp42 = b34->maxx;
            									}
HXDLIN(1084)									_this80->maxx = _hx_tmp42;
HXDLIN(1084)									Float _hx_tmp43;
HXDLIN(1084)									if ((leafaabb1->maxy > b34->maxy)) {
HXLINE(1084)										_hx_tmp43 = leafaabb1->maxy;
            									}
            									else {
HXLINE(1084)										_hx_tmp43 = b34->maxy;
            									}
HXDLIN(1084)									_this80->maxy = _hx_tmp43;
            								}
HXDLIN(1084)								Float cost21;
HXDLIN(1084)								if (hx::IsNull( child24->child1 )) {
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this81 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									cost21 = ((((_this81->maxx - _this81->minx) + (_this81->maxy - _this81->miny)) * ( (Float)(2) )) + icost1);
            								}
            								else {
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this82 = child24->aabb;
HXDLIN(1084)									Float oarea3 = (((_this82->maxx - _this82->minx) + (_this82->maxy - _this82->miny)) * ( (Float)(2) ));
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB _this83 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1084)									Float narea3 = (((_this83->maxx - _this83->minx) + (_this83->maxy - _this83->miny)) * ( (Float)(2) ));
HXDLIN(1084)									cost21 = ((narea3 - oarea3) + icost1);
            								}
HXDLIN(1084)								bool _hx_tmp44;
HXDLIN(1084)								if ((cost3 < cost11)) {
HXLINE(1084)									_hx_tmp44 = (cost3 < cost21);
            								}
            								else {
HXLINE(1084)									_hx_tmp44 = false;
            								}
HXDLIN(1084)								if (_hx_tmp44) {
HXLINE(1084)									goto _hx_goto_24;
            								}
            								else {
HXLINE(1084)									if ((cost11 < cost21)) {
HXLINE(1084)										node128 = child14;
            									}
            									else {
HXLINE(1084)										node128 = child24;
            									}
            								}
            							}
            							_hx_goto_24:;
HXDLIN(1084)							 ::zpp_nape::space::ZPP_AABBNode sibling3 = node128;
HXDLIN(1084)							 ::zpp_nape::space::ZPP_AABBNode oparent1 = sibling3->parent;
HXDLIN(1084)							 ::zpp_nape::space::ZPP_AABBNode nparent1;
HXDLIN(1084)							{
HXLINE(1084)								if (hx::IsNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(1084)									nparent1 =  ::zpp_nape::space::ZPP_AABBNode_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1084)									nparent1 = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1084)									::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = nparent1->next;
HXDLIN(1084)									nparent1->next = null();
            								}
HXDLIN(1084)								{
HXLINE(1084)									if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE(1084)										nparent1->aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1084)										nparent1->aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1084)										::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = nparent1->aabb->next;
HXDLIN(1084)										nparent1->aabb->next = null();
            									}
HXDLIN(1084)									nparent1->moved = false;
HXDLIN(1084)									nparent1->synced = false;
HXDLIN(1084)									nparent1->first_sync = false;
            								}
            							}
HXDLIN(1084)							nparent1->parent = oparent1;
HXDLIN(1084)							{
HXLINE(1084)								 ::zpp_nape::geom::ZPP_AABB _this84 = nparent1->aabb;
HXDLIN(1084)								 ::zpp_nape::geom::ZPP_AABB b35 = sibling3->aabb;
HXDLIN(1084)								Float _hx_tmp45;
HXDLIN(1084)								if ((leafaabb1->minx < b35->minx)) {
HXLINE(1084)									_hx_tmp45 = leafaabb1->minx;
            								}
            								else {
HXLINE(1084)									_hx_tmp45 = b35->minx;
            								}
HXDLIN(1084)								_this84->minx = _hx_tmp45;
HXDLIN(1084)								Float _hx_tmp46;
HXDLIN(1084)								if ((leafaabb1->miny < b35->miny)) {
HXLINE(1084)									_hx_tmp46 = leafaabb1->miny;
            								}
            								else {
HXLINE(1084)									_hx_tmp46 = b35->miny;
            								}
HXDLIN(1084)								_this84->miny = _hx_tmp46;
HXDLIN(1084)								Float _hx_tmp47;
HXDLIN(1084)								if ((leafaabb1->maxx > b35->maxx)) {
HXLINE(1084)									_hx_tmp47 = leafaabb1->maxx;
            								}
            								else {
HXLINE(1084)									_hx_tmp47 = b35->maxx;
            								}
HXDLIN(1084)								_this84->maxx = _hx_tmp47;
HXDLIN(1084)								Float _hx_tmp48;
HXDLIN(1084)								if ((leafaabb1->maxy > b35->maxy)) {
HXLINE(1084)									_hx_tmp48 = leafaabb1->maxy;
            								}
            								else {
HXLINE(1084)									_hx_tmp48 = b35->maxy;
            								}
HXDLIN(1084)								_this84->maxy = _hx_tmp48;
            							}
HXDLIN(1084)							nparent1->height = (sibling3->height + 1);
HXDLIN(1084)							if (hx::IsNotNull( oparent1 )) {
HXLINE(1084)								if (hx::IsEq( oparent1->child1,sibling3 )) {
HXLINE(1084)									oparent1->child1 = nparent1;
            								}
            								else {
HXLINE(1084)									oparent1->child2 = nparent1;
            								}
HXDLIN(1084)								nparent1->child1 = sibling3;
HXDLIN(1084)								nparent1->child2 = node85;
HXDLIN(1084)								sibling3->parent = nparent1;
HXDLIN(1084)								node85->parent = nparent1;
            							}
            							else {
HXLINE(1084)								nparent1->child1 = sibling3;
HXDLIN(1084)								nparent1->child2 = node85;
HXDLIN(1084)								sibling3->parent = nparent1;
HXDLIN(1084)								node85->parent = nparent1;
HXDLIN(1084)								tree4->root = nparent1;
            							}
HXDLIN(1084)							node128 = node85->parent;
HXDLIN(1084)							while(hx::IsNotNull( node128 )){
HXLINE(1084)								bool node129;
HXDLIN(1084)								if (hx::IsNotNull( node128->child1 )) {
HXLINE(1084)									node129 = (node128->height < 2);
            								}
            								else {
HXLINE(1084)									node129 = true;
            								}
HXDLIN(1084)								if (node129) {
HXLINE(1084)									node128 = node128;
            								}
            								else {
HXLINE(1084)									 ::zpp_nape::space::ZPP_AABBNode b36 = node128->child1;
HXDLIN(1084)									 ::zpp_nape::space::ZPP_AABBNode c3 = node128->child2;
HXDLIN(1084)									int balance3 = (c3->height - b36->height);
HXDLIN(1084)									if ((balance3 > 1)) {
HXLINE(1084)										 ::zpp_nape::space::ZPP_AABBNode f6 = c3->child1;
HXDLIN(1084)										 ::zpp_nape::space::ZPP_AABBNode g8 = c3->child2;
HXDLIN(1084)										c3->child1 = node128;
HXDLIN(1084)										c3->parent = node128->parent;
HXDLIN(1084)										node128->parent = c3;
HXDLIN(1084)										if (hx::IsNotNull( c3->parent )) {
HXLINE(1084)											if (hx::IsEq( c3->parent->child1,node128 )) {
HXLINE(1084)												c3->parent->child1 = c3;
            											}
            											else {
HXLINE(1084)												c3->parent->child2 = c3;
            											}
            										}
            										else {
HXLINE(1084)											tree4->root = c3;
            										}
HXDLIN(1084)										if ((f6->height > g8->height)) {
HXLINE(1084)											c3->child2 = f6;
HXDLIN(1084)											node128->child2 = g8;
HXDLIN(1084)											g8->parent = node128;
HXDLIN(1084)											{
HXLINE(1084)												 ::zpp_nape::geom::ZPP_AABB _this85 = node128->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB a31 = b36->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB b37 = g8->aabb;
HXDLIN(1084)												Float node130;
HXDLIN(1084)												if ((a31->minx < b37->minx)) {
HXLINE(1084)													node130 = a31->minx;
            												}
            												else {
HXLINE(1084)													node130 = b37->minx;
            												}
HXDLIN(1084)												_this85->minx = node130;
HXDLIN(1084)												Float node131;
HXDLIN(1084)												if ((a31->miny < b37->miny)) {
HXLINE(1084)													node131 = a31->miny;
            												}
            												else {
HXLINE(1084)													node131 = b37->miny;
            												}
HXDLIN(1084)												_this85->miny = node131;
HXDLIN(1084)												Float node132;
HXDLIN(1084)												if ((a31->maxx > b37->maxx)) {
HXLINE(1084)													node132 = a31->maxx;
            												}
            												else {
HXLINE(1084)													node132 = b37->maxx;
            												}
HXDLIN(1084)												_this85->maxx = node132;
HXDLIN(1084)												Float node133;
HXDLIN(1084)												if ((a31->maxy > b37->maxy)) {
HXLINE(1084)													node133 = a31->maxy;
            												}
            												else {
HXLINE(1084)													node133 = b37->maxy;
            												}
HXDLIN(1084)												_this85->maxy = node133;
            											}
HXDLIN(1084)											{
HXLINE(1084)												 ::zpp_nape::geom::ZPP_AABB _this86 = c3->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB a32 = node128->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB b38 = f6->aabb;
HXDLIN(1084)												Float node134;
HXDLIN(1084)												if ((a32->minx < b38->minx)) {
HXLINE(1084)													node134 = a32->minx;
            												}
            												else {
HXLINE(1084)													node134 = b38->minx;
            												}
HXDLIN(1084)												_this86->minx = node134;
HXDLIN(1084)												Float node135;
HXDLIN(1084)												if ((a32->miny < b38->miny)) {
HXLINE(1084)													node135 = a32->miny;
            												}
            												else {
HXLINE(1084)													node135 = b38->miny;
            												}
HXDLIN(1084)												_this86->miny = node135;
HXDLIN(1084)												Float node136;
HXDLIN(1084)												if ((a32->maxx > b38->maxx)) {
HXLINE(1084)													node136 = a32->maxx;
            												}
            												else {
HXLINE(1084)													node136 = b38->maxx;
            												}
HXDLIN(1084)												_this86->maxx = node136;
HXDLIN(1084)												Float node137;
HXDLIN(1084)												if ((a32->maxy > b38->maxy)) {
HXLINE(1084)													node137 = a32->maxy;
            												}
            												else {
HXLINE(1084)													node137 = b38->maxy;
            												}
HXDLIN(1084)												_this86->maxy = node137;
            											}
HXDLIN(1084)											int x27 = b36->height;
HXDLIN(1084)											int y27 = g8->height;
HXDLIN(1084)											int node138;
HXDLIN(1084)											if ((x27 > y27)) {
HXLINE(1084)												node138 = x27;
            											}
            											else {
HXLINE(1084)												node138 = y27;
            											}
HXDLIN(1084)											node128->height = (1 + node138);
HXDLIN(1084)											int x28 = node128->height;
HXDLIN(1084)											int y28 = f6->height;
HXDLIN(1084)											int node139;
HXDLIN(1084)											if ((x28 > y28)) {
HXLINE(1084)												node139 = x28;
            											}
            											else {
HXLINE(1084)												node139 = y28;
            											}
HXDLIN(1084)											c3->height = (1 + node139);
            										}
            										else {
HXLINE(1084)											c3->child2 = g8;
HXDLIN(1084)											node128->child2 = f6;
HXDLIN(1084)											f6->parent = node128;
HXDLIN(1084)											{
HXLINE(1084)												 ::zpp_nape::geom::ZPP_AABB _this87 = node128->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB a33 = b36->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB b39 = f6->aabb;
HXDLIN(1084)												Float node140;
HXDLIN(1084)												if ((a33->minx < b39->minx)) {
HXLINE(1084)													node140 = a33->minx;
            												}
            												else {
HXLINE(1084)													node140 = b39->minx;
            												}
HXDLIN(1084)												_this87->minx = node140;
HXDLIN(1084)												Float node141;
HXDLIN(1084)												if ((a33->miny < b39->miny)) {
HXLINE(1084)													node141 = a33->miny;
            												}
            												else {
HXLINE(1084)													node141 = b39->miny;
            												}
HXDLIN(1084)												_this87->miny = node141;
HXDLIN(1084)												Float node142;
HXDLIN(1084)												if ((a33->maxx > b39->maxx)) {
HXLINE(1084)													node142 = a33->maxx;
            												}
            												else {
HXLINE(1084)													node142 = b39->maxx;
            												}
HXDLIN(1084)												_this87->maxx = node142;
HXDLIN(1084)												Float node143;
HXDLIN(1084)												if ((a33->maxy > b39->maxy)) {
HXLINE(1084)													node143 = a33->maxy;
            												}
            												else {
HXLINE(1084)													node143 = b39->maxy;
            												}
HXDLIN(1084)												_this87->maxy = node143;
            											}
HXDLIN(1084)											{
HXLINE(1084)												 ::zpp_nape::geom::ZPP_AABB _this88 = c3->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB a34 = node128->aabb;
HXDLIN(1084)												 ::zpp_nape::geom::ZPP_AABB b40 = g8->aabb;
HXDLIN(1084)												Float node144;
HXDLIN(1084)												if ((a34->minx < b40->minx)) {
HXLINE(1084)													node144 = a34->minx;
            												}
            												else {
HXLINE(1084)													node144 = b40->minx;
            												}
HXDLIN(1084)												_this88->minx = node144;
HXDLIN(1084)												Float node145;
HXDLIN(1084)												if ((a34->miny < b40->miny)) {
HXLINE(1084)													node145 = a34->miny;
            												}
            												else {
HXLINE(1084)													node145 = b40->miny;
            												}
HXDLIN(1084)												_this88->miny = node145;
HXDLIN(1084)												Float node146;
HXDLIN(1084)												if ((a34->maxx > b40->maxx)) {
HXLINE(1084)													node146 = a34->maxx;
            												}
            												else {
HXLINE(1084)													node146 = b40->maxx;
            												}
HXDLIN(1084)												_this88->maxx = node146;
HXDLIN(1084)												Float node147;
HXDLIN(1084)												if ((a34->maxy > b40->maxy)) {
HXLINE(1084)													node147 = a34->maxy;
            												}
            												else {
HXLINE(1084)													node147 = b40->maxy;
            												}
HXDLIN(1084)												_this88->maxy = node147;
            											}
HXDLIN(1084)											int x29 = b36->height;
HXDLIN(1084)											int y29 = f6->height;
HXDLIN(1084)											int node148;
HXDLIN(1084)											if ((x29 > y29)) {
HXLINE(1084)												node148 = x29;
            											}
            											else {
HXLINE(1084)												node148 = y29;
            											}
HXDLIN(1084)											node128->height = (1 + node148);
HXDLIN(1084)											int x30 = node128->height;
HXDLIN(1084)											int y30 = g8->height;
HXDLIN(1084)											int node149;
HXDLIN(1084)											if ((x30 > y30)) {
HXLINE(1084)												node149 = x30;
            											}
            											else {
HXLINE(1084)												node149 = y30;
            											}
HXDLIN(1084)											c3->height = (1 + node149);
            										}
HXDLIN(1084)										node128 = c3;
            									}
            									else {
HXLINE(1084)										if ((balance3 < -1)) {
HXLINE(1084)											 ::zpp_nape::space::ZPP_AABBNode f7 = b36->child1;
HXDLIN(1084)											 ::zpp_nape::space::ZPP_AABBNode g9 = b36->child2;
HXDLIN(1084)											b36->child1 = node128;
HXDLIN(1084)											b36->parent = node128->parent;
HXDLIN(1084)											node128->parent = b36;
HXDLIN(1084)											if (hx::IsNotNull( b36->parent )) {
HXLINE(1084)												if (hx::IsEq( b36->parent->child1,node128 )) {
HXLINE(1084)													b36->parent->child1 = b36;
            												}
            												else {
HXLINE(1084)													b36->parent->child2 = b36;
            												}
            											}
            											else {
HXLINE(1084)												tree4->root = b36;
            											}
HXDLIN(1084)											if ((f7->height > g9->height)) {
HXLINE(1084)												b36->child2 = f7;
HXDLIN(1084)												node128->child1 = g9;
HXDLIN(1084)												g9->parent = node128;
HXDLIN(1084)												{
HXLINE(1084)													 ::zpp_nape::geom::ZPP_AABB _this89 = node128->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB a35 = c3->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB b41 = g9->aabb;
HXDLIN(1084)													Float node150;
HXDLIN(1084)													if ((a35->minx < b41->minx)) {
HXLINE(1084)														node150 = a35->minx;
            													}
            													else {
HXLINE(1084)														node150 = b41->minx;
            													}
HXDLIN(1084)													_this89->minx = node150;
HXDLIN(1084)													Float node151;
HXDLIN(1084)													if ((a35->miny < b41->miny)) {
HXLINE(1084)														node151 = a35->miny;
            													}
            													else {
HXLINE(1084)														node151 = b41->miny;
            													}
HXDLIN(1084)													_this89->miny = node151;
HXDLIN(1084)													Float node152;
HXDLIN(1084)													if ((a35->maxx > b41->maxx)) {
HXLINE(1084)														node152 = a35->maxx;
            													}
            													else {
HXLINE(1084)														node152 = b41->maxx;
            													}
HXDLIN(1084)													_this89->maxx = node152;
HXDLIN(1084)													Float node153;
HXDLIN(1084)													if ((a35->maxy > b41->maxy)) {
HXLINE(1084)														node153 = a35->maxy;
            													}
            													else {
HXLINE(1084)														node153 = b41->maxy;
            													}
HXDLIN(1084)													_this89->maxy = node153;
            												}
HXDLIN(1084)												{
HXLINE(1084)													 ::zpp_nape::geom::ZPP_AABB _this90 = b36->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB a36 = node128->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB b42 = f7->aabb;
HXDLIN(1084)													Float node154;
HXDLIN(1084)													if ((a36->minx < b42->minx)) {
HXLINE(1084)														node154 = a36->minx;
            													}
            													else {
HXLINE(1084)														node154 = b42->minx;
            													}
HXDLIN(1084)													_this90->minx = node154;
HXDLIN(1084)													Float node155;
HXDLIN(1084)													if ((a36->miny < b42->miny)) {
HXLINE(1084)														node155 = a36->miny;
            													}
            													else {
HXLINE(1084)														node155 = b42->miny;
            													}
HXDLIN(1084)													_this90->miny = node155;
HXDLIN(1084)													Float node156;
HXDLIN(1084)													if ((a36->maxx > b42->maxx)) {
HXLINE(1084)														node156 = a36->maxx;
            													}
            													else {
HXLINE(1084)														node156 = b42->maxx;
            													}
HXDLIN(1084)													_this90->maxx = node156;
HXDLIN(1084)													Float node157;
HXDLIN(1084)													if ((a36->maxy > b42->maxy)) {
HXLINE(1084)														node157 = a36->maxy;
            													}
            													else {
HXLINE(1084)														node157 = b42->maxy;
            													}
HXDLIN(1084)													_this90->maxy = node157;
            												}
HXDLIN(1084)												int x31 = c3->height;
HXDLIN(1084)												int y31 = g9->height;
HXDLIN(1084)												int node158;
HXDLIN(1084)												if ((x31 > y31)) {
HXLINE(1084)													node158 = x31;
            												}
            												else {
HXLINE(1084)													node158 = y31;
            												}
HXDLIN(1084)												node128->height = (1 + node158);
HXDLIN(1084)												int x32 = node128->height;
HXDLIN(1084)												int y32 = f7->height;
HXDLIN(1084)												int node159;
HXDLIN(1084)												if ((x32 > y32)) {
HXLINE(1084)													node159 = x32;
            												}
            												else {
HXLINE(1084)													node159 = y32;
            												}
HXDLIN(1084)												b36->height = (1 + node159);
            											}
            											else {
HXLINE(1084)												b36->child2 = g9;
HXDLIN(1084)												node128->child1 = f7;
HXDLIN(1084)												f7->parent = node128;
HXDLIN(1084)												{
HXLINE(1084)													 ::zpp_nape::geom::ZPP_AABB _this91 = node128->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB a37 = c3->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB b43 = f7->aabb;
HXDLIN(1084)													Float node160;
HXDLIN(1084)													if ((a37->minx < b43->minx)) {
HXLINE(1084)														node160 = a37->minx;
            													}
            													else {
HXLINE(1084)														node160 = b43->minx;
            													}
HXDLIN(1084)													_this91->minx = node160;
HXDLIN(1084)													Float node161;
HXDLIN(1084)													if ((a37->miny < b43->miny)) {
HXLINE(1084)														node161 = a37->miny;
            													}
            													else {
HXLINE(1084)														node161 = b43->miny;
            													}
HXDLIN(1084)													_this91->miny = node161;
HXDLIN(1084)													Float node162;
HXDLIN(1084)													if ((a37->maxx > b43->maxx)) {
HXLINE(1084)														node162 = a37->maxx;
            													}
            													else {
HXLINE(1084)														node162 = b43->maxx;
            													}
HXDLIN(1084)													_this91->maxx = node162;
HXDLIN(1084)													Float node163;
HXDLIN(1084)													if ((a37->maxy > b43->maxy)) {
HXLINE(1084)														node163 = a37->maxy;
            													}
            													else {
HXLINE(1084)														node163 = b43->maxy;
            													}
HXDLIN(1084)													_this91->maxy = node163;
            												}
HXDLIN(1084)												{
HXLINE(1084)													 ::zpp_nape::geom::ZPP_AABB _this92 = b36->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB a38 = node128->aabb;
HXDLIN(1084)													 ::zpp_nape::geom::ZPP_AABB b44 = g9->aabb;
HXDLIN(1084)													Float node164;
HXDLIN(1084)													if ((a38->minx < b44->minx)) {
HXLINE(1084)														node164 = a38->minx;
            													}
            													else {
HXLINE(1084)														node164 = b44->minx;
            													}
HXDLIN(1084)													_this92->minx = node164;
HXDLIN(1084)													Float node165;
HXDLIN(1084)													if ((a38->miny < b44->miny)) {
HXLINE(1084)														node165 = a38->miny;
            													}
            													else {
HXLINE(1084)														node165 = b44->miny;
            													}
HXDLIN(1084)													_this92->miny = node165;
HXDLIN(1084)													Float node166;
HXDLIN(1084)													if ((a38->maxx > b44->maxx)) {
HXLINE(1084)														node166 = a38->maxx;
            													}
            													else {
HXLINE(1084)														node166 = b44->maxx;
            													}
HXDLIN(1084)													_this92->maxx = node166;
HXDLIN(1084)													Float node167;
HXDLIN(1084)													if ((a38->maxy > b44->maxy)) {
HXLINE(1084)														node167 = a38->maxy;
            													}
            													else {
HXLINE(1084)														node167 = b44->maxy;
            													}
HXDLIN(1084)													_this92->maxy = node167;
            												}
HXDLIN(1084)												int x33 = c3->height;
HXDLIN(1084)												int y33 = f7->height;
HXDLIN(1084)												int node168;
HXDLIN(1084)												if ((x33 > y33)) {
HXLINE(1084)													node168 = x33;
            												}
            												else {
HXLINE(1084)													node168 = y33;
            												}
HXDLIN(1084)												node128->height = (1 + node168);
HXDLIN(1084)												int x34 = node128->height;
HXDLIN(1084)												int y34 = g9->height;
HXDLIN(1084)												int node169;
HXDLIN(1084)												if ((x34 > y34)) {
HXLINE(1084)													node169 = x34;
            												}
            												else {
HXLINE(1084)													node169 = y34;
            												}
HXDLIN(1084)												b36->height = (1 + node169);
            											}
HXDLIN(1084)											node128 = b36;
            										}
            										else {
HXLINE(1084)											node128 = node128;
            										}
            									}
            								}
HXDLIN(1084)								 ::zpp_nape::space::ZPP_AABBNode child15 = node128->child1;
HXDLIN(1084)								 ::zpp_nape::space::ZPP_AABBNode child25 = node128->child2;
HXDLIN(1084)								int x35 = child15->height;
HXDLIN(1084)								int y35 = child25->height;
HXDLIN(1084)								int _hx_tmp49;
HXDLIN(1084)								if ((x35 > y35)) {
HXLINE(1084)									_hx_tmp49 = x35;
            								}
            								else {
HXLINE(1084)									_hx_tmp49 = y35;
            								}
HXDLIN(1084)								node128->height = (1 + _hx_tmp49);
HXDLIN(1084)								{
HXLINE(1084)									 ::zpp_nape::geom::ZPP_AABB _this93 = node128->aabb;
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB a39 = child15->aabb;
HXDLIN(1084)									 ::zpp_nape::geom::ZPP_AABB b45 = child25->aabb;
HXDLIN(1084)									Float _hx_tmp50;
HXDLIN(1084)									if ((a39->minx < b45->minx)) {
HXLINE(1084)										_hx_tmp50 = a39->minx;
            									}
            									else {
HXLINE(1084)										_hx_tmp50 = b45->minx;
            									}
HXDLIN(1084)									_this93->minx = _hx_tmp50;
HXDLIN(1084)									Float _hx_tmp51;
HXDLIN(1084)									if ((a39->miny < b45->miny)) {
HXLINE(1084)										_hx_tmp51 = a39->miny;
            									}
            									else {
HXLINE(1084)										_hx_tmp51 = b45->miny;
            									}
HXDLIN(1084)									_this93->miny = _hx_tmp51;
HXDLIN(1084)									Float _hx_tmp52;
HXDLIN(1084)									if ((a39->maxx > b45->maxx)) {
HXLINE(1084)										_hx_tmp52 = a39->maxx;
            									}
            									else {
HXLINE(1084)										_hx_tmp52 = b45->maxx;
            									}
HXDLIN(1084)									_this93->maxx = _hx_tmp52;
HXDLIN(1084)									Float _hx_tmp53;
HXDLIN(1084)									if ((a39->maxy > b45->maxy)) {
HXLINE(1084)										_hx_tmp53 = a39->maxy;
            									}
            									else {
HXLINE(1084)										_hx_tmp53 = b45->maxy;
            									}
HXDLIN(1084)									_this93->maxy = _hx_tmp53;
            								}
HXDLIN(1084)								node128 = node128->parent;
            							}
            						}
HXLINE(1085)						node85->synced = false;
            					}
HXLINE(1087)					if (!(node85->moved)) {
HXLINE(1088)						node85->moved = true;
HXLINE(1089)						{
HXLINE(1098)							node85->mnext = this->moves;
HXLINE(1099)							this->moves = node85;
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_DynAABBPhase_obj,sync_broadphase,(void))

void ZPP_DynAABBPhase_obj::broadphase( ::zpp_nape::space::ZPP_Space space,bool discrete){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_1106_broadphase)
HXLINE(1107)		 ::zpp_nape::space::ZPP_AABBNode node = this->syncs;
HXLINE(1108)		while(hx::IsNotNull( node )){
HXLINE(1109)			{
HXLINE(1110)				 ::zpp_nape::shape::ZPP_Shape shape = node->shape;
HXLINE(1127)				if (!(node->first_sync)) {
HXLINE(1128)					 ::zpp_nape::space::ZPP_AABBTree tree;
HXDLIN(1128)					if (node->dyn) {
HXLINE(1128)						tree = this->dtree;
            					}
            					else {
HXLINE(1128)						tree = this->stree;
            					}
HXLINE(1129)					if (hx::IsEq( node,tree->root )) {
HXLINE(1129)						tree->root = null();
            					}
            					else {
HXLINE(1129)						 ::zpp_nape::space::ZPP_AABBNode parent = node->parent;
HXDLIN(1129)						 ::zpp_nape::space::ZPP_AABBNode gparent = parent->parent;
HXDLIN(1129)						 ::zpp_nape::space::ZPP_AABBNode sibling;
HXDLIN(1129)						if (hx::IsEq( parent->child1,node )) {
HXLINE(1129)							sibling = parent->child2;
            						}
            						else {
HXLINE(1129)							sibling = parent->child1;
            						}
HXDLIN(1129)						if (hx::IsNotNull( gparent )) {
HXLINE(1129)							if (hx::IsEq( gparent->child1,parent )) {
HXLINE(1129)								gparent->child1 = sibling;
            							}
            							else {
HXLINE(1129)								gparent->child2 = sibling;
            							}
HXDLIN(1129)							sibling->parent = gparent;
HXDLIN(1129)							{
HXLINE(1129)								 ::zpp_nape::space::ZPP_AABBNode o = parent;
HXDLIN(1129)								{
HXLINE(1129)									o->height = -1;
HXDLIN(1129)									{
HXLINE(1129)										 ::zpp_nape::geom::ZPP_AABB o1 = o->aabb;
HXDLIN(1129)										{
HXLINE(1129)											if (hx::IsNotNull( o1->outer )) {
HXLINE(1129)												o1->outer->zpp_inner = null();
HXDLIN(1129)												o1->outer = null();
            											}
HXDLIN(1129)											o1->wrap_min = (o1->wrap_max = null());
HXDLIN(1129)											o1->_invalidate = null();
HXDLIN(1129)											o1->_validate = null();
            										}
HXDLIN(1129)										o1->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1129)										::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o1;
            									}
HXDLIN(1129)									o->child1 = (o->child2 = (o->parent = null()));
HXDLIN(1129)									o->next = null();
HXDLIN(1129)									o->snext = null();
HXDLIN(1129)									o->mnext = null();
            								}
HXDLIN(1129)								o->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1129)								::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o;
            							}
HXDLIN(1129)							 ::zpp_nape::space::ZPP_AABBNode node1 = gparent;
HXDLIN(1129)							while(hx::IsNotNull( node1 )){
HXLINE(1129)								bool node2;
HXDLIN(1129)								if (hx::IsNotNull( node1->child1 )) {
HXLINE(1129)									node2 = (node1->height < 2);
            								}
            								else {
HXLINE(1129)									node2 = true;
            								}
HXDLIN(1129)								if (node2) {
HXLINE(1129)									node1 = node1;
            								}
            								else {
HXLINE(1129)									 ::zpp_nape::space::ZPP_AABBNode b = node1->child1;
HXDLIN(1129)									 ::zpp_nape::space::ZPP_AABBNode c = node1->child2;
HXDLIN(1129)									int balance = (c->height - b->height);
HXDLIN(1129)									if ((balance > 1)) {
HXLINE(1129)										 ::zpp_nape::space::ZPP_AABBNode f = c->child1;
HXDLIN(1129)										 ::zpp_nape::space::ZPP_AABBNode g = c->child2;
HXDLIN(1129)										c->child1 = node1;
HXDLIN(1129)										c->parent = node1->parent;
HXDLIN(1129)										node1->parent = c;
HXDLIN(1129)										if (hx::IsNotNull( c->parent )) {
HXLINE(1129)											if (hx::IsEq( c->parent->child1,node1 )) {
HXLINE(1129)												c->parent->child1 = c;
            											}
            											else {
HXLINE(1129)												c->parent->child2 = c;
            											}
            										}
            										else {
HXLINE(1129)											tree->root = c;
            										}
HXDLIN(1129)										if ((f->height > g->height)) {
HXLINE(1129)											c->child2 = f;
HXDLIN(1129)											node1->child2 = g;
HXDLIN(1129)											g->parent = node1;
HXDLIN(1129)											{
HXLINE(1129)												 ::zpp_nape::geom::ZPP_AABB _this = node1->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB a = b->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB b1 = g->aabb;
HXDLIN(1129)												Float node3;
HXDLIN(1129)												if ((a->minx < b1->minx)) {
HXLINE(1129)													node3 = a->minx;
            												}
            												else {
HXLINE(1129)													node3 = b1->minx;
            												}
HXDLIN(1129)												_this->minx = node3;
HXDLIN(1129)												Float node4;
HXDLIN(1129)												if ((a->miny < b1->miny)) {
HXLINE(1129)													node4 = a->miny;
            												}
            												else {
HXLINE(1129)													node4 = b1->miny;
            												}
HXDLIN(1129)												_this->miny = node4;
HXDLIN(1129)												Float node5;
HXDLIN(1129)												if ((a->maxx > b1->maxx)) {
HXLINE(1129)													node5 = a->maxx;
            												}
            												else {
HXLINE(1129)													node5 = b1->maxx;
            												}
HXDLIN(1129)												_this->maxx = node5;
HXDLIN(1129)												Float node6;
HXDLIN(1129)												if ((a->maxy > b1->maxy)) {
HXLINE(1129)													node6 = a->maxy;
            												}
            												else {
HXLINE(1129)													node6 = b1->maxy;
            												}
HXDLIN(1129)												_this->maxy = node6;
            											}
HXDLIN(1129)											{
HXLINE(1129)												 ::zpp_nape::geom::ZPP_AABB _this1 = c->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB a1 = node1->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB b2 = f->aabb;
HXDLIN(1129)												Float node7;
HXDLIN(1129)												if ((a1->minx < b2->minx)) {
HXLINE(1129)													node7 = a1->minx;
            												}
            												else {
HXLINE(1129)													node7 = b2->minx;
            												}
HXDLIN(1129)												_this1->minx = node7;
HXDLIN(1129)												Float node8;
HXDLIN(1129)												if ((a1->miny < b2->miny)) {
HXLINE(1129)													node8 = a1->miny;
            												}
            												else {
HXLINE(1129)													node8 = b2->miny;
            												}
HXDLIN(1129)												_this1->miny = node8;
HXDLIN(1129)												Float node9;
HXDLIN(1129)												if ((a1->maxx > b2->maxx)) {
HXLINE(1129)													node9 = a1->maxx;
            												}
            												else {
HXLINE(1129)													node9 = b2->maxx;
            												}
HXDLIN(1129)												_this1->maxx = node9;
HXDLIN(1129)												Float node10;
HXDLIN(1129)												if ((a1->maxy > b2->maxy)) {
HXLINE(1129)													node10 = a1->maxy;
            												}
            												else {
HXLINE(1129)													node10 = b2->maxy;
            												}
HXDLIN(1129)												_this1->maxy = node10;
            											}
HXDLIN(1129)											int x = b->height;
HXDLIN(1129)											int y = g->height;
HXDLIN(1129)											int node11;
HXDLIN(1129)											if ((x > y)) {
HXLINE(1129)												node11 = x;
            											}
            											else {
HXLINE(1129)												node11 = y;
            											}
HXDLIN(1129)											node1->height = (1 + node11);
HXDLIN(1129)											int x1 = node1->height;
HXDLIN(1129)											int y1 = f->height;
HXDLIN(1129)											int node12;
HXDLIN(1129)											if ((x1 > y1)) {
HXLINE(1129)												node12 = x1;
            											}
            											else {
HXLINE(1129)												node12 = y1;
            											}
HXDLIN(1129)											c->height = (1 + node12);
            										}
            										else {
HXLINE(1129)											c->child2 = g;
HXDLIN(1129)											node1->child2 = f;
HXDLIN(1129)											f->parent = node1;
HXDLIN(1129)											{
HXLINE(1129)												 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB a2 = b->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB b3 = f->aabb;
HXDLIN(1129)												Float node13;
HXDLIN(1129)												if ((a2->minx < b3->minx)) {
HXLINE(1129)													node13 = a2->minx;
            												}
            												else {
HXLINE(1129)													node13 = b3->minx;
            												}
HXDLIN(1129)												_this2->minx = node13;
HXDLIN(1129)												Float node14;
HXDLIN(1129)												if ((a2->miny < b3->miny)) {
HXLINE(1129)													node14 = a2->miny;
            												}
            												else {
HXLINE(1129)													node14 = b3->miny;
            												}
HXDLIN(1129)												_this2->miny = node14;
HXDLIN(1129)												Float node15;
HXDLIN(1129)												if ((a2->maxx > b3->maxx)) {
HXLINE(1129)													node15 = a2->maxx;
            												}
            												else {
HXLINE(1129)													node15 = b3->maxx;
            												}
HXDLIN(1129)												_this2->maxx = node15;
HXDLIN(1129)												Float node16;
HXDLIN(1129)												if ((a2->maxy > b3->maxy)) {
HXLINE(1129)													node16 = a2->maxy;
            												}
            												else {
HXLINE(1129)													node16 = b3->maxy;
            												}
HXDLIN(1129)												_this2->maxy = node16;
            											}
HXDLIN(1129)											{
HXLINE(1129)												 ::zpp_nape::geom::ZPP_AABB _this3 = c->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB a3 = node1->aabb;
HXDLIN(1129)												 ::zpp_nape::geom::ZPP_AABB b4 = g->aabb;
HXDLIN(1129)												Float node17;
HXDLIN(1129)												if ((a3->minx < b4->minx)) {
HXLINE(1129)													node17 = a3->minx;
            												}
            												else {
HXLINE(1129)													node17 = b4->minx;
            												}
HXDLIN(1129)												_this3->minx = node17;
HXDLIN(1129)												Float node18;
HXDLIN(1129)												if ((a3->miny < b4->miny)) {
HXLINE(1129)													node18 = a3->miny;
            												}
            												else {
HXLINE(1129)													node18 = b4->miny;
            												}
HXDLIN(1129)												_this3->miny = node18;
HXDLIN(1129)												Float node19;
HXDLIN(1129)												if ((a3->maxx > b4->maxx)) {
HXLINE(1129)													node19 = a3->maxx;
            												}
            												else {
HXLINE(1129)													node19 = b4->maxx;
            												}
HXDLIN(1129)												_this3->maxx = node19;
HXDLIN(1129)												Float node20;
HXDLIN(1129)												if ((a3->maxy > b4->maxy)) {
HXLINE(1129)													node20 = a3->maxy;
            												}
            												else {
HXLINE(1129)													node20 = b4->maxy;
            												}
HXDLIN(1129)												_this3->maxy = node20;
            											}
HXDLIN(1129)											int x2 = b->height;
HXDLIN(1129)											int y2 = f->height;
HXDLIN(1129)											int node21;
HXDLIN(1129)											if ((x2 > y2)) {
HXLINE(1129)												node21 = x2;
            											}
            											else {
HXLINE(1129)												node21 = y2;
            											}
HXDLIN(1129)											node1->height = (1 + node21);
HXDLIN(1129)											int x3 = node1->height;
HXDLIN(1129)											int y3 = g->height;
HXDLIN(1129)											int node22;
HXDLIN(1129)											if ((x3 > y3)) {
HXLINE(1129)												node22 = x3;
            											}
            											else {
HXLINE(1129)												node22 = y3;
            											}
HXDLIN(1129)											c->height = (1 + node22);
            										}
HXDLIN(1129)										node1 = c;
            									}
            									else {
HXLINE(1129)										if ((balance < -1)) {
HXLINE(1129)											 ::zpp_nape::space::ZPP_AABBNode f1 = b->child1;
HXDLIN(1129)											 ::zpp_nape::space::ZPP_AABBNode g1 = b->child2;
HXDLIN(1129)											b->child1 = node1;
HXDLIN(1129)											b->parent = node1->parent;
HXDLIN(1129)											node1->parent = b;
HXDLIN(1129)											if (hx::IsNotNull( b->parent )) {
HXLINE(1129)												if (hx::IsEq( b->parent->child1,node1 )) {
HXLINE(1129)													b->parent->child1 = b;
            												}
            												else {
HXLINE(1129)													b->parent->child2 = b;
            												}
            											}
            											else {
HXLINE(1129)												tree->root = b;
            											}
HXDLIN(1129)											if ((f1->height > g1->height)) {
HXLINE(1129)												b->child2 = f1;
HXDLIN(1129)												node1->child1 = g1;
HXDLIN(1129)												g1->parent = node1;
HXDLIN(1129)												{
HXLINE(1129)													 ::zpp_nape::geom::ZPP_AABB _this4 = node1->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB a4 = c->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB b5 = g1->aabb;
HXDLIN(1129)													Float node23;
HXDLIN(1129)													if ((a4->minx < b5->minx)) {
HXLINE(1129)														node23 = a4->minx;
            													}
            													else {
HXLINE(1129)														node23 = b5->minx;
            													}
HXDLIN(1129)													_this4->minx = node23;
HXDLIN(1129)													Float node24;
HXDLIN(1129)													if ((a4->miny < b5->miny)) {
HXLINE(1129)														node24 = a4->miny;
            													}
            													else {
HXLINE(1129)														node24 = b5->miny;
            													}
HXDLIN(1129)													_this4->miny = node24;
HXDLIN(1129)													Float node25;
HXDLIN(1129)													if ((a4->maxx > b5->maxx)) {
HXLINE(1129)														node25 = a4->maxx;
            													}
            													else {
HXLINE(1129)														node25 = b5->maxx;
            													}
HXDLIN(1129)													_this4->maxx = node25;
HXDLIN(1129)													Float node26;
HXDLIN(1129)													if ((a4->maxy > b5->maxy)) {
HXLINE(1129)														node26 = a4->maxy;
            													}
            													else {
HXLINE(1129)														node26 = b5->maxy;
            													}
HXDLIN(1129)													_this4->maxy = node26;
            												}
HXDLIN(1129)												{
HXLINE(1129)													 ::zpp_nape::geom::ZPP_AABB _this5 = b->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB a5 = node1->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB b6 = f1->aabb;
HXDLIN(1129)													Float node27;
HXDLIN(1129)													if ((a5->minx < b6->minx)) {
HXLINE(1129)														node27 = a5->minx;
            													}
            													else {
HXLINE(1129)														node27 = b6->minx;
            													}
HXDLIN(1129)													_this5->minx = node27;
HXDLIN(1129)													Float node28;
HXDLIN(1129)													if ((a5->miny < b6->miny)) {
HXLINE(1129)														node28 = a5->miny;
            													}
            													else {
HXLINE(1129)														node28 = b6->miny;
            													}
HXDLIN(1129)													_this5->miny = node28;
HXDLIN(1129)													Float node29;
HXDLIN(1129)													if ((a5->maxx > b6->maxx)) {
HXLINE(1129)														node29 = a5->maxx;
            													}
            													else {
HXLINE(1129)														node29 = b6->maxx;
            													}
HXDLIN(1129)													_this5->maxx = node29;
HXDLIN(1129)													Float node30;
HXDLIN(1129)													if ((a5->maxy > b6->maxy)) {
HXLINE(1129)														node30 = a5->maxy;
            													}
            													else {
HXLINE(1129)														node30 = b6->maxy;
            													}
HXDLIN(1129)													_this5->maxy = node30;
            												}
HXDLIN(1129)												int x4 = c->height;
HXDLIN(1129)												int y4 = g1->height;
HXDLIN(1129)												int node31;
HXDLIN(1129)												if ((x4 > y4)) {
HXLINE(1129)													node31 = x4;
            												}
            												else {
HXLINE(1129)													node31 = y4;
            												}
HXDLIN(1129)												node1->height = (1 + node31);
HXDLIN(1129)												int x5 = node1->height;
HXDLIN(1129)												int y5 = f1->height;
HXDLIN(1129)												int node32;
HXDLIN(1129)												if ((x5 > y5)) {
HXLINE(1129)													node32 = x5;
            												}
            												else {
HXLINE(1129)													node32 = y5;
            												}
HXDLIN(1129)												b->height = (1 + node32);
            											}
            											else {
HXLINE(1129)												b->child2 = g1;
HXDLIN(1129)												node1->child1 = f1;
HXDLIN(1129)												f1->parent = node1;
HXDLIN(1129)												{
HXLINE(1129)													 ::zpp_nape::geom::ZPP_AABB _this6 = node1->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB a6 = c->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB b7 = f1->aabb;
HXDLIN(1129)													Float node33;
HXDLIN(1129)													if ((a6->minx < b7->minx)) {
HXLINE(1129)														node33 = a6->minx;
            													}
            													else {
HXLINE(1129)														node33 = b7->minx;
            													}
HXDLIN(1129)													_this6->minx = node33;
HXDLIN(1129)													Float node34;
HXDLIN(1129)													if ((a6->miny < b7->miny)) {
HXLINE(1129)														node34 = a6->miny;
            													}
            													else {
HXLINE(1129)														node34 = b7->miny;
            													}
HXDLIN(1129)													_this6->miny = node34;
HXDLIN(1129)													Float node35;
HXDLIN(1129)													if ((a6->maxx > b7->maxx)) {
HXLINE(1129)														node35 = a6->maxx;
            													}
            													else {
HXLINE(1129)														node35 = b7->maxx;
            													}
HXDLIN(1129)													_this6->maxx = node35;
HXDLIN(1129)													Float node36;
HXDLIN(1129)													if ((a6->maxy > b7->maxy)) {
HXLINE(1129)														node36 = a6->maxy;
            													}
            													else {
HXLINE(1129)														node36 = b7->maxy;
            													}
HXDLIN(1129)													_this6->maxy = node36;
            												}
HXDLIN(1129)												{
HXLINE(1129)													 ::zpp_nape::geom::ZPP_AABB _this7 = b->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB a7 = node1->aabb;
HXDLIN(1129)													 ::zpp_nape::geom::ZPP_AABB b8 = g1->aabb;
HXDLIN(1129)													Float node37;
HXDLIN(1129)													if ((a7->minx < b8->minx)) {
HXLINE(1129)														node37 = a7->minx;
            													}
            													else {
HXLINE(1129)														node37 = b8->minx;
            													}
HXDLIN(1129)													_this7->minx = node37;
HXDLIN(1129)													Float node38;
HXDLIN(1129)													if ((a7->miny < b8->miny)) {
HXLINE(1129)														node38 = a7->miny;
            													}
            													else {
HXLINE(1129)														node38 = b8->miny;
            													}
HXDLIN(1129)													_this7->miny = node38;
HXDLIN(1129)													Float node39;
HXDLIN(1129)													if ((a7->maxx > b8->maxx)) {
HXLINE(1129)														node39 = a7->maxx;
            													}
            													else {
HXLINE(1129)														node39 = b8->maxx;
            													}
HXDLIN(1129)													_this7->maxx = node39;
HXDLIN(1129)													Float node40;
HXDLIN(1129)													if ((a7->maxy > b8->maxy)) {
HXLINE(1129)														node40 = a7->maxy;
            													}
            													else {
HXLINE(1129)														node40 = b8->maxy;
            													}
HXDLIN(1129)													_this7->maxy = node40;
            												}
HXDLIN(1129)												int x6 = c->height;
HXDLIN(1129)												int y6 = f1->height;
HXDLIN(1129)												int node41;
HXDLIN(1129)												if ((x6 > y6)) {
HXLINE(1129)													node41 = x6;
            												}
            												else {
HXLINE(1129)													node41 = y6;
            												}
HXDLIN(1129)												node1->height = (1 + node41);
HXDLIN(1129)												int x7 = node1->height;
HXDLIN(1129)												int y7 = g1->height;
HXDLIN(1129)												int node42;
HXDLIN(1129)												if ((x7 > y7)) {
HXLINE(1129)													node42 = x7;
            												}
            												else {
HXLINE(1129)													node42 = y7;
            												}
HXDLIN(1129)												b->height = (1 + node42);
            											}
HXDLIN(1129)											node1 = b;
            										}
            										else {
HXLINE(1129)											node1 = node1;
            										}
            									}
            								}
HXDLIN(1129)								 ::zpp_nape::space::ZPP_AABBNode child1 = node1->child1;
HXDLIN(1129)								 ::zpp_nape::space::ZPP_AABBNode child2 = node1->child2;
HXDLIN(1129)								{
HXLINE(1129)									 ::zpp_nape::geom::ZPP_AABB _this8 = node1->aabb;
HXDLIN(1129)									 ::zpp_nape::geom::ZPP_AABB a8 = child1->aabb;
HXDLIN(1129)									 ::zpp_nape::geom::ZPP_AABB b9 = child2->aabb;
HXDLIN(1129)									Float _hx_tmp;
HXDLIN(1129)									if ((a8->minx < b9->minx)) {
HXLINE(1129)										_hx_tmp = a8->minx;
            									}
            									else {
HXLINE(1129)										_hx_tmp = b9->minx;
            									}
HXDLIN(1129)									_this8->minx = _hx_tmp;
HXDLIN(1129)									Float _hx_tmp1;
HXDLIN(1129)									if ((a8->miny < b9->miny)) {
HXLINE(1129)										_hx_tmp1 = a8->miny;
            									}
            									else {
HXLINE(1129)										_hx_tmp1 = b9->miny;
            									}
HXDLIN(1129)									_this8->miny = _hx_tmp1;
HXDLIN(1129)									Float _hx_tmp2;
HXDLIN(1129)									if ((a8->maxx > b9->maxx)) {
HXLINE(1129)										_hx_tmp2 = a8->maxx;
            									}
            									else {
HXLINE(1129)										_hx_tmp2 = b9->maxx;
            									}
HXDLIN(1129)									_this8->maxx = _hx_tmp2;
HXDLIN(1129)									Float _hx_tmp3;
HXDLIN(1129)									if ((a8->maxy > b9->maxy)) {
HXLINE(1129)										_hx_tmp3 = a8->maxy;
            									}
            									else {
HXLINE(1129)										_hx_tmp3 = b9->maxy;
            									}
HXDLIN(1129)									_this8->maxy = _hx_tmp3;
            								}
HXDLIN(1129)								int x8 = child1->height;
HXDLIN(1129)								int y8 = child2->height;
HXDLIN(1129)								int _hx_tmp4;
HXDLIN(1129)								if ((x8 > y8)) {
HXLINE(1129)									_hx_tmp4 = x8;
            								}
            								else {
HXLINE(1129)									_hx_tmp4 = y8;
            								}
HXDLIN(1129)								node1->height = (1 + _hx_tmp4);
HXDLIN(1129)								node1 = node1->parent;
            							}
            						}
            						else {
HXLINE(1129)							tree->root = sibling;
HXDLIN(1129)							sibling->parent = null();
HXDLIN(1129)							{
HXLINE(1129)								 ::zpp_nape::space::ZPP_AABBNode o2 = parent;
HXDLIN(1129)								{
HXLINE(1129)									o2->height = -1;
HXDLIN(1129)									{
HXLINE(1129)										 ::zpp_nape::geom::ZPP_AABB o3 = o2->aabb;
HXDLIN(1129)										{
HXLINE(1129)											if (hx::IsNotNull( o3->outer )) {
HXLINE(1129)												o3->outer->zpp_inner = null();
HXDLIN(1129)												o3->outer = null();
            											}
HXDLIN(1129)											o3->wrap_min = (o3->wrap_max = null());
HXDLIN(1129)											o3->_invalidate = null();
HXDLIN(1129)											o3->_validate = null();
            										}
HXDLIN(1129)										o3->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1129)										::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o3;
            									}
HXDLIN(1129)									o2->child1 = (o2->child2 = (o2->parent = null()));
HXDLIN(1129)									o2->next = null();
HXDLIN(1129)									o2->snext = null();
HXDLIN(1129)									o2->mnext = null();
            								}
HXDLIN(1129)								o2->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1129)								::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = o2;
            							}
            						}
            					}
            				}
            				else {
HXLINE(1131)					node->first_sync = false;
            				}
HXLINE(1132)				 ::zpp_nape::geom::ZPP_AABB aabb = node->aabb;
HXLINE(1133)				if (!(space->continuous)) {
HXLINE(1133)					if (shape->zip_aabb) {
HXLINE(1133)						if (hx::IsNotNull( shape->body )) {
HXLINE(1133)							shape->zip_aabb = false;
HXDLIN(1133)							if ((shape->type == 0)) {
HXLINE(1133)								 ::zpp_nape::shape::ZPP_Circle _this9 = shape->circle;
HXDLIN(1133)								if (_this9->zip_worldCOM) {
HXLINE(1133)									if (hx::IsNotNull( _this9->body )) {
HXLINE(1133)										_this9->zip_worldCOM = false;
HXDLIN(1133)										if (_this9->zip_localCOM) {
HXLINE(1133)											_this9->zip_localCOM = false;
HXDLIN(1133)											if ((_this9->type == 1)) {
HXLINE(1133)												 ::zpp_nape::shape::ZPP_Polygon _this10 = _this9->polygon;
HXDLIN(1133)												if (hx::IsNull( _this10->lverts->next )) {
HXLINE(1133)													HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            												}
HXDLIN(1133)												if (hx::IsNull( _this10->lverts->next->next )) {
HXLINE(1133)													_this10->localCOMx = _this10->lverts->next->x;
HXDLIN(1133)													_this10->localCOMy = _this10->lverts->next->y;
            												}
            												else {
HXLINE(1133)													if (hx::IsNull( _this10->lverts->next->next->next )) {
HXLINE(1133)														{
HXLINE(1133)															_this10->localCOMx = _this10->lverts->next->x;
HXDLIN(1133)															_this10->localCOMy = _this10->lverts->next->y;
            														}
HXDLIN(1133)														{
HXLINE(1133)															Float t = ((Float)1.0);
HXDLIN(1133)															 ::zpp_nape::shape::ZPP_Polygon _this11 = _this10;
HXDLIN(1133)															_this11->localCOMx = (_this11->localCOMx + (_this10->lverts->next->next->x * t));
HXDLIN(1133)															 ::zpp_nape::shape::ZPP_Polygon _this12 = _this10;
HXDLIN(1133)															_this12->localCOMy = (_this12->localCOMy + (_this10->lverts->next->next->y * t));
            														}
HXDLIN(1133)														{
HXLINE(1133)															Float t1 = ((Float)0.5);
HXDLIN(1133)															 ::zpp_nape::shape::ZPP_Polygon _this13 = _this10;
HXDLIN(1133)															_this13->localCOMx = (_this13->localCOMx * t1);
HXDLIN(1133)															 ::zpp_nape::shape::ZPP_Polygon _this14 = _this10;
HXDLIN(1133)															_this14->localCOMy = (_this14->localCOMy * t1);
            														}
            													}
            													else {
HXLINE(1133)														{
HXLINE(1133)															_this10->localCOMx = ( (Float)(0) );
HXDLIN(1133)															_this10->localCOMy = ( (Float)(0) );
            														}
HXDLIN(1133)														Float area = ((Float)0.0);
HXDLIN(1133)														{
HXLINE(1133)															 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this10->lverts->next;
HXDLIN(1133)															 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(1133)															cx_ite = cx_ite->next;
HXDLIN(1133)															 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(1133)															cx_ite = cx_ite->next;
HXDLIN(1133)															while(hx::IsNotNull( cx_ite )){
HXLINE(1133)																 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(1133)																{
HXLINE(1133)																	area = (area + (v->x * (w->y - u->y)));
HXDLIN(1133)																	Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1133)																	 ::zpp_nape::shape::ZPP_Polygon _this15 = _this10;
HXDLIN(1133)																	_this15->localCOMx = (_this15->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1133)																	 ::zpp_nape::shape::ZPP_Polygon _this16 = _this10;
HXDLIN(1133)																	_this16->localCOMy = (_this16->localCOMy + ((v->y + w->y) * cf));
            																}
HXDLIN(1133)																u = v;
HXDLIN(1133)																v = w;
HXDLIN(1133)																cx_ite = cx_ite->next;
            															}
HXDLIN(1133)															cx_ite = _this10->lverts->next;
HXDLIN(1133)															 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(1133)															{
HXLINE(1133)																area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1133)																Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1133)																 ::zpp_nape::shape::ZPP_Polygon _this17 = _this10;
HXDLIN(1133)																_this17->localCOMx = (_this17->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1133)																 ::zpp_nape::shape::ZPP_Polygon _this18 = _this10;
HXDLIN(1133)																_this18->localCOMy = (_this18->localCOMy + ((v->y + w1->y) * cf1));
            															}
HXDLIN(1133)															u = v;
HXDLIN(1133)															v = w1;
HXDLIN(1133)															cx_ite = cx_ite->next;
HXDLIN(1133)															 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(1133)															{
HXLINE(1133)																area = (area + (v->x * (w2->y - u->y)));
HXDLIN(1133)																Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(1133)																 ::zpp_nape::shape::ZPP_Polygon _this19 = _this10;
HXDLIN(1133)																_this19->localCOMx = (_this19->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(1133)																 ::zpp_nape::shape::ZPP_Polygon _this20 = _this10;
HXDLIN(1133)																_this20->localCOMy = (_this20->localCOMy + ((v->y + w2->y) * cf2));
            															}
            														}
HXDLIN(1133)														area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(1133)														{
HXLINE(1133)															Float t2 = area;
HXDLIN(1133)															 ::zpp_nape::shape::ZPP_Polygon _this21 = _this10;
HXDLIN(1133)															_this21->localCOMx = (_this21->localCOMx * t2);
HXDLIN(1133)															 ::zpp_nape::shape::ZPP_Polygon _this22 = _this10;
HXDLIN(1133)															_this22->localCOMy = (_this22->localCOMy * t2);
            														}
            													}
            												}
            											}
HXDLIN(1133)											if (hx::IsNotNull( _this9->wrap_localCOM )) {
HXLINE(1133)												_this9->wrap_localCOM->zpp_inner->x = _this9->localCOMx;
HXDLIN(1133)												_this9->wrap_localCOM->zpp_inner->y = _this9->localCOMy;
            											}
            										}
HXDLIN(1133)										{
HXLINE(1133)											 ::zpp_nape::phys::ZPP_Body _this23 = _this9->body;
HXDLIN(1133)											if (_this23->zip_axis) {
HXLINE(1133)												_this23->zip_axis = false;
HXDLIN(1133)												{
HXLINE(1133)													_this23->axisx = ::Math_obj::sin(_this23->rot);
HXDLIN(1133)													_this23->axisy = ::Math_obj::cos(_this23->rot);
            												}
            											}
            										}
HXDLIN(1133)										{
HXLINE(1133)											_this9->worldCOMx = (_this9->body->posx + ((_this9->body->axisy * _this9->localCOMx) - (_this9->body->axisx * _this9->localCOMy)));
HXDLIN(1133)											_this9->worldCOMy = (_this9->body->posy + ((_this9->localCOMx * _this9->body->axisx) + (_this9->localCOMy * _this9->body->axisy)));
            										}
            									}
            								}
HXDLIN(1133)								Float rx = _this9->radius;
HXDLIN(1133)								Float ry = _this9->radius;
HXDLIN(1133)								{
HXLINE(1133)									_this9->aabb->minx = (_this9->worldCOMx - rx);
HXDLIN(1133)									_this9->aabb->miny = (_this9->worldCOMy - ry);
            								}
HXDLIN(1133)								{
HXLINE(1133)									_this9->aabb->maxx = (_this9->worldCOMx + rx);
HXDLIN(1133)									_this9->aabb->maxy = (_this9->worldCOMy + ry);
            								}
            							}
            							else {
HXLINE(1133)								 ::zpp_nape::shape::ZPP_Polygon _this24 = shape->polygon;
HXDLIN(1133)								if (_this24->zip_gverts) {
HXLINE(1133)									if (hx::IsNotNull( _this24->body )) {
HXLINE(1133)										_this24->zip_gverts = false;
HXDLIN(1133)										_this24->validate_lverts();
HXDLIN(1133)										{
HXLINE(1133)											 ::zpp_nape::phys::ZPP_Body _this25 = _this24->body;
HXDLIN(1133)											if (_this25->zip_axis) {
HXLINE(1133)												_this25->zip_axis = false;
HXDLIN(1133)												{
HXLINE(1133)													_this25->axisx = ::Math_obj::sin(_this25->rot);
HXDLIN(1133)													_this25->axisy = ::Math_obj::cos(_this25->rot);
            												}
            											}
            										}
HXDLIN(1133)										 ::zpp_nape::geom::ZPP_Vec2 li = _this24->lverts->next;
HXDLIN(1133)										{
HXLINE(1133)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this24->gverts->next;
HXDLIN(1133)											while(hx::IsNotNull( cx_ite1 )){
HXLINE(1133)												 ::zpp_nape::geom::ZPP_Vec2 g2 = cx_ite1;
HXDLIN(1133)												{
HXLINE(1133)													 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(1133)													li = li->next;
HXDLIN(1133)													{
HXLINE(1133)														g2->x = (_this24->body->posx + ((_this24->body->axisy * l->x) - (_this24->body->axisx * l->y)));
HXDLIN(1133)														g2->y = (_this24->body->posy + ((l->x * _this24->body->axisx) + (l->y * _this24->body->axisy)));
            													}
            												}
HXDLIN(1133)												cx_ite1 = cx_ite1->next;
            											}
            										}
            									}
            								}
HXDLIN(1133)								if (hx::IsNull( _this24->lverts->next )) {
HXLINE(1133)									HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            								}
HXDLIN(1133)								 ::zpp_nape::geom::ZPP_Vec2 p0 = _this24->gverts->next;
HXDLIN(1133)								{
HXLINE(1133)									_this24->aabb->minx = p0->x;
HXDLIN(1133)									_this24->aabb->miny = p0->y;
            								}
HXDLIN(1133)								{
HXLINE(1133)									_this24->aabb->maxx = p0->x;
HXDLIN(1133)									_this24->aabb->maxy = p0->y;
            								}
HXDLIN(1133)								{
HXLINE(1133)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this24->gverts->next->next;
HXDLIN(1133)									while(hx::IsNotNull( cx_ite2 )){
HXLINE(1133)										 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN(1133)										{
HXLINE(1133)											if ((p->x < _this24->aabb->minx)) {
HXLINE(1133)												_this24->aabb->minx = p->x;
            											}
HXDLIN(1133)											if ((p->x > _this24->aabb->maxx)) {
HXLINE(1133)												_this24->aabb->maxx = p->x;
            											}
HXDLIN(1133)											if ((p->y < _this24->aabb->miny)) {
HXLINE(1133)												_this24->aabb->miny = p->y;
            											}
HXDLIN(1133)											if ((p->y > _this24->aabb->maxy)) {
HXLINE(1133)												_this24->aabb->maxy = p->y;
            											}
            										}
HXDLIN(1133)										cx_ite2 = cx_ite2->next;
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(1134)				{
HXLINE(1134)					 ::zpp_nape::geom::ZPP_AABB a9 = shape->aabb;
HXDLIN(1134)					aabb->minx = (a9->minx - ((Float)3.0));
HXDLIN(1134)					aabb->miny = (a9->miny - ((Float)3.0));
HXDLIN(1134)					aabb->maxx = (a9->maxx + ((Float)3.0));
HXDLIN(1134)					aabb->maxy = (a9->maxy + ((Float)3.0));
            				}
HXLINE(1135)				 ::zpp_nape::space::ZPP_AABBTree tree1;
HXDLIN(1135)				bool tree2;
HXDLIN(1135)				if ((shape->body->type == 1)) {
HXLINE(1135)					tree2 = false;
            				}
            				else {
HXLINE(1135)					tree2 = !(shape->body->component->sleeping);
            				}
HXDLIN(1135)				if ((node->dyn = tree2)) {
HXLINE(1135)					tree1 = this->dtree;
            				}
            				else {
HXLINE(1135)					tree1 = this->stree;
            				}
HXLINE(1136)				if (hx::IsNull( tree1->root )) {
HXLINE(1136)					tree1->root = node;
HXDLIN(1136)					tree1->root->parent = null();
            				}
            				else {
HXLINE(1136)					 ::zpp_nape::geom::ZPP_AABB leafaabb = node->aabb;
HXDLIN(1136)					 ::zpp_nape::space::ZPP_AABBNode node43 = tree1->root;
HXDLIN(1136)					while(hx::IsNotNull( node43->child1 )){
HXLINE(1136)						 ::zpp_nape::space::ZPP_AABBNode child11 = node43->child1;
HXDLIN(1136)						 ::zpp_nape::space::ZPP_AABBNode child21 = node43->child2;
HXDLIN(1136)						 ::zpp_nape::geom::ZPP_AABB _this26 = node43->aabb;
HXDLIN(1136)						Float area1 = (((_this26->maxx - _this26->minx) + (_this26->maxy - _this26->miny)) * ( (Float)(2) ));
HXDLIN(1136)						{
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this27 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB a10 = node43->aabb;
HXDLIN(1136)							Float _hx_tmp5;
HXDLIN(1136)							if ((a10->minx < leafaabb->minx)) {
HXLINE(1136)								_hx_tmp5 = a10->minx;
            							}
            							else {
HXLINE(1136)								_hx_tmp5 = leafaabb->minx;
            							}
HXDLIN(1136)							_this27->minx = _hx_tmp5;
HXDLIN(1136)							Float _hx_tmp6;
HXDLIN(1136)							if ((a10->miny < leafaabb->miny)) {
HXLINE(1136)								_hx_tmp6 = a10->miny;
            							}
            							else {
HXLINE(1136)								_hx_tmp6 = leafaabb->miny;
            							}
HXDLIN(1136)							_this27->miny = _hx_tmp6;
HXDLIN(1136)							Float _hx_tmp7;
HXDLIN(1136)							if ((a10->maxx > leafaabb->maxx)) {
HXLINE(1136)								_hx_tmp7 = a10->maxx;
            							}
            							else {
HXLINE(1136)								_hx_tmp7 = leafaabb->maxx;
            							}
HXDLIN(1136)							_this27->maxx = _hx_tmp7;
HXDLIN(1136)							Float _hx_tmp8;
HXDLIN(1136)							if ((a10->maxy > leafaabb->maxy)) {
HXLINE(1136)								_hx_tmp8 = a10->maxy;
            							}
            							else {
HXLINE(1136)								_hx_tmp8 = leafaabb->maxy;
            							}
HXDLIN(1136)							_this27->maxy = _hx_tmp8;
            						}
HXDLIN(1136)						 ::zpp_nape::geom::ZPP_AABB _this28 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)						Float carea = (((_this28->maxx - _this28->minx) + (_this28->maxy - _this28->miny)) * ( (Float)(2) ));
HXDLIN(1136)						Float cost = (( (Float)(2) ) * carea);
HXDLIN(1136)						Float icost = (( (Float)(2) ) * (carea - area1));
HXDLIN(1136)						{
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this29 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB b10 = child11->aabb;
HXDLIN(1136)							Float _hx_tmp9;
HXDLIN(1136)							if ((leafaabb->minx < b10->minx)) {
HXLINE(1136)								_hx_tmp9 = leafaabb->minx;
            							}
            							else {
HXLINE(1136)								_hx_tmp9 = b10->minx;
            							}
HXDLIN(1136)							_this29->minx = _hx_tmp9;
HXDLIN(1136)							Float _hx_tmp10;
HXDLIN(1136)							if ((leafaabb->miny < b10->miny)) {
HXLINE(1136)								_hx_tmp10 = leafaabb->miny;
            							}
            							else {
HXLINE(1136)								_hx_tmp10 = b10->miny;
            							}
HXDLIN(1136)							_this29->miny = _hx_tmp10;
HXDLIN(1136)							Float _hx_tmp11;
HXDLIN(1136)							if ((leafaabb->maxx > b10->maxx)) {
HXLINE(1136)								_hx_tmp11 = leafaabb->maxx;
            							}
            							else {
HXLINE(1136)								_hx_tmp11 = b10->maxx;
            							}
HXDLIN(1136)							_this29->maxx = _hx_tmp11;
HXDLIN(1136)							Float _hx_tmp12;
HXDLIN(1136)							if ((leafaabb->maxy > b10->maxy)) {
HXLINE(1136)								_hx_tmp12 = leafaabb->maxy;
            							}
            							else {
HXLINE(1136)								_hx_tmp12 = b10->maxy;
            							}
HXDLIN(1136)							_this29->maxy = _hx_tmp12;
            						}
HXDLIN(1136)						Float cost1;
HXDLIN(1136)						if (hx::IsNull( child11->child1 )) {
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this30 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							cost1 = ((((_this30->maxx - _this30->minx) + (_this30->maxy - _this30->miny)) * ( (Float)(2) )) + icost);
            						}
            						else {
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this31 = child11->aabb;
HXDLIN(1136)							Float oarea = (((_this31->maxx - _this31->minx) + (_this31->maxy - _this31->miny)) * ( (Float)(2) ));
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB _this32 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							Float narea = (((_this32->maxx - _this32->minx) + (_this32->maxy - _this32->miny)) * ( (Float)(2) ));
HXDLIN(1136)							cost1 = ((narea - oarea) + icost);
            						}
HXDLIN(1136)						{
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this33 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB b11 = child21->aabb;
HXDLIN(1136)							Float _hx_tmp13;
HXDLIN(1136)							if ((leafaabb->minx < b11->minx)) {
HXLINE(1136)								_hx_tmp13 = leafaabb->minx;
            							}
            							else {
HXLINE(1136)								_hx_tmp13 = b11->minx;
            							}
HXDLIN(1136)							_this33->minx = _hx_tmp13;
HXDLIN(1136)							Float _hx_tmp14;
HXDLIN(1136)							if ((leafaabb->miny < b11->miny)) {
HXLINE(1136)								_hx_tmp14 = leafaabb->miny;
            							}
            							else {
HXLINE(1136)								_hx_tmp14 = b11->miny;
            							}
HXDLIN(1136)							_this33->miny = _hx_tmp14;
HXDLIN(1136)							Float _hx_tmp15;
HXDLIN(1136)							if ((leafaabb->maxx > b11->maxx)) {
HXLINE(1136)								_hx_tmp15 = leafaabb->maxx;
            							}
            							else {
HXLINE(1136)								_hx_tmp15 = b11->maxx;
            							}
HXDLIN(1136)							_this33->maxx = _hx_tmp15;
HXDLIN(1136)							Float _hx_tmp16;
HXDLIN(1136)							if ((leafaabb->maxy > b11->maxy)) {
HXLINE(1136)								_hx_tmp16 = leafaabb->maxy;
            							}
            							else {
HXLINE(1136)								_hx_tmp16 = b11->maxy;
            							}
HXDLIN(1136)							_this33->maxy = _hx_tmp16;
            						}
HXDLIN(1136)						Float cost2;
HXDLIN(1136)						if (hx::IsNull( child21->child1 )) {
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this34 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							cost2 = ((((_this34->maxx - _this34->minx) + (_this34->maxy - _this34->miny)) * ( (Float)(2) )) + icost);
            						}
            						else {
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this35 = child21->aabb;
HXDLIN(1136)							Float oarea1 = (((_this35->maxx - _this35->minx) + (_this35->maxy - _this35->miny)) * ( (Float)(2) ));
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB _this36 = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN(1136)							Float narea1 = (((_this36->maxx - _this36->minx) + (_this36->maxy - _this36->miny)) * ( (Float)(2) ));
HXDLIN(1136)							cost2 = ((narea1 - oarea1) + icost);
            						}
HXDLIN(1136)						bool _hx_tmp17;
HXDLIN(1136)						if ((cost < cost1)) {
HXLINE(1136)							_hx_tmp17 = (cost < cost2);
            						}
            						else {
HXLINE(1136)							_hx_tmp17 = false;
            						}
HXDLIN(1136)						if (_hx_tmp17) {
HXLINE(1136)							goto _hx_goto_32;
            						}
            						else {
HXLINE(1136)							if ((cost1 < cost2)) {
HXLINE(1136)								node43 = child11;
            							}
            							else {
HXLINE(1136)								node43 = child21;
            							}
            						}
            					}
            					_hx_goto_32:;
HXDLIN(1136)					 ::zpp_nape::space::ZPP_AABBNode sibling1 = node43;
HXDLIN(1136)					 ::zpp_nape::space::ZPP_AABBNode oparent = sibling1->parent;
HXDLIN(1136)					 ::zpp_nape::space::ZPP_AABBNode nparent;
HXDLIN(1136)					{
HXLINE(1136)						if (hx::IsNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(1136)							nparent =  ::zpp_nape::space::ZPP_AABBNode_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(1136)							nparent = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN(1136)							::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = nparent->next;
HXDLIN(1136)							nparent->next = null();
            						}
HXDLIN(1136)						{
HXLINE(1136)							if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE(1136)								nparent->aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(1136)								nparent->aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1136)								::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = nparent->aabb->next;
HXDLIN(1136)								nparent->aabb->next = null();
            							}
HXDLIN(1136)							nparent->moved = false;
HXDLIN(1136)							nparent->synced = false;
HXDLIN(1136)							nparent->first_sync = false;
            						}
            					}
HXDLIN(1136)					nparent->parent = oparent;
HXDLIN(1136)					{
HXLINE(1136)						 ::zpp_nape::geom::ZPP_AABB _this37 = nparent->aabb;
HXDLIN(1136)						 ::zpp_nape::geom::ZPP_AABB b12 = sibling1->aabb;
HXDLIN(1136)						Float _hx_tmp18;
HXDLIN(1136)						if ((leafaabb->minx < b12->minx)) {
HXLINE(1136)							_hx_tmp18 = leafaabb->minx;
            						}
            						else {
HXLINE(1136)							_hx_tmp18 = b12->minx;
            						}
HXDLIN(1136)						_this37->minx = _hx_tmp18;
HXDLIN(1136)						Float _hx_tmp19;
HXDLIN(1136)						if ((leafaabb->miny < b12->miny)) {
HXLINE(1136)							_hx_tmp19 = leafaabb->miny;
            						}
            						else {
HXLINE(1136)							_hx_tmp19 = b12->miny;
            						}
HXDLIN(1136)						_this37->miny = _hx_tmp19;
HXDLIN(1136)						Float _hx_tmp20;
HXDLIN(1136)						if ((leafaabb->maxx > b12->maxx)) {
HXLINE(1136)							_hx_tmp20 = leafaabb->maxx;
            						}
            						else {
HXLINE(1136)							_hx_tmp20 = b12->maxx;
            						}
HXDLIN(1136)						_this37->maxx = _hx_tmp20;
HXDLIN(1136)						Float _hx_tmp21;
HXDLIN(1136)						if ((leafaabb->maxy > b12->maxy)) {
HXLINE(1136)							_hx_tmp21 = leafaabb->maxy;
            						}
            						else {
HXLINE(1136)							_hx_tmp21 = b12->maxy;
            						}
HXDLIN(1136)						_this37->maxy = _hx_tmp21;
            					}
HXDLIN(1136)					nparent->height = (sibling1->height + 1);
HXDLIN(1136)					if (hx::IsNotNull( oparent )) {
HXLINE(1136)						if (hx::IsEq( oparent->child1,sibling1 )) {
HXLINE(1136)							oparent->child1 = nparent;
            						}
            						else {
HXLINE(1136)							oparent->child2 = nparent;
            						}
HXDLIN(1136)						nparent->child1 = sibling1;
HXDLIN(1136)						nparent->child2 = node;
HXDLIN(1136)						sibling1->parent = nparent;
HXDLIN(1136)						node->parent = nparent;
            					}
            					else {
HXLINE(1136)						nparent->child1 = sibling1;
HXDLIN(1136)						nparent->child2 = node;
HXDLIN(1136)						sibling1->parent = nparent;
HXDLIN(1136)						node->parent = nparent;
HXDLIN(1136)						tree1->root = nparent;
            					}
HXDLIN(1136)					node43 = node->parent;
HXDLIN(1136)					while(hx::IsNotNull( node43 )){
HXLINE(1136)						bool node44;
HXDLIN(1136)						if (hx::IsNotNull( node43->child1 )) {
HXLINE(1136)							node44 = (node43->height < 2);
            						}
            						else {
HXLINE(1136)							node44 = true;
            						}
HXDLIN(1136)						if (node44) {
HXLINE(1136)							node43 = node43;
            						}
            						else {
HXLINE(1136)							 ::zpp_nape::space::ZPP_AABBNode b13 = node43->child1;
HXDLIN(1136)							 ::zpp_nape::space::ZPP_AABBNode c1 = node43->child2;
HXDLIN(1136)							int balance1 = (c1->height - b13->height);
HXDLIN(1136)							if ((balance1 > 1)) {
HXLINE(1136)								 ::zpp_nape::space::ZPP_AABBNode f2 = c1->child1;
HXDLIN(1136)								 ::zpp_nape::space::ZPP_AABBNode g3 = c1->child2;
HXDLIN(1136)								c1->child1 = node43;
HXDLIN(1136)								c1->parent = node43->parent;
HXDLIN(1136)								node43->parent = c1;
HXDLIN(1136)								if (hx::IsNotNull( c1->parent )) {
HXLINE(1136)									if (hx::IsEq( c1->parent->child1,node43 )) {
HXLINE(1136)										c1->parent->child1 = c1;
            									}
            									else {
HXLINE(1136)										c1->parent->child2 = c1;
            									}
            								}
            								else {
HXLINE(1136)									tree1->root = c1;
            								}
HXDLIN(1136)								if ((f2->height > g3->height)) {
HXLINE(1136)									c1->child2 = f2;
HXDLIN(1136)									node43->child2 = g3;
HXDLIN(1136)									g3->parent = node43;
HXDLIN(1136)									{
HXLINE(1136)										 ::zpp_nape::geom::ZPP_AABB _this38 = node43->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB a11 = b13->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB b14 = g3->aabb;
HXDLIN(1136)										Float node45;
HXDLIN(1136)										if ((a11->minx < b14->minx)) {
HXLINE(1136)											node45 = a11->minx;
            										}
            										else {
HXLINE(1136)											node45 = b14->minx;
            										}
HXDLIN(1136)										_this38->minx = node45;
HXDLIN(1136)										Float node46;
HXDLIN(1136)										if ((a11->miny < b14->miny)) {
HXLINE(1136)											node46 = a11->miny;
            										}
            										else {
HXLINE(1136)											node46 = b14->miny;
            										}
HXDLIN(1136)										_this38->miny = node46;
HXDLIN(1136)										Float node47;
HXDLIN(1136)										if ((a11->maxx > b14->maxx)) {
HXLINE(1136)											node47 = a11->maxx;
            										}
            										else {
HXLINE(1136)											node47 = b14->maxx;
            										}
HXDLIN(1136)										_this38->maxx = node47;
HXDLIN(1136)										Float node48;
HXDLIN(1136)										if ((a11->maxy > b14->maxy)) {
HXLINE(1136)											node48 = a11->maxy;
            										}
            										else {
HXLINE(1136)											node48 = b14->maxy;
            										}
HXDLIN(1136)										_this38->maxy = node48;
            									}
HXDLIN(1136)									{
HXLINE(1136)										 ::zpp_nape::geom::ZPP_AABB _this39 = c1->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB a12 = node43->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB b15 = f2->aabb;
HXDLIN(1136)										Float node49;
HXDLIN(1136)										if ((a12->minx < b15->minx)) {
HXLINE(1136)											node49 = a12->minx;
            										}
            										else {
HXLINE(1136)											node49 = b15->minx;
            										}
HXDLIN(1136)										_this39->minx = node49;
HXDLIN(1136)										Float node50;
HXDLIN(1136)										if ((a12->miny < b15->miny)) {
HXLINE(1136)											node50 = a12->miny;
            										}
            										else {
HXLINE(1136)											node50 = b15->miny;
            										}
HXDLIN(1136)										_this39->miny = node50;
HXDLIN(1136)										Float node51;
HXDLIN(1136)										if ((a12->maxx > b15->maxx)) {
HXLINE(1136)											node51 = a12->maxx;
            										}
            										else {
HXLINE(1136)											node51 = b15->maxx;
            										}
HXDLIN(1136)										_this39->maxx = node51;
HXDLIN(1136)										Float node52;
HXDLIN(1136)										if ((a12->maxy > b15->maxy)) {
HXLINE(1136)											node52 = a12->maxy;
            										}
            										else {
HXLINE(1136)											node52 = b15->maxy;
            										}
HXDLIN(1136)										_this39->maxy = node52;
            									}
HXDLIN(1136)									int x9 = b13->height;
HXDLIN(1136)									int y9 = g3->height;
HXDLIN(1136)									int node53;
HXDLIN(1136)									if ((x9 > y9)) {
HXLINE(1136)										node53 = x9;
            									}
            									else {
HXLINE(1136)										node53 = y9;
            									}
HXDLIN(1136)									node43->height = (1 + node53);
HXDLIN(1136)									int x10 = node43->height;
HXDLIN(1136)									int y10 = f2->height;
HXDLIN(1136)									int node54;
HXDLIN(1136)									if ((x10 > y10)) {
HXLINE(1136)										node54 = x10;
            									}
            									else {
HXLINE(1136)										node54 = y10;
            									}
HXDLIN(1136)									c1->height = (1 + node54);
            								}
            								else {
HXLINE(1136)									c1->child2 = g3;
HXDLIN(1136)									node43->child2 = f2;
HXDLIN(1136)									f2->parent = node43;
HXDLIN(1136)									{
HXLINE(1136)										 ::zpp_nape::geom::ZPP_AABB _this40 = node43->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB a13 = b13->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB b16 = f2->aabb;
HXDLIN(1136)										Float node55;
HXDLIN(1136)										if ((a13->minx < b16->minx)) {
HXLINE(1136)											node55 = a13->minx;
            										}
            										else {
HXLINE(1136)											node55 = b16->minx;
            										}
HXDLIN(1136)										_this40->minx = node55;
HXDLIN(1136)										Float node56;
HXDLIN(1136)										if ((a13->miny < b16->miny)) {
HXLINE(1136)											node56 = a13->miny;
            										}
            										else {
HXLINE(1136)											node56 = b16->miny;
            										}
HXDLIN(1136)										_this40->miny = node56;
HXDLIN(1136)										Float node57;
HXDLIN(1136)										if ((a13->maxx > b16->maxx)) {
HXLINE(1136)											node57 = a13->maxx;
            										}
            										else {
HXLINE(1136)											node57 = b16->maxx;
            										}
HXDLIN(1136)										_this40->maxx = node57;
HXDLIN(1136)										Float node58;
HXDLIN(1136)										if ((a13->maxy > b16->maxy)) {
HXLINE(1136)											node58 = a13->maxy;
            										}
            										else {
HXLINE(1136)											node58 = b16->maxy;
            										}
HXDLIN(1136)										_this40->maxy = node58;
            									}
HXDLIN(1136)									{
HXLINE(1136)										 ::zpp_nape::geom::ZPP_AABB _this41 = c1->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB a14 = node43->aabb;
HXDLIN(1136)										 ::zpp_nape::geom::ZPP_AABB b17 = g3->aabb;
HXDLIN(1136)										Float node59;
HXDLIN(1136)										if ((a14->minx < b17->minx)) {
HXLINE(1136)											node59 = a14->minx;
            										}
            										else {
HXLINE(1136)											node59 = b17->minx;
            										}
HXDLIN(1136)										_this41->minx = node59;
HXDLIN(1136)										Float node60;
HXDLIN(1136)										if ((a14->miny < b17->miny)) {
HXLINE(1136)											node60 = a14->miny;
            										}
            										else {
HXLINE(1136)											node60 = b17->miny;
            										}
HXDLIN(1136)										_this41->miny = node60;
HXDLIN(1136)										Float node61;
HXDLIN(1136)										if ((a14->maxx > b17->maxx)) {
HXLINE(1136)											node61 = a14->maxx;
            										}
            										else {
HXLINE(1136)											node61 = b17->maxx;
            										}
HXDLIN(1136)										_this41->maxx = node61;
HXDLIN(1136)										Float node62;
HXDLIN(1136)										if ((a14->maxy > b17->maxy)) {
HXLINE(1136)											node62 = a14->maxy;
            										}
            										else {
HXLINE(1136)											node62 = b17->maxy;
            										}
HXDLIN(1136)										_this41->maxy = node62;
            									}
HXDLIN(1136)									int x11 = b13->height;
HXDLIN(1136)									int y11 = f2->height;
HXDLIN(1136)									int node63;
HXDLIN(1136)									if ((x11 > y11)) {
HXLINE(1136)										node63 = x11;
            									}
            									else {
HXLINE(1136)										node63 = y11;
            									}
HXDLIN(1136)									node43->height = (1 + node63);
HXDLIN(1136)									int x12 = node43->height;
HXDLIN(1136)									int y12 = g3->height;
HXDLIN(1136)									int node64;
HXDLIN(1136)									if ((x12 > y12)) {
HXLINE(1136)										node64 = x12;
            									}
            									else {
HXLINE(1136)										node64 = y12;
            									}
HXDLIN(1136)									c1->height = (1 + node64);
            								}
HXDLIN(1136)								node43 = c1;
            							}
            							else {
HXLINE(1136)								if ((balance1 < -1)) {
HXLINE(1136)									 ::zpp_nape::space::ZPP_AABBNode f3 = b13->child1;
HXDLIN(1136)									 ::zpp_nape::space::ZPP_AABBNode g4 = b13->child2;
HXDLIN(1136)									b13->child1 = node43;
HXDLIN(1136)									b13->parent = node43->parent;
HXDLIN(1136)									node43->parent = b13;
HXDLIN(1136)									if (hx::IsNotNull( b13->parent )) {
HXLINE(1136)										if (hx::IsEq( b13->parent->child1,node43 )) {
HXLINE(1136)											b13->parent->child1 = b13;
            										}
            										else {
HXLINE(1136)											b13->parent->child2 = b13;
            										}
            									}
            									else {
HXLINE(1136)										tree1->root = b13;
            									}
HXDLIN(1136)									if ((f3->height > g4->height)) {
HXLINE(1136)										b13->child2 = f3;
HXDLIN(1136)										node43->child1 = g4;
HXDLIN(1136)										g4->parent = node43;
HXDLIN(1136)										{
HXLINE(1136)											 ::zpp_nape::geom::ZPP_AABB _this42 = node43->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB a15 = c1->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB b18 = g4->aabb;
HXDLIN(1136)											Float node65;
HXDLIN(1136)											if ((a15->minx < b18->minx)) {
HXLINE(1136)												node65 = a15->minx;
            											}
            											else {
HXLINE(1136)												node65 = b18->minx;
            											}
HXDLIN(1136)											_this42->minx = node65;
HXDLIN(1136)											Float node66;
HXDLIN(1136)											if ((a15->miny < b18->miny)) {
HXLINE(1136)												node66 = a15->miny;
            											}
            											else {
HXLINE(1136)												node66 = b18->miny;
            											}
HXDLIN(1136)											_this42->miny = node66;
HXDLIN(1136)											Float node67;
HXDLIN(1136)											if ((a15->maxx > b18->maxx)) {
HXLINE(1136)												node67 = a15->maxx;
            											}
            											else {
HXLINE(1136)												node67 = b18->maxx;
            											}
HXDLIN(1136)											_this42->maxx = node67;
HXDLIN(1136)											Float node68;
HXDLIN(1136)											if ((a15->maxy > b18->maxy)) {
HXLINE(1136)												node68 = a15->maxy;
            											}
            											else {
HXLINE(1136)												node68 = b18->maxy;
            											}
HXDLIN(1136)											_this42->maxy = node68;
            										}
HXDLIN(1136)										{
HXLINE(1136)											 ::zpp_nape::geom::ZPP_AABB _this43 = b13->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB a16 = node43->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB b19 = f3->aabb;
HXDLIN(1136)											Float node69;
HXDLIN(1136)											if ((a16->minx < b19->minx)) {
HXLINE(1136)												node69 = a16->minx;
            											}
            											else {
HXLINE(1136)												node69 = b19->minx;
            											}
HXDLIN(1136)											_this43->minx = node69;
HXDLIN(1136)											Float node70;
HXDLIN(1136)											if ((a16->miny < b19->miny)) {
HXLINE(1136)												node70 = a16->miny;
            											}
            											else {
HXLINE(1136)												node70 = b19->miny;
            											}
HXDLIN(1136)											_this43->miny = node70;
HXDLIN(1136)											Float node71;
HXDLIN(1136)											if ((a16->maxx > b19->maxx)) {
HXLINE(1136)												node71 = a16->maxx;
            											}
            											else {
HXLINE(1136)												node71 = b19->maxx;
            											}
HXDLIN(1136)											_this43->maxx = node71;
HXDLIN(1136)											Float node72;
HXDLIN(1136)											if ((a16->maxy > b19->maxy)) {
HXLINE(1136)												node72 = a16->maxy;
            											}
            											else {
HXLINE(1136)												node72 = b19->maxy;
            											}
HXDLIN(1136)											_this43->maxy = node72;
            										}
HXDLIN(1136)										int x13 = c1->height;
HXDLIN(1136)										int y13 = g4->height;
HXDLIN(1136)										int node73;
HXDLIN(1136)										if ((x13 > y13)) {
HXLINE(1136)											node73 = x13;
            										}
            										else {
HXLINE(1136)											node73 = y13;
            										}
HXDLIN(1136)										node43->height = (1 + node73);
HXDLIN(1136)										int x14 = node43->height;
HXDLIN(1136)										int y14 = f3->height;
HXDLIN(1136)										int node74;
HXDLIN(1136)										if ((x14 > y14)) {
HXLINE(1136)											node74 = x14;
            										}
            										else {
HXLINE(1136)											node74 = y14;
            										}
HXDLIN(1136)										b13->height = (1 + node74);
            									}
            									else {
HXLINE(1136)										b13->child2 = g4;
HXDLIN(1136)										node43->child1 = f3;
HXDLIN(1136)										f3->parent = node43;
HXDLIN(1136)										{
HXLINE(1136)											 ::zpp_nape::geom::ZPP_AABB _this44 = node43->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB a17 = c1->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB b20 = f3->aabb;
HXDLIN(1136)											Float node75;
HXDLIN(1136)											if ((a17->minx < b20->minx)) {
HXLINE(1136)												node75 = a17->minx;
            											}
            											else {
HXLINE(1136)												node75 = b20->minx;
            											}
HXDLIN(1136)											_this44->minx = node75;
HXDLIN(1136)											Float node76;
HXDLIN(1136)											if ((a17->miny < b20->miny)) {
HXLINE(1136)												node76 = a17->miny;
            											}
            											else {
HXLINE(1136)												node76 = b20->miny;
            											}
HXDLIN(1136)											_this44->miny = node76;
HXDLIN(1136)											Float node77;
HXDLIN(1136)											if ((a17->maxx > b20->maxx)) {
HXLINE(1136)												node77 = a17->maxx;
            											}
            											else {
HXLINE(1136)												node77 = b20->maxx;
            											}
HXDLIN(1136)											_this44->maxx = node77;
HXDLIN(1136)											Float node78;
HXDLIN(1136)											if ((a17->maxy > b20->maxy)) {
HXLINE(1136)												node78 = a17->maxy;
            											}
            											else {
HXLINE(1136)												node78 = b20->maxy;
            											}
HXDLIN(1136)											_this44->maxy = node78;
            										}
HXDLIN(1136)										{
HXLINE(1136)											 ::zpp_nape::geom::ZPP_AABB _this45 = b13->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB a18 = node43->aabb;
HXDLIN(1136)											 ::zpp_nape::geom::ZPP_AABB b21 = g4->aabb;
HXDLIN(1136)											Float node79;
HXDLIN(1136)											if ((a18->minx < b21->minx)) {
HXLINE(1136)												node79 = a18->minx;
            											}
            											else {
HXLINE(1136)												node79 = b21->minx;
            											}
HXDLIN(1136)											_this45->minx = node79;
HXDLIN(1136)											Float node80;
HXDLIN(1136)											if ((a18->miny < b21->miny)) {
HXLINE(1136)												node80 = a18->miny;
            											}
            											else {
HXLINE(1136)												node80 = b21->miny;
            											}
HXDLIN(1136)											_this45->miny = node80;
HXDLIN(1136)											Float node81;
HXDLIN(1136)											if ((a18->maxx > b21->maxx)) {
HXLINE(1136)												node81 = a18->maxx;
            											}
            											else {
HXLINE(1136)												node81 = b21->maxx;
            											}
HXDLIN(1136)											_this45->maxx = node81;
HXDLIN(1136)											Float node82;
HXDLIN(1136)											if ((a18->maxy > b21->maxy)) {
HXLINE(1136)												node82 = a18->maxy;
            											}
            											else {
HXLINE(1136)												node82 = b21->maxy;
            											}
HXDLIN(1136)											_this45->maxy = node82;
            										}
HXDLIN(1136)										int x15 = c1->height;
HXDLIN(1136)										int y15 = f3->height;
HXDLIN(1136)										int node83;
HXDLIN(1136)										if ((x15 > y15)) {
HXLINE(1136)											node83 = x15;
            										}
            										else {
HXLINE(1136)											node83 = y15;
            										}
HXDLIN(1136)										node43->height = (1 + node83);
HXDLIN(1136)										int x16 = node43->height;
HXDLIN(1136)										int y16 = g4->height;
HXDLIN(1136)										int node84;
HXDLIN(1136)										if ((x16 > y16)) {
HXLINE(1136)											node84 = x16;
            										}
            										else {
HXLINE(1136)											node84 = y16;
            										}
HXDLIN(1136)										b13->height = (1 + node84);
            									}
HXDLIN(1136)									node43 = b13;
            								}
            								else {
HXLINE(1136)									node43 = node43;
            								}
            							}
            						}
HXDLIN(1136)						 ::zpp_nape::space::ZPP_AABBNode child12 = node43->child1;
HXDLIN(1136)						 ::zpp_nape::space::ZPP_AABBNode child22 = node43->child2;
HXDLIN(1136)						int x17 = child12->height;
HXDLIN(1136)						int y17 = child22->height;
HXDLIN(1136)						int _hx_tmp22;
HXDLIN(1136)						if ((x17 > y17)) {
HXLINE(1136)							_hx_tmp22 = x17;
            						}
            						else {
HXLINE(1136)							_hx_tmp22 = y17;
            						}
HXDLIN(1136)						node43->height = (1 + _hx_tmp22);
HXDLIN(1136)						{
HXLINE(1136)							 ::zpp_nape::geom::ZPP_AABB _this46 = node43->aabb;
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB a19 = child12->aabb;
HXDLIN(1136)							 ::zpp_nape::geom::ZPP_AABB b22 = child22->aabb;
HXDLIN(1136)							Float _hx_tmp23;
HXDLIN(1136)							if ((a19->minx < b22->minx)) {
HXLINE(1136)								_hx_tmp23 = a19->minx;
            							}
            							else {
HXLINE(1136)								_hx_tmp23 = b22->minx;
            							}
HXDLIN(1136)							_this46->minx = _hx_tmp23;
HXDLIN(1136)							Float _hx_tmp24;
HXDLIN(1136)							if ((a19->miny < b22->miny)) {
HXLINE(1136)								_hx_tmp24 = a19->miny;
            							}
            							else {
HXLINE(1136)								_hx_tmp24 = b22->miny;
            							}
HXDLIN(1136)							_this46->miny = _hx_tmp24;
HXDLIN(1136)							Float _hx_tmp25;
HXDLIN(1136)							if ((a19->maxx > b22->maxx)) {
HXLINE(1136)								_hx_tmp25 = a19->maxx;
            							}
            							else {
HXLINE(1136)								_hx_tmp25 = b22->maxx;
            							}
HXDLIN(1136)							_this46->maxx = _hx_tmp25;
HXDLIN(1136)							Float _hx_tmp26;
HXDLIN(1136)							if ((a19->maxy > b22->maxy)) {
HXLINE(1136)								_hx_tmp26 = a19->maxy;
            							}
            							else {
HXLINE(1136)								_hx_tmp26 = b22->maxy;
            							}
HXDLIN(1136)							_this46->maxy = _hx_tmp26;
            						}
HXDLIN(1136)						node43 = node43->parent;
            					}
            				}
HXLINE(1137)				node->synced = false;
            			}
HXLINE(1139)			node = node->snext;
            		}
HXLINE(1142)		while(hx::IsNotNull( this->syncs )){
HXLINE(1152)			 ::zpp_nape::space::ZPP_AABBNode ret = this->syncs;
HXLINE(1153)			this->syncs = ret->snext;
HXLINE(1154)			ret->snext = null();
HXLINE(1143)			 ::zpp_nape::space::ZPP_AABBNode leaf = ret;
HXLINE(1157)			if (leaf->moved) {
HXLINE(1157)				continue;
            			}
HXLINE(1158)			leaf->moved = false;
HXLINE(1159)			 ::zpp_nape::shape::ZPP_Shape lshape = leaf->shape;
HXLINE(1160)			 ::zpp_nape::phys::ZPP_Body lbody = lshape->body;
HXLINE(1169)			if (lbody->component->sleeping) {
HXLINE(1169)				continue;
            			}
HXLINE(1170)			 ::zpp_nape::geom::ZPP_AABB ab = leaf->aabb;
HXLINE(1171)			 ::zpp_nape::space::ZPP_AABBNode stack = null();
HXLINE(1172)			{
HXLINE(1173)				if (hx::IsNotNull( this->dtree->root )) {
HXLINE(1182)					this->dtree->root->next = stack;
HXLINE(1183)					stack = this->dtree->root;
            				}
HXLINE(1185)				while(hx::IsNotNull( stack )){
HXLINE(1195)					 ::zpp_nape::space::ZPP_AABBNode ret1 = stack;
HXLINE(1196)					stack = ret1->next;
HXLINE(1197)					ret1->next = null();
HXLINE(1186)					 ::zpp_nape::space::ZPP_AABBNode node85 = ret1;
HXLINE(1200)					if (hx::IsEq( node85,leaf )) {
HXLINE(1200)						continue;
            					}
HXLINE(1201)					if (hx::IsNull( node85->child1 )) {
HXLINE(1202)						 ::zpp_nape::shape::ZPP_Shape shape1 = node85->shape;
HXLINE(1203)						bool _hx_tmp27;
HXDLIN(1203)						if (hx::IsNotEq( shape1->body,lshape->body )) {
HXLINE(1203)							bool _hx_tmp28;
HXDLIN(1203)							if ((shape1->body->type == 1)) {
HXLINE(1203)								_hx_tmp28 = (lshape->body->type == 1);
            							}
            							else {
HXLINE(1203)								_hx_tmp28 = false;
            							}
HXDLIN(1203)							_hx_tmp27 = !(_hx_tmp28);
            						}
            						else {
HXLINE(1203)							_hx_tmp27 = false;
            						}
HXDLIN(1203)						if (_hx_tmp27) {
HXLINE(1204)							 ::zpp_nape::geom::ZPP_AABB x18 = node85->aabb;
HXDLIN(1204)							bool _hx_tmp29;
HXDLIN(1204)							bool _hx_tmp30;
HXDLIN(1204)							bool _hx_tmp31;
HXDLIN(1204)							if ((x18->miny <= ab->maxy)) {
HXLINE(1204)								_hx_tmp31 = (ab->miny <= x18->maxy);
            							}
            							else {
HXLINE(1204)								_hx_tmp31 = false;
            							}
HXDLIN(1204)							if (_hx_tmp31) {
HXLINE(1204)								_hx_tmp30 = (x18->minx <= ab->maxx);
            							}
            							else {
HXLINE(1204)								_hx_tmp30 = false;
            							}
HXDLIN(1204)							if (_hx_tmp30) {
HXLINE(1204)								_hx_tmp29 = (ab->minx <= x18->maxx);
            							}
            							else {
HXLINE(1204)								_hx_tmp29 = false;
            							}
HXDLIN(1204)							if (_hx_tmp29) {
HXLINE(1205)								int id;
HXLINE(1206)								int di;
HXLINE(1215)								if ((lshape->id < shape1->id)) {
HXLINE(1216)									id = lshape->id;
HXLINE(1217)									di = shape1->id;
            								}
            								else {
HXLINE(1220)									id = shape1->id;
HXLINE(1221)									di = lshape->id;
            								}
HXLINE(1231)								 ::zpp_nape::shape::ZPP_Shape s;
HXDLIN(1231)								if ((lshape->pairs->length < shape1->pairs->length)) {
HXLINE(1231)									s = lshape;
            								}
            								else {
HXLINE(1231)									s = shape1;
            								}
HXLINE(1232)								 ::zpp_nape::space::ZPP_AABBPair p1 = null();
HXLINE(1233)								{
HXLINE(1234)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cx_ite3 = s->pairs->head;
HXLINE(1235)									while(hx::IsNotNull( cx_ite3 )){
HXLINE(1236)										 ::zpp_nape::space::ZPP_AABBPair px = cx_ite3->elt;
HXLINE(1246)										bool _hx_tmp32;
HXDLIN(1246)										if ((px->id == id)) {
HXLINE(1246)											_hx_tmp32 = (px->di == di);
            										}
            										else {
HXLINE(1246)											_hx_tmp32 = false;
            										}
HXDLIN(1246)										if (_hx_tmp32) {
HXLINE(1247)											p1 = px;
HXLINE(1248)											goto _hx_goto_36;
            										}
HXLINE(1251)										cx_ite3 = cx_ite3->next;
            									}
            									_hx_goto_36:;
            								}
HXLINE(1254)								if (hx::IsNotNull( p1 )) {
HXLINE(1255)									if (p1->sleeping) {
HXLINE(1256)										p1->sleeping = false;
HXLINE(1257)										p1->next = this->pairs;
HXLINE(1258)										this->pairs = p1;
HXLINE(1259)										p1->first = true;
            									}
HXLINE(1261)									continue;
            								}
HXLINE(1264)								if (hx::IsNull( ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1265)									p1 =  ::zpp_nape::space::ZPP_AABBPair_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1271)									p1 = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE(1272)									::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = p1->next;
HXLINE(1273)									p1->next = null();
            								}
HXLINE(1280)								p1->n1 = leaf;
HXLINE(1281)								p1->n2 = node85;
HXLINE(1282)								p1->id = id;
HXLINE(1283)								p1->di = di;
HXLINE(1284)								p1->next = this->pairs;
HXLINE(1285)								this->pairs = p1;
HXLINE(1286)								p1->first = true;
HXLINE(1287)								{
HXLINE(1287)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this47 = lshape->pairs;
HXDLIN(1287)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret2;
HXDLIN(1287)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1287)										ret2 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1287)										ret2 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1287)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret2->next;
HXDLIN(1287)										ret2->next = null();
            									}
HXDLIN(1287)									ret2->elt = p1;
HXDLIN(1287)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp = ret2;
HXDLIN(1287)									temp->next = _this47->head;
HXDLIN(1287)									_this47->head = temp;
HXDLIN(1287)									_this47->modified = true;
HXDLIN(1287)									_this47->length++;
            								}
HXLINE(1288)								{
HXLINE(1288)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this48 = shape1->pairs;
HXDLIN(1288)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret3;
HXDLIN(1288)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1288)										ret3 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1288)										ret3 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1288)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret3->next;
HXDLIN(1288)										ret3->next = null();
            									}
HXDLIN(1288)									ret3->elt = p1;
HXDLIN(1288)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp1 = ret3;
HXDLIN(1288)									temp1->next = _this48->head;
HXDLIN(1288)									_this48->head = temp1;
HXDLIN(1288)									_this48->modified = true;
HXDLIN(1288)									_this48->length++;
            								}
            							}
            						}
            					}
            					else {
HXLINE(1292)						 ::zpp_nape::geom::ZPP_AABB x19 = node85->aabb;
HXDLIN(1292)						bool _hx_tmp33;
HXDLIN(1292)						bool _hx_tmp34;
HXDLIN(1292)						bool _hx_tmp35;
HXDLIN(1292)						if ((x19->miny <= ab->maxy)) {
HXLINE(1292)							_hx_tmp35 = (ab->miny <= x19->maxy);
            						}
            						else {
HXLINE(1292)							_hx_tmp35 = false;
            						}
HXDLIN(1292)						if (_hx_tmp35) {
HXLINE(1292)							_hx_tmp34 = (x19->minx <= ab->maxx);
            						}
            						else {
HXLINE(1292)							_hx_tmp34 = false;
            						}
HXDLIN(1292)						if (_hx_tmp34) {
HXLINE(1292)							_hx_tmp33 = (ab->minx <= x19->maxx);
            						}
            						else {
HXLINE(1292)							_hx_tmp33 = false;
            						}
HXDLIN(1292)						if (_hx_tmp33) {
HXLINE(1293)							if (hx::IsNotNull( node85->child1 )) {
HXLINE(1302)								node85->child1->next = stack;
HXLINE(1303)								stack = node85->child1;
            							}
HXLINE(1305)							if (hx::IsNotNull( node85->child2 )) {
HXLINE(1314)								node85->child2->next = stack;
HXLINE(1315)								stack = node85->child2;
            							}
            						}
            					}
            				}
            			}
HXLINE(1320)			{
HXLINE(1321)				if (hx::IsNotNull( this->stree->root )) {
HXLINE(1330)					this->stree->root->next = stack;
HXLINE(1331)					stack = this->stree->root;
            				}
HXLINE(1333)				while(hx::IsNotNull( stack )){
HXLINE(1343)					 ::zpp_nape::space::ZPP_AABBNode ret4 = stack;
HXLINE(1344)					stack = ret4->next;
HXLINE(1345)					ret4->next = null();
HXLINE(1334)					 ::zpp_nape::space::ZPP_AABBNode node86 = ret4;
HXLINE(1348)					if (hx::IsEq( node86,leaf )) {
HXLINE(1348)						continue;
            					}
HXLINE(1349)					if (hx::IsNull( node86->child1 )) {
HXLINE(1350)						 ::zpp_nape::shape::ZPP_Shape shape2 = node86->shape;
HXLINE(1351)						bool _hx_tmp36;
HXDLIN(1351)						if (hx::IsNotEq( shape2->body,lshape->body )) {
HXLINE(1351)							bool _hx_tmp37;
HXDLIN(1351)							if ((shape2->body->type == 1)) {
HXLINE(1351)								_hx_tmp37 = (lshape->body->type == 1);
            							}
            							else {
HXLINE(1351)								_hx_tmp37 = false;
            							}
HXDLIN(1351)							_hx_tmp36 = !(_hx_tmp37);
            						}
            						else {
HXLINE(1351)							_hx_tmp36 = false;
            						}
HXDLIN(1351)						if (_hx_tmp36) {
HXLINE(1352)							 ::zpp_nape::geom::ZPP_AABB x20 = node86->aabb;
HXDLIN(1352)							bool _hx_tmp38;
HXDLIN(1352)							bool _hx_tmp39;
HXDLIN(1352)							bool _hx_tmp40;
HXDLIN(1352)							if ((x20->miny <= ab->maxy)) {
HXLINE(1352)								_hx_tmp40 = (ab->miny <= x20->maxy);
            							}
            							else {
HXLINE(1352)								_hx_tmp40 = false;
            							}
HXDLIN(1352)							if (_hx_tmp40) {
HXLINE(1352)								_hx_tmp39 = (x20->minx <= ab->maxx);
            							}
            							else {
HXLINE(1352)								_hx_tmp39 = false;
            							}
HXDLIN(1352)							if (_hx_tmp39) {
HXLINE(1352)								_hx_tmp38 = (ab->minx <= x20->maxx);
            							}
            							else {
HXLINE(1352)								_hx_tmp38 = false;
            							}
HXDLIN(1352)							if (_hx_tmp38) {
HXLINE(1353)								int id1;
HXLINE(1354)								int di1;
HXLINE(1363)								if ((lshape->id < shape2->id)) {
HXLINE(1364)									id1 = lshape->id;
HXLINE(1365)									di1 = shape2->id;
            								}
            								else {
HXLINE(1368)									id1 = shape2->id;
HXLINE(1369)									di1 = lshape->id;
            								}
HXLINE(1379)								 ::zpp_nape::shape::ZPP_Shape s1;
HXDLIN(1379)								if ((lshape->pairs->length < shape2->pairs->length)) {
HXLINE(1379)									s1 = lshape;
            								}
            								else {
HXLINE(1379)									s1 = shape2;
            								}
HXLINE(1380)								 ::zpp_nape::space::ZPP_AABBPair p2 = null();
HXLINE(1381)								{
HXLINE(1382)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cx_ite4 = s1->pairs->head;
HXLINE(1383)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(1384)										 ::zpp_nape::space::ZPP_AABBPair px1 = cx_ite4->elt;
HXLINE(1394)										bool _hx_tmp41;
HXDLIN(1394)										if ((px1->id == id1)) {
HXLINE(1394)											_hx_tmp41 = (px1->di == di1);
            										}
            										else {
HXLINE(1394)											_hx_tmp41 = false;
            										}
HXDLIN(1394)										if (_hx_tmp41) {
HXLINE(1395)											p2 = px1;
HXLINE(1396)											goto _hx_goto_38;
            										}
HXLINE(1399)										cx_ite4 = cx_ite4->next;
            									}
            									_hx_goto_38:;
            								}
HXLINE(1402)								if (hx::IsNotNull( p2 )) {
HXLINE(1403)									if (p2->sleeping) {
HXLINE(1404)										p2->sleeping = false;
HXLINE(1405)										p2->next = this->pairs;
HXLINE(1406)										this->pairs = p2;
HXLINE(1407)										p2->first = true;
            									}
HXLINE(1409)									continue;
            								}
HXLINE(1412)								if (hx::IsNull( ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1413)									p2 =  ::zpp_nape::space::ZPP_AABBPair_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1419)									p2 = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE(1420)									::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = p2->next;
HXLINE(1421)									p2->next = null();
            								}
HXLINE(1428)								p2->n1 = leaf;
HXLINE(1429)								p2->n2 = node86;
HXLINE(1430)								p2->id = id1;
HXLINE(1431)								p2->di = di1;
HXLINE(1432)								p2->next = this->pairs;
HXLINE(1433)								this->pairs = p2;
HXLINE(1434)								p2->first = true;
HXLINE(1435)								{
HXLINE(1435)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this49 = lshape->pairs;
HXDLIN(1435)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret5;
HXDLIN(1435)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1435)										ret5 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1435)										ret5 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1435)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret5->next;
HXDLIN(1435)										ret5->next = null();
            									}
HXDLIN(1435)									ret5->elt = p2;
HXDLIN(1435)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp2 = ret5;
HXDLIN(1435)									temp2->next = _this49->head;
HXDLIN(1435)									_this49->head = temp2;
HXDLIN(1435)									_this49->modified = true;
HXDLIN(1435)									_this49->length++;
            								}
HXLINE(1436)								{
HXLINE(1436)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this50 = shape2->pairs;
HXDLIN(1436)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret6;
HXDLIN(1436)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1436)										ret6 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1436)										ret6 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1436)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret6->next;
HXDLIN(1436)										ret6->next = null();
            									}
HXDLIN(1436)									ret6->elt = p2;
HXDLIN(1436)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp3 = ret6;
HXDLIN(1436)									temp3->next = _this50->head;
HXDLIN(1436)									_this50->head = temp3;
HXDLIN(1436)									_this50->modified = true;
HXDLIN(1436)									_this50->length++;
            								}
            							}
            						}
            					}
            					else {
HXLINE(1440)						 ::zpp_nape::geom::ZPP_AABB x21 = node86->aabb;
HXDLIN(1440)						bool _hx_tmp42;
HXDLIN(1440)						bool _hx_tmp43;
HXDLIN(1440)						bool _hx_tmp44;
HXDLIN(1440)						if ((x21->miny <= ab->maxy)) {
HXLINE(1440)							_hx_tmp44 = (ab->miny <= x21->maxy);
            						}
            						else {
HXLINE(1440)							_hx_tmp44 = false;
            						}
HXDLIN(1440)						if (_hx_tmp44) {
HXLINE(1440)							_hx_tmp43 = (x21->minx <= ab->maxx);
            						}
            						else {
HXLINE(1440)							_hx_tmp43 = false;
            						}
HXDLIN(1440)						if (_hx_tmp43) {
HXLINE(1440)							_hx_tmp42 = (ab->minx <= x21->maxx);
            						}
            						else {
HXLINE(1440)							_hx_tmp42 = false;
            						}
HXDLIN(1440)						if (_hx_tmp42) {
HXLINE(1441)							if (hx::IsNotNull( node86->child1 )) {
HXLINE(1450)								node86->child1->next = stack;
HXLINE(1451)								stack = node86->child1;
            							}
HXLINE(1453)							if (hx::IsNotNull( node86->child2 )) {
HXLINE(1462)								node86->child2->next = stack;
HXLINE(1463)								stack = node86->child2;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1471)		while(hx::IsNotNull( this->moves )){
HXLINE(1481)			 ::zpp_nape::space::ZPP_AABBNode ret7 = this->moves;
HXLINE(1482)			this->moves = ret7->mnext;
HXLINE(1483)			ret7->mnext = null();
HXLINE(1472)			 ::zpp_nape::space::ZPP_AABBNode leaf1 = ret7;
HXLINE(1487)			leaf1->moved = false;
HXLINE(1488)			 ::zpp_nape::shape::ZPP_Shape lshape1 = leaf1->shape;
HXLINE(1489)			 ::zpp_nape::phys::ZPP_Body lbody1 = lshape1->body;
HXLINE(1498)			if (lbody1->component->sleeping) {
HXLINE(1498)				continue;
            			}
HXLINE(1499)			 ::zpp_nape::geom::ZPP_AABB ab1 = leaf1->aabb;
HXLINE(1500)			 ::zpp_nape::space::ZPP_AABBNode stack1 = null();
HXLINE(1501)			{
HXLINE(1502)				if (hx::IsNotNull( this->dtree->root )) {
HXLINE(1511)					this->dtree->root->next = stack1;
HXLINE(1512)					stack1 = this->dtree->root;
            				}
HXLINE(1514)				while(hx::IsNotNull( stack1 )){
HXLINE(1524)					 ::zpp_nape::space::ZPP_AABBNode ret8 = stack1;
HXLINE(1525)					stack1 = ret8->next;
HXLINE(1526)					ret8->next = null();
HXLINE(1515)					 ::zpp_nape::space::ZPP_AABBNode node87 = ret8;
HXLINE(1529)					if (hx::IsEq( node87,leaf1 )) {
HXLINE(1529)						continue;
            					}
HXLINE(1530)					if (hx::IsNull( node87->child1 )) {
HXLINE(1531)						 ::zpp_nape::shape::ZPP_Shape shape3 = node87->shape;
HXLINE(1532)						bool _hx_tmp45;
HXDLIN(1532)						if (hx::IsNotEq( shape3->body,lshape1->body )) {
HXLINE(1532)							bool _hx_tmp46;
HXDLIN(1532)							if ((shape3->body->type == 1)) {
HXLINE(1532)								_hx_tmp46 = (lshape1->body->type == 1);
            							}
            							else {
HXLINE(1532)								_hx_tmp46 = false;
            							}
HXDLIN(1532)							_hx_tmp45 = !(_hx_tmp46);
            						}
            						else {
HXLINE(1532)							_hx_tmp45 = false;
            						}
HXDLIN(1532)						if (_hx_tmp45) {
HXLINE(1533)							 ::zpp_nape::geom::ZPP_AABB x22 = node87->aabb;
HXDLIN(1533)							bool _hx_tmp47;
HXDLIN(1533)							bool _hx_tmp48;
HXDLIN(1533)							bool _hx_tmp49;
HXDLIN(1533)							if ((x22->miny <= ab1->maxy)) {
HXLINE(1533)								_hx_tmp49 = (ab1->miny <= x22->maxy);
            							}
            							else {
HXLINE(1533)								_hx_tmp49 = false;
            							}
HXDLIN(1533)							if (_hx_tmp49) {
HXLINE(1533)								_hx_tmp48 = (x22->minx <= ab1->maxx);
            							}
            							else {
HXLINE(1533)								_hx_tmp48 = false;
            							}
HXDLIN(1533)							if (_hx_tmp48) {
HXLINE(1533)								_hx_tmp47 = (ab1->minx <= x22->maxx);
            							}
            							else {
HXLINE(1533)								_hx_tmp47 = false;
            							}
HXDLIN(1533)							if (_hx_tmp47) {
HXLINE(1534)								int id2;
HXLINE(1535)								int di2;
HXLINE(1544)								if ((lshape1->id < shape3->id)) {
HXLINE(1545)									id2 = lshape1->id;
HXLINE(1546)									di2 = shape3->id;
            								}
            								else {
HXLINE(1549)									id2 = shape3->id;
HXLINE(1550)									di2 = lshape1->id;
            								}
HXLINE(1560)								 ::zpp_nape::shape::ZPP_Shape s2;
HXDLIN(1560)								if ((lshape1->pairs->length < shape3->pairs->length)) {
HXLINE(1560)									s2 = lshape1;
            								}
            								else {
HXLINE(1560)									s2 = shape3;
            								}
HXLINE(1561)								 ::zpp_nape::space::ZPP_AABBPair p3 = null();
HXLINE(1562)								{
HXLINE(1563)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cx_ite5 = s2->pairs->head;
HXLINE(1564)									while(hx::IsNotNull( cx_ite5 )){
HXLINE(1565)										 ::zpp_nape::space::ZPP_AABBPair px2 = cx_ite5->elt;
HXLINE(1575)										bool _hx_tmp50;
HXDLIN(1575)										if ((px2->id == id2)) {
HXLINE(1575)											_hx_tmp50 = (px2->di == di2);
            										}
            										else {
HXLINE(1575)											_hx_tmp50 = false;
            										}
HXDLIN(1575)										if (_hx_tmp50) {
HXLINE(1576)											p3 = px2;
HXLINE(1577)											goto _hx_goto_41;
            										}
HXLINE(1580)										cx_ite5 = cx_ite5->next;
            									}
            									_hx_goto_41:;
            								}
HXLINE(1583)								if (hx::IsNotNull( p3 )) {
HXLINE(1584)									if (p3->sleeping) {
HXLINE(1585)										p3->sleeping = false;
HXLINE(1586)										p3->next = this->pairs;
HXLINE(1587)										this->pairs = p3;
HXLINE(1588)										p3->first = true;
            									}
HXLINE(1590)									continue;
            								}
HXLINE(1593)								if (hx::IsNull( ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1594)									p3 =  ::zpp_nape::space::ZPP_AABBPair_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1600)									p3 = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE(1601)									::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = p3->next;
HXLINE(1602)									p3->next = null();
            								}
HXLINE(1609)								p3->n1 = leaf1;
HXLINE(1610)								p3->n2 = node87;
HXLINE(1611)								p3->id = id2;
HXLINE(1612)								p3->di = di2;
HXLINE(1613)								p3->next = this->pairs;
HXLINE(1614)								this->pairs = p3;
HXLINE(1615)								p3->first = true;
HXLINE(1616)								{
HXLINE(1616)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this51 = lshape1->pairs;
HXDLIN(1616)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret9;
HXDLIN(1616)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1616)										ret9 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1616)										ret9 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1616)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret9->next;
HXDLIN(1616)										ret9->next = null();
            									}
HXDLIN(1616)									ret9->elt = p3;
HXDLIN(1616)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp4 = ret9;
HXDLIN(1616)									temp4->next = _this51->head;
HXDLIN(1616)									_this51->head = temp4;
HXDLIN(1616)									_this51->modified = true;
HXDLIN(1616)									_this51->length++;
            								}
HXLINE(1617)								{
HXLINE(1617)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this52 = shape3->pairs;
HXDLIN(1617)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret10;
HXDLIN(1617)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1617)										ret10 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1617)										ret10 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1617)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret10->next;
HXDLIN(1617)										ret10->next = null();
            									}
HXDLIN(1617)									ret10->elt = p3;
HXDLIN(1617)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp5 = ret10;
HXDLIN(1617)									temp5->next = _this52->head;
HXDLIN(1617)									_this52->head = temp5;
HXDLIN(1617)									_this52->modified = true;
HXDLIN(1617)									_this52->length++;
            								}
            							}
            						}
            					}
            					else {
HXLINE(1621)						 ::zpp_nape::geom::ZPP_AABB x23 = node87->aabb;
HXDLIN(1621)						bool _hx_tmp51;
HXDLIN(1621)						bool _hx_tmp52;
HXDLIN(1621)						bool _hx_tmp53;
HXDLIN(1621)						if ((x23->miny <= ab1->maxy)) {
HXLINE(1621)							_hx_tmp53 = (ab1->miny <= x23->maxy);
            						}
            						else {
HXLINE(1621)							_hx_tmp53 = false;
            						}
HXDLIN(1621)						if (_hx_tmp53) {
HXLINE(1621)							_hx_tmp52 = (x23->minx <= ab1->maxx);
            						}
            						else {
HXLINE(1621)							_hx_tmp52 = false;
            						}
HXDLIN(1621)						if (_hx_tmp52) {
HXLINE(1621)							_hx_tmp51 = (ab1->minx <= x23->maxx);
            						}
            						else {
HXLINE(1621)							_hx_tmp51 = false;
            						}
HXDLIN(1621)						if (_hx_tmp51) {
HXLINE(1622)							if (hx::IsNotNull( node87->child1 )) {
HXLINE(1631)								node87->child1->next = stack1;
HXLINE(1632)								stack1 = node87->child1;
            							}
HXLINE(1634)							if (hx::IsNotNull( node87->child2 )) {
HXLINE(1643)								node87->child2->next = stack1;
HXLINE(1644)								stack1 = node87->child2;
            							}
            						}
            					}
            				}
            			}
HXLINE(1649)			{
HXLINE(1650)				if (hx::IsNotNull( this->stree->root )) {
HXLINE(1659)					this->stree->root->next = stack1;
HXLINE(1660)					stack1 = this->stree->root;
            				}
HXLINE(1662)				while(hx::IsNotNull( stack1 )){
HXLINE(1672)					 ::zpp_nape::space::ZPP_AABBNode ret11 = stack1;
HXLINE(1673)					stack1 = ret11->next;
HXLINE(1674)					ret11->next = null();
HXLINE(1663)					 ::zpp_nape::space::ZPP_AABBNode node88 = ret11;
HXLINE(1677)					if (hx::IsEq( node88,leaf1 )) {
HXLINE(1677)						continue;
            					}
HXLINE(1678)					if (hx::IsNull( node88->child1 )) {
HXLINE(1679)						 ::zpp_nape::shape::ZPP_Shape shape4 = node88->shape;
HXLINE(1680)						bool _hx_tmp54;
HXDLIN(1680)						if (hx::IsNotEq( shape4->body,lshape1->body )) {
HXLINE(1680)							bool _hx_tmp55;
HXDLIN(1680)							if ((shape4->body->type == 1)) {
HXLINE(1680)								_hx_tmp55 = (lshape1->body->type == 1);
            							}
            							else {
HXLINE(1680)								_hx_tmp55 = false;
            							}
HXDLIN(1680)							_hx_tmp54 = !(_hx_tmp55);
            						}
            						else {
HXLINE(1680)							_hx_tmp54 = false;
            						}
HXDLIN(1680)						if (_hx_tmp54) {
HXLINE(1681)							 ::zpp_nape::geom::ZPP_AABB x24 = node88->aabb;
HXDLIN(1681)							bool _hx_tmp56;
HXDLIN(1681)							bool _hx_tmp57;
HXDLIN(1681)							bool _hx_tmp58;
HXDLIN(1681)							if ((x24->miny <= ab1->maxy)) {
HXLINE(1681)								_hx_tmp58 = (ab1->miny <= x24->maxy);
            							}
            							else {
HXLINE(1681)								_hx_tmp58 = false;
            							}
HXDLIN(1681)							if (_hx_tmp58) {
HXLINE(1681)								_hx_tmp57 = (x24->minx <= ab1->maxx);
            							}
            							else {
HXLINE(1681)								_hx_tmp57 = false;
            							}
HXDLIN(1681)							if (_hx_tmp57) {
HXLINE(1681)								_hx_tmp56 = (ab1->minx <= x24->maxx);
            							}
            							else {
HXLINE(1681)								_hx_tmp56 = false;
            							}
HXDLIN(1681)							if (_hx_tmp56) {
HXLINE(1682)								int id3;
HXLINE(1683)								int di3;
HXLINE(1692)								if ((lshape1->id < shape4->id)) {
HXLINE(1693)									id3 = lshape1->id;
HXLINE(1694)									di3 = shape4->id;
            								}
            								else {
HXLINE(1697)									id3 = shape4->id;
HXLINE(1698)									di3 = lshape1->id;
            								}
HXLINE(1708)								 ::zpp_nape::shape::ZPP_Shape s3;
HXDLIN(1708)								if ((lshape1->pairs->length < shape4->pairs->length)) {
HXLINE(1708)									s3 = lshape1;
            								}
            								else {
HXLINE(1708)									s3 = shape4;
            								}
HXLINE(1709)								 ::zpp_nape::space::ZPP_AABBPair p4 = null();
HXLINE(1710)								{
HXLINE(1711)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cx_ite6 = s3->pairs->head;
HXLINE(1712)									while(hx::IsNotNull( cx_ite6 )){
HXLINE(1713)										 ::zpp_nape::space::ZPP_AABBPair px3 = cx_ite6->elt;
HXLINE(1723)										bool _hx_tmp59;
HXDLIN(1723)										if ((px3->id == id3)) {
HXLINE(1723)											_hx_tmp59 = (px3->di == di3);
            										}
            										else {
HXLINE(1723)											_hx_tmp59 = false;
            										}
HXDLIN(1723)										if (_hx_tmp59) {
HXLINE(1724)											p4 = px3;
HXLINE(1725)											goto _hx_goto_43;
            										}
HXLINE(1728)										cx_ite6 = cx_ite6->next;
            									}
            									_hx_goto_43:;
            								}
HXLINE(1731)								if (hx::IsNotNull( p4 )) {
HXLINE(1732)									if (p4->sleeping) {
HXLINE(1733)										p4->sleeping = false;
HXLINE(1734)										p4->next = this->pairs;
HXLINE(1735)										this->pairs = p4;
HXLINE(1736)										p4->first = true;
            									}
HXLINE(1738)									continue;
            								}
HXLINE(1741)								if (hx::IsNull( ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1742)									p4 =  ::zpp_nape::space::ZPP_AABBPair_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE(1748)									p4 = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE(1749)									::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = p4->next;
HXLINE(1750)									p4->next = null();
            								}
HXLINE(1757)								p4->n1 = leaf1;
HXLINE(1758)								p4->n2 = node88;
HXLINE(1759)								p4->id = id3;
HXLINE(1760)								p4->di = di3;
HXLINE(1761)								p4->next = this->pairs;
HXLINE(1762)								this->pairs = p4;
HXLINE(1763)								p4->first = true;
HXLINE(1764)								{
HXLINE(1764)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this53 = lshape1->pairs;
HXDLIN(1764)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret12;
HXDLIN(1764)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1764)										ret12 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1764)										ret12 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1764)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret12->next;
HXDLIN(1764)										ret12->next = null();
            									}
HXDLIN(1764)									ret12->elt = p4;
HXDLIN(1764)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp6 = ret12;
HXDLIN(1764)									temp6->next = _this53->head;
HXDLIN(1764)									_this53->head = temp6;
HXDLIN(1764)									_this53->modified = true;
HXDLIN(1764)									_this53->length++;
            								}
HXLINE(1765)								{
HXLINE(1765)									 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this54 = shape4->pairs;
HXDLIN(1765)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret13;
HXDLIN(1765)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(1765)										ret13 =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1765)										ret13 = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1765)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret13->next;
HXDLIN(1765)										ret13->next = null();
            									}
HXDLIN(1765)									ret13->elt = p4;
HXDLIN(1765)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair temp7 = ret13;
HXDLIN(1765)									temp7->next = _this54->head;
HXDLIN(1765)									_this54->head = temp7;
HXDLIN(1765)									_this54->modified = true;
HXDLIN(1765)									_this54->length++;
            								}
            							}
            						}
            					}
            					else {
HXLINE(1769)						 ::zpp_nape::geom::ZPP_AABB x25 = node88->aabb;
HXDLIN(1769)						bool _hx_tmp60;
HXDLIN(1769)						bool _hx_tmp61;
HXDLIN(1769)						bool _hx_tmp62;
HXDLIN(1769)						if ((x25->miny <= ab1->maxy)) {
HXLINE(1769)							_hx_tmp62 = (ab1->miny <= x25->maxy);
            						}
            						else {
HXLINE(1769)							_hx_tmp62 = false;
            						}
HXDLIN(1769)						if (_hx_tmp62) {
HXLINE(1769)							_hx_tmp61 = (x25->minx <= ab1->maxx);
            						}
            						else {
HXLINE(1769)							_hx_tmp61 = false;
            						}
HXDLIN(1769)						if (_hx_tmp61) {
HXLINE(1769)							_hx_tmp60 = (ab1->minx <= x25->maxx);
            						}
            						else {
HXLINE(1769)							_hx_tmp60 = false;
            						}
HXDLIN(1769)						if (_hx_tmp60) {
HXLINE(1770)							if (hx::IsNotNull( node88->child1 )) {
HXLINE(1779)								node88->child1->next = stack1;
HXLINE(1780)								stack1 = node88->child1;
            							}
HXLINE(1782)							if (hx::IsNotNull( node88->child2 )) {
HXLINE(1791)								node88->child2->next = stack1;
HXLINE(1792)								stack1 = node88->child2;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1799)		 ::zpp_nape::space::ZPP_AABBPair pre = null();
HXLINE(1800)		 ::zpp_nape::space::ZPP_AABBPair cur = this->pairs;
HXLINE(1801)		while(hx::IsNotNull( cur )){
HXLINE(1810)			bool _hx_tmp63;
HXDLIN(1810)			if (!(cur->first)) {
HXLINE(1810)				 ::zpp_nape::geom::ZPP_AABB _this55 = cur->n1->aabb;
HXDLIN(1810)				 ::zpp_nape::geom::ZPP_AABB x26 = cur->n2->aabb;
HXDLIN(1810)				bool _hx_tmp64;
HXDLIN(1810)				bool _hx_tmp65;
HXDLIN(1810)				bool _hx_tmp66;
HXDLIN(1810)				if ((x26->miny <= _this55->maxy)) {
HXLINE(1810)					_hx_tmp66 = (_this55->miny <= x26->maxy);
            				}
            				else {
HXLINE(1810)					_hx_tmp66 = false;
            				}
HXDLIN(1810)				if (_hx_tmp66) {
HXLINE(1810)					_hx_tmp65 = (x26->minx <= _this55->maxx);
            				}
            				else {
HXLINE(1810)					_hx_tmp65 = false;
            				}
HXDLIN(1810)				if (_hx_tmp65) {
HXLINE(1810)					_hx_tmp64 = (_this55->minx <= x26->maxx);
            				}
            				else {
HXLINE(1810)					_hx_tmp64 = false;
            				}
HXDLIN(1810)				_hx_tmp63 = !(_hx_tmp64);
            			}
            			else {
HXLINE(1810)				_hx_tmp63 = false;
            			}
HXDLIN(1810)			if (_hx_tmp63) {
HXLINE(1811)				if (hx::IsNull( pre )) {
HXLINE(1811)					this->pairs = cur->next;
            				}
            				else {
HXLINE(1812)					pre->next = cur->next;
            				}
HXLINE(1813)				{
HXLINE(1813)					 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this56 = cur->n1->shape->pairs;
HXDLIN(1813)					{
HXLINE(1813)						 ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre1 = null();
HXDLIN(1813)						 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cur1 = _this56->head;
HXDLIN(1813)						bool ret14 = false;
HXDLIN(1813)						while(hx::IsNotNull( cur1 )){
HXLINE(1813)							if (hx::IsEq( cur1->elt,cur )) {
HXLINE(1813)								{
HXLINE(1813)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair old;
HXDLIN(1813)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret15;
HXDLIN(1813)									if (hx::IsNull( pre1 )) {
HXLINE(1813)										old = _this56->head;
HXDLIN(1813)										ret15 = old->next;
HXDLIN(1813)										_this56->head = ret15;
HXDLIN(1813)										if (hx::IsNull( _this56->head )) {
HXLINE(1813)											_this56->pushmod = true;
            										}
            									}
            									else {
HXLINE(1813)										old = pre1->next;
HXDLIN(1813)										ret15 = old->next;
HXDLIN(1813)										pre1->next = ret15;
HXDLIN(1813)										if (hx::IsNull( ret15 )) {
HXLINE(1813)											_this56->pushmod = true;
            										}
            									}
HXDLIN(1813)									{
HXLINE(1813)										 ::zpp_nape::util::ZNPNode_ZPP_AABBPair o4 = old;
HXDLIN(1813)										o4->elt = null();
HXDLIN(1813)										o4->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1813)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o4;
            									}
HXDLIN(1813)									_this56->modified = true;
HXDLIN(1813)									_this56->length--;
HXDLIN(1813)									_this56->pushmod = true;
            								}
HXDLIN(1813)								ret14 = true;
HXDLIN(1813)								goto _hx_goto_45;
            							}
HXDLIN(1813)							pre1 = cur1;
HXDLIN(1813)							cur1 = cur1->next;
            						}
            						_hx_goto_45:;
            					}
            				}
HXLINE(1814)				{
HXLINE(1814)					 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this57 = cur->n2->shape->pairs;
HXDLIN(1814)					{
HXLINE(1814)						 ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre2 = null();
HXDLIN(1814)						 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cur2 = _this57->head;
HXDLIN(1814)						bool ret16 = false;
HXDLIN(1814)						while(hx::IsNotNull( cur2 )){
HXLINE(1814)							if (hx::IsEq( cur2->elt,cur )) {
HXLINE(1814)								{
HXLINE(1814)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair old1;
HXDLIN(1814)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret17;
HXDLIN(1814)									if (hx::IsNull( pre2 )) {
HXLINE(1814)										old1 = _this57->head;
HXDLIN(1814)										ret17 = old1->next;
HXDLIN(1814)										_this57->head = ret17;
HXDLIN(1814)										if (hx::IsNull( _this57->head )) {
HXLINE(1814)											_this57->pushmod = true;
            										}
            									}
            									else {
HXLINE(1814)										old1 = pre2->next;
HXDLIN(1814)										ret17 = old1->next;
HXDLIN(1814)										pre2->next = ret17;
HXDLIN(1814)										if (hx::IsNull( ret17 )) {
HXLINE(1814)											_this57->pushmod = true;
            										}
            									}
HXDLIN(1814)									{
HXLINE(1814)										 ::zpp_nape::util::ZNPNode_ZPP_AABBPair o5 = old1;
HXDLIN(1814)										o5->elt = null();
HXDLIN(1814)										o5->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1814)										::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o5;
            									}
HXDLIN(1814)									_this57->modified = true;
HXDLIN(1814)									_this57->length--;
HXDLIN(1814)									_this57->pushmod = true;
            								}
HXDLIN(1814)								ret16 = true;
HXDLIN(1814)								goto _hx_goto_46;
            							}
HXDLIN(1814)							pre2 = cur2;
HXDLIN(1814)							cur2 = cur2->next;
            						}
            						_hx_goto_46:;
            					}
            				}
HXLINE(1815)				 ::zpp_nape::space::ZPP_AABBPair nxt = cur->next;
HXLINE(1816)				if (hx::IsNotNull( cur->arb )) {
HXLINE(1816)					cur->arb->pair = null();
            				}
HXLINE(1817)				cur->arb = null();
HXLINE(1818)				{
HXLINE(1819)					 ::zpp_nape::space::ZPP_AABBPair o6 = cur;
HXLINE(1828)					{
HXLINE(1828)						o6->n1 = (o6->n2 = null());
HXDLIN(1828)						o6->sleeping = false;
            					}
HXLINE(1829)					o6->next = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE(1830)					::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = o6;
            				}
HXLINE(1835)				cur = nxt;
HXLINE(1836)				continue;
            			}
HXLINE(1838)			 ::zpp_nape::shape::ZPP_Shape s11 = cur->n1->shape;
HXLINE(1839)			 ::zpp_nape::phys::ZPP_Body b110 = s11->body;
HXLINE(1840)			 ::zpp_nape::shape::ZPP_Shape s21 = cur->n2->shape;
HXLINE(1841)			 ::zpp_nape::phys::ZPP_Body b23 = s21->body;
HXLINE(1842)			if (!(cur->first)) {
HXLINE(1843)				bool _hx_tmp67;
HXDLIN(1843)				bool _hx_tmp68;
HXDLIN(1843)				if (!(b110->component->sleeping)) {
HXLINE(1843)					_hx_tmp68 = (b110->type == 1);
            				}
            				else {
HXLINE(1843)					_hx_tmp68 = true;
            				}
HXDLIN(1843)				if (_hx_tmp68) {
HXLINE(1843)					if (!(b23->component->sleeping)) {
HXLINE(1843)						_hx_tmp67 = (b23->type == 1);
            					}
            					else {
HXLINE(1843)						_hx_tmp67 = true;
            					}
            				}
            				else {
HXLINE(1843)					_hx_tmp67 = false;
            				}
HXDLIN(1843)				if (_hx_tmp67) {
HXLINE(1844)					cur->sleeping = true;
HXLINE(1845)					if (hx::IsNull( pre )) {
HXLINE(1845)						this->pairs = cur->next;
            					}
            					else {
HXLINE(1846)						pre->next = cur->next;
            					}
HXLINE(1847)					cur = cur->next;
HXLINE(1848)					continue;
            				}
            			}
HXLINE(1851)			cur->first = false;
HXLINE(1852)			 ::zpp_nape::geom::ZPP_AABB _this58 = s11->aabb;
HXDLIN(1852)			 ::zpp_nape::geom::ZPP_AABB x27 = s21->aabb;
HXDLIN(1852)			bool _hx_tmp69;
HXDLIN(1852)			bool _hx_tmp70;
HXDLIN(1852)			bool _hx_tmp71;
HXDLIN(1852)			if ((x27->miny <= _this58->maxy)) {
HXLINE(1852)				_hx_tmp71 = (_this58->miny <= x27->maxy);
            			}
            			else {
HXLINE(1852)				_hx_tmp71 = false;
            			}
HXDLIN(1852)			if (_hx_tmp71) {
HXLINE(1852)				_hx_tmp70 = (x27->minx <= _this58->maxx);
            			}
            			else {
HXLINE(1852)				_hx_tmp70 = false;
            			}
HXDLIN(1852)			if (_hx_tmp70) {
HXLINE(1852)				_hx_tmp69 = (_this58->minx <= x27->maxx);
            			}
            			else {
HXLINE(1852)				_hx_tmp69 = false;
            			}
HXDLIN(1852)			if (_hx_tmp69) {
HXLINE(1861)				 ::zpp_nape::dynamics::ZPP_Arbiter oarb = cur->arb;
HXLINE(1862)				if (discrete) {
HXLINE(1862)					bool _hx_tmp72;
HXDLIN(1862)					if ((b110->type == 2)) {
HXLINE(1862)						_hx_tmp72 = (b23->type != 2);
            					}
            					else {
HXLINE(1862)						_hx_tmp72 = true;
            					}
HXDLIN(1862)					cur->arb = space->narrowPhase(s11,s21,_hx_tmp72,cur->arb,false);
            				}
            				else {
HXLINE(1863)					bool _hx_tmp73;
HXDLIN(1863)					if ((b110->type == 2)) {
HXLINE(1863)						_hx_tmp73 = (b23->type != 2);
            					}
            					else {
HXLINE(1863)						_hx_tmp73 = true;
            					}
HXDLIN(1863)					cur->arb = space->continuousEvent(s11,s21,_hx_tmp73,cur->arb,false);
            				}
HXLINE(1864)				if (hx::IsNull( cur->arb )) {
HXLINE(1865)					if (hx::IsNotNull( oarb )) {
HXLINE(1865)						oarb->pair = null();
            					}
            				}
            				else {
HXLINE(1867)					cur->arb->pair = cur;
            				}
            			}
HXLINE(1878)			pre = cur;
HXLINE(1879)			cur = cur->next;
            		}
            	}


void ZPP_DynAABBPhase_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_bef38b12d532b2cb_1882_clear)
HXLINE(1883)		while(hx::IsNotNull( this->syncs )){
HXLINE(1884)			 ::zpp_nape::space::ZPP_AABBNode next = this->syncs->snext;
HXLINE(1885)			this->syncs->snext = null();
HXLINE(1886)			if (this->syncs->first_sync) {
HXLINE(1887)				this->syncs->shape->node = null();
HXLINE(1888)				this->syncs->shape->removedFromSpace();
HXLINE(1889)				this->syncs->shape = null();
            			}
HXLINE(1891)			this->syncs = next;
            		}
HXLINE(1893)		while(hx::IsNotNull( this->moves )){
HXLINE(1894)			 ::zpp_nape::space::ZPP_AABBNode next1 = this->moves->mnext;
HXLINE(1895)			this->moves->mnext = null();
HXLINE(1896)			if (this->moves->first_sync) {
HXLINE(1897)				this->moves->shape->node = null();
HXLINE(1898)				this->moves->shape->removedFromSpace();
HXLINE(1899)				this->moves->shape = null();
            			}
HXLINE(1901)			this->moves = next1;
            		}
HXLINE(1903)		while(hx::IsNotNull( this->pairs )){
HXLINE(1904)			 ::zpp_nape::space::ZPP_AABBPair nxt = this->pairs->next;
HXLINE(1905)			if (hx::IsNotNull( this->pairs->arb )) {
HXLINE(1905)				this->pairs->arb->pair = null();
            			}
HXLINE(1906)			this->pairs->arb = null();
HXLINE(1907)			{
HXLINE(1907)				 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this = this->pairs->n1->shape->pairs;
HXDLIN(1907)				 ::zpp_nape::space::ZPP_AABBPair obj = this->pairs;
HXDLIN(1907)				{
HXLINE(1907)					 ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre = null();
HXDLIN(1907)					 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cur = _this->head;
HXDLIN(1907)					bool ret = false;
HXDLIN(1907)					while(hx::IsNotNull( cur )){
HXLINE(1907)						if (hx::IsEq( cur->elt,obj )) {
HXLINE(1907)							{
HXLINE(1907)								 ::zpp_nape::util::ZNPNode_ZPP_AABBPair old;
HXDLIN(1907)								 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret1;
HXDLIN(1907)								if (hx::IsNull( pre )) {
HXLINE(1907)									old = _this->head;
HXDLIN(1907)									ret1 = old->next;
HXDLIN(1907)									_this->head = ret1;
HXDLIN(1907)									if (hx::IsNull( _this->head )) {
HXLINE(1907)										_this->pushmod = true;
            									}
            								}
            								else {
HXLINE(1907)									old = pre->next;
HXDLIN(1907)									ret1 = old->next;
HXDLIN(1907)									pre->next = ret1;
HXDLIN(1907)									if (hx::IsNull( ret1 )) {
HXLINE(1907)										_this->pushmod = true;
            									}
            								}
HXDLIN(1907)								{
HXLINE(1907)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair o = old;
HXDLIN(1907)									o->elt = null();
HXDLIN(1907)									o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1907)									::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o;
            								}
HXDLIN(1907)								_this->modified = true;
HXDLIN(1907)								_this->length--;
HXDLIN(1907)								_this->pushmod = true;
            							}
HXDLIN(1907)							ret = true;
HXDLIN(1907)							goto _hx_goto_51;
            						}
HXDLIN(1907)						pre = cur;
HXDLIN(1907)						cur = cur->next;
            					}
            					_hx_goto_51:;
            				}
            			}
HXLINE(1908)			{
HXLINE(1908)				 ::zpp_nape::util::ZNPList_ZPP_AABBPair _this1 = this->pairs->n2->shape->pairs;
HXDLIN(1908)				 ::zpp_nape::space::ZPP_AABBPair obj1 = this->pairs;
HXDLIN(1908)				{
HXLINE(1908)					 ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre1 = null();
HXDLIN(1908)					 ::zpp_nape::util::ZNPNode_ZPP_AABBPair cur1 = _this1->head;
HXDLIN(1908)					bool ret2 = false;
HXDLIN(1908)					while(hx::IsNotNull( cur1 )){
HXLINE(1908)						if (hx::IsEq( cur1->elt,obj1 )) {
HXLINE(1908)							{
HXLINE(1908)								 ::zpp_nape::util::ZNPNode_ZPP_AABBPair old1;
HXDLIN(1908)								 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ret3;
HXDLIN(1908)								if (hx::IsNull( pre1 )) {
HXLINE(1908)									old1 = _this1->head;
HXDLIN(1908)									ret3 = old1->next;
HXDLIN(1908)									_this1->head = ret3;
HXDLIN(1908)									if (hx::IsNull( _this1->head )) {
HXLINE(1908)										_this1->pushmod = true;
            									}
            								}
            								else {
HXLINE(1908)									old1 = pre1->next;
HXDLIN(1908)									ret3 = old1->next;
HXDLIN(1908)									pre1->next = ret3;
HXDLIN(1908)									if (hx::IsNull( ret3 )) {
HXLINE(1908)										_this1->pushmod = true;
            									}
            								}
HXDLIN(1908)								{
HXLINE(1908)									 ::zpp_nape::util::ZNPNode_ZPP_AABBPair o1 = old1;
HXDLIN(1908)									o1->elt = null();
HXDLIN(1908)									o1->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(1908)									::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o1;
            								}
HXDLIN(1908)								_this1->modified = true;
HXDLIN(1908)								_this1->length--;
HXDLIN(1908)								_this1->pushmod = true;
            							}
HXDLIN(1908)							ret2 = true;
HXDLIN(1908)							goto _hx_goto_52;
            						}
HXDLIN(1908)						pre1 = cur1;
HXDLIN(1908)						cur1 = cur1->next;
            					}
            					_hx_goto_52:;
            				}
            			}
HXLINE(1909)			{
HXLINE(1910)				 ::zpp_nape::space::ZPP_AABBPair o2 = this->pairs;
HXLINE(1919)				{
HXLINE(1919)					o2->n1 = (o2->n2 = null());
HXDLIN(1919)					o2->sleeping = false;
            				}
HXLINE(1920)				o2->next = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool;
HXLINE(1921)				::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = o2;
            			}
HXLINE(1926)			this->pairs = nxt;
            		}
HXLINE(1928)		this->dtree->clear();
HXLINE(1929)		this->stree->clear();
            	}


 ::nape::shape::ShapeList ZPP_DynAABBPhase_obj::shapesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_1932_shapesUnderPoint)
HXLINE(1933)		this->sync_broadphase();
HXLINE(1934)		 ::zpp_nape::geom::ZPP_Vec2 ret;
HXDLIN(1934)		{
HXLINE(1934)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1934)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(1934)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1934)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN(1934)				ret->next = null();
            			}
HXDLIN(1934)			ret->weak = false;
            		}
HXDLIN(1934)		ret->_immutable = false;
HXDLIN(1934)		{
HXLINE(1934)			ret->x = x;
HXDLIN(1934)			ret->y = y;
            		}
HXDLIN(1934)		 ::zpp_nape::geom::ZPP_Vec2 v = ret;
HXLINE(1935)		 ::nape::shape::ShapeList ret1;
HXDLIN(1935)		if (hx::IsNull( output )) {
HXLINE(1935)			ret1 =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1935)			ret1 = output;
            		}
HXLINE(1938)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(1939)			if (hx::IsNull( this->treeStack )) {
HXLINE(1939)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(1940)			this->treeStack->add(this->stree->root);
HXLINE(1941)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(1942)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(1951)				 ::zpp_nape::geom::ZPP_AABB _this = node->aabb;
HXDLIN(1951)				bool _hx_tmp;
HXDLIN(1951)				bool _hx_tmp1;
HXDLIN(1951)				bool _hx_tmp2;
HXDLIN(1951)				if ((v->x >= _this->minx)) {
HXLINE(1951)					_hx_tmp2 = (v->x <= _this->maxx);
            				}
            				else {
HXLINE(1951)					_hx_tmp2 = false;
            				}
HXDLIN(1951)				if (_hx_tmp2) {
HXLINE(1951)					_hx_tmp1 = (v->y >= _this->miny);
            				}
            				else {
HXLINE(1951)					_hx_tmp1 = false;
            				}
HXDLIN(1951)				if (_hx_tmp1) {
HXLINE(1951)					_hx_tmp = (v->y <= _this->maxy);
            				}
            				else {
HXLINE(1951)					_hx_tmp = false;
            				}
HXDLIN(1951)				if (_hx_tmp) {
HXLINE(1952)					if (hx::IsNull( node->child1 )) {
HXLINE(1954)						bool _hx_tmp3;
HXDLIN(1954)						if (hx::IsNotNull( filter )) {
HXLINE(1954)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node->shape->filter;
HXDLIN(1954)							if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(1954)								_hx_tmp3 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            							}
            							else {
HXLINE(1954)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(1954)							_hx_tmp3 = true;
            						}
HXDLIN(1954)						if (_hx_tmp3) {
HXLINE(1955)							if ((node->shape->type == 0)) {
HXLINE(1956)								if (::zpp_nape::geom::ZPP_Collide_obj::circleContains(node->shape->circle,v)) {
HXLINE(1956)									ret1->push(node->shape->outer);
            								}
            							}
            							else {
HXLINE(1959)								if (::zpp_nape::geom::ZPP_Collide_obj::polyContains(node->shape->polygon,v)) {
HXLINE(1959)									ret1->push(node->shape->outer);
            								}
            							}
            						}
            					}
            					else {
HXLINE(1965)						if (hx::IsNotNull( node->child1 )) {
HXLINE(1965)							this->treeStack->add(node->child1);
            						}
HXLINE(1966)						if (hx::IsNotNull( node->child2 )) {
HXLINE(1966)							this->treeStack->add(node->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(1975)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(1976)			if (hx::IsNull( this->treeStack )) {
HXLINE(1976)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(1977)			this->treeStack->add(this->dtree->root);
HXLINE(1978)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(1979)				 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack->pop_unsafe();
HXLINE(1988)				 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(1988)				bool _hx_tmp4;
HXDLIN(1988)				bool _hx_tmp5;
HXDLIN(1988)				bool _hx_tmp6;
HXDLIN(1988)				if ((v->x >= _this2->minx)) {
HXLINE(1988)					_hx_tmp6 = (v->x <= _this2->maxx);
            				}
            				else {
HXLINE(1988)					_hx_tmp6 = false;
            				}
HXDLIN(1988)				if (_hx_tmp6) {
HXLINE(1988)					_hx_tmp5 = (v->y >= _this2->miny);
            				}
            				else {
HXLINE(1988)					_hx_tmp5 = false;
            				}
HXDLIN(1988)				if (_hx_tmp5) {
HXLINE(1988)					_hx_tmp4 = (v->y <= _this2->maxy);
            				}
            				else {
HXLINE(1988)					_hx_tmp4 = false;
            				}
HXDLIN(1988)				if (_hx_tmp4) {
HXLINE(1989)					if (hx::IsNull( node1->child1 )) {
HXLINE(1991)						bool _hx_tmp7;
HXDLIN(1991)						if (hx::IsNotNull( filter )) {
HXLINE(1991)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node1->shape->filter;
HXDLIN(1991)							if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(1991)								_hx_tmp7 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            							}
            							else {
HXLINE(1991)								_hx_tmp7 = false;
            							}
            						}
            						else {
HXLINE(1991)							_hx_tmp7 = true;
            						}
HXDLIN(1991)						if (_hx_tmp7) {
HXLINE(1992)							if ((node1->shape->type == 0)) {
HXLINE(1993)								if (::zpp_nape::geom::ZPP_Collide_obj::circleContains(node1->shape->circle,v)) {
HXLINE(1993)									ret1->push(node1->shape->outer);
            								}
            							}
            							else {
HXLINE(1996)								if (::zpp_nape::geom::ZPP_Collide_obj::polyContains(node1->shape->polygon,v)) {
HXLINE(1996)									ret1->push(node1->shape->outer);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2002)						if (hx::IsNotNull( node1->child1 )) {
HXLINE(2002)							this->treeStack->add(node1->child1);
            						}
HXLINE(2003)						if (hx::IsNotNull( node1->child2 )) {
HXLINE(2003)							this->treeStack->add(node1->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2010)		{
HXLINE(2011)			 ::zpp_nape::geom::ZPP_Vec2 o = v;
HXLINE(2020)			{
HXLINE(2020)				if (hx::IsNotNull( o->outer )) {
HXLINE(2020)					o->outer->zpp_inner = null();
HXDLIN(2020)					o->outer = null();
            				}
HXDLIN(2020)				o->_isimmutable = null();
HXDLIN(2020)				o->_validate = null();
HXDLIN(2020)				o->_invalidate = null();
            			}
HXLINE(2021)			o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE(2022)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            		}
HXLINE(2027)		return ret1;
            	}


 ::nape::phys::BodyList ZPP_DynAABBPhase_obj::bodiesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2029_bodiesUnderPoint)
HXLINE(2030)		this->sync_broadphase();
HXLINE(2031)		 ::zpp_nape::geom::ZPP_Vec2 ret;
HXDLIN(2031)		{
HXLINE(2031)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2031)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2031)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2031)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN(2031)				ret->next = null();
            			}
HXDLIN(2031)			ret->weak = false;
            		}
HXDLIN(2031)		ret->_immutable = false;
HXDLIN(2031)		{
HXLINE(2031)			ret->x = x;
HXDLIN(2031)			ret->y = y;
            		}
HXDLIN(2031)		 ::zpp_nape::geom::ZPP_Vec2 v = ret;
HXLINE(2032)		 ::nape::phys::BodyList ret1;
HXDLIN(2032)		if (hx::IsNull( output )) {
HXLINE(2032)			ret1 =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2032)			ret1 = output;
            		}
HXLINE(2035)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2036)			if (hx::IsNull( this->treeStack )) {
HXLINE(2036)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2037)			this->treeStack->add(this->stree->root);
HXLINE(2038)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2039)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2048)				 ::zpp_nape::geom::ZPP_AABB _this = node->aabb;
HXDLIN(2048)				bool _hx_tmp;
HXDLIN(2048)				bool _hx_tmp1;
HXDLIN(2048)				bool _hx_tmp2;
HXDLIN(2048)				if ((v->x >= _this->minx)) {
HXLINE(2048)					_hx_tmp2 = (v->x <= _this->maxx);
            				}
            				else {
HXLINE(2048)					_hx_tmp2 = false;
            				}
HXDLIN(2048)				if (_hx_tmp2) {
HXLINE(2048)					_hx_tmp1 = (v->y >= _this->miny);
            				}
            				else {
HXLINE(2048)					_hx_tmp1 = false;
            				}
HXDLIN(2048)				if (_hx_tmp1) {
HXLINE(2048)					_hx_tmp = (v->y <= _this->maxy);
            				}
            				else {
HXLINE(2048)					_hx_tmp = false;
            				}
HXDLIN(2048)				if (_hx_tmp) {
HXLINE(2049)					if (hx::IsNull( node->child1 )) {
HXLINE(2051)						 ::nape::phys::Body body = node->shape->body->outer;
HXLINE(2052)						if (!(ret1->has(body))) {
HXLINE(2053)							bool _hx_tmp3;
HXDLIN(2053)							if (hx::IsNotNull( filter )) {
HXLINE(2053)								 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node->shape->filter;
HXDLIN(2053)								if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2053)									_hx_tmp3 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            								}
            								else {
HXLINE(2053)									_hx_tmp3 = false;
            								}
            							}
            							else {
HXLINE(2053)								_hx_tmp3 = true;
            							}
HXDLIN(2053)							if (_hx_tmp3) {
HXLINE(2054)								if ((node->shape->type == 0)) {
HXLINE(2055)									if (::zpp_nape::geom::ZPP_Collide_obj::circleContains(node->shape->circle,v)) {
HXLINE(2055)										ret1->push(body);
            									}
            								}
            								else {
HXLINE(2058)									if (::zpp_nape::geom::ZPP_Collide_obj::polyContains(node->shape->polygon,v)) {
HXLINE(2058)										ret1->push(body);
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE(2065)						if (hx::IsNotNull( node->child1 )) {
HXLINE(2065)							this->treeStack->add(node->child1);
            						}
HXLINE(2066)						if (hx::IsNotNull( node->child2 )) {
HXLINE(2066)							this->treeStack->add(node->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2075)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2076)			if (hx::IsNull( this->treeStack )) {
HXLINE(2076)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2077)			this->treeStack->add(this->dtree->root);
HXLINE(2078)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2079)				 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack->pop_unsafe();
HXLINE(2088)				 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(2088)				bool _hx_tmp4;
HXDLIN(2088)				bool _hx_tmp5;
HXDLIN(2088)				bool _hx_tmp6;
HXDLIN(2088)				if ((v->x >= _this2->minx)) {
HXLINE(2088)					_hx_tmp6 = (v->x <= _this2->maxx);
            				}
            				else {
HXLINE(2088)					_hx_tmp6 = false;
            				}
HXDLIN(2088)				if (_hx_tmp6) {
HXLINE(2088)					_hx_tmp5 = (v->y >= _this2->miny);
            				}
            				else {
HXLINE(2088)					_hx_tmp5 = false;
            				}
HXDLIN(2088)				if (_hx_tmp5) {
HXLINE(2088)					_hx_tmp4 = (v->y <= _this2->maxy);
            				}
            				else {
HXLINE(2088)					_hx_tmp4 = false;
            				}
HXDLIN(2088)				if (_hx_tmp4) {
HXLINE(2089)					if (hx::IsNull( node1->child1 )) {
HXLINE(2091)						 ::nape::phys::Body body1 = node1->shape->body->outer;
HXLINE(2092)						if (!(ret1->has(body1))) {
HXLINE(2093)							bool _hx_tmp7;
HXDLIN(2093)							if (hx::IsNotNull( filter )) {
HXLINE(2093)								 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node1->shape->filter;
HXDLIN(2093)								if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2093)									_hx_tmp7 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            								}
            								else {
HXLINE(2093)									_hx_tmp7 = false;
            								}
            							}
            							else {
HXLINE(2093)								_hx_tmp7 = true;
            							}
HXDLIN(2093)							if (_hx_tmp7) {
HXLINE(2094)								if ((node1->shape->type == 0)) {
HXLINE(2095)									if (::zpp_nape::geom::ZPP_Collide_obj::circleContains(node1->shape->circle,v)) {
HXLINE(2095)										ret1->push(body1);
            									}
            								}
            								else {
HXLINE(2098)									if (::zpp_nape::geom::ZPP_Collide_obj::polyContains(node1->shape->polygon,v)) {
HXLINE(2098)										ret1->push(body1);
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE(2105)						if (hx::IsNotNull( node1->child1 )) {
HXLINE(2105)							this->treeStack->add(node1->child1);
            						}
HXLINE(2106)						if (hx::IsNotNull( node1->child2 )) {
HXLINE(2106)							this->treeStack->add(node1->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2113)		{
HXLINE(2114)			 ::zpp_nape::geom::ZPP_Vec2 o = v;
HXLINE(2123)			{
HXLINE(2123)				if (hx::IsNotNull( o->outer )) {
HXLINE(2123)					o->outer->zpp_inner = null();
HXDLIN(2123)					o->outer = null();
            				}
HXDLIN(2123)				o->_isimmutable = null();
HXDLIN(2123)				o->_validate = null();
HXDLIN(2123)				o->_invalidate = null();
            			}
HXLINE(2124)			o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE(2125)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            		}
HXLINE(2130)		return ret1;
            	}


 ::nape::shape::ShapeList ZPP_DynAABBPhase_obj::shapesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2133_shapesInAABB)
HXLINE(2134)		this->sync_broadphase();
HXLINE(2135)		this->updateAABBShape(aabb);
HXLINE(2136)		 ::zpp_nape::geom::ZPP_AABB ab = this->aabbShape->zpp_inner->aabb;
HXLINE(2137)		 ::nape::shape::ShapeList ret;
HXDLIN(2137)		if (hx::IsNull( output )) {
HXLINE(2137)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2137)			ret = output;
            		}
HXLINE(2140)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2141)			if (hx::IsNull( this->treeStack )) {
HXLINE(2141)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2142)			this->treeStack->add(this->stree->root);
HXLINE(2143)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2144)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2153)				 ::zpp_nape::geom::ZPP_AABB x = node->aabb;
HXDLIN(2153)				bool _hx_tmp;
HXDLIN(2153)				bool _hx_tmp1;
HXDLIN(2153)				bool _hx_tmp2;
HXDLIN(2153)				if ((x->minx >= ab->minx)) {
HXLINE(2153)					_hx_tmp2 = (x->miny >= ab->miny);
            				}
            				else {
HXLINE(2153)					_hx_tmp2 = false;
            				}
HXDLIN(2153)				if (_hx_tmp2) {
HXLINE(2153)					_hx_tmp1 = (x->maxx <= ab->maxx);
            				}
            				else {
HXLINE(2153)					_hx_tmp1 = false;
            				}
HXDLIN(2153)				if (_hx_tmp1) {
HXLINE(2153)					_hx_tmp = (x->maxy <= ab->maxy);
            				}
            				else {
HXLINE(2153)					_hx_tmp = false;
            				}
HXDLIN(2153)				if (_hx_tmp) {
HXLINE(2154)					if (hx::IsNull( node->child1 )) {
HXLINE(2156)						bool _hx_tmp3;
HXDLIN(2156)						if (hx::IsNotNull( filter )) {
HXLINE(2156)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this = node->shape->filter;
HXDLIN(2156)							if (((_this->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2156)								_hx_tmp3 = ((filter->collisionMask & _this->collisionGroup) != 0);
            							}
            							else {
HXLINE(2156)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2156)							_hx_tmp3 = true;
            						}
HXDLIN(2156)						if (_hx_tmp3) {
HXLINE(2157)							ret->push(node->shape->outer);
            						}
            					}
            					else {
HXLINE(2162)						if (hx::IsNull( this->treeStack2 )) {
HXLINE(2163)							this->treeStack2 =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            						}
HXLINE(2165)						this->treeStack2->add(node);
HXLINE(2166)						while(hx::IsNotNull( this->treeStack2->head )){
HXLINE(2167)							 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack2->pop_unsafe();
HXLINE(2168)							if (hx::IsNull( node1->child1 )) {
HXLINE(2169)								bool _hx_tmp4;
HXDLIN(2169)								if (hx::IsNotNull( filter )) {
HXLINE(2169)									 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node1->shape->filter;
HXDLIN(2169)									if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2169)										_hx_tmp4 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            									}
            									else {
HXLINE(2169)										_hx_tmp4 = false;
            									}
            								}
            								else {
HXLINE(2169)									_hx_tmp4 = true;
            								}
HXDLIN(2169)								if (_hx_tmp4) {
HXLINE(2170)									ret->push(node1->shape->outer);
            								}
            							}
            							else {
HXLINE(2174)								if (hx::IsNotNull( node1->child1 )) {
HXLINE(2174)									this->treeStack2->add(node1->child1);
            								}
HXLINE(2175)								if (hx::IsNotNull( node1->child2 )) {
HXLINE(2175)									this->treeStack2->add(node1->child2);
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(2180)					 ::zpp_nape::geom::ZPP_AABB _this2 = node->aabb;
HXDLIN(2180)					bool _hx_tmp5;
HXDLIN(2180)					bool _hx_tmp6;
HXDLIN(2180)					bool _hx_tmp7;
HXDLIN(2180)					if ((ab->miny <= _this2->maxy)) {
HXLINE(2180)						_hx_tmp7 = (_this2->miny <= ab->maxy);
            					}
            					else {
HXLINE(2180)						_hx_tmp7 = false;
            					}
HXDLIN(2180)					if (_hx_tmp7) {
HXLINE(2180)						_hx_tmp6 = (ab->minx <= _this2->maxx);
            					}
            					else {
HXLINE(2180)						_hx_tmp6 = false;
            					}
HXDLIN(2180)					if (_hx_tmp6) {
HXLINE(2180)						_hx_tmp5 = (_this2->minx <= ab->maxx);
            					}
            					else {
HXLINE(2180)						_hx_tmp5 = false;
            					}
HXDLIN(2180)					if (_hx_tmp5) {
HXLINE(2181)						if (hx::IsNull( node->child1 )) {
HXLINE(2183)							bool _hx_tmp8;
HXDLIN(2183)							if (hx::IsNotNull( filter )) {
HXLINE(2183)								 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node->shape->filter;
HXDLIN(2183)								if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2183)									_hx_tmp8 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            								}
            								else {
HXLINE(2183)									_hx_tmp8 = false;
            								}
            							}
            							else {
HXLINE(2183)								_hx_tmp8 = true;
            							}
HXDLIN(2183)							if (_hx_tmp8) {
HXLINE(2184)								if (strict) {
HXLINE(2185)									if (containment) {
HXLINE(2186)										if (::zpp_nape::geom::ZPP_Collide_obj::containTest(this->aabbShape->zpp_inner,node->shape)) {
HXLINE(2186)											ret->push(node->shape->outer);
            										}
            									}
            									else {
HXLINE(2189)										 ::zpp_nape::geom::ZPP_AABB x1 = node->shape->aabb;
HXDLIN(2189)										bool _hx_tmp9;
HXDLIN(2189)										bool _hx_tmp10;
HXDLIN(2189)										bool _hx_tmp11;
HXDLIN(2189)										if ((x1->minx >= ab->minx)) {
HXLINE(2189)											_hx_tmp11 = (x1->miny >= ab->miny);
            										}
            										else {
HXLINE(2189)											_hx_tmp11 = false;
            										}
HXDLIN(2189)										if (_hx_tmp11) {
HXLINE(2189)											_hx_tmp10 = (x1->maxx <= ab->maxx);
            										}
            										else {
HXLINE(2189)											_hx_tmp10 = false;
            										}
HXDLIN(2189)										if (_hx_tmp10) {
HXLINE(2189)											_hx_tmp9 = (x1->maxy <= ab->maxy);
            										}
            										else {
HXLINE(2189)											_hx_tmp9 = false;
            										}
HXDLIN(2189)										if (_hx_tmp9) {
HXLINE(2189)											ret->push(node->shape->outer);
            										}
            										else {
HXLINE(2190)											if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node->shape,this->aabbShape->zpp_inner)) {
HXLINE(2190)												ret->push(node->shape->outer);
            											}
            										}
            									}
            								}
            								else {
HXLINE(2193)									bool _hx_tmp12;
HXDLIN(2193)									if (!(!(containment))) {
HXLINE(2193)										 ::zpp_nape::geom::ZPP_AABB x2 = node->shape->aabb;
HXDLIN(2193)										bool _hx_tmp13;
HXDLIN(2193)										bool _hx_tmp14;
HXDLIN(2193)										if ((x2->minx >= ab->minx)) {
HXLINE(2193)											_hx_tmp14 = (x2->miny >= ab->miny);
            										}
            										else {
HXLINE(2193)											_hx_tmp14 = false;
            										}
HXDLIN(2193)										if (_hx_tmp14) {
HXLINE(2193)											_hx_tmp13 = (x2->maxx <= ab->maxx);
            										}
            										else {
HXLINE(2193)											_hx_tmp13 = false;
            										}
HXDLIN(2193)										if (_hx_tmp13) {
HXLINE(2193)											_hx_tmp12 = (x2->maxy <= ab->maxy);
            										}
            										else {
HXLINE(2193)											_hx_tmp12 = false;
            										}
            									}
            									else {
HXLINE(2193)										_hx_tmp12 = true;
            									}
HXDLIN(2193)									if (_hx_tmp12) {
HXLINE(2193)										ret->push(node->shape->outer);
            									}
            								}
            							}
            						}
            						else {
HXLINE(2198)							if (hx::IsNotNull( node->child1 )) {
HXLINE(2198)								this->treeStack->add(node->child1);
            							}
HXLINE(2199)							if (hx::IsNotNull( node->child2 )) {
HXLINE(2199)								this->treeStack->add(node->child2);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(2208)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2209)			if (hx::IsNull( this->treeStack )) {
HXLINE(2209)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2210)			this->treeStack->add(this->dtree->root);
HXLINE(2211)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2212)				 ::zpp_nape::space::ZPP_AABBNode node2 = this->treeStack->pop_unsafe();
HXLINE(2221)				 ::zpp_nape::geom::ZPP_AABB x3 = node2->aabb;
HXDLIN(2221)				bool _hx_tmp15;
HXDLIN(2221)				bool _hx_tmp16;
HXDLIN(2221)				bool _hx_tmp17;
HXDLIN(2221)				if ((x3->minx >= ab->minx)) {
HXLINE(2221)					_hx_tmp17 = (x3->miny >= ab->miny);
            				}
            				else {
HXLINE(2221)					_hx_tmp17 = false;
            				}
HXDLIN(2221)				if (_hx_tmp17) {
HXLINE(2221)					_hx_tmp16 = (x3->maxx <= ab->maxx);
            				}
            				else {
HXLINE(2221)					_hx_tmp16 = false;
            				}
HXDLIN(2221)				if (_hx_tmp16) {
HXLINE(2221)					_hx_tmp15 = (x3->maxy <= ab->maxy);
            				}
            				else {
HXLINE(2221)					_hx_tmp15 = false;
            				}
HXDLIN(2221)				if (_hx_tmp15) {
HXLINE(2222)					if (hx::IsNull( node2->child1 )) {
HXLINE(2224)						bool _hx_tmp18;
HXDLIN(2224)						if (hx::IsNotNull( filter )) {
HXLINE(2224)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this4 = node2->shape->filter;
HXDLIN(2224)							if (((_this4->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2224)								_hx_tmp18 = ((filter->collisionMask & _this4->collisionGroup) != 0);
            							}
            							else {
HXLINE(2224)								_hx_tmp18 = false;
            							}
            						}
            						else {
HXLINE(2224)							_hx_tmp18 = true;
            						}
HXDLIN(2224)						if (_hx_tmp18) {
HXLINE(2225)							ret->push(node2->shape->outer);
            						}
            					}
            					else {
HXLINE(2230)						if (hx::IsNull( this->treeStack2 )) {
HXLINE(2231)							this->treeStack2 =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            						}
HXLINE(2233)						this->treeStack2->add(node2);
HXLINE(2234)						while(hx::IsNotNull( this->treeStack2->head )){
HXLINE(2235)							 ::zpp_nape::space::ZPP_AABBNode node3 = this->treeStack2->pop_unsafe();
HXLINE(2236)							if (hx::IsNull( node3->child1 )) {
HXLINE(2237)								bool _hx_tmp19;
HXDLIN(2237)								if (hx::IsNotNull( filter )) {
HXLINE(2237)									 ::zpp_nape::dynamics::ZPP_InteractionFilter _this5 = node3->shape->filter;
HXDLIN(2237)									if (((_this5->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2237)										_hx_tmp19 = ((filter->collisionMask & _this5->collisionGroup) != 0);
            									}
            									else {
HXLINE(2237)										_hx_tmp19 = false;
            									}
            								}
            								else {
HXLINE(2237)									_hx_tmp19 = true;
            								}
HXDLIN(2237)								if (_hx_tmp19) {
HXLINE(2238)									ret->push(node3->shape->outer);
            								}
            							}
            							else {
HXLINE(2242)								if (hx::IsNotNull( node3->child1 )) {
HXLINE(2242)									this->treeStack2->add(node3->child1);
            								}
HXLINE(2243)								if (hx::IsNotNull( node3->child2 )) {
HXLINE(2243)									this->treeStack2->add(node3->child2);
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(2248)					 ::zpp_nape::geom::ZPP_AABB _this6 = node2->aabb;
HXDLIN(2248)					bool _hx_tmp20;
HXDLIN(2248)					bool _hx_tmp21;
HXDLIN(2248)					bool _hx_tmp22;
HXDLIN(2248)					if ((ab->miny <= _this6->maxy)) {
HXLINE(2248)						_hx_tmp22 = (_this6->miny <= ab->maxy);
            					}
            					else {
HXLINE(2248)						_hx_tmp22 = false;
            					}
HXDLIN(2248)					if (_hx_tmp22) {
HXLINE(2248)						_hx_tmp21 = (ab->minx <= _this6->maxx);
            					}
            					else {
HXLINE(2248)						_hx_tmp21 = false;
            					}
HXDLIN(2248)					if (_hx_tmp21) {
HXLINE(2248)						_hx_tmp20 = (_this6->minx <= ab->maxx);
            					}
            					else {
HXLINE(2248)						_hx_tmp20 = false;
            					}
HXDLIN(2248)					if (_hx_tmp20) {
HXLINE(2249)						if (hx::IsNull( node2->child1 )) {
HXLINE(2251)							bool _hx_tmp23;
HXDLIN(2251)							if (hx::IsNotNull( filter )) {
HXLINE(2251)								 ::zpp_nape::dynamics::ZPP_InteractionFilter _this7 = node2->shape->filter;
HXDLIN(2251)								if (((_this7->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2251)									_hx_tmp23 = ((filter->collisionMask & _this7->collisionGroup) != 0);
            								}
            								else {
HXLINE(2251)									_hx_tmp23 = false;
            								}
            							}
            							else {
HXLINE(2251)								_hx_tmp23 = true;
            							}
HXDLIN(2251)							if (_hx_tmp23) {
HXLINE(2252)								if (strict) {
HXLINE(2253)									if (containment) {
HXLINE(2254)										if (::zpp_nape::geom::ZPP_Collide_obj::containTest(this->aabbShape->zpp_inner,node2->shape)) {
HXLINE(2254)											ret->push(node2->shape->outer);
            										}
            									}
            									else {
HXLINE(2257)										 ::zpp_nape::geom::ZPP_AABB x4 = node2->shape->aabb;
HXDLIN(2257)										bool _hx_tmp24;
HXDLIN(2257)										bool _hx_tmp25;
HXDLIN(2257)										bool _hx_tmp26;
HXDLIN(2257)										if ((x4->minx >= ab->minx)) {
HXLINE(2257)											_hx_tmp26 = (x4->miny >= ab->miny);
            										}
            										else {
HXLINE(2257)											_hx_tmp26 = false;
            										}
HXDLIN(2257)										if (_hx_tmp26) {
HXLINE(2257)											_hx_tmp25 = (x4->maxx <= ab->maxx);
            										}
            										else {
HXLINE(2257)											_hx_tmp25 = false;
            										}
HXDLIN(2257)										if (_hx_tmp25) {
HXLINE(2257)											_hx_tmp24 = (x4->maxy <= ab->maxy);
            										}
            										else {
HXLINE(2257)											_hx_tmp24 = false;
            										}
HXDLIN(2257)										if (_hx_tmp24) {
HXLINE(2257)											ret->push(node2->shape->outer);
            										}
            										else {
HXLINE(2258)											if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node2->shape,this->aabbShape->zpp_inner)) {
HXLINE(2258)												ret->push(node2->shape->outer);
            											}
            										}
            									}
            								}
            								else {
HXLINE(2261)									bool _hx_tmp27;
HXDLIN(2261)									if (!(!(containment))) {
HXLINE(2261)										 ::zpp_nape::geom::ZPP_AABB x5 = node2->shape->aabb;
HXDLIN(2261)										bool _hx_tmp28;
HXDLIN(2261)										bool _hx_tmp29;
HXDLIN(2261)										if ((x5->minx >= ab->minx)) {
HXLINE(2261)											_hx_tmp29 = (x5->miny >= ab->miny);
            										}
            										else {
HXLINE(2261)											_hx_tmp29 = false;
            										}
HXDLIN(2261)										if (_hx_tmp29) {
HXLINE(2261)											_hx_tmp28 = (x5->maxx <= ab->maxx);
            										}
            										else {
HXLINE(2261)											_hx_tmp28 = false;
            										}
HXDLIN(2261)										if (_hx_tmp28) {
HXLINE(2261)											_hx_tmp27 = (x5->maxy <= ab->maxy);
            										}
            										else {
HXLINE(2261)											_hx_tmp27 = false;
            										}
            									}
            									else {
HXLINE(2261)										_hx_tmp27 = true;
            									}
HXDLIN(2261)									if (_hx_tmp27) {
HXLINE(2261)										ret->push(node2->shape->outer);
            									}
            								}
            							}
            						}
            						else {
HXLINE(2266)							if (hx::IsNotNull( node2->child1 )) {
HXLINE(2266)								this->treeStack->add(node2->child1);
            							}
HXLINE(2267)							if (hx::IsNotNull( node2->child2 )) {
HXLINE(2267)								this->treeStack->add(node2->child2);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(2274)		return ret;
            	}


 ::nape::phys::BodyList ZPP_DynAABBPhase_obj::bodiesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2277_bodiesInAABB)
HXLINE(2278)		this->sync_broadphase();
HXLINE(2279)		this->updateAABBShape(aabb);
HXLINE(2280)		 ::zpp_nape::geom::ZPP_AABB ab = this->aabbShape->zpp_inner->aabb;
HXLINE(2281)		 ::nape::phys::BodyList ret;
HXDLIN(2281)		if (hx::IsNull( output )) {
HXLINE(2281)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2281)			ret = output;
            		}
HXLINE(2282)		if (hx::IsNull( this->failed )) {
HXLINE(2282)			this->failed =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
HXLINE(2285)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2286)			if (hx::IsNull( this->treeStack )) {
HXLINE(2286)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2287)			this->treeStack->add(this->stree->root);
HXLINE(2288)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2289)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2298)				 ::zpp_nape::geom::ZPP_AABB x = node->aabb;
HXDLIN(2298)				bool _hx_tmp;
HXDLIN(2298)				bool _hx_tmp1;
HXDLIN(2298)				bool _hx_tmp2;
HXDLIN(2298)				if ((x->minx >= ab->minx)) {
HXLINE(2298)					_hx_tmp2 = (x->miny >= ab->miny);
            				}
            				else {
HXLINE(2298)					_hx_tmp2 = false;
            				}
HXDLIN(2298)				if (_hx_tmp2) {
HXLINE(2298)					_hx_tmp1 = (x->maxx <= ab->maxx);
            				}
            				else {
HXLINE(2298)					_hx_tmp1 = false;
            				}
HXDLIN(2298)				if (_hx_tmp1) {
HXLINE(2298)					_hx_tmp = (x->maxy <= ab->maxy);
            				}
            				else {
HXLINE(2298)					_hx_tmp = false;
            				}
HXDLIN(2298)				if (_hx_tmp) {
HXLINE(2299)					if (hx::IsNull( node->child1 )) {
HXLINE(2301)						bool _hx_tmp3;
HXDLIN(2301)						if (hx::IsNotNull( filter )) {
HXLINE(2301)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this = node->shape->filter;
HXDLIN(2301)							if (((_this->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2301)								_hx_tmp3 = ((filter->collisionMask & _this->collisionGroup) != 0);
            							}
            							else {
HXLINE(2301)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2301)							_hx_tmp3 = true;
            						}
HXDLIN(2301)						if (_hx_tmp3) {
HXLINE(2302)							 ::nape::phys::Body body = node->shape->body->outer;
HXLINE(2303)							if (!(ret->has(body))) {
HXLINE(2303)								ret->push(body);
            							}
            						}
            					}
            					else {
HXLINE(2308)						if (hx::IsNull( this->treeStack2 )) {
HXLINE(2309)							this->treeStack2 =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            						}
HXLINE(2311)						this->treeStack2->add(node);
HXLINE(2312)						while(hx::IsNotNull( this->treeStack2->head )){
HXLINE(2313)							 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack2->pop_unsafe();
HXLINE(2314)							if (hx::IsNull( node1->child1 )) {
HXLINE(2315)								bool _hx_tmp4;
HXDLIN(2315)								if (hx::IsNotNull( filter )) {
HXLINE(2315)									 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node1->shape->filter;
HXDLIN(2315)									if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2315)										_hx_tmp4 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            									}
            									else {
HXLINE(2315)										_hx_tmp4 = false;
            									}
            								}
            								else {
HXLINE(2315)									_hx_tmp4 = true;
            								}
HXDLIN(2315)								if (_hx_tmp4) {
HXLINE(2316)									 ::nape::phys::Body body1 = node1->shape->body->outer;
HXLINE(2317)									if (!(ret->has(body1))) {
HXLINE(2317)										ret->push(body1);
            									}
            								}
            							}
            							else {
HXLINE(2321)								if (hx::IsNotNull( node1->child1 )) {
HXLINE(2321)									this->treeStack2->add(node1->child1);
            								}
HXLINE(2322)								if (hx::IsNotNull( node1->child2 )) {
HXLINE(2322)									this->treeStack2->add(node1->child2);
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(2327)					 ::zpp_nape::geom::ZPP_AABB _this2 = node->aabb;
HXDLIN(2327)					bool _hx_tmp5;
HXDLIN(2327)					bool _hx_tmp6;
HXDLIN(2327)					bool _hx_tmp7;
HXDLIN(2327)					if ((ab->miny <= _this2->maxy)) {
HXLINE(2327)						_hx_tmp7 = (_this2->miny <= ab->maxy);
            					}
            					else {
HXLINE(2327)						_hx_tmp7 = false;
            					}
HXDLIN(2327)					if (_hx_tmp7) {
HXLINE(2327)						_hx_tmp6 = (ab->minx <= _this2->maxx);
            					}
            					else {
HXLINE(2327)						_hx_tmp6 = false;
            					}
HXDLIN(2327)					if (_hx_tmp6) {
HXLINE(2327)						_hx_tmp5 = (_this2->minx <= ab->maxx);
            					}
            					else {
HXLINE(2327)						_hx_tmp5 = false;
            					}
HXDLIN(2327)					if (_hx_tmp5) {
HXLINE(2328)						if (hx::IsNull( node->child1 )) {
HXLINE(2330)							 ::nape::phys::Body body2 = node->shape->body->outer;
HXLINE(2331)							bool _hx_tmp8;
HXDLIN(2331)							if (hx::IsNotNull( filter )) {
HXLINE(2331)								 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node->shape->filter;
HXDLIN(2331)								if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2331)									_hx_tmp8 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            								}
            								else {
HXLINE(2331)									_hx_tmp8 = false;
            								}
            							}
            							else {
HXLINE(2331)								_hx_tmp8 = true;
            							}
HXDLIN(2331)							if (_hx_tmp8) {
HXLINE(2332)								if (strict) {
HXLINE(2333)									if (containment) {
HXLINE(2334)										if (!(this->failed->has(body2))) {
HXLINE(2335)											bool col = ::zpp_nape::geom::ZPP_Collide_obj::containTest(this->aabbShape->zpp_inner,node->shape);
HXLINE(2336)											bool _hx_tmp9;
HXDLIN(2336)											if (!(ret->has(body2))) {
HXLINE(2336)												_hx_tmp9 = col;
            											}
            											else {
HXLINE(2336)												_hx_tmp9 = false;
            											}
HXDLIN(2336)											if (_hx_tmp9) {
HXLINE(2336)												ret->push(body2);
            											}
            											else {
HXLINE(2337)												if (!(col)) {
HXLINE(2338)													ret->remove(body2);
HXLINE(2339)													this->failed->push(body2);
            												}
            											}
            										}
            									}
            									else {
HXLINE(2343)										bool _hx_tmp10;
HXDLIN(2343)										if (!(ret->has(body2))) {
HXLINE(2343)											_hx_tmp10 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node->shape,this->aabbShape->zpp_inner);
            										}
            										else {
HXLINE(2343)											_hx_tmp10 = false;
            										}
HXDLIN(2343)										if (_hx_tmp10) {
HXLINE(2344)											ret->push(body2);
            										}
            									}
            								}
            								else {
HXLINE(2348)									if (containment) {
HXLINE(2349)										if (!(this->failed->has(body2))) {
HXLINE(2350)											 ::zpp_nape::geom::ZPP_AABB x1 = node->shape->aabb;
HXDLIN(2350)											bool col1;
HXDLIN(2350)											bool col2;
HXDLIN(2350)											bool col3;
HXDLIN(2350)											if ((x1->minx >= ab->minx)) {
HXLINE(2350)												col3 = (x1->miny >= ab->miny);
            											}
            											else {
HXLINE(2350)												col3 = false;
            											}
HXDLIN(2350)											if (col3) {
HXLINE(2350)												col2 = (x1->maxx <= ab->maxx);
            											}
            											else {
HXLINE(2350)												col2 = false;
            											}
HXDLIN(2350)											if (col2) {
HXLINE(2350)												col1 = (x1->maxy <= ab->maxy);
            											}
            											else {
HXLINE(2350)												col1 = false;
            											}
HXLINE(2351)											bool _hx_tmp11;
HXDLIN(2351)											if (!(ret->has(body2))) {
HXLINE(2351)												_hx_tmp11 = col1;
            											}
            											else {
HXLINE(2351)												_hx_tmp11 = false;
            											}
HXDLIN(2351)											if (_hx_tmp11) {
HXLINE(2351)												ret->push(body2);
            											}
            											else {
HXLINE(2352)												if (!(col1)) {
HXLINE(2353)													ret->remove(body2);
HXLINE(2354)													this->failed->push(body2);
            												}
            											}
            										}
            									}
            									else {
HXLINE(2358)										bool _hx_tmp12;
HXDLIN(2358)										if (!(ret->has(body2))) {
HXLINE(2358)											 ::zpp_nape::geom::ZPP_AABB x2 = node->shape->aabb;
HXDLIN(2358)											bool _hx_tmp13;
HXDLIN(2358)											bool _hx_tmp14;
HXDLIN(2358)											if ((x2->minx >= ab->minx)) {
HXLINE(2358)												_hx_tmp14 = (x2->miny >= ab->miny);
            											}
            											else {
HXLINE(2358)												_hx_tmp14 = false;
            											}
HXDLIN(2358)											if (_hx_tmp14) {
HXLINE(2358)												_hx_tmp13 = (x2->maxx <= ab->maxx);
            											}
            											else {
HXLINE(2358)												_hx_tmp13 = false;
            											}
HXDLIN(2358)											if (_hx_tmp13) {
HXLINE(2358)												_hx_tmp12 = (x2->maxy <= ab->maxy);
            											}
            											else {
HXLINE(2358)												_hx_tmp12 = false;
            											}
            										}
            										else {
HXLINE(2358)											_hx_tmp12 = false;
            										}
HXDLIN(2358)										if (_hx_tmp12) {
HXLINE(2359)											ret->push(body2);
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE(2366)							if (hx::IsNotNull( node->child1 )) {
HXLINE(2366)								this->treeStack->add(node->child1);
            							}
HXLINE(2367)							if (hx::IsNotNull( node->child2 )) {
HXLINE(2367)								this->treeStack->add(node->child2);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(2376)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2377)			if (hx::IsNull( this->treeStack )) {
HXLINE(2377)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2378)			this->treeStack->add(this->dtree->root);
HXLINE(2379)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2380)				 ::zpp_nape::space::ZPP_AABBNode node2 = this->treeStack->pop_unsafe();
HXLINE(2389)				 ::zpp_nape::geom::ZPP_AABB x3 = node2->aabb;
HXDLIN(2389)				bool _hx_tmp15;
HXDLIN(2389)				bool _hx_tmp16;
HXDLIN(2389)				bool _hx_tmp17;
HXDLIN(2389)				if ((x3->minx >= ab->minx)) {
HXLINE(2389)					_hx_tmp17 = (x3->miny >= ab->miny);
            				}
            				else {
HXLINE(2389)					_hx_tmp17 = false;
            				}
HXDLIN(2389)				if (_hx_tmp17) {
HXLINE(2389)					_hx_tmp16 = (x3->maxx <= ab->maxx);
            				}
            				else {
HXLINE(2389)					_hx_tmp16 = false;
            				}
HXDLIN(2389)				if (_hx_tmp16) {
HXLINE(2389)					_hx_tmp15 = (x3->maxy <= ab->maxy);
            				}
            				else {
HXLINE(2389)					_hx_tmp15 = false;
            				}
HXDLIN(2389)				if (_hx_tmp15) {
HXLINE(2390)					if (hx::IsNull( node2->child1 )) {
HXLINE(2392)						bool _hx_tmp18;
HXDLIN(2392)						if (hx::IsNotNull( filter )) {
HXLINE(2392)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this4 = node2->shape->filter;
HXDLIN(2392)							if (((_this4->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2392)								_hx_tmp18 = ((filter->collisionMask & _this4->collisionGroup) != 0);
            							}
            							else {
HXLINE(2392)								_hx_tmp18 = false;
            							}
            						}
            						else {
HXLINE(2392)							_hx_tmp18 = true;
            						}
HXDLIN(2392)						if (_hx_tmp18) {
HXLINE(2393)							 ::nape::phys::Body body3 = node2->shape->body->outer;
HXLINE(2394)							if (!(ret->has(body3))) {
HXLINE(2394)								ret->push(body3);
            							}
            						}
            					}
            					else {
HXLINE(2399)						if (hx::IsNull( this->treeStack2 )) {
HXLINE(2400)							this->treeStack2 =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            						}
HXLINE(2402)						this->treeStack2->add(node2);
HXLINE(2403)						while(hx::IsNotNull( this->treeStack2->head )){
HXLINE(2404)							 ::zpp_nape::space::ZPP_AABBNode node3 = this->treeStack2->pop_unsafe();
HXLINE(2405)							if (hx::IsNull( node3->child1 )) {
HXLINE(2406)								bool _hx_tmp19;
HXDLIN(2406)								if (hx::IsNotNull( filter )) {
HXLINE(2406)									 ::zpp_nape::dynamics::ZPP_InteractionFilter _this5 = node3->shape->filter;
HXDLIN(2406)									if (((_this5->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2406)										_hx_tmp19 = ((filter->collisionMask & _this5->collisionGroup) != 0);
            									}
            									else {
HXLINE(2406)										_hx_tmp19 = false;
            									}
            								}
            								else {
HXLINE(2406)									_hx_tmp19 = true;
            								}
HXDLIN(2406)								if (_hx_tmp19) {
HXLINE(2407)									 ::nape::phys::Body body4 = node3->shape->body->outer;
HXLINE(2408)									if (!(ret->has(body4))) {
HXLINE(2408)										ret->push(body4);
            									}
            								}
            							}
            							else {
HXLINE(2412)								if (hx::IsNotNull( node3->child1 )) {
HXLINE(2412)									this->treeStack2->add(node3->child1);
            								}
HXLINE(2413)								if (hx::IsNotNull( node3->child2 )) {
HXLINE(2413)									this->treeStack2->add(node3->child2);
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(2418)					 ::zpp_nape::geom::ZPP_AABB _this6 = node2->aabb;
HXDLIN(2418)					bool _hx_tmp20;
HXDLIN(2418)					bool _hx_tmp21;
HXDLIN(2418)					bool _hx_tmp22;
HXDLIN(2418)					if ((ab->miny <= _this6->maxy)) {
HXLINE(2418)						_hx_tmp22 = (_this6->miny <= ab->maxy);
            					}
            					else {
HXLINE(2418)						_hx_tmp22 = false;
            					}
HXDLIN(2418)					if (_hx_tmp22) {
HXLINE(2418)						_hx_tmp21 = (ab->minx <= _this6->maxx);
            					}
            					else {
HXLINE(2418)						_hx_tmp21 = false;
            					}
HXDLIN(2418)					if (_hx_tmp21) {
HXLINE(2418)						_hx_tmp20 = (_this6->minx <= ab->maxx);
            					}
            					else {
HXLINE(2418)						_hx_tmp20 = false;
            					}
HXDLIN(2418)					if (_hx_tmp20) {
HXLINE(2419)						if (hx::IsNull( node2->child1 )) {
HXLINE(2421)							 ::nape::phys::Body body5 = node2->shape->body->outer;
HXLINE(2422)							bool _hx_tmp23;
HXDLIN(2422)							if (hx::IsNotNull( filter )) {
HXLINE(2422)								 ::zpp_nape::dynamics::ZPP_InteractionFilter _this7 = node2->shape->filter;
HXDLIN(2422)								if (((_this7->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2422)									_hx_tmp23 = ((filter->collisionMask & _this7->collisionGroup) != 0);
            								}
            								else {
HXLINE(2422)									_hx_tmp23 = false;
            								}
            							}
            							else {
HXLINE(2422)								_hx_tmp23 = true;
            							}
HXDLIN(2422)							if (_hx_tmp23) {
HXLINE(2423)								if (strict) {
HXLINE(2424)									if (containment) {
HXLINE(2425)										if (!(this->failed->has(body5))) {
HXLINE(2426)											bool col4 = ::zpp_nape::geom::ZPP_Collide_obj::containTest(this->aabbShape->zpp_inner,node2->shape);
HXLINE(2427)											bool _hx_tmp24;
HXDLIN(2427)											if (!(ret->has(body5))) {
HXLINE(2427)												_hx_tmp24 = col4;
            											}
            											else {
HXLINE(2427)												_hx_tmp24 = false;
            											}
HXDLIN(2427)											if (_hx_tmp24) {
HXLINE(2427)												ret->push(body5);
            											}
            											else {
HXLINE(2428)												if (!(col4)) {
HXLINE(2429)													ret->remove(body5);
HXLINE(2430)													this->failed->push(body5);
            												}
            											}
            										}
            									}
            									else {
HXLINE(2434)										bool _hx_tmp25;
HXDLIN(2434)										if (!(ret->has(body5))) {
HXLINE(2434)											_hx_tmp25 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node2->shape,this->aabbShape->zpp_inner);
            										}
            										else {
HXLINE(2434)											_hx_tmp25 = false;
            										}
HXDLIN(2434)										if (_hx_tmp25) {
HXLINE(2435)											ret->push(body5);
            										}
            									}
            								}
            								else {
HXLINE(2439)									if (containment) {
HXLINE(2440)										if (!(this->failed->has(body5))) {
HXLINE(2441)											 ::zpp_nape::geom::ZPP_AABB x4 = node2->shape->aabb;
HXDLIN(2441)											bool col5;
HXDLIN(2441)											bool col6;
HXDLIN(2441)											bool col7;
HXDLIN(2441)											if ((x4->minx >= ab->minx)) {
HXLINE(2441)												col7 = (x4->miny >= ab->miny);
            											}
            											else {
HXLINE(2441)												col7 = false;
            											}
HXDLIN(2441)											if (col7) {
HXLINE(2441)												col6 = (x4->maxx <= ab->maxx);
            											}
            											else {
HXLINE(2441)												col6 = false;
            											}
HXDLIN(2441)											if (col6) {
HXLINE(2441)												col5 = (x4->maxy <= ab->maxy);
            											}
            											else {
HXLINE(2441)												col5 = false;
            											}
HXLINE(2442)											bool _hx_tmp26;
HXDLIN(2442)											if (!(ret->has(body5))) {
HXLINE(2442)												_hx_tmp26 = col5;
            											}
            											else {
HXLINE(2442)												_hx_tmp26 = false;
            											}
HXDLIN(2442)											if (_hx_tmp26) {
HXLINE(2442)												ret->push(body5);
            											}
            											else {
HXLINE(2443)												if (!(col5)) {
HXLINE(2444)													ret->remove(body5);
HXLINE(2445)													this->failed->push(body5);
            												}
            											}
            										}
            									}
            									else {
HXLINE(2449)										bool _hx_tmp27;
HXDLIN(2449)										if (!(ret->has(body5))) {
HXLINE(2449)											 ::zpp_nape::geom::ZPP_AABB x5 = node2->shape->aabb;
HXDLIN(2449)											bool _hx_tmp28;
HXDLIN(2449)											bool _hx_tmp29;
HXDLIN(2449)											if ((x5->minx >= ab->minx)) {
HXLINE(2449)												_hx_tmp29 = (x5->miny >= ab->miny);
            											}
            											else {
HXLINE(2449)												_hx_tmp29 = false;
            											}
HXDLIN(2449)											if (_hx_tmp29) {
HXLINE(2449)												_hx_tmp28 = (x5->maxx <= ab->maxx);
            											}
            											else {
HXLINE(2449)												_hx_tmp28 = false;
            											}
HXDLIN(2449)											if (_hx_tmp28) {
HXLINE(2449)												_hx_tmp27 = (x5->maxy <= ab->maxy);
            											}
            											else {
HXLINE(2449)												_hx_tmp27 = false;
            											}
            										}
            										else {
HXLINE(2449)											_hx_tmp27 = false;
            										}
HXDLIN(2449)										if (_hx_tmp27) {
HXLINE(2450)											ret->push(body5);
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE(2457)							if (hx::IsNotNull( node2->child1 )) {
HXLINE(2457)								this->treeStack->add(node2->child1);
            							}
HXLINE(2458)							if (hx::IsNotNull( node2->child2 )) {
HXLINE(2458)								this->treeStack->add(node2->child2);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(2465)		this->failed->clear();
HXLINE(2466)		return ret;
            	}


 ::nape::shape::ShapeList ZPP_DynAABBPhase_obj::shapesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2468_shapesInCircle)
HXLINE(2469)		this->sync_broadphase();
HXLINE(2470)		this->updateCircShape(x,y,r);
HXLINE(2471)		 ::zpp_nape::geom::ZPP_AABB ab = this->circShape->zpp_inner->aabb;
HXLINE(2472)		 ::nape::shape::ShapeList ret;
HXDLIN(2472)		if (hx::IsNull( output )) {
HXLINE(2472)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2472)			ret = output;
            		}
HXLINE(2475)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2476)			if (hx::IsNull( this->treeStack )) {
HXLINE(2476)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2477)			this->treeStack->add(this->stree->root);
HXLINE(2478)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2479)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2488)				 ::zpp_nape::geom::ZPP_AABB _this = node->aabb;
HXDLIN(2488)				bool _hx_tmp;
HXDLIN(2488)				bool _hx_tmp1;
HXDLIN(2488)				bool _hx_tmp2;
HXDLIN(2488)				if ((ab->miny <= _this->maxy)) {
HXLINE(2488)					_hx_tmp2 = (_this->miny <= ab->maxy);
            				}
            				else {
HXLINE(2488)					_hx_tmp2 = false;
            				}
HXDLIN(2488)				if (_hx_tmp2) {
HXLINE(2488)					_hx_tmp1 = (ab->minx <= _this->maxx);
            				}
            				else {
HXLINE(2488)					_hx_tmp1 = false;
            				}
HXDLIN(2488)				if (_hx_tmp1) {
HXLINE(2488)					_hx_tmp = (_this->minx <= ab->maxx);
            				}
            				else {
HXLINE(2488)					_hx_tmp = false;
            				}
HXDLIN(2488)				if (_hx_tmp) {
HXLINE(2489)					if (hx::IsNull( node->child1 )) {
HXLINE(2491)						bool _hx_tmp3;
HXDLIN(2491)						if (hx::IsNotNull( filter )) {
HXLINE(2491)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node->shape->filter;
HXDLIN(2491)							if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2491)								_hx_tmp3 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            							}
            							else {
HXLINE(2491)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2491)							_hx_tmp3 = true;
            						}
HXDLIN(2491)						if (_hx_tmp3) {
HXLINE(2492)							if (containment) {
HXLINE(2493)								if (::zpp_nape::geom::ZPP_Collide_obj::containTest(this->circShape->zpp_inner,node->shape)) {
HXLINE(2493)									ret->push(node->shape->outer);
            								}
            							}
            							else {
HXLINE(2495)								if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node->shape,this->circShape->zpp_inner)) {
HXLINE(2495)									ret->push(node->shape->outer);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2500)						if (hx::IsNotNull( node->child1 )) {
HXLINE(2500)							this->treeStack->add(node->child1);
            						}
HXLINE(2501)						if (hx::IsNotNull( node->child2 )) {
HXLINE(2501)							this->treeStack->add(node->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2510)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2511)			if (hx::IsNull( this->treeStack )) {
HXLINE(2511)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2512)			this->treeStack->add(this->dtree->root);
HXLINE(2513)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2514)				 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack->pop_unsafe();
HXLINE(2523)				 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(2523)				bool _hx_tmp4;
HXDLIN(2523)				bool _hx_tmp5;
HXDLIN(2523)				bool _hx_tmp6;
HXDLIN(2523)				if ((ab->miny <= _this2->maxy)) {
HXLINE(2523)					_hx_tmp6 = (_this2->miny <= ab->maxy);
            				}
            				else {
HXLINE(2523)					_hx_tmp6 = false;
            				}
HXDLIN(2523)				if (_hx_tmp6) {
HXLINE(2523)					_hx_tmp5 = (ab->minx <= _this2->maxx);
            				}
            				else {
HXLINE(2523)					_hx_tmp5 = false;
            				}
HXDLIN(2523)				if (_hx_tmp5) {
HXLINE(2523)					_hx_tmp4 = (_this2->minx <= ab->maxx);
            				}
            				else {
HXLINE(2523)					_hx_tmp4 = false;
            				}
HXDLIN(2523)				if (_hx_tmp4) {
HXLINE(2524)					if (hx::IsNull( node1->child1 )) {
HXLINE(2526)						bool _hx_tmp7;
HXDLIN(2526)						if (hx::IsNotNull( filter )) {
HXLINE(2526)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node1->shape->filter;
HXDLIN(2526)							if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2526)								_hx_tmp7 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            							}
            							else {
HXLINE(2526)								_hx_tmp7 = false;
            							}
            						}
            						else {
HXLINE(2526)							_hx_tmp7 = true;
            						}
HXDLIN(2526)						if (_hx_tmp7) {
HXLINE(2527)							if (containment) {
HXLINE(2528)								if (::zpp_nape::geom::ZPP_Collide_obj::containTest(this->circShape->zpp_inner,node1->shape)) {
HXLINE(2528)									ret->push(node1->shape->outer);
            								}
            							}
            							else {
HXLINE(2530)								if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node1->shape,this->circShape->zpp_inner)) {
HXLINE(2530)									ret->push(node1->shape->outer);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2535)						if (hx::IsNotNull( node1->child1 )) {
HXLINE(2535)							this->treeStack->add(node1->child1);
            						}
HXLINE(2536)						if (hx::IsNotNull( node1->child2 )) {
HXLINE(2536)							this->treeStack->add(node1->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2543)		return ret;
            	}


 ::nape::phys::BodyList ZPP_DynAABBPhase_obj::bodiesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2545_bodiesInCircle)
HXLINE(2546)		this->sync_broadphase();
HXLINE(2547)		this->updateCircShape(x,y,r);
HXLINE(2548)		 ::zpp_nape::geom::ZPP_AABB ab = this->circShape->zpp_inner->aabb;
HXLINE(2549)		 ::nape::phys::BodyList ret;
HXDLIN(2549)		if (hx::IsNull( output )) {
HXLINE(2549)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2549)			ret = output;
            		}
HXLINE(2550)		if (hx::IsNull( this->failed )) {
HXLINE(2550)			this->failed =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
HXLINE(2553)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2554)			if (hx::IsNull( this->treeStack )) {
HXLINE(2554)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2555)			this->treeStack->add(this->stree->root);
HXLINE(2556)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2557)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2566)				 ::zpp_nape::geom::ZPP_AABB _this = node->aabb;
HXDLIN(2566)				bool _hx_tmp;
HXDLIN(2566)				bool _hx_tmp1;
HXDLIN(2566)				bool _hx_tmp2;
HXDLIN(2566)				if ((ab->miny <= _this->maxy)) {
HXLINE(2566)					_hx_tmp2 = (_this->miny <= ab->maxy);
            				}
            				else {
HXLINE(2566)					_hx_tmp2 = false;
            				}
HXDLIN(2566)				if (_hx_tmp2) {
HXLINE(2566)					_hx_tmp1 = (ab->minx <= _this->maxx);
            				}
            				else {
HXLINE(2566)					_hx_tmp1 = false;
            				}
HXDLIN(2566)				if (_hx_tmp1) {
HXLINE(2566)					_hx_tmp = (_this->minx <= ab->maxx);
            				}
            				else {
HXLINE(2566)					_hx_tmp = false;
            				}
HXDLIN(2566)				if (_hx_tmp) {
HXLINE(2567)					if (hx::IsNull( node->child1 )) {
HXLINE(2569)						 ::nape::phys::Body body = node->shape->body->outer;
HXLINE(2570)						bool _hx_tmp3;
HXDLIN(2570)						if (hx::IsNotNull( filter )) {
HXLINE(2570)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node->shape->filter;
HXDLIN(2570)							if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2570)								_hx_tmp3 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            							}
            							else {
HXLINE(2570)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2570)							_hx_tmp3 = true;
            						}
HXDLIN(2570)						if (_hx_tmp3) {
HXLINE(2571)							if (containment) {
HXLINE(2572)								if (!(this->failed->has(body))) {
HXLINE(2573)									bool col = ::zpp_nape::geom::ZPP_Collide_obj::containTest(this->circShape->zpp_inner,node->shape);
HXLINE(2574)									bool _hx_tmp4;
HXDLIN(2574)									if (!(ret->has(body))) {
HXLINE(2574)										_hx_tmp4 = col;
            									}
            									else {
HXLINE(2574)										_hx_tmp4 = false;
            									}
HXDLIN(2574)									if (_hx_tmp4) {
HXLINE(2574)										ret->push(body);
            									}
            									else {
HXLINE(2575)										if (!(col)) {
HXLINE(2576)											ret->remove(body);
HXLINE(2577)											this->failed->push(body);
            										}
            									}
            								}
            							}
            							else {
HXLINE(2581)								bool _hx_tmp5;
HXDLIN(2581)								if (!(ret->has(body))) {
HXLINE(2581)									_hx_tmp5 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node->shape,this->circShape->zpp_inner);
            								}
            								else {
HXLINE(2581)									_hx_tmp5 = false;
            								}
HXDLIN(2581)								if (_hx_tmp5) {
HXLINE(2582)									ret->push(body);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2588)						if (hx::IsNotNull( node->child1 )) {
HXLINE(2588)							this->treeStack->add(node->child1);
            						}
HXLINE(2589)						if (hx::IsNotNull( node->child2 )) {
HXLINE(2589)							this->treeStack->add(node->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2598)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2599)			if (hx::IsNull( this->treeStack )) {
HXLINE(2599)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2600)			this->treeStack->add(this->dtree->root);
HXLINE(2601)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2602)				 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack->pop_unsafe();
HXLINE(2611)				 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(2611)				bool _hx_tmp6;
HXDLIN(2611)				bool _hx_tmp7;
HXDLIN(2611)				bool _hx_tmp8;
HXDLIN(2611)				if ((ab->miny <= _this2->maxy)) {
HXLINE(2611)					_hx_tmp8 = (_this2->miny <= ab->maxy);
            				}
            				else {
HXLINE(2611)					_hx_tmp8 = false;
            				}
HXDLIN(2611)				if (_hx_tmp8) {
HXLINE(2611)					_hx_tmp7 = (ab->minx <= _this2->maxx);
            				}
            				else {
HXLINE(2611)					_hx_tmp7 = false;
            				}
HXDLIN(2611)				if (_hx_tmp7) {
HXLINE(2611)					_hx_tmp6 = (_this2->minx <= ab->maxx);
            				}
            				else {
HXLINE(2611)					_hx_tmp6 = false;
            				}
HXDLIN(2611)				if (_hx_tmp6) {
HXLINE(2612)					if (hx::IsNull( node1->child1 )) {
HXLINE(2614)						 ::nape::phys::Body body1 = node1->shape->body->outer;
HXLINE(2615)						bool _hx_tmp9;
HXDLIN(2615)						if (hx::IsNotNull( filter )) {
HXLINE(2615)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node1->shape->filter;
HXDLIN(2615)							if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2615)								_hx_tmp9 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            							}
            							else {
HXLINE(2615)								_hx_tmp9 = false;
            							}
            						}
            						else {
HXLINE(2615)							_hx_tmp9 = true;
            						}
HXDLIN(2615)						if (_hx_tmp9) {
HXLINE(2616)							if (containment) {
HXLINE(2617)								if (!(this->failed->has(body1))) {
HXLINE(2618)									bool col1 = ::zpp_nape::geom::ZPP_Collide_obj::containTest(this->circShape->zpp_inner,node1->shape);
HXLINE(2619)									bool _hx_tmp10;
HXDLIN(2619)									if (!(ret->has(body1))) {
HXLINE(2619)										_hx_tmp10 = col1;
            									}
            									else {
HXLINE(2619)										_hx_tmp10 = false;
            									}
HXDLIN(2619)									if (_hx_tmp10) {
HXLINE(2619)										ret->push(body1);
            									}
            									else {
HXLINE(2620)										if (!(col1)) {
HXLINE(2621)											ret->remove(body1);
HXLINE(2622)											this->failed->push(body1);
            										}
            									}
            								}
            							}
            							else {
HXLINE(2626)								bool _hx_tmp11;
HXDLIN(2626)								if (!(ret->has(body1))) {
HXLINE(2626)									_hx_tmp11 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node1->shape,this->circShape->zpp_inner);
            								}
            								else {
HXLINE(2626)									_hx_tmp11 = false;
            								}
HXDLIN(2626)								if (_hx_tmp11) {
HXLINE(2627)									ret->push(body1);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2633)						if (hx::IsNotNull( node1->child1 )) {
HXLINE(2633)							this->treeStack->add(node1->child1);
            						}
HXLINE(2634)						if (hx::IsNotNull( node1->child2 )) {
HXLINE(2634)							this->treeStack->add(node1->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2641)		this->failed->clear();
HXLINE(2642)		return ret;
            	}


 ::nape::shape::ShapeList ZPP_DynAABBPhase_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shp,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2644_shapesInShape)
HXLINE(2645)		this->sync_broadphase();
HXLINE(2646)		this->validateShape(shp);
HXLINE(2647)		 ::zpp_nape::geom::ZPP_AABB ab = shp->aabb;
HXLINE(2648)		 ::nape::shape::ShapeList ret;
HXDLIN(2648)		if (hx::IsNull( output )) {
HXLINE(2648)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2648)			ret = output;
            		}
HXLINE(2651)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2652)			if (hx::IsNull( this->treeStack )) {
HXLINE(2652)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2653)			this->treeStack->add(this->stree->root);
HXLINE(2654)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2655)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2664)				 ::zpp_nape::geom::ZPP_AABB _this = node->aabb;
HXDLIN(2664)				bool _hx_tmp;
HXDLIN(2664)				bool _hx_tmp1;
HXDLIN(2664)				bool _hx_tmp2;
HXDLIN(2664)				if ((ab->miny <= _this->maxy)) {
HXLINE(2664)					_hx_tmp2 = (_this->miny <= ab->maxy);
            				}
            				else {
HXLINE(2664)					_hx_tmp2 = false;
            				}
HXDLIN(2664)				if (_hx_tmp2) {
HXLINE(2664)					_hx_tmp1 = (ab->minx <= _this->maxx);
            				}
            				else {
HXLINE(2664)					_hx_tmp1 = false;
            				}
HXDLIN(2664)				if (_hx_tmp1) {
HXLINE(2664)					_hx_tmp = (_this->minx <= ab->maxx);
            				}
            				else {
HXLINE(2664)					_hx_tmp = false;
            				}
HXDLIN(2664)				if (_hx_tmp) {
HXLINE(2665)					if (hx::IsNull( node->child1 )) {
HXLINE(2667)						bool _hx_tmp3;
HXDLIN(2667)						if (hx::IsNotNull( filter )) {
HXLINE(2667)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node->shape->filter;
HXDLIN(2667)							if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2667)								_hx_tmp3 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            							}
            							else {
HXLINE(2667)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2667)							_hx_tmp3 = true;
            						}
HXDLIN(2667)						if (_hx_tmp3) {
HXLINE(2668)							if (containment) {
HXLINE(2669)								if (::zpp_nape::geom::ZPP_Collide_obj::containTest(shp,node->shape)) {
HXLINE(2669)									ret->push(node->shape->outer);
            								}
            							}
            							else {
HXLINE(2671)								if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node->shape,shp)) {
HXLINE(2671)									ret->push(node->shape->outer);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2676)						if (hx::IsNotNull( node->child1 )) {
HXLINE(2676)							this->treeStack->add(node->child1);
            						}
HXLINE(2677)						if (hx::IsNotNull( node->child2 )) {
HXLINE(2677)							this->treeStack->add(node->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2686)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2687)			if (hx::IsNull( this->treeStack )) {
HXLINE(2687)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2688)			this->treeStack->add(this->dtree->root);
HXLINE(2689)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2690)				 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack->pop_unsafe();
HXLINE(2699)				 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(2699)				bool _hx_tmp4;
HXDLIN(2699)				bool _hx_tmp5;
HXDLIN(2699)				bool _hx_tmp6;
HXDLIN(2699)				if ((ab->miny <= _this2->maxy)) {
HXLINE(2699)					_hx_tmp6 = (_this2->miny <= ab->maxy);
            				}
            				else {
HXLINE(2699)					_hx_tmp6 = false;
            				}
HXDLIN(2699)				if (_hx_tmp6) {
HXLINE(2699)					_hx_tmp5 = (ab->minx <= _this2->maxx);
            				}
            				else {
HXLINE(2699)					_hx_tmp5 = false;
            				}
HXDLIN(2699)				if (_hx_tmp5) {
HXLINE(2699)					_hx_tmp4 = (_this2->minx <= ab->maxx);
            				}
            				else {
HXLINE(2699)					_hx_tmp4 = false;
            				}
HXDLIN(2699)				if (_hx_tmp4) {
HXLINE(2700)					if (hx::IsNull( node1->child1 )) {
HXLINE(2702)						bool _hx_tmp7;
HXDLIN(2702)						if (hx::IsNotNull( filter )) {
HXLINE(2702)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node1->shape->filter;
HXDLIN(2702)							if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2702)								_hx_tmp7 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            							}
            							else {
HXLINE(2702)								_hx_tmp7 = false;
            							}
            						}
            						else {
HXLINE(2702)							_hx_tmp7 = true;
            						}
HXDLIN(2702)						if (_hx_tmp7) {
HXLINE(2703)							if (containment) {
HXLINE(2704)								if (::zpp_nape::geom::ZPP_Collide_obj::containTest(shp,node1->shape)) {
HXLINE(2704)									ret->push(node1->shape->outer);
            								}
            							}
            							else {
HXLINE(2706)								if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node1->shape,shp)) {
HXLINE(2706)									ret->push(node1->shape->outer);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2711)						if (hx::IsNotNull( node1->child1 )) {
HXLINE(2711)							this->treeStack->add(node1->child1);
            						}
HXLINE(2712)						if (hx::IsNotNull( node1->child2 )) {
HXLINE(2712)							this->treeStack->add(node1->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2719)		return ret;
            	}


 ::nape::phys::BodyList ZPP_DynAABBPhase_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shp,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2721_bodiesInShape)
HXLINE(2722)		this->sync_broadphase();
HXLINE(2723)		this->validateShape(shp);
HXLINE(2724)		 ::zpp_nape::geom::ZPP_AABB ab = shp->aabb;
HXLINE(2725)		 ::nape::phys::BodyList ret;
HXDLIN(2725)		if (hx::IsNull( output )) {
HXLINE(2725)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2725)			ret = output;
            		}
HXLINE(2726)		if (hx::IsNull( this->failed )) {
HXLINE(2726)			this->failed =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
HXLINE(2729)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2730)			if (hx::IsNull( this->treeStack )) {
HXLINE(2730)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2731)			this->treeStack->add(this->stree->root);
HXLINE(2732)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2733)				 ::zpp_nape::space::ZPP_AABBNode node = this->treeStack->pop_unsafe();
HXLINE(2742)				 ::zpp_nape::geom::ZPP_AABB _this = node->aabb;
HXDLIN(2742)				bool _hx_tmp;
HXDLIN(2742)				bool _hx_tmp1;
HXDLIN(2742)				bool _hx_tmp2;
HXDLIN(2742)				if ((ab->miny <= _this->maxy)) {
HXLINE(2742)					_hx_tmp2 = (_this->miny <= ab->maxy);
            				}
            				else {
HXLINE(2742)					_hx_tmp2 = false;
            				}
HXDLIN(2742)				if (_hx_tmp2) {
HXLINE(2742)					_hx_tmp1 = (ab->minx <= _this->maxx);
            				}
            				else {
HXLINE(2742)					_hx_tmp1 = false;
            				}
HXDLIN(2742)				if (_hx_tmp1) {
HXLINE(2742)					_hx_tmp = (_this->minx <= ab->maxx);
            				}
            				else {
HXLINE(2742)					_hx_tmp = false;
            				}
HXDLIN(2742)				if (_hx_tmp) {
HXLINE(2743)					if (hx::IsNull( node->child1 )) {
HXLINE(2745)						 ::nape::phys::Body body = node->shape->body->outer;
HXLINE(2746)						bool _hx_tmp3;
HXDLIN(2746)						if (hx::IsNotNull( filter )) {
HXLINE(2746)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this1 = node->shape->filter;
HXDLIN(2746)							if (((_this1->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2746)								_hx_tmp3 = ((filter->collisionMask & _this1->collisionGroup) != 0);
            							}
            							else {
HXLINE(2746)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2746)							_hx_tmp3 = true;
            						}
HXDLIN(2746)						if (_hx_tmp3) {
HXLINE(2747)							if (containment) {
HXLINE(2748)								if (!(this->failed->has(body))) {
HXLINE(2749)									bool col = ::zpp_nape::geom::ZPP_Collide_obj::containTest(shp,node->shape);
HXLINE(2750)									bool _hx_tmp4;
HXDLIN(2750)									if (!(ret->has(body))) {
HXLINE(2750)										_hx_tmp4 = col;
            									}
            									else {
HXLINE(2750)										_hx_tmp4 = false;
            									}
HXDLIN(2750)									if (_hx_tmp4) {
HXLINE(2750)										ret->push(body);
            									}
            									else {
HXLINE(2751)										if (!(col)) {
HXLINE(2752)											ret->remove(body);
HXLINE(2753)											this->failed->push(body);
            										}
            									}
            								}
            							}
            							else {
HXLINE(2757)								bool _hx_tmp5;
HXDLIN(2757)								if (!(ret->has(body))) {
HXLINE(2757)									_hx_tmp5 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node->shape,shp);
            								}
            								else {
HXLINE(2757)									_hx_tmp5 = false;
            								}
HXDLIN(2757)								if (_hx_tmp5) {
HXLINE(2758)									ret->push(body);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2764)						if (hx::IsNotNull( node->child1 )) {
HXLINE(2764)							this->treeStack->add(node->child1);
            						}
HXLINE(2765)						if (hx::IsNotNull( node->child2 )) {
HXLINE(2765)							this->treeStack->add(node->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2774)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2775)			if (hx::IsNull( this->treeStack )) {
HXLINE(2775)				this->treeStack =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            			}
HXLINE(2776)			this->treeStack->add(this->dtree->root);
HXLINE(2777)			while(hx::IsNotNull( this->treeStack->head )){
HXLINE(2778)				 ::zpp_nape::space::ZPP_AABBNode node1 = this->treeStack->pop_unsafe();
HXLINE(2787)				 ::zpp_nape::geom::ZPP_AABB _this2 = node1->aabb;
HXDLIN(2787)				bool _hx_tmp6;
HXDLIN(2787)				bool _hx_tmp7;
HXDLIN(2787)				bool _hx_tmp8;
HXDLIN(2787)				if ((ab->miny <= _this2->maxy)) {
HXLINE(2787)					_hx_tmp8 = (_this2->miny <= ab->maxy);
            				}
            				else {
HXLINE(2787)					_hx_tmp8 = false;
            				}
HXDLIN(2787)				if (_hx_tmp8) {
HXLINE(2787)					_hx_tmp7 = (ab->minx <= _this2->maxx);
            				}
            				else {
HXLINE(2787)					_hx_tmp7 = false;
            				}
HXDLIN(2787)				if (_hx_tmp7) {
HXLINE(2787)					_hx_tmp6 = (_this2->minx <= ab->maxx);
            				}
            				else {
HXLINE(2787)					_hx_tmp6 = false;
            				}
HXDLIN(2787)				if (_hx_tmp6) {
HXLINE(2788)					if (hx::IsNull( node1->child1 )) {
HXLINE(2790)						 ::nape::phys::Body body1 = node1->shape->body->outer;
HXLINE(2791)						bool _hx_tmp9;
HXDLIN(2791)						if (hx::IsNotNull( filter )) {
HXLINE(2791)							 ::zpp_nape::dynamics::ZPP_InteractionFilter _this3 = node1->shape->filter;
HXDLIN(2791)							if (((_this3->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2791)								_hx_tmp9 = ((filter->collisionMask & _this3->collisionGroup) != 0);
            							}
            							else {
HXLINE(2791)								_hx_tmp9 = false;
            							}
            						}
            						else {
HXLINE(2791)							_hx_tmp9 = true;
            						}
HXDLIN(2791)						if (_hx_tmp9) {
HXLINE(2792)							if (containment) {
HXLINE(2793)								if (!(this->failed->has(body1))) {
HXLINE(2794)									bool col1 = ::zpp_nape::geom::ZPP_Collide_obj::containTest(shp,node1->shape);
HXLINE(2795)									bool _hx_tmp10;
HXDLIN(2795)									if (!(ret->has(body1))) {
HXLINE(2795)										_hx_tmp10 = col1;
            									}
            									else {
HXLINE(2795)										_hx_tmp10 = false;
            									}
HXDLIN(2795)									if (_hx_tmp10) {
HXLINE(2795)										ret->push(body1);
            									}
            									else {
HXLINE(2796)										if (!(col1)) {
HXLINE(2797)											ret->remove(body1);
HXLINE(2798)											this->failed->push(body1);
            										}
            									}
            								}
            							}
            							else {
HXLINE(2802)								bool _hx_tmp11;
HXDLIN(2802)								if (!(ret->has(body1))) {
HXLINE(2802)									_hx_tmp11 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(node1->shape,shp);
            								}
            								else {
HXLINE(2802)									_hx_tmp11 = false;
            								}
HXDLIN(2802)								if (_hx_tmp11) {
HXLINE(2803)									ret->push(body1);
            								}
            							}
            						}
            					}
            					else {
HXLINE(2809)						if (hx::IsNotNull( node1->child1 )) {
HXLINE(2809)							this->treeStack->add(node1->child1);
            						}
HXLINE(2810)						if (hx::IsNotNull( node1->child2 )) {
HXLINE(2810)							this->treeStack->add(node1->child2);
            						}
            					}
            				}
            			}
            		}
HXLINE(2817)		this->failed->clear();
HXLINE(2818)		return ret;
            	}


 ::nape::geom::RayResult ZPP_DynAABBPhase_obj::rayCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2821_rayCast)
HXLINE(2822)		if (hx::IsNull( this->openlist )) {
HXLINE(2822)			this->openlist =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            		}
HXLINE(2823)		this->sync_broadphase();
HXLINE(2824)		ray->validate_dir();
HXLINE(2825)		Float mint = ray->maxdist;
HXLINE(2827)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2828)			if (ray->aabbtest(this->dtree->root->aabb)) {
HXLINE(2829)				Float t = ray->aabbsect(this->dtree->root->aabb);
HXLINE(2830)				bool _hx_tmp;
HXDLIN(2830)				if ((t >= 0)) {
HXLINE(2830)					_hx_tmp = (t < mint);
            				}
            				else {
HXLINE(2830)					_hx_tmp = false;
            				}
HXDLIN(2830)				if (_hx_tmp) {
HXLINE(2831)					this->dtree->root->rayt = t;
HXLINE(2832)					{
HXLINE(2833)						 ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre = null();
HXLINE(2834)						{
HXLINE(2835)							 ::zpp_nape::util::ZNPNode_ZPP_AABBNode cx_ite = this->openlist->head;
HXLINE(2836)							while(hx::IsNotNull( cx_ite )){
HXLINE(2837)								 ::zpp_nape::space::ZPP_AABBNode j = cx_ite->elt;
HXLINE(2838)								{
HXLINE(2839)									if ((this->dtree->root->rayt < j->rayt)) {
HXLINE(2839)										goto _hx_goto_82;
            									}
HXLINE(2840)									pre = cx_ite;
            								}
HXLINE(2842)								cx_ite = cx_ite->next;
            							}
            							_hx_goto_82:;
            						}
HXLINE(2845)						{
HXLINE(2845)							 ::zpp_nape::util::ZNPList_ZPP_AABBNode _this = this->openlist;
HXDLIN(2845)							 ::zpp_nape::space::ZPP_AABBNode o = this->dtree->root;
HXDLIN(2845)							 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ret;
HXDLIN(2845)							if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(2845)								ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(2845)								ret = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(2845)								::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret->next;
HXDLIN(2845)								ret->next = null();
            							}
HXDLIN(2845)							ret->elt = o;
HXDLIN(2845)							 ::zpp_nape::util::ZNPNode_ZPP_AABBNode temp = ret;
HXDLIN(2845)							if (hx::IsNull( pre )) {
HXLINE(2845)								temp->next = _this->head;
HXDLIN(2845)								_this->head = temp;
            							}
            							else {
HXLINE(2845)								temp->next = pre->next;
HXDLIN(2845)								pre->next = temp;
            							}
HXDLIN(2845)							_this->pushmod = (_this->modified = true);
HXDLIN(2845)							_this->length++;
            						}
            					}
            				}
            			}
            		}
HXLINE(2852)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2853)			if (ray->aabbtest(this->stree->root->aabb)) {
HXLINE(2854)				Float t1 = ray->aabbsect(this->stree->root->aabb);
HXLINE(2855)				bool _hx_tmp1;
HXDLIN(2855)				if ((t1 >= 0)) {
HXLINE(2855)					_hx_tmp1 = (t1 < mint);
            				}
            				else {
HXLINE(2855)					_hx_tmp1 = false;
            				}
HXDLIN(2855)				if (_hx_tmp1) {
HXLINE(2856)					this->stree->root->rayt = t1;
HXLINE(2857)					{
HXLINE(2858)						 ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre1 = null();
HXLINE(2859)						{
HXLINE(2860)							 ::zpp_nape::util::ZNPNode_ZPP_AABBNode cx_ite1 = this->openlist->head;
HXLINE(2861)							while(hx::IsNotNull( cx_ite1 )){
HXLINE(2862)								 ::zpp_nape::space::ZPP_AABBNode j1 = cx_ite1->elt;
HXLINE(2863)								{
HXLINE(2864)									if ((this->stree->root->rayt < j1->rayt)) {
HXLINE(2864)										goto _hx_goto_83;
            									}
HXLINE(2865)									pre1 = cx_ite1;
            								}
HXLINE(2867)								cx_ite1 = cx_ite1->next;
            							}
            							_hx_goto_83:;
            						}
HXLINE(2870)						{
HXLINE(2870)							 ::zpp_nape::util::ZNPList_ZPP_AABBNode _this1 = this->openlist;
HXDLIN(2870)							 ::zpp_nape::space::ZPP_AABBNode o1 = this->stree->root;
HXDLIN(2870)							 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ret1;
HXDLIN(2870)							if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(2870)								ret1 =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(2870)								ret1 = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(2870)								::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret1->next;
HXDLIN(2870)								ret1->next = null();
            							}
HXDLIN(2870)							ret1->elt = o1;
HXDLIN(2870)							 ::zpp_nape::util::ZNPNode_ZPP_AABBNode temp1 = ret1;
HXDLIN(2870)							if (hx::IsNull( pre1 )) {
HXLINE(2870)								temp1->next = _this1->head;
HXDLIN(2870)								_this1->head = temp1;
            							}
            							else {
HXLINE(2870)								temp1->next = pre1->next;
HXDLIN(2870)								pre1->next = temp1;
            							}
HXDLIN(2870)							_this1->pushmod = (_this1->modified = true);
HXDLIN(2870)							_this1->length++;
            						}
            					}
            				}
            			}
            		}
HXLINE(2876)		 ::nape::geom::RayResult minres = null();
HXLINE(2877)		while(hx::IsNotNull( this->openlist->head )){
HXLINE(2878)			 ::zpp_nape::space::ZPP_AABBNode cnode = this->openlist->pop_unsafe();
HXLINE(2879)			if ((cnode->rayt >= mint)) {
HXLINE(2879)				goto _hx_goto_84;
            			}
HXLINE(2880)			if (hx::IsNull( cnode->child1 )) {
HXLINE(2881)				 ::zpp_nape::shape::ZPP_Shape shape = cnode->shape;
HXLINE(2882)				bool _hx_tmp2;
HXDLIN(2882)				if (hx::IsNotNull( filter )) {
HXLINE(2882)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this2 = shape->filter;
HXDLIN(2882)					if (((_this2->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2882)						_hx_tmp2 = ((filter->collisionMask & _this2->collisionGroup) != 0);
            					}
            					else {
HXLINE(2882)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE(2882)					_hx_tmp2 = true;
            				}
HXDLIN(2882)				if (_hx_tmp2) {
HXLINE(2883)					 ::nape::geom::RayResult result;
HXDLIN(2883)					if ((shape->type == 0)) {
HXLINE(2883)						result = ray->circlesect(shape->circle,inner,mint);
            					}
            					else {
HXLINE(2883)						if (ray->aabbtest(shape->aabb)) {
HXLINE(2883)							result = ray->polysect(shape->polygon,inner,mint);
            						}
            						else {
HXLINE(2883)							result = null();
            						}
            					}
HXLINE(2885)					if (hx::IsNotNull( result )) {
HXLINE(2886)						if (hx::IsNotNull( result->zpp_inner->next )) {
HXLINE(2886)							HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            						}
HXDLIN(2886)						mint = result->zpp_inner->toiDistance;
HXLINE(2887)						if (hx::IsNotNull( minres )) {
HXLINE(2888)							if (hx::IsNotNull( minres->zpp_inner->next )) {
HXLINE(2888)								HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            							}
HXDLIN(2888)							minres->zpp_inner->free();
            						}
HXLINE(2890)						minres = result;
            					}
            				}
            			}
            			else {
HXLINE(2896)				if (hx::IsNotNull( cnode->child1 )) {
HXLINE(2897)					if (ray->aabbtest(cnode->child1->aabb)) {
HXLINE(2898)						Float t2 = ray->aabbsect(cnode->child1->aabb);
HXLINE(2899)						bool _hx_tmp3;
HXDLIN(2899)						if ((t2 >= 0)) {
HXLINE(2899)							_hx_tmp3 = (t2 < mint);
            						}
            						else {
HXLINE(2899)							_hx_tmp3 = false;
            						}
HXDLIN(2899)						if (_hx_tmp3) {
HXLINE(2900)							cnode->child1->rayt = t2;
HXLINE(2901)							{
HXLINE(2902)								 ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre2 = null();
HXLINE(2903)								{
HXLINE(2904)									 ::zpp_nape::util::ZNPNode_ZPP_AABBNode cx_ite2 = this->openlist->head;
HXLINE(2905)									while(hx::IsNotNull( cx_ite2 )){
HXLINE(2906)										 ::zpp_nape::space::ZPP_AABBNode j2 = cx_ite2->elt;
HXLINE(2907)										{
HXLINE(2908)											if ((cnode->child1->rayt < j2->rayt)) {
HXLINE(2908)												goto _hx_goto_85;
            											}
HXLINE(2909)											pre2 = cx_ite2;
            										}
HXLINE(2911)										cx_ite2 = cx_ite2->next;
            									}
            									_hx_goto_85:;
            								}
HXLINE(2914)								{
HXLINE(2914)									 ::zpp_nape::util::ZNPList_ZPP_AABBNode _this3 = this->openlist;
HXDLIN(2914)									 ::zpp_nape::space::ZPP_AABBNode o2 = cnode->child1;
HXDLIN(2914)									 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ret2;
HXDLIN(2914)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(2914)										ret2 =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(2914)										ret2 = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(2914)										::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret2->next;
HXDLIN(2914)										ret2->next = null();
            									}
HXDLIN(2914)									ret2->elt = o2;
HXDLIN(2914)									 ::zpp_nape::util::ZNPNode_ZPP_AABBNode temp2 = ret2;
HXDLIN(2914)									if (hx::IsNull( pre2 )) {
HXLINE(2914)										temp2->next = _this3->head;
HXDLIN(2914)										_this3->head = temp2;
            									}
            									else {
HXLINE(2914)										temp2->next = pre2->next;
HXDLIN(2914)										pre2->next = temp2;
            									}
HXDLIN(2914)									_this3->pushmod = (_this3->modified = true);
HXDLIN(2914)									_this3->length++;
            								}
            							}
            						}
            					}
            				}
HXLINE(2921)				if (hx::IsNotNull( cnode->child2 )) {
HXLINE(2922)					if (ray->aabbtest(cnode->child2->aabb)) {
HXLINE(2923)						Float t3 = ray->aabbsect(cnode->child2->aabb);
HXLINE(2924)						bool _hx_tmp4;
HXDLIN(2924)						if ((t3 >= 0)) {
HXLINE(2924)							_hx_tmp4 = (t3 < mint);
            						}
            						else {
HXLINE(2924)							_hx_tmp4 = false;
            						}
HXDLIN(2924)						if (_hx_tmp4) {
HXLINE(2925)							cnode->child2->rayt = t3;
HXLINE(2926)							{
HXLINE(2927)								 ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre3 = null();
HXLINE(2928)								{
HXLINE(2929)									 ::zpp_nape::util::ZNPNode_ZPP_AABBNode cx_ite3 = this->openlist->head;
HXLINE(2930)									while(hx::IsNotNull( cx_ite3 )){
HXLINE(2931)										 ::zpp_nape::space::ZPP_AABBNode j3 = cx_ite3->elt;
HXLINE(2932)										{
HXLINE(2933)											if ((cnode->child2->rayt < j3->rayt)) {
HXLINE(2933)												goto _hx_goto_86;
            											}
HXLINE(2934)											pre3 = cx_ite3;
            										}
HXLINE(2936)										cx_ite3 = cx_ite3->next;
            									}
            									_hx_goto_86:;
            								}
HXLINE(2939)								{
HXLINE(2939)									 ::zpp_nape::util::ZNPList_ZPP_AABBNode _this4 = this->openlist;
HXDLIN(2939)									 ::zpp_nape::space::ZPP_AABBNode o3 = cnode->child2;
HXDLIN(2939)									 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ret3;
HXDLIN(2939)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(2939)										ret3 =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(2939)										ret3 = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(2939)										::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret3->next;
HXDLIN(2939)										ret3->next = null();
            									}
HXDLIN(2939)									ret3->elt = o3;
HXDLIN(2939)									 ::zpp_nape::util::ZNPNode_ZPP_AABBNode temp3 = ret3;
HXDLIN(2939)									if (hx::IsNull( pre3 )) {
HXLINE(2939)										temp3->next = _this4->head;
HXDLIN(2939)										_this4->head = temp3;
            									}
            									else {
HXLINE(2939)										temp3->next = pre3->next;
HXDLIN(2939)										pre3->next = temp3;
            									}
HXDLIN(2939)									_this4->pushmod = (_this4->modified = true);
HXDLIN(2939)									_this4->length++;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		_hx_goto_84:;
HXLINE(2947)		this->openlist->clear();
HXLINE(2948)		return minres;
            	}


 ::nape::geom::RayResultList ZPP_DynAABBPhase_obj::rayMultiCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::geom::RayResultList output){
            	HX_GC_STACKFRAME(&_hx_pos_bef38b12d532b2cb_2950_rayMultiCast)
HXLINE(2951)		if (hx::IsNull( this->openlist )) {
HXLINE(2951)			this->openlist =  ::zpp_nape::util::ZNPList_ZPP_AABBNode_obj::__alloc( HX_CTX );
            		}
HXLINE(2952)		this->sync_broadphase();
HXLINE(2953)		ray->validate_dir();
HXLINE(2954)		bool inf = (ray->maxdist >= ::Math_obj::POSITIVE_INFINITY);
HXLINE(2955)		 ::nape::geom::RayResultList ret;
HXDLIN(2955)		if (hx::IsNull( output )) {
HXLINE(2955)			ret =  ::nape::geom::RayResultList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2955)			ret = output;
            		}
HXLINE(2957)		if (hx::IsNotNull( this->dtree->root )) {
HXLINE(2958)			if (ray->aabbtest(this->dtree->root->aabb)) {
HXLINE(2959)				if (inf) {
HXLINE(2959)					this->openlist->add(this->dtree->root);
            				}
            				else {
HXLINE(2961)					Float t = ray->aabbsect(this->dtree->root->aabb);
HXLINE(2962)					bool _hx_tmp;
HXDLIN(2962)					if ((t >= 0)) {
HXLINE(2962)						_hx_tmp = (t < ray->maxdist);
            					}
            					else {
HXLINE(2962)						_hx_tmp = false;
            					}
HXDLIN(2962)					if (_hx_tmp) {
HXLINE(2962)						this->openlist->add(this->dtree->root);
            					}
            				}
            			}
            		}
HXLINE(2968)		if (hx::IsNotNull( this->stree->root )) {
HXLINE(2969)			if (ray->aabbtest(this->stree->root->aabb)) {
HXLINE(2970)				if (inf) {
HXLINE(2970)					this->openlist->add(this->stree->root);
            				}
            				else {
HXLINE(2972)					Float t1 = ray->aabbsect(this->stree->root->aabb);
HXLINE(2973)					bool _hx_tmp1;
HXDLIN(2973)					if ((t1 >= 0)) {
HXLINE(2973)						_hx_tmp1 = (t1 < ray->maxdist);
            					}
            					else {
HXLINE(2973)						_hx_tmp1 = false;
            					}
HXDLIN(2973)					if (_hx_tmp1) {
HXLINE(2973)						this->openlist->add(this->stree->root);
            					}
            				}
            			}
            		}
HXLINE(2978)		while(hx::IsNotNull( this->openlist->head )){
HXLINE(2979)			 ::zpp_nape::space::ZPP_AABBNode cnode = this->openlist->pop_unsafe();
HXLINE(2980)			if (hx::IsNull( cnode->child1 )) {
HXLINE(2981)				 ::zpp_nape::shape::ZPP_Shape shape = cnode->shape;
HXLINE(2982)				bool _hx_tmp2;
HXDLIN(2982)				if (hx::IsNotNull( filter )) {
HXLINE(2982)					 ::zpp_nape::dynamics::ZPP_InteractionFilter _this = shape->filter;
HXDLIN(2982)					if (((_this->collisionMask & filter->collisionGroup) != 0)) {
HXLINE(2982)						_hx_tmp2 = ((filter->collisionMask & _this->collisionGroup) != 0);
            					}
            					else {
HXLINE(2982)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE(2982)					_hx_tmp2 = true;
            				}
HXDLIN(2982)				if (_hx_tmp2) {
HXLINE(2983)					if ((shape->type == 0)) {
HXLINE(2983)						ray->circlesect2(shape->circle,inner,ret);
            					}
            					else {
HXLINE(2984)						if (ray->aabbtest(shape->aabb)) {
HXLINE(2984)							ray->polysect2(shape->polygon,inner,ret);
            						}
            					}
            				}
            			}
            			else {
HXLINE(2989)				if (hx::IsNotNull( cnode->child1 )) {
HXLINE(2990)					if (ray->aabbtest(cnode->child1->aabb)) {
HXLINE(2991)						if (inf) {
HXLINE(2991)							this->openlist->add(cnode->child1);
            						}
            						else {
HXLINE(2993)							Float t2 = ray->aabbsect(cnode->child1->aabb);
HXLINE(2994)							bool _hx_tmp3;
HXDLIN(2994)							if ((t2 >= 0)) {
HXLINE(2994)								_hx_tmp3 = (t2 < ray->maxdist);
            							}
            							else {
HXLINE(2994)								_hx_tmp3 = false;
            							}
HXDLIN(2994)							if (_hx_tmp3) {
HXLINE(2994)								this->openlist->add(cnode->child1);
            							}
            						}
            					}
            				}
HXLINE(3000)				if (hx::IsNotNull( cnode->child2 )) {
HXLINE(3001)					if (ray->aabbtest(cnode->child2->aabb)) {
HXLINE(3002)						if (inf) {
HXLINE(3002)							this->openlist->add(cnode->child2);
            						}
            						else {
HXLINE(3004)							Float t3 = ray->aabbsect(cnode->child2->aabb);
HXLINE(3005)							bool _hx_tmp4;
HXDLIN(3005)							if ((t3 >= 0)) {
HXLINE(3005)								_hx_tmp4 = (t3 < ray->maxdist);
            							}
            							else {
HXLINE(3005)								_hx_tmp4 = false;
            							}
HXDLIN(3005)							if (_hx_tmp4) {
HXLINE(3005)								this->openlist->add(cnode->child2);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(3012)		this->openlist->clear();
HXLINE(3013)		return ret;
            	}


Float ZPP_DynAABBPhase_obj::FATTEN;

Float ZPP_DynAABBPhase_obj::VEL_STEPS;


hx::ObjectPtr< ZPP_DynAABBPhase_obj > ZPP_DynAABBPhase_obj::__new( ::zpp_nape::space::ZPP_Space space) {
	hx::ObjectPtr< ZPP_DynAABBPhase_obj > __this = new ZPP_DynAABBPhase_obj();
	__this->__construct(space);
	return __this;
}

hx::ObjectPtr< ZPP_DynAABBPhase_obj > ZPP_DynAABBPhase_obj::__alloc(hx::Ctx *_hx_ctx, ::zpp_nape::space::ZPP_Space space) {
	ZPP_DynAABBPhase_obj *__this = (ZPP_DynAABBPhase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_DynAABBPhase_obj), true, "zpp_nape.space.ZPP_DynAABBPhase"));
	*(void **)__this = ZPP_DynAABBPhase_obj::_hx_vtable;
	__this->__construct(space);
	return __this;
}

ZPP_DynAABBPhase_obj::ZPP_DynAABBPhase_obj()
{
}

void ZPP_DynAABBPhase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_DynAABBPhase);
	HX_MARK_MEMBER_NAME(stree,"stree");
	HX_MARK_MEMBER_NAME(dtree,"dtree");
	HX_MARK_MEMBER_NAME(pairs,"pairs");
	HX_MARK_MEMBER_NAME(syncs,"syncs");
	HX_MARK_MEMBER_NAME(moves,"moves");
	HX_MARK_MEMBER_NAME(treeStack,"treeStack");
	HX_MARK_MEMBER_NAME(treeStack2,"treeStack2");
	HX_MARK_MEMBER_NAME(failed,"failed");
	HX_MARK_MEMBER_NAME(openlist,"openlist");
	 ::zpp_nape::space::ZPP_Broadphase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_DynAABBPhase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stree,"stree");
	HX_VISIT_MEMBER_NAME(dtree,"dtree");
	HX_VISIT_MEMBER_NAME(pairs,"pairs");
	HX_VISIT_MEMBER_NAME(syncs,"syncs");
	HX_VISIT_MEMBER_NAME(moves,"moves");
	HX_VISIT_MEMBER_NAME(treeStack,"treeStack");
	HX_VISIT_MEMBER_NAME(treeStack2,"treeStack2");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	HX_VISIT_MEMBER_NAME(openlist,"openlist");
	 ::zpp_nape::space::ZPP_Broadphase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_DynAABBPhase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dyn") ) { return hx::Val( dyn_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stree") ) { return hx::Val( stree ); }
		if (HX_FIELD_EQ(inName,"dtree") ) { return hx::Val( dtree ); }
		if (HX_FIELD_EQ(inName,"pairs") ) { return hx::Val( pairs ); }
		if (HX_FIELD_EQ(inName,"syncs") ) { return hx::Val( syncs ); }
		if (HX_FIELD_EQ(inName,"moves") ) { return hx::Val( moves ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn() ); }
		if (HX_FIELD_EQ(inName,"failed") ) { return hx::Val( failed ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__insert") ) { return hx::Val( __insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"__remove") ) { return hx::Val( __remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"openlist") ) { return hx::Val( openlist ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"treeStack") ) { return hx::Val( treeStack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"broadphase") ) { return hx::Val( broadphase_dyn() ); }
		if (HX_FIELD_EQ(inName,"treeStack2") ) { return hx::Val( treeStack2 ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sync_broadphase") ) { return hx::Val( sync_broadphase_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_DynAABBPhase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stree") ) { stree=inValue.Cast<  ::zpp_nape::space::ZPP_AABBTree >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dtree") ) { dtree=inValue.Cast<  ::zpp_nape::space::ZPP_AABBTree >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pairs") ) { pairs=inValue.Cast<  ::zpp_nape::space::ZPP_AABBPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"syncs") ) { syncs=inValue.Cast<  ::zpp_nape::space::ZPP_AABBNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moves") ) { moves=inValue.Cast<  ::zpp_nape::space::ZPP_AABBNode >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast<  ::nape::phys::BodyList >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"openlist") ) { openlist=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_AABBNode >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"treeStack") ) { treeStack=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_AABBNode >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"treeStack2") ) { treeStack2=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_AABBNode >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_DynAABBPhase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("stree",51,4f,18,84));
	outFields->push(HX_("dtree",c2,9b,15,e1));
	outFields->push(HX_("pairs",19,bb,4e,bd));
	outFields->push(HX_("syncs",b8,55,63,87));
	outFields->push(HX_("moves",42,cc,65,0c));
	outFields->push(HX_("treeStack",0a,89,16,ef));
	outFields->push(HX_("treeStack2",e8,5f,a1,44));
	outFields->push(HX_("failed",bd,c5,fe,e7));
	outFields->push(HX_("openlist",28,cd,15,fe));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_DynAABBPhase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::space::ZPP_AABBTree */ ,(int)offsetof(ZPP_DynAABBPhase_obj,stree),HX_("stree",51,4f,18,84)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_AABBTree */ ,(int)offsetof(ZPP_DynAABBPhase_obj,dtree),HX_("dtree",c2,9b,15,e1)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_AABBPair */ ,(int)offsetof(ZPP_DynAABBPhase_obj,pairs),HX_("pairs",19,bb,4e,bd)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_AABBNode */ ,(int)offsetof(ZPP_DynAABBPhase_obj,syncs),HX_("syncs",b8,55,63,87)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_AABBNode */ ,(int)offsetof(ZPP_DynAABBPhase_obj,moves),HX_("moves",42,cc,65,0c)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_AABBNode */ ,(int)offsetof(ZPP_DynAABBPhase_obj,treeStack),HX_("treeStack",0a,89,16,ef)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_AABBNode */ ,(int)offsetof(ZPP_DynAABBPhase_obj,treeStack2),HX_("treeStack2",e8,5f,a1,44)},
	{hx::fsObject /*  ::nape::phys::BodyList */ ,(int)offsetof(ZPP_DynAABBPhase_obj,failed),HX_("failed",bd,c5,fe,e7)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_AABBNode */ ,(int)offsetof(ZPP_DynAABBPhase_obj,openlist),HX_("openlist",28,cd,15,fe)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_DynAABBPhase_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &ZPP_DynAABBPhase_obj::FATTEN,HX_("FATTEN",a4,dc,cc,a1)},
	{hx::fsFloat,(void *) &ZPP_DynAABBPhase_obj::VEL_STEPS,HX_("VEL_STEPS",c5,44,f5,9d)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_DynAABBPhase_obj_sMemberFields[] = {
	HX_("stree",51,4f,18,84),
	HX_("dtree",c2,9b,15,e1),
	HX_("pairs",19,bb,4e,bd),
	HX_("syncs",b8,55,63,87),
	HX_("moves",42,cc,65,0c),
	HX_("dyn",39,4b,4c,00),
	HX_("__insert",59,ae,0c,46),
	HX_("__remove",64,07,b8,ac),
	HX_("__sync",7b,1d,58,fb),
	HX_("sync_broadphase",5d,a8,59,01),
	HX_("broadphase",b9,5d,1d,d8),
	HX_("clear",8d,71,5b,48),
	HX_("treeStack",0a,89,16,ef),
	HX_("shapesUnderPoint",ea,ec,bc,47),
	HX_("bodiesUnderPoint",b8,1b,30,80),
	HX_("treeStack2",e8,5f,a1,44),
	HX_("shapesInAABB",d7,1c,84,f9),
	HX_("failed",bd,c5,fe,e7),
	HX_("bodiesInAABB",a5,4c,28,9e),
	HX_("shapesInCircle",27,d4,f7,6c),
	HX_("bodiesInCircle",75,13,e2,a6),
	HX_("shapesInShape",ea,90,2a,d1),
	HX_("bodiesInShape",5c,35,30,3c),
	HX_("openlist",28,cd,15,fe),
	HX_("rayCast",c9,5d,3c,25),
	HX_("rayMultiCast",8e,02,7d,23),
	::String(null()) };

static void ZPP_DynAABBPhase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_DynAABBPhase_obj::FATTEN,"FATTEN");
	HX_MARK_MEMBER_NAME(ZPP_DynAABBPhase_obj::VEL_STEPS,"VEL_STEPS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_DynAABBPhase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_DynAABBPhase_obj::FATTEN,"FATTEN");
	HX_VISIT_MEMBER_NAME(ZPP_DynAABBPhase_obj::VEL_STEPS,"VEL_STEPS");
};

#endif

hx::Class ZPP_DynAABBPhase_obj::__mClass;

static ::String ZPP_DynAABBPhase_obj_sStaticFields[] = {
	HX_("FATTEN",a4,dc,cc,a1),
	HX_("VEL_STEPS",c5,44,f5,9d),
	::String(null())
};

void ZPP_DynAABBPhase_obj::__register()
{
	ZPP_DynAABBPhase_obj _hx_dummy;
	ZPP_DynAABBPhase_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.space.ZPP_DynAABBPhase",70,c0,fa,c8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_DynAABBPhase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_DynAABBPhase_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_DynAABBPhase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_DynAABBPhase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_DynAABBPhase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_DynAABBPhase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_DynAABBPhase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_DynAABBPhase_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bef38b12d532b2cb_696_boot)
HXDLIN( 696)		FATTEN = ((Float)3.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bef38b12d532b2cb_698_boot)
HXDLIN( 698)		VEL_STEPS = ((Float)2.0);
            	}
}

} // end namespace zpp_nape
} // end namespace space
