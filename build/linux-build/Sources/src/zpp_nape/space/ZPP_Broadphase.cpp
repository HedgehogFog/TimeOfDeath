// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <hxinc/nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <hxinc/nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <hxinc/nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <hxinc/nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <hxinc/nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <hxinc/nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <hxinc/nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <hxinc/nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <hxinc/nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <hxinc/zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <hxinc/zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <hxinc/zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <hxinc/zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <hxinc/zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <hxinc/zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <hxinc/zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <hxinc/zpp_nape/space/ZPP_SweepPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <hxinc/zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_174_new,"zpp_nape.space.ZPP_Broadphase","new",0xf55a4ff9,"zpp_nape.space.ZPP_Broadphase.new","zpp_nape/space/Broadphase.hx",174,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_180_insert,"zpp_nape.space.ZPP_Broadphase","insert",0x67d1c940,"zpp_nape.space.ZPP_Broadphase.insert","zpp_nape/space/Broadphase.hx",180,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_184_remove,"zpp_nape.space.ZPP_Broadphase","remove",0xce7d224b,"zpp_nape.space.ZPP_Broadphase.remove","zpp_nape/space/Broadphase.hx",184,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_188_sync,"zpp_nape.space.ZPP_Broadphase","sync",0xbd08e0a2,"zpp_nape.space.ZPP_Broadphase.sync","zpp_nape/space/Broadphase.hx",188,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_192_broadphase,"zpp_nape.space.ZPP_Broadphase","broadphase",0x659af340,"zpp_nape.space.ZPP_Broadphase.broadphase","zpp_nape/space/Broadphase.hx",192,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_201_clear,"zpp_nape.space.ZPP_Broadphase","clear",0x6bb3c966,"zpp_nape.space.ZPP_Broadphase.clear","zpp_nape/space/Broadphase.hx",201,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_203_shapesUnderPoint,"zpp_nape.space.ZPP_Broadphase","shapesUnderPoint",0x7ce9e1b1,"zpp_nape.space.ZPP_Broadphase.shapesUnderPoint","zpp_nape/space/Broadphase.hx",203,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_206_bodiesUnderPoint,"zpp_nape.space.ZPP_Broadphase","bodiesUnderPoint",0xb55d107f,"zpp_nape.space.ZPP_Broadphase.bodiesUnderPoint","zpp_nape/space/Broadphase.hx",206,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_210_updateAABBShape,"zpp_nape.space.ZPP_Broadphase","updateAABBShape",0x82875651,"zpp_nape.space.ZPP_Broadphase.updateAABBShape","zpp_nape/space/Broadphase.hx",210,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_231_shapesInAABB,"zpp_nape.space.ZPP_Broadphase","shapesInAABB",0x11b7621e,"zpp_nape.space.ZPP_Broadphase.shapesInAABB","zpp_nape/space/Broadphase.hx",231,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_234_bodiesInAABB,"zpp_nape.space.ZPP_Broadphase","bodiesInAABB",0xb65b91ec,"zpp_nape.space.ZPP_Broadphase.bodiesInAABB","zpp_nape/space/Broadphase.hx",234,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_237_updateCircShape,"zpp_nape.space.ZPP_Broadphase","updateCircShape",0x1619299a,"zpp_nape.space.ZPP_Broadphase.updateCircShape","zpp_nape/space/Broadphase.hx",237,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_255_shapesInCircle,"zpp_nape.space.ZPP_Broadphase","shapesInCircle",0x6c7c392e,"zpp_nape.space.ZPP_Broadphase.shapesInCircle","zpp_nape/space/Broadphase.hx",255,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_258_bodiesInCircle,"zpp_nape.space.ZPP_Broadphase","bodiesInCircle",0xa666787c,"zpp_nape.space.ZPP_Broadphase.bodiesInCircle","zpp_nape/space/Broadphase.hx",258,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_260_validateShape,"zpp_nape.space.ZPP_Broadphase","validateShape",0xbcc5fb84,"zpp_nape.space.ZPP_Broadphase.validateShape","zpp_nape/space/Broadphase.hx",260,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_266_shapesInShape,"zpp_nape.space.ZPP_Broadphase","shapesInShape",0xe5d3e9c3,"zpp_nape.space.ZPP_Broadphase.shapesInShape","zpp_nape/space/Broadphase.hx",266,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_269_bodiesInShape,"zpp_nape.space.ZPP_Broadphase","bodiesInShape",0x50d98e35,"zpp_nape.space.ZPP_Broadphase.bodiesInShape","zpp_nape/space/Broadphase.hx",269,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_272_rayCast,"zpp_nape.space.ZPP_Broadphase","rayCast",0x113d1de2,"zpp_nape.space.ZPP_Broadphase.rayCast","zpp_nape/space/Broadphase.hx",272,0xcf31b77a)
HX_LOCAL_STACK_FRAME(_hx_pos_771aa6e17aed28f8_275_rayMultiCast,"zpp_nape.space.ZPP_Broadphase","rayMultiCast",0x3bb047d5,"zpp_nape.space.ZPP_Broadphase.rayMultiCast","zpp_nape/space/Broadphase.hx",275,0xcf31b77a)
namespace zpp_nape{
namespace space{

void ZPP_Broadphase_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_174_new)
HXLINE( 236)		this->circShape = null();
HXLINE( 209)		this->matrix = null();
HXLINE( 208)		this->aabbShape = null();
HXLINE( 178)		this->dynab = null();
HXLINE( 177)		this->sweep = null();
HXLINE( 176)		this->is_sweep = false;
HXLINE( 175)		this->space = null();
            	}

Dynamic ZPP_Broadphase_obj::__CreateEmpty() { return new ZPP_Broadphase_obj; }

void *ZPP_Broadphase_obj::_hx_vtable = 0;

Dynamic ZPP_Broadphase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Broadphase_obj > _hx_result = new ZPP_Broadphase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Broadphase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fc88af7;
}

void ZPP_Broadphase_obj::insert( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_180_insert)
HXDLIN( 180)		if (this->is_sweep) {
HXDLIN( 180)			this->sweep->__insert(shape);
            		}
            		else {
HXLINE( 181)			this->dynab->__insert(shape);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,insert,(void))

void ZPP_Broadphase_obj::remove( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_184_remove)
HXDLIN( 184)		if (this->is_sweep) {
HXDLIN( 184)			this->sweep->__remove(shape);
            		}
            		else {
HXLINE( 185)			this->dynab->__remove(shape);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,remove,(void))

void ZPP_Broadphase_obj::sync( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_188_sync)
HXDLIN( 188)		if (this->is_sweep) {
HXDLIN( 188)			if (!(this->sweep->space->continuous)) {
HXDLIN( 188)				if (shape->zip_aabb) {
HXDLIN( 188)					if (hx::IsNotNull( shape->body )) {
HXDLIN( 188)						shape->zip_aabb = false;
HXDLIN( 188)						if ((shape->type == 0)) {
HXDLIN( 188)							 ::zpp_nape::shape::ZPP_Circle _this = shape->circle;
HXDLIN( 188)							if (_this->zip_worldCOM) {
HXDLIN( 188)								if (hx::IsNotNull( _this->body )) {
HXDLIN( 188)									_this->zip_worldCOM = false;
HXDLIN( 188)									if (_this->zip_localCOM) {
HXDLIN( 188)										_this->zip_localCOM = false;
HXDLIN( 188)										if ((_this->type == 1)) {
HXDLIN( 188)											 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN( 188)											if (hx::IsNull( _this1->lverts->next )) {
HXDLIN( 188)												HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            											}
HXDLIN( 188)											if (hx::IsNull( _this1->lverts->next->next )) {
HXDLIN( 188)												_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 188)												_this1->localCOMy = _this1->lverts->next->y;
            											}
            											else {
HXDLIN( 188)												if (hx::IsNull( _this1->lverts->next->next->next )) {
HXDLIN( 188)													{
HXDLIN( 188)														_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 188)														_this1->localCOMy = _this1->lverts->next->y;
            													}
HXDLIN( 188)													{
HXDLIN( 188)														Float t = ((Float)1.0);
HXDLIN( 188)														 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN( 188)														_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN( 188)														 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN( 188)														_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            													}
HXDLIN( 188)													{
HXDLIN( 188)														Float t1 = ((Float)0.5);
HXDLIN( 188)														 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN( 188)														_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN( 188)														 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN( 188)														_this5->localCOMy = (_this5->localCOMy * t1);
            													}
            												}
            												else {
HXDLIN( 188)													{
HXDLIN( 188)														_this1->localCOMx = ( (Float)(0) );
HXDLIN( 188)														_this1->localCOMy = ( (Float)(0) );
            													}
HXDLIN( 188)													Float area = ((Float)0.0);
HXDLIN( 188)													{
HXDLIN( 188)														 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN( 188)														 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 188)														cx_ite = cx_ite->next;
HXDLIN( 188)														 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 188)														cx_ite = cx_ite->next;
HXDLIN( 188)														while(hx::IsNotNull( cx_ite )){
HXDLIN( 188)															 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 188)															{
HXDLIN( 188)																area = (area + (v->x * (w->y - u->y)));
HXDLIN( 188)																Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 188)																 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN( 188)																_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 188)																 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN( 188)																_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            															}
HXDLIN( 188)															u = v;
HXDLIN( 188)															v = w;
HXDLIN( 188)															cx_ite = cx_ite->next;
            														}
HXDLIN( 188)														cx_ite = _this1->lverts->next;
HXDLIN( 188)														 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 188)														{
HXDLIN( 188)															area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 188)															Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 188)															 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN( 188)															_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 188)															 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN( 188)															_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            														}
HXDLIN( 188)														u = v;
HXDLIN( 188)														v = w1;
HXDLIN( 188)														cx_ite = cx_ite->next;
HXDLIN( 188)														 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 188)														{
HXDLIN( 188)															area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 188)															Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 188)															 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN( 188)															_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 188)															 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN( 188)															_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            														}
            													}
HXDLIN( 188)													area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 188)													{
HXDLIN( 188)														Float t2 = area;
HXDLIN( 188)														 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN( 188)														_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN( 188)														 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN( 188)														_this13->localCOMy = (_this13->localCOMy * t2);
            													}
            												}
            											}
            										}
HXDLIN( 188)										if (hx::IsNotNull( _this->wrap_localCOM )) {
HXDLIN( 188)											_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN( 188)											_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            										}
            									}
HXDLIN( 188)									{
HXDLIN( 188)										 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN( 188)										if (_this14->zip_axis) {
HXDLIN( 188)											_this14->zip_axis = false;
HXDLIN( 188)											{
HXDLIN( 188)												_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN( 188)												_this14->axisy = ::Math_obj::cos(_this14->rot);
            											}
            										}
            									}
HXDLIN( 188)									{
HXDLIN( 188)										_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 188)										_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            									}
            								}
            							}
HXDLIN( 188)							Float rx = _this->radius;
HXDLIN( 188)							Float ry = _this->radius;
HXDLIN( 188)							{
HXDLIN( 188)								_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN( 188)								_this->aabb->miny = (_this->worldCOMy - ry);
            							}
HXDLIN( 188)							{
HXDLIN( 188)								_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN( 188)								_this->aabb->maxy = (_this->worldCOMy + ry);
            							}
            						}
            						else {
HXDLIN( 188)							 ::zpp_nape::shape::ZPP_Polygon _this15 = shape->polygon;
HXDLIN( 188)							if (_this15->zip_gverts) {
HXDLIN( 188)								if (hx::IsNotNull( _this15->body )) {
HXDLIN( 188)									_this15->zip_gverts = false;
HXDLIN( 188)									_this15->validate_lverts();
HXDLIN( 188)									{
HXDLIN( 188)										 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN( 188)										if (_this16->zip_axis) {
HXDLIN( 188)											_this16->zip_axis = false;
HXDLIN( 188)											{
HXDLIN( 188)												_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN( 188)												_this16->axisy = ::Math_obj::cos(_this16->rot);
            											}
            										}
            									}
HXDLIN( 188)									 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN( 188)									{
HXDLIN( 188)										 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN( 188)										while(hx::IsNotNull( cx_ite1 )){
HXDLIN( 188)											 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN( 188)											{
HXDLIN( 188)												 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 188)												li = li->next;
HXDLIN( 188)												{
HXDLIN( 188)													g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN( 188)													g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            												}
            											}
HXDLIN( 188)											cx_ite1 = cx_ite1->next;
            										}
            									}
            								}
            							}
HXDLIN( 188)							if (hx::IsNull( _this15->lverts->next )) {
HXDLIN( 188)								HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            							}
HXDLIN( 188)							 ::zpp_nape::geom::ZPP_Vec2 p0 = _this15->gverts->next;
HXDLIN( 188)							{
HXDLIN( 188)								_this15->aabb->minx = p0->x;
HXDLIN( 188)								_this15->aabb->miny = p0->y;
            							}
HXDLIN( 188)							{
HXDLIN( 188)								_this15->aabb->maxx = p0->x;
HXDLIN( 188)								_this15->aabb->maxy = p0->y;
            							}
HXDLIN( 188)							{
HXDLIN( 188)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next->next;
HXDLIN( 188)								while(hx::IsNotNull( cx_ite2 )){
HXDLIN( 188)									 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN( 188)									{
HXDLIN( 188)										if ((p->x < _this15->aabb->minx)) {
HXDLIN( 188)											_this15->aabb->minx = p->x;
            										}
HXDLIN( 188)										if ((p->x > _this15->aabb->maxx)) {
HXDLIN( 188)											_this15->aabb->maxx = p->x;
            										}
HXDLIN( 188)										if ((p->y < _this15->aabb->miny)) {
HXDLIN( 188)											_this15->aabb->miny = p->y;
            										}
HXDLIN( 188)										if ((p->y > _this15->aabb->maxy)) {
HXDLIN( 188)											_this15->aabb->maxy = p->y;
            										}
            									}
HXDLIN( 188)									cx_ite2 = cx_ite2->next;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 189)			 ::zpp_nape::space::ZPP_DynAABBPhase _this17 = this->dynab;
HXDLIN( 189)			 ::zpp_nape::space::ZPP_AABBNode node = shape->node;
HXDLIN( 189)			if (!(node->synced)) {
HXLINE( 189)				if (!(_this17->space->continuous)) {
HXLINE( 189)					if (shape->zip_aabb) {
HXLINE( 189)						if (hx::IsNotNull( shape->body )) {
HXLINE( 189)							shape->zip_aabb = false;
HXDLIN( 189)							if ((shape->type == 0)) {
HXLINE( 189)								 ::zpp_nape::shape::ZPP_Circle _this18 = shape->circle;
HXDLIN( 189)								if (_this18->zip_worldCOM) {
HXLINE( 189)									if (hx::IsNotNull( _this18->body )) {
HXLINE( 189)										_this18->zip_worldCOM = false;
HXDLIN( 189)										if (_this18->zip_localCOM) {
HXLINE( 189)											_this18->zip_localCOM = false;
HXDLIN( 189)											if ((_this18->type == 1)) {
HXLINE( 189)												 ::zpp_nape::shape::ZPP_Polygon _this19 = _this18->polygon;
HXDLIN( 189)												if (hx::IsNull( _this19->lverts->next )) {
HXLINE( 189)													HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            												}
HXDLIN( 189)												if (hx::IsNull( _this19->lverts->next->next )) {
HXLINE( 189)													_this19->localCOMx = _this19->lverts->next->x;
HXDLIN( 189)													_this19->localCOMy = _this19->lverts->next->y;
            												}
            												else {
HXLINE( 189)													if (hx::IsNull( _this19->lverts->next->next->next )) {
HXLINE( 189)														{
HXLINE( 189)															_this19->localCOMx = _this19->lverts->next->x;
HXDLIN( 189)															_this19->localCOMy = _this19->lverts->next->y;
            														}
HXDLIN( 189)														{
HXLINE( 189)															Float t3 = ((Float)1.0);
HXDLIN( 189)															 ::zpp_nape::shape::ZPP_Polygon _this20 = _this19;
HXDLIN( 189)															_this20->localCOMx = (_this20->localCOMx + (_this19->lverts->next->next->x * t3));
HXDLIN( 189)															 ::zpp_nape::shape::ZPP_Polygon _this21 = _this19;
HXDLIN( 189)															_this21->localCOMy = (_this21->localCOMy + (_this19->lverts->next->next->y * t3));
            														}
HXDLIN( 189)														{
HXLINE( 189)															Float t4 = ((Float)0.5);
HXDLIN( 189)															 ::zpp_nape::shape::ZPP_Polygon _this22 = _this19;
HXDLIN( 189)															_this22->localCOMx = (_this22->localCOMx * t4);
HXDLIN( 189)															 ::zpp_nape::shape::ZPP_Polygon _this23 = _this19;
HXDLIN( 189)															_this23->localCOMy = (_this23->localCOMy * t4);
            														}
            													}
            													else {
HXLINE( 189)														{
HXLINE( 189)															_this19->localCOMx = ( (Float)(0) );
HXDLIN( 189)															_this19->localCOMy = ( (Float)(0) );
            														}
HXDLIN( 189)														Float area1 = ((Float)0.0);
HXDLIN( 189)														{
HXLINE( 189)															 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this19->lverts->next;
HXDLIN( 189)															 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite3;
HXDLIN( 189)															cx_ite3 = cx_ite3->next;
HXDLIN( 189)															 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite3;
HXDLIN( 189)															cx_ite3 = cx_ite3->next;
HXDLIN( 189)															while(hx::IsNotNull( cx_ite3 )){
HXLINE( 189)																 ::zpp_nape::geom::ZPP_Vec2 w3 = cx_ite3;
HXDLIN( 189)																{
HXLINE( 189)																	area1 = (area1 + (v1->x * (w3->y - u1->y)));
HXDLIN( 189)																	Float cf3 = ((w3->y * v1->x) - (w3->x * v1->y));
HXDLIN( 189)																	 ::zpp_nape::shape::ZPP_Polygon _this24 = _this19;
HXDLIN( 189)																	_this24->localCOMx = (_this24->localCOMx + ((v1->x + w3->x) * cf3));
HXDLIN( 189)																	 ::zpp_nape::shape::ZPP_Polygon _this25 = _this19;
HXDLIN( 189)																	_this25->localCOMy = (_this25->localCOMy + ((v1->y + w3->y) * cf3));
            																}
HXDLIN( 189)																u1 = v1;
HXDLIN( 189)																v1 = w3;
HXDLIN( 189)																cx_ite3 = cx_ite3->next;
            															}
HXDLIN( 189)															cx_ite3 = _this19->lverts->next;
HXDLIN( 189)															 ::zpp_nape::geom::ZPP_Vec2 w4 = cx_ite3;
HXDLIN( 189)															{
HXLINE( 189)																area1 = (area1 + (v1->x * (w4->y - u1->y)));
HXDLIN( 189)																Float cf4 = ((w4->y * v1->x) - (w4->x * v1->y));
HXDLIN( 189)																 ::zpp_nape::shape::ZPP_Polygon _this26 = _this19;
HXDLIN( 189)																_this26->localCOMx = (_this26->localCOMx + ((v1->x + w4->x) * cf4));
HXDLIN( 189)																 ::zpp_nape::shape::ZPP_Polygon _this27 = _this19;
HXDLIN( 189)																_this27->localCOMy = (_this27->localCOMy + ((v1->y + w4->y) * cf4));
            															}
HXDLIN( 189)															u1 = v1;
HXDLIN( 189)															v1 = w4;
HXDLIN( 189)															cx_ite3 = cx_ite3->next;
HXDLIN( 189)															 ::zpp_nape::geom::ZPP_Vec2 w5 = cx_ite3;
HXDLIN( 189)															{
HXLINE( 189)																area1 = (area1 + (v1->x * (w5->y - u1->y)));
HXDLIN( 189)																Float cf5 = ((w5->y * v1->x) - (w5->x * v1->y));
HXDLIN( 189)																 ::zpp_nape::shape::ZPP_Polygon _this28 = _this19;
HXDLIN( 189)																_this28->localCOMx = (_this28->localCOMx + ((v1->x + w5->x) * cf5));
HXDLIN( 189)																 ::zpp_nape::shape::ZPP_Polygon _this29 = _this19;
HXDLIN( 189)																_this29->localCOMy = (_this29->localCOMy + ((v1->y + w5->y) * cf5));
            															}
            														}
HXDLIN( 189)														area1 = (( (Float)(1) ) / (( (Float)(3) ) * area1));
HXDLIN( 189)														{
HXLINE( 189)															Float t5 = area1;
HXDLIN( 189)															 ::zpp_nape::shape::ZPP_Polygon _this30 = _this19;
HXDLIN( 189)															_this30->localCOMx = (_this30->localCOMx * t5);
HXDLIN( 189)															 ::zpp_nape::shape::ZPP_Polygon _this31 = _this19;
HXDLIN( 189)															_this31->localCOMy = (_this31->localCOMy * t5);
            														}
            													}
            												}
            											}
HXDLIN( 189)											if (hx::IsNotNull( _this18->wrap_localCOM )) {
HXLINE( 189)												_this18->wrap_localCOM->zpp_inner->x = _this18->localCOMx;
HXDLIN( 189)												_this18->wrap_localCOM->zpp_inner->y = _this18->localCOMy;
            											}
            										}
HXDLIN( 189)										{
HXLINE( 189)											 ::zpp_nape::phys::ZPP_Body _this32 = _this18->body;
HXDLIN( 189)											if (_this32->zip_axis) {
HXLINE( 189)												_this32->zip_axis = false;
HXDLIN( 189)												{
HXLINE( 189)													_this32->axisx = ::Math_obj::sin(_this32->rot);
HXDLIN( 189)													_this32->axisy = ::Math_obj::cos(_this32->rot);
            												}
            											}
            										}
HXDLIN( 189)										{
HXLINE( 189)											_this18->worldCOMx = (_this18->body->posx + ((_this18->body->axisy * _this18->localCOMx) - (_this18->body->axisx * _this18->localCOMy)));
HXDLIN( 189)											_this18->worldCOMy = (_this18->body->posy + ((_this18->localCOMx * _this18->body->axisx) + (_this18->localCOMy * _this18->body->axisy)));
            										}
            									}
            								}
HXDLIN( 189)								Float rx1 = _this18->radius;
HXDLIN( 189)								Float ry1 = _this18->radius;
HXDLIN( 189)								{
HXLINE( 189)									_this18->aabb->minx = (_this18->worldCOMx - rx1);
HXDLIN( 189)									_this18->aabb->miny = (_this18->worldCOMy - ry1);
            								}
HXDLIN( 189)								{
HXLINE( 189)									_this18->aabb->maxx = (_this18->worldCOMx + rx1);
HXDLIN( 189)									_this18->aabb->maxy = (_this18->worldCOMy + ry1);
            								}
            							}
            							else {
HXLINE( 189)								 ::zpp_nape::shape::ZPP_Polygon _this33 = shape->polygon;
HXDLIN( 189)								if (_this33->zip_gverts) {
HXLINE( 189)									if (hx::IsNotNull( _this33->body )) {
HXLINE( 189)										_this33->zip_gverts = false;
HXDLIN( 189)										_this33->validate_lverts();
HXDLIN( 189)										{
HXLINE( 189)											 ::zpp_nape::phys::ZPP_Body _this34 = _this33->body;
HXDLIN( 189)											if (_this34->zip_axis) {
HXLINE( 189)												_this34->zip_axis = false;
HXDLIN( 189)												{
HXLINE( 189)													_this34->axisx = ::Math_obj::sin(_this34->rot);
HXDLIN( 189)													_this34->axisy = ::Math_obj::cos(_this34->rot);
            												}
            											}
            										}
HXDLIN( 189)										 ::zpp_nape::geom::ZPP_Vec2 li1 = _this33->lverts->next;
HXDLIN( 189)										{
HXLINE( 189)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = _this33->gverts->next;
HXDLIN( 189)											while(hx::IsNotNull( cx_ite4 )){
HXLINE( 189)												 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite4;
HXDLIN( 189)												{
HXLINE( 189)													 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN( 189)													li1 = li1->next;
HXDLIN( 189)													{
HXLINE( 189)														g1->x = (_this33->body->posx + ((_this33->body->axisy * l1->x) - (_this33->body->axisx * l1->y)));
HXDLIN( 189)														g1->y = (_this33->body->posy + ((l1->x * _this33->body->axisx) + (l1->y * _this33->body->axisy)));
            													}
            												}
HXDLIN( 189)												cx_ite4 = cx_ite4->next;
            											}
            										}
            									}
            								}
HXDLIN( 189)								if (hx::IsNull( _this33->lverts->next )) {
HXLINE( 189)									HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            								}
HXDLIN( 189)								 ::zpp_nape::geom::ZPP_Vec2 p01 = _this33->gverts->next;
HXDLIN( 189)								{
HXLINE( 189)									_this33->aabb->minx = p01->x;
HXDLIN( 189)									_this33->aabb->miny = p01->y;
            								}
HXDLIN( 189)								{
HXLINE( 189)									_this33->aabb->maxx = p01->x;
HXDLIN( 189)									_this33->aabb->maxy = p01->y;
            								}
HXDLIN( 189)								{
HXLINE( 189)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite5 = _this33->gverts->next->next;
HXDLIN( 189)									while(hx::IsNotNull( cx_ite5 )){
HXLINE( 189)										 ::zpp_nape::geom::ZPP_Vec2 p1 = cx_ite5;
HXDLIN( 189)										{
HXLINE( 189)											if ((p1->x < _this33->aabb->minx)) {
HXLINE( 189)												_this33->aabb->minx = p1->x;
            											}
HXDLIN( 189)											if ((p1->x > _this33->aabb->maxx)) {
HXLINE( 189)												_this33->aabb->maxx = p1->x;
            											}
HXDLIN( 189)											if ((p1->y < _this33->aabb->miny)) {
HXLINE( 189)												_this33->aabb->miny = p1->y;
            											}
HXDLIN( 189)											if ((p1->y > _this33->aabb->maxy)) {
HXLINE( 189)												_this33->aabb->maxy = p1->y;
            											}
            										}
HXDLIN( 189)										cx_ite5 = cx_ite5->next;
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 189)				bool sync;
HXDLIN( 189)				bool sync1;
HXDLIN( 189)				if ((shape->body->type == 1)) {
HXLINE( 189)					sync1 = false;
            				}
            				else {
HXLINE( 189)					sync1 = !(shape->body->component->sleeping);
            				}
HXDLIN( 189)				if ((node->dyn == sync1)) {
HXLINE( 189)					 ::zpp_nape::geom::ZPP_AABB _this35 = node->aabb;
HXDLIN( 189)					 ::zpp_nape::geom::ZPP_AABB x = shape->aabb;
HXDLIN( 189)					bool sync2;
HXDLIN( 189)					bool sync3;
HXDLIN( 189)					bool sync4;
HXDLIN( 189)					if ((x->minx >= _this35->minx)) {
HXLINE( 189)						sync4 = (x->miny >= _this35->miny);
            					}
            					else {
HXLINE( 189)						sync4 = false;
            					}
HXDLIN( 189)					if (sync4) {
HXLINE( 189)						sync3 = (x->maxx <= _this35->maxx);
            					}
            					else {
HXLINE( 189)						sync3 = false;
            					}
HXDLIN( 189)					if (sync3) {
HXLINE( 189)						sync2 = (x->maxy <= _this35->maxy);
            					}
            					else {
HXLINE( 189)						sync2 = false;
            					}
HXDLIN( 189)					sync = !(sync2);
            				}
            				else {
HXLINE( 189)					sync = true;
            				}
HXDLIN( 189)				if (sync) {
HXLINE( 189)					node->synced = true;
HXDLIN( 189)					{
HXLINE( 189)						node->snext = _this17->syncs;
HXDLIN( 189)						_this17->syncs = node;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,sync,(void))

void ZPP_Broadphase_obj::broadphase( ::zpp_nape::space::ZPP_Space space,bool discrete){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_192_broadphase)
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Broadphase_obj,broadphase,(void))

void ZPP_Broadphase_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_201_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Broadphase_obj,clear,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_203_shapesUnderPoint)
HXDLIN( 203)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,shapesUnderPoint,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_206_bodiesUnderPoint)
HXDLIN( 206)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,bodiesUnderPoint,return )

void ZPP_Broadphase_obj::updateAABBShape( ::zpp_nape::geom::ZPP_AABB aabb){
            	HX_GC_STACKFRAME(&_hx_pos_771aa6e17aed28f8_210_updateAABBShape)
HXLINE( 211)		if (hx::IsNull( this->aabbShape )) {
HXLINE( 212)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE( 212)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 212)				::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 212)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 212)			 ::nape::phys::Body body =  ::nape::phys::Body_obj::__alloc( HX_CTX ,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC,null());
HXLINE( 213)			{
HXLINE( 213)				 ::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;
HXDLIN( 213)				 ::nape::shape::Shape obj = (this->aabbShape =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,::nape::shape::Polygon_obj::rect(aabb->minx,aabb->miny,(aabb->maxx - aabb->minx),(aabb->maxy - aabb->miny),null()),null(),null()));
HXDLIN( 213)				if (_this->zpp_inner->reverse_flag) {
HXLINE( 213)					_this->push(obj);
            				}
            				else {
HXLINE( 213)					_this->unshift(obj);
            				}
            			}
            		}
            		else {
HXLINE( 216)			 ::zpp_nape::geom::ZPP_AABB ab = this->aabbShape->zpp_inner->aabb;
HXLINE( 217)			Float sx = ((aabb->maxx - aabb->minx) / (ab->maxx - ab->minx));
HXLINE( 218)			Float sy = ((aabb->maxy - aabb->miny) / (ab->maxy - ab->miny));
HXLINE( 219)			if (hx::IsNull( this->matrix )) {
HXLINE( 219)				this->matrix =  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 220)			{
HXLINE( 220)				 ::nape::geom::Mat23 _this1 = this->matrix;
HXDLIN( 220)				{
HXLINE( 220)					if ((sx != sx)) {
HXLINE( 220)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 220)					_this1->zpp_inner->a = sx;
HXDLIN( 220)					{
HXLINE( 220)						 ::zpp_nape::geom::ZPP_Mat23 _this2 = _this1->zpp_inner;
HXDLIN( 220)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 220)							_this2->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 221)			{
HXLINE( 221)				 ::nape::geom::Mat23 _this3 = this->matrix;
HXDLIN( 221)				 ::nape::geom::Mat23 _this4 = this->matrix;
HXDLIN( 221)				{
HXLINE( 221)					_this4->zpp_inner->c = ( (Float)(0) );
HXDLIN( 221)					{
HXLINE( 221)						 ::zpp_nape::geom::ZPP_Mat23 _this5 = _this4->zpp_inner;
HXDLIN( 221)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 221)							_this5->_invalidate();
            						}
            					}
            				}
HXDLIN( 221)				Float b = _this4->zpp_inner->c;
HXDLIN( 221)				{
HXLINE( 221)					if ((b != b)) {
HXLINE( 221)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 221)					_this3->zpp_inner->b = b;
HXDLIN( 221)					{
HXLINE( 221)						 ::zpp_nape::geom::ZPP_Mat23 _this6 = _this3->zpp_inner;
HXDLIN( 221)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 221)							_this6->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 222)			{
HXLINE( 222)				 ::nape::geom::Mat23 _this7 = this->matrix;
HXDLIN( 222)				{
HXLINE( 222)					if ((sy != sy)) {
HXLINE( 222)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 222)					_this7->zpp_inner->d = sy;
HXDLIN( 222)					{
HXLINE( 222)						 ::zpp_nape::geom::ZPP_Mat23 _this8 = _this7->zpp_inner;
HXDLIN( 222)						if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 222)							_this8->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 223)			{
HXLINE( 223)				 ::nape::geom::Mat23 _this9 = this->matrix;
HXDLIN( 223)				Float tx = (aabb->minx - (sx * ab->minx));
HXDLIN( 223)				{
HXLINE( 223)					if ((tx != tx)) {
HXLINE( 223)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("tx",84,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 223)					_this9->zpp_inner->tx = tx;
HXDLIN( 223)					{
HXLINE( 223)						 ::zpp_nape::geom::ZPP_Mat23 _this10 = _this9->zpp_inner;
HXDLIN( 223)						if (hx::IsNotNull( _this10->_invalidate )) {
HXLINE( 223)							_this10->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 224)			{
HXLINE( 224)				 ::nape::geom::Mat23 _this11 = this->matrix;
HXDLIN( 224)				Float ty = (aabb->miny - (sy * ab->miny));
HXDLIN( 224)				{
HXLINE( 224)					if ((ty != ty)) {
HXLINE( 224)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("ty",85,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 224)					_this11->zpp_inner->ty = ty;
HXDLIN( 224)					{
HXLINE( 224)						 ::zpp_nape::geom::ZPP_Mat23 _this12 = _this11->zpp_inner;
HXDLIN( 224)						if (hx::IsNotNull( _this12->_invalidate )) {
HXLINE( 224)							_this12->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 225)			this->aabbShape->transform(this->matrix);
            		}
HXLINE( 227)		{
HXLINE( 227)			 ::zpp_nape::shape::ZPP_Shape _this13 = this->aabbShape->zpp_inner;
HXDLIN( 227)			if (_this13->zip_aabb) {
HXLINE( 227)				if (hx::IsNotNull( _this13->body )) {
HXLINE( 227)					_this13->zip_aabb = false;
HXDLIN( 227)					if ((_this13->type == 0)) {
HXLINE( 227)						 ::zpp_nape::shape::ZPP_Circle _this14 = _this13->circle;
HXDLIN( 227)						if (_this14->zip_worldCOM) {
HXLINE( 227)							if (hx::IsNotNull( _this14->body )) {
HXLINE( 227)								_this14->zip_worldCOM = false;
HXDLIN( 227)								if (_this14->zip_localCOM) {
HXLINE( 227)									_this14->zip_localCOM = false;
HXDLIN( 227)									if ((_this14->type == 1)) {
HXLINE( 227)										 ::zpp_nape::shape::ZPP_Polygon _this15 = _this14->polygon;
HXDLIN( 227)										if (hx::IsNull( _this15->lverts->next )) {
HXLINE( 227)											HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            										}
HXDLIN( 227)										if (hx::IsNull( _this15->lverts->next->next )) {
HXLINE( 227)											_this15->localCOMx = _this15->lverts->next->x;
HXDLIN( 227)											_this15->localCOMy = _this15->lverts->next->y;
            										}
            										else {
HXLINE( 227)											if (hx::IsNull( _this15->lverts->next->next->next )) {
HXLINE( 227)												{
HXLINE( 227)													_this15->localCOMx = _this15->lverts->next->x;
HXDLIN( 227)													_this15->localCOMy = _this15->lverts->next->y;
            												}
HXDLIN( 227)												{
HXLINE( 227)													Float t = ((Float)1.0);
HXDLIN( 227)													 ::zpp_nape::shape::ZPP_Polygon _this16 = _this15;
HXDLIN( 227)													_this16->localCOMx = (_this16->localCOMx + (_this15->lverts->next->next->x * t));
HXDLIN( 227)													 ::zpp_nape::shape::ZPP_Polygon _this17 = _this15;
HXDLIN( 227)													_this17->localCOMy = (_this17->localCOMy + (_this15->lverts->next->next->y * t));
            												}
HXDLIN( 227)												{
HXLINE( 227)													Float t1 = ((Float)0.5);
HXDLIN( 227)													 ::zpp_nape::shape::ZPP_Polygon _this18 = _this15;
HXDLIN( 227)													_this18->localCOMx = (_this18->localCOMx * t1);
HXDLIN( 227)													 ::zpp_nape::shape::ZPP_Polygon _this19 = _this15;
HXDLIN( 227)													_this19->localCOMy = (_this19->localCOMy * t1);
            												}
            											}
            											else {
HXLINE( 227)												{
HXLINE( 227)													_this15->localCOMx = ( (Float)(0) );
HXDLIN( 227)													_this15->localCOMy = ( (Float)(0) );
            												}
HXDLIN( 227)												Float area = ((Float)0.0);
HXDLIN( 227)												{
HXLINE( 227)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this15->lverts->next;
HXDLIN( 227)													 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 227)													cx_ite = cx_ite->next;
HXDLIN( 227)													 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 227)													cx_ite = cx_ite->next;
HXDLIN( 227)													while(hx::IsNotNull( cx_ite )){
HXLINE( 227)														 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 227)														{
HXLINE( 227)															area = (area + (v->x * (w->y - u->y)));
HXDLIN( 227)															Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 227)															 ::zpp_nape::shape::ZPP_Polygon _this20 = _this15;
HXDLIN( 227)															_this20->localCOMx = (_this20->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 227)															 ::zpp_nape::shape::ZPP_Polygon _this21 = _this15;
HXDLIN( 227)															_this21->localCOMy = (_this21->localCOMy + ((v->y + w->y) * cf));
            														}
HXDLIN( 227)														u = v;
HXDLIN( 227)														v = w;
HXDLIN( 227)														cx_ite = cx_ite->next;
            													}
HXDLIN( 227)													cx_ite = _this15->lverts->next;
HXDLIN( 227)													 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 227)													{
HXLINE( 227)														area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 227)														Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 227)														 ::zpp_nape::shape::ZPP_Polygon _this22 = _this15;
HXDLIN( 227)														_this22->localCOMx = (_this22->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 227)														 ::zpp_nape::shape::ZPP_Polygon _this23 = _this15;
HXDLIN( 227)														_this23->localCOMy = (_this23->localCOMy + ((v->y + w1->y) * cf1));
            													}
HXDLIN( 227)													u = v;
HXDLIN( 227)													v = w1;
HXDLIN( 227)													cx_ite = cx_ite->next;
HXDLIN( 227)													 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 227)													{
HXLINE( 227)														area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 227)														Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 227)														 ::zpp_nape::shape::ZPP_Polygon _this24 = _this15;
HXDLIN( 227)														_this24->localCOMx = (_this24->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 227)														 ::zpp_nape::shape::ZPP_Polygon _this25 = _this15;
HXDLIN( 227)														_this25->localCOMy = (_this25->localCOMy + ((v->y + w2->y) * cf2));
            													}
            												}
HXDLIN( 227)												area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 227)												{
HXLINE( 227)													Float t2 = area;
HXDLIN( 227)													 ::zpp_nape::shape::ZPP_Polygon _this26 = _this15;
HXDLIN( 227)													_this26->localCOMx = (_this26->localCOMx * t2);
HXDLIN( 227)													 ::zpp_nape::shape::ZPP_Polygon _this27 = _this15;
HXDLIN( 227)													_this27->localCOMy = (_this27->localCOMy * t2);
            												}
            											}
            										}
            									}
HXDLIN( 227)									if (hx::IsNotNull( _this14->wrap_localCOM )) {
HXLINE( 227)										_this14->wrap_localCOM->zpp_inner->x = _this14->localCOMx;
HXDLIN( 227)										_this14->wrap_localCOM->zpp_inner->y = _this14->localCOMy;
            									}
            								}
HXDLIN( 227)								{
HXLINE( 227)									 ::zpp_nape::phys::ZPP_Body _this28 = _this14->body;
HXDLIN( 227)									if (_this28->zip_axis) {
HXLINE( 227)										_this28->zip_axis = false;
HXDLIN( 227)										{
HXLINE( 227)											_this28->axisx = ::Math_obj::sin(_this28->rot);
HXDLIN( 227)											_this28->axisy = ::Math_obj::cos(_this28->rot);
            										}
            									}
            								}
HXDLIN( 227)								{
HXLINE( 227)									_this14->worldCOMx = (_this14->body->posx + ((_this14->body->axisy * _this14->localCOMx) - (_this14->body->axisx * _this14->localCOMy)));
HXDLIN( 227)									_this14->worldCOMy = (_this14->body->posy + ((_this14->localCOMx * _this14->body->axisx) + (_this14->localCOMy * _this14->body->axisy)));
            								}
            							}
            						}
HXDLIN( 227)						Float rx = _this14->radius;
HXDLIN( 227)						Float ry = _this14->radius;
HXDLIN( 227)						{
HXLINE( 227)							_this14->aabb->minx = (_this14->worldCOMx - rx);
HXDLIN( 227)							_this14->aabb->miny = (_this14->worldCOMy - ry);
            						}
HXDLIN( 227)						{
HXLINE( 227)							_this14->aabb->maxx = (_this14->worldCOMx + rx);
HXDLIN( 227)							_this14->aabb->maxy = (_this14->worldCOMy + ry);
            						}
            					}
            					else {
HXLINE( 227)						 ::zpp_nape::shape::ZPP_Polygon _this29 = _this13->polygon;
HXDLIN( 227)						if (_this29->zip_gverts) {
HXLINE( 227)							if (hx::IsNotNull( _this29->body )) {
HXLINE( 227)								_this29->zip_gverts = false;
HXDLIN( 227)								_this29->validate_lverts();
HXDLIN( 227)								{
HXLINE( 227)									 ::zpp_nape::phys::ZPP_Body _this30 = _this29->body;
HXDLIN( 227)									if (_this30->zip_axis) {
HXLINE( 227)										_this30->zip_axis = false;
HXDLIN( 227)										{
HXLINE( 227)											_this30->axisx = ::Math_obj::sin(_this30->rot);
HXDLIN( 227)											_this30->axisy = ::Math_obj::cos(_this30->rot);
            										}
            									}
            								}
HXDLIN( 227)								 ::zpp_nape::geom::ZPP_Vec2 li = _this29->lverts->next;
HXDLIN( 227)								{
HXLINE( 227)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this29->gverts->next;
HXDLIN( 227)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 227)										 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN( 227)										{
HXLINE( 227)											 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 227)											li = li->next;
HXDLIN( 227)											{
HXLINE( 227)												g->x = (_this29->body->posx + ((_this29->body->axisy * l->x) - (_this29->body->axisx * l->y)));
HXDLIN( 227)												g->y = (_this29->body->posy + ((l->x * _this29->body->axisx) + (l->y * _this29->body->axisy)));
            											}
            										}
HXDLIN( 227)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 227)						if (hx::IsNull( _this29->lverts->next )) {
HXLINE( 227)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            						}
HXDLIN( 227)						 ::zpp_nape::geom::ZPP_Vec2 p0 = _this29->gverts->next;
HXDLIN( 227)						{
HXLINE( 227)							_this29->aabb->minx = p0->x;
HXDLIN( 227)							_this29->aabb->miny = p0->y;
            						}
HXDLIN( 227)						{
HXLINE( 227)							_this29->aabb->maxx = p0->x;
HXDLIN( 227)							_this29->aabb->maxy = p0->y;
            						}
HXDLIN( 227)						{
HXLINE( 227)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this29->gverts->next->next;
HXDLIN( 227)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 227)								 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN( 227)								{
HXLINE( 227)									if ((p->x < _this29->aabb->minx)) {
HXLINE( 227)										_this29->aabb->minx = p->x;
            									}
HXDLIN( 227)									if ((p->x > _this29->aabb->maxx)) {
HXLINE( 227)										_this29->aabb->maxx = p->x;
            									}
HXDLIN( 227)									if ((p->y < _this29->aabb->miny)) {
HXLINE( 227)										_this29->aabb->miny = p->y;
            									}
HXDLIN( 227)									if ((p->y > _this29->aabb->maxy)) {
HXLINE( 227)										_this29->aabb->maxy = p->y;
            									}
            								}
HXDLIN( 227)								cx_ite2 = cx_ite2->next;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 228)		{
HXLINE( 228)			 ::zpp_nape::shape::ZPP_Polygon _this31 = this->aabbShape->zpp_inner->polygon;
HXDLIN( 228)			if (_this31->zip_gaxi) {
HXLINE( 228)				if (hx::IsNotNull( _this31->body )) {
HXLINE( 228)					_this31->zip_gaxi = false;
HXDLIN( 228)					_this31->validate_laxi();
HXDLIN( 228)					{
HXLINE( 228)						 ::zpp_nape::phys::ZPP_Body _this32 = _this31->body;
HXDLIN( 228)						if (_this32->zip_axis) {
HXLINE( 228)							_this32->zip_axis = false;
HXDLIN( 228)							{
HXLINE( 228)								_this32->axisx = ::Math_obj::sin(_this32->rot);
HXDLIN( 228)								_this32->axisy = ::Math_obj::cos(_this32->rot);
            							}
            						}
            					}
HXDLIN( 228)					if (_this31->zip_gverts) {
HXLINE( 228)						if (hx::IsNotNull( _this31->body )) {
HXLINE( 228)							_this31->zip_gverts = false;
HXDLIN( 228)							_this31->validate_lverts();
HXDLIN( 228)							{
HXLINE( 228)								 ::zpp_nape::phys::ZPP_Body _this33 = _this31->body;
HXDLIN( 228)								if (_this33->zip_axis) {
HXLINE( 228)									_this33->zip_axis = false;
HXDLIN( 228)									{
HXLINE( 228)										_this33->axisx = ::Math_obj::sin(_this33->rot);
HXDLIN( 228)										_this33->axisy = ::Math_obj::cos(_this33->rot);
            									}
            								}
            							}
HXDLIN( 228)							 ::zpp_nape::geom::ZPP_Vec2 li1 = _this31->lverts->next;
HXDLIN( 228)							{
HXLINE( 228)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this31->gverts->next;
HXDLIN( 228)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 228)									 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite3;
HXDLIN( 228)									{
HXLINE( 228)										 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN( 228)										li1 = li1->next;
HXDLIN( 228)										{
HXLINE( 228)											g1->x = (_this31->body->posx + ((_this31->body->axisy * l1->x) - (_this31->body->axisx * l1->y)));
HXDLIN( 228)											g1->y = (_this31->body->posy + ((l1->x * _this31->body->axisx) + (l1->y * _this31->body->axisy)));
            										}
            									}
HXDLIN( 228)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
            					}
HXDLIN( 228)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this31->edges->head;
HXDLIN( 228)					{
HXLINE( 228)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = _this31->gverts->next;
HXDLIN( 228)						 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite4;
HXDLIN( 228)						cx_ite4 = cx_ite4->next;
HXDLIN( 228)						while(hx::IsNotNull( cx_ite4 )){
HXLINE( 228)							 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite4;
HXDLIN( 228)							{
HXLINE( 228)								 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN( 228)								ite = ite->next;
HXDLIN( 228)								e->gp0 = u1;
HXDLIN( 228)								e->gp1 = v1;
HXDLIN( 228)								{
HXLINE( 228)									e->gnormx = ((_this31->body->axisy * e->lnormx) - (_this31->body->axisx * e->lnormy));
HXDLIN( 228)									e->gnormy = ((e->lnormx * _this31->body->axisx) + (e->lnormy * _this31->body->axisy));
            								}
HXDLIN( 228)								e->gprojection = (((_this31->body->posx * e->gnormx) + (_this31->body->posy * e->gnormy)) + e->lprojection);
HXDLIN( 228)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE( 228)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN( 228)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN( 228)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN( 228)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN( 228)							u1 = v1;
HXDLIN( 228)							cx_ite4 = cx_ite4->next;
            						}
HXDLIN( 228)						 ::zpp_nape::geom::ZPP_Vec2 v2 = _this31->gverts->next;
HXDLIN( 228)						{
HXLINE( 228)							 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN( 228)							ite = ite->next;
HXDLIN( 228)							e1->gp0 = u1;
HXDLIN( 228)							e1->gp1 = v2;
HXDLIN( 228)							{
HXLINE( 228)								e1->gnormx = ((_this31->body->axisy * e1->lnormx) - (_this31->body->axisx * e1->lnormy));
HXDLIN( 228)								e1->gnormy = ((e1->lnormx * _this31->body->axisx) + (e1->lnormy * _this31->body->axisy));
            							}
HXDLIN( 228)							e1->gprojection = (((_this31->body->posx * e1->gnormx) + (_this31->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 228)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE( 228)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN( 228)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN( 228)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN( 228)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,updateAABBShape,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_231_shapesInAABB)
HXDLIN( 231)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Broadphase_obj,shapesInAABB,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_234_bodiesInAABB)
HXDLIN( 234)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Broadphase_obj,bodiesInAABB,return )

void ZPP_Broadphase_obj::updateCircShape(Float x,Float y,Float r){
            	HX_GC_STACKFRAME(&_hx_pos_771aa6e17aed28f8_237_updateCircShape)
HXLINE( 238)		if (hx::IsNull( this->circShape )) {
HXLINE( 239)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE( 239)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 239)				::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 239)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 239)			 ::nape::phys::Body body =  ::nape::phys::Body_obj::__alloc( HX_CTX ,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC,null());
HXLINE( 240)			{
HXLINE( 240)				 ::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;
HXDLIN( 240)				bool obj;
HXDLIN( 240)				if ((x == x)) {
HXLINE( 240)					obj = (y != y);
            				}
            				else {
HXLINE( 240)					obj = true;
            				}
HXDLIN( 240)				if (obj) {
HXLINE( 240)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 240)				 ::nape::geom::Vec2 ret;
HXDLIN( 240)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 240)					ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 240)					ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 240)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 240)					ret->zpp_pool = null();
HXDLIN( 240)					ret->zpp_disp = false;
HXDLIN( 240)					if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 240)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            					}
            				}
HXDLIN( 240)				if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 240)					 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 240)					{
HXLINE( 240)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 240)							ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 240)							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 240)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 240)							ret1->next = null();
            						}
HXDLIN( 240)						ret1->weak = false;
            					}
HXDLIN( 240)					ret1->_immutable = false;
HXDLIN( 240)					{
HXLINE( 240)						ret1->x = x;
HXDLIN( 240)						ret1->y = y;
            					}
HXDLIN( 240)					ret->zpp_inner = ret1;
HXDLIN( 240)					ret->zpp_inner->outer = ret;
            				}
            				else {
HXLINE( 240)					bool obj1;
HXDLIN( 240)					if (hx::IsNotNull( ret )) {
HXLINE( 240)						obj1 = ret->zpp_disp;
            					}
            					else {
HXLINE( 240)						obj1 = false;
            					}
HXDLIN( 240)					if (obj1) {
HXLINE( 240)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 240)					{
HXLINE( 240)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 240)						if (_this1->_immutable) {
HXLINE( 240)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 240)						if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 240)							_this1->_isimmutable();
            						}
            					}
HXDLIN( 240)					bool obj2;
HXDLIN( 240)					if ((x == x)) {
HXLINE( 240)						obj2 = (y != y);
            					}
            					else {
HXLINE( 240)						obj2 = true;
            					}
HXDLIN( 240)					if (obj2) {
HXLINE( 240)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 240)					bool obj3;
HXDLIN( 240)					bool obj4;
HXDLIN( 240)					if (hx::IsNotNull( ret )) {
HXLINE( 240)						obj4 = ret->zpp_disp;
            					}
            					else {
HXLINE( 240)						obj4 = false;
            					}
HXDLIN( 240)					if (obj4) {
HXLINE( 240)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 240)					{
HXLINE( 240)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 240)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 240)							_this2->_validate();
            						}
            					}
HXDLIN( 240)					if ((ret->zpp_inner->x == x)) {
HXLINE( 240)						bool obj5;
HXDLIN( 240)						if (hx::IsNotNull( ret )) {
HXLINE( 240)							obj5 = ret->zpp_disp;
            						}
            						else {
HXLINE( 240)							obj5 = false;
            						}
HXDLIN( 240)						if (obj5) {
HXLINE( 240)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 240)						{
HXLINE( 240)							 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 240)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 240)								_this3->_validate();
            							}
            						}
HXDLIN( 240)						obj3 = (ret->zpp_inner->y == y);
            					}
            					else {
HXLINE( 240)						obj3 = false;
            					}
HXDLIN( 240)					if (!(obj3)) {
HXLINE( 240)						{
HXLINE( 240)							ret->zpp_inner->x = x;
HXDLIN( 240)							ret->zpp_inner->y = y;
            						}
HXDLIN( 240)						{
HXLINE( 240)							 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret->zpp_inner;
HXDLIN( 240)							if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 240)								_this4->_invalidate(_this4);
            							}
            						}
            					}
            				}
HXDLIN( 240)				ret->zpp_inner->weak = false;
HXDLIN( 240)				 ::nape::shape::Shape obj6 = (this->circShape =  ::nape::shape::Circle_obj::__alloc( HX_CTX ,r,ret,null(),null()));
HXDLIN( 240)				if (_this->zpp_inner->reverse_flag) {
HXLINE( 240)					_this->push(obj6);
            				}
            				else {
HXLINE( 240)					_this->unshift(obj6);
            				}
            			}
            		}
            		else {
HXLINE( 243)			 ::zpp_nape::shape::ZPP_Circle ci = this->circShape->zpp_inner->circle;
HXLINE( 244)			Float ss = (r / ci->radius);
HXLINE( 245)			if (hx::IsNull( this->matrix )) {
HXLINE( 245)				this->matrix =  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 246)			{
HXLINE( 246)				 ::nape::geom::Mat23 _this5 = this->matrix;
HXDLIN( 246)				 ::nape::geom::Mat23 _this6 = this->matrix;
HXDLIN( 246)				{
HXLINE( 246)					if ((ss != ss)) {
HXLINE( 246)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("d",64,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 246)					_this6->zpp_inner->d = ss;
HXDLIN( 246)					{
HXLINE( 246)						 ::zpp_nape::geom::ZPP_Mat23 _this7 = _this6->zpp_inner;
HXDLIN( 246)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 246)							_this7->_invalidate();
            						}
            					}
            				}
HXDLIN( 246)				Float a = _this6->zpp_inner->d;
HXDLIN( 246)				{
HXLINE( 246)					if ((a != a)) {
HXLINE( 246)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("a",61,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 246)					_this5->zpp_inner->a = a;
HXDLIN( 246)					{
HXLINE( 246)						 ::zpp_nape::geom::ZPP_Mat23 _this8 = _this5->zpp_inner;
HXDLIN( 246)						if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 246)							_this8->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 247)			{
HXLINE( 247)				 ::nape::geom::Mat23 _this9 = this->matrix;
HXDLIN( 247)				 ::nape::geom::Mat23 _this10 = this->matrix;
HXDLIN( 247)				{
HXLINE( 247)					_this10->zpp_inner->c = ( (Float)(0) );
HXDLIN( 247)					{
HXLINE( 247)						 ::zpp_nape::geom::ZPP_Mat23 _this11 = _this10->zpp_inner;
HXDLIN( 247)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 247)							_this11->_invalidate();
            						}
            					}
            				}
HXDLIN( 247)				Float b = _this10->zpp_inner->c;
HXDLIN( 247)				{
HXLINE( 247)					if ((b != b)) {
HXLINE( 247)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("b",62,00,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 247)					_this9->zpp_inner->b = b;
HXDLIN( 247)					{
HXLINE( 247)						 ::zpp_nape::geom::ZPP_Mat23 _this12 = _this9->zpp_inner;
HXDLIN( 247)						if (hx::IsNotNull( _this12->_invalidate )) {
HXLINE( 247)							_this12->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 248)			{
HXLINE( 248)				 ::nape::geom::Mat23 _this13 = this->matrix;
HXDLIN( 248)				Float tx = (x - (ss * ci->localCOMx));
HXDLIN( 248)				{
HXLINE( 248)					if ((tx != tx)) {
HXLINE( 248)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("tx",84,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 248)					_this13->zpp_inner->tx = tx;
HXDLIN( 248)					{
HXLINE( 248)						 ::zpp_nape::geom::ZPP_Mat23 _this14 = _this13->zpp_inner;
HXDLIN( 248)						if (hx::IsNotNull( _this14->_invalidate )) {
HXLINE( 248)							_this14->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 249)			{
HXLINE( 249)				 ::nape::geom::Mat23 _this15 = this->matrix;
HXDLIN( 249)				Float ty = (y - (ss * ci->localCOMy));
HXDLIN( 249)				{
HXLINE( 249)					if ((ty != ty)) {
HXLINE( 249)						HX_STACK_DO_THROW(((HX_("Error: Mat23::",b3,b0,89,78) + HX_("ty",85,65,00,00)) + HX_(" cannot be NaN",1b,77,40,38)));
            					}
HXDLIN( 249)					_this15->zpp_inner->ty = ty;
HXDLIN( 249)					{
HXLINE( 249)						 ::zpp_nape::geom::ZPP_Mat23 _this16 = _this15->zpp_inner;
HXDLIN( 249)						if (hx::IsNotNull( _this16->_invalidate )) {
HXLINE( 249)							_this16->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 250)			this->circShape->transform(this->matrix);
            		}
HXLINE( 252)		{
HXLINE( 252)			 ::zpp_nape::shape::ZPP_Shape _this17 = this->circShape->zpp_inner;
HXDLIN( 252)			if (_this17->zip_aabb) {
HXLINE( 252)				if (hx::IsNotNull( _this17->body )) {
HXLINE( 252)					_this17->zip_aabb = false;
HXDLIN( 252)					if ((_this17->type == 0)) {
HXLINE( 252)						 ::zpp_nape::shape::ZPP_Circle _this18 = _this17->circle;
HXDLIN( 252)						if (_this18->zip_worldCOM) {
HXLINE( 252)							if (hx::IsNotNull( _this18->body )) {
HXLINE( 252)								_this18->zip_worldCOM = false;
HXDLIN( 252)								if (_this18->zip_localCOM) {
HXLINE( 252)									_this18->zip_localCOM = false;
HXDLIN( 252)									if ((_this18->type == 1)) {
HXLINE( 252)										 ::zpp_nape::shape::ZPP_Polygon _this19 = _this18->polygon;
HXDLIN( 252)										if (hx::IsNull( _this19->lverts->next )) {
HXLINE( 252)											HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            										}
HXDLIN( 252)										if (hx::IsNull( _this19->lverts->next->next )) {
HXLINE( 252)											_this19->localCOMx = _this19->lverts->next->x;
HXDLIN( 252)											_this19->localCOMy = _this19->lverts->next->y;
            										}
            										else {
HXLINE( 252)											if (hx::IsNull( _this19->lverts->next->next->next )) {
HXLINE( 252)												{
HXLINE( 252)													_this19->localCOMx = _this19->lverts->next->x;
HXDLIN( 252)													_this19->localCOMy = _this19->lverts->next->y;
            												}
HXDLIN( 252)												{
HXLINE( 252)													Float t = ((Float)1.0);
HXDLIN( 252)													 ::zpp_nape::shape::ZPP_Polygon _this20 = _this19;
HXDLIN( 252)													_this20->localCOMx = (_this20->localCOMx + (_this19->lverts->next->next->x * t));
HXDLIN( 252)													 ::zpp_nape::shape::ZPP_Polygon _this21 = _this19;
HXDLIN( 252)													_this21->localCOMy = (_this21->localCOMy + (_this19->lverts->next->next->y * t));
            												}
HXDLIN( 252)												{
HXLINE( 252)													Float t1 = ((Float)0.5);
HXDLIN( 252)													 ::zpp_nape::shape::ZPP_Polygon _this22 = _this19;
HXDLIN( 252)													_this22->localCOMx = (_this22->localCOMx * t1);
HXDLIN( 252)													 ::zpp_nape::shape::ZPP_Polygon _this23 = _this19;
HXDLIN( 252)													_this23->localCOMy = (_this23->localCOMy * t1);
            												}
            											}
            											else {
HXLINE( 252)												{
HXLINE( 252)													_this19->localCOMx = ( (Float)(0) );
HXDLIN( 252)													_this19->localCOMy = ( (Float)(0) );
            												}
HXDLIN( 252)												Float area = ((Float)0.0);
HXDLIN( 252)												{
HXLINE( 252)													 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this19->lverts->next;
HXDLIN( 252)													 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 252)													cx_ite = cx_ite->next;
HXDLIN( 252)													 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 252)													cx_ite = cx_ite->next;
HXDLIN( 252)													while(hx::IsNotNull( cx_ite )){
HXLINE( 252)														 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 252)														{
HXLINE( 252)															area = (area + (v->x * (w->y - u->y)));
HXDLIN( 252)															Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 252)															 ::zpp_nape::shape::ZPP_Polygon _this24 = _this19;
HXDLIN( 252)															_this24->localCOMx = (_this24->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 252)															 ::zpp_nape::shape::ZPP_Polygon _this25 = _this19;
HXDLIN( 252)															_this25->localCOMy = (_this25->localCOMy + ((v->y + w->y) * cf));
            														}
HXDLIN( 252)														u = v;
HXDLIN( 252)														v = w;
HXDLIN( 252)														cx_ite = cx_ite->next;
            													}
HXDLIN( 252)													cx_ite = _this19->lverts->next;
HXDLIN( 252)													 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 252)													{
HXLINE( 252)														area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 252)														Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 252)														 ::zpp_nape::shape::ZPP_Polygon _this26 = _this19;
HXDLIN( 252)														_this26->localCOMx = (_this26->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 252)														 ::zpp_nape::shape::ZPP_Polygon _this27 = _this19;
HXDLIN( 252)														_this27->localCOMy = (_this27->localCOMy + ((v->y + w1->y) * cf1));
            													}
HXDLIN( 252)													u = v;
HXDLIN( 252)													v = w1;
HXDLIN( 252)													cx_ite = cx_ite->next;
HXDLIN( 252)													 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 252)													{
HXLINE( 252)														area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 252)														Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 252)														 ::zpp_nape::shape::ZPP_Polygon _this28 = _this19;
HXDLIN( 252)														_this28->localCOMx = (_this28->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 252)														 ::zpp_nape::shape::ZPP_Polygon _this29 = _this19;
HXDLIN( 252)														_this29->localCOMy = (_this29->localCOMy + ((v->y + w2->y) * cf2));
            													}
            												}
HXDLIN( 252)												area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 252)												{
HXLINE( 252)													Float t2 = area;
HXDLIN( 252)													 ::zpp_nape::shape::ZPP_Polygon _this30 = _this19;
HXDLIN( 252)													_this30->localCOMx = (_this30->localCOMx * t2);
HXDLIN( 252)													 ::zpp_nape::shape::ZPP_Polygon _this31 = _this19;
HXDLIN( 252)													_this31->localCOMy = (_this31->localCOMy * t2);
            												}
            											}
            										}
            									}
HXDLIN( 252)									if (hx::IsNotNull( _this18->wrap_localCOM )) {
HXLINE( 252)										_this18->wrap_localCOM->zpp_inner->x = _this18->localCOMx;
HXDLIN( 252)										_this18->wrap_localCOM->zpp_inner->y = _this18->localCOMy;
            									}
            								}
HXDLIN( 252)								{
HXLINE( 252)									 ::zpp_nape::phys::ZPP_Body _this32 = _this18->body;
HXDLIN( 252)									if (_this32->zip_axis) {
HXLINE( 252)										_this32->zip_axis = false;
HXDLIN( 252)										{
HXLINE( 252)											_this32->axisx = ::Math_obj::sin(_this32->rot);
HXDLIN( 252)											_this32->axisy = ::Math_obj::cos(_this32->rot);
            										}
            									}
            								}
HXDLIN( 252)								{
HXLINE( 252)									_this18->worldCOMx = (_this18->body->posx + ((_this18->body->axisy * _this18->localCOMx) - (_this18->body->axisx * _this18->localCOMy)));
HXDLIN( 252)									_this18->worldCOMy = (_this18->body->posy + ((_this18->localCOMx * _this18->body->axisx) + (_this18->localCOMy * _this18->body->axisy)));
            								}
            							}
            						}
HXDLIN( 252)						Float rx = _this18->radius;
HXDLIN( 252)						Float ry = _this18->radius;
HXDLIN( 252)						{
HXLINE( 252)							_this18->aabb->minx = (_this18->worldCOMx - rx);
HXDLIN( 252)							_this18->aabb->miny = (_this18->worldCOMy - ry);
            						}
HXDLIN( 252)						{
HXLINE( 252)							_this18->aabb->maxx = (_this18->worldCOMx + rx);
HXDLIN( 252)							_this18->aabb->maxy = (_this18->worldCOMy + ry);
            						}
            					}
            					else {
HXLINE( 252)						 ::zpp_nape::shape::ZPP_Polygon _this33 = _this17->polygon;
HXDLIN( 252)						if (_this33->zip_gverts) {
HXLINE( 252)							if (hx::IsNotNull( _this33->body )) {
HXLINE( 252)								_this33->zip_gverts = false;
HXDLIN( 252)								_this33->validate_lverts();
HXDLIN( 252)								{
HXLINE( 252)									 ::zpp_nape::phys::ZPP_Body _this34 = _this33->body;
HXDLIN( 252)									if (_this34->zip_axis) {
HXLINE( 252)										_this34->zip_axis = false;
HXDLIN( 252)										{
HXLINE( 252)											_this34->axisx = ::Math_obj::sin(_this34->rot);
HXDLIN( 252)											_this34->axisy = ::Math_obj::cos(_this34->rot);
            										}
            									}
            								}
HXDLIN( 252)								 ::zpp_nape::geom::ZPP_Vec2 li = _this33->lverts->next;
HXDLIN( 252)								{
HXLINE( 252)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this33->gverts->next;
HXDLIN( 252)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 252)										 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN( 252)										{
HXLINE( 252)											 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 252)											li = li->next;
HXDLIN( 252)											{
HXLINE( 252)												g->x = (_this33->body->posx + ((_this33->body->axisy * l->x) - (_this33->body->axisx * l->y)));
HXDLIN( 252)												g->y = (_this33->body->posy + ((l->x * _this33->body->axisx) + (l->y * _this33->body->axisy)));
            											}
            										}
HXDLIN( 252)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 252)						if (hx::IsNull( _this33->lverts->next )) {
HXLINE( 252)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            						}
HXDLIN( 252)						 ::zpp_nape::geom::ZPP_Vec2 p0 = _this33->gverts->next;
HXDLIN( 252)						{
HXLINE( 252)							_this33->aabb->minx = p0->x;
HXDLIN( 252)							_this33->aabb->miny = p0->y;
            						}
HXDLIN( 252)						{
HXLINE( 252)							_this33->aabb->maxx = p0->x;
HXDLIN( 252)							_this33->aabb->maxy = p0->y;
            						}
HXDLIN( 252)						{
HXLINE( 252)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this33->gverts->next->next;
HXDLIN( 252)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 252)								 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN( 252)								{
HXLINE( 252)									if ((p->x < _this33->aabb->minx)) {
HXLINE( 252)										_this33->aabb->minx = p->x;
            									}
HXDLIN( 252)									if ((p->x > _this33->aabb->maxx)) {
HXLINE( 252)										_this33->aabb->maxx = p->x;
            									}
HXDLIN( 252)									if ((p->y < _this33->aabb->miny)) {
HXLINE( 252)										_this33->aabb->miny = p->y;
            									}
HXDLIN( 252)									if ((p->y > _this33->aabb->maxy)) {
HXLINE( 252)										_this33->aabb->maxy = p->y;
            									}
            								}
HXDLIN( 252)								cx_ite2 = cx_ite2->next;
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Broadphase_obj,updateCircShape,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_255_shapesInCircle)
HXDLIN( 255)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC6(ZPP_Broadphase_obj,shapesInCircle,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_258_bodiesInCircle)
HXDLIN( 258)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC6(ZPP_Broadphase_obj,bodiesInCircle,return )

void ZPP_Broadphase_obj::validateShape( ::zpp_nape::shape::ZPP_Shape s){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_260_validateShape)
HXLINE( 261)		if ((s->type == 1)) {
HXLINE( 261)			 ::zpp_nape::shape::ZPP_Polygon _this = s->polygon;
HXDLIN( 261)			if (_this->zip_gaxi) {
HXLINE( 261)				if (hx::IsNotNull( _this->body )) {
HXLINE( 261)					_this->zip_gaxi = false;
HXDLIN( 261)					_this->validate_laxi();
HXDLIN( 261)					{
HXLINE( 261)						 ::zpp_nape::phys::ZPP_Body _this1 = _this->body;
HXDLIN( 261)						if (_this1->zip_axis) {
HXLINE( 261)							_this1->zip_axis = false;
HXDLIN( 261)							{
HXLINE( 261)								_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN( 261)								_this1->axisy = ::Math_obj::cos(_this1->rot);
            							}
            						}
            					}
HXDLIN( 261)					if (_this->zip_gverts) {
HXLINE( 261)						if (hx::IsNotNull( _this->body )) {
HXLINE( 261)							_this->zip_gverts = false;
HXDLIN( 261)							_this->validate_lverts();
HXDLIN( 261)							{
HXLINE( 261)								 ::zpp_nape::phys::ZPP_Body _this2 = _this->body;
HXDLIN( 261)								if (_this2->zip_axis) {
HXLINE( 261)									_this2->zip_axis = false;
HXDLIN( 261)									{
HXLINE( 261)										_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN( 261)										_this2->axisy = ::Math_obj::cos(_this2->rot);
            									}
            								}
            							}
HXDLIN( 261)							 ::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;
HXDLIN( 261)							{
HXLINE( 261)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;
HXDLIN( 261)								while(hx::IsNotNull( cx_ite )){
HXLINE( 261)									 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite;
HXDLIN( 261)									{
HXLINE( 261)										 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 261)										li = li->next;
HXDLIN( 261)										{
HXLINE( 261)											g->x = (_this->body->posx + ((_this->body->axisy * l->x) - (_this->body->axisx * l->y)));
HXDLIN( 261)											g->y = (_this->body->posy + ((l->x * _this->body->axisx) + (l->y * _this->body->axisy)));
            										}
            									}
HXDLIN( 261)									cx_ite = cx_ite->next;
            								}
            							}
            						}
            					}
HXDLIN( 261)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;
HXDLIN( 261)					{
HXLINE( 261)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;
HXDLIN( 261)						 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;
HXDLIN( 261)						cx_ite1 = cx_ite1->next;
HXDLIN( 261)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 261)							 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;
HXDLIN( 261)							{
HXLINE( 261)								 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXDLIN( 261)								ite = ite->next;
HXDLIN( 261)								e->gp0 = u;
HXDLIN( 261)								e->gp1 = v;
HXDLIN( 261)								{
HXLINE( 261)									e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
HXDLIN( 261)									e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
            								}
HXDLIN( 261)								e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
HXDLIN( 261)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE( 261)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN( 261)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN( 261)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN( 261)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN( 261)							u = v;
HXDLIN( 261)							cx_ite1 = cx_ite1->next;
            						}
HXDLIN( 261)						 ::zpp_nape::geom::ZPP_Vec2 v1 = _this->gverts->next;
HXDLIN( 261)						{
HXLINE( 261)							 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXDLIN( 261)							ite = ite->next;
HXDLIN( 261)							e1->gp0 = u;
HXDLIN( 261)							e1->gp1 = v1;
HXDLIN( 261)							{
HXLINE( 261)								e1->gnormx = ((_this->body->axisy * e1->lnormx) - (_this->body->axisx * e1->lnormy));
HXDLIN( 261)								e1->gnormy = ((e1->lnormx * _this->body->axisx) + (e1->lnormy * _this->body->axisy));
            							}
HXDLIN( 261)							e1->gprojection = (((_this->body->posx * e1->gnormx) + (_this->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 261)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE( 261)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN( 261)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN( 261)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN( 261)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
HXLINE( 262)		if (s->zip_aabb) {
HXLINE( 262)			if (hx::IsNotNull( s->body )) {
HXLINE( 262)				s->zip_aabb = false;
HXDLIN( 262)				if ((s->type == 0)) {
HXLINE( 262)					 ::zpp_nape::shape::ZPP_Circle _this3 = s->circle;
HXDLIN( 262)					if (_this3->zip_worldCOM) {
HXLINE( 262)						if (hx::IsNotNull( _this3->body )) {
HXLINE( 262)							_this3->zip_worldCOM = false;
HXDLIN( 262)							if (_this3->zip_localCOM) {
HXLINE( 262)								_this3->zip_localCOM = false;
HXDLIN( 262)								if ((_this3->type == 1)) {
HXLINE( 262)									 ::zpp_nape::shape::ZPP_Polygon _this4 = _this3->polygon;
HXDLIN( 262)									if (hx::IsNull( _this4->lverts->next )) {
HXLINE( 262)										HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            									}
HXDLIN( 262)									if (hx::IsNull( _this4->lverts->next->next )) {
HXLINE( 262)										_this4->localCOMx = _this4->lverts->next->x;
HXDLIN( 262)										_this4->localCOMy = _this4->lverts->next->y;
            									}
            									else {
HXLINE( 262)										if (hx::IsNull( _this4->lverts->next->next->next )) {
HXLINE( 262)											{
HXLINE( 262)												_this4->localCOMx = _this4->lverts->next->x;
HXDLIN( 262)												_this4->localCOMy = _this4->lverts->next->y;
            											}
HXDLIN( 262)											{
HXLINE( 262)												Float t = ((Float)1.0);
HXDLIN( 262)												 ::zpp_nape::shape::ZPP_Polygon _this5 = _this4;
HXDLIN( 262)												_this5->localCOMx = (_this5->localCOMx + (_this4->lverts->next->next->x * t));
HXDLIN( 262)												 ::zpp_nape::shape::ZPP_Polygon _this6 = _this4;
HXDLIN( 262)												_this6->localCOMy = (_this6->localCOMy + (_this4->lverts->next->next->y * t));
            											}
HXDLIN( 262)											{
HXLINE( 262)												Float t1 = ((Float)0.5);
HXDLIN( 262)												 ::zpp_nape::shape::ZPP_Polygon _this7 = _this4;
HXDLIN( 262)												_this7->localCOMx = (_this7->localCOMx * t1);
HXDLIN( 262)												 ::zpp_nape::shape::ZPP_Polygon _this8 = _this4;
HXDLIN( 262)												_this8->localCOMy = (_this8->localCOMy * t1);
            											}
            										}
            										else {
HXLINE( 262)											{
HXLINE( 262)												_this4->localCOMx = ( (Float)(0) );
HXDLIN( 262)												_this4->localCOMy = ( (Float)(0) );
            											}
HXDLIN( 262)											Float area = ((Float)0.0);
HXDLIN( 262)											{
HXLINE( 262)												 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this4->lverts->next;
HXDLIN( 262)												 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite2;
HXDLIN( 262)												cx_ite2 = cx_ite2->next;
HXDLIN( 262)												 ::zpp_nape::geom::ZPP_Vec2 v2 = cx_ite2;
HXDLIN( 262)												cx_ite2 = cx_ite2->next;
HXDLIN( 262)												while(hx::IsNotNull( cx_ite2 )){
HXLINE( 262)													 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;
HXDLIN( 262)													{
HXLINE( 262)														area = (area + (v2->x * (w->y - u1->y)));
HXDLIN( 262)														Float cf = ((w->y * v2->x) - (w->x * v2->y));
HXDLIN( 262)														 ::zpp_nape::shape::ZPP_Polygon _this9 = _this4;
HXDLIN( 262)														_this9->localCOMx = (_this9->localCOMx + ((v2->x + w->x) * cf));
HXDLIN( 262)														 ::zpp_nape::shape::ZPP_Polygon _this10 = _this4;
HXDLIN( 262)														_this10->localCOMy = (_this10->localCOMy + ((v2->y + w->y) * cf));
            													}
HXDLIN( 262)													u1 = v2;
HXDLIN( 262)													v2 = w;
HXDLIN( 262)													cx_ite2 = cx_ite2->next;
            												}
HXDLIN( 262)												cx_ite2 = _this4->lverts->next;
HXDLIN( 262)												 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;
HXDLIN( 262)												{
HXLINE( 262)													area = (area + (v2->x * (w1->y - u1->y)));
HXDLIN( 262)													Float cf1 = ((w1->y * v2->x) - (w1->x * v2->y));
HXDLIN( 262)													 ::zpp_nape::shape::ZPP_Polygon _this11 = _this4;
HXDLIN( 262)													_this11->localCOMx = (_this11->localCOMx + ((v2->x + w1->x) * cf1));
HXDLIN( 262)													 ::zpp_nape::shape::ZPP_Polygon _this12 = _this4;
HXDLIN( 262)													_this12->localCOMy = (_this12->localCOMy + ((v2->y + w1->y) * cf1));
            												}
HXDLIN( 262)												u1 = v2;
HXDLIN( 262)												v2 = w1;
HXDLIN( 262)												cx_ite2 = cx_ite2->next;
HXDLIN( 262)												 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite2;
HXDLIN( 262)												{
HXLINE( 262)													area = (area + (v2->x * (w2->y - u1->y)));
HXDLIN( 262)													Float cf2 = ((w2->y * v2->x) - (w2->x * v2->y));
HXDLIN( 262)													 ::zpp_nape::shape::ZPP_Polygon _this13 = _this4;
HXDLIN( 262)													_this13->localCOMx = (_this13->localCOMx + ((v2->x + w2->x) * cf2));
HXDLIN( 262)													 ::zpp_nape::shape::ZPP_Polygon _this14 = _this4;
HXDLIN( 262)													_this14->localCOMy = (_this14->localCOMy + ((v2->y + w2->y) * cf2));
            												}
            											}
HXDLIN( 262)											area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 262)											{
HXLINE( 262)												Float t2 = area;
HXDLIN( 262)												 ::zpp_nape::shape::ZPP_Polygon _this15 = _this4;
HXDLIN( 262)												_this15->localCOMx = (_this15->localCOMx * t2);
HXDLIN( 262)												 ::zpp_nape::shape::ZPP_Polygon _this16 = _this4;
HXDLIN( 262)												_this16->localCOMy = (_this16->localCOMy * t2);
            											}
            										}
            									}
            								}
HXDLIN( 262)								if (hx::IsNotNull( _this3->wrap_localCOM )) {
HXLINE( 262)									_this3->wrap_localCOM->zpp_inner->x = _this3->localCOMx;
HXDLIN( 262)									_this3->wrap_localCOM->zpp_inner->y = _this3->localCOMy;
            								}
            							}
HXDLIN( 262)							{
HXLINE( 262)								 ::zpp_nape::phys::ZPP_Body _this17 = _this3->body;
HXDLIN( 262)								if (_this17->zip_axis) {
HXLINE( 262)									_this17->zip_axis = false;
HXDLIN( 262)									{
HXLINE( 262)										_this17->axisx = ::Math_obj::sin(_this17->rot);
HXDLIN( 262)										_this17->axisy = ::Math_obj::cos(_this17->rot);
            									}
            								}
            							}
HXDLIN( 262)							{
HXLINE( 262)								_this3->worldCOMx = (_this3->body->posx + ((_this3->body->axisy * _this3->localCOMx) - (_this3->body->axisx * _this3->localCOMy)));
HXDLIN( 262)								_this3->worldCOMy = (_this3->body->posy + ((_this3->localCOMx * _this3->body->axisx) + (_this3->localCOMy * _this3->body->axisy)));
            							}
            						}
            					}
HXDLIN( 262)					Float rx = _this3->radius;
HXDLIN( 262)					Float ry = _this3->radius;
HXDLIN( 262)					{
HXLINE( 262)						_this3->aabb->minx = (_this3->worldCOMx - rx);
HXDLIN( 262)						_this3->aabb->miny = (_this3->worldCOMy - ry);
            					}
HXDLIN( 262)					{
HXLINE( 262)						_this3->aabb->maxx = (_this3->worldCOMx + rx);
HXDLIN( 262)						_this3->aabb->maxy = (_this3->worldCOMy + ry);
            					}
            				}
            				else {
HXLINE( 262)					 ::zpp_nape::shape::ZPP_Polygon _this18 = s->polygon;
HXDLIN( 262)					if (_this18->zip_gverts) {
HXLINE( 262)						if (hx::IsNotNull( _this18->body )) {
HXLINE( 262)							_this18->zip_gverts = false;
HXDLIN( 262)							_this18->validate_lverts();
HXDLIN( 262)							{
HXLINE( 262)								 ::zpp_nape::phys::ZPP_Body _this19 = _this18->body;
HXDLIN( 262)								if (_this19->zip_axis) {
HXLINE( 262)									_this19->zip_axis = false;
HXDLIN( 262)									{
HXLINE( 262)										_this19->axisx = ::Math_obj::sin(_this19->rot);
HXDLIN( 262)										_this19->axisy = ::Math_obj::cos(_this19->rot);
            									}
            								}
            							}
HXDLIN( 262)							 ::zpp_nape::geom::ZPP_Vec2 li1 = _this18->lverts->next;
HXDLIN( 262)							{
HXLINE( 262)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = _this18->gverts->next;
HXDLIN( 262)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 262)									 ::zpp_nape::geom::ZPP_Vec2 g1 = cx_ite3;
HXDLIN( 262)									{
HXLINE( 262)										 ::zpp_nape::geom::ZPP_Vec2 l1 = li1;
HXDLIN( 262)										li1 = li1->next;
HXDLIN( 262)										{
HXLINE( 262)											g1->x = (_this18->body->posx + ((_this18->body->axisy * l1->x) - (_this18->body->axisx * l1->y)));
HXDLIN( 262)											g1->y = (_this18->body->posy + ((l1->x * _this18->body->axisx) + (l1->y * _this18->body->axisy)));
            										}
            									}
HXDLIN( 262)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
            					}
HXDLIN( 262)					if (hx::IsNull( _this18->lverts->next )) {
HXLINE( 262)						HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            					}
HXDLIN( 262)					 ::zpp_nape::geom::ZPP_Vec2 p0 = _this18->gverts->next;
HXDLIN( 262)					{
HXLINE( 262)						_this18->aabb->minx = p0->x;
HXDLIN( 262)						_this18->aabb->miny = p0->y;
            					}
HXDLIN( 262)					{
HXLINE( 262)						_this18->aabb->maxx = p0->x;
HXDLIN( 262)						_this18->aabb->maxy = p0->y;
            					}
HXDLIN( 262)					{
HXLINE( 262)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite4 = _this18->gverts->next->next;
HXDLIN( 262)						while(hx::IsNotNull( cx_ite4 )){
HXLINE( 262)							 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite4;
HXDLIN( 262)							{
HXLINE( 262)								if ((p->x < _this18->aabb->minx)) {
HXLINE( 262)									_this18->aabb->minx = p->x;
            								}
HXDLIN( 262)								if ((p->x > _this18->aabb->maxx)) {
HXLINE( 262)									_this18->aabb->maxx = p->x;
            								}
HXDLIN( 262)								if ((p->y < _this18->aabb->miny)) {
HXLINE( 262)									_this18->aabb->miny = p->y;
            								}
HXDLIN( 262)								if ((p->y > _this18->aabb->maxy)) {
HXLINE( 262)									_this18->aabb->maxy = p->y;
            								}
            							}
HXDLIN( 262)							cx_ite4 = cx_ite4->next;
            						}
            					}
            				}
            			}
            		}
HXLINE( 263)		if (s->zip_worldCOM) {
HXLINE( 263)			if (hx::IsNotNull( s->body )) {
HXLINE( 263)				s->zip_worldCOM = false;
HXDLIN( 263)				if (s->zip_localCOM) {
HXLINE( 263)					s->zip_localCOM = false;
HXDLIN( 263)					if ((s->type == 1)) {
HXLINE( 263)						 ::zpp_nape::shape::ZPP_Polygon _this20 = s->polygon;
HXDLIN( 263)						if (hx::IsNull( _this20->lverts->next )) {
HXLINE( 263)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            						}
HXDLIN( 263)						if (hx::IsNull( _this20->lverts->next->next )) {
HXLINE( 263)							_this20->localCOMx = _this20->lverts->next->x;
HXDLIN( 263)							_this20->localCOMy = _this20->lverts->next->y;
            						}
            						else {
HXLINE( 263)							if (hx::IsNull( _this20->lverts->next->next->next )) {
HXLINE( 263)								{
HXLINE( 263)									_this20->localCOMx = _this20->lverts->next->x;
HXDLIN( 263)									_this20->localCOMy = _this20->lverts->next->y;
            								}
HXDLIN( 263)								{
HXLINE( 263)									Float t3 = ((Float)1.0);
HXDLIN( 263)									 ::zpp_nape::shape::ZPP_Polygon _this21 = _this20;
HXDLIN( 263)									_this21->localCOMx = (_this21->localCOMx + (_this20->lverts->next->next->x * t3));
HXDLIN( 263)									 ::zpp_nape::shape::ZPP_Polygon _this22 = _this20;
HXDLIN( 263)									_this22->localCOMy = (_this22->localCOMy + (_this20->lverts->next->next->y * t3));
            								}
HXDLIN( 263)								{
HXLINE( 263)									Float t4 = ((Float)0.5);
HXDLIN( 263)									 ::zpp_nape::shape::ZPP_Polygon _this23 = _this20;
HXDLIN( 263)									_this23->localCOMx = (_this23->localCOMx * t4);
HXDLIN( 263)									 ::zpp_nape::shape::ZPP_Polygon _this24 = _this20;
HXDLIN( 263)									_this24->localCOMy = (_this24->localCOMy * t4);
            								}
            							}
            							else {
HXLINE( 263)								{
HXLINE( 263)									_this20->localCOMx = ( (Float)(0) );
HXDLIN( 263)									_this20->localCOMy = ( (Float)(0) );
            								}
HXDLIN( 263)								Float area1 = ((Float)0.0);
HXDLIN( 263)								{
HXLINE( 263)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite5 = _this20->lverts->next;
HXDLIN( 263)									 ::zpp_nape::geom::ZPP_Vec2 u2 = cx_ite5;
HXDLIN( 263)									cx_ite5 = cx_ite5->next;
HXDLIN( 263)									 ::zpp_nape::geom::ZPP_Vec2 v3 = cx_ite5;
HXDLIN( 263)									cx_ite5 = cx_ite5->next;
HXDLIN( 263)									while(hx::IsNotNull( cx_ite5 )){
HXLINE( 263)										 ::zpp_nape::geom::ZPP_Vec2 w3 = cx_ite5;
HXDLIN( 263)										{
HXLINE( 263)											area1 = (area1 + (v3->x * (w3->y - u2->y)));
HXDLIN( 263)											Float cf3 = ((w3->y * v3->x) - (w3->x * v3->y));
HXDLIN( 263)											 ::zpp_nape::shape::ZPP_Polygon _this25 = _this20;
HXDLIN( 263)											_this25->localCOMx = (_this25->localCOMx + ((v3->x + w3->x) * cf3));
HXDLIN( 263)											 ::zpp_nape::shape::ZPP_Polygon _this26 = _this20;
HXDLIN( 263)											_this26->localCOMy = (_this26->localCOMy + ((v3->y + w3->y) * cf3));
            										}
HXDLIN( 263)										u2 = v3;
HXDLIN( 263)										v3 = w3;
HXDLIN( 263)										cx_ite5 = cx_ite5->next;
            									}
HXDLIN( 263)									cx_ite5 = _this20->lverts->next;
HXDLIN( 263)									 ::zpp_nape::geom::ZPP_Vec2 w4 = cx_ite5;
HXDLIN( 263)									{
HXLINE( 263)										area1 = (area1 + (v3->x * (w4->y - u2->y)));
HXDLIN( 263)										Float cf4 = ((w4->y * v3->x) - (w4->x * v3->y));
HXDLIN( 263)										 ::zpp_nape::shape::ZPP_Polygon _this27 = _this20;
HXDLIN( 263)										_this27->localCOMx = (_this27->localCOMx + ((v3->x + w4->x) * cf4));
HXDLIN( 263)										 ::zpp_nape::shape::ZPP_Polygon _this28 = _this20;
HXDLIN( 263)										_this28->localCOMy = (_this28->localCOMy + ((v3->y + w4->y) * cf4));
            									}
HXDLIN( 263)									u2 = v3;
HXDLIN( 263)									v3 = w4;
HXDLIN( 263)									cx_ite5 = cx_ite5->next;
HXDLIN( 263)									 ::zpp_nape::geom::ZPP_Vec2 w5 = cx_ite5;
HXDLIN( 263)									{
HXLINE( 263)										area1 = (area1 + (v3->x * (w5->y - u2->y)));
HXDLIN( 263)										Float cf5 = ((w5->y * v3->x) - (w5->x * v3->y));
HXDLIN( 263)										 ::zpp_nape::shape::ZPP_Polygon _this29 = _this20;
HXDLIN( 263)										_this29->localCOMx = (_this29->localCOMx + ((v3->x + w5->x) * cf5));
HXDLIN( 263)										 ::zpp_nape::shape::ZPP_Polygon _this30 = _this20;
HXDLIN( 263)										_this30->localCOMy = (_this30->localCOMy + ((v3->y + w5->y) * cf5));
            									}
            								}
HXDLIN( 263)								area1 = (( (Float)(1) ) / (( (Float)(3) ) * area1));
HXDLIN( 263)								{
HXLINE( 263)									Float t5 = area1;
HXDLIN( 263)									 ::zpp_nape::shape::ZPP_Polygon _this31 = _this20;
HXDLIN( 263)									_this31->localCOMx = (_this31->localCOMx * t5);
HXDLIN( 263)									 ::zpp_nape::shape::ZPP_Polygon _this32 = _this20;
HXDLIN( 263)									_this32->localCOMy = (_this32->localCOMy * t5);
            								}
            							}
            						}
            					}
HXDLIN( 263)					if (hx::IsNotNull( s->wrap_localCOM )) {
HXLINE( 263)						s->wrap_localCOM->zpp_inner->x = s->localCOMx;
HXDLIN( 263)						s->wrap_localCOM->zpp_inner->y = s->localCOMy;
            					}
            				}
HXDLIN( 263)				{
HXLINE( 263)					 ::zpp_nape::phys::ZPP_Body _this33 = s->body;
HXDLIN( 263)					if (_this33->zip_axis) {
HXLINE( 263)						_this33->zip_axis = false;
HXDLIN( 263)						{
HXLINE( 263)							_this33->axisx = ::Math_obj::sin(_this33->rot);
HXDLIN( 263)							_this33->axisy = ::Math_obj::cos(_this33->rot);
            						}
            					}
            				}
HXDLIN( 263)				{
HXLINE( 263)					s->worldCOMx = (s->body->posx + ((s->body->axisy * s->localCOMx) - (s->body->axisx * s->localCOMy)));
HXDLIN( 263)					s->worldCOMy = (s->body->posy + ((s->localCOMx * s->body->axisx) + (s->localCOMy * s->body->axisy)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,validateShape,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_266_shapesInShape)
HXDLIN( 266)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,shapesInShape,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_269_bodiesInShape)
HXDLIN( 269)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,bodiesInShape,return )

 ::nape::geom::RayResult ZPP_Broadphase_obj::rayCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_272_rayCast)
HXDLIN( 272)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Broadphase_obj,rayCast,return )

 ::nape::geom::RayResultList ZPP_Broadphase_obj::rayMultiCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::geom::RayResultList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_275_rayMultiCast)
HXDLIN( 275)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,rayMultiCast,return )


hx::ObjectPtr< ZPP_Broadphase_obj > ZPP_Broadphase_obj::__new() {
	hx::ObjectPtr< ZPP_Broadphase_obj > __this = new ZPP_Broadphase_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Broadphase_obj > ZPP_Broadphase_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Broadphase_obj *__this = (ZPP_Broadphase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Broadphase_obj), true, "zpp_nape.space.ZPP_Broadphase"));
	*(void **)__this = ZPP_Broadphase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Broadphase_obj::ZPP_Broadphase_obj()
{
}

void ZPP_Broadphase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Broadphase);
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(is_sweep,"is_sweep");
	HX_MARK_MEMBER_NAME(sweep,"sweep");
	HX_MARK_MEMBER_NAME(dynab,"dynab");
	HX_MARK_MEMBER_NAME(aabbShape,"aabbShape");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(circShape,"circShape");
	HX_MARK_END_CLASS();
}

void ZPP_Broadphase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(is_sweep,"is_sweep");
	HX_VISIT_MEMBER_NAME(sweep,"sweep");
	HX_VISIT_MEMBER_NAME(dynab,"dynab");
	HX_VISIT_MEMBER_NAME(aabbShape,"aabbShape");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(circShape,"circShape");
}

hx::Val ZPP_Broadphase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sync") ) { return hx::Val( sync_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space ); }
		if (HX_FIELD_EQ(inName,"sweep") ) { return hx::Val( sweep ); }
		if (HX_FIELD_EQ(inName,"dynab") ) { return hx::Val( dynab ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"is_sweep") ) { return hx::Val( is_sweep ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aabbShape") ) { return hx::Val( aabbShape ); }
		if (HX_FIELD_EQ(inName,"circShape") ) { return hx::Val( circShape ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"broadphase") ) { return hx::Val( broadphase_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"validateShape") ) { return hx::Val( validateShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAABBShape") ) { return hx::Val( updateAABBShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCircShape") ) { return hx::Val( updateCircShape_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Broadphase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweep") ) { sweep=inValue.Cast<  ::zpp_nape::space::ZPP_SweepPhase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dynab") ) { dynab=inValue.Cast<  ::zpp_nape::space::ZPP_DynAABBPhase >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::nape::geom::Mat23 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"is_sweep") ) { is_sweep=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aabbShape") ) { aabbShape=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"circShape") ) { circShape=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Broadphase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("is_sweep",97,84,c6,a5));
	outFields->push(HX_("sweep",ec,15,0a,86));
	outFields->push(HX_("dynab",5a,a0,60,e4));
	outFields->push(HX_("aabbShape",61,2c,11,c3));
	outFields->push(HX_("matrix",41,36,c8,bb));
	outFields->push(HX_("circShape",ca,57,3a,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Broadphase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Space */ ,(int)offsetof(ZPP_Broadphase_obj,space),HX_("space",c6,8c,66,81)},
	{hx::fsBool,(int)offsetof(ZPP_Broadphase_obj,is_sweep),HX_("is_sweep",97,84,c6,a5)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_SweepPhase */ ,(int)offsetof(ZPP_Broadphase_obj,sweep),HX_("sweep",ec,15,0a,86)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_DynAABBPhase */ ,(int)offsetof(ZPP_Broadphase_obj,dynab),HX_("dynab",5a,a0,60,e4)},
	{hx::fsObject /*  ::nape::shape::Shape */ ,(int)offsetof(ZPP_Broadphase_obj,aabbShape),HX_("aabbShape",61,2c,11,c3)},
	{hx::fsObject /*  ::nape::geom::Mat23 */ ,(int)offsetof(ZPP_Broadphase_obj,matrix),HX_("matrix",41,36,c8,bb)},
	{hx::fsObject /*  ::nape::shape::Shape */ ,(int)offsetof(ZPP_Broadphase_obj,circShape),HX_("circShape",ca,57,3a,32)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Broadphase_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Broadphase_obj_sMemberFields[] = {
	HX_("space",c6,8c,66,81),
	HX_("is_sweep",97,84,c6,a5),
	HX_("sweep",ec,15,0a,86),
	HX_("dynab",5a,a0,60,e4),
	HX_("insert",39,43,dd,9d),
	HX_("remove",44,9c,88,04),
	HX_("sync",5b,ba,5f,4c),
	HX_("broadphase",b9,5d,1d,d8),
	HX_("clear",8d,71,5b,48),
	HX_("shapesUnderPoint",ea,ec,bc,47),
	HX_("bodiesUnderPoint",b8,1b,30,80),
	HX_("aabbShape",61,2c,11,c3),
	HX_("matrix",41,36,c8,bb),
	HX_("updateAABBShape",38,55,33,ee),
	HX_("shapesInAABB",d7,1c,84,f9),
	HX_("bodiesInAABB",a5,4c,28,9e),
	HX_("circShape",ca,57,3a,32),
	HX_("updateCircShape",81,28,c5,81),
	HX_("shapesInCircle",27,d4,f7,6c),
	HX_("bodiesInCircle",75,13,e2,a6),
	HX_("validateShape",ab,a2,1c,a8),
	HX_("shapesInShape",ea,90,2a,d1),
	HX_("bodiesInShape",5c,35,30,3c),
	HX_("rayCast",c9,5d,3c,25),
	HX_("rayMultiCast",8e,02,7d,23),
	::String(null()) };

hx::Class ZPP_Broadphase_obj::__mClass;

void ZPP_Broadphase_obj::__register()
{
	ZPP_Broadphase_obj _hx_dummy;
	ZPP_Broadphase_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.space.ZPP_Broadphase",87,df,2a,e3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Broadphase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Broadphase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Broadphase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Broadphase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace space
