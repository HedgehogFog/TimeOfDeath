// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_LineJoint
#include <hxinc/nape/constraint/LineJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <hxinc/nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <hxinc/zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_LineJoint
#include <hxinc/zpp_nape/constraint/ZPP_LineJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_174_new,"zpp_nape.constraint.ZPP_LineJoint","new",0x0c76ec53,"zpp_nape.constraint.ZPP_LineJoint.new","zpp_nape/constraint/LineJoint.hx",174,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_185_bodyImpulse,"zpp_nape.constraint.ZPP_LineJoint","bodyImpulse",0x77ff3d26,"zpp_nape.constraint.ZPP_LineJoint.bodyImpulse","zpp_nape/constraint/LineJoint.hx",185,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_209_activeBodies,"zpp_nape.constraint.ZPP_LineJoint","activeBodies",0xf3c9b793,"zpp_nape.constraint.ZPP_LineJoint.activeBodies","zpp_nape/constraint/LineJoint.hx",209,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_217_inactiveBodies,"zpp_nape.constraint.ZPP_LineJoint","inactiveBodies",0x96c75c38,"zpp_nape.constraint.ZPP_LineJoint.inactiveBodies","zpp_nape/constraint/LineJoint.hx",217,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_231_validate_a1,"zpp_nape.constraint.ZPP_LineJoint","validate_a1",0xe32962ec,"zpp_nape.constraint.ZPP_LineJoint.validate_a1","zpp_nape/constraint/LineJoint.hx",231,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_252_invalidate_a1,"zpp_nape.constraint.ZPP_LineJoint","invalidate_a1",0x2553d9e7,"zpp_nape.constraint.ZPP_LineJoint.invalidate_a1","zpp_nape/constraint/LineJoint.hx",252,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_276_setup_a1,"zpp_nape.constraint.ZPP_LineJoint","setup_a1",0x03acdb9f,"zpp_nape.constraint.ZPP_LineJoint.setup_a1","zpp_nape/constraint/LineJoint.hx",276,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_289_validate_a2,"zpp_nape.constraint.ZPP_LineJoint","validate_a2",0xe32962ed,"zpp_nape.constraint.ZPP_LineJoint.validate_a2","zpp_nape/constraint/LineJoint.hx",289,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_310_invalidate_a2,"zpp_nape.constraint.ZPP_LineJoint","invalidate_a2",0x2553d9e8,"zpp_nape.constraint.ZPP_LineJoint.invalidate_a2","zpp_nape/constraint/LineJoint.hx",310,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_334_setup_a2,"zpp_nape.constraint.ZPP_LineJoint","setup_a2",0x03acdba0,"zpp_nape.constraint.ZPP_LineJoint.setup_a2","zpp_nape/constraint/LineJoint.hx",334,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_347_validate_n,"zpp_nape.constraint.ZPP_LineJoint","validate_n",0x8d128db2,"zpp_nape.constraint.ZPP_LineJoint.validate_n","zpp_nape/constraint/LineJoint.hx",347,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_368_invalidate_n,"zpp_nape.constraint.ZPP_LineJoint","invalidate_n",0x71d14f17,"zpp_nape.constraint.ZPP_LineJoint.invalidate_n","zpp_nape/constraint/LineJoint.hx",368,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_395_setup_n,"zpp_nape.constraint.ZPP_LineJoint","setup_n",0x3e01ec5f,"zpp_nape.constraint.ZPP_LineJoint.setup_n","zpp_nape/constraint/LineJoint.hx",395,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_403_validate_norm,"zpp_nape.constraint.ZPP_LineJoint","validate_norm",0x13402b78,"zpp_nape.constraint.ZPP_LineJoint.validate_norm","zpp_nape/constraint/LineJoint.hx",403,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_442_copy,"zpp_nape.constraint.ZPP_LineJoint","copy",0xd45a1462,"zpp_nape.constraint.ZPP_LineJoint.copy","zpp_nape/constraint/LineJoint.hx",442,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_463_copy,"zpp_nape.constraint.ZPP_LineJoint","copy",0xd45a1462,"zpp_nape.constraint.ZPP_LineJoint.copy","zpp_nape/constraint/LineJoint.hx",463,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_484_copy,"zpp_nape.constraint.ZPP_LineJoint","copy",0xd45a1462,"zpp_nape.constraint.ZPP_LineJoint.copy","zpp_nape/constraint/LineJoint.hx",484,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_642_validate,"zpp_nape.constraint.ZPP_LineJoint","validate",0xe55783c3,"zpp_nape.constraint.ZPP_LineJoint.validate","zpp_nape/constraint/LineJoint.hx",642,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_650_wake_connected,"zpp_nape.constraint.ZPP_LineJoint","wake_connected",0x47dfa29b,"zpp_nape.constraint.ZPP_LineJoint.wake_connected","zpp_nape/constraint/LineJoint.hx",650,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_654_forest,"zpp_nape.constraint.ZPP_LineJoint","forest",0x62a72aca,"zpp_nape.constraint.ZPP_LineJoint.forest","zpp_nape/constraint/LineJoint.hx",654,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_753_pair_exists,"zpp_nape.constraint.ZPP_LineJoint","pair_exists",0x81b53194,"zpp_nape.constraint.ZPP_LineJoint.pair_exists","zpp_nape/constraint/LineJoint.hx",753,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_755_clearcache,"zpp_nape.constraint.ZPP_LineJoint","clearcache",0x2e1a0202,"zpp_nape.constraint.ZPP_LineJoint.clearcache","zpp_nape/constraint/LineJoint.hx",755,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_778_preStep,"zpp_nape.constraint.ZPP_LineJoint","preStep",0x3a6c5282,"zpp_nape.constraint.ZPP_LineJoint.preStep","zpp_nape/constraint/LineJoint.hx",778,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_995_warmStart,"zpp_nape.constraint.ZPP_LineJoint","warmStart",0x6fcc3c10,"zpp_nape.constraint.ZPP_LineJoint.warmStart","zpp_nape/constraint/LineJoint.hx",995,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_1076_applyImpulseVel,"zpp_nape.constraint.ZPP_LineJoint","applyImpulseVel",0xd6e78429,"zpp_nape.constraint.ZPP_LineJoint.applyImpulseVel","zpp_nape/constraint/LineJoint.hx",1076,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_1279_applyImpulsePos,"zpp_nape.constraint.ZPP_LineJoint","applyImpulsePos",0xd6e2ff60,"zpp_nape.constraint.ZPP_LineJoint.applyImpulsePos","zpp_nape/constraint/LineJoint.hx",1279,0x4b59f258)
HX_LOCAL_STACK_FRAME(_hx_pos_055eea2e73d7d8b0_1571_draw,"zpp_nape.constraint.ZPP_LineJoint","draw",0xd50584b1,"zpp_nape.constraint.ZPP_LineJoint.draw","zpp_nape/constraint/LineJoint.hx",1571,0x4b59f258)
namespace zpp_nape{
namespace constraint{

void ZPP_LineJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_174_new)
HXLINE( 440)		this->biasy = ((Float)0.0);
HXLINE( 439)		this->biasx = ((Float)0.0);
HXLINE( 436)		this->jAccy = ((Float)0.0);
HXLINE( 435)		this->jAccx = ((Float)0.0);
HXLINE( 434)		this->kMassc = ((Float)0.0);
HXLINE( 433)		this->kMassb = ((Float)0.0);
HXLINE( 432)		this->kMassa = ((Float)0.0);
HXLINE( 401)		this->wrap_n = null();
HXLINE( 345)		this->nrely = ((Float)0.0);
HXLINE( 344)		this->nrelx = ((Float)0.0);
HXLINE( 343)		this->nlocaly = ((Float)0.0);
HXLINE( 342)		this->nlocalx = ((Float)0.0);
HXLINE( 340)		this->wrap_a2 = null();
HXLINE( 287)		this->a2rely = ((Float)0.0);
HXLINE( 286)		this->a2relx = ((Float)0.0);
HXLINE( 285)		this->a2localy = ((Float)0.0);
HXLINE( 284)		this->a2localx = ((Float)0.0);
HXLINE( 282)		this->wrap_a1 = null();
HXLINE( 229)		this->a1rely = ((Float)0.0);
HXLINE( 228)		this->a1relx = ((Float)0.0);
HXLINE( 227)		this->a1localy = ((Float)0.0);
HXLINE( 226)		this->a1localx = ((Float)0.0);
HXLINE( 183)		this->cx2 = ((Float)0.0);
HXLINE( 182)		this->cx1 = ((Float)0.0);
HXLINE( 181)		this->dot2 = ((Float)0.0);
HXLINE( 180)		this->dot1 = ((Float)0.0);
HXLINE( 179)		this->equal = false;
HXLINE( 178)		this->jointMax = ((Float)0.0);
HXLINE( 177)		this->jointMin = ((Float)0.0);
HXLINE( 176)		this->scale = ((Float)0.0);
HXLINE( 175)		this->outer_zn = null();
HXLINE( 490)		super::__construct();
HXLINE( 491)		{
HXLINE( 492)			{
HXLINE( 493)				this->a1localx = ( (Float)(0) );
HXLINE( 494)				this->a1localy = ( (Float)(0) );
            			}
HXLINE( 512)			{
HXLINE( 513)				this->a1relx = ( (Float)(0) );
HXLINE( 514)				this->a1rely = ( (Float)(0) );
            			}
            		}
HXLINE( 533)		{
HXLINE( 534)			{
HXLINE( 535)				this->a2localx = ( (Float)(0) );
HXLINE( 536)				this->a2localy = ( (Float)(0) );
            			}
HXLINE( 554)			{
HXLINE( 555)				this->a2relx = ( (Float)(0) );
HXLINE( 556)				this->a2rely = ( (Float)(0) );
            			}
            		}
HXLINE( 575)		{
HXLINE( 576)			{
HXLINE( 577)				this->nlocalx = ( (Float)(0) );
HXLINE( 578)				this->nlocaly = ( (Float)(0) );
            			}
HXLINE( 596)			{
HXLINE( 597)				this->nrelx = ( (Float)(0) );
HXLINE( 598)				this->nrely = ( (Float)(0) );
            			}
            		}
HXLINE( 617)		{
HXLINE( 618)			this->jAccx = ( (Float)(0) );
HXLINE( 619)			this->jAccy = ( (Float)(0) );
            		}
HXLINE( 637)		this->jMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 638)		this->jointMin = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 639)		this->jointMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 640)		this->stepped = false;
            	}

Dynamic ZPP_LineJoint_obj::__CreateEmpty() { return new ZPP_LineJoint_obj; }

void *ZPP_LineJoint_obj::_hx_vtable = 0;

Dynamic ZPP_LineJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_LineJoint_obj > _hx_result = new ZPP_LineJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_LineJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x38dbbe07) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x38dbbe07;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

 ::nape::geom::Vec3 ZPP_LineJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_185_bodyImpulse)
HXDLIN( 185)		if (this->stepped) {
HXLINE( 186)			Float jx = (((this->scale * this->nrelx) * this->jAccy) - (this->nrely * this->jAccx));
HXLINE( 187)			Float jy = ((this->nrelx * this->jAccx) + ((this->scale * this->nrely) * this->jAccy));
HXLINE( 204)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 204)				return ::nape::geom::Vec3_obj::get(-(jx),-(jy),(((this->scale * this->cx1) * jy) - (this->dot1 * jx)));
            			}
            			else {
HXLINE( 205)				return ::nape::geom::Vec3_obj::get(jx,jy,(((this->scale * this->cx1) * jy) - (this->dot1 * jx)));
            			}
            		}
            		else {
HXLINE( 207)			return ::nape::geom::Vec3_obj::get(0,0,0);
            		}
HXLINE( 185)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_LineJoint_obj,bodyImpulse,return )

void ZPP_LineJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_209_activeBodies)
HXLINE( 211)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 211)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 213)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 214)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 214)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_LineJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_217_inactiveBodies)
HXLINE( 219)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 219)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 221)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 222)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 222)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_LineJoint_obj::validate_a1(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_231_validate_a1)
HXLINE( 232)		this->wrap_a1->zpp_inner->x = this->a1localx;
HXLINE( 233)		this->wrap_a1->zpp_inner->y = this->a1localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,validate_a1,(void))

void ZPP_LineJoint_obj::invalidate_a1( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_252_invalidate_a1)
HXLINE( 253)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("a1",b0,54,00,00)));
HXLINE( 254)		{
HXLINE( 255)			this->a1localx = x->x;
HXLINE( 256)			this->a1localy = x->y;
            		}
HXLINE( 274)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_LineJoint_obj,invalidate_a1,(void))

void ZPP_LineJoint_obj::setup_a1(){
            	HX_GC_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_276_setup_a1)
HXLINE( 277)		Float x = this->a1localx;
HXDLIN( 277)		Float y = this->a1localy;
HXDLIN( 277)		bool _hx_tmp;
HXDLIN( 277)		if ((x == x)) {
HXLINE( 277)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 277)			_hx_tmp = true;
            		}
HXDLIN( 277)		if (_hx_tmp) {
HXLINE( 277)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 277)		 ::nape::geom::Vec2 ret;
HXDLIN( 277)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 277)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 277)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 277)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 277)			ret->zpp_pool = null();
HXDLIN( 277)			ret->zpp_disp = false;
HXDLIN( 277)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 277)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 277)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 277)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 277)			{
HXLINE( 277)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 277)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 277)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 277)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 277)					ret1->next = null();
            				}
HXDLIN( 277)				ret1->weak = false;
            			}
HXDLIN( 277)			ret1->_immutable = false;
HXDLIN( 277)			{
HXLINE( 277)				ret1->x = x;
HXDLIN( 277)				ret1->y = y;
            			}
HXDLIN( 277)			ret->zpp_inner = ret1;
HXDLIN( 277)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 277)			bool _hx_tmp1;
HXDLIN( 277)			if (hx::IsNotNull( ret )) {
HXLINE( 277)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 277)				_hx_tmp1 = false;
            			}
HXDLIN( 277)			if (_hx_tmp1) {
HXLINE( 277)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 277)			{
HXLINE( 277)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 277)				if (_this->_immutable) {
HXLINE( 277)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 277)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 277)					_this->_isimmutable();
            				}
            			}
HXDLIN( 277)			bool _hx_tmp2;
HXDLIN( 277)			if ((x == x)) {
HXLINE( 277)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 277)				_hx_tmp2 = true;
            			}
HXDLIN( 277)			if (_hx_tmp2) {
HXLINE( 277)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 277)			bool _hx_tmp3;
HXDLIN( 277)			bool _hx_tmp4;
HXDLIN( 277)			if (hx::IsNotNull( ret )) {
HXLINE( 277)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 277)				_hx_tmp4 = false;
            			}
HXDLIN( 277)			if (_hx_tmp4) {
HXLINE( 277)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 277)			{
HXLINE( 277)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 277)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 277)					_this1->_validate();
            				}
            			}
HXDLIN( 277)			if ((ret->zpp_inner->x == x)) {
HXLINE( 277)				bool _hx_tmp5;
HXDLIN( 277)				if (hx::IsNotNull( ret )) {
HXLINE( 277)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 277)					_hx_tmp5 = false;
            				}
HXDLIN( 277)				if (_hx_tmp5) {
HXLINE( 277)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 277)				{
HXLINE( 277)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 277)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 277)						_this2->_validate();
            					}
            				}
HXDLIN( 277)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 277)				_hx_tmp3 = false;
            			}
HXDLIN( 277)			if (!(_hx_tmp3)) {
HXLINE( 277)				{
HXLINE( 277)					ret->zpp_inner->x = x;
HXDLIN( 277)					ret->zpp_inner->y = y;
            				}
HXDLIN( 277)				{
HXLINE( 277)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 277)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 277)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 277)		ret->zpp_inner->weak = false;
HXDLIN( 277)		this->wrap_a1 = ret;
HXLINE( 278)		this->wrap_a1->zpp_inner->_inuse = true;
HXLINE( 279)		this->wrap_a1->zpp_inner->_validate = this->validate_a1_dyn();
HXLINE( 280)		this->wrap_a1->zpp_inner->_invalidate = this->invalidate_a1_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,setup_a1,(void))

void ZPP_LineJoint_obj::validate_a2(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_289_validate_a2)
HXLINE( 290)		this->wrap_a2->zpp_inner->x = this->a2localx;
HXLINE( 291)		this->wrap_a2->zpp_inner->y = this->a2localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,validate_a2,(void))

void ZPP_LineJoint_obj::invalidate_a2( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_310_invalidate_a2)
HXLINE( 311)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("a2",b1,54,00,00)));
HXLINE( 312)		{
HXLINE( 313)			this->a2localx = x->x;
HXLINE( 314)			this->a2localy = x->y;
            		}
HXLINE( 332)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_LineJoint_obj,invalidate_a2,(void))

void ZPP_LineJoint_obj::setup_a2(){
            	HX_GC_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_334_setup_a2)
HXLINE( 335)		Float x = this->a2localx;
HXDLIN( 335)		Float y = this->a2localy;
HXDLIN( 335)		bool _hx_tmp;
HXDLIN( 335)		if ((x == x)) {
HXLINE( 335)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 335)			_hx_tmp = true;
            		}
HXDLIN( 335)		if (_hx_tmp) {
HXLINE( 335)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 335)		 ::nape::geom::Vec2 ret;
HXDLIN( 335)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 335)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 335)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 335)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 335)			ret->zpp_pool = null();
HXDLIN( 335)			ret->zpp_disp = false;
HXDLIN( 335)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 335)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 335)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 335)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 335)			{
HXLINE( 335)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 335)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 335)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 335)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 335)					ret1->next = null();
            				}
HXDLIN( 335)				ret1->weak = false;
            			}
HXDLIN( 335)			ret1->_immutable = false;
HXDLIN( 335)			{
HXLINE( 335)				ret1->x = x;
HXDLIN( 335)				ret1->y = y;
            			}
HXDLIN( 335)			ret->zpp_inner = ret1;
HXDLIN( 335)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 335)			bool _hx_tmp1;
HXDLIN( 335)			if (hx::IsNotNull( ret )) {
HXLINE( 335)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 335)				_hx_tmp1 = false;
            			}
HXDLIN( 335)			if (_hx_tmp1) {
HXLINE( 335)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 335)			{
HXLINE( 335)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 335)				if (_this->_immutable) {
HXLINE( 335)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 335)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 335)					_this->_isimmutable();
            				}
            			}
HXDLIN( 335)			bool _hx_tmp2;
HXDLIN( 335)			if ((x == x)) {
HXLINE( 335)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 335)				_hx_tmp2 = true;
            			}
HXDLIN( 335)			if (_hx_tmp2) {
HXLINE( 335)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 335)			bool _hx_tmp3;
HXDLIN( 335)			bool _hx_tmp4;
HXDLIN( 335)			if (hx::IsNotNull( ret )) {
HXLINE( 335)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 335)				_hx_tmp4 = false;
            			}
HXDLIN( 335)			if (_hx_tmp4) {
HXLINE( 335)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 335)			{
HXLINE( 335)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 335)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 335)					_this1->_validate();
            				}
            			}
HXDLIN( 335)			if ((ret->zpp_inner->x == x)) {
HXLINE( 335)				bool _hx_tmp5;
HXDLIN( 335)				if (hx::IsNotNull( ret )) {
HXLINE( 335)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 335)					_hx_tmp5 = false;
            				}
HXDLIN( 335)				if (_hx_tmp5) {
HXLINE( 335)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 335)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 335)						_this2->_validate();
            					}
            				}
HXDLIN( 335)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 335)				_hx_tmp3 = false;
            			}
HXDLIN( 335)			if (!(_hx_tmp3)) {
HXLINE( 335)				{
HXLINE( 335)					ret->zpp_inner->x = x;
HXDLIN( 335)					ret->zpp_inner->y = y;
            				}
HXDLIN( 335)				{
HXLINE( 335)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 335)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 335)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 335)		ret->zpp_inner->weak = false;
HXDLIN( 335)		this->wrap_a2 = ret;
HXLINE( 336)		this->wrap_a2->zpp_inner->_inuse = true;
HXLINE( 337)		this->wrap_a2->zpp_inner->_validate = this->validate_a2_dyn();
HXLINE( 338)		this->wrap_a2->zpp_inner->_invalidate = this->invalidate_a2_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,setup_a2,(void))

void ZPP_LineJoint_obj::validate_n(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_347_validate_n)
HXLINE( 348)		this->wrap_n->zpp_inner->x = this->nlocalx;
HXLINE( 349)		this->wrap_n->zpp_inner->y = this->nlocaly;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,validate_n,(void))

void ZPP_LineJoint_obj::invalidate_n( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_368_invalidate_n)
HXLINE( 369)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("n",6e,00,00,00)));
HXLINE( 370)		{
HXLINE( 371)			this->nlocalx = x->x;
HXLINE( 372)			this->nlocaly = x->y;
            		}
HXLINE( 391)		this->zip_n = true;
HXLINE( 393)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_LineJoint_obj,invalidate_n,(void))

void ZPP_LineJoint_obj::setup_n(){
            	HX_GC_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_395_setup_n)
HXLINE( 396)		Float x = this->nlocalx;
HXDLIN( 396)		Float y = this->nlocaly;
HXDLIN( 396)		bool _hx_tmp;
HXDLIN( 396)		if ((x == x)) {
HXLINE( 396)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 396)			_hx_tmp = true;
            		}
HXDLIN( 396)		if (_hx_tmp) {
HXLINE( 396)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 396)		 ::nape::geom::Vec2 ret;
HXDLIN( 396)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 396)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 396)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 396)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 396)			ret->zpp_pool = null();
HXDLIN( 396)			ret->zpp_disp = false;
HXDLIN( 396)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 396)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 396)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 396)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 396)			{
HXLINE( 396)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 396)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 396)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 396)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 396)					ret1->next = null();
            				}
HXDLIN( 396)				ret1->weak = false;
            			}
HXDLIN( 396)			ret1->_immutable = false;
HXDLIN( 396)			{
HXLINE( 396)				ret1->x = x;
HXDLIN( 396)				ret1->y = y;
            			}
HXDLIN( 396)			ret->zpp_inner = ret1;
HXDLIN( 396)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 396)			bool _hx_tmp1;
HXDLIN( 396)			if (hx::IsNotNull( ret )) {
HXLINE( 396)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 396)				_hx_tmp1 = false;
            			}
HXDLIN( 396)			if (_hx_tmp1) {
HXLINE( 396)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 396)			{
HXLINE( 396)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 396)				if (_this->_immutable) {
HXLINE( 396)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 396)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 396)					_this->_isimmutable();
            				}
            			}
HXDLIN( 396)			bool _hx_tmp2;
HXDLIN( 396)			if ((x == x)) {
HXLINE( 396)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 396)				_hx_tmp2 = true;
            			}
HXDLIN( 396)			if (_hx_tmp2) {
HXLINE( 396)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 396)			bool _hx_tmp3;
HXDLIN( 396)			bool _hx_tmp4;
HXDLIN( 396)			if (hx::IsNotNull( ret )) {
HXLINE( 396)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 396)				_hx_tmp4 = false;
            			}
HXDLIN( 396)			if (_hx_tmp4) {
HXLINE( 396)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 396)			{
HXLINE( 396)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 396)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 396)					_this1->_validate();
            				}
            			}
HXDLIN( 396)			if ((ret->zpp_inner->x == x)) {
HXLINE( 396)				bool _hx_tmp5;
HXDLIN( 396)				if (hx::IsNotNull( ret )) {
HXLINE( 396)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 396)					_hx_tmp5 = false;
            				}
HXDLIN( 396)				if (_hx_tmp5) {
HXLINE( 396)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 396)				{
HXLINE( 396)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 396)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 396)						_this2->_validate();
            					}
            				}
HXDLIN( 396)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 396)				_hx_tmp3 = false;
            			}
HXDLIN( 396)			if (!(_hx_tmp3)) {
HXLINE( 396)				{
HXLINE( 396)					ret->zpp_inner->x = x;
HXDLIN( 396)					ret->zpp_inner->y = y;
            				}
HXDLIN( 396)				{
HXLINE( 396)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 396)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 396)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 396)		ret->zpp_inner->weak = false;
HXDLIN( 396)		this->wrap_n = ret;
HXLINE( 397)		this->wrap_n->zpp_inner->_inuse = true;
HXLINE( 398)		this->wrap_n->zpp_inner->_validate = this->validate_n_dyn();
HXLINE( 399)		this->wrap_n->zpp_inner->_invalidate = this->invalidate_n_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,setup_n,(void))

void ZPP_LineJoint_obj::validate_norm(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_403_validate_norm)
HXDLIN( 403)		if (this->zip_n) {
HXLINE( 404)			this->zip_n = false;
HXLINE( 405)			{
HXLINE( 406)				Float d = ((this->nlocalx * this->nlocalx) + (this->nlocaly * this->nlocaly));
HXLINE( 415)				Float imag = (((Float)1.0) / ::Math_obj::sqrt(d));
HXLINE( 416)				{
HXLINE( 417)					Float t = imag;
HXLINE( 426)					 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 426)					_hx_tmp->nlocalx = (_hx_tmp->nlocalx * t);
HXLINE( 427)					 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 427)					_hx_tmp1->nlocaly = (_hx_tmp1->nlocaly * t);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_LineJoint_obj,validate_norm,(void))

 ::nape::constraint::Constraint ZPP_LineJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_442_copy)
HXLINE( 443)		 ::nape::constraint::LineJoint _this = this->outer_zn;
HXDLIN( 443)		if (hx::IsNull( _this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 443)			_this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 443)		 ::nape::geom::Vec2 ret = _this->zpp_inner_zn->wrap_a1;
HXDLIN( 443)		 ::nape::constraint::LineJoint _this1 = this->outer_zn;
HXDLIN( 443)		if (hx::IsNull( _this1->zpp_inner_zn->wrap_a2 )) {
HXLINE( 443)			_this1->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 443)		 ::nape::geom::Vec2 ret1 = _this1->zpp_inner_zn->wrap_a2;
HXDLIN( 443)		 ::nape::constraint::LineJoint _this2 = this->outer_zn;
HXDLIN( 443)		if (hx::IsNull( _this2->zpp_inner_zn->wrap_n )) {
HXLINE( 443)			_this2->zpp_inner_zn->setup_n();
            		}
HXDLIN( 443)		 ::nape::constraint::LineJoint ret2 =  ::nape::constraint::LineJoint_obj::__alloc( HX_CTX ,null(),null(),ret,ret1,_this2->zpp_inner_zn->wrap_n,this->jointMin,this->jointMax);
HXLINE( 444)		this->copyto(ret2);
HXLINE( 446)		bool _hx_tmp;
HXDLIN( 446)		if (hx::IsNotNull( dict )) {
HXLINE( 446)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 446)			_hx_tmp = false;
            		}
HXDLIN( 446)		if (_hx_tmp) {
HXLINE( 455)			 ::nape::phys::Body b = null();
HXLINE( 456)			{
HXLINE( 456)				int _g = 0;
HXDLIN( 456)				while((_g < dict->length)){
HXLINE( 456)					 ::zpp_nape::constraint::ZPP_CopyHelper idc = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 456)					_g = (_g + 1);
HXLINE( 457)					if ((idc->id == this->b1->id)) {
HXLINE( 458)						b = idc->bc;
HXLINE( 459)						goto _hx_goto_14;
            					}
            				}
            				_hx_goto_14:;
            			}
HXLINE( 462)			if (hx::IsNotNull( b )) {
HXLINE( 462)				ret2->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::LineJoint,ret2) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_463_copy)
HXLINE( 463)					ret2->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 463)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret2))));
            			}
            		}
HXLINE( 467)		bool _hx_tmp1;
HXDLIN( 467)		if (hx::IsNotNull( dict )) {
HXLINE( 467)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 467)			_hx_tmp1 = false;
            		}
HXDLIN( 467)		if (_hx_tmp1) {
HXLINE( 476)			 ::nape::phys::Body b2 = null();
HXLINE( 477)			{
HXLINE( 477)				int _g1 = 0;
HXDLIN( 477)				while((_g1 < dict->length)){
HXLINE( 477)					 ::zpp_nape::constraint::ZPP_CopyHelper idc1 = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 477)					_g1 = (_g1 + 1);
HXLINE( 478)					if ((idc1->id == this->b2->id)) {
HXLINE( 479)						b2 = idc1->bc;
HXLINE( 480)						goto _hx_goto_15;
            					}
            				}
            				_hx_goto_15:;
            			}
HXLINE( 483)			if (hx::IsNotNull( b2 )) {
HXLINE( 483)				ret2->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::LineJoint,ret2) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_484_copy)
HXLINE( 484)					ret2->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 484)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret2))));
            			}
            		}
HXLINE( 487)		return ret2;
            	}


void ZPP_LineJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_642_validate)
HXLINE( 643)		bool _hx_tmp;
HXDLIN( 643)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 643)			_hx_tmp = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 643)			_hx_tmp = true;
            		}
HXDLIN( 643)		if (_hx_tmp) {
HXLINE( 643)			HX_STACK_DO_THROW(HX_("Error: AngleJoint cannot be simulated null bodies",fe,18,41,78));
            		}
HXLINE( 644)		if (hx::IsEq( this->b1,this->b2 )) {
HXLINE( 644)			HX_STACK_DO_THROW(HX_("Error: DistanceJoint cannot be simulated with body1 == body2",a2,9e,0d,a5));
            		}
HXLINE( 645)		bool _hx_tmp1;
HXDLIN( 645)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 645)			_hx_tmp1 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 645)			_hx_tmp1 = true;
            		}
HXDLIN( 645)		if (_hx_tmp1) {
HXLINE( 645)			HX_STACK_DO_THROW(HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned",e8,8c,93,57));
            		}
HXLINE( 646)		if ((this->jointMin > this->jointMax)) {
HXLINE( 646)			HX_STACK_DO_THROW(HX_("Error: DistanceJoint must have jointMin <= jointMax",7b,40,7d,69));
            		}
HXLINE( 647)		if ((((this->nlocalx * this->nlocalx) + (this->nlocaly * this->nlocaly)) < ::nape::Config_obj::epsilon)) {
HXLINE( 647)			HX_STACK_DO_THROW(HX_("Error: DistanceJoint direction must be non-degenerate",76,b7,0d,04));
            		}
HXLINE( 648)		bool _hx_tmp2;
HXDLIN( 648)		if ((this->b1->type != 2)) {
HXLINE( 648)			_hx_tmp2 = (this->b2->type != 2);
            		}
            		else {
HXLINE( 648)			_hx_tmp2 = false;
            		}
HXDLIN( 648)		if (_hx_tmp2) {
HXLINE( 648)			HX_STACK_DO_THROW(HX_("Error: Constraints cannot have both bodies non-dynamic",cb,b3,6c,eb));
            		}
            	}


void ZPP_LineJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_650_wake_connected)
HXLINE( 651)		bool _hx_tmp;
HXDLIN( 651)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 651)			_hx_tmp = (this->b1->type == 2);
            		}
            		else {
HXLINE( 651)			_hx_tmp = false;
            		}
HXDLIN( 651)		if (_hx_tmp) {
HXLINE( 651)			this->b1->wake();
            		}
HXLINE( 652)		bool _hx_tmp1;
HXDLIN( 652)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 652)			_hx_tmp1 = (this->b2->type == 2);
            		}
            		else {
HXLINE( 652)			_hx_tmp1 = false;
            		}
HXDLIN( 652)		if (_hx_tmp1) {
HXLINE( 652)			this->b2->wake();
            		}
            	}


void ZPP_LineJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_654_forest)
HXLINE( 655)		if ((this->b1->type == 2)) {
HXLINE( 656)			 ::zpp_nape::space::ZPP_Component xr;
HXDLIN( 656)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 656)				xr = this->b1->component;
            			}
            			else {
HXLINE( 659)				 ::zpp_nape::space::ZPP_Component obj = this->b1->component;
HXLINE( 660)				 ::zpp_nape::space::ZPP_Component stack = null();
HXLINE( 661)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 662)					 ::zpp_nape::space::ZPP_Component nxt = obj->parent;
HXLINE( 663)					obj->parent = stack;
HXLINE( 664)					stack = obj;
HXLINE( 665)					obj = nxt;
            				}
HXLINE( 667)				while(hx::IsNotNull( stack )){
HXLINE( 668)					 ::zpp_nape::space::ZPP_Component nxt1 = stack->parent;
HXLINE( 669)					stack->parent = obj;
HXLINE( 670)					stack = nxt1;
            				}
HXLINE( 656)				xr = obj;
            			}
HXLINE( 675)			 ::zpp_nape::space::ZPP_Component yr;
HXDLIN( 675)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 675)				yr = this->component;
            			}
            			else {
HXLINE( 678)				 ::zpp_nape::space::ZPP_Component obj1 = this->component;
HXLINE( 679)				 ::zpp_nape::space::ZPP_Component stack1 = null();
HXLINE( 680)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 681)					 ::zpp_nape::space::ZPP_Component nxt2 = obj1->parent;
HXLINE( 682)					obj1->parent = stack1;
HXLINE( 683)					stack1 = obj1;
HXLINE( 684)					obj1 = nxt2;
            				}
HXLINE( 686)				while(hx::IsNotNull( stack1 )){
HXLINE( 687)					 ::zpp_nape::space::ZPP_Component nxt3 = stack1->parent;
HXLINE( 688)					stack1->parent = obj1;
HXLINE( 689)					stack1 = nxt3;
            				}
HXLINE( 675)				yr = obj1;
            			}
HXLINE( 694)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 695)				if ((xr->rank < yr->rank)) {
HXLINE( 695)					xr->parent = yr;
            				}
            				else {
HXLINE( 696)					if ((xr->rank > yr->rank)) {
HXLINE( 696)						yr->parent = xr;
            					}
            					else {
HXLINE( 698)						yr->parent = xr;
HXLINE( 699)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 703)		if ((this->b2->type == 2)) {
HXLINE( 704)			 ::zpp_nape::space::ZPP_Component xr1;
HXDLIN( 704)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE( 704)				xr1 = this->b2->component;
            			}
            			else {
HXLINE( 707)				 ::zpp_nape::space::ZPP_Component obj2 = this->b2->component;
HXLINE( 708)				 ::zpp_nape::space::ZPP_Component stack2 = null();
HXLINE( 709)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 710)					 ::zpp_nape::space::ZPP_Component nxt4 = obj2->parent;
HXLINE( 711)					obj2->parent = stack2;
HXLINE( 712)					stack2 = obj2;
HXLINE( 713)					obj2 = nxt4;
            				}
HXLINE( 715)				while(hx::IsNotNull( stack2 )){
HXLINE( 716)					 ::zpp_nape::space::ZPP_Component nxt5 = stack2->parent;
HXLINE( 717)					stack2->parent = obj2;
HXLINE( 718)					stack2 = nxt5;
            				}
HXLINE( 704)				xr1 = obj2;
            			}
HXLINE( 723)			 ::zpp_nape::space::ZPP_Component yr1;
HXDLIN( 723)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 723)				yr1 = this->component;
            			}
            			else {
HXLINE( 726)				 ::zpp_nape::space::ZPP_Component obj3 = this->component;
HXLINE( 727)				 ::zpp_nape::space::ZPP_Component stack3 = null();
HXLINE( 728)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 729)					 ::zpp_nape::space::ZPP_Component nxt6 = obj3->parent;
HXLINE( 730)					obj3->parent = stack3;
HXLINE( 731)					stack3 = obj3;
HXLINE( 732)					obj3 = nxt6;
            				}
HXLINE( 734)				while(hx::IsNotNull( stack3 )){
HXLINE( 735)					 ::zpp_nape::space::ZPP_Component nxt7 = stack3->parent;
HXLINE( 736)					stack3->parent = obj3;
HXLINE( 737)					stack3 = nxt7;
            				}
HXLINE( 723)				yr1 = obj3;
            			}
HXLINE( 742)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE( 743)				if ((xr1->rank < yr1->rank)) {
HXLINE( 743)					xr1->parent = yr1;
            				}
            				else {
HXLINE( 744)					if ((xr1->rank > yr1->rank)) {
HXLINE( 744)						yr1->parent = xr1;
            					}
            					else {
HXLINE( 746)						yr1->parent = xr1;
HXLINE( 747)						xr1->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_LineJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_753_pair_exists)
HXDLIN( 753)		bool _hx_tmp;
HXDLIN( 753)		if ((this->b1->id == id)) {
HXDLIN( 753)			_hx_tmp = (this->b2->id == di);
            		}
            		else {
HXDLIN( 753)			_hx_tmp = false;
            		}
HXDLIN( 753)		if (!(_hx_tmp)) {
HXDLIN( 753)			if ((this->b1->id == di)) {
HXDLIN( 753)				return (this->b2->id == id);
            			}
            			else {
HXDLIN( 753)				return false;
            			}
            		}
            		else {
HXDLIN( 753)			return true;
            		}
HXDLIN( 753)		return false;
            	}


void ZPP_LineJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_755_clearcache)
HXLINE( 756)		{
HXLINE( 757)			this->jAccx = ( (Float)(0) );
HXLINE( 758)			this->jAccy = ( (Float)(0) );
            		}
HXLINE( 776)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_LineJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_778_preStep)
HXLINE( 779)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 779)			this->pre_dt = dt;
            		}
HXLINE( 780)		Float dtratio = (dt / this->pre_dt);
HXLINE( 781)		this->pre_dt = dt;
HXLINE( 782)		this->equal = (this->jointMin == this->jointMax);
HXLINE( 783)		this->stepped = true;
HXLINE( 784)		this->validate_norm();
HXLINE( 785)		{
HXLINE( 786)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 787)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 789)		{
HXLINE( 790)			this->nrelx = ((this->b1->axisy * this->nlocalx) - (this->b1->axisx * this->nlocaly));
HXLINE( 791)			this->nrely = ((this->nlocalx * this->b1->axisx) + (this->nlocaly * this->b1->axisy));
            		}
HXLINE( 793)		{
HXLINE( 794)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 795)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 797)		Float dx = ((Float)0.0);
HXLINE( 798)		Float dy = ((Float)0.0);
HXLINE( 799)		Float Cx = ((Float)0.0);
HXLINE( 800)		Float Cy = ((Float)0.0);
HXLINE( 801)		{
HXLINE( 802)			dx = (((this->b2->posx + this->a2relx) - this->b1->posx) - this->a1relx);
HXLINE( 803)			dy = (((this->b2->posy + this->a2rely) - this->b1->posy) - this->a1rely);
HXLINE( 804)			Cx = ((dy * this->nrelx) - (dx * this->nrely));
HXLINE( 805)			Cy = ((this->nrelx * dx) + (this->nrely * dy));
HXLINE( 806)			if (this->equal) {
HXLINE( 807)				Cy = (Cy - this->jointMin);
HXLINE( 808)				this->scale = ((Float)1.0);
            			}
            			else {
HXLINE( 810)				if ((Cy > this->jointMax)) {
HXLINE( 811)					Cy = (Cy - this->jointMax);
HXLINE( 812)					this->scale = ((Float)1.0);
            				}
            				else {
HXLINE( 814)					if ((Cy < this->jointMin)) {
HXLINE( 815)						Cy = (this->jointMin - Cy);
HXLINE( 816)						this->scale = ((Float)-1.0);
            					}
            					else {
HXLINE( 819)						Cy = ( (Float)(0) );
HXLINE( 820)						this->scale = ( (Float)(0) );
            					}
            				}
            			}
            		}
HXLINE( 823)		{
HXLINE( 824)			Float drx = ((Float)0.0);
HXLINE( 825)			Float dry = ((Float)0.0);
HXLINE( 826)			{
HXLINE( 827)				drx = (dx + this->a1relx);
HXLINE( 828)				dry = (dy + this->a1rely);
            			}
HXLINE( 830)			this->dot1 = ((this->nrelx * drx) + (this->nrely * dry));
HXLINE( 831)			this->cx1 = ((dry * this->nrelx) - (drx * this->nrely));
HXLINE( 832)			this->dot2 = ((this->nrelx * this->a2relx) + (this->nrely * this->a2rely));
HXLINE( 833)			this->cx2 = ((this->a2rely * this->nrelx) - (this->a2relx * this->nrely));
HXLINE( 834)			this->kMassa = (((this->b1->smass + this->b2->smass) + ((this->dot1 * this->dot1) * this->b1->sinertia)) + ((this->dot2 * this->dot2) * this->b2->sinertia));
HXLINE( 835)			this->kMassb = (-(this->scale) * (((this->dot1 * this->cx1) * this->b1->sinertia) + ((this->dot2 * this->cx2) * this->b2->sinertia)));
HXLINE( 836)			this->kMassc = ((this->scale * this->scale) * (((this->b1->smass + this->b2->smass) + ((this->cx1 * this->cx1) * this->b1->sinertia)) + ((this->cx2 * this->cx2) * this->b2->sinertia)));
            		}
HXLINE( 839)		Float det = ((this->kMassa * this->kMassc) - (this->kMassb * this->kMassb));
HXLINE( 838)		int flag;
HXLINE( 840)		if ((det != det)) {
HXLINE( 841)			this->kMassa = (this->kMassb = (this->kMassc = ( (Float)(0) )));
HXLINE( 838)			flag = 3;
            		}
            		else {
HXLINE( 844)			if ((det == 0)) {
HXLINE( 845)				int flag1 = 0;
HXLINE( 846)				if ((this->kMassa != 0)) {
HXLINE( 846)					this->kMassa = (( (Float)(1) ) / this->kMassa);
            				}
            				else {
HXLINE( 848)					this->kMassa = ( (Float)(0) );
HXLINE( 849)					flag1 = (flag1 | 1);
            				}
HXLINE( 851)				if ((this->kMassc != 0)) {
HXLINE( 851)					this->kMassc = (( (Float)(1) ) / this->kMassc);
            				}
            				else {
HXLINE( 853)					this->kMassc = ( (Float)(0) );
HXLINE( 854)					flag1 = (flag1 | 2);
            				}
HXLINE( 856)				this->kMassb = ( (Float)(0) );
HXLINE( 838)				flag = flag1;
            			}
            			else {
HXLINE( 860)				det = (( (Float)(1) ) / det);
HXLINE( 861)				Float t = (this->kMassc * det);
HXLINE( 862)				this->kMassc = (this->kMassa * det);
HXLINE( 863)				this->kMassa = t;
HXLINE( 864)				 ::zpp_nape::constraint::ZPP_LineJoint flag2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 864)				flag2->kMassb = (flag2->kMassb * -(det));
HXLINE( 838)				flag = 0;
            			}
            		}
HXLINE( 868)		if (((flag & 1) != 0)) {
HXLINE( 868)			this->jAccx = ( (Float)(0) );
            		}
HXLINE( 869)		if (((flag & 2) != 0)) {
HXLINE( 869)			this->jAccy = ( (Float)(0) );
            		}
HXLINE( 870)		if (!(this->stiff)) {
HXLINE( 871)			bool _hx_tmp;
HXDLIN( 871)			if (this->breakUnderError) {
HXLINE( 871)				_hx_tmp = (((Cx * Cx) + (Cy * Cy)) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE( 871)				_hx_tmp = false;
            			}
HXDLIN( 871)			if (_hx_tmp) {
HXLINE( 871)				return true;
            			}
HXLINE( 872)			Float biasCoef;
HXLINE( 873)			{
HXLINE( 875)				Float omega = ((( (Float)(2) ) * ::Math_obj::PI) * this->frequency);
HXLINE( 876)				this->gamma = (( (Float)(1) ) / ((dt * omega) * ((( (Float)(2) ) * this->damping) + (omega * dt))));
HXLINE( 877)				Float ig = (( (Float)(1) ) / (1 + this->gamma));
HXLINE( 878)				biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE( 879)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 879)				_hx_tmp1->gamma = (_hx_tmp1->gamma * ig);
HXLINE( 874)				Float X = ig;
HXLINE( 882)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 882)				_hx_tmp2->kMassa = (_hx_tmp2->kMassa * X);
HXLINE( 883)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 883)				_hx_tmp3->kMassb = (_hx_tmp3->kMassb * X);
HXLINE( 884)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 884)				_hx_tmp4->kMassc = (_hx_tmp4->kMassc * X);
            			}
HXLINE( 886)			{
HXLINE( 887)				this->biasx = Cx;
HXLINE( 888)				this->biasy = Cy;
            			}
HXLINE( 906)			{
HXLINE( 907)				Float t1 = -(biasCoef);
HXLINE( 916)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 916)				_hx_tmp5->biasx = (_hx_tmp5->biasx * t1);
HXLINE( 917)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 917)				_hx_tmp6->biasy = (_hx_tmp6->biasy * t1);
            			}
HXLINE( 919)			{
HXLINE( 920)				Float t2 = this->maxError;
HXLINE( 929)				Float ls = ((this->biasx * this->biasx) + (this->biasy * this->biasy));
HXLINE( 930)				if ((ls > (t2 * t2))) {
HXLINE( 940)					Float t3 = (t2 * (((Float)1.0) / ::Math_obj::sqrt(ls)));
HXLINE( 949)					 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 949)					_hx_tmp7->biasx = (_hx_tmp7->biasx * t3);
HXLINE( 950)					 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 950)					_hx_tmp8->biasy = (_hx_tmp8->biasy * t3);
            				}
            			}
            		}
            		else {
HXLINE( 956)			this->gamma = ( (Float)(0) );
HXLINE( 957)			{
HXLINE( 958)				this->biasx = ( (Float)(0) );
HXLINE( 959)				this->biasy = ( (Float)(0) );
            			}
            		}
HXLINE( 978)		{
HXLINE( 979)			Float t4 = dtratio;
HXLINE( 988)			 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 988)			_hx_tmp9->jAccx = (_hx_tmp9->jAccx * t4);
HXLINE( 989)			 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 989)			_hx_tmp10->jAccy = (_hx_tmp10->jAccy * t4);
            		}
HXLINE( 991)		this->jMax = (this->maxForce * dt);
HXLINE( 992)		return false;
            	}


void ZPP_LineJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_995_warmStart)
HXLINE( 996)		Float J2x = (((this->scale * this->nrelx) * this->jAccy) - (this->nrely * this->jAccx));
HXLINE( 997)		Float J2y = ((this->nrelx * this->jAccx) + ((this->scale * this->nrely) * this->jAccy));
HXLINE(1044)		{
HXLINE(1045)			{
HXLINE(1046)				Float t = this->b1->imass;
HXLINE(1055)				 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN(1055)				_hx_tmp->velx = (_hx_tmp->velx - (J2x * t));
HXLINE(1056)				 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1056)				_hx_tmp1->vely = (_hx_tmp1->vely - (J2y * t));
            			}
HXLINE(1058)			{
HXLINE(1059)				Float t1 = this->b2->imass;
HXLINE(1068)				 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN(1068)				_hx_tmp2->velx = (_hx_tmp2->velx + (J2x * t1));
HXLINE(1069)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1069)				_hx_tmp3->vely = (_hx_tmp3->vely + (J2y * t1));
            			}
HXLINE(1071)			 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN(1071)			_hx_tmp4->angvel = (_hx_tmp4->angvel + ((((this->scale * this->cx1) * this->jAccy) - (this->dot1 * this->jAccx)) * this->b1->iinertia));
HXLINE(1072)			 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(1072)			_hx_tmp5->angvel = (_hx_tmp5->angvel + (((this->dot2 * this->jAccx) - ((this->scale * this->cx2) * this->jAccy)) * this->b2->iinertia));
            		}
            	}


bool ZPP_LineJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_1076_applyImpulseVel)
HXLINE(1077)		Float Ex = ((Float)0.0);
HXLINE(1078)		Float Ey = ((Float)0.0);
HXLINE(1079)		{
HXLINE(1080)			Float dvx = ((Float)0.0);
HXLINE(1081)			Float dvy = ((Float)0.0);
HXLINE(1082)			{
HXLINE(1083)				dvx = (this->b2->velx - this->b1->velx);
HXLINE(1084)				dvy = (this->b2->vely - this->b1->vely);
            			}
HXLINE(1086)			dvx = (dvx + (this->b2->kinvelx - this->b1->kinvelx));
HXLINE(1087)			dvy = (dvy + (this->b2->kinvely - this->b1->kinvely));
HXLINE(1088)			Ex = ((((dvy * this->nrelx) - (dvx * this->nrely)) + ((this->b2->angvel + this->b2->kinangvel) * this->dot2)) - ((this->b1->angvel + this->b1->kinangvel) * this->dot1));
HXLINE(1089)			Ey = (this->scale * ((((this->nrelx * dvx) + (this->nrely * dvy)) - ((this->b2->angvel + this->b2->kinangvel) * this->cx2)) + ((this->b1->angvel + this->b1->kinangvel) * this->cx1)));
            		}
HXLINE(1091)		Float Jx = ((Float)0.0);
HXLINE(1092)		Float Jy = ((Float)0.0);
HXLINE(1093)		{
HXLINE(1094)			Jx = (this->biasx - Ex);
HXLINE(1095)			Jy = (this->biasy - Ey);
            		}
HXLINE(1097)		{
HXLINE(1098)			Float t = ((this->kMassa * Jx) + (this->kMassb * Jy));
HXLINE(1099)			Jy = ((this->kMassb * Jx) + (this->kMassc * Jy));
HXLINE(1100)			Jx = t;
            		}
HXLINE(1102)		{
HXLINE(1103)			Float t1 = this->gamma;
HXLINE(1112)			Jx = (Jx - (this->jAccx * t1));
HXLINE(1113)			Jy = (Jy - (this->jAccy * t1));
            		}
HXLINE(1115)		{
HXLINE(1116)			Float jOldx = ((Float)0.0);
HXLINE(1117)			Float jOldy = ((Float)0.0);
HXLINE(1118)			{
HXLINE(1119)				jOldx = this->jAccx;
HXLINE(1120)				jOldy = this->jAccy;
            			}
HXLINE(1138)			{
HXLINE(1139)				Float t2 = ((Float)1.0);
HXLINE(1148)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1148)				_hx_tmp->jAccx = (_hx_tmp->jAccx + (Jx * t2));
HXLINE(1149)				 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1149)				_hx_tmp1->jAccy = (_hx_tmp1->jAccy + (Jy * t2));
            			}
HXLINE(1151)			{
HXLINE(1152)				if ((this->jAccy > 0)) {
HXLINE(1152)					this->jAccy = ( (Float)(0) );
            				}
HXLINE(1153)				if (this->breakUnderForce) {
HXLINE(1154)					if ((((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy)) > (this->jMax * this->jMax))) {
HXLINE(1154)						return true;
            					}
            				}
            				else {
HXLINE(1156)					if (!(this->stiff)) {
HXLINE(1157)						Float t3 = this->jMax;
HXLINE(1166)						Float ls = ((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy));
HXLINE(1167)						if ((ls > (t3 * t3))) {
HXLINE(1177)							Float t4 = (t3 * (((Float)1.0) / ::Math_obj::sqrt(ls)));
HXLINE(1186)							 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1186)							_hx_tmp2->jAccx = (_hx_tmp2->jAccx * t4);
HXLINE(1187)							 ::zpp_nape::constraint::ZPP_LineJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1187)							_hx_tmp3->jAccy = (_hx_tmp3->jAccy * t4);
            						}
            					}
            				}
            			}
HXLINE(1192)			{
HXLINE(1193)				Jx = (this->jAccx - jOldx);
HXLINE(1194)				Jy = (this->jAccy - jOldy);
            			}
            		}
HXLINE(1197)		{
HXLINE(1198)			Float J2x = (((this->scale * this->nrelx) * Jy) - (this->nrely * Jx));
HXLINE(1199)			Float J2y = ((this->nrelx * Jx) + ((this->scale * this->nrely) * Jy));
HXLINE(1246)			{
HXLINE(1247)				{
HXLINE(1248)					Float t5 = this->b1->imass;
HXLINE(1257)					 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN(1257)					_hx_tmp4->velx = (_hx_tmp4->velx - (J2x * t5));
HXLINE(1258)					 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1258)					_hx_tmp5->vely = (_hx_tmp5->vely - (J2y * t5));
            				}
HXLINE(1260)				{
HXLINE(1261)					Float t6 = this->b2->imass;
HXLINE(1270)					 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN(1270)					_hx_tmp6->velx = (_hx_tmp6->velx + (J2x * t6));
HXLINE(1271)					 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1271)					_hx_tmp7->vely = (_hx_tmp7->vely + (J2y * t6));
            				}
HXLINE(1273)				 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(1273)				_hx_tmp8->angvel = (_hx_tmp8->angvel + ((((this->scale * this->cx1) * Jy) - (this->dot1 * Jx)) * this->b1->iinertia));
HXLINE(1274)				 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(1274)				_hx_tmp9->angvel = (_hx_tmp9->angvel + (((this->dot2 * Jx) - ((this->scale * this->cx2) * Jy)) * this->b2->iinertia));
            			}
            		}
HXLINE(1277)		return false;
            	}


bool ZPP_LineJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_1279_applyImpulsePos)
HXLINE(1280)		Float nx = ((Float)0.0);
HXLINE(1281)		Float ny = ((Float)0.0);
HXLINE(1283)		{
HXLINE(1284)			nx = ((this->b1->axisy * this->nlocalx) - (this->b1->axisx * this->nlocaly));
HXLINE(1285)			ny = ((this->nlocalx * this->b1->axisx) + (this->nlocaly * this->b1->axisy));
            		}
HXLINE(1288)		Float r1x = ((Float)0.0);
HXLINE(1289)		Float r1y = ((Float)0.0);
HXLINE(1291)		{
HXLINE(1292)			r1x = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE(1293)			r1y = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE(1296)		Float r2x = ((Float)0.0);
HXLINE(1297)		Float r2y = ((Float)0.0);
HXLINE(1299)		{
HXLINE(1300)			r2x = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE(1301)			r2y = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE(1304)		Float dx = ((Float)0.0);
HXLINE(1305)		Float dy = ((Float)0.0);
HXLINE(1306)		Float scale;
HXLINE(1307)		Float Ex = ((Float)0.0);
HXLINE(1308)		Float Ey = ((Float)0.0);
HXLINE(1309)		{
HXLINE(1310)			dx = (((this->b2->posx + r2x) - this->b1->posx) - r1x);
HXLINE(1311)			dy = (((this->b2->posy + r2y) - this->b1->posy) - r1y);
HXLINE(1312)			Ex = ((dy * nx) - (dx * ny));
HXLINE(1313)			Ey = ((nx * dx) + (ny * dy));
HXLINE(1314)			if (this->equal) {
HXLINE(1315)				Ey = (Ey - this->jointMin);
HXLINE(1316)				scale = ((Float)1.0);
            			}
            			else {
HXLINE(1318)				if ((Ey > this->jointMax)) {
HXLINE(1319)					Ey = (Ey - this->jointMax);
HXLINE(1320)					scale = ((Float)1.0);
            				}
            				else {
HXLINE(1322)					if ((Ey < this->jointMin)) {
HXLINE(1323)						Ey = (this->jointMin - Ey);
HXLINE(1324)						scale = ((Float)-1.0);
            					}
            					else {
HXLINE(1327)						Ey = ( (Float)(0) );
HXLINE(1328)						scale = ( (Float)(0) );
            					}
            				}
            			}
            		}
HXLINE(1331)		bool _hx_tmp;
HXDLIN(1331)		if (this->breakUnderError) {
HXLINE(1331)			_hx_tmp = (((Ex * Ex) + (Ey * Ey)) > (this->maxError * this->maxError));
            		}
            		else {
HXLINE(1331)			_hx_tmp = false;
            		}
HXDLIN(1331)		if (_hx_tmp) {
HXLINE(1331)			return true;
            		}
HXLINE(1332)		if ((((Ex * Ex) + (Ey * Ey)) < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE(1332)			return false;
            		}
HXLINE(1333)		Float Jx = ((Float)0.0);
HXLINE(1334)		Float Jy = ((Float)0.0);
HXLINE(1335)		{
HXLINE(1336)			Float t = ((Float)0.5);
HXLINE(1345)			Ex = (Ex * t);
HXLINE(1346)			Ey = (Ey * t);
            		}
HXLINE(1348)		if ((((Ex * Ex) + (Ey * Ey)) > 6)) {
HXLINE(1349)			Float k = (this->b1->smass + this->b2->smass);
HXLINE(1350)			if ((k > ::nape::Config_obj::epsilon)) {
HXLINE(1351)				k = (((Float)0.8) / k);
HXLINE(1352)				Float Jx1 = (k * ((ny * Ex) - ((scale * nx) * Ey)));
HXLINE(1353)				Float Jy1 = (k * (((nx * Ex) * scale) - (ny * Ex)));
HXLINE(1370)				{
HXLINE(1371)					Float t1 = this->b1->imass;
HXLINE(1380)					 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1380)					_hx_tmp1->posx = (_hx_tmp1->posx - (Jx1 * t1));
HXLINE(1381)					 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1381)					_hx_tmp2->posy = (_hx_tmp2->posy - (Jy1 * t1));
            				}
HXLINE(1383)				{
HXLINE(1384)					Float t2 = this->b2->imass;
HXLINE(1393)					 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1393)					_hx_tmp3->posx = (_hx_tmp3->posx + (Jx1 * t2));
HXLINE(1394)					 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1394)					_hx_tmp4->posy = (_hx_tmp4->posy + (Jy1 * t2));
            				}
HXLINE(1396)				{
HXLINE(1397)					dx = (((this->b2->posx + r2x) - this->b1->posx) - r1x);
HXLINE(1398)					dy = (((this->b2->posy + r2y) - this->b1->posy) - r1y);
HXLINE(1399)					Ex = ((dy * nx) - (dx * ny));
HXLINE(1400)					Ey = ((nx * dx) + (ny * dy));
HXLINE(1401)					if (this->equal) {
HXLINE(1402)						Ey = (Ey - this->jointMin);
HXLINE(1403)						scale = ((Float)1.0);
            					}
            					else {
HXLINE(1405)						if ((Ey > this->jointMax)) {
HXLINE(1406)							Ey = (Ey - this->jointMax);
HXLINE(1407)							scale = ((Float)1.0);
            						}
            						else {
HXLINE(1409)							if ((Ey < this->jointMin)) {
HXLINE(1410)								Ey = (this->jointMin - Ey);
HXLINE(1411)								scale = ((Float)-1.0);
            							}
            							else {
HXLINE(1414)								Ey = ( (Float)(0) );
HXLINE(1415)								scale = ( (Float)(0) );
            							}
            						}
            					}
            				}
HXLINE(1418)				{
HXLINE(1419)					Float t3 = ((Float)0.5);
HXLINE(1428)					Ex = (Ex * t3);
HXLINE(1429)					Ey = (Ey * t3);
            				}
            			}
            		}
HXLINE(1433)		Float dot1;
HXDLIN(1433)		Float dot2;
HXDLIN(1433)		Float cx1;
HXDLIN(1433)		Float cx2;
HXLINE(1434)		Float Ka = ((Float)0.0);
HXLINE(1435)		Float Kb = ((Float)0.0);
HXLINE(1436)		Float Kc = ((Float)0.0);
HXLINE(1437)		{
HXLINE(1438)			Float drx = ((Float)0.0);
HXLINE(1439)			Float dry = ((Float)0.0);
HXLINE(1440)			{
HXLINE(1441)				drx = (dx + r1x);
HXLINE(1442)				dry = (dy + r1y);
            			}
HXLINE(1444)			dot1 = ((nx * drx) + (ny * dry));
HXLINE(1445)			cx1 = ((dry * nx) - (drx * ny));
HXLINE(1446)			dot2 = ((nx * r2x) + (ny * r2y));
HXLINE(1447)			cx2 = ((r2y * nx) - (r2x * ny));
HXLINE(1448)			Ka = (((this->b1->smass + this->b2->smass) + ((dot1 * dot1) * this->b1->sinertia)) + ((dot2 * dot2) * this->b2->sinertia));
HXLINE(1449)			Kb = (-(scale) * (((dot1 * cx1) * this->b1->sinertia) + ((dot2 * cx2) * this->b2->sinertia)));
HXLINE(1450)			Kc = ((scale * scale) * (((this->b1->smass + this->b2->smass) + ((cx1 * cx1) * this->b1->sinertia)) + ((cx2 * cx2) * this->b2->sinertia)));
            		}
HXLINE(1452)		{
HXLINE(1453)			Jx = -(Ex);
HXLINE(1454)			Jy = -(Ey);
            		}
HXLINE(1472)		{
HXLINE(1473)			Float det = ((Ka * Kc) - (Kb * Kb));
HXLINE(1474)			if ((det != det)) {
HXLINE(1474)				Jy = ( (Float)(0) );
HXDLIN(1474)				Jx = Jy;
            			}
            			else {
HXLINE(1475)				if ((det == 0)) {
HXLINE(1476)					if ((Ka != 0)) {
HXLINE(1476)						Jx = (Jx / Ka);
            					}
            					else {
HXLINE(1477)						Jx = ( (Float)(0) );
            					}
HXLINE(1478)					if ((Kc != 0)) {
HXLINE(1478)						Jy = (Jy / Kc);
            					}
            					else {
HXLINE(1479)						Jy = ( (Float)(0) );
            					}
            				}
            				else {
HXLINE(1482)					det = (( (Float)(1) ) / det);
HXLINE(1483)					Float t4 = (det * ((Kc * Jx) - (Kb * Jy)));
HXLINE(1484)					Jy = (det * ((Ka * Jy) - (Kb * Jx)));
HXLINE(1485)					Jx = t4;
            				}
            			}
            		}
HXLINE(1488)		if ((Jy > 0)) {
HXLINE(1488)			Jy = ( (Float)(0) );
            		}
HXLINE(1489)		{
HXLINE(1490)			Float J2x = (((scale * nx) * Jy) - (ny * Jx));
HXLINE(1491)			Float J2y = ((nx * Jx) + ((scale * ny) * Jy));
HXLINE(1508)			{
HXLINE(1509)				{
HXLINE(1510)					Float t5 = this->b1->imass;
HXLINE(1519)					 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1519)					_hx_tmp5->posx = (_hx_tmp5->posx - (J2x * t5));
HXLINE(1520)					 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1520)					_hx_tmp6->posy = (_hx_tmp6->posy - (J2y * t5));
            				}
HXLINE(1522)				{
HXLINE(1523)					Float t6 = this->b2->imass;
HXLINE(1532)					 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1532)					_hx_tmp7->posx = (_hx_tmp7->posx + (J2x * t6));
HXLINE(1533)					 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN(1533)					_hx_tmp8->posy = (_hx_tmp8->posy + (J2y * t6));
            				}
HXLINE(1535)				{
HXLINE(1535)					 ::zpp_nape::phys::ZPP_Body _this = this->b1;
HXDLIN(1535)					Float dr = ((((scale * cx1) * Jy) - (dot1 * Jx)) * this->b1->iinertia);
HXDLIN(1535)					 ::zpp_nape::phys::ZPP_Body _this1 = _this;
HXDLIN(1535)					_this1->rot = (_this1->rot + dr);
HXDLIN(1535)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE(1535)						_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1535)						_this->axisy = ::Math_obj::cos(_this->rot);
            					}
            					else {
HXLINE(1535)						Float d2 = (dr * dr);
HXDLIN(1535)						Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(1535)						Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(1535)						Float nx1 = (((p * _this->axisx) + (dr * _this->axisy)) * m);
HXDLIN(1535)						_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m);
HXDLIN(1535)						_this->axisx = nx1;
            					}
            				}
HXLINE(1536)				{
HXLINE(1536)					 ::zpp_nape::phys::ZPP_Body _this2 = this->b2;
HXDLIN(1536)					Float dr1 = (((dot2 * Jx) - ((scale * cx2) * Jy)) * this->b2->iinertia);
HXDLIN(1536)					 ::zpp_nape::phys::ZPP_Body _this3 = _this2;
HXDLIN(1536)					_this3->rot = (_this3->rot + dr1);
HXDLIN(1536)					if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(1536)						_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(1536)						_this2->axisy = ::Math_obj::cos(_this2->rot);
            					}
            					else {
HXLINE(1536)						Float d21 = (dr1 * dr1);
HXDLIN(1536)						Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(1536)						Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(1536)						Float nx2 = (((p1 * _this2->axisx) + (dr1 * _this2->axisy)) * m1);
HXDLIN(1536)						_this2->axisy = (((p1 * _this2->axisy) - (dr1 * _this2->axisx)) * m1);
HXDLIN(1536)						_this2->axisx = nx2;
            					}
            				}
            			}
            		}
HXLINE(1569)		return false;
            	}


void ZPP_LineJoint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_055eea2e73d7d8b0_1571_draw)
            	}



hx::ObjectPtr< ZPP_LineJoint_obj > ZPP_LineJoint_obj::__new() {
	hx::ObjectPtr< ZPP_LineJoint_obj > __this = new ZPP_LineJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_LineJoint_obj > ZPP_LineJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_LineJoint_obj *__this = (ZPP_LineJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_LineJoint_obj), true, "zpp_nape.constraint.ZPP_LineJoint"));
	*(void **)__this = ZPP_LineJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_LineJoint_obj::ZPP_LineJoint_obj()
{
}

void ZPP_LineJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_LineJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(jointMin,"jointMin");
	HX_MARK_MEMBER_NAME(jointMax,"jointMax");
	HX_MARK_MEMBER_NAME(equal,"equal");
	HX_MARK_MEMBER_NAME(dot1,"dot1");
	HX_MARK_MEMBER_NAME(dot2,"dot2");
	HX_MARK_MEMBER_NAME(cx1,"cx1");
	HX_MARK_MEMBER_NAME(cx2,"cx2");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(a1localx,"a1localx");
	HX_MARK_MEMBER_NAME(a1localy,"a1localy");
	HX_MARK_MEMBER_NAME(a1relx,"a1relx");
	HX_MARK_MEMBER_NAME(a1rely,"a1rely");
	HX_MARK_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(a2localx,"a2localx");
	HX_MARK_MEMBER_NAME(a2localy,"a2localy");
	HX_MARK_MEMBER_NAME(a2relx,"a2relx");
	HX_MARK_MEMBER_NAME(a2rely,"a2rely");
	HX_MARK_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_MARK_MEMBER_NAME(zip_n,"zip_n");
	HX_MARK_MEMBER_NAME(nlocalx,"nlocalx");
	HX_MARK_MEMBER_NAME(nlocaly,"nlocaly");
	HX_MARK_MEMBER_NAME(nrelx,"nrelx");
	HX_MARK_MEMBER_NAME(nrely,"nrely");
	HX_MARK_MEMBER_NAME(wrap_n,"wrap_n");
	HX_MARK_MEMBER_NAME(kMassa,"kMassa");
	HX_MARK_MEMBER_NAME(kMassb,"kMassb");
	HX_MARK_MEMBER_NAME(kMassc,"kMassc");
	HX_MARK_MEMBER_NAME(jAccx,"jAccx");
	HX_MARK_MEMBER_NAME(jAccy,"jAccy");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(biasx,"biasx");
	HX_MARK_MEMBER_NAME(biasy,"biasy");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_LineJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(jointMin,"jointMin");
	HX_VISIT_MEMBER_NAME(jointMax,"jointMax");
	HX_VISIT_MEMBER_NAME(equal,"equal");
	HX_VISIT_MEMBER_NAME(dot1,"dot1");
	HX_VISIT_MEMBER_NAME(dot2,"dot2");
	HX_VISIT_MEMBER_NAME(cx1,"cx1");
	HX_VISIT_MEMBER_NAME(cx2,"cx2");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(a1localx,"a1localx");
	HX_VISIT_MEMBER_NAME(a1localy,"a1localy");
	HX_VISIT_MEMBER_NAME(a1relx,"a1relx");
	HX_VISIT_MEMBER_NAME(a1rely,"a1rely");
	HX_VISIT_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(a2localx,"a2localx");
	HX_VISIT_MEMBER_NAME(a2localy,"a2localy");
	HX_VISIT_MEMBER_NAME(a2relx,"a2relx");
	HX_VISIT_MEMBER_NAME(a2rely,"a2rely");
	HX_VISIT_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_VISIT_MEMBER_NAME(zip_n,"zip_n");
	HX_VISIT_MEMBER_NAME(nlocalx,"nlocalx");
	HX_VISIT_MEMBER_NAME(nlocaly,"nlocaly");
	HX_VISIT_MEMBER_NAME(nrelx,"nrelx");
	HX_VISIT_MEMBER_NAME(nrely,"nrely");
	HX_VISIT_MEMBER_NAME(wrap_n,"wrap_n");
	HX_VISIT_MEMBER_NAME(kMassa,"kMassa");
	HX_VISIT_MEMBER_NAME(kMassb,"kMassb");
	HX_VISIT_MEMBER_NAME(kMassc,"kMassc");
	HX_VISIT_MEMBER_NAME(jAccx,"jAccx");
	HX_VISIT_MEMBER_NAME(jAccy,"jAccy");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(biasx,"biasx");
	HX_VISIT_MEMBER_NAME(biasy,"biasy");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_LineJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1 ); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2 ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { return hx::Val( cx1 ); }
		if (HX_FIELD_EQ(inName,"cx2") ) { return hx::Val( cx2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dot1") ) { return hx::Val( dot1 ); }
		if (HX_FIELD_EQ(inName,"dot2") ) { return hx::Val( dot2 ); }
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"equal") ) { return hx::Val( equal ); }
		if (HX_FIELD_EQ(inName,"zip_n") ) { return hx::Val( zip_n ); }
		if (HX_FIELD_EQ(inName,"nrelx") ) { return hx::Val( nrelx ); }
		if (HX_FIELD_EQ(inName,"nrely") ) { return hx::Val( nrely ); }
		if (HX_FIELD_EQ(inName,"jAccx") ) { return hx::Val( jAccx ); }
		if (HX_FIELD_EQ(inName,"jAccy") ) { return hx::Val( jAccy ); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma ); }
		if (HX_FIELD_EQ(inName,"biasx") ) { return hx::Val( biasx ); }
		if (HX_FIELD_EQ(inName,"biasy") ) { return hx::Val( biasy ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { return hx::Val( a1relx ); }
		if (HX_FIELD_EQ(inName,"a1rely") ) { return hx::Val( a1rely ); }
		if (HX_FIELD_EQ(inName,"a2relx") ) { return hx::Val( a2relx ); }
		if (HX_FIELD_EQ(inName,"a2rely") ) { return hx::Val( a2rely ); }
		if (HX_FIELD_EQ(inName,"wrap_n") ) { return hx::Val( wrap_n ); }
		if (HX_FIELD_EQ(inName,"kMassa") ) { return hx::Val( kMassa ); }
		if (HX_FIELD_EQ(inName,"kMassb") ) { return hx::Val( kMassb ); }
		if (HX_FIELD_EQ(inName,"kMassc") ) { return hx::Val( kMassc ); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { return hx::Val( wrap_a1 ); }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { return hx::Val( wrap_a2 ); }
		if (HX_FIELD_EQ(inName,"nlocalx") ) { return hx::Val( nlocalx ); }
		if (HX_FIELD_EQ(inName,"nlocaly") ) { return hx::Val( nlocaly ); }
		if (HX_FIELD_EQ(inName,"setup_n") ) { return hx::Val( setup_n_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped ); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn ); }
		if (HX_FIELD_EQ(inName,"jointMin") ) { return hx::Val( jointMin ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { return hx::Val( jointMax ); }
		if (HX_FIELD_EQ(inName,"a1localx") ) { return hx::Val( a1localx ); }
		if (HX_FIELD_EQ(inName,"a1localy") ) { return hx::Val( a1localy ); }
		if (HX_FIELD_EQ(inName,"setup_a1") ) { return hx::Val( setup_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"a2localx") ) { return hx::Val( a2localx ); }
		if (HX_FIELD_EQ(inName,"a2localy") ) { return hx::Val( a2localy ); }
		if (HX_FIELD_EQ(inName,"setup_a2") ) { return hx::Val( setup_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"validate_n") ) { return hx::Val( validate_n_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_a1") ) { return hx::Val( validate_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_a2") ) { return hx::Val( validate_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_n") ) { return hx::Val( invalidate_n_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidate_a1") ) { return hx::Val( invalidate_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_a2") ) { return hx::Val( invalidate_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_norm") ) { return hx::Val( validate_norm_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_LineJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { cx1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx2") ) { cx2=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dot1") ) { dot1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dot2") ) { dot2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"equal") ) { equal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_n") ) { zip_n=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nrelx") ) { nrelx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nrely") ) { nrely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccx") ) { jAccx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccy") ) { jAccy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasx") ) { biasx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasy") ) { biasy=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { a1relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1rely") ) { a1rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2relx") ) { a2relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2rely") ) { a2rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_n") ) { wrap_n=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassa") ) { kMassa=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassb") ) { kMassb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassc") ) { kMassc=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { wrap_a1=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { wrap_a2=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nlocalx") ) { nlocalx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nlocaly") ) { nlocaly=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::LineJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jointMin") ) { jointMin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jointMax") ) { jointMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localx") ) { a1localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localy") ) { a1localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localx") ) { a2localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localy") ) { a2localy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_LineJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_zn",38,07,b0,a2));
	outFields->push(HX_("scale",8a,ce,ce,78));
	outFields->push(HX_("jointMin",68,fa,25,55));
	outFields->push(HX_("jointMax",7a,f3,25,55));
	outFields->push(HX_("equal",b4,cf,82,72));
	outFields->push(HX_("dot1",88,f5,6d,42));
	outFields->push(HX_("dot2",89,f5,6d,42));
	outFields->push(HX_("cx1",dc,87,4b,00));
	outFields->push(HX_("cx2",dd,87,4b,00));
	outFields->push(HX_("b1",8f,55,00,00));
	outFields->push(HX_("a1localx",5d,6d,78,fb));
	outFields->push(HX_("a1localy",5e,6d,78,fb));
	outFields->push(HX_("a1relx",af,c1,e7,4a));
	outFields->push(HX_("a1rely",b0,c1,e7,4a));
	outFields->push(HX_("wrap_a1",45,eb,57,0d));
	outFields->push(HX_("b2",90,55,00,00));
	outFields->push(HX_("a2localx",1e,e4,0d,25));
	outFields->push(HX_("a2localy",1f,e4,0d,25));
	outFields->push(HX_("a2relx",30,56,4e,de));
	outFields->push(HX_("a2rely",31,56,4e,de));
	outFields->push(HX_("wrap_a2",46,eb,57,0d));
	outFields->push(HX_("zip_n",50,7c,9f,84));
	outFields->push(HX_("nlocalx",9b,7b,f8,37));
	outFields->push(HX_("nlocaly",9c,7b,f8,37));
	outFields->push(HX_("nrelx",6d,24,bb,a1));
	outFields->push(HX_("nrely",6e,24,bb,a1));
	outFields->push(HX_("wrap_n",79,13,99,78));
	outFields->push(HX_("kMassa",82,a0,7f,5e));
	outFields->push(HX_("kMassb",83,a0,7f,5e));
	outFields->push(HX_("kMassc",84,a0,7f,5e));
	outFields->push(HX_("jAccx",a1,d1,bb,33));
	outFields->push(HX_("jAccy",a2,d1,bb,33));
	outFields->push(HX_("jMax",5a,60,4b,46));
	outFields->push(HX_("gamma",27,87,b6,8e));
	outFields->push(HX_("biasx",df,3f,f6,b2));
	outFields->push(HX_("biasy",e0,3f,f6,b2));
	outFields->push(HX_("stepped",03,05,60,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_LineJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::constraint::LineJoint */ ,(int)offsetof(ZPP_LineJoint_obj,outer_zn),HX_("outer_zn",38,07,b0,a2)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,scale),HX_("scale",8a,ce,ce,78)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,jointMin),HX_("jointMin",68,fa,25,55)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,jointMax),HX_("jointMax",7a,f3,25,55)},
	{hx::fsBool,(int)offsetof(ZPP_LineJoint_obj,equal),HX_("equal",b4,cf,82,72)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,dot1),HX_("dot1",88,f5,6d,42)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,dot2),HX_("dot2",89,f5,6d,42)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,cx1),HX_("cx1",dc,87,4b,00)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,cx2),HX_("cx2",dd,87,4b,00)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_LineJoint_obj,b1),HX_("b1",8f,55,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a1localx),HX_("a1localx",5d,6d,78,fb)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a1localy),HX_("a1localy",5e,6d,78,fb)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a1relx),HX_("a1relx",af,c1,e7,4a)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a1rely),HX_("a1rely",b0,c1,e7,4a)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_LineJoint_obj,wrap_a1),HX_("wrap_a1",45,eb,57,0d)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_LineJoint_obj,b2),HX_("b2",90,55,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a2localx),HX_("a2localx",1e,e4,0d,25)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a2localy),HX_("a2localy",1f,e4,0d,25)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a2relx),HX_("a2relx",30,56,4e,de)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,a2rely),HX_("a2rely",31,56,4e,de)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_LineJoint_obj,wrap_a2),HX_("wrap_a2",46,eb,57,0d)},
	{hx::fsBool,(int)offsetof(ZPP_LineJoint_obj,zip_n),HX_("zip_n",50,7c,9f,84)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,nlocalx),HX_("nlocalx",9b,7b,f8,37)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,nlocaly),HX_("nlocaly",9c,7b,f8,37)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,nrelx),HX_("nrelx",6d,24,bb,a1)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,nrely),HX_("nrely",6e,24,bb,a1)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_LineJoint_obj,wrap_n),HX_("wrap_n",79,13,99,78)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,kMassa),HX_("kMassa",82,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,kMassb),HX_("kMassb",83,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,kMassc),HX_("kMassc",84,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,jAccx),HX_("jAccx",a1,d1,bb,33)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,jAccy),HX_("jAccy",a2,d1,bb,33)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,jMax),HX_("jMax",5a,60,4b,46)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,gamma),HX_("gamma",27,87,b6,8e)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,biasx),HX_("biasx",df,3f,f6,b2)},
	{hx::fsFloat,(int)offsetof(ZPP_LineJoint_obj,biasy),HX_("biasy",e0,3f,f6,b2)},
	{hx::fsBool,(int)offsetof(ZPP_LineJoint_obj,stepped),HX_("stepped",03,05,60,81)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_LineJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_LineJoint_obj_sMemberFields[] = {
	HX_("outer_zn",38,07,b0,a2),
	HX_("scale",8a,ce,ce,78),
	HX_("jointMin",68,fa,25,55),
	HX_("jointMax",7a,f3,25,55),
	HX_("equal",b4,cf,82,72),
	HX_("dot1",88,f5,6d,42),
	HX_("dot2",89,f5,6d,42),
	HX_("cx1",dc,87,4b,00),
	HX_("cx2",dd,87,4b,00),
	HX_("bodyImpulse",33,76,a2,5f),
	HX_("activeBodies",e6,69,f8,ba),
	HX_("inactiveBodies",4b,89,c5,8c),
	HX_("b1",8f,55,00,00),
	HX_("a1localx",5d,6d,78,fb),
	HX_("a1localy",5e,6d,78,fb),
	HX_("a1relx",af,c1,e7,4a),
	HX_("a1rely",b0,c1,e7,4a),
	HX_("validate_a1",f9,9b,cc,ca),
	HX_("invalidate_a1",34,30,01,a7),
	HX_("setup_a1",72,28,39,23),
	HX_("wrap_a1",45,eb,57,0d),
	HX_("b2",90,55,00,00),
	HX_("a2localx",1e,e4,0d,25),
	HX_("a2localy",1f,e4,0d,25),
	HX_("a2relx",30,56,4e,de),
	HX_("a2rely",31,56,4e,de),
	HX_("validate_a2",fa,9b,cc,ca),
	HX_("invalidate_a2",35,30,01,a7),
	HX_("setup_a2",73,28,39,23),
	HX_("wrap_a2",46,eb,57,0d),
	HX_("zip_n",50,7c,9f,84),
	HX_("nlocalx",9b,7b,f8,37),
	HX_("nlocaly",9c,7b,f8,37),
	HX_("nrelx",6d,24,bb,a1),
	HX_("nrely",6e,24,bb,a1),
	HX_("validate_n",45,f5,e9,e1),
	HX_("invalidate_n",6a,01,00,39),
	HX_("setup_n",ec,5a,56,28),
	HX_("wrap_n",79,13,99,78),
	HX_("validate_norm",c5,81,ed,94),
	HX_("kMassa",82,a0,7f,5e),
	HX_("kMassb",83,a0,7f,5e),
	HX_("kMassc",84,a0,7f,5e),
	HX_("jAccx",a1,d1,bb,33),
	HX_("jAccy",a2,d1,bb,33),
	HX_("jMax",5a,60,4b,46),
	HX_("gamma",27,87,b6,8e),
	HX_("biasx",df,3f,f6,b2),
	HX_("biasy",e0,3f,f6,b2),
	HX_("stepped",03,05,60,81),
	HX_("copy",b5,bb,c4,41),
	HX_("validate",96,d0,e3,04),
	HX_("wake_connected",ae,cf,dd,3d),
	HX_("forest",dd,8c,88,fd),
	HX_("pair_exists",a1,6a,58,69),
	HX_("clearcache",95,69,f1,82),
	HX_("preStep",0f,c1,c0,24),
	HX_("warmStart",dd,27,03,eb),
	HX_("applyImpulseVel",b6,c7,50,1f),
	HX_("applyImpulsePos",ed,42,4c,1f),
	HX_("draw",04,2c,70,42),
	::String(null()) };

hx::Class ZPP_LineJoint_obj::__mClass;

void ZPP_LineJoint_obj::__register()
{
	ZPP_LineJoint_obj _hx_dummy;
	ZPP_LineJoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.constraint.ZPP_LineJoint",e1,c6,37,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_LineJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_LineJoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_LineJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_LineJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
