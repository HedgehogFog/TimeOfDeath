// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_DistanceJoint
#include <hxinc/nape/constraint/DistanceJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <hxinc/nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <hxinc/zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_DistanceJoint
#include <hxinc/zpp_nape/constraint/ZPP_DistanceJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_58eb924671686db2_174_new,"zpp_nape.constraint.ZPP_DistanceJoint","new",0x66d03272,"zpp_nape.constraint.ZPP_DistanceJoint.new","zpp_nape/constraint/DistanceJoint.hx",174,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_182_is_slack,"zpp_nape.constraint.ZPP_DistanceJoint","is_slack",0x624afda9,"zpp_nape.constraint.ZPP_DistanceJoint.is_slack","zpp_nape/constraint/DistanceJoint.hx",182,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_289_bodyImpulse,"zpp_nape.constraint.ZPP_DistanceJoint","bodyImpulse",0xe14a3a45,"zpp_nape.constraint.ZPP_DistanceJoint.bodyImpulse","zpp_nape/constraint/DistanceJoint.hx",289,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_295_activeBodies,"zpp_nape.constraint.ZPP_DistanceJoint","activeBodies",0xac1c3594,"zpp_nape.constraint.ZPP_DistanceJoint.activeBodies","zpp_nape/constraint/DistanceJoint.hx",295,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_303_inactiveBodies,"zpp_nape.constraint.ZPP_DistanceJoint","inactiveBodies",0xe7361c79,"zpp_nape.constraint.ZPP_DistanceJoint.inactiveBodies","zpp_nape/constraint/DistanceJoint.hx",303,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_317_validate_a1,"zpp_nape.constraint.ZPP_DistanceJoint","validate_a1",0x4c74600b,"zpp_nape.constraint.ZPP_DistanceJoint.validate_a1","zpp_nape/constraint/DistanceJoint.hx",317,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_338_invalidate_a1,"zpp_nape.constraint.ZPP_DistanceJoint","invalidate_a1",0xb52f9cc6,"zpp_nape.constraint.ZPP_DistanceJoint.invalidate_a1","zpp_nape/constraint/DistanceJoint.hx",338,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_362_setup_a1,"zpp_nape.constraint.ZPP_DistanceJoint","setup_a1",0xe7060520,"zpp_nape.constraint.ZPP_DistanceJoint.setup_a1","zpp_nape/constraint/DistanceJoint.hx",362,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_375_validate_a2,"zpp_nape.constraint.ZPP_DistanceJoint","validate_a2",0x4c74600c,"zpp_nape.constraint.ZPP_DistanceJoint.validate_a2","zpp_nape/constraint/DistanceJoint.hx",375,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_396_invalidate_a2,"zpp_nape.constraint.ZPP_DistanceJoint","invalidate_a2",0xb52f9cc7,"zpp_nape.constraint.ZPP_DistanceJoint.invalidate_a2","zpp_nape/constraint/DistanceJoint.hx",396,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_420_setup_a2,"zpp_nape.constraint.ZPP_DistanceJoint","setup_a2",0xe7060521,"zpp_nape.constraint.ZPP_DistanceJoint.setup_a2","zpp_nape/constraint/DistanceJoint.hx",420,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_433_copy,"zpp_nape.constraint.ZPP_DistanceJoint","copy",0x881e2963,"zpp_nape.constraint.ZPP_DistanceJoint.copy","zpp_nape/constraint/DistanceJoint.hx",433,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_454_copy,"zpp_nape.constraint.ZPP_DistanceJoint","copy",0x881e2963,"zpp_nape.constraint.ZPP_DistanceJoint.copy","zpp_nape/constraint/DistanceJoint.hx",454,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_475_copy,"zpp_nape.constraint.ZPP_DistanceJoint","copy",0x881e2963,"zpp_nape.constraint.ZPP_DistanceJoint.copy","zpp_nape/constraint/DistanceJoint.hx",475,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_571_validate,"zpp_nape.constraint.ZPP_DistanceJoint","validate",0xc8b0ad44,"zpp_nape.constraint.ZPP_DistanceJoint.validate","zpp_nape/constraint/DistanceJoint.hx",571,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_578_wake_connected,"zpp_nape.constraint.ZPP_DistanceJoint","wake_connected",0x984e62dc,"zpp_nape.constraint.ZPP_DistanceJoint.wake_connected","zpp_nape/constraint/DistanceJoint.hx",578,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_582_forest,"zpp_nape.constraint.ZPP_DistanceJoint","forest",0x9f5b420b,"zpp_nape.constraint.ZPP_DistanceJoint.forest","zpp_nape/constraint/DistanceJoint.hx",582,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_681_pair_exists,"zpp_nape.constraint.ZPP_DistanceJoint","pair_exists",0xeb002eb3,"zpp_nape.constraint.ZPP_DistanceJoint.pair_exists","zpp_nape/constraint/DistanceJoint.hx",681,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_683_clearcache,"zpp_nape.constraint.ZPP_DistanceJoint","clearcache",0x79314dc3,"zpp_nape.constraint.ZPP_DistanceJoint.clearcache","zpp_nape/constraint/DistanceJoint.hx",683,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_687_preStep,"zpp_nape.constraint.ZPP_DistanceJoint","preStep",0x1b4c9421,"zpp_nape.constraint.ZPP_DistanceJoint.preStep","zpp_nape/constraint/DistanceJoint.hx",687,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_824_warmStart,"zpp_nape.constraint.ZPP_DistanceJoint","warmStart",0x7a77636f,"zpp_nape.constraint.ZPP_DistanceJoint.warmStart","zpp_nape/constraint/DistanceJoint.hx",824,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_887_applyImpulseVel,"zpp_nape.constraint.ZPP_DistanceJoint","applyImpulseVel",0xe760fcc8,"zpp_nape.constraint.ZPP_DistanceJoint.applyImpulseVel","zpp_nape/constraint/DistanceJoint.hx",887,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_977_applyImpulsePos,"zpp_nape.constraint.ZPP_DistanceJoint","applyImpulsePos",0xe75c77ff,"zpp_nape.constraint.ZPP_DistanceJoint.applyImpulsePos","zpp_nape/constraint/DistanceJoint.hx",977,0x52959e99)
HX_LOCAL_STACK_FRAME(_hx_pos_58eb924671686db2_1288_draw,"zpp_nape.constraint.ZPP_DistanceJoint","draw",0x88c999b2,"zpp_nape.constraint.ZPP_DistanceJoint.draw","zpp_nape/constraint/DistanceJoint.hx",1288,0x52959e99)
namespace zpp_nape{
namespace constraint{

void ZPP_DistanceJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_174_new)
HXLINE( 432)		this->stepped = false;
HXLINE( 431)		this->bias = ((Float)0.0);
HXLINE( 430)		this->gamma = ((Float)0.0);
HXLINE( 429)		this->jMax = ((Float)0.0);
HXLINE( 428)		this->jAcc = ((Float)0.0);
HXLINE( 427)		this->kMass = ((Float)0.0);
HXLINE( 426)		this->wrap_a2 = null();
HXLINE( 373)		this->a2rely = ((Float)0.0);
HXLINE( 372)		this->a2relx = ((Float)0.0);
HXLINE( 371)		this->a2localy = ((Float)0.0);
HXLINE( 370)		this->a2localx = ((Float)0.0);
HXLINE( 369)		this->b2 = null();
HXLINE( 368)		this->wrap_a1 = null();
HXLINE( 315)		this->a1rely = ((Float)0.0);
HXLINE( 314)		this->a1relx = ((Float)0.0);
HXLINE( 313)		this->a1localy = ((Float)0.0);
HXLINE( 312)		this->a1localx = ((Float)0.0);
HXLINE( 311)		this->b1 = null();
HXLINE( 287)		this->cx2 = ((Float)0.0);
HXLINE( 286)		this->cx1 = ((Float)0.0);
HXLINE( 285)		this->ny = ((Float)0.0);
HXLINE( 284)		this->nx = ((Float)0.0);
HXLINE( 179)		this->equal = false;
HXLINE( 178)		this->slack = false;
HXLINE( 177)		this->jointMax = ((Float)0.0);
HXLINE( 176)		this->jointMin = ((Float)0.0);
HXLINE( 175)		this->outer_zn = null();
HXLINE( 481)		super::__construct();
HXLINE( 482)		{
HXLINE( 483)			{
HXLINE( 484)				this->a1localx = ( (Float)(0) );
HXLINE( 485)				this->a1localy = ( (Float)(0) );
            			}
HXLINE( 503)			{
HXLINE( 504)				this->a1relx = ( (Float)(0) );
HXLINE( 505)				this->a1rely = ( (Float)(0) );
            			}
            		}
HXLINE( 524)		{
HXLINE( 525)			{
HXLINE( 526)				this->a2localx = ( (Float)(0) );
HXLINE( 527)				this->a2localy = ( (Float)(0) );
            			}
HXLINE( 545)			{
HXLINE( 546)				this->a2relx = ( (Float)(0) );
HXLINE( 547)				this->a2rely = ( (Float)(0) );
            			}
            		}
HXLINE( 566)		this->jAcc = ( (Float)(0) );
HXLINE( 567)		this->jMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 568)		this->stepped = false;
HXLINE( 569)		this->cx1 = (this->cx2 = ( (Float)(0) ));
            	}

Dynamic ZPP_DistanceJoint_obj::__CreateEmpty() { return new ZPP_DistanceJoint_obj; }

void *ZPP_DistanceJoint_obj::_hx_vtable = 0;

Dynamic ZPP_DistanceJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_DistanceJoint_obj > _hx_result = new ZPP_DistanceJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_DistanceJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x49b353a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x49b353a6;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

bool ZPP_DistanceJoint_obj::is_slack(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_182_is_slack)
HXLINE( 183)		bool slack;
HXLINE( 184)		{
HXLINE( 185)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 186)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 188)		{
HXLINE( 189)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 190)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 192)		Float nx = ((Float)0.0);
HXLINE( 193)		Float ny = ((Float)0.0);
HXLINE( 194)		{
HXLINE( 195)			nx = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE( 196)			ny = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
HXLINE( 197)			Float C = ((nx * nx) + (ny * ny));
HXLINE( 198)			if ((C < ::nape::Config_obj::epsilon)) {
HXLINE( 199)				{
HXLINE( 200)					nx = ( (Float)(0) );
HXLINE( 201)					ny = ( (Float)(0) );
            				}
HXLINE( 219)				C = ( (Float)(0) );
HXLINE( 220)				slack = true;
            			}
            			else {
HXLINE( 223)				C = ::Math_obj::sqrt(C);
HXLINE( 224)				{
HXLINE( 225)					Float t = (((Float)1.0) / C);
HXLINE( 234)					nx = (nx * t);
HXLINE( 235)					ny = (ny * t);
            				}
HXLINE( 237)				if (this->equal) {
HXLINE( 238)					C = (C - this->jointMax);
HXLINE( 239)					slack = false;
            				}
            				else {
HXLINE( 242)					if ((C < this->jointMin)) {
HXLINE( 243)						C = (this->jointMin - C);
HXLINE( 244)						{
HXLINE( 245)							nx = -(nx);
HXLINE( 246)							ny = -(ny);
            						}
HXLINE( 248)						slack = false;
            					}
            					else {
HXLINE( 250)						if ((C > this->jointMax)) {
HXLINE( 251)							C = (C - this->jointMax);
HXLINE( 252)							slack = false;
            						}
            						else {
HXLINE( 255)							{
HXLINE( 256)								nx = ( (Float)(0) );
HXLINE( 257)								ny = ( (Float)(0) );
            							}
HXLINE( 275)							C = ( (Float)(0) );
HXLINE( 276)							slack = true;
            						}
            					}
            				}
            			}
            		}
HXLINE( 282)		return slack;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_DistanceJoint_obj,is_slack,return )

 ::nape::geom::Vec3 ZPP_DistanceJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_289_bodyImpulse)
HXDLIN( 289)		if (this->stepped) {
HXLINE( 290)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 290)				return ::nape::geom::Vec3_obj::get((-(this->jAcc) * this->nx),(-(this->jAcc) * this->ny),(-(this->cx1) * this->jAcc));
            			}
            			else {
HXLINE( 291)				return ::nape::geom::Vec3_obj::get((this->jAcc * this->nx),(this->jAcc * this->ny),(this->cx2 * this->jAcc));
            			}
            		}
            		else {
HXLINE( 293)			return ::nape::geom::Vec3_obj::get(0,0,0);
            		}
HXLINE( 289)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DistanceJoint_obj,bodyImpulse,return )

void ZPP_DistanceJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_295_activeBodies)
HXLINE( 297)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 297)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 299)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 300)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 300)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_DistanceJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_303_inactiveBodies)
HXLINE( 305)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 305)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 307)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 308)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 308)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_DistanceJoint_obj::validate_a1(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_317_validate_a1)
HXLINE( 318)		this->wrap_a1->zpp_inner->x = this->a1localx;
HXLINE( 319)		this->wrap_a1->zpp_inner->y = this->a1localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_DistanceJoint_obj,validate_a1,(void))

void ZPP_DistanceJoint_obj::invalidate_a1( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_338_invalidate_a1)
HXLINE( 339)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("a1",b0,54,00,00)));
HXLINE( 340)		{
HXLINE( 341)			this->a1localx = x->x;
HXLINE( 342)			this->a1localy = x->y;
            		}
HXLINE( 360)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DistanceJoint_obj,invalidate_a1,(void))

void ZPP_DistanceJoint_obj::setup_a1(){
            	HX_GC_STACKFRAME(&_hx_pos_58eb924671686db2_362_setup_a1)
HXLINE( 363)		Float x = this->a1localx;
HXDLIN( 363)		Float y = this->a1localy;
HXDLIN( 363)		bool _hx_tmp;
HXDLIN( 363)		if ((x == x)) {
HXLINE( 363)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 363)			_hx_tmp = true;
            		}
HXDLIN( 363)		if (_hx_tmp) {
HXLINE( 363)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 363)		 ::nape::geom::Vec2 ret;
HXDLIN( 363)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 363)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 363)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 363)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 363)			ret->zpp_pool = null();
HXDLIN( 363)			ret->zpp_disp = false;
HXDLIN( 363)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 363)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 363)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 363)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 363)			{
HXLINE( 363)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 363)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 363)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 363)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 363)					ret1->next = null();
            				}
HXDLIN( 363)				ret1->weak = false;
            			}
HXDLIN( 363)			ret1->_immutable = false;
HXDLIN( 363)			{
HXLINE( 363)				ret1->x = x;
HXDLIN( 363)				ret1->y = y;
            			}
HXDLIN( 363)			ret->zpp_inner = ret1;
HXDLIN( 363)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 363)			bool _hx_tmp1;
HXDLIN( 363)			if (hx::IsNotNull( ret )) {
HXLINE( 363)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 363)				_hx_tmp1 = false;
            			}
HXDLIN( 363)			if (_hx_tmp1) {
HXLINE( 363)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 363)			{
HXLINE( 363)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 363)				if (_this->_immutable) {
HXLINE( 363)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 363)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 363)					_this->_isimmutable();
            				}
            			}
HXDLIN( 363)			bool _hx_tmp2;
HXDLIN( 363)			if ((x == x)) {
HXLINE( 363)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 363)				_hx_tmp2 = true;
            			}
HXDLIN( 363)			if (_hx_tmp2) {
HXLINE( 363)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 363)			bool _hx_tmp3;
HXDLIN( 363)			bool _hx_tmp4;
HXDLIN( 363)			if (hx::IsNotNull( ret )) {
HXLINE( 363)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 363)				_hx_tmp4 = false;
            			}
HXDLIN( 363)			if (_hx_tmp4) {
HXLINE( 363)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 363)			{
HXLINE( 363)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 363)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 363)					_this1->_validate();
            				}
            			}
HXDLIN( 363)			if ((ret->zpp_inner->x == x)) {
HXLINE( 363)				bool _hx_tmp5;
HXDLIN( 363)				if (hx::IsNotNull( ret )) {
HXLINE( 363)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 363)					_hx_tmp5 = false;
            				}
HXDLIN( 363)				if (_hx_tmp5) {
HXLINE( 363)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 363)				{
HXLINE( 363)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 363)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 363)						_this2->_validate();
            					}
            				}
HXDLIN( 363)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 363)				_hx_tmp3 = false;
            			}
HXDLIN( 363)			if (!(_hx_tmp3)) {
HXLINE( 363)				{
HXLINE( 363)					ret->zpp_inner->x = x;
HXDLIN( 363)					ret->zpp_inner->y = y;
            				}
HXDLIN( 363)				{
HXLINE( 363)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 363)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 363)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 363)		ret->zpp_inner->weak = false;
HXDLIN( 363)		this->wrap_a1 = ret;
HXLINE( 364)		this->wrap_a1->zpp_inner->_inuse = true;
HXLINE( 365)		this->wrap_a1->zpp_inner->_validate = this->validate_a1_dyn();
HXLINE( 366)		this->wrap_a1->zpp_inner->_invalidate = this->invalidate_a1_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_DistanceJoint_obj,setup_a1,(void))

void ZPP_DistanceJoint_obj::validate_a2(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_375_validate_a2)
HXLINE( 376)		this->wrap_a2->zpp_inner->x = this->a2localx;
HXLINE( 377)		this->wrap_a2->zpp_inner->y = this->a2localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_DistanceJoint_obj,validate_a2,(void))

void ZPP_DistanceJoint_obj::invalidate_a2( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_396_invalidate_a2)
HXLINE( 397)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("a2",b1,54,00,00)));
HXLINE( 398)		{
HXLINE( 399)			this->a2localx = x->x;
HXLINE( 400)			this->a2localy = x->y;
            		}
HXLINE( 418)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_DistanceJoint_obj,invalidate_a2,(void))

void ZPP_DistanceJoint_obj::setup_a2(){
            	HX_GC_STACKFRAME(&_hx_pos_58eb924671686db2_420_setup_a2)
HXLINE( 421)		Float x = this->a2localx;
HXDLIN( 421)		Float y = this->a2localy;
HXDLIN( 421)		bool _hx_tmp;
HXDLIN( 421)		if ((x == x)) {
HXLINE( 421)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 421)			_hx_tmp = true;
            		}
HXDLIN( 421)		if (_hx_tmp) {
HXLINE( 421)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 421)		 ::nape::geom::Vec2 ret;
HXDLIN( 421)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 421)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 421)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 421)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 421)			ret->zpp_pool = null();
HXDLIN( 421)			ret->zpp_disp = false;
HXDLIN( 421)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 421)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 421)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 421)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 421)			{
HXLINE( 421)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 421)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 421)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 421)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 421)					ret1->next = null();
            				}
HXDLIN( 421)				ret1->weak = false;
            			}
HXDLIN( 421)			ret1->_immutable = false;
HXDLIN( 421)			{
HXLINE( 421)				ret1->x = x;
HXDLIN( 421)				ret1->y = y;
            			}
HXDLIN( 421)			ret->zpp_inner = ret1;
HXDLIN( 421)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 421)			bool _hx_tmp1;
HXDLIN( 421)			if (hx::IsNotNull( ret )) {
HXLINE( 421)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 421)				_hx_tmp1 = false;
            			}
HXDLIN( 421)			if (_hx_tmp1) {
HXLINE( 421)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 421)			{
HXLINE( 421)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 421)				if (_this->_immutable) {
HXLINE( 421)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 421)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 421)					_this->_isimmutable();
            				}
            			}
HXDLIN( 421)			bool _hx_tmp2;
HXDLIN( 421)			if ((x == x)) {
HXLINE( 421)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 421)				_hx_tmp2 = true;
            			}
HXDLIN( 421)			if (_hx_tmp2) {
HXLINE( 421)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 421)			bool _hx_tmp3;
HXDLIN( 421)			bool _hx_tmp4;
HXDLIN( 421)			if (hx::IsNotNull( ret )) {
HXLINE( 421)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 421)				_hx_tmp4 = false;
            			}
HXDLIN( 421)			if (_hx_tmp4) {
HXLINE( 421)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 421)			{
HXLINE( 421)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 421)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 421)					_this1->_validate();
            				}
            			}
HXDLIN( 421)			if ((ret->zpp_inner->x == x)) {
HXLINE( 421)				bool _hx_tmp5;
HXDLIN( 421)				if (hx::IsNotNull( ret )) {
HXLINE( 421)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 421)					_hx_tmp5 = false;
            				}
HXDLIN( 421)				if (_hx_tmp5) {
HXLINE( 421)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 421)				{
HXLINE( 421)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 421)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 421)						_this2->_validate();
            					}
            				}
HXDLIN( 421)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 421)				_hx_tmp3 = false;
            			}
HXDLIN( 421)			if (!(_hx_tmp3)) {
HXLINE( 421)				{
HXLINE( 421)					ret->zpp_inner->x = x;
HXDLIN( 421)					ret->zpp_inner->y = y;
            				}
HXDLIN( 421)				{
HXLINE( 421)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 421)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 421)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 421)		ret->zpp_inner->weak = false;
HXDLIN( 421)		this->wrap_a2 = ret;
HXLINE( 422)		this->wrap_a2->zpp_inner->_inuse = true;
HXLINE( 423)		this->wrap_a2->zpp_inner->_validate = this->validate_a2_dyn();
HXLINE( 424)		this->wrap_a2->zpp_inner->_invalidate = this->invalidate_a2_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_DistanceJoint_obj,setup_a2,(void))

 ::nape::constraint::Constraint ZPP_DistanceJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_58eb924671686db2_433_copy)
HXLINE( 434)		 ::nape::constraint::DistanceJoint _this = this->outer_zn;
HXDLIN( 434)		if (hx::IsNull( _this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 434)			_this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 434)		 ::nape::geom::Vec2 ret = _this->zpp_inner_zn->wrap_a1;
HXDLIN( 434)		 ::nape::constraint::DistanceJoint _this1 = this->outer_zn;
HXDLIN( 434)		if (hx::IsNull( _this1->zpp_inner_zn->wrap_a2 )) {
HXLINE( 434)			_this1->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 434)		 ::nape::constraint::DistanceJoint ret1 =  ::nape::constraint::DistanceJoint_obj::__alloc( HX_CTX ,null(),null(),ret,_this1->zpp_inner_zn->wrap_a2,this->jointMin,this->jointMax);
HXLINE( 435)		this->copyto(ret1);
HXLINE( 437)		bool _hx_tmp;
HXDLIN( 437)		if (hx::IsNotNull( dict )) {
HXLINE( 437)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 437)			_hx_tmp = false;
            		}
HXDLIN( 437)		if (_hx_tmp) {
HXLINE( 446)			 ::nape::phys::Body b = null();
HXLINE( 447)			{
HXLINE( 447)				int _g = 0;
HXDLIN( 447)				while((_g < dict->length)){
HXLINE( 447)					 ::zpp_nape::constraint::ZPP_CopyHelper idc = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 447)					_g = (_g + 1);
HXLINE( 448)					if ((idc->id == this->b1->id)) {
HXLINE( 449)						b = idc->bc;
HXLINE( 450)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
            			}
HXLINE( 453)			if (hx::IsNotNull( b )) {
HXLINE( 453)				ret1->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::DistanceJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_58eb924671686db2_454_copy)
HXLINE( 454)					ret1->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 454)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret1))));
            			}
            		}
HXLINE( 458)		bool _hx_tmp1;
HXDLIN( 458)		if (hx::IsNotNull( dict )) {
HXLINE( 458)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 458)			_hx_tmp1 = false;
            		}
HXDLIN( 458)		if (_hx_tmp1) {
HXLINE( 467)			 ::nape::phys::Body b2 = null();
HXLINE( 468)			{
HXLINE( 468)				int _g1 = 0;
HXDLIN( 468)				while((_g1 < dict->length)){
HXLINE( 468)					 ::zpp_nape::constraint::ZPP_CopyHelper idc1 = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 468)					_g1 = (_g1 + 1);
HXLINE( 469)					if ((idc1->id == this->b2->id)) {
HXLINE( 470)						b2 = idc1->bc;
HXLINE( 471)						goto _hx_goto_12;
            					}
            				}
            				_hx_goto_12:;
            			}
HXLINE( 474)			if (hx::IsNotNull( b2 )) {
HXLINE( 474)				ret1->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::DistanceJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_58eb924671686db2_475_copy)
HXLINE( 475)					ret1->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 475)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret1))));
            			}
            		}
HXLINE( 478)		return ret1;
            	}


void ZPP_DistanceJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_571_validate)
HXLINE( 572)		bool _hx_tmp;
HXDLIN( 572)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 572)			_hx_tmp = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 572)			_hx_tmp = true;
            		}
HXDLIN( 572)		if (_hx_tmp) {
HXLINE( 572)			HX_STACK_DO_THROW(HX_("Error: DistanceJoint cannot be simulated null bodies",40,c3,94,5f));
            		}
HXLINE( 573)		if (hx::IsEq( this->b1,this->b2 )) {
HXLINE( 573)			HX_STACK_DO_THROW(HX_("Error: DistanceJoint cannot be simulated with body1 == body2",a2,9e,0d,a5));
            		}
HXLINE( 574)		bool _hx_tmp1;
HXDLIN( 574)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 574)			_hx_tmp1 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 574)			_hx_tmp1 = true;
            		}
HXDLIN( 574)		if (_hx_tmp1) {
HXLINE( 574)			HX_STACK_DO_THROW(HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned",e8,8c,93,57));
            		}
HXLINE( 575)		if ((this->jointMin > this->jointMax)) {
HXLINE( 575)			HX_STACK_DO_THROW(HX_("Error: DistanceJoint must have jointMin <= jointMax",7b,40,7d,69));
            		}
HXLINE( 576)		bool _hx_tmp2;
HXDLIN( 576)		if ((this->b1->type != 2)) {
HXLINE( 576)			_hx_tmp2 = (this->b2->type != 2);
            		}
            		else {
HXLINE( 576)			_hx_tmp2 = false;
            		}
HXDLIN( 576)		if (_hx_tmp2) {
HXLINE( 576)			HX_STACK_DO_THROW(HX_("Error: Constraints cannot have both bodies non-dynamic",cb,b3,6c,eb));
            		}
            	}


void ZPP_DistanceJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_578_wake_connected)
HXLINE( 579)		bool _hx_tmp;
HXDLIN( 579)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 579)			_hx_tmp = (this->b1->type == 2);
            		}
            		else {
HXLINE( 579)			_hx_tmp = false;
            		}
HXDLIN( 579)		if (_hx_tmp) {
HXLINE( 579)			this->b1->wake();
            		}
HXLINE( 580)		bool _hx_tmp1;
HXDLIN( 580)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 580)			_hx_tmp1 = (this->b2->type == 2);
            		}
            		else {
HXLINE( 580)			_hx_tmp1 = false;
            		}
HXDLIN( 580)		if (_hx_tmp1) {
HXLINE( 580)			this->b2->wake();
            		}
            	}


void ZPP_DistanceJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_582_forest)
HXLINE( 583)		if ((this->b1->type == 2)) {
HXLINE( 584)			 ::zpp_nape::space::ZPP_Component xr;
HXDLIN( 584)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 584)				xr = this->b1->component;
            			}
            			else {
HXLINE( 587)				 ::zpp_nape::space::ZPP_Component obj = this->b1->component;
HXLINE( 588)				 ::zpp_nape::space::ZPP_Component stack = null();
HXLINE( 589)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 590)					 ::zpp_nape::space::ZPP_Component nxt = obj->parent;
HXLINE( 591)					obj->parent = stack;
HXLINE( 592)					stack = obj;
HXLINE( 593)					obj = nxt;
            				}
HXLINE( 595)				while(hx::IsNotNull( stack )){
HXLINE( 596)					 ::zpp_nape::space::ZPP_Component nxt1 = stack->parent;
HXLINE( 597)					stack->parent = obj;
HXLINE( 598)					stack = nxt1;
            				}
HXLINE( 584)				xr = obj;
            			}
HXLINE( 603)			 ::zpp_nape::space::ZPP_Component yr;
HXDLIN( 603)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 603)				yr = this->component;
            			}
            			else {
HXLINE( 606)				 ::zpp_nape::space::ZPP_Component obj1 = this->component;
HXLINE( 607)				 ::zpp_nape::space::ZPP_Component stack1 = null();
HXLINE( 608)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 609)					 ::zpp_nape::space::ZPP_Component nxt2 = obj1->parent;
HXLINE( 610)					obj1->parent = stack1;
HXLINE( 611)					stack1 = obj1;
HXLINE( 612)					obj1 = nxt2;
            				}
HXLINE( 614)				while(hx::IsNotNull( stack1 )){
HXLINE( 615)					 ::zpp_nape::space::ZPP_Component nxt3 = stack1->parent;
HXLINE( 616)					stack1->parent = obj1;
HXLINE( 617)					stack1 = nxt3;
            				}
HXLINE( 603)				yr = obj1;
            			}
HXLINE( 622)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 623)				if ((xr->rank < yr->rank)) {
HXLINE( 623)					xr->parent = yr;
            				}
            				else {
HXLINE( 624)					if ((xr->rank > yr->rank)) {
HXLINE( 624)						yr->parent = xr;
            					}
            					else {
HXLINE( 626)						yr->parent = xr;
HXLINE( 627)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 631)		if ((this->b2->type == 2)) {
HXLINE( 632)			 ::zpp_nape::space::ZPP_Component xr1;
HXDLIN( 632)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE( 632)				xr1 = this->b2->component;
            			}
            			else {
HXLINE( 635)				 ::zpp_nape::space::ZPP_Component obj2 = this->b2->component;
HXLINE( 636)				 ::zpp_nape::space::ZPP_Component stack2 = null();
HXLINE( 637)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 638)					 ::zpp_nape::space::ZPP_Component nxt4 = obj2->parent;
HXLINE( 639)					obj2->parent = stack2;
HXLINE( 640)					stack2 = obj2;
HXLINE( 641)					obj2 = nxt4;
            				}
HXLINE( 643)				while(hx::IsNotNull( stack2 )){
HXLINE( 644)					 ::zpp_nape::space::ZPP_Component nxt5 = stack2->parent;
HXLINE( 645)					stack2->parent = obj2;
HXLINE( 646)					stack2 = nxt5;
            				}
HXLINE( 632)				xr1 = obj2;
            			}
HXLINE( 651)			 ::zpp_nape::space::ZPP_Component yr1;
HXDLIN( 651)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 651)				yr1 = this->component;
            			}
            			else {
HXLINE( 654)				 ::zpp_nape::space::ZPP_Component obj3 = this->component;
HXLINE( 655)				 ::zpp_nape::space::ZPP_Component stack3 = null();
HXLINE( 656)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 657)					 ::zpp_nape::space::ZPP_Component nxt6 = obj3->parent;
HXLINE( 658)					obj3->parent = stack3;
HXLINE( 659)					stack3 = obj3;
HXLINE( 660)					obj3 = nxt6;
            				}
HXLINE( 662)				while(hx::IsNotNull( stack3 )){
HXLINE( 663)					 ::zpp_nape::space::ZPP_Component nxt7 = stack3->parent;
HXLINE( 664)					stack3->parent = obj3;
HXLINE( 665)					stack3 = nxt7;
            				}
HXLINE( 651)				yr1 = obj3;
            			}
HXLINE( 670)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE( 671)				if ((xr1->rank < yr1->rank)) {
HXLINE( 671)					xr1->parent = yr1;
            				}
            				else {
HXLINE( 672)					if ((xr1->rank > yr1->rank)) {
HXLINE( 672)						yr1->parent = xr1;
            					}
            					else {
HXLINE( 674)						yr1->parent = xr1;
HXLINE( 675)						xr1->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_DistanceJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_681_pair_exists)
HXDLIN( 681)		bool _hx_tmp;
HXDLIN( 681)		if ((this->b1->id == id)) {
HXDLIN( 681)			_hx_tmp = (this->b2->id == di);
            		}
            		else {
HXDLIN( 681)			_hx_tmp = false;
            		}
HXDLIN( 681)		if (!(_hx_tmp)) {
HXDLIN( 681)			if ((this->b1->id == di)) {
HXDLIN( 681)				return (this->b2->id == id);
            			}
            			else {
HXDLIN( 681)				return false;
            			}
            		}
            		else {
HXDLIN( 681)			return true;
            		}
HXDLIN( 681)		return false;
            	}


void ZPP_DistanceJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_683_clearcache)
HXLINE( 684)		this->jAcc = ( (Float)(0) );
HXLINE( 685)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_DistanceJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_687_preStep)
HXLINE( 688)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 688)			this->pre_dt = dt;
            		}
HXLINE( 689)		Float dtratio = (dt / this->pre_dt);
HXLINE( 690)		this->pre_dt = dt;
HXLINE( 691)		this->stepped = true;
HXLINE( 692)		this->equal = (this->jointMin == this->jointMax);
HXLINE( 693)		{
HXLINE( 694)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 695)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 697)		{
HXLINE( 698)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 699)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 702)		this->nx = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE( 703)		this->ny = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
HXLINE( 704)		Float C = ((this->nx * this->nx) + (this->ny * this->ny));
HXLINE( 705)		if ((C < ::nape::Config_obj::epsilon)) {
HXLINE( 706)			{
HXLINE( 707)				this->nx = ( (Float)(0) );
HXLINE( 708)				this->ny = ( (Float)(0) );
            			}
HXLINE( 726)			C = ( (Float)(0) );
HXLINE( 727)			this->slack = true;
            		}
            		else {
HXLINE( 730)			C = ::Math_obj::sqrt(C);
HXLINE( 731)			{
HXLINE( 732)				Float t = (((Float)1.0) / C);
HXLINE( 741)				 ::zpp_nape::constraint::ZPP_DistanceJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 741)				_hx_tmp->nx = (_hx_tmp->nx * t);
HXLINE( 742)				 ::zpp_nape::constraint::ZPP_DistanceJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 742)				_hx_tmp1->ny = (_hx_tmp1->ny * t);
            			}
HXLINE( 744)			if (this->equal) {
HXLINE( 745)				C = (C - this->jointMax);
HXLINE( 746)				this->slack = false;
            			}
            			else {
HXLINE( 749)				if ((C < this->jointMin)) {
HXLINE( 750)					C = (this->jointMin - C);
HXLINE( 751)					{
HXLINE( 752)						this->nx = -(this->nx);
HXLINE( 753)						this->ny = -(this->ny);
            					}
HXLINE( 755)					this->slack = false;
            				}
            				else {
HXLINE( 757)					if ((C > this->jointMax)) {
HXLINE( 758)						C = (C - this->jointMax);
HXLINE( 759)						this->slack = false;
            					}
            					else {
HXLINE( 762)						{
HXLINE( 763)							this->nx = ( (Float)(0) );
HXLINE( 764)							this->ny = ( (Float)(0) );
            						}
HXLINE( 782)						C = ( (Float)(0) );
HXLINE( 783)						this->slack = true;
            					}
            				}
            			}
            		}
HXLINE( 701)		Float C1 = C;
HXLINE( 789)		if (!(this->slack)) {
HXLINE( 791)			this->cx1 = ((this->ny * this->a1relx) - (this->nx * this->a1rely));
HXLINE( 792)			this->cx2 = ((this->ny * this->a2relx) - (this->nx * this->a2rely));
HXLINE( 790)			this->kMass = (((this->b1->smass + this->b2->smass) + ((this->cx1 * this->cx1) * this->b1->sinertia)) + ((this->cx2 * this->cx2) * this->b2->sinertia));
HXLINE( 795)			if ((this->kMass != 0)) {
HXLINE( 795)				this->kMass = (( (Float)(1) ) / this->kMass);
            			}
            			else {
HXLINE( 796)				this->jAcc = ( (Float)(0) );
            			}
HXLINE( 797)			if (!(this->stiff)) {
HXLINE( 798)				bool _hx_tmp2;
HXDLIN( 798)				if (this->breakUnderError) {
HXLINE( 798)					_hx_tmp2 = ((C1 * C1) > (this->maxError * this->maxError));
            				}
            				else {
HXLINE( 798)					_hx_tmp2 = false;
            				}
HXDLIN( 798)				if (_hx_tmp2) {
HXLINE( 798)					return true;
            				}
HXLINE( 800)				 ::zpp_nape::constraint::ZPP_DistanceJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXLINE( 801)				Float omega = ((( (Float)(2) ) * ::Math_obj::PI) * this->frequency);
HXLINE( 802)				this->gamma = (( (Float)(1) ) / ((dt * omega) * ((( (Float)(2) ) * this->damping) + (omega * dt))));
HXLINE( 803)				Float ig = (( (Float)(1) ) / (1 + this->gamma));
HXLINE( 799)				Float biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE( 805)				 ::zpp_nape::constraint::ZPP_DistanceJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 805)				_hx_tmp4->gamma = (_hx_tmp4->gamma * ig);
HXLINE( 800)				_hx_tmp3->kMass = (_hx_tmp3->kMass * ig);
HXLINE( 808)				this->bias = (-(C1) * biasCoef);
HXLINE( 810)				if ((this->bias < -(this->maxError))) {
HXLINE( 810)					this->bias = -(this->maxError);
            				}
            				else {
HXLINE( 811)					if ((this->bias > this->maxError)) {
HXLINE( 811)						this->bias = this->maxError;
            					}
            				}
            			}
            			else {
HXLINE( 815)				this->bias = ( (Float)(0) );
HXLINE( 816)				this->gamma = ( (Float)(0) );
            			}
HXLINE( 818)			 ::zpp_nape::constraint::ZPP_DistanceJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 818)			_hx_tmp5->jAcc = (_hx_tmp5->jAcc * dtratio);
HXLINE( 819)			this->jMax = (this->maxForce * dt);
            		}
HXLINE( 821)		return false;
            	}


void ZPP_DistanceJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_824_warmStart)
HXDLIN( 824)		if (!(this->slack)) {
HXLINE( 856)			{
HXLINE( 857)				Float t = (this->b1->imass * this->jAcc);
HXLINE( 866)				 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN( 866)				_hx_tmp->velx = (_hx_tmp->velx - (this->nx * t));
HXLINE( 867)				 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN( 867)				_hx_tmp1->vely = (_hx_tmp1->vely - (this->ny * t));
            			}
HXLINE( 869)			{
HXLINE( 870)				Float t1 = (this->b2->imass * this->jAcc);
HXLINE( 879)				 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN( 879)				_hx_tmp2->velx = (_hx_tmp2->velx + (this->nx * t1));
HXLINE( 880)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN( 880)				_hx_tmp3->vely = (_hx_tmp3->vely + (this->ny * t1));
            			}
HXLINE( 882)			 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN( 882)			_hx_tmp4->angvel = (_hx_tmp4->angvel - ((this->cx1 * this->b1->iinertia) * this->jAcc));
HXLINE( 883)			 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN( 883)			_hx_tmp5->angvel = (_hx_tmp5->angvel + ((this->cx2 * this->b2->iinertia) * this->jAcc));
            		}
            	}


bool ZPP_DistanceJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_887_applyImpulseVel)
HXLINE( 888)		if (this->slack) {
HXLINE( 888)			return false;
            		}
HXLINE( 889)		Float E = ((((this->nx * (((this->b2->velx + this->b2->kinvelx) - this->b1->velx) - this->b1->kinvelx)) + (this->ny * (((this->b2->vely + this->b2->kinvely) - this->b1->vely) - this->b1->kinvely))) + ((this->b2->angvel + this->b2->kinangvel) * this->cx2)) - ((this->b1->angvel + this->b1->kinangvel) * this->cx1));
HXLINE( 892)		Float j = ((this->kMass * (this->bias - E)) - (this->jAcc * this->gamma));
HXLINE( 893)		{
HXLINE( 902)			Float jOld = this->jAcc;
HXLINE( 903)			 ::zpp_nape::constraint::ZPP_DistanceJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 903)			_hx_tmp->jAcc = (_hx_tmp->jAcc + j);
HXLINE( 904)			{
HXLINE( 905)				bool _hx_tmp1;
HXDLIN( 905)				if (!(this->equal)) {
HXLINE( 905)					_hx_tmp1 = (this->jAcc > 0);
            				}
            				else {
HXLINE( 905)					_hx_tmp1 = false;
            				}
HXDLIN( 905)				if (_hx_tmp1) {
HXLINE( 905)					this->jAcc = ( (Float)(0) );
            				}
HXLINE( 906)				bool _hx_tmp2;
HXDLIN( 906)				if (this->breakUnderForce) {
HXLINE( 906)					_hx_tmp2 = (this->jAcc < -(this->jMax));
            				}
            				else {
HXLINE( 906)					_hx_tmp2 = false;
            				}
HXDLIN( 906)				if (_hx_tmp2) {
HXLINE( 906)					return true;
            				}
HXLINE( 907)				if (!(this->stiff)) {
HXLINE( 908)					if ((this->jAcc < -(this->jMax))) {
HXLINE( 908)						this->jAcc = -(this->jMax);
            					}
            				}
            			}
HXLINE( 911)			j = (this->jAcc - jOld);
            		}
HXLINE( 944)		{
HXLINE( 945)			{
HXLINE( 946)				Float t = (this->b1->imass * j);
HXLINE( 955)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN( 955)				_hx_tmp3->velx = (_hx_tmp3->velx - (this->nx * t));
HXLINE( 956)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN( 956)				_hx_tmp4->vely = (_hx_tmp4->vely - (this->ny * t));
            			}
HXLINE( 958)			{
HXLINE( 959)				Float t1 = (this->b2->imass * j);
HXLINE( 968)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN( 968)				_hx_tmp5->velx = (_hx_tmp5->velx + (this->nx * t1));
HXLINE( 969)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN( 969)				_hx_tmp6->vely = (_hx_tmp6->vely + (this->ny * t1));
            			}
HXLINE( 971)			 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b1;
HXDLIN( 971)			_hx_tmp7->angvel = (_hx_tmp7->angvel - ((this->cx1 * this->b1->iinertia) * j));
HXLINE( 972)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN( 972)			_hx_tmp8->angvel = (_hx_tmp8->angvel + ((this->cx2 * this->b2->iinertia) * j));
            		}
HXLINE( 975)		return false;
            	}


bool ZPP_DistanceJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_977_applyImpulsePos)
HXLINE( 979)		Float j;
HXLINE( 980)		Float r1x = ((Float)0.0);
HXLINE( 981)		Float r1y = ((Float)0.0);
HXLINE( 983)		{
HXLINE( 984)			r1x = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 985)			r1y = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 988)		Float r2x = ((Float)0.0);
HXLINE( 989)		Float r2y = ((Float)0.0);
HXLINE( 991)		{
HXLINE( 992)			r2x = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 993)			r2y = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 996)		bool slack;
HXLINE( 997)		Float nx = ((Float)0.0);
HXLINE( 998)		Float ny = ((Float)0.0);
HXLINE(1000)		nx = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1001)		ny = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
HXLINE(1002)		Float C = ((nx * nx) + (ny * ny));
HXLINE(1003)		if ((C < ::nape::Config_obj::epsilon)) {
HXLINE(1004)			{
HXLINE(1005)				nx = ( (Float)(0) );
HXLINE(1006)				ny = ( (Float)(0) );
            			}
HXLINE(1024)			C = ( (Float)(0) );
HXLINE(1025)			slack = true;
            		}
            		else {
HXLINE(1028)			C = ::Math_obj::sqrt(C);
HXLINE(1029)			{
HXLINE(1030)				Float t = (((Float)1.0) / C);
HXLINE(1039)				nx = (nx * t);
HXLINE(1040)				ny = (ny * t);
            			}
HXLINE(1042)			if (this->equal) {
HXLINE(1043)				C = (C - this->jointMax);
HXLINE(1044)				slack = false;
            			}
            			else {
HXLINE(1047)				if ((C < this->jointMin)) {
HXLINE(1048)					C = (this->jointMin - C);
HXLINE(1049)					{
HXLINE(1050)						nx = -(nx);
HXLINE(1051)						ny = -(ny);
            					}
HXLINE(1053)					slack = false;
            				}
            				else {
HXLINE(1055)					if ((C > this->jointMax)) {
HXLINE(1056)						C = (C - this->jointMax);
HXLINE(1057)						slack = false;
            					}
            					else {
HXLINE(1060)						{
HXLINE(1061)							nx = ( (Float)(0) );
HXLINE(1062)							ny = ( (Float)(0) );
            						}
HXLINE(1080)						C = ( (Float)(0) );
HXLINE(1081)						slack = true;
            					}
            				}
            			}
            		}
HXLINE( 978)		Float E = C;
HXLINE(1087)		if (!(slack)) {
HXLINE(1088)			bool _hx_tmp;
HXDLIN(1088)			if (this->breakUnderError) {
HXLINE(1088)				_hx_tmp = ((E * E) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE(1088)				_hx_tmp = false;
            			}
HXDLIN(1088)			if (_hx_tmp) {
HXLINE(1088)				return true;
            			}
HXLINE(1089)			if (((E * E) < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE(1089)				return false;
            			}
HXLINE(1090)			E = (E * ((Float)0.5));
HXLINE(1091)			if (((E * E) > 6)) {
HXLINE(1092)				Float k = (this->b1->smass + this->b2->smass);
HXLINE(1093)				if ((k > ::nape::Config_obj::epsilon)) {
HXLINE(1094)					k = (((Float)0.75) / k);
HXLINE(1095)					j = (-(E) * k);
HXLINE(1096)					bool _hx_tmp1;
HXDLIN(1096)					if (!(this->equal)) {
HXLINE(1096)						_hx_tmp1 = (j < 0);
            					}
            					else {
HXLINE(1096)						_hx_tmp1 = true;
            					}
HXDLIN(1096)					if (_hx_tmp1) {
HXLINE(1097)						{
HXLINE(1098)							Float t1 = (j * this->b1->imass);
HXLINE(1107)							 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1107)							_hx_tmp2->posx = (_hx_tmp2->posx - (nx * t1));
HXLINE(1108)							 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN(1108)							_hx_tmp3->posy = (_hx_tmp3->posy - (ny * t1));
            						}
HXLINE(1110)						{
HXLINE(1111)							Float t2 = (j * this->b2->imass);
HXLINE(1120)							 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1120)							_hx_tmp4->posx = (_hx_tmp4->posx + (nx * t2));
HXLINE(1121)							 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(1121)							_hx_tmp5->posy = (_hx_tmp5->posy + (ny * t2));
            						}
HXLINE(1124)						nx = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1125)						ny = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
HXLINE(1126)						Float C1 = ((nx * nx) + (ny * ny));
HXLINE(1127)						if ((C1 < ::nape::Config_obj::epsilon)) {
HXLINE(1128)							{
HXLINE(1129)								nx = ( (Float)(0) );
HXLINE(1130)								ny = ( (Float)(0) );
            							}
HXLINE(1148)							C1 = ( (Float)(0) );
HXLINE(1149)							slack = true;
            						}
            						else {
HXLINE(1152)							C1 = ::Math_obj::sqrt(C1);
HXLINE(1153)							{
HXLINE(1154)								Float t3 = (((Float)1.0) / C1);
HXLINE(1163)								nx = (nx * t3);
HXLINE(1164)								ny = (ny * t3);
            							}
HXLINE(1166)							if (this->equal) {
HXLINE(1167)								C1 = (C1 - this->jointMax);
HXLINE(1168)								slack = false;
            							}
            							else {
HXLINE(1171)								if ((C1 < this->jointMin)) {
HXLINE(1172)									C1 = (this->jointMin - C1);
HXLINE(1173)									{
HXLINE(1174)										nx = -(nx);
HXLINE(1175)										ny = -(ny);
            									}
HXLINE(1177)									slack = false;
            								}
            								else {
HXLINE(1179)									if ((C1 > this->jointMax)) {
HXLINE(1180)										C1 = (C1 - this->jointMax);
HXLINE(1181)										slack = false;
            									}
            									else {
HXLINE(1184)										{
HXLINE(1185)											nx = ( (Float)(0) );
HXLINE(1186)											ny = ( (Float)(0) );
            										}
HXLINE(1204)										C1 = ( (Float)(0) );
HXLINE(1205)										slack = true;
            									}
            								}
            							}
            						}
HXLINE(1209)						E = C1;
HXLINE(1211)						E = (E * ((Float)0.5));
            					}
            				}
            			}
HXLINE(1215)			Float cx1 = ((ny * r1x) - (nx * r1y));
HXDLIN(1215)			Float cx2 = ((ny * r2x) - (nx * r2y));
HXLINE(1216)			Float k1 = (((this->b1->smass + this->b2->smass) + ((cx1 * cx1) * this->b1->sinertia)) + ((cx2 * cx2) * this->b2->sinertia));
HXLINE(1221)			if ((k1 != 0)) {
HXLINE(1221)				k1 = (( (Float)(1) ) / k1);
            			}
HXLINE(1222)			j = (-(E) * k1);
HXLINE(1223)			bool _hx_tmp6;
HXDLIN(1223)			if (!(this->equal)) {
HXLINE(1223)				_hx_tmp6 = (j < 0);
            			}
            			else {
HXLINE(1223)				_hx_tmp6 = true;
            			}
HXDLIN(1223)			if (_hx_tmp6) {
HXLINE(1225)				{
HXLINE(1226)					Float t4 = (this->b1->imass * j);
HXLINE(1235)					 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b1;
HXDLIN(1235)					_hx_tmp7->posx = (_hx_tmp7->posx - (nx * t4));
HXLINE(1236)					 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(1236)					_hx_tmp8->posy = (_hx_tmp8->posy - (ny * t4));
            				}
HXLINE(1238)				{
HXLINE(1239)					Float t5 = (this->b2->imass * j);
HXLINE(1248)					 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(1248)					_hx_tmp9->posx = (_hx_tmp9->posx + (nx * t5));
HXLINE(1249)					 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b2;
HXDLIN(1249)					_hx_tmp10->posy = (_hx_tmp10->posy + (ny * t5));
            				}
HXLINE(1251)				{
HXLINE(1251)					 ::zpp_nape::phys::ZPP_Body _this = this->b1;
HXDLIN(1251)					Float dr = ((-(cx1) * this->b1->iinertia) * j);
HXDLIN(1251)					 ::zpp_nape::phys::ZPP_Body _this1 = _this;
HXDLIN(1251)					_this1->rot = (_this1->rot + dr);
HXDLIN(1251)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE(1251)						_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1251)						_this->axisy = ::Math_obj::cos(_this->rot);
            					}
            					else {
HXLINE(1251)						Float d2 = (dr * dr);
HXDLIN(1251)						Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(1251)						Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(1251)						Float nx1 = (((p * _this->axisx) + (dr * _this->axisy)) * m);
HXDLIN(1251)						_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m);
HXDLIN(1251)						_this->axisx = nx1;
            					}
            				}
HXLINE(1252)				{
HXLINE(1252)					 ::zpp_nape::phys::ZPP_Body _this2 = this->b2;
HXDLIN(1252)					Float dr1 = ((cx2 * this->b2->iinertia) * j);
HXDLIN(1252)					 ::zpp_nape::phys::ZPP_Body _this3 = _this2;
HXDLIN(1252)					_this3->rot = (_this3->rot + dr1);
HXDLIN(1252)					if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(1252)						_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(1252)						_this2->axisy = ::Math_obj::cos(_this2->rot);
            					}
            					else {
HXLINE(1252)						Float d21 = (dr1 * dr1);
HXDLIN(1252)						Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(1252)						Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(1252)						Float nx2 = (((p1 * _this2->axisx) + (dr1 * _this2->axisy)) * m1);
HXDLIN(1252)						_this2->axisy = (((p1 * _this2->axisy) - (dr1 * _this2->axisx)) * m1);
HXDLIN(1252)						_this2->axisx = nx2;
            					}
            				}
            			}
            		}
HXLINE(1286)		return false;
            	}


void ZPP_DistanceJoint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_58eb924671686db2_1288_draw)
            	}



hx::ObjectPtr< ZPP_DistanceJoint_obj > ZPP_DistanceJoint_obj::__new() {
	hx::ObjectPtr< ZPP_DistanceJoint_obj > __this = new ZPP_DistanceJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_DistanceJoint_obj > ZPP_DistanceJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_DistanceJoint_obj *__this = (ZPP_DistanceJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_DistanceJoint_obj), true, "zpp_nape.constraint.ZPP_DistanceJoint"));
	*(void **)__this = ZPP_DistanceJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_DistanceJoint_obj::ZPP_DistanceJoint_obj()
{
}

void ZPP_DistanceJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_DistanceJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(jointMin,"jointMin");
	HX_MARK_MEMBER_NAME(jointMax,"jointMax");
	HX_MARK_MEMBER_NAME(slack,"slack");
	HX_MARK_MEMBER_NAME(equal,"equal");
	HX_MARK_MEMBER_NAME(nx,"nx");
	HX_MARK_MEMBER_NAME(ny,"ny");
	HX_MARK_MEMBER_NAME(cx1,"cx1");
	HX_MARK_MEMBER_NAME(cx2,"cx2");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(a1localx,"a1localx");
	HX_MARK_MEMBER_NAME(a1localy,"a1localy");
	HX_MARK_MEMBER_NAME(a1relx,"a1relx");
	HX_MARK_MEMBER_NAME(a1rely,"a1rely");
	HX_MARK_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(a2localx,"a2localx");
	HX_MARK_MEMBER_NAME(a2localy,"a2localy");
	HX_MARK_MEMBER_NAME(a2relx,"a2relx");
	HX_MARK_MEMBER_NAME(a2rely,"a2rely");
	HX_MARK_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_MARK_MEMBER_NAME(kMass,"kMass");
	HX_MARK_MEMBER_NAME(jAcc,"jAcc");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(bias,"bias");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_DistanceJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(jointMin,"jointMin");
	HX_VISIT_MEMBER_NAME(jointMax,"jointMax");
	HX_VISIT_MEMBER_NAME(slack,"slack");
	HX_VISIT_MEMBER_NAME(equal,"equal");
	HX_VISIT_MEMBER_NAME(nx,"nx");
	HX_VISIT_MEMBER_NAME(ny,"ny");
	HX_VISIT_MEMBER_NAME(cx1,"cx1");
	HX_VISIT_MEMBER_NAME(cx2,"cx2");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(a1localx,"a1localx");
	HX_VISIT_MEMBER_NAME(a1localy,"a1localy");
	HX_VISIT_MEMBER_NAME(a1relx,"a1relx");
	HX_VISIT_MEMBER_NAME(a1rely,"a1rely");
	HX_VISIT_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(a2localx,"a2localx");
	HX_VISIT_MEMBER_NAME(a2localy,"a2localy");
	HX_VISIT_MEMBER_NAME(a2relx,"a2relx");
	HX_VISIT_MEMBER_NAME(a2rely,"a2rely");
	HX_VISIT_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_VISIT_MEMBER_NAME(kMass,"kMass");
	HX_VISIT_MEMBER_NAME(jAcc,"jAcc");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(bias,"bias");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_DistanceJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nx") ) { return hx::Val( nx ); }
		if (HX_FIELD_EQ(inName,"ny") ) { return hx::Val( ny ); }
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1 ); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2 ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { return hx::Val( cx1 ); }
		if (HX_FIELD_EQ(inName,"cx2") ) { return hx::Val( cx2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jAcc") ) { return hx::Val( jAcc ); }
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax ); }
		if (HX_FIELD_EQ(inName,"bias") ) { return hx::Val( bias ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slack") ) { return hx::Val( slack ); }
		if (HX_FIELD_EQ(inName,"equal") ) { return hx::Val( equal ); }
		if (HX_FIELD_EQ(inName,"kMass") ) { return hx::Val( kMass ); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { return hx::Val( a1relx ); }
		if (HX_FIELD_EQ(inName,"a1rely") ) { return hx::Val( a1rely ); }
		if (HX_FIELD_EQ(inName,"a2relx") ) { return hx::Val( a2relx ); }
		if (HX_FIELD_EQ(inName,"a2rely") ) { return hx::Val( a2rely ); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { return hx::Val( wrap_a1 ); }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { return hx::Val( wrap_a2 ); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped ); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn ); }
		if (HX_FIELD_EQ(inName,"jointMin") ) { return hx::Val( jointMin ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { return hx::Val( jointMax ); }
		if (HX_FIELD_EQ(inName,"is_slack") ) { return hx::Val( is_slack_dyn() ); }
		if (HX_FIELD_EQ(inName,"a1localx") ) { return hx::Val( a1localx ); }
		if (HX_FIELD_EQ(inName,"a1localy") ) { return hx::Val( a1localy ); }
		if (HX_FIELD_EQ(inName,"setup_a1") ) { return hx::Val( setup_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"a2localx") ) { return hx::Val( a2localx ); }
		if (HX_FIELD_EQ(inName,"a2localy") ) { return hx::Val( a2localy ); }
		if (HX_FIELD_EQ(inName,"setup_a2") ) { return hx::Val( setup_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_a1") ) { return hx::Val( validate_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_a2") ) { return hx::Val( validate_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidate_a1") ) { return hx::Val( invalidate_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_a2") ) { return hx::Val( invalidate_a2_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_DistanceJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nx") ) { nx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ny") ) { ny=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { cx1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx2") ) { cx2=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jAcc") ) { jAcc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bias") ) { bias=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slack") ) { slack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"equal") ) { equal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMass") ) { kMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { a1relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1rely") ) { a1rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2relx") ) { a2relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2rely") ) { a2rely=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { wrap_a1=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { wrap_a2=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::DistanceJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jointMin") ) { jointMin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jointMax") ) { jointMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localx") ) { a1localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localy") ) { a1localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localx") ) { a2localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localy") ) { a2localy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_DistanceJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_zn",38,07,b0,a2));
	outFields->push(HX_("jointMin",68,fa,25,55));
	outFields->push(HX_("jointMax",7a,f3,25,55));
	outFields->push(HX_("slack",50,b2,c1,7e));
	outFields->push(HX_("equal",b4,cf,82,72));
	outFields->push(HX_("nx",4a,60,00,00));
	outFields->push(HX_("ny",4b,60,00,00));
	outFields->push(HX_("cx1",dc,87,4b,00));
	outFields->push(HX_("cx2",dd,87,4b,00));
	outFields->push(HX_("b1",8f,55,00,00));
	outFields->push(HX_("a1localx",5d,6d,78,fb));
	outFields->push(HX_("a1localy",5e,6d,78,fb));
	outFields->push(HX_("a1relx",af,c1,e7,4a));
	outFields->push(HX_("a1rely",b0,c1,e7,4a));
	outFields->push(HX_("wrap_a1",45,eb,57,0d));
	outFields->push(HX_("b2",90,55,00,00));
	outFields->push(HX_("a2localx",1e,e4,0d,25));
	outFields->push(HX_("a2localy",1f,e4,0d,25));
	outFields->push(HX_("a2relx",30,56,4e,de));
	outFields->push(HX_("a2rely",31,56,4e,de));
	outFields->push(HX_("wrap_a2",46,eb,57,0d));
	outFields->push(HX_("kMass",ff,7e,0f,cf));
	outFields->push(HX_("jAcc",f7,46,42,46));
	outFields->push(HX_("jMax",5a,60,4b,46));
	outFields->push(HX_("gamma",27,87,b6,8e));
	outFields->push(HX_("bias",79,ea,16,41));
	outFields->push(HX_("stepped",03,05,60,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_DistanceJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::constraint::DistanceJoint */ ,(int)offsetof(ZPP_DistanceJoint_obj,outer_zn),HX_("outer_zn",38,07,b0,a2)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,jointMin),HX_("jointMin",68,fa,25,55)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,jointMax),HX_("jointMax",7a,f3,25,55)},
	{hx::fsBool,(int)offsetof(ZPP_DistanceJoint_obj,slack),HX_("slack",50,b2,c1,7e)},
	{hx::fsBool,(int)offsetof(ZPP_DistanceJoint_obj,equal),HX_("equal",b4,cf,82,72)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,nx),HX_("nx",4a,60,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,ny),HX_("ny",4b,60,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,cx1),HX_("cx1",dc,87,4b,00)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,cx2),HX_("cx2",dd,87,4b,00)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_DistanceJoint_obj,b1),HX_("b1",8f,55,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a1localx),HX_("a1localx",5d,6d,78,fb)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a1localy),HX_("a1localy",5e,6d,78,fb)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a1relx),HX_("a1relx",af,c1,e7,4a)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a1rely),HX_("a1rely",b0,c1,e7,4a)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_DistanceJoint_obj,wrap_a1),HX_("wrap_a1",45,eb,57,0d)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_DistanceJoint_obj,b2),HX_("b2",90,55,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a2localx),HX_("a2localx",1e,e4,0d,25)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a2localy),HX_("a2localy",1f,e4,0d,25)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a2relx),HX_("a2relx",30,56,4e,de)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,a2rely),HX_("a2rely",31,56,4e,de)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_DistanceJoint_obj,wrap_a2),HX_("wrap_a2",46,eb,57,0d)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,kMass),HX_("kMass",ff,7e,0f,cf)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,jAcc),HX_("jAcc",f7,46,42,46)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,jMax),HX_("jMax",5a,60,4b,46)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,gamma),HX_("gamma",27,87,b6,8e)},
	{hx::fsFloat,(int)offsetof(ZPP_DistanceJoint_obj,bias),HX_("bias",79,ea,16,41)},
	{hx::fsBool,(int)offsetof(ZPP_DistanceJoint_obj,stepped),HX_("stepped",03,05,60,81)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_DistanceJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_DistanceJoint_obj_sMemberFields[] = {
	HX_("outer_zn",38,07,b0,a2),
	HX_("jointMin",68,fa,25,55),
	HX_("jointMax",7a,f3,25,55),
	HX_("slack",50,b2,c1,7e),
	HX_("equal",b4,cf,82,72),
	HX_("is_slack",fb,20,7e,9e),
	HX_("nx",4a,60,00,00),
	HX_("ny",4b,60,00,00),
	HX_("cx1",dc,87,4b,00),
	HX_("cx2",dd,87,4b,00),
	HX_("bodyImpulse",33,76,a2,5f),
	HX_("activeBodies",e6,69,f8,ba),
	HX_("inactiveBodies",4b,89,c5,8c),
	HX_("b1",8f,55,00,00),
	HX_("a1localx",5d,6d,78,fb),
	HX_("a1localy",5e,6d,78,fb),
	HX_("a1relx",af,c1,e7,4a),
	HX_("a1rely",b0,c1,e7,4a),
	HX_("validate_a1",f9,9b,cc,ca),
	HX_("invalidate_a1",34,30,01,a7),
	HX_("setup_a1",72,28,39,23),
	HX_("wrap_a1",45,eb,57,0d),
	HX_("b2",90,55,00,00),
	HX_("a2localx",1e,e4,0d,25),
	HX_("a2localy",1f,e4,0d,25),
	HX_("a2relx",30,56,4e,de),
	HX_("a2rely",31,56,4e,de),
	HX_("validate_a2",fa,9b,cc,ca),
	HX_("invalidate_a2",35,30,01,a7),
	HX_("setup_a2",73,28,39,23),
	HX_("wrap_a2",46,eb,57,0d),
	HX_("kMass",ff,7e,0f,cf),
	HX_("jAcc",f7,46,42,46),
	HX_("jMax",5a,60,4b,46),
	HX_("gamma",27,87,b6,8e),
	HX_("bias",79,ea,16,41),
	HX_("stepped",03,05,60,81),
	HX_("copy",b5,bb,c4,41),
	HX_("validate",96,d0,e3,04),
	HX_("wake_connected",ae,cf,dd,3d),
	HX_("forest",dd,8c,88,fd),
	HX_("pair_exists",a1,6a,58,69),
	HX_("clearcache",95,69,f1,82),
	HX_("preStep",0f,c1,c0,24),
	HX_("warmStart",dd,27,03,eb),
	HX_("applyImpulseVel",b6,c7,50,1f),
	HX_("applyImpulsePos",ed,42,4c,1f),
	HX_("draw",04,2c,70,42),
	::String(null()) };

hx::Class ZPP_DistanceJoint_obj::__mClass;

void ZPP_DistanceJoint_obj::__register()
{
	ZPP_DistanceJoint_obj _hx_dummy;
	ZPP_DistanceJoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.constraint.ZPP_DistanceJoint",80,d1,0d,cb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_DistanceJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_DistanceJoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_DistanceJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_DistanceJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
