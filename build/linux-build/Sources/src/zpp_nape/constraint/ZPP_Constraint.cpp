// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_callbacks_CbType
#include <hxinc/nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeIterator
#include <hxinc/nape/callbacks/CbTypeIterator.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeList
#include <hxinc/nape/callbacks/CbTypeList.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <hxinc/nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <hxinc/zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <hxinc/zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <hxinc/zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <hxinc/zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <hxinc/zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <hxinc/zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CbTypeList
#include <hxinc/zpp_nape/util/ZPP_CbTypeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f0bfa089167e96b2_174_new,"zpp_nape.constraint.ZPP_Constraint","new",0xdb5b4dc4,"zpp_nape.constraint.ZPP_Constraint.new","zpp_nape/constraint/Constraint.hx",174,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_176_clear,"zpp_nape.constraint.ZPP_Constraint","clear",0x92480ff1,"zpp_nape.constraint.ZPP_Constraint.clear","zpp_nape/constraint/Constraint.hx",176,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_210_immutable_midstep,"zpp_nape.constraint.ZPP_Constraint","immutable_midstep",0x734194fb,"zpp_nape.constraint.ZPP_Constraint.immutable_midstep","zpp_nape/constraint/Constraint.hx",210,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_216_setupcbTypes,"zpp_nape.constraint.ZPP_Constraint","setupcbTypes",0x685aaa99,"zpp_nape.constraint.ZPP_Constraint.setupcbTypes","zpp_nape/constraint/Constraint.hx",216,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_227_immutable_cbTypes,"zpp_nape.constraint.ZPP_Constraint","immutable_cbTypes",0xd4766181,"zpp_nape.constraint.ZPP_Constraint.immutable_cbTypes","zpp_nape/constraint/Constraint.hx",227,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_230_wrap_cbTypes_subber,"zpp_nape.constraint.ZPP_Constraint","wrap_cbTypes_subber",0xf0d24acd,"zpp_nape.constraint.ZPP_Constraint.wrap_cbTypes_subber","zpp_nape/constraint/Constraint.hx",230,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_244_wrap_cbTypes_adder,"zpp_nape.constraint.ZPP_Constraint","wrap_cbTypes_adder",0xac26ef90,"zpp_nape.constraint.ZPP_Constraint.wrap_cbTypes_adder","zpp_nape/constraint/Constraint.hx",244,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_249_insert_cbtype,"zpp_nape.constraint.ZPP_Constraint","insert_cbtype",0xb0fdbec3,"zpp_nape.constraint.ZPP_Constraint.insert_cbtype","zpp_nape/constraint/Constraint.hx",249,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_284_alloc_cbSet,"zpp_nape.constraint.ZPP_Constraint","alloc_cbSet",0x11685d1d,"zpp_nape.constraint.ZPP_Constraint.alloc_cbSet","zpp_nape/constraint/Constraint.hx",284,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_298_dealloc_cbSet,"zpp_nape.constraint.ZPP_Constraint","dealloc_cbSet",0xbb8dc43c,"zpp_nape.constraint.ZPP_Constraint.dealloc_cbSet","zpp_nape/constraint/Constraint.hx",298,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_324_activate,"zpp_nape.constraint.ZPP_Constraint","activate",0x490f93cf,"zpp_nape.constraint.ZPP_Constraint.activate","zpp_nape/constraint/Constraint.hx",324,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_327_deactivate,"zpp_nape.constraint.ZPP_Constraint","deactivate",0xd9481350,"zpp_nape.constraint.ZPP_Constraint.deactivate","zpp_nape/constraint/Constraint.hx",327,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_329_addedToSpace,"zpp_nape.constraint.ZPP_Constraint","addedToSpace",0x8f67fa87,"zpp_nape.constraint.ZPP_Constraint.addedToSpace","zpp_nape/constraint/Constraint.hx",329,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_341_removedFromSpace,"zpp_nape.constraint.ZPP_Constraint","removedFromSpace",0xf1d43758,"zpp_nape.constraint.ZPP_Constraint.removedFromSpace","zpp_nape/constraint/Constraint.hx",341,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_353_activeInSpace,"zpp_nape.constraint.ZPP_Constraint","activeInSpace",0x50f44fdf,"zpp_nape.constraint.ZPP_Constraint.activeInSpace","zpp_nape/constraint/Constraint.hx",353,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_383_inactiveOrOutSpace,"zpp_nape.constraint.ZPP_Constraint","inactiveOrOutSpace",0x3adcf402,"zpp_nape.constraint.ZPP_Constraint.inactiveOrOutSpace","zpp_nape/constraint/Constraint.hx",383,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_406_activeBodies,"zpp_nape.constraint.ZPP_Constraint","activeBodies",0x40b02002,"zpp_nape.constraint.ZPP_Constraint.activeBodies","zpp_nape/constraint/Constraint.hx",406,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_417_inactiveBodies,"zpp_nape.constraint.ZPP_Constraint","inactiveBodies",0xb86bfe67,"zpp_nape.constraint.ZPP_Constraint.inactiveBodies","zpp_nape/constraint/Constraint.hx",417,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_428_clearcache,"zpp_nape.constraint.ZPP_Constraint","clearcache",0x203820b1,"zpp_nape.constraint.ZPP_Constraint.clearcache","zpp_nape/constraint/Constraint.hx",428,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_439_validate,"zpp_nape.constraint.ZPP_Constraint","validate",0x684748b2,"zpp_nape.constraint.ZPP_Constraint.validate","zpp_nape/constraint/Constraint.hx",439,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_450_wake_connected,"zpp_nape.constraint.ZPP_Constraint","wake_connected",0x698444ca,"zpp_nape.constraint.ZPP_Constraint.wake_connected","zpp_nape/constraint/Constraint.hx",450,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_461_forest,"zpp_nape.constraint.ZPP_Constraint","forest",0x62a685f9,"zpp_nape.constraint.ZPP_Constraint.forest","zpp_nape/constraint/Constraint.hx",461,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_480_pair_exists,"zpp_nape.constraint.ZPP_Constraint","pair_exists",0x69f1ec05,"zpp_nape.constraint.ZPP_Constraint.pair_exists","zpp_nape/constraint/Constraint.hx",480,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_483_broken,"zpp_nape.constraint.ZPP_Constraint","broken",0x8175af71,"zpp_nape.constraint.ZPP_Constraint.broken","zpp_nape/constraint/Constraint.hx",483,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_486_warmStart,"zpp_nape.constraint.ZPP_Constraint","warmStart",0x7ea8c841,"zpp_nape.constraint.ZPP_Constraint.warmStart","zpp_nape/constraint/Constraint.hx",486,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_506_preStep,"zpp_nape.constraint.ZPP_Constraint","preStep",0x39dcc073,"zpp_nape.constraint.ZPP_Constraint.preStep","zpp_nape/constraint/Constraint.hx",506,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_518_applyImpulseVel,"zpp_nape.constraint.ZPP_Constraint","applyImpulseVel",0x2550cb1a,"zpp_nape.constraint.ZPP_Constraint.applyImpulseVel","zpp_nape/constraint/Constraint.hx",518,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_530_applyImpulsePos,"zpp_nape.constraint.ZPP_Constraint","applyImpulsePos",0x254c4651,"zpp_nape.constraint.ZPP_Constraint.applyImpulsePos","zpp_nape/constraint/Constraint.hx",530,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_533_wake,"zpp_nape.constraint.ZPP_Constraint","wake",0x1a789640,"zpp_nape.constraint.ZPP_Constraint.wake","zpp_nape/constraint/Constraint.hx",533,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_535_draw,"zpp_nape.constraint.ZPP_Constraint","draw",0x0df66620,"zpp_nape.constraint.ZPP_Constraint.draw","zpp_nape/constraint/Constraint.hx",535,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_537_copy,"zpp_nape.constraint.ZPP_Constraint","copy",0x0d4af5d1,"zpp_nape.constraint.ZPP_Constraint.copy","zpp_nape/constraint/Constraint.hx",537,0xf29441f1)
HX_LOCAL_STACK_FRAME(_hx_pos_f0bfa089167e96b2_539_copyto,"zpp_nape.constraint.ZPP_Constraint","copyto",0x2e51318c,"zpp_nape.constraint.ZPP_Constraint.copyto","zpp_nape/constraint/Constraint.hx",539,0xf29441f1)
namespace zpp_nape{
namespace constraint{

void ZPP_Constraint_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f0bfa089167e96b2_174_new)
HXLINE( 495)		this->pre_dt = ((Float)0.0);
HXLINE( 215)		this->wrap_cbTypes = null();
HXLINE( 214)		this->cbSet = null();
HXLINE( 213)		this->cbTypes = null();
HXLINE( 192)		this->_hx___velocity = false;
HXLINE( 191)		this->ignore = false;
HXLINE( 190)		this->component = null();
HXLINE( 189)		this->removeOnBreak = false;
HXLINE( 188)		this->breakUnderError = false;
HXLINE( 187)		this->breakUnderForce = false;
HXLINE( 186)		this->maxError = ((Float)0.0);
HXLINE( 185)		this->maxForce = ((Float)0.0);
HXLINE( 184)		this->damping = ((Float)0.0);
HXLINE( 183)		this->frequency = ((Float)0.0);
HXLINE( 182)		this->stiff = false;
HXLINE( 181)		this->active = false;
HXLINE( 180)		this->space = null();
HXLINE( 179)		this->compound = null();
HXLINE( 178)		this->userData = null();
HXLINE( 177)		this->id = 0;
HXLINE( 175)		this->outer = null();
HXLINE( 194)		this->_hx___velocity = false;
HXLINE( 195)		this->id = ::zpp_nape::ZPP_ID_obj::Constraint();
HXLINE( 196)		this->stiff = true;
HXLINE( 197)		this->active = true;
HXLINE( 198)		this->ignore = false;
HXLINE( 199)		this->frequency = ( (Float)(10) );
HXLINE( 200)		this->damping = ( (Float)(1) );
HXLINE( 201)		this->maxForce = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 202)		this->maxError = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 203)		this->breakUnderForce = false;
HXLINE( 204)		this->removeOnBreak = true;
HXLINE( 205)		this->pre_dt = ((Float)-1.0);
HXLINE( 206)		this->cbTypes =  ::zpp_nape::util::ZNPList_ZPP_CbType_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_Constraint_obj::__CreateEmpty() { return new ZPP_Constraint_obj; }

void *ZPP_Constraint_obj::_hx_vtable = 0;

Dynamic ZPP_Constraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Constraint_obj > _hx_result = new ZPP_Constraint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Constraint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c84a5ec;
}

void ZPP_Constraint_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_176_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,clear,(void))

void ZPP_Constraint_obj::immutable_midstep(::String name){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_210_immutable_midstep)
HXDLIN( 210)		bool _hx_tmp;
HXDLIN( 210)		if (hx::IsNotNull( this->space )) {
HXDLIN( 210)			_hx_tmp = this->space->midstep;
            		}
            		else {
HXDLIN( 210)			_hx_tmp = false;
            		}
HXDLIN( 210)		if (_hx_tmp) {
HXDLIN( 210)			HX_STACK_DO_THROW(((HX_("Error: Constraint::",cb,f5,02,d5) + name) + HX_(" cannot be set during space step()",28,9c,aa,20)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,immutable_midstep,(void))

void ZPP_Constraint_obj::setupcbTypes(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_216_setupcbTypes)
HXLINE( 217)		this->wrap_cbTypes = ::zpp_nape::util::ZPP_CbTypeList_obj::get(this->cbTypes,null());
HXLINE( 218)		this->wrap_cbTypes->zpp_inner->adder = this->wrap_cbTypes_adder_dyn();
HXLINE( 219)		this->wrap_cbTypes->zpp_inner->subber = this->wrap_cbTypes_subber_dyn();
HXLINE( 220)		this->wrap_cbTypes->zpp_inner->dontremove = true;
HXLINE( 222)		this->wrap_cbTypes->zpp_inner->_modifiable = this->immutable_cbTypes_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,setupcbTypes,(void))

void ZPP_Constraint_obj::immutable_cbTypes(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_227_immutable_cbTypes)
HXDLIN( 227)		this->immutable_midstep(HX_("Constraint::cbTypes",7d,d2,fd,d6));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,immutable_cbTypes,(void))

void ZPP_Constraint_obj::wrap_cbTypes_subber( ::nape::callbacks::CbType pcb){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_230_wrap_cbTypes_subber)
HXLINE( 231)		 ::zpp_nape::callbacks::ZPP_CbType cb = pcb->zpp_inner;
HXLINE( 232)		if (this->cbTypes->has(cb)) {
HXLINE( 233)			if (hx::IsNotNull( this->space )) {
HXLINE( 234)				this->dealloc_cbSet();
HXLINE( 235)				cb->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 237)			this->cbTypes->remove(cb);
HXLINE( 238)			if (hx::IsNotNull( this->space )) {
HXLINE( 239)				this->alloc_cbSet();
HXLINE( 240)				this->wake();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,wrap_cbTypes_subber,(void))

bool ZPP_Constraint_obj::wrap_cbTypes_adder( ::nape::callbacks::CbType cb){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_244_wrap_cbTypes_adder)
HXLINE( 245)		this->insert_cbtype(cb->zpp_inner);
HXLINE( 246)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,wrap_cbTypes_adder,return )

void ZPP_Constraint_obj::insert_cbtype( ::zpp_nape::callbacks::ZPP_CbType cb){
            	HX_GC_STACKFRAME(&_hx_pos_f0bfa089167e96b2_249_insert_cbtype)
HXDLIN( 249)		if (!(this->cbTypes->has(cb))) {
HXLINE( 250)			if (hx::IsNotNull( this->space )) {
HXLINE( 251)				this->dealloc_cbSet();
HXLINE( 252)				cb->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 254)			{
HXLINE( 255)				 ::zpp_nape::util::ZNPNode_ZPP_CbType pre = null();
HXLINE( 256)				{
HXLINE( 257)					 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->cbTypes->head;
HXLINE( 258)					while(hx::IsNotNull( cx_ite )){
HXLINE( 259)						 ::zpp_nape::callbacks::ZPP_CbType j = cx_ite->elt;
HXLINE( 260)						{
HXLINE( 261)							if ((cb->id < j->id)) {
HXLINE( 261)								goto _hx_goto_7;
            							}
HXLINE( 262)							pre = cx_ite;
            						}
HXLINE( 264)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_7:;
            				}
HXLINE( 267)				{
HXLINE( 267)					 ::zpp_nape::util::ZNPList_ZPP_CbType _this = this->cbTypes;
HXDLIN( 267)					 ::zpp_nape::util::ZNPNode_ZPP_CbType ret;
HXDLIN( 267)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 267)						ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 267)						ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 267)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 267)						ret->next = null();
            					}
HXDLIN( 267)					ret->elt = cb;
HXDLIN( 267)					 ::zpp_nape::util::ZNPNode_ZPP_CbType temp = ret;
HXDLIN( 267)					if (hx::IsNull( pre )) {
HXLINE( 267)						temp->next = _this->head;
HXDLIN( 267)						_this->head = temp;
            					}
            					else {
HXLINE( 267)						temp->next = pre->next;
HXDLIN( 267)						pre->next = temp;
            					}
HXDLIN( 267)					_this->pushmod = (_this->modified = true);
HXDLIN( 267)					_this->length++;
            				}
            			}
HXLINE( 269)			if (hx::IsNotNull( this->space )) {
HXLINE( 270)				this->alloc_cbSet();
HXLINE( 271)				this->wake();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,insert_cbtype,(void))

void ZPP_Constraint_obj::alloc_cbSet(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_284_alloc_cbSet)
HXDLIN( 284)		if (hx::IsNotNull( (this->cbSet = this->space->cbsets->get(this->cbTypes)) )) {
HXLINE( 285)			this->cbSet->count++;
HXLINE( 286)			this->cbSet->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,alloc_cbSet,(void))

void ZPP_Constraint_obj::dealloc_cbSet(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_298_dealloc_cbSet)
HXDLIN( 298)		if (hx::IsNotNull( this->cbSet )) {
HXLINE( 299)			this->cbSet->constraints->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE( 300)			if ((--this->cbSet->count == 0)) {
HXLINE( 301)				this->space->cbsets->remove(this->cbSet);
HXLINE( 302)				{
HXLINE( 303)					 ::zpp_nape::callbacks::ZPP_CbSet o = this->cbSet;
HXLINE( 312)					{
HXLINE( 312)						o->listeners->clear();
HXDLIN( 312)						o->zip_listeners = true;
HXDLIN( 312)						o->bodylisteners->clear();
HXDLIN( 312)						o->zip_bodylisteners = true;
HXDLIN( 312)						o->conlisteners->clear();
HXDLIN( 312)						o->zip_conlisteners = true;
HXDLIN( 312)						while(hx::IsNotNull( o->cbTypes->head )){
HXLINE( 312)							 ::zpp_nape::callbacks::ZPP_CbType cb = o->cbTypes->pop_unsafe();
HXDLIN( 312)							cb->cbsets->remove(o);
            						}
            					}
HXLINE( 313)					o->next = ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool;
HXLINE( 314)					::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool = o;
            				}
            			}
HXLINE( 320)			this->cbSet = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,dealloc_cbSet,(void))

void ZPP_Constraint_obj::activate(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_324_activate)
HXDLIN( 324)		if (hx::IsNotNull( this->space )) {
HXDLIN( 324)			this->activeInSpace();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,activate,(void))

void ZPP_Constraint_obj::deactivate(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_327_deactivate)
HXDLIN( 327)		if (hx::IsNotNull( this->space )) {
HXDLIN( 327)			this->inactiveOrOutSpace();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,deactivate,(void))

void ZPP_Constraint_obj::addedToSpace(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_329_addedToSpace)
HXLINE( 330)		if (this->active) {
HXLINE( 330)			this->activeInSpace();
            		}
HXLINE( 331)		this->activeBodies();
HXLINE( 332)		{
HXLINE( 333)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->cbTypes->head;
HXLINE( 334)			while(hx::IsNotNull( cx_ite )){
HXLINE( 335)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 336)				cb->constraints->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 337)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,addedToSpace,(void))

void ZPP_Constraint_obj::removedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_341_removedFromSpace)
HXLINE( 342)		if (this->active) {
HXLINE( 342)			this->inactiveOrOutSpace();
            		}
HXLINE( 343)		this->inactiveBodies();
HXLINE( 344)		{
HXLINE( 345)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->cbTypes->head;
HXLINE( 346)			while(hx::IsNotNull( cx_ite )){
HXLINE( 347)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 348)				cb->constraints->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE( 349)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,removedFromSpace,(void))

void ZPP_Constraint_obj::activeInSpace(){
            	HX_GC_STACKFRAME(&_hx_pos_f0bfa089167e96b2_353_activeInSpace)
HXLINE( 354)		this->alloc_cbSet();
HXLINE( 364)		if (hx::IsNull( ::zpp_nape::space::ZPP_Component_obj::zpp_pool )) {
HXLINE( 365)			this->component =  ::zpp_nape::space::ZPP_Component_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 371)			this->component = ::zpp_nape::space::ZPP_Component_obj::zpp_pool;
HXLINE( 372)			::zpp_nape::space::ZPP_Component_obj::zpp_pool = this->component->next;
HXLINE( 373)			this->component->next = null();
            		}
HXLINE( 380)		this->component->isBody = false;
HXLINE( 381)		this->component->constraint = hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,activeInSpace,(void))

void ZPP_Constraint_obj::inactiveOrOutSpace(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_383_inactiveOrOutSpace)
HXLINE( 384)		this->dealloc_cbSet();
HXLINE( 385)		{
HXLINE( 386)			 ::zpp_nape::space::ZPP_Component o = this->component;
HXLINE( 395)			{
HXLINE( 395)				o->body = null();
HXDLIN( 395)				o->constraint = null();
            			}
HXLINE( 396)			o->next = ::zpp_nape::space::ZPP_Component_obj::zpp_pool;
HXLINE( 397)			::zpp_nape::space::ZPP_Component_obj::zpp_pool = o;
            		}
HXLINE( 402)		this->component = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,inactiveOrOutSpace,(void))

void ZPP_Constraint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_406_activeBodies)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,activeBodies,(void))

void ZPP_Constraint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_417_inactiveBodies)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,inactiveBodies,(void))

void ZPP_Constraint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_428_clearcache)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,clearcache,(void))

void ZPP_Constraint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_439_validate)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,validate,(void))

void ZPP_Constraint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_450_wake_connected)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,wake_connected,(void))

void ZPP_Constraint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_461_forest)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,forest,(void))

bool ZPP_Constraint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_480_pair_exists)
HXDLIN( 480)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Constraint_obj,pair_exists,return )

void ZPP_Constraint_obj::broken(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_483_broken)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,broken,(void))

void ZPP_Constraint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_486_warmStart)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,warmStart,(void))

bool ZPP_Constraint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_506_preStep)
HXDLIN( 506)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,preStep,return )

bool ZPP_Constraint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_518_applyImpulseVel)
HXDLIN( 518)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,applyImpulseVel,return )

bool ZPP_Constraint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_530_applyImpulsePos)
HXDLIN( 530)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,applyImpulsePos,return )

void ZPP_Constraint_obj::wake(){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_533_wake)
HXDLIN( 533)		if (hx::IsNotNull( this->space )) {
HXDLIN( 533)			this->space->wake_constraint(hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Constraint_obj,wake,(void))

void ZPP_Constraint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_535_draw)
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,draw,(void))

 ::nape::constraint::Constraint ZPP_Constraint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_537_copy)
HXDLIN( 537)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Constraint_obj,copy,return )

void ZPP_Constraint_obj::copyto( ::nape::constraint::Constraint ret){
            	HX_STACKFRAME(&_hx_pos_f0bfa089167e96b2_539_copyto)
HXLINE( 540)		 ::nape::constraint::Constraint me = this->outer;
HXLINE( 541)		{
HXLINE( 541)			if (hx::IsNull( me->zpp_inner->wrap_cbTypes )) {
HXLINE( 541)				me->zpp_inner->setupcbTypes();
            			}
HXDLIN( 541)			 ::nape::callbacks::CbTypeList _this = me->zpp_inner->wrap_cbTypes;
HXDLIN( 541)			_this->zpp_inner->valmod();
HXDLIN( 541)			 ::nape::callbacks::CbTypeIterator _g = ::nape::callbacks::CbTypeIterator_obj::get(_this);
HXDLIN( 541)			while(true){
HXLINE( 541)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 541)				 ::nape::callbacks::CbTypeList _this1 = _g->zpp_inner;
HXDLIN( 541)				_this1->zpp_inner->valmod();
HXDLIN( 541)				if (_this1->zpp_inner->zip_length) {
HXLINE( 541)					_this1->zpp_inner->zip_length = false;
HXDLIN( 541)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 541)				int length = _this1->zpp_inner->user_length;
HXDLIN( 541)				_g->zpp_critical = true;
HXDLIN( 541)				bool _hx_tmp;
HXDLIN( 541)				if ((_g->zpp_i < length)) {
HXLINE( 541)					_hx_tmp = true;
            				}
            				else {
HXLINE( 541)					{
HXLINE( 541)						_g->zpp_next = ::nape::callbacks::CbTypeIterator_obj::zpp_pool;
HXDLIN( 541)						::nape::callbacks::CbTypeIterator_obj::zpp_pool = _g;
HXDLIN( 541)						_g->zpp_inner = null();
            					}
HXDLIN( 541)					_hx_tmp = false;
            				}
HXDLIN( 541)				if (!(_hx_tmp)) {
HXLINE( 541)					goto _hx_goto_35;
            				}
HXDLIN( 541)				_g->zpp_critical = false;
HXDLIN( 541)				 ::nape::callbacks::CbType cb = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 541)				{
HXLINE( 541)					if (hx::IsNull( ret->zpp_inner->wrap_cbTypes )) {
HXLINE( 541)						ret->zpp_inner->setupcbTypes();
            					}
HXDLIN( 541)					 ::nape::callbacks::CbTypeList _this2 = ret->zpp_inner->wrap_cbTypes;
HXDLIN( 541)					if (_this2->zpp_inner->reverse_flag) {
HXLINE( 541)						_this2->push(cb);
            					}
            					else {
HXLINE( 541)						_this2->unshift(cb);
            					}
            				}
            			}
            			_hx_goto_35:;
            		}
HXLINE( 542)		ret->zpp_inner->removeOnBreak = me->zpp_inner->removeOnBreak;
HXLINE( 543)		{
HXLINE( 543)			bool breakUnderError = me->zpp_inner->breakUnderError;
HXDLIN( 543)			if ((ret->zpp_inner->breakUnderError != breakUnderError)) {
HXLINE( 543)				ret->zpp_inner->breakUnderError = breakUnderError;
HXDLIN( 543)				ret->zpp_inner->wake();
            			}
            		}
HXLINE( 544)		{
HXLINE( 544)			bool breakUnderForce = me->zpp_inner->breakUnderForce;
HXDLIN( 544)			if ((ret->zpp_inner->breakUnderForce != breakUnderForce)) {
HXLINE( 544)				ret->zpp_inner->breakUnderForce = breakUnderForce;
HXDLIN( 544)				ret->zpp_inner->wake();
            			}
            		}
HXLINE( 545)		{
HXLINE( 545)			Float maxError = me->zpp_inner->maxError;
HXDLIN( 545)			{
HXLINE( 545)				if ((maxError != maxError)) {
HXLINE( 545)					HX_STACK_DO_THROW(HX_("Error: Constraint::maxError cannot be NaN",aa,5a,26,1b));
            				}
HXDLIN( 545)				if ((maxError < 0)) {
HXLINE( 545)					HX_STACK_DO_THROW(HX_("Error: Constraint::maxError must be >=0",1a,7b,31,c4));
            				}
HXDLIN( 545)				if ((ret->zpp_inner->maxError != maxError)) {
HXLINE( 545)					ret->zpp_inner->maxError = maxError;
HXDLIN( 545)					ret->zpp_inner->wake();
            				}
            			}
            		}
HXLINE( 546)		{
HXLINE( 546)			Float maxForce = me->zpp_inner->maxForce;
HXDLIN( 546)			{
HXLINE( 546)				if ((maxForce != maxForce)) {
HXLINE( 546)					HX_STACK_DO_THROW(HX_("Error: Constraint::maxForce cannot be NaN",0d,98,fe,01));
            				}
HXDLIN( 546)				if ((maxForce < 0)) {
HXLINE( 546)					HX_STACK_DO_THROW(HX_("Error: Constraint::maxForce must be >=0",bd,89,ae,46));
            				}
HXDLIN( 546)				if ((ret->zpp_inner->maxForce != maxForce)) {
HXLINE( 546)					ret->zpp_inner->maxForce = maxForce;
HXDLIN( 546)					ret->zpp_inner->wake();
            				}
            			}
            		}
HXLINE( 547)		{
HXLINE( 547)			Float damping = me->zpp_inner->damping;
HXDLIN( 547)			{
HXLINE( 547)				if ((damping != damping)) {
HXLINE( 547)					HX_STACK_DO_THROW(HX_("Error: Constraint::Damping cannot be Nan",b2,2b,24,5d));
            				}
HXDLIN( 547)				if ((damping < 0)) {
HXLINE( 547)					HX_STACK_DO_THROW(HX_("Error: Constraint::Damping must be >=0",02,c2,61,64));
            				}
HXDLIN( 547)				if ((ret->zpp_inner->damping != damping)) {
HXLINE( 547)					ret->zpp_inner->damping = damping;
HXDLIN( 547)					if (!(ret->zpp_inner->stiff)) {
HXLINE( 547)						ret->zpp_inner->wake();
            					}
            				}
            			}
            		}
HXLINE( 548)		{
HXLINE( 548)			Float frequency = me->zpp_inner->frequency;
HXDLIN( 548)			{
HXLINE( 548)				if ((frequency != frequency)) {
HXLINE( 548)					HX_STACK_DO_THROW(HX_("Error: Constraint::Frequency cannot be NaN",2c,1e,c8,25));
            				}
HXDLIN( 548)				if ((frequency <= 0)) {
HXLINE( 548)					HX_STACK_DO_THROW(HX_("Error: Constraint::Frequency must be >0",87,a7,de,c8));
            				}
HXDLIN( 548)				if ((ret->zpp_inner->frequency != frequency)) {
HXLINE( 548)					ret->zpp_inner->frequency = frequency;
HXDLIN( 548)					if (!(ret->zpp_inner->stiff)) {
HXLINE( 548)						ret->zpp_inner->wake();
            					}
            				}
            			}
            		}
HXLINE( 549)		{
HXLINE( 549)			bool stiff = me->zpp_inner->stiff;
HXDLIN( 549)			if ((ret->zpp_inner->stiff != stiff)) {
HXLINE( 549)				ret->zpp_inner->stiff = stiff;
HXDLIN( 549)				ret->zpp_inner->wake();
            			}
            		}
HXLINE( 550)		{
HXLINE( 550)			bool ignore = me->zpp_inner->ignore;
HXDLIN( 550)			if ((ret->zpp_inner->ignore != ignore)) {
HXLINE( 550)				ret->zpp_inner->ignore = ignore;
HXDLIN( 550)				ret->zpp_inner->wake();
            			}
            		}
HXLINE( 551)		{
HXLINE( 551)			bool active = me->zpp_inner->active;
HXDLIN( 551)			if ((ret->zpp_inner->active != active)) {
HXLINE( 551)				if (hx::IsNotNull( ret->zpp_inner->component )) {
HXLINE( 551)					ret->zpp_inner->component->woken = false;
            				}
HXDLIN( 551)				ret->zpp_inner->clearcache();
HXDLIN( 551)				if (active) {
HXLINE( 551)					ret->zpp_inner->active = active;
HXDLIN( 551)					ret->zpp_inner->activate();
HXDLIN( 551)					if (hx::IsNotNull( ret->zpp_inner->space )) {
HXLINE( 551)						if (hx::IsNotNull( ret->zpp_inner->component )) {
HXLINE( 551)							ret->zpp_inner->component->sleeping = true;
            						}
HXDLIN( 551)						ret->zpp_inner->space->wake_constraint(ret->zpp_inner,true);
            					}
            				}
            				else {
HXLINE( 551)					if (hx::IsNotNull( ret->zpp_inner->space )) {
HXLINE( 551)						ret->zpp_inner->wake();
HXDLIN( 551)						ret->zpp_inner->space->live_constraints->remove(ret->zpp_inner);
            					}
HXDLIN( 551)					ret->zpp_inner->active = active;
HXDLIN( 551)					ret->zpp_inner->deactivate();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Constraint_obj,copyto,(void))


hx::ObjectPtr< ZPP_Constraint_obj > ZPP_Constraint_obj::__new() {
	hx::ObjectPtr< ZPP_Constraint_obj > __this = new ZPP_Constraint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Constraint_obj > ZPP_Constraint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Constraint_obj *__this = (ZPP_Constraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Constraint_obj), true, "zpp_nape.constraint.ZPP_Constraint"));
	*(void **)__this = ZPP_Constraint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Constraint_obj::ZPP_Constraint_obj()
{
}

void ZPP_Constraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Constraint);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(compound,"compound");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(stiff,"stiff");
	HX_MARK_MEMBER_NAME(frequency,"frequency");
	HX_MARK_MEMBER_NAME(damping,"damping");
	HX_MARK_MEMBER_NAME(maxForce,"maxForce");
	HX_MARK_MEMBER_NAME(maxError,"maxError");
	HX_MARK_MEMBER_NAME(breakUnderForce,"breakUnderForce");
	HX_MARK_MEMBER_NAME(breakUnderError,"breakUnderError");
	HX_MARK_MEMBER_NAME(removeOnBreak,"removeOnBreak");
	HX_MARK_MEMBER_NAME(component,"component");
	HX_MARK_MEMBER_NAME(ignore,"ignore");
	HX_MARK_MEMBER_NAME(_hx___velocity,"__velocity");
	HX_MARK_MEMBER_NAME(cbTypes,"cbTypes");
	HX_MARK_MEMBER_NAME(cbSet,"cbSet");
	HX_MARK_MEMBER_NAME(wrap_cbTypes,"wrap_cbTypes");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	HX_MARK_END_CLASS();
}

void ZPP_Constraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(compound,"compound");
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(stiff,"stiff");
	HX_VISIT_MEMBER_NAME(frequency,"frequency");
	HX_VISIT_MEMBER_NAME(damping,"damping");
	HX_VISIT_MEMBER_NAME(maxForce,"maxForce");
	HX_VISIT_MEMBER_NAME(maxError,"maxError");
	HX_VISIT_MEMBER_NAME(breakUnderForce,"breakUnderForce");
	HX_VISIT_MEMBER_NAME(breakUnderError,"breakUnderError");
	HX_VISIT_MEMBER_NAME(removeOnBreak,"removeOnBreak");
	HX_VISIT_MEMBER_NAME(component,"component");
	HX_VISIT_MEMBER_NAME(ignore,"ignore");
	HX_VISIT_MEMBER_NAME(_hx___velocity,"__velocity");
	HX_VISIT_MEMBER_NAME(cbTypes,"cbTypes");
	HX_VISIT_MEMBER_NAME(cbSet,"cbSet");
	HX_VISIT_MEMBER_NAME(wrap_cbTypes,"wrap_cbTypes");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
}

hx::Val ZPP_Constraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"wake") ) { return hx::Val( wake_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space ); }
		if (HX_FIELD_EQ(inName,"stiff") ) { return hx::Val( stiff ); }
		if (HX_FIELD_EQ(inName,"cbSet") ) { return hx::Val( cbSet ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"ignore") ) { return hx::Val( ignore ); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn() ); }
		if (HX_FIELD_EQ(inName,"broken") ) { return hx::Val( broken_dyn() ); }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return hx::Val( pre_dt ); }
		if (HX_FIELD_EQ(inName,"copyto") ) { return hx::Val( copyto_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"damping") ) { return hx::Val( damping ); }
		if (HX_FIELD_EQ(inName,"cbTypes") ) { return hx::Val( cbTypes ); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData ); }
		if (HX_FIELD_EQ(inName,"compound") ) { return hx::Val( compound ); }
		if (HX_FIELD_EQ(inName,"maxForce") ) { return hx::Val( maxForce ); }
		if (HX_FIELD_EQ(inName,"maxError") ) { return hx::Val( maxError ); }
		if (HX_FIELD_EQ(inName,"activate") ) { return hx::Val( activate_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frequency") ) { return hx::Val( frequency ); }
		if (HX_FIELD_EQ(inName,"component") ) { return hx::Val( component ); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__velocity") ) { return hx::Val( _hx___velocity ); }
		if (HX_FIELD_EQ(inName,"deactivate") ) { return hx::Val( deactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alloc_cbSet") ) { return hx::Val( alloc_cbSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes") ) { return hx::Val( wrap_cbTypes ); }
		if (HX_FIELD_EQ(inName,"setupcbTypes") ) { return hx::Val( setupcbTypes_dyn() ); }
		if (HX_FIELD_EQ(inName,"addedToSpace") ) { return hx::Val( addedToSpace_dyn() ); }
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeOnBreak") ) { return hx::Val( removeOnBreak ); }
		if (HX_FIELD_EQ(inName,"insert_cbtype") ) { return hx::Val( insert_cbtype_dyn() ); }
		if (HX_FIELD_EQ(inName,"dealloc_cbSet") ) { return hx::Val( dealloc_cbSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"activeInSpace") ) { return hx::Val( activeInSpace_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"breakUnderForce") ) { return hx::Val( breakUnderForce ); }
		if (HX_FIELD_EQ(inName,"breakUnderError") ) { return hx::Val( breakUnderError ); }
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removedFromSpace") ) { return hx::Val( removedFromSpace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"immutable_midstep") ) { return hx::Val( immutable_midstep_dyn() ); }
		if (HX_FIELD_EQ(inName,"immutable_cbTypes") ) { return hx::Val( immutable_cbTypes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes_adder") ) { return hx::Val( wrap_cbTypes_adder_dyn() ); }
		if (HX_FIELD_EQ(inName,"inactiveOrOutSpace") ) { return hx::Val( inactiveOrOutSpace_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes_subber") ) { return hx::Val( wrap_cbTypes_subber_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Constraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::constraint::Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stiff") ) { stiff=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbSet") ) { cbSet=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignore") ) { ignore=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"damping") ) { damping=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbTypes") ) { cbTypes=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbType >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"compound") ) { compound=inValue.Cast<  ::zpp_nape::phys::ZPP_Compound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxForce") ) { maxForce=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxError") ) { maxError=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frequency") ) { frequency=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"component") ) { component=inValue.Cast<  ::zpp_nape::space::ZPP_Component >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__velocity") ) { _hx___velocity=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes") ) { wrap_cbTypes=inValue.Cast<  ::nape::callbacks::CbTypeList >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeOnBreak") ) { removeOnBreak=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"breakUnderForce") ) { breakUnderForce=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"breakUnderError") ) { breakUnderError=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Constraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("compound",6b,c3,cf,81));
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("stiff",e8,7b,11,84));
	outFields->push(HX_("frequency",9c,82,ea,bb));
	outFields->push(HX_("damping",c2,90,05,14));
	outFields->push(HX_("maxForce",a7,04,b2,ae));
	outFields->push(HX_("maxError",84,1e,47,1d));
	outFields->push(HX_("breakUnderForce",52,c7,85,6d));
	outFields->push(HX_("breakUnderError",2f,e1,1a,dc));
	outFields->push(HX_("removeOnBreak",3c,1f,e4,27));
	outFields->push(HX_("component",bd,f0,53,0f));
	outFields->push(HX_("ignore",12,b9,c8,92));
	outFields->push(HX_("__velocity",3d,75,36,c2));
	outFields->push(HX_("cbTypes",5a,29,bf,f1));
	outFields->push(HX_("cbSet",43,aa,b1,41));
	outFields->push(HX_("wrap_cbTypes",a5,96,54,44));
	outFields->push(HX_("pre_dt",6c,85,b1,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Constraint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::constraint::Constraint */ ,(int)offsetof(ZPP_Constraint_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsInt,(int)offsetof(ZPP_Constraint_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ZPP_Constraint_obj,userData),HX_("userData",15,96,28,05)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Compound */ ,(int)offsetof(ZPP_Constraint_obj,compound),HX_("compound",6b,c3,cf,81)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Space */ ,(int)offsetof(ZPP_Constraint_obj,space),HX_("space",c6,8c,66,81)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,active),HX_("active",c6,41,46,16)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,stiff),HX_("stiff",e8,7b,11,84)},
	{hx::fsFloat,(int)offsetof(ZPP_Constraint_obj,frequency),HX_("frequency",9c,82,ea,bb)},
	{hx::fsFloat,(int)offsetof(ZPP_Constraint_obj,damping),HX_("damping",c2,90,05,14)},
	{hx::fsFloat,(int)offsetof(ZPP_Constraint_obj,maxForce),HX_("maxForce",a7,04,b2,ae)},
	{hx::fsFloat,(int)offsetof(ZPP_Constraint_obj,maxError),HX_("maxError",84,1e,47,1d)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,breakUnderForce),HX_("breakUnderForce",52,c7,85,6d)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,breakUnderError),HX_("breakUnderError",2f,e1,1a,dc)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,removeOnBreak),HX_("removeOnBreak",3c,1f,e4,27)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Component */ ,(int)offsetof(ZPP_Constraint_obj,component),HX_("component",bd,f0,53,0f)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,ignore),HX_("ignore",12,b9,c8,92)},
	{hx::fsBool,(int)offsetof(ZPP_Constraint_obj,_hx___velocity),HX_("__velocity",3d,75,36,c2)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_CbType */ ,(int)offsetof(ZPP_Constraint_obj,cbTypes),HX_("cbTypes",5a,29,bf,f1)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_CbSet */ ,(int)offsetof(ZPP_Constraint_obj,cbSet),HX_("cbSet",43,aa,b1,41)},
	{hx::fsObject /*  ::nape::callbacks::CbTypeList */ ,(int)offsetof(ZPP_Constraint_obj,wrap_cbTypes),HX_("wrap_cbTypes",a5,96,54,44)},
	{hx::fsFloat,(int)offsetof(ZPP_Constraint_obj,pre_dt),HX_("pre_dt",6c,85,b1,ae)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Constraint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Constraint_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("clear",8d,71,5b,48),
	HX_("id",db,5b,00,00),
	HX_("userData",15,96,28,05),
	HX_("compound",6b,c3,cf,81),
	HX_("space",c6,8c,66,81),
	HX_("active",c6,41,46,16),
	HX_("stiff",e8,7b,11,84),
	HX_("frequency",9c,82,ea,bb),
	HX_("damping",c2,90,05,14),
	HX_("maxForce",a7,04,b2,ae),
	HX_("maxError",84,1e,47,1d),
	HX_("breakUnderForce",52,c7,85,6d),
	HX_("breakUnderError",2f,e1,1a,dc),
	HX_("removeOnBreak",3c,1f,e4,27),
	HX_("component",bd,f0,53,0f),
	HX_("ignore",12,b9,c8,92),
	HX_("__velocity",3d,75,36,c2),
	HX_("immutable_midstep",97,f0,ae,ea),
	HX_("cbTypes",5a,29,bf,f1),
	HX_("cbSet",43,aa,b1,41),
	HX_("wrap_cbTypes",a5,96,54,44),
	HX_("setupcbTypes",7d,f4,a2,e2),
	HX_("immutable_cbTypes",1d,bd,e3,4b),
	HX_("wrap_cbTypes_subber",69,c5,02,23),
	HX_("wrap_cbTypes_adder",74,bc,69,b4),
	HX_("insert_cbtype",5f,1c,f6,35),
	HX_("alloc_cbSet",b9,db,ce,10),
	HX_("dealloc_cbSet",d8,21,86,40),
	HX_("activate",b3,1b,ac,e5),
	HX_("deactivate",34,5c,01,3c),
	HX_("addedToSpace",6b,44,b0,09),
	HX_("removedFromSpace",3c,43,d1,b7),
	HX_("activeInSpace",7b,ad,ec,d5),
	HX_("inactiveOrOutSpace",e6,c0,1f,43),
	HX_("activeBodies",e6,69,f8,ba),
	HX_("inactiveBodies",4b,89,c5,8c),
	HX_("clearcache",95,69,f1,82),
	HX_("validate",96,d0,e3,04),
	HX_("wake_connected",ae,cf,dd,3d),
	HX_("forest",dd,8c,88,fd),
	HX_("pair_exists",a1,6a,58,69),
	HX_("broken",55,b6,57,1c),
	HX_("warmStart",dd,27,03,eb),
	HX_("pre_dt",6c,85,b1,ae),
	HX_("preStep",0f,c1,c0,24),
	HX_("applyImpulseVel",b6,c7,50,1f),
	HX_("applyImpulsePos",ed,42,4c,1f),
	HX_("wake",24,5c,f2,4e),
	HX_("draw",04,2c,70,42),
	HX_("copy",b5,bb,c4,41),
	HX_("copyto",70,38,33,c9),
	::String(null()) };

hx::Class ZPP_Constraint_obj::__mClass;

void ZPP_Constraint_obj::__register()
{
	ZPP_Constraint_obj _hx_dummy;
	ZPP_Constraint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.constraint.ZPP_Constraint",d2,5b,b0,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Constraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Constraint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Constraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Constraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
