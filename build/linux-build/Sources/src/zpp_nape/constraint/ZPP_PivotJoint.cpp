// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <hxinc/nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_PivotJoint
#include <hxinc/nape/constraint/PivotJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <hxinc/nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <hxinc/zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_PivotJoint
#include <hxinc/zpp_nape/constraint/ZPP_PivotJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <hxinc/zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_174_new,"zpp_nape.constraint.ZPP_PivotJoint","new",0x51312e0f,"zpp_nape.constraint.ZPP_PivotJoint.new","zpp_nape/constraint/PivotJoint.hx",174,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_177_bodyImpulse,"zpp_nape.constraint.ZPP_PivotJoint","bodyImpulse",0x3bab9ae2,"zpp_nape.constraint.ZPP_PivotJoint.bodyImpulse","zpp_nape/constraint/PivotJoint.hx",177,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_183_activeBodies,"zpp_nape.constraint.ZPP_PivotJoint","activeBodies",0x66ef5e57,"zpp_nape.constraint.ZPP_PivotJoint.activeBodies","zpp_nape/constraint/PivotJoint.hx",183,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_191_inactiveBodies,"zpp_nape.constraint.ZPP_PivotJoint","inactiveBodies",0x5bb73bfc,"zpp_nape.constraint.ZPP_PivotJoint.inactiveBodies","zpp_nape/constraint/PivotJoint.hx",191,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_205_validate_a1,"zpp_nape.constraint.ZPP_PivotJoint","validate_a1",0xa6d5c0a8,"zpp_nape.constraint.ZPP_PivotJoint.validate_a1","zpp_nape/constraint/PivotJoint.hx",205,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_226_invalidate_a1,"zpp_nape.constraint.ZPP_PivotJoint","invalidate_a1",0x73201ea3,"zpp_nape.constraint.ZPP_PivotJoint.invalidate_a1","zpp_nape/constraint/PivotJoint.hx",226,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_250_setup_a1,"zpp_nape.constraint.ZPP_PivotJoint","setup_a1",0xba3ed063,"zpp_nape.constraint.ZPP_PivotJoint.setup_a1","zpp_nape/constraint/PivotJoint.hx",250,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_263_validate_a2,"zpp_nape.constraint.ZPP_PivotJoint","validate_a2",0xa6d5c0a9,"zpp_nape.constraint.ZPP_PivotJoint.validate_a2","zpp_nape/constraint/PivotJoint.hx",263,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_284_invalidate_a2,"zpp_nape.constraint.ZPP_PivotJoint","invalidate_a2",0x73201ea4,"zpp_nape.constraint.ZPP_PivotJoint.invalidate_a2","zpp_nape/constraint/PivotJoint.hx",284,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_308_setup_a2,"zpp_nape.constraint.ZPP_PivotJoint","setup_a2",0xba3ed064,"zpp_nape.constraint.ZPP_PivotJoint.setup_a2","zpp_nape/constraint/PivotJoint.hx",308,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_325_copy,"zpp_nape.constraint.ZPP_PivotJoint","copy",0xb2995726,"zpp_nape.constraint.ZPP_PivotJoint.copy","zpp_nape/constraint/PivotJoint.hx",325,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_346_copy,"zpp_nape.constraint.ZPP_PivotJoint","copy",0xb2995726,"zpp_nape.constraint.ZPP_PivotJoint.copy","zpp_nape/constraint/PivotJoint.hx",346,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_367_copy,"zpp_nape.constraint.ZPP_PivotJoint","copy",0xb2995726,"zpp_nape.constraint.ZPP_PivotJoint.copy","zpp_nape/constraint/PivotJoint.hx",367,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_481_validate,"zpp_nape.constraint.ZPP_PivotJoint","validate",0x9be97887,"zpp_nape.constraint.ZPP_PivotJoint.validate","zpp_nape/constraint/PivotJoint.hx",481,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_487_wake_connected,"zpp_nape.constraint.ZPP_PivotJoint","wake_connected",0x0ccf825f,"zpp_nape.constraint.ZPP_PivotJoint.wake_connected","zpp_nape/constraint/PivotJoint.hx",487,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_491_forest,"zpp_nape.constraint.ZPP_PivotJoint","forest",0xc14fa68e,"zpp_nape.constraint.ZPP_PivotJoint.forest","zpp_nape/constraint/PivotJoint.hx",491,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_590_pair_exists,"zpp_nape.constraint.ZPP_PivotJoint","pair_exists",0x45618f50,"zpp_nape.constraint.ZPP_PivotJoint.pair_exists","zpp_nape/constraint/PivotJoint.hx",590,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_592_clearcache,"zpp_nape.constraint.ZPP_PivotJoint","clearcache",0x24a5afc6,"zpp_nape.constraint.ZPP_PivotJoint.clearcache","zpp_nape/constraint/PivotJoint.hx",592,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_615_preStep,"zpp_nape.constraint.ZPP_PivotJoint","preStep",0xaf30223e,"zpp_nape.constraint.ZPP_PivotJoint.preStep","zpp_nape/constraint/PivotJoint.hx",615,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_826_warmStart,"zpp_nape.constraint.ZPP_PivotJoint","warmStart",0x78f072cc,"zpp_nape.constraint.ZPP_PivotJoint.warmStart","zpp_nape/constraint/PivotJoint.hx",826,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_858_applyImpulseVel,"zpp_nape.constraint.ZPP_PivotJoint","applyImpulseVel",0x63db6fe5,"zpp_nape.constraint.ZPP_PivotJoint.applyImpulseVel","zpp_nape/constraint/PivotJoint.hx",858,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_1034_applyImpulsePos,"zpp_nape.constraint.ZPP_PivotJoint","applyImpulsePos",0x63d6eb1c,"zpp_nape.constraint.ZPP_PivotJoint.applyImpulsePos","zpp_nape/constraint/PivotJoint.hx",1034,0x4ef23406)
HX_LOCAL_STACK_FRAME(_hx_pos_e49efd2d085e96b5_1342_draw,"zpp_nape.constraint.ZPP_PivotJoint","draw",0xb344c775,"zpp_nape.constraint.ZPP_PivotJoint.draw","zpp_nape/constraint/PivotJoint.hx",1342,0x4ef23406)
namespace zpp_nape{
namespace constraint{

void ZPP_PivotJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_174_new)
HXLINE( 324)		this->stepped = false;
HXLINE( 323)		this->biasy = ((Float)0.0);
HXLINE( 322)		this->biasx = ((Float)0.0);
HXLINE( 321)		this->gamma = ((Float)0.0);
HXLINE( 320)		this->jMax = ((Float)0.0);
HXLINE( 319)		this->jAccy = ((Float)0.0);
HXLINE( 318)		this->jAccx = ((Float)0.0);
HXLINE( 317)		this->kMassc = ((Float)0.0);
HXLINE( 316)		this->kMassb = ((Float)0.0);
HXLINE( 315)		this->kMassa = ((Float)0.0);
HXLINE( 314)		this->wrap_a2 = null();
HXLINE( 261)		this->a2rely = ((Float)0.0);
HXLINE( 260)		this->a2relx = ((Float)0.0);
HXLINE( 259)		this->a2localy = ((Float)0.0);
HXLINE( 258)		this->a2localx = ((Float)0.0);
HXLINE( 257)		this->b2 = null();
HXLINE( 256)		this->wrap_a1 = null();
HXLINE( 203)		this->a1rely = ((Float)0.0);
HXLINE( 202)		this->a1relx = ((Float)0.0);
HXLINE( 201)		this->a1localy = ((Float)0.0);
HXLINE( 200)		this->a1localx = ((Float)0.0);
HXLINE( 199)		this->b1 = null();
HXLINE( 175)		this->outer_zn = null();
HXLINE( 373)		super::__construct();
HXLINE( 374)		this->stepped = false;
HXLINE( 375)		{
HXLINE( 376)			this->jAccx = ( (Float)(0) );
HXLINE( 377)			this->jAccy = ( (Float)(0) );
            		}
HXLINE( 395)		this->jMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 396)		{
HXLINE( 397)			{
HXLINE( 398)				this->a1localx = ( (Float)(0) );
HXLINE( 399)				this->a1localy = ( (Float)(0) );
            			}
HXLINE( 417)			{
HXLINE( 418)				this->a1relx = ( (Float)(0) );
HXLINE( 419)				this->a1rely = ( (Float)(0) );
            			}
            		}
HXLINE( 438)		{
HXLINE( 439)			{
HXLINE( 440)				this->a2localx = ( (Float)(0) );
HXLINE( 441)				this->a2localy = ( (Float)(0) );
            			}
HXLINE( 459)			{
HXLINE( 460)				this->a2relx = ( (Float)(0) );
HXLINE( 461)				this->a2rely = ( (Float)(0) );
            			}
            		}
            	}

Dynamic ZPP_PivotJoint_obj::__CreateEmpty() { return new ZPP_PivotJoint_obj; }

void *ZPP_PivotJoint_obj::_hx_vtable = 0;

Dynamic ZPP_PivotJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_PivotJoint_obj > _hx_result = new ZPP_PivotJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_PivotJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x731bc4b7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x731bc4b7;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

 ::nape::geom::Vec3 ZPP_PivotJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_177_bodyImpulse)
HXDLIN( 177)		if (this->stepped) {
HXLINE( 178)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 178)				return ::nape::geom::Vec3_obj::get(-(this->jAccx),-(this->jAccy),-(((this->jAccy * this->a1relx) - (this->jAccx * this->a1rely))));
            			}
            			else {
HXLINE( 179)				return ::nape::geom::Vec3_obj::get(this->jAccx,this->jAccy,((this->jAccy * this->a2relx) - (this->jAccx * this->a2rely)));
            			}
            		}
            		else {
HXLINE( 181)			return ::nape::geom::Vec3_obj::get(0,0,0);
            		}
HXLINE( 177)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PivotJoint_obj,bodyImpulse,return )

void ZPP_PivotJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_183_activeBodies)
HXLINE( 185)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 185)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 187)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 188)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 188)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_PivotJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_191_inactiveBodies)
HXLINE( 193)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 193)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 195)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 196)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 196)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_PivotJoint_obj::validate_a1(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_205_validate_a1)
HXLINE( 206)		this->wrap_a1->zpp_inner->x = this->a1localx;
HXLINE( 207)		this->wrap_a1->zpp_inner->y = this->a1localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,validate_a1,(void))

void ZPP_PivotJoint_obj::invalidate_a1( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_226_invalidate_a1)
HXLINE( 227)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("a1",b0,54,00,00)));
HXLINE( 228)		{
HXLINE( 229)			this->a1localx = x->x;
HXLINE( 230)			this->a1localy = x->y;
            		}
HXLINE( 248)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PivotJoint_obj,invalidate_a1,(void))

void ZPP_PivotJoint_obj::setup_a1(){
            	HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_250_setup_a1)
HXLINE( 251)		Float x = this->a1localx;
HXDLIN( 251)		Float y = this->a1localy;
HXDLIN( 251)		bool _hx_tmp;
HXDLIN( 251)		if ((x == x)) {
HXLINE( 251)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 251)			_hx_tmp = true;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 251)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 251)		 ::nape::geom::Vec2 ret;
HXDLIN( 251)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 251)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 251)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 251)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 251)			ret->zpp_pool = null();
HXDLIN( 251)			ret->zpp_disp = false;
HXDLIN( 251)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 251)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 251)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 251)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 251)			{
HXLINE( 251)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 251)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 251)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 251)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 251)					ret1->next = null();
            				}
HXDLIN( 251)				ret1->weak = false;
            			}
HXDLIN( 251)			ret1->_immutable = false;
HXDLIN( 251)			{
HXLINE( 251)				ret1->x = x;
HXDLIN( 251)				ret1->y = y;
            			}
HXDLIN( 251)			ret->zpp_inner = ret1;
HXDLIN( 251)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 251)			bool _hx_tmp1;
HXDLIN( 251)			if (hx::IsNotNull( ret )) {
HXLINE( 251)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 251)				_hx_tmp1 = false;
            			}
HXDLIN( 251)			if (_hx_tmp1) {
HXLINE( 251)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 251)			{
HXLINE( 251)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 251)				if (_this->_immutable) {
HXLINE( 251)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 251)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 251)					_this->_isimmutable();
            				}
            			}
HXDLIN( 251)			bool _hx_tmp2;
HXDLIN( 251)			if ((x == x)) {
HXLINE( 251)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 251)				_hx_tmp2 = true;
            			}
HXDLIN( 251)			if (_hx_tmp2) {
HXLINE( 251)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 251)			bool _hx_tmp3;
HXDLIN( 251)			bool _hx_tmp4;
HXDLIN( 251)			if (hx::IsNotNull( ret )) {
HXLINE( 251)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 251)				_hx_tmp4 = false;
            			}
HXDLIN( 251)			if (_hx_tmp4) {
HXLINE( 251)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 251)			{
HXLINE( 251)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 251)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 251)					_this1->_validate();
            				}
            			}
HXDLIN( 251)			if ((ret->zpp_inner->x == x)) {
HXLINE( 251)				bool _hx_tmp5;
HXDLIN( 251)				if (hx::IsNotNull( ret )) {
HXLINE( 251)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 251)					_hx_tmp5 = false;
            				}
HXDLIN( 251)				if (_hx_tmp5) {
HXLINE( 251)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 251)				{
HXLINE( 251)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 251)						_this2->_validate();
            					}
            				}
HXDLIN( 251)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 251)				_hx_tmp3 = false;
            			}
HXDLIN( 251)			if (!(_hx_tmp3)) {
HXLINE( 251)				{
HXLINE( 251)					ret->zpp_inner->x = x;
HXDLIN( 251)					ret->zpp_inner->y = y;
            				}
HXDLIN( 251)				{
HXLINE( 251)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 251)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 251)		ret->zpp_inner->weak = false;
HXDLIN( 251)		this->wrap_a1 = ret;
HXLINE( 252)		this->wrap_a1->zpp_inner->_inuse = true;
HXLINE( 253)		this->wrap_a1->zpp_inner->_validate = this->validate_a1_dyn();
HXLINE( 254)		this->wrap_a1->zpp_inner->_invalidate = this->invalidate_a1_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,setup_a1,(void))

void ZPP_PivotJoint_obj::validate_a2(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_263_validate_a2)
HXLINE( 264)		this->wrap_a2->zpp_inner->x = this->a2localx;
HXLINE( 265)		this->wrap_a2->zpp_inner->y = this->a2localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,validate_a2,(void))

void ZPP_PivotJoint_obj::invalidate_a2( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_284_invalidate_a2)
HXLINE( 285)		this->immutable_midstep((HX_("Constraint::",7d,10,25,6e) + HX_("a2",b1,54,00,00)));
HXLINE( 286)		{
HXLINE( 287)			this->a2localx = x->x;
HXLINE( 288)			this->a2localy = x->y;
            		}
HXLINE( 306)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PivotJoint_obj,invalidate_a2,(void))

void ZPP_PivotJoint_obj::setup_a2(){
            	HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_308_setup_a2)
HXLINE( 309)		Float x = this->a2localx;
HXDLIN( 309)		Float y = this->a2localy;
HXDLIN( 309)		bool _hx_tmp;
HXDLIN( 309)		if ((x == x)) {
HXLINE( 309)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 309)			_hx_tmp = true;
            		}
HXDLIN( 309)		if (_hx_tmp) {
HXLINE( 309)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 309)		 ::nape::geom::Vec2 ret;
HXDLIN( 309)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 309)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 309)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 309)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 309)			ret->zpp_pool = null();
HXDLIN( 309)			ret->zpp_disp = false;
HXDLIN( 309)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 309)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 309)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 309)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 309)			{
HXLINE( 309)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 309)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 309)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 309)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 309)					ret1->next = null();
            				}
HXDLIN( 309)				ret1->weak = false;
            			}
HXDLIN( 309)			ret1->_immutable = false;
HXDLIN( 309)			{
HXLINE( 309)				ret1->x = x;
HXDLIN( 309)				ret1->y = y;
            			}
HXDLIN( 309)			ret->zpp_inner = ret1;
HXDLIN( 309)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 309)			bool _hx_tmp1;
HXDLIN( 309)			if (hx::IsNotNull( ret )) {
HXLINE( 309)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 309)				_hx_tmp1 = false;
            			}
HXDLIN( 309)			if (_hx_tmp1) {
HXLINE( 309)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 309)				if (_this->_immutable) {
HXLINE( 309)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 309)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 309)					_this->_isimmutable();
            				}
            			}
HXDLIN( 309)			bool _hx_tmp2;
HXDLIN( 309)			if ((x == x)) {
HXLINE( 309)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 309)				_hx_tmp2 = true;
            			}
HXDLIN( 309)			if (_hx_tmp2) {
HXLINE( 309)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 309)			bool _hx_tmp3;
HXDLIN( 309)			bool _hx_tmp4;
HXDLIN( 309)			if (hx::IsNotNull( ret )) {
HXLINE( 309)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 309)				_hx_tmp4 = false;
            			}
HXDLIN( 309)			if (_hx_tmp4) {
HXLINE( 309)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 309)					_this1->_validate();
            				}
            			}
HXDLIN( 309)			if ((ret->zpp_inner->x == x)) {
HXLINE( 309)				bool _hx_tmp5;
HXDLIN( 309)				if (hx::IsNotNull( ret )) {
HXLINE( 309)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 309)					_hx_tmp5 = false;
            				}
HXDLIN( 309)				if (_hx_tmp5) {
HXLINE( 309)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 309)						_this2->_validate();
            					}
            				}
HXDLIN( 309)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 309)				_hx_tmp3 = false;
            			}
HXDLIN( 309)			if (!(_hx_tmp3)) {
HXLINE( 309)				{
HXLINE( 309)					ret->zpp_inner->x = x;
HXDLIN( 309)					ret->zpp_inner->y = y;
            				}
HXDLIN( 309)				{
HXLINE( 309)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 309)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 309)		ret->zpp_inner->weak = false;
HXDLIN( 309)		this->wrap_a2 = ret;
HXLINE( 310)		this->wrap_a2->zpp_inner->_inuse = true;
HXLINE( 311)		this->wrap_a2->zpp_inner->_validate = this->validate_a2_dyn();
HXLINE( 312)		this->wrap_a2->zpp_inner->_invalidate = this->invalidate_a2_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,setup_a2,(void))

 ::nape::constraint::Constraint ZPP_PivotJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_325_copy)
HXLINE( 326)		 ::nape::constraint::PivotJoint _this = this->outer_zn;
HXDLIN( 326)		if (hx::IsNull( _this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 326)			_this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 326)		 ::nape::geom::Vec2 ret = _this->zpp_inner_zn->wrap_a1;
HXDLIN( 326)		 ::nape::constraint::PivotJoint _this1 = this->outer_zn;
HXDLIN( 326)		if (hx::IsNull( _this1->zpp_inner_zn->wrap_a2 )) {
HXLINE( 326)			_this1->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 326)		 ::nape::constraint::PivotJoint ret1 =  ::nape::constraint::PivotJoint_obj::__alloc( HX_CTX ,null(),null(),ret,_this1->zpp_inner_zn->wrap_a2);
HXLINE( 327)		this->copyto(ret1);
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		if (hx::IsNotNull( dict )) {
HXLINE( 329)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 329)			_hx_tmp = false;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 338)			 ::nape::phys::Body b = null();
HXLINE( 339)			{
HXLINE( 339)				int _g = 0;
HXDLIN( 339)				while((_g < dict->length)){
HXLINE( 339)					 ::zpp_nape::constraint::ZPP_CopyHelper idc = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 339)					_g = (_g + 1);
HXLINE( 340)					if ((idc->id == this->b1->id)) {
HXLINE( 341)						b = idc->bc;
HXLINE( 342)						goto _hx_goto_10;
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 345)			if (hx::IsNotNull( b )) {
HXLINE( 345)				ret1->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::PivotJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_346_copy)
HXLINE( 346)					ret1->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 346)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret1))));
            			}
            		}
HXLINE( 350)		bool _hx_tmp1;
HXDLIN( 350)		if (hx::IsNotNull( dict )) {
HXLINE( 350)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 350)			_hx_tmp1 = false;
            		}
HXDLIN( 350)		if (_hx_tmp1) {
HXLINE( 359)			 ::nape::phys::Body b2 = null();
HXLINE( 360)			{
HXLINE( 360)				int _g1 = 0;
HXDLIN( 360)				while((_g1 < dict->length)){
HXLINE( 360)					 ::zpp_nape::constraint::ZPP_CopyHelper idc1 = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 360)					_g1 = (_g1 + 1);
HXLINE( 361)					if ((idc1->id == this->b2->id)) {
HXLINE( 362)						b2 = idc1->bc;
HXLINE( 363)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
            			}
HXLINE( 366)			if (hx::IsNotNull( b2 )) {
HXLINE( 366)				ret1->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::PivotJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_367_copy)
HXLINE( 367)					ret1->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 367)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret1))));
            			}
            		}
HXLINE( 370)		return ret1;
            	}


void ZPP_PivotJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_481_validate)
HXLINE( 482)		bool _hx_tmp;
HXDLIN( 482)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 482)			_hx_tmp = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 482)			_hx_tmp = true;
            		}
HXDLIN( 482)		if (_hx_tmp) {
HXLINE( 482)			HX_STACK_DO_THROW(HX_("Error: PivotJoint cannot be simulated null bodies",af,f3,ba,a1));
            		}
HXLINE( 483)		if (hx::IsEq( this->b1,this->b2 )) {
HXLINE( 483)			HX_STACK_DO_THROW(((HX_("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=",54,9d,c6,0e) + this->b1->outer->toString()) + HX_(")",29,00,00,00)));
            		}
HXLINE( 484)		bool _hx_tmp1;
HXDLIN( 484)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 484)			_hx_tmp1 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 484)			_hx_tmp1 = true;
            		}
HXDLIN( 484)		if (_hx_tmp1) {
HXLINE( 484)			::String _hx_tmp2 = ((HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=",fe,98,58,d3) + this->b1->outer->toString()) + HX_(", body2=",61,88,43,62));
HXDLIN( 484)			HX_STACK_DO_THROW(((_hx_tmp2 + this->b2->outer->toString()) + HX_(")",29,00,00,00)));
            		}
HXLINE( 485)		bool _hx_tmp3;
HXDLIN( 485)		if ((this->b1->type != 2)) {
HXLINE( 485)			_hx_tmp3 = (this->b2->type != 2);
            		}
            		else {
HXLINE( 485)			_hx_tmp3 = false;
            		}
HXDLIN( 485)		if (_hx_tmp3) {
HXLINE( 485)			::String _hx_tmp4 = ((HX_("Error: Constraints cannot have both bodies non-dynamic (body1=",e1,da,d7,49) + this->b1->outer->toString()) + HX_(", body2=",61,88,43,62));
HXDLIN( 485)			HX_STACK_DO_THROW(((_hx_tmp4 + this->b2->outer->toString()) + HX_(")",29,00,00,00)));
            		}
            	}


void ZPP_PivotJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_487_wake_connected)
HXLINE( 488)		bool _hx_tmp;
HXDLIN( 488)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 488)			_hx_tmp = (this->b1->type == 2);
            		}
            		else {
HXLINE( 488)			_hx_tmp = false;
            		}
HXDLIN( 488)		if (_hx_tmp) {
HXLINE( 488)			this->b1->wake();
            		}
HXLINE( 489)		bool _hx_tmp1;
HXDLIN( 489)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 489)			_hx_tmp1 = (this->b2->type == 2);
            		}
            		else {
HXLINE( 489)			_hx_tmp1 = false;
            		}
HXDLIN( 489)		if (_hx_tmp1) {
HXLINE( 489)			this->b2->wake();
            		}
            	}


void ZPP_PivotJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_491_forest)
HXLINE( 492)		if ((this->b1->type == 2)) {
HXLINE( 493)			 ::zpp_nape::space::ZPP_Component xr;
HXDLIN( 493)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 493)				xr = this->b1->component;
            			}
            			else {
HXLINE( 496)				 ::zpp_nape::space::ZPP_Component obj = this->b1->component;
HXLINE( 497)				 ::zpp_nape::space::ZPP_Component stack = null();
HXLINE( 498)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 499)					 ::zpp_nape::space::ZPP_Component nxt = obj->parent;
HXLINE( 500)					obj->parent = stack;
HXLINE( 501)					stack = obj;
HXLINE( 502)					obj = nxt;
            				}
HXLINE( 504)				while(hx::IsNotNull( stack )){
HXLINE( 505)					 ::zpp_nape::space::ZPP_Component nxt1 = stack->parent;
HXLINE( 506)					stack->parent = obj;
HXLINE( 507)					stack = nxt1;
            				}
HXLINE( 493)				xr = obj;
            			}
HXLINE( 512)			 ::zpp_nape::space::ZPP_Component yr;
HXDLIN( 512)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 512)				yr = this->component;
            			}
            			else {
HXLINE( 515)				 ::zpp_nape::space::ZPP_Component obj1 = this->component;
HXLINE( 516)				 ::zpp_nape::space::ZPP_Component stack1 = null();
HXLINE( 517)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 518)					 ::zpp_nape::space::ZPP_Component nxt2 = obj1->parent;
HXLINE( 519)					obj1->parent = stack1;
HXLINE( 520)					stack1 = obj1;
HXLINE( 521)					obj1 = nxt2;
            				}
HXLINE( 523)				while(hx::IsNotNull( stack1 )){
HXLINE( 524)					 ::zpp_nape::space::ZPP_Component nxt3 = stack1->parent;
HXLINE( 525)					stack1->parent = obj1;
HXLINE( 526)					stack1 = nxt3;
            				}
HXLINE( 512)				yr = obj1;
            			}
HXLINE( 531)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 532)				if ((xr->rank < yr->rank)) {
HXLINE( 532)					xr->parent = yr;
            				}
            				else {
HXLINE( 533)					if ((xr->rank > yr->rank)) {
HXLINE( 533)						yr->parent = xr;
            					}
            					else {
HXLINE( 535)						yr->parent = xr;
HXLINE( 536)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 540)		if ((this->b2->type == 2)) {
HXLINE( 541)			 ::zpp_nape::space::ZPP_Component xr1;
HXDLIN( 541)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE( 541)				xr1 = this->b2->component;
            			}
            			else {
HXLINE( 544)				 ::zpp_nape::space::ZPP_Component obj2 = this->b2->component;
HXLINE( 545)				 ::zpp_nape::space::ZPP_Component stack2 = null();
HXLINE( 546)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 547)					 ::zpp_nape::space::ZPP_Component nxt4 = obj2->parent;
HXLINE( 548)					obj2->parent = stack2;
HXLINE( 549)					stack2 = obj2;
HXLINE( 550)					obj2 = nxt4;
            				}
HXLINE( 552)				while(hx::IsNotNull( stack2 )){
HXLINE( 553)					 ::zpp_nape::space::ZPP_Component nxt5 = stack2->parent;
HXLINE( 554)					stack2->parent = obj2;
HXLINE( 555)					stack2 = nxt5;
            				}
HXLINE( 541)				xr1 = obj2;
            			}
HXLINE( 560)			 ::zpp_nape::space::ZPP_Component yr1;
HXDLIN( 560)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 560)				yr1 = this->component;
            			}
            			else {
HXLINE( 563)				 ::zpp_nape::space::ZPP_Component obj3 = this->component;
HXLINE( 564)				 ::zpp_nape::space::ZPP_Component stack3 = null();
HXLINE( 565)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 566)					 ::zpp_nape::space::ZPP_Component nxt6 = obj3->parent;
HXLINE( 567)					obj3->parent = stack3;
HXLINE( 568)					stack3 = obj3;
HXLINE( 569)					obj3 = nxt6;
            				}
HXLINE( 571)				while(hx::IsNotNull( stack3 )){
HXLINE( 572)					 ::zpp_nape::space::ZPP_Component nxt7 = stack3->parent;
HXLINE( 573)					stack3->parent = obj3;
HXLINE( 574)					stack3 = nxt7;
            				}
HXLINE( 560)				yr1 = obj3;
            			}
HXLINE( 579)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE( 580)				if ((xr1->rank < yr1->rank)) {
HXLINE( 580)					xr1->parent = yr1;
            				}
            				else {
HXLINE( 581)					if ((xr1->rank > yr1->rank)) {
HXLINE( 581)						yr1->parent = xr1;
            					}
            					else {
HXLINE( 583)						yr1->parent = xr1;
HXLINE( 584)						xr1->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_PivotJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_590_pair_exists)
HXDLIN( 590)		bool _hx_tmp;
HXDLIN( 590)		if ((this->b1->id == id)) {
HXDLIN( 590)			_hx_tmp = (this->b2->id == di);
            		}
            		else {
HXDLIN( 590)			_hx_tmp = false;
            		}
HXDLIN( 590)		if (!(_hx_tmp)) {
HXDLIN( 590)			if ((this->b1->id == di)) {
HXDLIN( 590)				return (this->b2->id == id);
            			}
            			else {
HXDLIN( 590)				return false;
            			}
            		}
            		else {
HXDLIN( 590)			return true;
            		}
HXDLIN( 590)		return false;
            	}


void ZPP_PivotJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_592_clearcache)
HXLINE( 593)		{
HXLINE( 594)			this->jAccx = ( (Float)(0) );
HXLINE( 595)			this->jAccy = ( (Float)(0) );
            		}
HXLINE( 613)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_PivotJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_615_preStep)
HXLINE( 616)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 616)			this->pre_dt = dt;
            		}
HXLINE( 617)		Float dtratio = (dt / this->pre_dt);
HXLINE( 618)		this->pre_dt = dt;
HXLINE( 619)		this->stepped = true;
HXLINE( 620)		{
HXLINE( 621)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 622)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 624)		{
HXLINE( 625)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 626)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 628)		{
HXLINE( 629)			Float m = (this->b1->smass + this->b2->smass);
HXLINE( 630)			{
HXLINE( 631)				this->kMassa = m;
HXLINE( 632)				this->kMassb = ( (Float)(0) );
HXLINE( 633)				this->kMassc = m;
            			}
HXLINE( 635)			if ((this->b1->sinertia != 0)) {
HXLINE( 636)				Float X = (this->a1relx * this->b1->sinertia);
HXLINE( 637)				Float Y = (this->a1rely * this->b1->sinertia);
HXLINE( 638)				{
HXLINE( 639)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 639)					_hx_tmp->kMassa = (_hx_tmp->kMassa + (Y * this->a1rely));
HXLINE( 640)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 640)					_hx_tmp1->kMassb = (_hx_tmp1->kMassb + (-(Y) * this->a1relx));
HXLINE( 641)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 641)					_hx_tmp2->kMassc = (_hx_tmp2->kMassc + (X * this->a1relx));
            				}
            			}
HXLINE( 644)			if ((this->b2->sinertia != 0)) {
HXLINE( 645)				Float X1 = (this->a2relx * this->b2->sinertia);
HXLINE( 646)				Float Y1 = (this->a2rely * this->b2->sinertia);
HXLINE( 647)				{
HXLINE( 648)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 648)					_hx_tmp3->kMassa = (_hx_tmp3->kMassa + (Y1 * this->a2rely));
HXLINE( 649)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 649)					_hx_tmp4->kMassb = (_hx_tmp4->kMassb + (-(Y1) * this->a2relx));
HXLINE( 650)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 650)					_hx_tmp5->kMassc = (_hx_tmp5->kMassc + (X1 * this->a2relx));
            				}
            			}
            		}
HXLINE( 655)		Float det = ((this->kMassa * this->kMassc) - (this->kMassb * this->kMassb));
HXLINE( 654)		int flag;
HXLINE( 656)		if ((det != det)) {
HXLINE( 657)			this->kMassa = (this->kMassb = (this->kMassc = ( (Float)(0) )));
HXLINE( 654)			flag = 3;
            		}
            		else {
HXLINE( 660)			if ((det == 0)) {
HXLINE( 661)				int flag1 = 0;
HXLINE( 662)				if ((this->kMassa != 0)) {
HXLINE( 662)					this->kMassa = (( (Float)(1) ) / this->kMassa);
            				}
            				else {
HXLINE( 664)					this->kMassa = ( (Float)(0) );
HXLINE( 665)					flag1 = (flag1 | 1);
            				}
HXLINE( 667)				if ((this->kMassc != 0)) {
HXLINE( 667)					this->kMassc = (( (Float)(1) ) / this->kMassc);
            				}
            				else {
HXLINE( 669)					this->kMassc = ( (Float)(0) );
HXLINE( 670)					flag1 = (flag1 | 2);
            				}
HXLINE( 672)				this->kMassb = ( (Float)(0) );
HXLINE( 654)				flag = flag1;
            			}
            			else {
HXLINE( 676)				det = (( (Float)(1) ) / det);
HXLINE( 677)				Float t = (this->kMassc * det);
HXLINE( 678)				this->kMassc = (this->kMassa * det);
HXLINE( 679)				this->kMassa = t;
HXLINE( 680)				 ::zpp_nape::constraint::ZPP_PivotJoint flag2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 680)				flag2->kMassb = (flag2->kMassb * -(det));
HXLINE( 654)				flag = 0;
            			}
            		}
HXLINE( 684)		if (((flag & 1) != 0)) {
HXLINE( 684)			this->jAccx = ( (Float)(0) );
            		}
HXLINE( 685)		if (((flag & 2) != 0)) {
HXLINE( 685)			this->jAccy = ( (Float)(0) );
            		}
HXLINE( 686)		if (!(this->stiff)) {
HXLINE( 687)			Float biasCoef;
HXLINE( 688)			{
HXLINE( 690)				Float omega = ((( (Float)(2) ) * ::Math_obj::PI) * this->frequency);
HXLINE( 691)				this->gamma = (( (Float)(1) ) / ((dt * omega) * ((( (Float)(2) ) * this->damping) + (omega * dt))));
HXLINE( 692)				Float ig = (( (Float)(1) ) / (1 + this->gamma));
HXLINE( 693)				biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE( 694)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 694)				_hx_tmp6->gamma = (_hx_tmp6->gamma * ig);
HXLINE( 689)				Float X2 = ig;
HXLINE( 697)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 697)				_hx_tmp7->kMassa = (_hx_tmp7->kMassa * X2);
HXLINE( 698)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 698)				_hx_tmp8->kMassb = (_hx_tmp8->kMassb * X2);
HXLINE( 699)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 699)				_hx_tmp9->kMassc = (_hx_tmp9->kMassc * X2);
            			}
HXLINE( 701)			{
HXLINE( 702)				this->biasx = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE( 703)				this->biasy = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
            			}
HXLINE( 705)			bool _hx_tmp10;
HXDLIN( 705)			if (this->breakUnderError) {
HXLINE( 705)				_hx_tmp10 = (((this->biasx * this->biasx) + (this->biasy * this->biasy)) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE( 705)				_hx_tmp10 = false;
            			}
HXDLIN( 705)			if (_hx_tmp10) {
HXLINE( 705)				return true;
            			}
HXLINE( 706)			{
HXLINE( 707)				Float t1 = -(biasCoef);
HXLINE( 716)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 716)				_hx_tmp11->biasx = (_hx_tmp11->biasx * t1);
HXLINE( 717)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 717)				_hx_tmp12->biasy = (_hx_tmp12->biasy * t1);
            			}
HXLINE( 719)			{
HXLINE( 720)				Float t2 = this->maxError;
HXLINE( 729)				Float ls = ((this->biasx * this->biasx) + (this->biasy * this->biasy));
HXLINE( 730)				if ((ls > (t2 * t2))) {
HXLINE( 740)					Float t3 = (t2 * (((Float)1.0) / ::Math_obj::sqrt(ls)));
HXLINE( 749)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 749)					_hx_tmp13->biasx = (_hx_tmp13->biasx * t3);
HXLINE( 750)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 750)					_hx_tmp14->biasy = (_hx_tmp14->biasy * t3);
            				}
            			}
            		}
            		else {
HXLINE( 756)			{
HXLINE( 757)				this->biasx = ( (Float)(0) );
HXLINE( 758)				this->biasy = ( (Float)(0) );
            			}
HXLINE( 776)			this->gamma = ( (Float)(0) );
            		}
HXLINE( 778)		{
HXLINE( 779)			Float t4 = dtratio;
HXLINE( 788)			 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp15 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 788)			_hx_tmp15->jAccx = (_hx_tmp15->jAccx * t4);
HXLINE( 789)			 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 789)			_hx_tmp16->jAccy = (_hx_tmp16->jAccy * t4);
            		}
HXLINE( 791)		this->jMax = (this->maxForce * dt);
HXLINE( 792)		return false;
            	}


void ZPP_PivotJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_826_warmStart)
HXLINE( 827)		{
HXLINE( 828)			Float t = this->b1->imass;
HXLINE( 837)			 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN( 837)			_hx_tmp->velx = (_hx_tmp->velx - (this->jAccx * t));
HXLINE( 838)			 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN( 838)			_hx_tmp1->vely = (_hx_tmp1->vely - (this->jAccy * t));
            		}
HXLINE( 840)		{
HXLINE( 841)			Float t1 = this->b2->imass;
HXLINE( 850)			 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN( 850)			_hx_tmp2->velx = (_hx_tmp2->velx + (this->jAccx * t1));
HXLINE( 851)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN( 851)			_hx_tmp3->vely = (_hx_tmp3->vely + (this->jAccy * t1));
            		}
HXLINE( 853)		 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN( 853)		_hx_tmp4->angvel = (_hx_tmp4->angvel - (((this->jAccy * this->a1relx) - (this->jAccx * this->a1rely)) * this->b1->iinertia));
HXLINE( 854)		 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN( 854)		_hx_tmp5->angvel = (_hx_tmp5->angvel + (((this->jAccy * this->a2relx) - (this->jAccx * this->a2rely)) * this->b2->iinertia));
            	}


bool ZPP_PivotJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_858_applyImpulseVel)
HXLINE( 859)		Float Ex = ((Float)0.0);
HXLINE( 860)		Float Ey = ((Float)0.0);
HXLINE( 861)		{
HXLINE( 862)			Ex = (((this->b2->velx + this->b2->kinvelx) - (this->a2rely * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->velx + this->b1->kinvelx) - (this->a1rely * (this->b1->angvel + this->b1->kinangvel))));
HXLINE( 863)			Ey = (((this->b2->vely + this->b2->kinvely) + (this->a2relx * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->vely + this->b1->kinvely) + (this->a1relx * (this->b1->angvel + this->b1->kinangvel))));
            		}
HXLINE( 865)		Float Jx = ((Float)0.0);
HXLINE( 866)		Float Jy = ((Float)0.0);
HXLINE( 867)		{
HXLINE( 868)			Jx = (this->biasx - Ex);
HXLINE( 869)			Jy = (this->biasy - Ey);
            		}
HXLINE( 871)		{
HXLINE( 872)			Float t = ((this->kMassa * Jx) + (this->kMassb * Jy));
HXLINE( 873)			Jy = ((this->kMassb * Jx) + (this->kMassc * Jy));
HXLINE( 874)			Jx = t;
            		}
HXLINE( 876)		{
HXLINE( 877)			Float t1 = this->gamma;
HXLINE( 886)			Jx = (Jx - (this->jAccx * t1));
HXLINE( 887)			Jy = (Jy - (this->jAccy * t1));
            		}
HXLINE( 889)		{
HXLINE( 890)			Float jOldx = ((Float)0.0);
HXLINE( 891)			Float jOldy = ((Float)0.0);
HXLINE( 892)			{
HXLINE( 893)				jOldx = this->jAccx;
HXLINE( 894)				jOldy = this->jAccy;
            			}
HXLINE( 912)			{
HXLINE( 913)				Float t2 = ((Float)1.0);
HXLINE( 922)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 922)				_hx_tmp->jAccx = (_hx_tmp->jAccx + (Jx * t2));
HXLINE( 923)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 923)				_hx_tmp1->jAccy = (_hx_tmp1->jAccy + (Jy * t2));
            			}
HXLINE( 926)			if (this->breakUnderForce) {
HXLINE( 927)				if ((((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy)) > (this->jMax * this->jMax))) {
HXLINE( 927)					return true;
            				}
            			}
            			else {
HXLINE( 929)				if (!(this->stiff)) {
HXLINE( 930)					Float t3 = this->jMax;
HXLINE( 939)					Float ls = ((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy));
HXLINE( 940)					if ((ls > (t3 * t3))) {
HXLINE( 950)						Float t4 = (t3 * (((Float)1.0) / ::Math_obj::sqrt(ls)));
HXLINE( 959)						 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 959)						_hx_tmp2->jAccx = (_hx_tmp2->jAccx * t4);
HXLINE( 960)						 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 960)						_hx_tmp3->jAccy = (_hx_tmp3->jAccy * t4);
            					}
            				}
            			}
HXLINE( 965)			{
HXLINE( 966)				Jx = (this->jAccx - jOldx);
HXLINE( 967)				Jy = (this->jAccy - jOldy);
            			}
            		}
HXLINE(1001)		{
HXLINE(1002)			{
HXLINE(1003)				Float t5 = this->b1->imass;
HXLINE(1012)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN(1012)				_hx_tmp4->velx = (_hx_tmp4->velx - (Jx * t5));
HXLINE(1013)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1013)				_hx_tmp5->vely = (_hx_tmp5->vely - (Jy * t5));
            			}
HXLINE(1015)			{
HXLINE(1016)				Float t6 = this->b2->imass;
HXLINE(1025)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN(1025)				_hx_tmp6->velx = (_hx_tmp6->velx + (Jx * t6));
HXLINE(1026)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1026)				_hx_tmp7->vely = (_hx_tmp7->vely + (Jy * t6));
            			}
HXLINE(1028)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(1028)			_hx_tmp8->angvel = (_hx_tmp8->angvel - (((Jy * this->a1relx) - (Jx * this->a1rely)) * this->b1->iinertia));
HXLINE(1029)			 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(1029)			_hx_tmp9->angvel = (_hx_tmp9->angvel + (((Jy * this->a2relx) - (Jx * this->a2rely)) * this->b2->iinertia));
            		}
HXLINE(1032)		return false;
            	}


bool ZPP_PivotJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_1034_applyImpulsePos)
HXLINE(1035)		Float r1x = ((Float)0.0);
HXLINE(1036)		Float r1y = ((Float)0.0);
HXLINE(1038)		{
HXLINE(1039)			r1x = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE(1040)			r1y = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE(1043)		Float r2x = ((Float)0.0);
HXLINE(1044)		Float r2y = ((Float)0.0);
HXLINE(1046)		{
HXLINE(1047)			r2x = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE(1048)			r2y = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE(1051)		Float Ex = ((Float)0.0);
HXLINE(1052)		Float Ey = ((Float)0.0);
HXLINE(1053)		{
HXLINE(1054)			Ex = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1055)			Ey = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
            		}
HXLINE(1057)		bool _hx_tmp;
HXDLIN(1057)		if (this->breakUnderError) {
HXLINE(1057)			_hx_tmp = (((Ex * Ex) + (Ey * Ey)) > (this->maxError * this->maxError));
            		}
            		else {
HXLINE(1057)			_hx_tmp = false;
            		}
HXDLIN(1057)		if (_hx_tmp) {
HXLINE(1057)			return true;
            		}
HXLINE(1058)		if ((((Ex * Ex) + (Ey * Ey)) < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE(1058)			return false;
            		}
HXLINE(1059)		{
HXLINE(1060)			Float t = ((Float)0.5);
HXLINE(1069)			Ex = (Ex * t);
HXLINE(1070)			Ey = (Ey * t);
            		}
HXLINE(1072)		Float Jx = ((Float)0.0);
HXLINE(1073)		Float Jy = ((Float)0.0);
HXLINE(1074)		if ((((Ex * Ex) + (Ey * Ey)) > 6)) {
HXLINE(1075)			Float k = (this->b1->smass + this->b2->smass);
HXLINE(1076)			if ((k > ::nape::Config_obj::epsilon)) {
HXLINE(1077)				k = (((Float)0.75) / k);
HXLINE(1078)				{
HXLINE(1079)					Jx = (-(Ex) * k);
HXLINE(1080)					Jy = (-(Ey) * k);
            				}
HXLINE(1098)				{
HXLINE(1099)					int t1 = 20;
HXLINE(1108)					Float ls = ((Jx * Jx) + (Jy * Jy));
HXLINE(1109)					if ((ls > (t1 * t1))) {
HXLINE(1119)						Float t2 = (( (Float)(t1) ) * (((Float)1.0) / ::Math_obj::sqrt(ls)));
HXLINE(1128)						Jx = (Jx * t2);
HXLINE(1129)						Jy = (Jy * t2);
            					}
            				}
HXLINE(1133)				{
HXLINE(1134)					Float t3 = this->b1->imass;
HXLINE(1143)					 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1143)					_hx_tmp1->posx = (_hx_tmp1->posx - (Jx * t3));
HXLINE(1144)					 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1144)					_hx_tmp2->posy = (_hx_tmp2->posy - (Jy * t3));
            				}
HXLINE(1146)				{
HXLINE(1147)					Float t4 = this->b2->imass;
HXLINE(1156)					 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1156)					_hx_tmp3->posx = (_hx_tmp3->posx + (Jx * t4));
HXLINE(1157)					 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1157)					_hx_tmp4->posy = (_hx_tmp4->posy + (Jy * t4));
            				}
HXLINE(1159)				{
HXLINE(1160)					Ex = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1161)					Ey = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
            				}
HXLINE(1163)				{
HXLINE(1164)					Float t5 = ((Float)0.5);
HXLINE(1173)					Ex = (Ex * t5);
HXLINE(1174)					Ey = (Ey * t5);
            				}
            			}
            		}
HXLINE(1178)		Float Ka = ((Float)0.0);
HXLINE(1179)		Float Kb = ((Float)0.0);
HXLINE(1180)		Float Kc = ((Float)0.0);
HXLINE(1181)		{
HXLINE(1182)			Float m = (this->b1->smass + this->b2->smass);
HXLINE(1183)			{
HXLINE(1184)				Ka = m;
HXLINE(1185)				Kb = ( (Float)(0) );
HXLINE(1186)				Kc = m;
            			}
HXLINE(1188)			if ((this->b1->sinertia != 0)) {
HXLINE(1189)				Float X = (r1x * this->b1->sinertia);
HXLINE(1190)				Float Y = (r1y * this->b1->sinertia);
HXLINE(1191)				{
HXLINE(1192)					Ka = (Ka + (Y * r1y));
HXLINE(1193)					Kb = (Kb + (-(Y) * r1x));
HXLINE(1194)					Kc = (Kc + (X * r1x));
            				}
            			}
HXLINE(1197)			if ((this->b2->sinertia != 0)) {
HXLINE(1198)				Float X1 = (r2x * this->b2->sinertia);
HXLINE(1199)				Float Y1 = (r2y * this->b2->sinertia);
HXLINE(1200)				{
HXLINE(1201)					Ka = (Ka + (Y1 * r2y));
HXLINE(1202)					Kb = (Kb + (-(Y1) * r2x));
HXLINE(1203)					Kc = (Kc + (X1 * r2x));
            				}
            			}
            		}
HXLINE(1207)		{
HXLINE(1208)			Jx = -(Ex);
HXLINE(1209)			Jy = -(Ey);
            		}
HXLINE(1227)		{
HXLINE(1228)			int t6 = 6;
HXLINE(1237)			Float ls1 = ((Jx * Jx) + (Jy * Jy));
HXLINE(1238)			if ((ls1 > (t6 * t6))) {
HXLINE(1248)				Float t7 = (( (Float)(t6) ) * (((Float)1.0) / ::Math_obj::sqrt(ls1)));
HXLINE(1257)				Jx = (Jx * t7);
HXLINE(1258)				Jy = (Jy * t7);
            			}
            		}
HXLINE(1262)		{
HXLINE(1263)			Float det = ((Ka * Kc) - (Kb * Kb));
HXLINE(1264)			if ((det != det)) {
HXLINE(1264)				Jy = ( (Float)(0) );
HXDLIN(1264)				Jx = Jy;
            			}
            			else {
HXLINE(1265)				if ((det == 0)) {
HXLINE(1266)					if ((Ka != 0)) {
HXLINE(1266)						Jx = (Jx / Ka);
            					}
            					else {
HXLINE(1267)						Jx = ( (Float)(0) );
            					}
HXLINE(1268)					if ((Kc != 0)) {
HXLINE(1268)						Jy = (Jy / Kc);
            					}
            					else {
HXLINE(1269)						Jy = ( (Float)(0) );
            					}
            				}
            				else {
HXLINE(1272)					det = (( (Float)(1) ) / det);
HXLINE(1273)					Float t8 = (det * ((Kc * Jx) - (Kb * Jy)));
HXLINE(1274)					Jy = (det * ((Ka * Jy) - (Kb * Jx)));
HXLINE(1275)					Jx = t8;
            				}
            			}
            		}
HXLINE(1279)		{
HXLINE(1280)			{
HXLINE(1281)				Float t9 = this->b1->imass;
HXLINE(1290)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1290)				_hx_tmp5->posx = (_hx_tmp5->posx - (Jx * t9));
HXLINE(1291)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1291)				_hx_tmp6->posy = (_hx_tmp6->posy - (Jy * t9));
            			}
HXLINE(1293)			{
HXLINE(1294)				Float t10 = this->b2->imass;
HXLINE(1303)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1303)				_hx_tmp7->posx = (_hx_tmp7->posx + (Jx * t10));
HXLINE(1304)				 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN(1304)				_hx_tmp8->posy = (_hx_tmp8->posy + (Jy * t10));
            			}
HXLINE(1306)			{
HXLINE(1306)				 ::zpp_nape::phys::ZPP_Body _this = this->b1;
HXDLIN(1306)				Float dr = (-(((Jy * r1x) - (Jx * r1y))) * this->b1->iinertia);
HXDLIN(1306)				 ::zpp_nape::phys::ZPP_Body _this1 = _this;
HXDLIN(1306)				_this1->rot = (_this1->rot + dr);
HXDLIN(1306)				if (((dr * dr) > ((Float)0.0001))) {
HXLINE(1306)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1306)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            				else {
HXLINE(1306)					Float d2 = (dr * dr);
HXDLIN(1306)					Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(1306)					Float m1 = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(1306)					Float nx = (((p * _this->axisx) + (dr * _this->axisy)) * m1);
HXDLIN(1306)					_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m1);
HXDLIN(1306)					_this->axisx = nx;
            				}
            			}
HXLINE(1307)			{
HXLINE(1307)				 ::zpp_nape::phys::ZPP_Body _this2 = this->b2;
HXDLIN(1307)				Float dr1 = (((Jy * r2x) - (Jx * r2y)) * this->b2->iinertia);
HXDLIN(1307)				 ::zpp_nape::phys::ZPP_Body _this3 = _this2;
HXDLIN(1307)				_this3->rot = (_this3->rot + dr1);
HXDLIN(1307)				if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(1307)					_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(1307)					_this2->axisy = ::Math_obj::cos(_this2->rot);
            				}
            				else {
HXLINE(1307)					Float d21 = (dr1 * dr1);
HXDLIN(1307)					Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(1307)					Float m2 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(1307)					Float nx1 = (((p1 * _this2->axisx) + (dr1 * _this2->axisy)) * m2);
HXDLIN(1307)					_this2->axisy = (((p1 * _this2->axisy) - (dr1 * _this2->axisx)) * m2);
HXDLIN(1307)					_this2->axisx = nx1;
            				}
            			}
            		}
HXLINE(1340)		return false;
            	}


void ZPP_PivotJoint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_1342_draw)
            	}



hx::ObjectPtr< ZPP_PivotJoint_obj > ZPP_PivotJoint_obj::__new() {
	hx::ObjectPtr< ZPP_PivotJoint_obj > __this = new ZPP_PivotJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_PivotJoint_obj > ZPP_PivotJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_PivotJoint_obj *__this = (ZPP_PivotJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PivotJoint_obj), true, "zpp_nape.constraint.ZPP_PivotJoint"));
	*(void **)__this = ZPP_PivotJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_PivotJoint_obj::ZPP_PivotJoint_obj()
{
}

void ZPP_PivotJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_PivotJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(a1localx,"a1localx");
	HX_MARK_MEMBER_NAME(a1localy,"a1localy");
	HX_MARK_MEMBER_NAME(a1relx,"a1relx");
	HX_MARK_MEMBER_NAME(a1rely,"a1rely");
	HX_MARK_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(a2localx,"a2localx");
	HX_MARK_MEMBER_NAME(a2localy,"a2localy");
	HX_MARK_MEMBER_NAME(a2relx,"a2relx");
	HX_MARK_MEMBER_NAME(a2rely,"a2rely");
	HX_MARK_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_MARK_MEMBER_NAME(kMassa,"kMassa");
	HX_MARK_MEMBER_NAME(kMassb,"kMassb");
	HX_MARK_MEMBER_NAME(kMassc,"kMassc");
	HX_MARK_MEMBER_NAME(jAccx,"jAccx");
	HX_MARK_MEMBER_NAME(jAccy,"jAccy");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(biasx,"biasx");
	HX_MARK_MEMBER_NAME(biasy,"biasy");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_PivotJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(a1localx,"a1localx");
	HX_VISIT_MEMBER_NAME(a1localy,"a1localy");
	HX_VISIT_MEMBER_NAME(a1relx,"a1relx");
	HX_VISIT_MEMBER_NAME(a1rely,"a1rely");
	HX_VISIT_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(a2localx,"a2localx");
	HX_VISIT_MEMBER_NAME(a2localy,"a2localy");
	HX_VISIT_MEMBER_NAME(a2relx,"a2relx");
	HX_VISIT_MEMBER_NAME(a2rely,"a2rely");
	HX_VISIT_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_VISIT_MEMBER_NAME(kMassa,"kMassa");
	HX_VISIT_MEMBER_NAME(kMassb,"kMassb");
	HX_VISIT_MEMBER_NAME(kMassc,"kMassc");
	HX_VISIT_MEMBER_NAME(jAccx,"jAccx");
	HX_VISIT_MEMBER_NAME(jAccy,"jAccy");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(biasx,"biasx");
	HX_VISIT_MEMBER_NAME(biasy,"biasy");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_PivotJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1 ); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"jAccx") ) { return hx::Val( jAccx ); }
		if (HX_FIELD_EQ(inName,"jAccy") ) { return hx::Val( jAccy ); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma ); }
		if (HX_FIELD_EQ(inName,"biasx") ) { return hx::Val( biasx ); }
		if (HX_FIELD_EQ(inName,"biasy") ) { return hx::Val( biasy ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { return hx::Val( a1relx ); }
		if (HX_FIELD_EQ(inName,"a1rely") ) { return hx::Val( a1rely ); }
		if (HX_FIELD_EQ(inName,"a2relx") ) { return hx::Val( a2relx ); }
		if (HX_FIELD_EQ(inName,"a2rely") ) { return hx::Val( a2rely ); }
		if (HX_FIELD_EQ(inName,"kMassa") ) { return hx::Val( kMassa ); }
		if (HX_FIELD_EQ(inName,"kMassb") ) { return hx::Val( kMassb ); }
		if (HX_FIELD_EQ(inName,"kMassc") ) { return hx::Val( kMassc ); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { return hx::Val( wrap_a1 ); }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { return hx::Val( wrap_a2 ); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped ); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn ); }
		if (HX_FIELD_EQ(inName,"a1localx") ) { return hx::Val( a1localx ); }
		if (HX_FIELD_EQ(inName,"a1localy") ) { return hx::Val( a1localy ); }
		if (HX_FIELD_EQ(inName,"setup_a1") ) { return hx::Val( setup_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"a2localx") ) { return hx::Val( a2localx ); }
		if (HX_FIELD_EQ(inName,"a2localy") ) { return hx::Val( a2localy ); }
		if (HX_FIELD_EQ(inName,"setup_a2") ) { return hx::Val( setup_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_a1") ) { return hx::Val( validate_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_a2") ) { return hx::Val( validate_a2_dyn() ); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidate_a1") ) { return hx::Val( invalidate_a1_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_a2") ) { return hx::Val( invalidate_a2_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn() ); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_PivotJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"jAccx") ) { jAccx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccy") ) { jAccy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasx") ) { biasx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasy") ) { biasy=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { a1relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1rely") ) { a1rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2relx") ) { a2relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2rely") ) { a2rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassa") ) { kMassa=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassb") ) { kMassb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassc") ) { kMassc=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { wrap_a1=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { wrap_a2=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::PivotJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localx") ) { a1localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localy") ) { a1localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localx") ) { a2localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localy") ) { a2localy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_PivotJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_zn",38,07,b0,a2));
	outFields->push(HX_("b1",8f,55,00,00));
	outFields->push(HX_("a1localx",5d,6d,78,fb));
	outFields->push(HX_("a1localy",5e,6d,78,fb));
	outFields->push(HX_("a1relx",af,c1,e7,4a));
	outFields->push(HX_("a1rely",b0,c1,e7,4a));
	outFields->push(HX_("wrap_a1",45,eb,57,0d));
	outFields->push(HX_("b2",90,55,00,00));
	outFields->push(HX_("a2localx",1e,e4,0d,25));
	outFields->push(HX_("a2localy",1f,e4,0d,25));
	outFields->push(HX_("a2relx",30,56,4e,de));
	outFields->push(HX_("a2rely",31,56,4e,de));
	outFields->push(HX_("wrap_a2",46,eb,57,0d));
	outFields->push(HX_("kMassa",82,a0,7f,5e));
	outFields->push(HX_("kMassb",83,a0,7f,5e));
	outFields->push(HX_("kMassc",84,a0,7f,5e));
	outFields->push(HX_("jAccx",a1,d1,bb,33));
	outFields->push(HX_("jAccy",a2,d1,bb,33));
	outFields->push(HX_("jMax",5a,60,4b,46));
	outFields->push(HX_("gamma",27,87,b6,8e));
	outFields->push(HX_("biasx",df,3f,f6,b2));
	outFields->push(HX_("biasy",e0,3f,f6,b2));
	outFields->push(HX_("stepped",03,05,60,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_PivotJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::constraint::PivotJoint */ ,(int)offsetof(ZPP_PivotJoint_obj,outer_zn),HX_("outer_zn",38,07,b0,a2)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_PivotJoint_obj,b1),HX_("b1",8f,55,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1localx),HX_("a1localx",5d,6d,78,fb)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1localy),HX_("a1localy",5e,6d,78,fb)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1relx),HX_("a1relx",af,c1,e7,4a)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1rely),HX_("a1rely",b0,c1,e7,4a)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_PivotJoint_obj,wrap_a1),HX_("wrap_a1",45,eb,57,0d)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_PivotJoint_obj,b2),HX_("b2",90,55,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2localx),HX_("a2localx",1e,e4,0d,25)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2localy),HX_("a2localy",1f,e4,0d,25)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2relx),HX_("a2relx",30,56,4e,de)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2rely),HX_("a2rely",31,56,4e,de)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_PivotJoint_obj,wrap_a2),HX_("wrap_a2",46,eb,57,0d)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,kMassa),HX_("kMassa",82,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,kMassb),HX_("kMassb",83,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,kMassc),HX_("kMassc",84,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,jAccx),HX_("jAccx",a1,d1,bb,33)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,jAccy),HX_("jAccy",a2,d1,bb,33)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,jMax),HX_("jMax",5a,60,4b,46)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,gamma),HX_("gamma",27,87,b6,8e)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,biasx),HX_("biasx",df,3f,f6,b2)},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,biasy),HX_("biasy",e0,3f,f6,b2)},
	{hx::fsBool,(int)offsetof(ZPP_PivotJoint_obj,stepped),HX_("stepped",03,05,60,81)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_PivotJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_PivotJoint_obj_sMemberFields[] = {
	HX_("outer_zn",38,07,b0,a2),
	HX_("bodyImpulse",33,76,a2,5f),
	HX_("activeBodies",e6,69,f8,ba),
	HX_("inactiveBodies",4b,89,c5,8c),
	HX_("b1",8f,55,00,00),
	HX_("a1localx",5d,6d,78,fb),
	HX_("a1localy",5e,6d,78,fb),
	HX_("a1relx",af,c1,e7,4a),
	HX_("a1rely",b0,c1,e7,4a),
	HX_("validate_a1",f9,9b,cc,ca),
	HX_("invalidate_a1",34,30,01,a7),
	HX_("setup_a1",72,28,39,23),
	HX_("wrap_a1",45,eb,57,0d),
	HX_("b2",90,55,00,00),
	HX_("a2localx",1e,e4,0d,25),
	HX_("a2localy",1f,e4,0d,25),
	HX_("a2relx",30,56,4e,de),
	HX_("a2rely",31,56,4e,de),
	HX_("validate_a2",fa,9b,cc,ca),
	HX_("invalidate_a2",35,30,01,a7),
	HX_("setup_a2",73,28,39,23),
	HX_("wrap_a2",46,eb,57,0d),
	HX_("kMassa",82,a0,7f,5e),
	HX_("kMassb",83,a0,7f,5e),
	HX_("kMassc",84,a0,7f,5e),
	HX_("jAccx",a1,d1,bb,33),
	HX_("jAccy",a2,d1,bb,33),
	HX_("jMax",5a,60,4b,46),
	HX_("gamma",27,87,b6,8e),
	HX_("biasx",df,3f,f6,b2),
	HX_("biasy",e0,3f,f6,b2),
	HX_("stepped",03,05,60,81),
	HX_("copy",b5,bb,c4,41),
	HX_("validate",96,d0,e3,04),
	HX_("wake_connected",ae,cf,dd,3d),
	HX_("forest",dd,8c,88,fd),
	HX_("pair_exists",a1,6a,58,69),
	HX_("clearcache",95,69,f1,82),
	HX_("preStep",0f,c1,c0,24),
	HX_("warmStart",dd,27,03,eb),
	HX_("applyImpulseVel",b6,c7,50,1f),
	HX_("applyImpulsePos",ed,42,4c,1f),
	HX_("draw",04,2c,70,42),
	::String(null()) };

hx::Class ZPP_PivotJoint_obj::__mClass;

void ZPP_PivotJoint_obj::__register()
{
	ZPP_PivotJoint_obj _hx_dummy;
	ZPP_PivotJoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.constraint.ZPP_PivotJoint",9d,7a,47,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_PivotJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_PivotJoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_PivotJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_PivotJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
