// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_CbEvent
#include <hxinc/nape/callbacks/CbEvent.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionType
#include <hxinc/nape/callbacks/InteractionType.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerType
#include <hxinc/nape/callbacks/ListenerType.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreFlag
#include <hxinc/nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterType
#include <hxinc/nape/dynamics/ArbiterType.h>
#endif
#ifndef INCLUDED_nape_geom_Winding
#include <hxinc/nape/geom/Winding.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <hxinc/nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_GravMassMode
#include <hxinc/nape/phys/GravMassMode.h>
#endif
#ifndef INCLUDED_nape_phys_InertiaMode
#include <hxinc/nape/phys/InertiaMode.h>
#endif
#ifndef INCLUDED_nape_phys_MassMode
#include <hxinc/nape/phys/MassMode.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeType
#include <hxinc/nape/shape/ShapeType.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <hxinc/nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <hxinc/nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_175_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",175,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_177_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",177,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_178_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",178,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_179_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",179,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_180_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",180,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_181_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",181,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_182_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",182,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_183_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",183,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_184_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",184,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_185_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",185,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_186_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",186,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_187_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",187,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_188_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",188,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_189_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",189,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_190_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",190,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_191_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",191,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_192_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",192,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_193_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",193,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_194_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",194,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_195_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",195,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_196_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",196,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_197_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",197,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_198_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",198,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_199_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",199,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_200_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",200,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_201_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",201,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_202_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",202,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_203_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",203,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_204_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",204,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_205_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",205,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_206_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",206,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_207_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",207,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_208_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",208,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_209_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",209,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_210_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",210,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_211_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",211,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_212_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",212,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_213_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",213,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_214_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",214,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_215_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",215,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_216_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",216,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_217_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",217,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_218_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",218,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_219_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",219,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_220_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",220,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_221_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",221,0x163e15a2)
HX_LOCAL_STACK_FRAME(_hx_pos_c1cf3f1572ee35c5_222_boot,"zpp_nape.util.ZPP_Flags","boot",0xcf2aeae9,"zpp_nape.util.ZPP_Flags.boot","zpp_nape/util/Flags.hx",222,0x163e15a2)
namespace zpp_nape{
namespace util{

void ZPP_Flags_obj::__construct() { }

Dynamic ZPP_Flags_obj::__CreateEmpty() { return new ZPP_Flags_obj; }

void *ZPP_Flags_obj::_hx_vtable = 0;

Dynamic ZPP_Flags_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Flags_obj > _hx_result = new ZPP_Flags_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Flags_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x649a268b;
}

bool ZPP_Flags_obj::internal;

int ZPP_Flags_obj::id_ImmState_ACCEPT;

int ZPP_Flags_obj::id_ImmState_IGNORE;

int ZPP_Flags_obj::id_ImmState_ALWAYS;

int ZPP_Flags_obj::id_GravMassMode_DEFAULT;

int ZPP_Flags_obj::id_GravMassMode_FIXED;

int ZPP_Flags_obj::id_GravMassMode_SCALED;

int ZPP_Flags_obj::id_InertiaMode_DEFAULT;

int ZPP_Flags_obj::id_InertiaMode_FIXED;

int ZPP_Flags_obj::id_MassMode_DEFAULT;

int ZPP_Flags_obj::id_MassMode_FIXED;

int ZPP_Flags_obj::id_BodyType_STATIC;

int ZPP_Flags_obj::id_BodyType_DYNAMIC;

int ZPP_Flags_obj::id_BodyType_KINEMATIC;

int ZPP_Flags_obj::id_ListenerType_BODY;

int ZPP_Flags_obj::id_PreFlag_ACCEPT;

int ZPP_Flags_obj::id_ListenerType_CONSTRAINT;

int ZPP_Flags_obj::id_PreFlag_IGNORE;

int ZPP_Flags_obj::id_ListenerType_INTERACTION;

int ZPP_Flags_obj::id_PreFlag_ACCEPT_ONCE;

int ZPP_Flags_obj::id_ListenerType_PRE;

int ZPP_Flags_obj::id_PreFlag_IGNORE_ONCE;

int ZPP_Flags_obj::id_CbEvent_BEGIN;

int ZPP_Flags_obj::id_InteractionType_COLLISION;

int ZPP_Flags_obj::id_CbEvent_ONGOING;

int ZPP_Flags_obj::id_InteractionType_SENSOR;

int ZPP_Flags_obj::id_CbEvent_END;

int ZPP_Flags_obj::id_InteractionType_FLUID;

int ZPP_Flags_obj::id_CbEvent_WAKE;

int ZPP_Flags_obj::id_InteractionType_ANY;

int ZPP_Flags_obj::id_CbEvent_SLEEP;

int ZPP_Flags_obj::id_CbEvent_BREAK;

int ZPP_Flags_obj::id_CbEvent_PRE;

int ZPP_Flags_obj::id_Winding_UNDEFINED;

int ZPP_Flags_obj::id_Winding_CLOCKWISE;

int ZPP_Flags_obj::id_Winding_ANTICLOCKWISE;

int ZPP_Flags_obj::id_ValidationResult_VALID;

int ZPP_Flags_obj::id_ValidationResult_DEGENERATE;

int ZPP_Flags_obj::id_ValidationResult_CONCAVE;

int ZPP_Flags_obj::id_ValidationResult_SELF_INTERSECTING;

int ZPP_Flags_obj::id_ShapeType_CIRCLE;

int ZPP_Flags_obj::id_ShapeType_POLYGON;

int ZPP_Flags_obj::id_Broadphase_DYNAMIC_AABB_TREE;

int ZPP_Flags_obj::id_Broadphase_SWEEP_AND_PRUNE;

int ZPP_Flags_obj::id_ArbiterType_COLLISION;

int ZPP_Flags_obj::id_ArbiterType_SENSOR;

int ZPP_Flags_obj::id_ArbiterType_FLUID;

 ::nape::phys::GravMassMode ZPP_Flags_obj::GravMassMode_DEFAULT;

 ::nape::phys::GravMassMode ZPP_Flags_obj::GravMassMode_FIXED;

 ::nape::phys::GravMassMode ZPP_Flags_obj::GravMassMode_SCALED;

 ::nape::phys::InertiaMode ZPP_Flags_obj::InertiaMode_DEFAULT;

 ::nape::phys::InertiaMode ZPP_Flags_obj::InertiaMode_FIXED;

 ::nape::phys::MassMode ZPP_Flags_obj::MassMode_DEFAULT;

 ::nape::phys::MassMode ZPP_Flags_obj::MassMode_FIXED;

 ::nape::phys::BodyType ZPP_Flags_obj::BodyType_STATIC;

 ::nape::phys::BodyType ZPP_Flags_obj::BodyType_DYNAMIC;

 ::nape::phys::BodyType ZPP_Flags_obj::BodyType_KINEMATIC;

 ::nape::callbacks::ListenerType ZPP_Flags_obj::ListenerType_BODY;

 ::nape::callbacks::PreFlag ZPP_Flags_obj::PreFlag_ACCEPT;

 ::nape::callbacks::ListenerType ZPP_Flags_obj::ListenerType_CONSTRAINT;

 ::nape::callbacks::PreFlag ZPP_Flags_obj::PreFlag_IGNORE;

 ::nape::callbacks::ListenerType ZPP_Flags_obj::ListenerType_INTERACTION;

 ::nape::callbacks::PreFlag ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;

 ::nape::callbacks::ListenerType ZPP_Flags_obj::ListenerType_PRE;

 ::nape::callbacks::PreFlag ZPP_Flags_obj::PreFlag_IGNORE_ONCE;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_BEGIN;

 ::nape::callbacks::InteractionType ZPP_Flags_obj::InteractionType_COLLISION;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_ONGOING;

 ::nape::callbacks::InteractionType ZPP_Flags_obj::InteractionType_SENSOR;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_END;

 ::nape::callbacks::InteractionType ZPP_Flags_obj::InteractionType_FLUID;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_WAKE;

 ::nape::callbacks::InteractionType ZPP_Flags_obj::InteractionType_ANY;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_SLEEP;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_BREAK;

 ::nape::callbacks::CbEvent ZPP_Flags_obj::CbEvent_PRE;

 ::nape::geom::Winding ZPP_Flags_obj::Winding_UNDEFINED;

 ::nape::geom::Winding ZPP_Flags_obj::Winding_CLOCKWISE;

 ::nape::geom::Winding ZPP_Flags_obj::Winding_ANTICLOCKWISE;

 ::nape::shape::ValidationResult ZPP_Flags_obj::ValidationResult_VALID;

 ::nape::shape::ValidationResult ZPP_Flags_obj::ValidationResult_DEGENERATE;

 ::nape::shape::ValidationResult ZPP_Flags_obj::ValidationResult_CONCAVE;

 ::nape::shape::ValidationResult ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING;

 ::nape::shape::ShapeType ZPP_Flags_obj::ShapeType_CIRCLE;

 ::nape::shape::ShapeType ZPP_Flags_obj::ShapeType_POLYGON;

 ::nape::space::Broadphase ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;

 ::nape::space::Broadphase ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;

 ::nape::dynamics::ArbiterType ZPP_Flags_obj::ArbiterType_COLLISION;

 ::nape::dynamics::ArbiterType ZPP_Flags_obj::ArbiterType_SENSOR;

 ::nape::dynamics::ArbiterType ZPP_Flags_obj::ArbiterType_FLUID;


ZPP_Flags_obj::ZPP_Flags_obj()
{
}

bool ZPP_Flags_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = ( internal ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CbEvent_END") ) { outValue = ( CbEvent_END ); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_PRE") ) { outValue = ( CbEvent_PRE ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"CbEvent_WAKE") ) { outValue = ( CbEvent_WAKE ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"CbEvent_BEGIN") ) { outValue = ( CbEvent_BEGIN ); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_SLEEP") ) { outValue = ( CbEvent_SLEEP ); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_BREAK") ) { outValue = ( CbEvent_BREAK ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"MassMode_FIXED") ) { outValue = ( MassMode_FIXED ); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_ACCEPT") ) { outValue = ( PreFlag_ACCEPT ); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_IGNORE") ) { outValue = ( PreFlag_IGNORE ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BodyType_STATIC") ) { outValue = ( BodyType_STATIC ); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_ONGOING") ) { outValue = ( CbEvent_ONGOING ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"MassMode_DEFAULT") ) { outValue = ( MassMode_DEFAULT ); return true; }
		if (HX_FIELD_EQ(inName,"BodyType_DYNAMIC") ) { outValue = ( BodyType_DYNAMIC ); return true; }
		if (HX_FIELD_EQ(inName,"ListenerType_PRE") ) { outValue = ( ListenerType_PRE ); return true; }
		if (HX_FIELD_EQ(inName,"ShapeType_CIRCLE") ) { outValue = ( ShapeType_CIRCLE ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"InertiaMode_FIXED") ) { outValue = ( InertiaMode_FIXED ); return true; }
		if (HX_FIELD_EQ(inName,"ListenerType_BODY") ) { outValue = ( ListenerType_BODY ); return true; }
		if (HX_FIELD_EQ(inName,"Winding_UNDEFINED") ) { outValue = ( Winding_UNDEFINED ); return true; }
		if (HX_FIELD_EQ(inName,"Winding_CLOCKWISE") ) { outValue = ( Winding_CLOCKWISE ); return true; }
		if (HX_FIELD_EQ(inName,"ShapeType_POLYGON") ) { outValue = ( ShapeType_POLYGON ); return true; }
		if (HX_FIELD_EQ(inName,"ArbiterType_FLUID") ) { outValue = ( ArbiterType_FLUID ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"GravMassMode_FIXED") ) { outValue = ( GravMassMode_FIXED ); return true; }
		if (HX_FIELD_EQ(inName,"BodyType_KINEMATIC") ) { outValue = ( BodyType_KINEMATIC ); return true; }
		if (HX_FIELD_EQ(inName,"ArbiterType_SENSOR") ) { outValue = ( ArbiterType_SENSOR ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"GravMassMode_SCALED") ) { outValue = ( GravMassMode_SCALED ); return true; }
		if (HX_FIELD_EQ(inName,"InertiaMode_DEFAULT") ) { outValue = ( InertiaMode_DEFAULT ); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_ACCEPT_ONCE") ) { outValue = ( PreFlag_ACCEPT_ONCE ); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_IGNORE_ONCE") ) { outValue = ( PreFlag_IGNORE_ONCE ); return true; }
		if (HX_FIELD_EQ(inName,"InteractionType_ANY") ) { outValue = ( InteractionType_ANY ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"GravMassMode_DEFAULT") ) { outValue = ( GravMassMode_DEFAULT ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"InteractionType_FLUID") ) { outValue = ( InteractionType_FLUID ); return true; }
		if (HX_FIELD_EQ(inName,"Winding_ANTICLOCKWISE") ) { outValue = ( Winding_ANTICLOCKWISE ); return true; }
		if (HX_FIELD_EQ(inName,"ArbiterType_COLLISION") ) { outValue = ( ArbiterType_COLLISION ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"InteractionType_SENSOR") ) { outValue = ( InteractionType_SENSOR ); return true; }
		if (HX_FIELD_EQ(inName,"ValidationResult_VALID") ) { outValue = ( ValidationResult_VALID ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ListenerType_CONSTRAINT") ) { outValue = ( ListenerType_CONSTRAINT ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"ListenerType_INTERACTION") ) { outValue = ( ListenerType_INTERACTION ); return true; }
		if (HX_FIELD_EQ(inName,"ValidationResult_CONCAVE") ) { outValue = ( ValidationResult_CONCAVE ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"InteractionType_COLLISION") ) { outValue = ( InteractionType_COLLISION ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"Broadphase_SWEEP_AND_PRUNE") ) { outValue = ( Broadphase_SWEEP_AND_PRUNE ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"ValidationResult_DEGENERATE") ) { outValue = ( ValidationResult_DEGENERATE ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"Broadphase_DYNAMIC_AABB_TREE") ) { outValue = ( Broadphase_DYNAMIC_AABB_TREE ); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"ValidationResult_SELF_INTERSECTING") ) { outValue = ( ValidationResult_SELF_INTERSECTING ); return true; }
	}
	return false;
}

bool ZPP_Flags_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CbEvent_END") ) { CbEvent_END=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_PRE") ) { CbEvent_PRE=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"CbEvent_WAKE") ) { CbEvent_WAKE=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"CbEvent_BEGIN") ) { CbEvent_BEGIN=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_SLEEP") ) { CbEvent_SLEEP=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_BREAK") ) { CbEvent_BREAK=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"MassMode_FIXED") ) { MassMode_FIXED=ioValue.Cast<  ::nape::phys::MassMode >(); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_ACCEPT") ) { PreFlag_ACCEPT=ioValue.Cast<  ::nape::callbacks::PreFlag >(); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_IGNORE") ) { PreFlag_IGNORE=ioValue.Cast<  ::nape::callbacks::PreFlag >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BodyType_STATIC") ) { BodyType_STATIC=ioValue.Cast<  ::nape::phys::BodyType >(); return true; }
		if (HX_FIELD_EQ(inName,"CbEvent_ONGOING") ) { CbEvent_ONGOING=ioValue.Cast<  ::nape::callbacks::CbEvent >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"MassMode_DEFAULT") ) { MassMode_DEFAULT=ioValue.Cast<  ::nape::phys::MassMode >(); return true; }
		if (HX_FIELD_EQ(inName,"BodyType_DYNAMIC") ) { BodyType_DYNAMIC=ioValue.Cast<  ::nape::phys::BodyType >(); return true; }
		if (HX_FIELD_EQ(inName,"ListenerType_PRE") ) { ListenerType_PRE=ioValue.Cast<  ::nape::callbacks::ListenerType >(); return true; }
		if (HX_FIELD_EQ(inName,"ShapeType_CIRCLE") ) { ShapeType_CIRCLE=ioValue.Cast<  ::nape::shape::ShapeType >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"InertiaMode_FIXED") ) { InertiaMode_FIXED=ioValue.Cast<  ::nape::phys::InertiaMode >(); return true; }
		if (HX_FIELD_EQ(inName,"ListenerType_BODY") ) { ListenerType_BODY=ioValue.Cast<  ::nape::callbacks::ListenerType >(); return true; }
		if (HX_FIELD_EQ(inName,"Winding_UNDEFINED") ) { Winding_UNDEFINED=ioValue.Cast<  ::nape::geom::Winding >(); return true; }
		if (HX_FIELD_EQ(inName,"Winding_CLOCKWISE") ) { Winding_CLOCKWISE=ioValue.Cast<  ::nape::geom::Winding >(); return true; }
		if (HX_FIELD_EQ(inName,"ShapeType_POLYGON") ) { ShapeType_POLYGON=ioValue.Cast<  ::nape::shape::ShapeType >(); return true; }
		if (HX_FIELD_EQ(inName,"ArbiterType_FLUID") ) { ArbiterType_FLUID=ioValue.Cast<  ::nape::dynamics::ArbiterType >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"GravMassMode_FIXED") ) { GravMassMode_FIXED=ioValue.Cast<  ::nape::phys::GravMassMode >(); return true; }
		if (HX_FIELD_EQ(inName,"BodyType_KINEMATIC") ) { BodyType_KINEMATIC=ioValue.Cast<  ::nape::phys::BodyType >(); return true; }
		if (HX_FIELD_EQ(inName,"ArbiterType_SENSOR") ) { ArbiterType_SENSOR=ioValue.Cast<  ::nape::dynamics::ArbiterType >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"GravMassMode_SCALED") ) { GravMassMode_SCALED=ioValue.Cast<  ::nape::phys::GravMassMode >(); return true; }
		if (HX_FIELD_EQ(inName,"InertiaMode_DEFAULT") ) { InertiaMode_DEFAULT=ioValue.Cast<  ::nape::phys::InertiaMode >(); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_ACCEPT_ONCE") ) { PreFlag_ACCEPT_ONCE=ioValue.Cast<  ::nape::callbacks::PreFlag >(); return true; }
		if (HX_FIELD_EQ(inName,"PreFlag_IGNORE_ONCE") ) { PreFlag_IGNORE_ONCE=ioValue.Cast<  ::nape::callbacks::PreFlag >(); return true; }
		if (HX_FIELD_EQ(inName,"InteractionType_ANY") ) { InteractionType_ANY=ioValue.Cast<  ::nape::callbacks::InteractionType >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"GravMassMode_DEFAULT") ) { GravMassMode_DEFAULT=ioValue.Cast<  ::nape::phys::GravMassMode >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"InteractionType_FLUID") ) { InteractionType_FLUID=ioValue.Cast<  ::nape::callbacks::InteractionType >(); return true; }
		if (HX_FIELD_EQ(inName,"Winding_ANTICLOCKWISE") ) { Winding_ANTICLOCKWISE=ioValue.Cast<  ::nape::geom::Winding >(); return true; }
		if (HX_FIELD_EQ(inName,"ArbiterType_COLLISION") ) { ArbiterType_COLLISION=ioValue.Cast<  ::nape::dynamics::ArbiterType >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"InteractionType_SENSOR") ) { InteractionType_SENSOR=ioValue.Cast<  ::nape::callbacks::InteractionType >(); return true; }
		if (HX_FIELD_EQ(inName,"ValidationResult_VALID") ) { ValidationResult_VALID=ioValue.Cast<  ::nape::shape::ValidationResult >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ListenerType_CONSTRAINT") ) { ListenerType_CONSTRAINT=ioValue.Cast<  ::nape::callbacks::ListenerType >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"ListenerType_INTERACTION") ) { ListenerType_INTERACTION=ioValue.Cast<  ::nape::callbacks::ListenerType >(); return true; }
		if (HX_FIELD_EQ(inName,"ValidationResult_CONCAVE") ) { ValidationResult_CONCAVE=ioValue.Cast<  ::nape::shape::ValidationResult >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"InteractionType_COLLISION") ) { InteractionType_COLLISION=ioValue.Cast<  ::nape::callbacks::InteractionType >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"Broadphase_SWEEP_AND_PRUNE") ) { Broadphase_SWEEP_AND_PRUNE=ioValue.Cast<  ::nape::space::Broadphase >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"ValidationResult_DEGENERATE") ) { ValidationResult_DEGENERATE=ioValue.Cast<  ::nape::shape::ValidationResult >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"Broadphase_DYNAMIC_AABB_TREE") ) { Broadphase_DYNAMIC_AABB_TREE=ioValue.Cast<  ::nape::space::Broadphase >(); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"ValidationResult_SELF_INTERSECTING") ) { ValidationResult_SELF_INTERSECTING=ioValue.Cast<  ::nape::shape::ValidationResult >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Flags_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Flags_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ZPP_Flags_obj::internal,HX_("internal",3d,67,76,28)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ImmState_ACCEPT,HX_("id_ImmState_ACCEPT",9b,3c,f8,93)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ImmState_IGNORE,HX_("id_ImmState_IGNORE",a5,62,ba,1b)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ImmState_ALWAYS,HX_("id_ImmState_ALWAYS",62,b8,c8,cf)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_GravMassMode_DEFAULT,HX_("id_GravMassMode_DEFAULT",dd,e5,d3,24)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_GravMassMode_FIXED,HX_("id_GravMassMode_FIXED",90,63,2e,be)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_GravMassMode_SCALED,HX_("id_GravMassMode_SCALED",de,58,76,59)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_InertiaMode_DEFAULT,HX_("id_InertiaMode_DEFAULT",db,1a,6e,3b)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_InertiaMode_FIXED,HX_("id_InertiaMode_FIXED",0e,bd,60,20)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_MassMode_DEFAULT,HX_("id_MassMode_DEFAULT",dd,07,b4,52)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_MassMode_FIXED,HX_("id_MassMode_FIXED",90,05,62,be)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_BodyType_STATIC,HX_("id_BodyType_STATIC",8d,db,74,ef)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_BodyType_DYNAMIC,HX_("id_BodyType_DYNAMIC",a0,a3,7b,96)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_BodyType_KINEMATIC,HX_("id_BodyType_KINEMATIC",66,6b,07,ad)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ListenerType_BODY,HX_("id_ListenerType_BODY",af,4d,b6,72)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_PreFlag_ACCEPT,HX_("id_PreFlag_ACCEPT",5c,96,9a,1d)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ListenerType_CONSTRAINT,HX_("id_ListenerType_CONSTRAINT",2a,c7,e0,bb)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_PreFlag_IGNORE,HX_("id_PreFlag_IGNORE",66,bc,5c,a5)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ListenerType_INTERACTION,HX_("id_ListenerType_INTERACTION",45,64,72,cd)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_PreFlag_ACCEPT_ONCE,HX_("id_PreFlag_ACCEPT_ONCE",84,3d,9f,8c)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ListenerType_PRE,HX_("id_ListenerType_PRE",96,d1,1d,de)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_PreFlag_IGNORE_ONCE,HX_("id_PreFlag_IGNORE_ONCE",3a,f3,e4,34)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_BEGIN,HX_("id_CbEvent_BEGIN",c1,dd,1c,bd)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_InteractionType_COLLISION,HX_("id_InteractionType_COLLISION",fb,79,83,b7)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_ONGOING,HX_("id_CbEvent_ONGOING",d3,97,21,9e)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_InteractionType_SENSOR,HX_("id_InteractionType_SENSOR",f1,c8,e6,07)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_END,HX_("id_CbEvent_END",73,7d,10,7a)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_InteractionType_FLUID,HX_("id_InteractionType_FLUID",13,ab,8b,98)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_WAKE,HX_("id_CbEvent_WAKE",6c,47,39,60)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_InteractionType_ANY,HX_("id_InteractionType_ANY",b5,e3,57,08)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_SLEEP,HX_("id_CbEvent_SLEEP",af,b0,8b,8b)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_BREAK,HX_("id_CbEvent_BREAK",57,18,b3,c5)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_CbEvent_PRE,HX_("id_CbEvent_PRE",bb,d9,18,7a)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_Winding_UNDEFINED,HX_("id_Winding_UNDEFINED",07,6b,a0,b8)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_Winding_CLOCKWISE,HX_("id_Winding_CLOCKWISE",69,aa,35,58)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_Winding_ANTICLOCKWISE,HX_("id_Winding_ANTICLOCKWISE",07,e6,af,dd)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ValidationResult_VALID,HX_("id_ValidationResult_VALID",d7,1d,63,79)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ValidationResult_DEGENERATE,HX_("id_ValidationResult_DEGENERATE",db,34,c2,e2)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ValidationResult_CONCAVE,HX_("id_ValidationResult_CONCAVE",2a,a4,82,94)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ValidationResult_SELF_INTERSECTING,HX_("id_ValidationResult_SELF_INTERSECTING",b1,6e,9e,b2)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ShapeType_CIRCLE,HX_("id_ShapeType_CIRCLE",d8,86,db,aa)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ShapeType_POLYGON,HX_("id_ShapeType_POLYGON",92,1c,15,f2)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_Broadphase_DYNAMIC_AABB_TREE,HX_("id_Broadphase_DYNAMIC_AABB_TREE",7b,ad,c5,2c)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_Broadphase_SWEEP_AND_PRUNE,HX_("id_Broadphase_SWEEP_AND_PRUNE",4d,b4,de,1f)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ArbiterType_COLLISION,HX_("id_ArbiterType_COLLISION",52,0e,4a,ac)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ArbiterType_SENSOR,HX_("id_ArbiterType_SENSOR",3a,28,06,2c)},
	{hx::fsInt,(void *) &ZPP_Flags_obj::id_ArbiterType_FLUID,HX_("id_ArbiterType_FLUID",ea,87,0d,46)},
	{hx::fsObject /*  ::nape::phys::GravMassMode */ ,(void *) &ZPP_Flags_obj::GravMassMode_DEFAULT,HX_("GravMassMode_DEFAULT",b9,77,cf,72)},
	{hx::fsObject /*  ::nape::phys::GravMassMode */ ,(void *) &ZPP_Flags_obj::GravMassMode_FIXED,HX_("GravMassMode_FIXED",6c,86,b6,7f)},
	{hx::fsObject /*  ::nape::phys::GravMassMode */ ,(void *) &ZPP_Flags_obj::GravMassMode_SCALED,HX_("GravMassMode_SCALED",82,b6,0c,ef)},
	{hx::fsObject /*  ::nape::phys::InertiaMode */ ,(void *) &ZPP_Flags_obj::InertiaMode_DEFAULT,HX_("InertiaMode_DEFAULT",7f,78,04,d1)},
	{hx::fsObject /*  ::nape::phys::InertiaMode */ ,(void *) &ZPP_Flags_obj::InertiaMode_FIXED,HX_("InertiaMode_FIXED",b2,a9,e7,54)},
	{hx::fsObject /*  ::nape::phys::MassMode */ ,(void *) &ZPP_Flags_obj::MassMode_DEFAULT,HX_("MassMode_DEFAULT",b9,7b,d2,78)},
	{hx::fsObject /*  ::nape::phys::MassMode */ ,(void *) &ZPP_Flags_obj::MassMode_FIXED,HX_("MassMode_FIXED",6c,8a,30,f0)},
	{hx::fsObject /*  ::nape::phys::BodyType */ ,(void *) &ZPP_Flags_obj::BodyType_STATIC,HX_("BodyType_STATIC",31,97,5a,52)},
	{hx::fsObject /*  ::nape::phys::BodyType */ ,(void *) &ZPP_Flags_obj::BodyType_DYNAMIC,HX_("BodyType_DYNAMIC",7c,17,9a,bc)},
	{hx::fsObject /*  ::nape::phys::BodyType */ ,(void *) &ZPP_Flags_obj::BodyType_KINEMATIC,HX_("BodyType_KINEMATIC",42,8e,8f,6e)},
	{hx::fsObject /*  ::nape::callbacks::ListenerType */ ,(void *) &ZPP_Flags_obj::ListenerType_BODY,HX_("ListenerType_BODY",53,3a,3d,a7)},
	{hx::fsObject /*  ::nape::callbacks::PreFlag */ ,(void *) &ZPP_Flags_obj::PreFlag_ACCEPT,HX_("PreFlag_ACCEPT",38,1b,69,4f)},
	{hx::fsObject /*  ::nape::callbacks::ListenerType */ ,(void *) &ZPP_Flags_obj::ListenerType_CONSTRAINT,HX_("ListenerType_CONSTRAINT",ce,c6,20,86)},
	{hx::fsObject /*  ::nape::callbacks::PreFlag */ ,(void *) &ZPP_Flags_obj::PreFlag_IGNORE,HX_("PreFlag_IGNORE",42,41,2b,d7)},
	{hx::fsObject /*  ::nape::callbacks::ListenerType */ ,(void *) &ZPP_Flags_obj::ListenerType_INTERACTION,HX_("ListenerType_INTERACTION",21,14,32,fb)},
	{hx::fsObject /*  ::nape::callbacks::PreFlag */ ,(void *) &ZPP_Flags_obj::PreFlag_ACCEPT_ONCE,HX_("PreFlag_ACCEPT_ONCE",28,9b,35,22)},
	{hx::fsObject /*  ::nape::callbacks::ListenerType */ ,(void *) &ZPP_Flags_obj::ListenerType_PRE,HX_("ListenerType_PRE",72,45,3c,04)},
	{hx::fsObject /*  ::nape::callbacks::PreFlag */ ,(void *) &ZPP_Flags_obj::PreFlag_IGNORE_ONCE,HX_("PreFlag_IGNORE_ONCE",de,50,7b,ca)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_BEGIN,HX_("CbEvent_BEGIN",65,a8,bf,99)},
	{hx::fsObject /*  ::nape::callbacks::InteractionType */ ,(void *) &ZPP_Flags_obj::InteractionType_COLLISION,HX_("InteractionType_COLLISION",9f,aa,7d,91)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_ONGOING,HX_("CbEvent_ONGOING",77,53,07,01)},
	{hx::fsObject /*  ::nape::callbacks::InteractionType */ ,(void *) &ZPP_Flags_obj::InteractionType_SENSOR,HX_("InteractionType_SENSOR",cd,89,4f,79)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_END,HX_("CbEvent_END",17,97,be,fb)},
	{hx::fsObject /*  ::nape::callbacks::InteractionType */ ,(void *) &ZPP_Flags_obj::InteractionType_FLUID,HX_("InteractionType_FLUID",b7,b9,af,86)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_WAKE,HX_("CbEvent_WAKE",48,9d,e1,56)},
	{hx::fsObject /*  ::nape::callbacks::InteractionType */ ,(void *) &ZPP_Flags_obj::InteractionType_ANY,HX_("InteractionType_ANY",59,41,ee,9d)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_SLEEP,HX_("CbEvent_SLEEP",53,7b,2e,68)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_BREAK,HX_("CbEvent_BREAK",fb,e2,55,a2)},
	{hx::fsObject /*  ::nape::callbacks::CbEvent */ ,(void *) &ZPP_Flags_obj::CbEvent_PRE,HX_("CbEvent_PRE",5f,f3,c6,fb)},
	{hx::fsObject /*  ::nape::geom::Winding */ ,(void *) &ZPP_Flags_obj::Winding_UNDEFINED,HX_("Winding_UNDEFINED",ab,57,27,ed)},
	{hx::fsObject /*  ::nape::geom::Winding */ ,(void *) &ZPP_Flags_obj::Winding_CLOCKWISE,HX_("Winding_CLOCKWISE",0d,97,bc,8c)},
	{hx::fsObject /*  ::nape::geom::Winding */ ,(void *) &ZPP_Flags_obj::Winding_ANTICLOCKWISE,HX_("Winding_ANTICLOCKWISE",ab,f4,d3,cb)},
	{hx::fsObject /*  ::nape::shape::ValidationResult */ ,(void *) &ZPP_Flags_obj::ValidationResult_VALID,HX_("ValidationResult_VALID",b3,de,cb,ea)},
	{hx::fsObject /*  ::nape::shape::ValidationResult */ ,(void *) &ZPP_Flags_obj::ValidationResult_DEGENERATE,HX_("ValidationResult_DEGENERATE",7f,d6,24,d4)},
	{hx::fsObject /*  ::nape::shape::ValidationResult */ ,(void *) &ZPP_Flags_obj::ValidationResult_CONCAVE,HX_("ValidationResult_CONCAVE",06,54,42,c2)},
	{hx::fsObject /*  ::nape::shape::ValidationResult */ ,(void *) &ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING,HX_("ValidationResult_SELF_INTERSECTING",8d,09,93,ef)},
	{hx::fsObject /*  ::nape::shape::ShapeType */ ,(void *) &ZPP_Flags_obj::ShapeType_CIRCLE,HX_("ShapeType_CIRCLE",b4,fa,f9,d0)},
	{hx::fsObject /*  ::nape::shape::ShapeType */ ,(void *) &ZPP_Flags_obj::ShapeType_POLYGON,HX_("ShapeType_POLYGON",36,09,9c,26)},
	{hx::fsObject /*  ::nape::space::Broadphase */ ,(void *) &ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE,HX_("Broadphase_DYNAMIC_AABB_TREE",57,7b,b0,71)},
	{hx::fsObject /*  ::nape::space::Broadphase */ ,(void *) &ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE,HX_("Broadphase_SWEEP_AND_PRUNE",29,13,cf,00)},
	{hx::fsObject /*  ::nape::dynamics::ArbiterType */ ,(void *) &ZPP_Flags_obj::ArbiterType_COLLISION,HX_("ArbiterType_COLLISION",f6,1c,6e,9a)},
	{hx::fsObject /*  ::nape::dynamics::ArbiterType */ ,(void *) &ZPP_Flags_obj::ArbiterType_SENSOR,HX_("ArbiterType_SENSOR",16,4b,8e,ed)},
	{hx::fsObject /*  ::nape::dynamics::ArbiterType */ ,(void *) &ZPP_Flags_obj::ArbiterType_FLUID,HX_("ArbiterType_FLUID",8e,74,94,7a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Flags_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::internal,"internal");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ImmState_ACCEPT,"id_ImmState_ACCEPT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ImmState_IGNORE,"id_ImmState_IGNORE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ImmState_ALWAYS,"id_ImmState_ALWAYS");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_GravMassMode_DEFAULT,"id_GravMassMode_DEFAULT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_GravMassMode_FIXED,"id_GravMassMode_FIXED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_GravMassMode_SCALED,"id_GravMassMode_SCALED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_InertiaMode_DEFAULT,"id_InertiaMode_DEFAULT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_InertiaMode_FIXED,"id_InertiaMode_FIXED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_MassMode_DEFAULT,"id_MassMode_DEFAULT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_MassMode_FIXED,"id_MassMode_FIXED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_BodyType_STATIC,"id_BodyType_STATIC");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_BodyType_DYNAMIC,"id_BodyType_DYNAMIC");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_BodyType_KINEMATIC,"id_BodyType_KINEMATIC");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_BODY,"id_ListenerType_BODY");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_ACCEPT,"id_PreFlag_ACCEPT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_CONSTRAINT,"id_ListenerType_CONSTRAINT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_IGNORE,"id_PreFlag_IGNORE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_INTERACTION,"id_ListenerType_INTERACTION");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_ACCEPT_ONCE,"id_PreFlag_ACCEPT_ONCE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_PRE,"id_ListenerType_PRE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_IGNORE_ONCE,"id_PreFlag_IGNORE_ONCE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_BEGIN,"id_CbEvent_BEGIN");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_COLLISION,"id_InteractionType_COLLISION");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_ONGOING,"id_CbEvent_ONGOING");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_SENSOR,"id_InteractionType_SENSOR");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_END,"id_CbEvent_END");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_FLUID,"id_InteractionType_FLUID");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_WAKE,"id_CbEvent_WAKE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_ANY,"id_InteractionType_ANY");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_SLEEP,"id_CbEvent_SLEEP");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_BREAK,"id_CbEvent_BREAK");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_PRE,"id_CbEvent_PRE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_Winding_UNDEFINED,"id_Winding_UNDEFINED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_Winding_CLOCKWISE,"id_Winding_CLOCKWISE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_Winding_ANTICLOCKWISE,"id_Winding_ANTICLOCKWISE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_VALID,"id_ValidationResult_VALID");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_DEGENERATE,"id_ValidationResult_DEGENERATE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_CONCAVE,"id_ValidationResult_CONCAVE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_SELF_INTERSECTING,"id_ValidationResult_SELF_INTERSECTING");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ShapeType_CIRCLE,"id_ShapeType_CIRCLE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ShapeType_POLYGON,"id_ShapeType_POLYGON");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_Broadphase_DYNAMIC_AABB_TREE,"id_Broadphase_DYNAMIC_AABB_TREE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_Broadphase_SWEEP_AND_PRUNE,"id_Broadphase_SWEEP_AND_PRUNE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ArbiterType_COLLISION,"id_ArbiterType_COLLISION");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ArbiterType_SENSOR,"id_ArbiterType_SENSOR");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::id_ArbiterType_FLUID,"id_ArbiterType_FLUID");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::GravMassMode_DEFAULT,"GravMassMode_DEFAULT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::GravMassMode_FIXED,"GravMassMode_FIXED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::GravMassMode_SCALED,"GravMassMode_SCALED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::InertiaMode_DEFAULT,"InertiaMode_DEFAULT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::InertiaMode_FIXED,"InertiaMode_FIXED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::MassMode_DEFAULT,"MassMode_DEFAULT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::MassMode_FIXED,"MassMode_FIXED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::BodyType_STATIC,"BodyType_STATIC");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::BodyType_DYNAMIC,"BodyType_DYNAMIC");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::BodyType_KINEMATIC,"BodyType_KINEMATIC");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ListenerType_BODY,"ListenerType_BODY");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::PreFlag_ACCEPT,"PreFlag_ACCEPT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ListenerType_CONSTRAINT,"ListenerType_CONSTRAINT");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::PreFlag_IGNORE,"PreFlag_IGNORE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ListenerType_INTERACTION,"ListenerType_INTERACTION");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::PreFlag_ACCEPT_ONCE,"PreFlag_ACCEPT_ONCE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ListenerType_PRE,"ListenerType_PRE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::PreFlag_IGNORE_ONCE,"PreFlag_IGNORE_ONCE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_BEGIN,"CbEvent_BEGIN");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::InteractionType_COLLISION,"InteractionType_COLLISION");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_ONGOING,"CbEvent_ONGOING");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::InteractionType_SENSOR,"InteractionType_SENSOR");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_END,"CbEvent_END");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::InteractionType_FLUID,"InteractionType_FLUID");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_WAKE,"CbEvent_WAKE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::InteractionType_ANY,"InteractionType_ANY");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_SLEEP,"CbEvent_SLEEP");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_BREAK,"CbEvent_BREAK");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::CbEvent_PRE,"CbEvent_PRE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::Winding_UNDEFINED,"Winding_UNDEFINED");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::Winding_CLOCKWISE,"Winding_CLOCKWISE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::Winding_ANTICLOCKWISE,"Winding_ANTICLOCKWISE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_VALID,"ValidationResult_VALID");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_DEGENERATE,"ValidationResult_DEGENERATE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_CONCAVE,"ValidationResult_CONCAVE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING,"ValidationResult_SELF_INTERSECTING");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ShapeType_CIRCLE,"ShapeType_CIRCLE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ShapeType_POLYGON,"ShapeType_POLYGON");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE,"Broadphase_DYNAMIC_AABB_TREE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE,"Broadphase_SWEEP_AND_PRUNE");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ArbiterType_COLLISION,"ArbiterType_COLLISION");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ArbiterType_SENSOR,"ArbiterType_SENSOR");
	HX_MARK_MEMBER_NAME(ZPP_Flags_obj::ArbiterType_FLUID,"ArbiterType_FLUID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Flags_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::internal,"internal");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ImmState_ACCEPT,"id_ImmState_ACCEPT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ImmState_IGNORE,"id_ImmState_IGNORE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ImmState_ALWAYS,"id_ImmState_ALWAYS");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_GravMassMode_DEFAULT,"id_GravMassMode_DEFAULT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_GravMassMode_FIXED,"id_GravMassMode_FIXED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_GravMassMode_SCALED,"id_GravMassMode_SCALED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_InertiaMode_DEFAULT,"id_InertiaMode_DEFAULT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_InertiaMode_FIXED,"id_InertiaMode_FIXED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_MassMode_DEFAULT,"id_MassMode_DEFAULT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_MassMode_FIXED,"id_MassMode_FIXED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_BodyType_STATIC,"id_BodyType_STATIC");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_BodyType_DYNAMIC,"id_BodyType_DYNAMIC");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_BodyType_KINEMATIC,"id_BodyType_KINEMATIC");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_BODY,"id_ListenerType_BODY");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_ACCEPT,"id_PreFlag_ACCEPT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_CONSTRAINT,"id_ListenerType_CONSTRAINT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_IGNORE,"id_PreFlag_IGNORE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_INTERACTION,"id_ListenerType_INTERACTION");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_ACCEPT_ONCE,"id_PreFlag_ACCEPT_ONCE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ListenerType_PRE,"id_ListenerType_PRE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_PreFlag_IGNORE_ONCE,"id_PreFlag_IGNORE_ONCE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_BEGIN,"id_CbEvent_BEGIN");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_COLLISION,"id_InteractionType_COLLISION");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_ONGOING,"id_CbEvent_ONGOING");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_SENSOR,"id_InteractionType_SENSOR");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_END,"id_CbEvent_END");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_FLUID,"id_InteractionType_FLUID");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_WAKE,"id_CbEvent_WAKE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_InteractionType_ANY,"id_InteractionType_ANY");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_SLEEP,"id_CbEvent_SLEEP");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_BREAK,"id_CbEvent_BREAK");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_CbEvent_PRE,"id_CbEvent_PRE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_Winding_UNDEFINED,"id_Winding_UNDEFINED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_Winding_CLOCKWISE,"id_Winding_CLOCKWISE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_Winding_ANTICLOCKWISE,"id_Winding_ANTICLOCKWISE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_VALID,"id_ValidationResult_VALID");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_DEGENERATE,"id_ValidationResult_DEGENERATE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_CONCAVE,"id_ValidationResult_CONCAVE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ValidationResult_SELF_INTERSECTING,"id_ValidationResult_SELF_INTERSECTING");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ShapeType_CIRCLE,"id_ShapeType_CIRCLE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ShapeType_POLYGON,"id_ShapeType_POLYGON");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_Broadphase_DYNAMIC_AABB_TREE,"id_Broadphase_DYNAMIC_AABB_TREE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_Broadphase_SWEEP_AND_PRUNE,"id_Broadphase_SWEEP_AND_PRUNE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ArbiterType_COLLISION,"id_ArbiterType_COLLISION");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ArbiterType_SENSOR,"id_ArbiterType_SENSOR");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::id_ArbiterType_FLUID,"id_ArbiterType_FLUID");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::GravMassMode_DEFAULT,"GravMassMode_DEFAULT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::GravMassMode_FIXED,"GravMassMode_FIXED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::GravMassMode_SCALED,"GravMassMode_SCALED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::InertiaMode_DEFAULT,"InertiaMode_DEFAULT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::InertiaMode_FIXED,"InertiaMode_FIXED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::MassMode_DEFAULT,"MassMode_DEFAULT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::MassMode_FIXED,"MassMode_FIXED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::BodyType_STATIC,"BodyType_STATIC");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::BodyType_DYNAMIC,"BodyType_DYNAMIC");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::BodyType_KINEMATIC,"BodyType_KINEMATIC");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ListenerType_BODY,"ListenerType_BODY");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::PreFlag_ACCEPT,"PreFlag_ACCEPT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ListenerType_CONSTRAINT,"ListenerType_CONSTRAINT");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::PreFlag_IGNORE,"PreFlag_IGNORE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ListenerType_INTERACTION,"ListenerType_INTERACTION");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::PreFlag_ACCEPT_ONCE,"PreFlag_ACCEPT_ONCE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ListenerType_PRE,"ListenerType_PRE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::PreFlag_IGNORE_ONCE,"PreFlag_IGNORE_ONCE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_BEGIN,"CbEvent_BEGIN");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::InteractionType_COLLISION,"InteractionType_COLLISION");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_ONGOING,"CbEvent_ONGOING");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::InteractionType_SENSOR,"InteractionType_SENSOR");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_END,"CbEvent_END");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::InteractionType_FLUID,"InteractionType_FLUID");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_WAKE,"CbEvent_WAKE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::InteractionType_ANY,"InteractionType_ANY");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_SLEEP,"CbEvent_SLEEP");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_BREAK,"CbEvent_BREAK");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::CbEvent_PRE,"CbEvent_PRE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::Winding_UNDEFINED,"Winding_UNDEFINED");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::Winding_CLOCKWISE,"Winding_CLOCKWISE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::Winding_ANTICLOCKWISE,"Winding_ANTICLOCKWISE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_VALID,"ValidationResult_VALID");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_DEGENERATE,"ValidationResult_DEGENERATE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_CONCAVE,"ValidationResult_CONCAVE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING,"ValidationResult_SELF_INTERSECTING");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ShapeType_CIRCLE,"ShapeType_CIRCLE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ShapeType_POLYGON,"ShapeType_POLYGON");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE,"Broadphase_DYNAMIC_AABB_TREE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE,"Broadphase_SWEEP_AND_PRUNE");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ArbiterType_COLLISION,"ArbiterType_COLLISION");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ArbiterType_SENSOR,"ArbiterType_SENSOR");
	HX_VISIT_MEMBER_NAME(ZPP_Flags_obj::ArbiterType_FLUID,"ArbiterType_FLUID");
};

#endif

hx::Class ZPP_Flags_obj::__mClass;

static ::String ZPP_Flags_obj_sStaticFields[] = {
	HX_("internal",3d,67,76,28),
	HX_("id_ImmState_ACCEPT",9b,3c,f8,93),
	HX_("id_ImmState_IGNORE",a5,62,ba,1b),
	HX_("id_ImmState_ALWAYS",62,b8,c8,cf),
	HX_("id_GravMassMode_DEFAULT",dd,e5,d3,24),
	HX_("id_GravMassMode_FIXED",90,63,2e,be),
	HX_("id_GravMassMode_SCALED",de,58,76,59),
	HX_("id_InertiaMode_DEFAULT",db,1a,6e,3b),
	HX_("id_InertiaMode_FIXED",0e,bd,60,20),
	HX_("id_MassMode_DEFAULT",dd,07,b4,52),
	HX_("id_MassMode_FIXED",90,05,62,be),
	HX_("id_BodyType_STATIC",8d,db,74,ef),
	HX_("id_BodyType_DYNAMIC",a0,a3,7b,96),
	HX_("id_BodyType_KINEMATIC",66,6b,07,ad),
	HX_("id_ListenerType_BODY",af,4d,b6,72),
	HX_("id_PreFlag_ACCEPT",5c,96,9a,1d),
	HX_("id_ListenerType_CONSTRAINT",2a,c7,e0,bb),
	HX_("id_PreFlag_IGNORE",66,bc,5c,a5),
	HX_("id_ListenerType_INTERACTION",45,64,72,cd),
	HX_("id_PreFlag_ACCEPT_ONCE",84,3d,9f,8c),
	HX_("id_ListenerType_PRE",96,d1,1d,de),
	HX_("id_PreFlag_IGNORE_ONCE",3a,f3,e4,34),
	HX_("id_CbEvent_BEGIN",c1,dd,1c,bd),
	HX_("id_InteractionType_COLLISION",fb,79,83,b7),
	HX_("id_CbEvent_ONGOING",d3,97,21,9e),
	HX_("id_InteractionType_SENSOR",f1,c8,e6,07),
	HX_("id_CbEvent_END",73,7d,10,7a),
	HX_("id_InteractionType_FLUID",13,ab,8b,98),
	HX_("id_CbEvent_WAKE",6c,47,39,60),
	HX_("id_InteractionType_ANY",b5,e3,57,08),
	HX_("id_CbEvent_SLEEP",af,b0,8b,8b),
	HX_("id_CbEvent_BREAK",57,18,b3,c5),
	HX_("id_CbEvent_PRE",bb,d9,18,7a),
	HX_("id_Winding_UNDEFINED",07,6b,a0,b8),
	HX_("id_Winding_CLOCKWISE",69,aa,35,58),
	HX_("id_Winding_ANTICLOCKWISE",07,e6,af,dd),
	HX_("id_ValidationResult_VALID",d7,1d,63,79),
	HX_("id_ValidationResult_DEGENERATE",db,34,c2,e2),
	HX_("id_ValidationResult_CONCAVE",2a,a4,82,94),
	HX_("id_ValidationResult_SELF_INTERSECTING",b1,6e,9e,b2),
	HX_("id_ShapeType_CIRCLE",d8,86,db,aa),
	HX_("id_ShapeType_POLYGON",92,1c,15,f2),
	HX_("id_Broadphase_DYNAMIC_AABB_TREE",7b,ad,c5,2c),
	HX_("id_Broadphase_SWEEP_AND_PRUNE",4d,b4,de,1f),
	HX_("id_ArbiterType_COLLISION",52,0e,4a,ac),
	HX_("id_ArbiterType_SENSOR",3a,28,06,2c),
	HX_("id_ArbiterType_FLUID",ea,87,0d,46),
	HX_("GravMassMode_DEFAULT",b9,77,cf,72),
	HX_("GravMassMode_FIXED",6c,86,b6,7f),
	HX_("GravMassMode_SCALED",82,b6,0c,ef),
	HX_("InertiaMode_DEFAULT",7f,78,04,d1),
	HX_("InertiaMode_FIXED",b2,a9,e7,54),
	HX_("MassMode_DEFAULT",b9,7b,d2,78),
	HX_("MassMode_FIXED",6c,8a,30,f0),
	HX_("BodyType_STATIC",31,97,5a,52),
	HX_("BodyType_DYNAMIC",7c,17,9a,bc),
	HX_("BodyType_KINEMATIC",42,8e,8f,6e),
	HX_("ListenerType_BODY",53,3a,3d,a7),
	HX_("PreFlag_ACCEPT",38,1b,69,4f),
	HX_("ListenerType_CONSTRAINT",ce,c6,20,86),
	HX_("PreFlag_IGNORE",42,41,2b,d7),
	HX_("ListenerType_INTERACTION",21,14,32,fb),
	HX_("PreFlag_ACCEPT_ONCE",28,9b,35,22),
	HX_("ListenerType_PRE",72,45,3c,04),
	HX_("PreFlag_IGNORE_ONCE",de,50,7b,ca),
	HX_("CbEvent_BEGIN",65,a8,bf,99),
	HX_("InteractionType_COLLISION",9f,aa,7d,91),
	HX_("CbEvent_ONGOING",77,53,07,01),
	HX_("InteractionType_SENSOR",cd,89,4f,79),
	HX_("CbEvent_END",17,97,be,fb),
	HX_("InteractionType_FLUID",b7,b9,af,86),
	HX_("CbEvent_WAKE",48,9d,e1,56),
	HX_("InteractionType_ANY",59,41,ee,9d),
	HX_("CbEvent_SLEEP",53,7b,2e,68),
	HX_("CbEvent_BREAK",fb,e2,55,a2),
	HX_("CbEvent_PRE",5f,f3,c6,fb),
	HX_("Winding_UNDEFINED",ab,57,27,ed),
	HX_("Winding_CLOCKWISE",0d,97,bc,8c),
	HX_("Winding_ANTICLOCKWISE",ab,f4,d3,cb),
	HX_("ValidationResult_VALID",b3,de,cb,ea),
	HX_("ValidationResult_DEGENERATE",7f,d6,24,d4),
	HX_("ValidationResult_CONCAVE",06,54,42,c2),
	HX_("ValidationResult_SELF_INTERSECTING",8d,09,93,ef),
	HX_("ShapeType_CIRCLE",b4,fa,f9,d0),
	HX_("ShapeType_POLYGON",36,09,9c,26),
	HX_("Broadphase_DYNAMIC_AABB_TREE",57,7b,b0,71),
	HX_("Broadphase_SWEEP_AND_PRUNE",29,13,cf,00),
	HX_("ArbiterType_COLLISION",f6,1c,6e,9a),
	HX_("ArbiterType_SENSOR",16,4b,8e,ed),
	HX_("ArbiterType_FLUID",8e,74,94,7a),
	::String(null())
};

void ZPP_Flags_obj::__register()
{
	ZPP_Flags_obj _hx_dummy;
	ZPP_Flags_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZPP_Flags",17,75,4c,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Flags_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Flags_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Flags_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Flags_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Flags_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Flags_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Flags_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Flags_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Flags_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_175_boot)
HXDLIN( 175)		internal = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_177_boot)
HXDLIN( 177)		id_ImmState_ACCEPT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_178_boot)
HXDLIN( 178)		id_ImmState_IGNORE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_179_boot)
HXDLIN( 179)		id_ImmState_ALWAYS = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_180_boot)
HXDLIN( 180)		id_GravMassMode_DEFAULT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_181_boot)
HXDLIN( 181)		id_GravMassMode_FIXED = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_182_boot)
HXDLIN( 182)		id_GravMassMode_SCALED = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_183_boot)
HXDLIN( 183)		id_InertiaMode_DEFAULT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_184_boot)
HXDLIN( 184)		id_InertiaMode_FIXED = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_185_boot)
HXDLIN( 185)		id_MassMode_DEFAULT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_186_boot)
HXDLIN( 186)		id_MassMode_FIXED = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_187_boot)
HXDLIN( 187)		id_BodyType_STATIC = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_188_boot)
HXDLIN( 188)		id_BodyType_DYNAMIC = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_189_boot)
HXDLIN( 189)		id_BodyType_KINEMATIC = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_190_boot)
HXDLIN( 190)		id_ListenerType_BODY = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_191_boot)
HXDLIN( 191)		id_PreFlag_ACCEPT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_192_boot)
HXDLIN( 192)		id_ListenerType_CONSTRAINT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_193_boot)
HXDLIN( 193)		id_PreFlag_IGNORE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_194_boot)
HXDLIN( 194)		id_ListenerType_INTERACTION = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_195_boot)
HXDLIN( 195)		id_PreFlag_ACCEPT_ONCE = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_196_boot)
HXDLIN( 196)		id_ListenerType_PRE = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_197_boot)
HXDLIN( 197)		id_PreFlag_IGNORE_ONCE = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_198_boot)
HXDLIN( 198)		id_CbEvent_BEGIN = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_199_boot)
HXDLIN( 199)		id_InteractionType_COLLISION = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_200_boot)
HXDLIN( 200)		id_CbEvent_ONGOING = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_201_boot)
HXDLIN( 201)		id_InteractionType_SENSOR = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_202_boot)
HXDLIN( 202)		id_CbEvent_END = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_203_boot)
HXDLIN( 203)		id_InteractionType_FLUID = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_204_boot)
HXDLIN( 204)		id_CbEvent_WAKE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_205_boot)
HXDLIN( 205)		id_InteractionType_ANY = 7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_206_boot)
HXDLIN( 206)		id_CbEvent_SLEEP = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_207_boot)
HXDLIN( 207)		id_CbEvent_BREAK = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_208_boot)
HXDLIN( 208)		id_CbEvent_PRE = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_209_boot)
HXDLIN( 209)		id_Winding_UNDEFINED = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_210_boot)
HXDLIN( 210)		id_Winding_CLOCKWISE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_211_boot)
HXDLIN( 211)		id_Winding_ANTICLOCKWISE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_212_boot)
HXDLIN( 212)		id_ValidationResult_VALID = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_213_boot)
HXDLIN( 213)		id_ValidationResult_DEGENERATE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_214_boot)
HXDLIN( 214)		id_ValidationResult_CONCAVE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_215_boot)
HXDLIN( 215)		id_ValidationResult_SELF_INTERSECTING = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_216_boot)
HXDLIN( 216)		id_ShapeType_CIRCLE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_217_boot)
HXDLIN( 217)		id_ShapeType_POLYGON = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_218_boot)
HXDLIN( 218)		id_Broadphase_DYNAMIC_AABB_TREE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_219_boot)
HXDLIN( 219)		id_Broadphase_SWEEP_AND_PRUNE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_220_boot)
HXDLIN( 220)		id_ArbiterType_COLLISION = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_221_boot)
HXDLIN( 221)		id_ArbiterType_SENSOR = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c1cf3f1572ee35c5_222_boot)
HXDLIN( 222)		id_ArbiterType_FLUID = 4;
            	}
}

} // end namespace zpp_nape
} // end namespace util
