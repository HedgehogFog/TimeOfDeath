// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <hxinc/zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5179_new,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","new",0xdd87e258,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.new","zpp_nape/util/Lists.hx",5179,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5185_begin,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","begin",0x502c6a21,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.begin","zpp_nape/util/Lists.hx",5185,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5192_setbegin,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","setbegin",0x2b4cae4f,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.setbegin","zpp_nape/util/Lists.hx",5192,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5198_add,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","add",0xdd7e0419,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.add","zpp_nape/util/Lists.hx",5198,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5202_inlined_add,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_add",0x95391685,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_add","zpp_nape/util/Lists.hx",5202,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5248_addAll,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","addAll",0xdad48288,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.addAll","zpp_nape/util/Lists.hx",5248,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5258_insert,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","insert",0xd9b6bc41,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.insert","zpp_nape/util/Lists.hx",5258,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5262_inlined_insert,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_insert",0x9615f555,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_insert","zpp_nape/util/Lists.hx",5262,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5306_pop,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","pop",0xdd896f89,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.pop","zpp_nape/util/Lists.hx",5306,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5310_inlined_pop,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_pop",0x954481f5,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_pop","zpp_nape/util/Lists.hx",5310,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5344_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","pop_unsafe",0x29ab195c,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.pop_unsafe","zpp_nape/util/Lists.hx",5344,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5348_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_pop_unsafe",0x5c9e6c70,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_pop_unsafe","zpp_nape/util/Lists.hx",5348,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5370_remove,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","remove",0x4062154c,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.remove","zpp_nape/util/Lists.hx",5370,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5372_try_remove,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","try_remove",0x40d54f10,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.try_remove","zpp_nape/util/Lists.hx",5372,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5406_inlined_remove,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_remove",0xfcc14e60,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_remove","zpp_nape/util/Lists.hx",5406,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5410_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_try_remove",0x73c8a224,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_try_remove","zpp_nape/util/Lists.hx",5410,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5434_erase,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","erase",0x12f368de,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.erase","zpp_nape/util/Lists.hx",5434,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5438_inlined_erase,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_erase",0x7d68ee4a,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_erase","zpp_nape/util/Lists.hx",5438,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5484_splice,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","splice",0xfb77fe84,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.splice","zpp_nape/util/Lists.hx",5484,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5489_clear,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","clear",0xe831f185,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.clear","zpp_nape/util/Lists.hx",5489,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5494_inlined_clear,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_clear",0x52a776f1,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_clear","zpp_nape/util/Lists.hx",5494,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5499_reverse,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","reverse",0x3d6ca71a,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.reverse","zpp_nape/util/Lists.hx",5499,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5515_empty,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","empty",0x0fb0ba85,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.empty","zpp_nape/util/Lists.hx",5515,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5520_size,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","size",0xfcaf47c9,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.size","zpp_nape/util/Lists.hx",5520,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5523_has,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","has",0xdd835152,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.has","zpp_nape/util/Lists.hx",5523,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5527_inlined_has,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","inlined_has",0x953e63be,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.inlined_has","zpp_nape/util/Lists.hx",5527,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5558_front,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","front",0xa66498a1,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.front","zpp_nape/util/Lists.hx",5558,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5560_back,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","back",0xf16c812f,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.back","zpp_nape/util/Lists.hx",5560,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5569_iterator_at,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","iterator_at",0x99dd53dc,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.iterator_at","zpp_nape/util/Lists.hx",5569,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b92a6f4b416c6e07_5582_at,"zpp_nape.util.ZNPList_ZPP_ConstraintListener","at",0xae56a9fb,"zpp_nape.util.ZNPList_ZPP_ConstraintListener.at","zpp_nape/util/Lists.hx",5582,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_ConstraintListener_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5179_new)
HXLINE(5189)		this->length = 0;
HXLINE(5188)		this->pushmod = false;
HXLINE(5187)		this->modified = false;
HXLINE(5180)		this->head = null();
            	}

Dynamic ZNPList_ZPP_ConstraintListener_obj::__CreateEmpty() { return new ZNPList_ZPP_ConstraintListener_obj; }

void *ZNPList_ZPP_ConstraintListener_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_ConstraintListener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_ConstraintListener_obj > _hx_result = new ZNPList_ZPP_ConstraintListener_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_ConstraintListener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7cec5602;
}

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5185_begin)
HXDLIN(5185)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,begin,return )

void ZNPList_ZPP_ConstraintListener_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener i){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5192_setbegin)
HXLINE(5193)		this->head = i;
HXLINE(5194)		this->modified = true;
HXLINE(5195)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,setbegin,(void))

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::add( ::zpp_nape::callbacks::ZPP_ConstraintListener o){
            	HX_GC_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5198_add)
HXDLIN(5198)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXDLIN(5198)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXDLIN(5198)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(5198)			ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5198)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXDLIN(5198)			ret->next = null();
            		}
HXDLIN(5198)		ret->elt = o;
HXDLIN(5198)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener temp = ret;
HXDLIN(5198)		temp->next = this->head;
HXDLIN(5198)		this->head = temp;
HXDLIN(5198)		this->modified = true;
HXDLIN(5198)		this->length++;
HXDLIN(5198)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,add,return )

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::inlined_add( ::zpp_nape::callbacks::ZPP_ConstraintListener o){
            	HX_GC_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5202_inlined_add)
HXLINE(5212)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXLINE(5214)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXLINE(5215)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5221)			ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXLINE(5222)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXLINE(5223)			ret->next = null();
            		}
HXLINE(5230)		ret->elt = o;
HXLINE(5211)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener temp = ret;
HXLINE(5233)		temp->next = this->head;
HXLINE(5234)		this->head = temp;
HXLINE(5235)		this->modified = true;
HXLINE(5236)		this->length++;
HXLINE(5237)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,inlined_add,return )

void ZNPList_ZPP_ConstraintListener_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_ConstraintListener x){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5248_addAll)
HXLINE(5249)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = x->head;
HXLINE(5250)		while(hx::IsNotNull( cx_ite )){
HXLINE(5251)			 ::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;
HXLINE(5252)			this->add(i);
HXLINE(5253)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur, ::zpp_nape::callbacks::ZPP_ConstraintListener o){
            	HX_GC_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5258_insert)
HXDLIN(5258)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXDLIN(5258)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXDLIN(5258)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(5258)			ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5258)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXDLIN(5258)			ret->next = null();
            		}
HXDLIN(5258)		ret->elt = o;
HXDLIN(5258)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener temp = ret;
HXDLIN(5258)		if (hx::IsNull( cur )) {
HXDLIN(5258)			temp->next = this->head;
HXDLIN(5258)			this->head = temp;
            		}
            		else {
HXDLIN(5258)			temp->next = cur->next;
HXDLIN(5258)			cur->next = temp;
            		}
HXDLIN(5258)		this->pushmod = (this->modified = true);
HXDLIN(5258)		this->length++;
HXDLIN(5258)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ConstraintListener_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur, ::zpp_nape::callbacks::ZPP_ConstraintListener o){
            	HX_GC_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5262_inlined_insert)
HXLINE(5272)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXLINE(5274)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXLINE(5275)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5281)			ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXLINE(5282)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXLINE(5283)			ret->next = null();
            		}
HXLINE(5290)		ret->elt = o;
HXLINE(5271)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener temp = ret;
HXLINE(5293)		if (hx::IsNull( cur )) {
HXLINE(5294)			temp->next = this->head;
HXLINE(5295)			this->head = temp;
            		}
            		else {
HXLINE(5298)			temp->next = cur->next;
HXLINE(5299)			cur->next = temp;
            		}
HXLINE(5301)		this->pushmod = (this->modified = true);
HXLINE(5302)		this->length++;
HXLINE(5303)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ConstraintListener_obj,inlined_insert,return )

void ZNPList_ZPP_ConstraintListener_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5306_pop)
HXDLIN(5306)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret = this->head;
HXDLIN(5306)		this->head = ret->next;
HXDLIN(5306)		{
HXDLIN(5306)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = ret;
HXDLIN(5306)			o->elt = null();
HXDLIN(5306)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5306)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            		}
HXDLIN(5306)		if (hx::IsNull( this->head )) {
HXDLIN(5306)			this->pushmod = true;
            		}
HXDLIN(5306)		this->modified = true;
HXDLIN(5306)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,pop,(void))

void ZNPList_ZPP_ConstraintListener_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5310_inlined_pop)
HXLINE(5319)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret = this->head;
HXLINE(5320)		this->head = ret->next;
HXLINE(5322)		{
HXLINE(5323)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = ret;
HXLINE(5332)			o->elt = null();
HXLINE(5333)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXLINE(5334)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            		}
HXLINE(5339)		if (hx::IsNull( this->head )) {
HXLINE(5339)			this->pushmod = true;
            		}
HXLINE(5340)		this->modified = true;
HXLINE(5341)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,inlined_pop,(void))

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5344_pop_unsafe)
HXDLIN(5344)		 ::zpp_nape::callbacks::ZPP_ConstraintListener ret = this->head->elt;
HXDLIN(5344)		this->pop();
HXDLIN(5344)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,pop_unsafe,return )

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5348_inlined_pop_unsafe)
HXLINE(5357)		 ::zpp_nape::callbacks::ZPP_ConstraintListener ret = this->head->elt;
HXLINE(5358)		this->pop();
HXLINE(5359)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_ConstraintListener_obj::remove( ::zpp_nape::callbacks::ZPP_ConstraintListener obj){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5370_remove)
HXDLIN(5370)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre = null();
HXDLIN(5370)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur = this->head;
HXDLIN(5370)		bool ret = false;
HXDLIN(5370)		while(hx::IsNotNull( cur )){
HXDLIN(5370)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(5370)				{
HXDLIN(5370)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener old;
HXDLIN(5370)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret1;
HXDLIN(5370)					if (hx::IsNull( pre )) {
HXDLIN(5370)						old = this->head;
HXDLIN(5370)						ret1 = old->next;
HXDLIN(5370)						this->head = ret1;
HXDLIN(5370)						if (hx::IsNull( this->head )) {
HXDLIN(5370)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(5370)						old = pre->next;
HXDLIN(5370)						ret1 = old->next;
HXDLIN(5370)						pre->next = ret1;
HXDLIN(5370)						if (hx::IsNull( ret1 )) {
HXDLIN(5370)							this->pushmod = true;
            						}
            					}
HXDLIN(5370)					{
HXDLIN(5370)						 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = old;
HXDLIN(5370)						o->elt = null();
HXDLIN(5370)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5370)						::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            					}
HXDLIN(5370)					this->modified = true;
HXDLIN(5370)					this->length--;
HXDLIN(5370)					this->pushmod = true;
            				}
HXDLIN(5370)				ret = true;
HXDLIN(5370)				goto _hx_goto_13;
            			}
HXDLIN(5370)			pre = cur;
HXDLIN(5370)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,remove,(void))

bool ZNPList_ZPP_ConstraintListener_obj::try_remove( ::zpp_nape::callbacks::ZPP_ConstraintListener obj){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5372_try_remove)
HXLINE(5381)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre = null();
HXLINE(5382)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur = this->head;
HXLINE(5383)		bool ret = false;
HXLINE(5384)		while(hx::IsNotNull( cur )){
HXLINE(5385)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5386)				this->erase(pre);
HXLINE(5387)				ret = true;
HXLINE(5388)				goto _hx_goto_15;
            			}
HXLINE(5390)			pre = cur;
HXLINE(5391)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(5393)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,try_remove,return )

void ZNPList_ZPP_ConstraintListener_obj::inlined_remove( ::zpp_nape::callbacks::ZPP_ConstraintListener obj){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5406_inlined_remove)
HXDLIN(5406)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre = null();
HXDLIN(5406)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur = this->head;
HXDLIN(5406)		bool ret = false;
HXDLIN(5406)		while(hx::IsNotNull( cur )){
HXDLIN(5406)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(5406)				{
HXDLIN(5406)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener old;
HXDLIN(5406)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret1;
HXDLIN(5406)					if (hx::IsNull( pre )) {
HXDLIN(5406)						old = this->head;
HXDLIN(5406)						ret1 = old->next;
HXDLIN(5406)						this->head = ret1;
HXDLIN(5406)						if (hx::IsNull( this->head )) {
HXDLIN(5406)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(5406)						old = pre->next;
HXDLIN(5406)						ret1 = old->next;
HXDLIN(5406)						pre->next = ret1;
HXDLIN(5406)						if (hx::IsNull( ret1 )) {
HXDLIN(5406)							this->pushmod = true;
            						}
            					}
HXDLIN(5406)					{
HXDLIN(5406)						 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = old;
HXDLIN(5406)						o->elt = null();
HXDLIN(5406)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5406)						::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            					}
HXDLIN(5406)					this->modified = true;
HXDLIN(5406)					this->length--;
HXDLIN(5406)					this->pushmod = true;
            				}
HXDLIN(5406)				ret = true;
HXDLIN(5406)				goto _hx_goto_17;
            			}
HXDLIN(5406)			pre = cur;
HXDLIN(5406)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,inlined_remove,(void))

bool ZNPList_ZPP_ConstraintListener_obj::inlined_try_remove( ::zpp_nape::callbacks::ZPP_ConstraintListener obj){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5410_inlined_try_remove)
HXLINE(5419)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre = null();
HXLINE(5420)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur = this->head;
HXLINE(5421)		bool ret = false;
HXLINE(5422)		while(hx::IsNotNull( cur )){
HXLINE(5423)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5424)				{
HXLINE(5424)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener old;
HXDLIN(5424)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret1;
HXDLIN(5424)					if (hx::IsNull( pre )) {
HXLINE(5424)						old = this->head;
HXDLIN(5424)						ret1 = old->next;
HXDLIN(5424)						this->head = ret1;
HXDLIN(5424)						if (hx::IsNull( this->head )) {
HXLINE(5424)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(5424)						old = pre->next;
HXDLIN(5424)						ret1 = old->next;
HXDLIN(5424)						pre->next = ret1;
HXDLIN(5424)						if (hx::IsNull( ret1 )) {
HXLINE(5424)							this->pushmod = true;
            						}
            					}
HXDLIN(5424)					{
HXLINE(5424)						 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = old;
HXDLIN(5424)						o->elt = null();
HXDLIN(5424)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5424)						::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            					}
HXDLIN(5424)					this->modified = true;
HXDLIN(5424)					this->length--;
HXDLIN(5424)					this->pushmod = true;
            				}
HXLINE(5425)				ret = true;
HXLINE(5426)				goto _hx_goto_19;
            			}
HXLINE(5428)			pre = cur;
HXLINE(5429)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(5431)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5434_erase)
HXDLIN(5434)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener old;
HXDLIN(5434)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXDLIN(5434)		if (hx::IsNull( pre )) {
HXDLIN(5434)			old = this->head;
HXDLIN(5434)			ret = old->next;
HXDLIN(5434)			this->head = ret;
HXDLIN(5434)			if (hx::IsNull( this->head )) {
HXDLIN(5434)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(5434)			old = pre->next;
HXDLIN(5434)			ret = old->next;
HXDLIN(5434)			pre->next = ret;
HXDLIN(5434)			if (hx::IsNull( ret )) {
HXDLIN(5434)				this->pushmod = true;
            			}
            		}
HXDLIN(5434)		{
HXDLIN(5434)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = old;
HXDLIN(5434)			o->elt = null();
HXDLIN(5434)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5434)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            		}
HXDLIN(5434)		this->modified = true;
HXDLIN(5434)		this->length--;
HXDLIN(5434)		this->pushmod = true;
HXDLIN(5434)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5438_inlined_erase)
HXLINE(5447)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener old;
HXLINE(5448)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXLINE(5449)		if (hx::IsNull( pre )) {
HXLINE(5450)			old = this->head;
HXLINE(5451)			ret = old->next;
HXLINE(5452)			this->head = ret;
HXLINE(5453)			if (hx::IsNull( this->head )) {
HXLINE(5453)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(5456)			old = pre->next;
HXLINE(5457)			ret = old->next;
HXLINE(5458)			pre->next = ret;
HXLINE(5459)			if (hx::IsNull( ret )) {
HXLINE(5459)				this->pushmod = true;
            			}
            		}
HXLINE(5462)		{
HXLINE(5463)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = old;
HXLINE(5472)			o->elt = null();
HXLINE(5473)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXLINE(5474)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            		}
HXLINE(5479)		this->modified = true;
HXLINE(5480)		this->length--;
HXLINE(5481)		this->pushmod = true;
HXLINE(5482)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre,int n){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5484_splice)
HXLINE(5485)		while(true){
HXLINE(5485)			bool _hx_tmp;
HXDLIN(5485)			n = (n - 1);
HXDLIN(5485)			if (((n + 1) > 0)) {
HXLINE(5485)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(5485)				_hx_tmp = false;
            			}
HXDLIN(5485)			if (!(_hx_tmp)) {
HXLINE(5485)				goto _hx_goto_23;
            			}
HXDLIN(5485)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(5486)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ConstraintListener_obj,splice,return )

void ZNPList_ZPP_ConstraintListener_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5489_clear)
HXDLIN(5489)		while(hx::IsNotNull( this->head )){
HXDLIN(5489)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret = this->head;
HXDLIN(5489)			this->head = ret->next;
HXDLIN(5489)			{
HXDLIN(5489)				 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = ret;
HXDLIN(5489)				o->elt = null();
HXDLIN(5489)				o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5489)				::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            			}
HXDLIN(5489)			if (hx::IsNull( this->head )) {
HXDLIN(5489)				this->pushmod = true;
            			}
HXDLIN(5489)			this->modified = true;
HXDLIN(5489)			this->length--;
            		}
HXDLIN(5489)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,clear,(void))

void ZNPList_ZPP_ConstraintListener_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5494_inlined_clear)
HXLINE(5495)		while(hx::IsNotNull( this->head )){
HXLINE(5495)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret = this->head;
HXDLIN(5495)			this->head = ret->next;
HXDLIN(5495)			{
HXLINE(5495)				 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener o = ret;
HXDLIN(5495)				o->elt = null();
HXDLIN(5495)				o->next = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN(5495)				::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = o;
            			}
HXDLIN(5495)			if (hx::IsNull( this->head )) {
HXLINE(5495)				this->pushmod = true;
            			}
HXDLIN(5495)			this->modified = true;
HXDLIN(5495)			this->length--;
            		}
HXLINE(5496)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,inlined_clear,(void))

void ZNPList_ZPP_ConstraintListener_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5499_reverse)
HXLINE(5500)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur = this->head;
HXLINE(5501)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre = null();
HXLINE(5502)		while(hx::IsNotNull( cur )){
HXLINE(5503)			 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener nx = cur->next;
HXLINE(5504)			cur->next = pre;
HXLINE(5505)			this->head = cur;
HXLINE(5506)			pre = cur;
HXLINE(5507)			cur = nx;
            		}
HXLINE(5509)		this->modified = true;
HXLINE(5510)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,reverse,(void))

bool ZNPList_ZPP_ConstraintListener_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5515_empty)
HXDLIN(5515)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,empty,return )

int ZNPList_ZPP_ConstraintListener_obj::size(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5520_size)
HXDLIN(5520)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,size,return )

bool ZNPList_ZPP_ConstraintListener_obj::has( ::zpp_nape::callbacks::ZPP_ConstraintListener obj){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5523_has)
HXDLIN(5523)		bool ret;
HXDLIN(5523)		{
HXDLIN(5523)			ret = false;
HXDLIN(5523)			{
HXDLIN(5523)				 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = this->head;
HXDLIN(5523)				while(hx::IsNotNull( cx_ite )){
HXDLIN(5523)					 ::zpp_nape::callbacks::ZPP_ConstraintListener npite = cx_ite->elt;
HXDLIN(5523)					if (hx::IsEq( npite,obj )) {
HXDLIN(5523)						ret = true;
HXDLIN(5523)						goto _hx_goto_33;
            					}
HXDLIN(5523)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(5523)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,has,return )

bool ZNPList_ZPP_ConstraintListener_obj::inlined_has( ::zpp_nape::callbacks::ZPP_ConstraintListener obj){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5527_inlined_has)
HXLINE(5536)		bool ret;
HXLINE(5537)		{
HXLINE(5538)			ret = false;
HXLINE(5539)			{
HXLINE(5540)				 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = this->head;
HXLINE(5541)				while(hx::IsNotNull( cx_ite )){
HXLINE(5542)					 ::zpp_nape::callbacks::ZPP_ConstraintListener npite = cx_ite->elt;
HXLINE(5544)					if (hx::IsEq( npite,obj )) {
HXLINE(5545)						ret = true;
HXLINE(5546)						goto _hx_goto_35;
            					}
HXLINE(5549)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(5553)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,inlined_has,return )

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::front(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5558_front)
HXDLIN(5558)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,front,return )

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::back(){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5560_back)
HXLINE(5561)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret = this->head;
HXLINE(5562)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cur = ret;
HXLINE(5563)		while(hx::IsNotNull( cur )){
HXLINE(5564)			ret = cur;
HXLINE(5565)			cur = cur->next;
            		}
HXLINE(5567)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ConstraintListener_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5569_iterator_at)
HXLINE(5578)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret = this->head;
HXLINE(5579)		while(true){
HXLINE(5579)			bool _hx_tmp;
HXDLIN(5579)			ind = (ind - 1);
HXDLIN(5579)			if (((ind + 1) > 0)) {
HXLINE(5579)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(5579)				_hx_tmp = false;
            			}
HXDLIN(5579)			if (!(_hx_tmp)) {
HXLINE(5579)				goto _hx_goto_40;
            			}
HXDLIN(5579)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(5580)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,iterator_at,return )

 ::zpp_nape::callbacks::ZPP_ConstraintListener ZNPList_ZPP_ConstraintListener_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_b92a6f4b416c6e07_5582_at)
HXLINE(5591)		 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener it = this->iterator_at(ind);
HXLINE(5592)		if (hx::IsNotNull( it )) {
HXLINE(5592)			return it->elt;
            		}
            		else {
HXLINE(5592)			return null();
            		}
HXDLIN(5592)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ConstraintListener_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_ConstraintListener_obj > ZNPList_ZPP_ConstraintListener_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_ConstraintListener_obj > __this = new ZNPList_ZPP_ConstraintListener_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_ConstraintListener_obj > ZNPList_ZPP_ConstraintListener_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_ConstraintListener_obj *__this = (ZNPList_ZPP_ConstraintListener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_ConstraintListener_obj), true, "zpp_nape.util.ZNPList_ZPP_ConstraintListener"));
	*(void **)__this = ZNPList_ZPP_ConstraintListener_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_ConstraintListener_obj::ZNPList_ZPP_ConstraintListener_obj()
{
}

void ZNPList_ZPP_ConstraintListener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_ConstraintListener);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_ConstraintListener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_ConstraintListener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_ConstraintListener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_ConstraintListener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_ConstraintListener_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener */ ,(int)offsetof(ZNPList_ZPP_ConstraintListener_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_ConstraintListener_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_ConstraintListener_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_ConstraintListener_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_ConstraintListener_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_ConstraintListener_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_ConstraintListener_obj::__mClass;

void ZNPList_ZPP_ConstraintListener_obj::__register()
{
	ZNPList_ZPP_ConstraintListener_obj _hx_dummy;
	ZNPList_ZPP_ConstraintListener_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_ConstraintListener",66,16,2a,d6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_ConstraintListener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_ConstraintListener_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_ConstraintListener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_ConstraintListener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
