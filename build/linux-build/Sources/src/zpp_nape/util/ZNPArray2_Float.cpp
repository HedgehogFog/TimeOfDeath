// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_util_ZNPArray2_Float
#include <hxinc/zpp_nape/util/ZNPArray2_Float.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b73ef00f7571df0a_175_new,"zpp_nape.util.ZNPArray2_Float","new",0x9abc4bb9,"zpp_nape.util.ZNPArray2_Float.new","zpp_nape/util/Array2.hx",175,0x6c3575ba)
HX_LOCAL_STACK_FRAME(_hx_pos_b73ef00f7571df0a_191_resize,"zpp_nape.util.ZNPArray2_Float","resize",0x6725bc3b,"zpp_nape.util.ZNPArray2_Float.resize","zpp_nape/util/Array2.hx",191,0x6c3575ba)
HX_LOCAL_STACK_FRAME(_hx_pos_b73ef00f7571df0a_218_get,"zpp_nape.util.ZNPArray2_Float","get",0x9ab6fbef,"zpp_nape.util.ZNPArray2_Float.get","zpp_nape/util/Array2.hx",218,0x6c3575ba)
HX_LOCAL_STACK_FRAME(_hx_pos_b73ef00f7571df0a_231_set,"zpp_nape.util.ZNPArray2_Float","set",0x9ac016fb,"zpp_nape.util.ZNPArray2_Float.set","zpp_nape/util/Array2.hx",231,0x6c3575ba)
namespace zpp_nape{
namespace util{

void ZNPArray2_Float_obj::__construct(int width,int height){
            	HX_STACKFRAME(&_hx_pos_b73ef00f7571df0a_175_new)
HXLINE( 177)		this->width = 0;
HXLINE( 176)		this->list = null();
HXLINE( 183)		this->width = width;
HXLINE( 188)		this->list = ::Array_obj< Float >::__new();
            	}

Dynamic ZNPArray2_Float_obj::__CreateEmpty() { return new ZNPArray2_Float_obj; }

void *ZNPArray2_Float_obj::_hx_vtable = 0;

Dynamic ZNPArray2_Float_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPArray2_Float_obj > _hx_result = new ZNPArray2_Float_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ZNPArray2_Float_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11202b83;
}

void ZNPArray2_Float_obj::resize(int width,int height,Float def){
            	HX_STACKFRAME(&_hx_pos_b73ef00f7571df0a_191_resize)
HXLINE( 200)		this->width = width;
HXLINE( 203)		{
HXLINE( 203)			int _g = 0;
HXDLIN( 203)			int _g1 = (width * height);
HXDLIN( 203)			while((_g < _g1)){
HXLINE( 203)				_g = (_g + 1);
HXDLIN( 203)				int i = (_g - 1);
HXLINE( 204)				this->list[i] = def;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZNPArray2_Float_obj,resize,(void))

Float ZNPArray2_Float_obj::get(int x,int y){
            	HX_STACKFRAME(&_hx_pos_b73ef00f7571df0a_218_get)
HXDLIN( 218)		return this->list->__get(((y * this->width) + x));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPArray2_Float_obj,get,return )

Float ZNPArray2_Float_obj::set(int x,int y,Float obj){
            	HX_STACKFRAME(&_hx_pos_b73ef00f7571df0a_231_set)
HXDLIN( 231)		return (this->list[((y * this->width) + x)] = obj);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZNPArray2_Float_obj,set,return )


ZNPArray2_Float_obj::ZNPArray2_Float_obj()
{
}

void ZNPArray2_Float_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPArray2_Float);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_END_CLASS();
}

void ZNPArray2_Float_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(width,"width");
}

hx::Val ZNPArray2_Float_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPArray2_Float_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPArray2_Float_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("list",5e,1c,b3,47));
	outFields->push(HX_("width",06,b6,62,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPArray2_Float_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ZNPArray2_Float_obj,list),HX_("list",5e,1c,b3,47)},
	{hx::fsInt,(int)offsetof(ZNPArray2_Float_obj,width),HX_("width",06,b6,62,ca)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPArray2_Float_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPArray2_Float_obj_sMemberFields[] = {
	HX_("list",5e,1c,b3,47),
	HX_("width",06,b6,62,ca),
	HX_("resize",f4,59,7b,08),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	::String(null()) };

hx::Class ZNPArray2_Float_obj::__mClass;

void ZNPArray2_Float_obj::__register()
{
	ZNPArray2_Float_obj _hx_dummy;
	ZNPArray2_Float_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPArray2_Float",47,fb,73,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPArray2_Float_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPArray2_Float_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPArray2_Float_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPArray2_Float_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
