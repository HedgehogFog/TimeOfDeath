// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <hxinc/zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionVertex
#include <hxinc/zpp_nape/util/ZNPList_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6430_new,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","new",0x7d179ecb,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.new","zpp_nape/util/Lists.hx",6430,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6436_begin,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","begin",0xc07a6954,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.begin","zpp_nape/util/Lists.hx",6436,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6443_setbegin,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","setbegin",0xd83df0fc,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.setbegin","zpp_nape/util/Lists.hx",6443,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6449_add,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","add",0x7d0dc08c,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.add","zpp_nape/util/Lists.hx",6449,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6453_inlined_add,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_add",0xe756fdf8,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_add","zpp_nape/util/Lists.hx",6453,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6499_addAll,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","addAll",0xaec5cff5,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.addAll","zpp_nape/util/Lists.hx",6499,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6509_insert,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","insert",0xada809ae,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.insert","zpp_nape/util/Lists.hx",6509,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6513_inlined_insert,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_insert",0xb065f7c2,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_insert","zpp_nape/util/Lists.hx",6513,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6557_pop,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","pop",0x7d192bfc,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.pop","zpp_nape/util/Lists.hx",6557,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6561_inlined_pop,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_pop",0xe7626968,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_pop","zpp_nape/util/Lists.hx",6561,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6595_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","pop_unsafe",0xe7742149,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.pop_unsafe","zpp_nape/util/Lists.hx",6595,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6599_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_pop_unsafe",0x6ec4a95d,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_pop_unsafe","zpp_nape/util/Lists.hx",6599,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6621_remove,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","remove",0x145362b9,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.remove","zpp_nape/util/Lists.hx",6621,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6623_try_remove,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","try_remove",0xfe9e56fd,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.try_remove","zpp_nape/util/Lists.hx",6623,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6657_inlined_remove,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_remove",0x171150cd,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_remove","zpp_nape/util/Lists.hx",6657,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6661_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_try_remove",0x85eedf11,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_try_remove","zpp_nape/util/Lists.hx",6661,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6685_erase,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","erase",0x83416811,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.erase","zpp_nape/util/Lists.hx",6685,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6689_inlined_erase,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_erase",0x0065d87d,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_erase","zpp_nape/util/Lists.hx",6689,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6735_splice,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","splice",0xcf694bf1,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.splice","zpp_nape/util/Lists.hx",6735,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6740_clear,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","clear",0x587ff0b8,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.clear","zpp_nape/util/Lists.hx",6740,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6745_inlined_clear,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_clear",0xd5a46124,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_clear","zpp_nape/util/Lists.hx",6745,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6750_reverse,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","reverse",0xdc9f190d,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.reverse","zpp_nape/util/Lists.hx",6750,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6766_empty,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","empty",0x7ffeb9b8,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.empty","zpp_nape/util/Lists.hx",6766,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6771_size,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","size",0xfae46ff6,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.size","zpp_nape/util/Lists.hx",6771,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6774_has,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","has",0x7d130dc5,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.has","zpp_nape/util/Lists.hx",6774,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6778_inlined_has,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","inlined_has",0xe75c4b31,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.inlined_has","zpp_nape/util/Lists.hx",6778,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6809_front,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","front",0x16b297d4,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.front","zpp_nape/util/Lists.hx",6809,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6811_back,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","back",0xefa1a95c,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.back","zpp_nape/util/Lists.hx",6811,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6820_iterator_at,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","iterator_at",0xebfb3b4f,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.iterator_at","zpp_nape/util/Lists.hx",6820,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_15d0fa4602cba71b_6833_at,"zpp_nape.util.ZNPList_ZPP_PartitionVertex","at",0xb27f7ce8,"zpp_nape.util.ZNPList_ZPP_PartitionVertex.at","zpp_nape/util/Lists.hx",6833,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_PartitionVertex_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6430_new)
HXLINE(6440)		this->length = 0;
HXLINE(6439)		this->pushmod = false;
HXLINE(6438)		this->modified = false;
HXLINE(6431)		this->head = null();
            	}

Dynamic ZNPList_ZPP_PartitionVertex_obj::__CreateEmpty() { return new ZNPList_ZPP_PartitionVertex_obj; }

void *ZNPList_ZPP_PartitionVertex_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_PartitionVertex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_PartitionVertex_obj > _hx_result = new ZNPList_ZPP_PartitionVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_PartitionVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x486639b1;
}

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6436_begin)
HXDLIN(6436)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,begin,return )

void ZNPList_ZPP_PartitionVertex_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex i){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6443_setbegin)
HXLINE(6444)		this->head = i;
HXLINE(6445)		this->modified = true;
HXLINE(6446)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::add( ::zpp_nape::geom::ZPP_PartitionVertex o){
            	HX_GC_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6449_add)
HXDLIN(6449)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret;
HXDLIN(6449)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool )) {
HXDLIN(6449)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(6449)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6449)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXDLIN(6449)			ret->next = null();
            		}
HXDLIN(6449)		ret->elt = o;
HXDLIN(6449)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex temp = ret;
HXDLIN(6449)		temp->next = this->head;
HXDLIN(6449)		this->head = temp;
HXDLIN(6449)		this->modified = true;
HXDLIN(6449)		this->length++;
HXDLIN(6449)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,add,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::inlined_add( ::zpp_nape::geom::ZPP_PartitionVertex o){
            	HX_GC_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6453_inlined_add)
HXLINE(6463)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret;
HXLINE(6465)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(6466)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6472)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(6473)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXLINE(6474)			ret->next = null();
            		}
HXLINE(6481)		ret->elt = o;
HXLINE(6462)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex temp = ret;
HXLINE(6484)		temp->next = this->head;
HXLINE(6485)		this->head = temp;
HXLINE(6486)		this->modified = true;
HXLINE(6487)		this->length++;
HXLINE(6488)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,inlined_add,return )

void ZNPList_ZPP_PartitionVertex_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_PartitionVertex x){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6499_addAll)
HXLINE(6500)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cx_ite = x->head;
HXLINE(6501)		while(hx::IsNotNull( cx_ite )){
HXLINE(6502)			 ::zpp_nape::geom::ZPP_PartitionVertex i = cx_ite->elt;
HXLINE(6503)			this->add(i);
HXLINE(6504)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur, ::zpp_nape::geom::ZPP_PartitionVertex o){
            	HX_GC_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6509_insert)
HXDLIN(6509)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret;
HXDLIN(6509)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool )) {
HXDLIN(6509)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(6509)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6509)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXDLIN(6509)			ret->next = null();
            		}
HXDLIN(6509)		ret->elt = o;
HXDLIN(6509)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex temp = ret;
HXDLIN(6509)		if (hx::IsNull( cur )) {
HXDLIN(6509)			temp->next = this->head;
HXDLIN(6509)			this->head = temp;
            		}
            		else {
HXDLIN(6509)			temp->next = cur->next;
HXDLIN(6509)			cur->next = temp;
            		}
HXDLIN(6509)		this->pushmod = (this->modified = true);
HXDLIN(6509)		this->length++;
HXDLIN(6509)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_PartitionVertex_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur, ::zpp_nape::geom::ZPP_PartitionVertex o){
            	HX_GC_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6513_inlined_insert)
HXLINE(6523)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret;
HXLINE(6525)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(6526)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6532)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(6533)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXLINE(6534)			ret->next = null();
            		}
HXLINE(6541)		ret->elt = o;
HXLINE(6522)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex temp = ret;
HXLINE(6544)		if (hx::IsNull( cur )) {
HXLINE(6545)			temp->next = this->head;
HXLINE(6546)			this->head = temp;
            		}
            		else {
HXLINE(6549)			temp->next = cur->next;
HXLINE(6550)			cur->next = temp;
            		}
HXLINE(6552)		this->pushmod = (this->modified = true);
HXLINE(6553)		this->length++;
HXLINE(6554)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_PartitionVertex_obj,inlined_insert,return )

void ZNPList_ZPP_PartitionVertex_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6557_pop)
HXDLIN(6557)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret = this->head;
HXDLIN(6557)		this->head = ret->next;
HXDLIN(6557)		{
HXDLIN(6557)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = ret;
HXDLIN(6557)			o->elt = null();
HXDLIN(6557)			o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6557)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            		}
HXDLIN(6557)		if (hx::IsNull( this->head )) {
HXDLIN(6557)			this->pushmod = true;
            		}
HXDLIN(6557)		this->modified = true;
HXDLIN(6557)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,pop,(void))

void ZNPList_ZPP_PartitionVertex_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6561_inlined_pop)
HXLINE(6570)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret = this->head;
HXLINE(6571)		this->head = ret->next;
HXLINE(6573)		{
HXLINE(6574)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = ret;
HXLINE(6583)			o->elt = null();
HXLINE(6584)			o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(6585)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            		}
HXLINE(6590)		if (hx::IsNull( this->head )) {
HXLINE(6590)			this->pushmod = true;
            		}
HXLINE(6591)		this->modified = true;
HXLINE(6592)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6595_pop_unsafe)
HXDLIN(6595)		 ::zpp_nape::geom::ZPP_PartitionVertex ret = this->head->elt;
HXDLIN(6595)		this->pop();
HXDLIN(6595)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6599_inlined_pop_unsafe)
HXLINE(6608)		 ::zpp_nape::geom::ZPP_PartitionVertex ret = this->head->elt;
HXLINE(6609)		this->pop();
HXLINE(6610)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_PartitionVertex_obj::remove( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6621_remove)
HXDLIN(6621)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre = null();
HXDLIN(6621)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur = this->head;
HXDLIN(6621)		bool ret = false;
HXDLIN(6621)		while(hx::IsNotNull( cur )){
HXDLIN(6621)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(6621)				{
HXDLIN(6621)					 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex old;
HXDLIN(6621)					 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret1;
HXDLIN(6621)					if (hx::IsNull( pre )) {
HXDLIN(6621)						old = this->head;
HXDLIN(6621)						ret1 = old->next;
HXDLIN(6621)						this->head = ret1;
HXDLIN(6621)						if (hx::IsNull( this->head )) {
HXDLIN(6621)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(6621)						old = pre->next;
HXDLIN(6621)						ret1 = old->next;
HXDLIN(6621)						pre->next = ret1;
HXDLIN(6621)						if (hx::IsNull( ret1 )) {
HXDLIN(6621)							this->pushmod = true;
            						}
            					}
HXDLIN(6621)					{
HXDLIN(6621)						 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = old;
HXDLIN(6621)						o->elt = null();
HXDLIN(6621)						o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6621)						::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            					}
HXDLIN(6621)					this->modified = true;
HXDLIN(6621)					this->length--;
HXDLIN(6621)					this->pushmod = true;
            				}
HXDLIN(6621)				ret = true;
HXDLIN(6621)				goto _hx_goto_13;
            			}
HXDLIN(6621)			pre = cur;
HXDLIN(6621)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,remove,(void))

bool ZNPList_ZPP_PartitionVertex_obj::try_remove( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6623_try_remove)
HXLINE(6632)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre = null();
HXLINE(6633)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur = this->head;
HXLINE(6634)		bool ret = false;
HXLINE(6635)		while(hx::IsNotNull( cur )){
HXLINE(6636)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(6637)				this->erase(pre);
HXLINE(6638)				ret = true;
HXLINE(6639)				goto _hx_goto_15;
            			}
HXLINE(6641)			pre = cur;
HXLINE(6642)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(6644)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,try_remove,return )

void ZNPList_ZPP_PartitionVertex_obj::inlined_remove( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6657_inlined_remove)
HXDLIN(6657)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre = null();
HXDLIN(6657)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur = this->head;
HXDLIN(6657)		bool ret = false;
HXDLIN(6657)		while(hx::IsNotNull( cur )){
HXDLIN(6657)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(6657)				{
HXDLIN(6657)					 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex old;
HXDLIN(6657)					 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret1;
HXDLIN(6657)					if (hx::IsNull( pre )) {
HXDLIN(6657)						old = this->head;
HXDLIN(6657)						ret1 = old->next;
HXDLIN(6657)						this->head = ret1;
HXDLIN(6657)						if (hx::IsNull( this->head )) {
HXDLIN(6657)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(6657)						old = pre->next;
HXDLIN(6657)						ret1 = old->next;
HXDLIN(6657)						pre->next = ret1;
HXDLIN(6657)						if (hx::IsNull( ret1 )) {
HXDLIN(6657)							this->pushmod = true;
            						}
            					}
HXDLIN(6657)					{
HXDLIN(6657)						 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = old;
HXDLIN(6657)						o->elt = null();
HXDLIN(6657)						o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6657)						::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            					}
HXDLIN(6657)					this->modified = true;
HXDLIN(6657)					this->length--;
HXDLIN(6657)					this->pushmod = true;
            				}
HXDLIN(6657)				ret = true;
HXDLIN(6657)				goto _hx_goto_17;
            			}
HXDLIN(6657)			pre = cur;
HXDLIN(6657)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,inlined_remove,(void))

bool ZNPList_ZPP_PartitionVertex_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6661_inlined_try_remove)
HXLINE(6670)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre = null();
HXLINE(6671)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur = this->head;
HXLINE(6672)		bool ret = false;
HXLINE(6673)		while(hx::IsNotNull( cur )){
HXLINE(6674)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(6675)				{
HXLINE(6675)					 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex old;
HXDLIN(6675)					 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret1;
HXDLIN(6675)					if (hx::IsNull( pre )) {
HXLINE(6675)						old = this->head;
HXDLIN(6675)						ret1 = old->next;
HXDLIN(6675)						this->head = ret1;
HXDLIN(6675)						if (hx::IsNull( this->head )) {
HXLINE(6675)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(6675)						old = pre->next;
HXDLIN(6675)						ret1 = old->next;
HXDLIN(6675)						pre->next = ret1;
HXDLIN(6675)						if (hx::IsNull( ret1 )) {
HXLINE(6675)							this->pushmod = true;
            						}
            					}
HXDLIN(6675)					{
HXLINE(6675)						 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = old;
HXDLIN(6675)						o->elt = null();
HXDLIN(6675)						o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6675)						::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            					}
HXDLIN(6675)					this->modified = true;
HXDLIN(6675)					this->length--;
HXDLIN(6675)					this->pushmod = true;
            				}
HXLINE(6676)				ret = true;
HXLINE(6677)				goto _hx_goto_19;
            			}
HXLINE(6679)			pre = cur;
HXLINE(6680)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(6682)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6685_erase)
HXDLIN(6685)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex old;
HXDLIN(6685)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret;
HXDLIN(6685)		if (hx::IsNull( pre )) {
HXDLIN(6685)			old = this->head;
HXDLIN(6685)			ret = old->next;
HXDLIN(6685)			this->head = ret;
HXDLIN(6685)			if (hx::IsNull( this->head )) {
HXDLIN(6685)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(6685)			old = pre->next;
HXDLIN(6685)			ret = old->next;
HXDLIN(6685)			pre->next = ret;
HXDLIN(6685)			if (hx::IsNull( ret )) {
HXDLIN(6685)				this->pushmod = true;
            			}
            		}
HXDLIN(6685)		{
HXDLIN(6685)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = old;
HXDLIN(6685)			o->elt = null();
HXDLIN(6685)			o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6685)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            		}
HXDLIN(6685)		this->modified = true;
HXDLIN(6685)		this->length--;
HXDLIN(6685)		this->pushmod = true;
HXDLIN(6685)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6689_inlined_erase)
HXLINE(6698)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex old;
HXLINE(6699)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret;
HXLINE(6700)		if (hx::IsNull( pre )) {
HXLINE(6701)			old = this->head;
HXLINE(6702)			ret = old->next;
HXLINE(6703)			this->head = ret;
HXLINE(6704)			if (hx::IsNull( this->head )) {
HXLINE(6704)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(6707)			old = pre->next;
HXLINE(6708)			ret = old->next;
HXLINE(6709)			pre->next = ret;
HXLINE(6710)			if (hx::IsNull( ret )) {
HXLINE(6710)				this->pushmod = true;
            			}
            		}
HXLINE(6713)		{
HXLINE(6714)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = old;
HXLINE(6723)			o->elt = null();
HXLINE(6724)			o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(6725)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            		}
HXLINE(6730)		this->modified = true;
HXLINE(6731)		this->length--;
HXLINE(6732)		this->pushmod = true;
HXLINE(6733)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre,int n){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6735_splice)
HXLINE(6736)		while(true){
HXLINE(6736)			bool _hx_tmp;
HXDLIN(6736)			n = (n - 1);
HXDLIN(6736)			if (((n + 1) > 0)) {
HXLINE(6736)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(6736)				_hx_tmp = false;
            			}
HXDLIN(6736)			if (!(_hx_tmp)) {
HXLINE(6736)				goto _hx_goto_23;
            			}
HXDLIN(6736)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(6737)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_PartitionVertex_obj,splice,return )

void ZNPList_ZPP_PartitionVertex_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6740_clear)
HXDLIN(6740)		while(hx::IsNotNull( this->head )){
HXDLIN(6740)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret = this->head;
HXDLIN(6740)			this->head = ret->next;
HXDLIN(6740)			{
HXDLIN(6740)				 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = ret;
HXDLIN(6740)				o->elt = null();
HXDLIN(6740)				o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6740)				::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            			}
HXDLIN(6740)			if (hx::IsNull( this->head )) {
HXDLIN(6740)				this->pushmod = true;
            			}
HXDLIN(6740)			this->modified = true;
HXDLIN(6740)			this->length--;
            		}
HXDLIN(6740)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,clear,(void))

void ZNPList_ZPP_PartitionVertex_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6745_inlined_clear)
HXLINE(6746)		while(hx::IsNotNull( this->head )){
HXLINE(6746)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret = this->head;
HXDLIN(6746)			this->head = ret->next;
HXDLIN(6746)			{
HXLINE(6746)				 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex o = ret;
HXDLIN(6746)				o->elt = null();
HXDLIN(6746)				o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(6746)				::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = o;
            			}
HXDLIN(6746)			if (hx::IsNull( this->head )) {
HXLINE(6746)				this->pushmod = true;
            			}
HXDLIN(6746)			this->modified = true;
HXDLIN(6746)			this->length--;
            		}
HXLINE(6747)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,inlined_clear,(void))

void ZNPList_ZPP_PartitionVertex_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6750_reverse)
HXLINE(6751)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur = this->head;
HXLINE(6752)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex pre = null();
HXLINE(6753)		while(hx::IsNotNull( cur )){
HXLINE(6754)			 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex nx = cur->next;
HXLINE(6755)			cur->next = pre;
HXLINE(6756)			this->head = cur;
HXLINE(6757)			pre = cur;
HXLINE(6758)			cur = nx;
            		}
HXLINE(6760)		this->modified = true;
HXLINE(6761)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,reverse,(void))

bool ZNPList_ZPP_PartitionVertex_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6766_empty)
HXDLIN(6766)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,empty,return )

int ZNPList_ZPP_PartitionVertex_obj::size(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6771_size)
HXDLIN(6771)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,size,return )

bool ZNPList_ZPP_PartitionVertex_obj::has( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6774_has)
HXDLIN(6774)		bool ret;
HXDLIN(6774)		{
HXDLIN(6774)			ret = false;
HXDLIN(6774)			{
HXDLIN(6774)				 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cx_ite = this->head;
HXDLIN(6774)				while(hx::IsNotNull( cx_ite )){
HXDLIN(6774)					 ::zpp_nape::geom::ZPP_PartitionVertex npite = cx_ite->elt;
HXDLIN(6774)					if (hx::IsEq( npite,obj )) {
HXDLIN(6774)						ret = true;
HXDLIN(6774)						goto _hx_goto_33;
            					}
HXDLIN(6774)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(6774)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,has,return )

bool ZNPList_ZPP_PartitionVertex_obj::inlined_has( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6778_inlined_has)
HXLINE(6787)		bool ret;
HXLINE(6788)		{
HXLINE(6789)			ret = false;
HXLINE(6790)			{
HXLINE(6791)				 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cx_ite = this->head;
HXLINE(6792)				while(hx::IsNotNull( cx_ite )){
HXLINE(6793)					 ::zpp_nape::geom::ZPP_PartitionVertex npite = cx_ite->elt;
HXLINE(6795)					if (hx::IsEq( npite,obj )) {
HXLINE(6796)						ret = true;
HXLINE(6797)						goto _hx_goto_35;
            					}
HXLINE(6800)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(6804)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::front(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6809_front)
HXDLIN(6809)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,front,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::back(){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6811_back)
HXLINE(6812)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret = this->head;
HXLINE(6813)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cur = ret;
HXLINE(6814)		while(hx::IsNotNull( cur )){
HXLINE(6815)			ret = cur;
HXLINE(6816)			cur = cur->next;
            		}
HXLINE(6818)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionVertex_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6820_iterator_at)
HXLINE(6829)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ret = this->head;
HXLINE(6830)		while(true){
HXLINE(6830)			bool _hx_tmp;
HXDLIN(6830)			ind = (ind - 1);
HXDLIN(6830)			if (((ind + 1) > 0)) {
HXLINE(6830)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(6830)				_hx_tmp = false;
            			}
HXDLIN(6830)			if (!(_hx_tmp)) {
HXLINE(6830)				goto _hx_goto_40;
            			}
HXDLIN(6830)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(6831)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZNPList_ZPP_PartitionVertex_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_15d0fa4602cba71b_6833_at)
HXLINE(6842)		 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex it = this->iterator_at(ind);
HXLINE(6843)		if (hx::IsNotNull( it )) {
HXLINE(6843)			return it->elt;
            		}
            		else {
HXLINE(6843)			return null();
            		}
HXDLIN(6843)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionVertex_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_PartitionVertex_obj > ZNPList_ZPP_PartitionVertex_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_PartitionVertex_obj > __this = new ZNPList_ZPP_PartitionVertex_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_PartitionVertex_obj > ZNPList_ZPP_PartitionVertex_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_PartitionVertex_obj *__this = (ZNPList_ZPP_PartitionVertex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_PartitionVertex_obj), true, "zpp_nape.util.ZNPList_ZPP_PartitionVertex"));
	*(void **)__this = ZNPList_ZPP_PartitionVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_PartitionVertex_obj::ZNPList_ZPP_PartitionVertex_obj()
{
}

void ZNPList_ZPP_PartitionVertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_PartitionVertex);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_PartitionVertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_PartitionVertex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_PartitionVertex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_PartitionVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_PartitionVertex_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex */ ,(int)offsetof(ZNPList_ZPP_PartitionVertex_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_PartitionVertex_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_PartitionVertex_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_PartitionVertex_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_PartitionVertex_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_PartitionVertex_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_PartitionVertex_obj::__mClass;

void ZNPList_ZPP_PartitionVertex_obj::__register()
{
	ZNPList_ZPP_PartitionVertex_obj _hx_dummy;
	ZNPList_ZPP_PartitionVertex_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_PartitionVertex",59,dd,ff,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_PartitionVertex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_PartitionVertex_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_PartitionVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_PartitionVertex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
