// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_3928_new,"zpp_nape.util.ZNPList_ZPP_Interactor","new",0xed5c9dc0,"zpp_nape.util.ZNPList_ZPP_Interactor.new","zpp_nape/util/Lists.hx",3928,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_3934_begin,"zpp_nape.util.ZNPList_ZPP_Interactor","begin",0x8b34cf89,"zpp_nape.util.ZNPList_ZPP_Interactor.begin","zpp_nape/util/Lists.hx",3934,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_3941_setbegin,"zpp_nape.util.ZNPList_ZPP_Interactor","setbegin",0x8c8f99e7,"zpp_nape.util.ZNPList_ZPP_Interactor.setbegin","zpp_nape/util/Lists.hx",3941,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_3947_add,"zpp_nape.util.ZNPList_ZPP_Interactor","add",0xed52bf81,"zpp_nape.util.ZNPList_ZPP_Interactor.add","zpp_nape/util/Lists.hx",3947,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_3951_inlined_add,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_add",0xa2d379ed,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_add","zpp_nape/util/Lists.hx",3951,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_3997_addAll,"zpp_nape.util.ZNPList_ZPP_Interactor","addAll",0x4724d820,"zpp_nape.util.ZNPList_ZPP_Interactor.addAll","zpp_nape/util/Lists.hx",3997,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4007_insert,"zpp_nape.util.ZNPList_ZPP_Interactor","insert",0x460711d9,"zpp_nape.util.ZNPList_ZPP_Interactor.insert","zpp_nape/util/Lists.hx",4007,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4011_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_insert",0x3999a2ed,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_insert","zpp_nape/util/Lists.hx",4011,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4055_pop,"zpp_nape.util.ZNPList_ZPP_Interactor","pop",0xed5e2af1,"zpp_nape.util.ZNPList_ZPP_Interactor.pop","zpp_nape/util/Lists.hx",4055,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4059_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_pop",0xa2dee55d,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_pop","zpp_nape/util/Lists.hx",4059,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4093_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Interactor","pop_unsafe",0x92321af4,"zpp_nape.util.ZNPList_ZPP_Interactor.pop_unsafe","zpp_nape/util/Lists.hx",4093,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4097_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_pop_unsafe",0x54e4c608,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_pop_unsafe","zpp_nape/util/Lists.hx",4097,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4119_remove,"zpp_nape.util.ZNPList_ZPP_Interactor","remove",0xacb26ae4,"zpp_nape.util.ZNPList_ZPP_Interactor.remove","zpp_nape/util/Lists.hx",4119,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4121_try_remove,"zpp_nape.util.ZNPList_ZPP_Interactor","try_remove",0xa95c50a8,"zpp_nape.util.ZNPList_ZPP_Interactor.try_remove","zpp_nape/util/Lists.hx",4121,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4155_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_remove",0xa044fbf8,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_remove","zpp_nape/util/Lists.hx",4155,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4159_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_try_remove",0x6c0efbbc,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_try_remove","zpp_nape/util/Lists.hx",4159,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4183_erase,"zpp_nape.util.ZNPList_ZPP_Interactor","erase",0x4dfbce46,"zpp_nape.util.ZNPList_ZPP_Interactor.erase","zpp_nape/util/Lists.hx",4183,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4187_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_erase",0xf0f0fbb2,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_erase","zpp_nape/util/Lists.hx",4187,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4233_splice,"zpp_nape.util.ZNPList_ZPP_Interactor","splice",0x67c8541c,"zpp_nape.util.ZNPList_ZPP_Interactor.splice","zpp_nape/util/Lists.hx",4233,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4238_clear,"zpp_nape.util.ZNPList_ZPP_Interactor","clear",0x233a56ed,"zpp_nape.util.ZNPList_ZPP_Interactor.clear","zpp_nape/util/Lists.hx",4238,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4243_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_clear",0xc62f8459,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_clear","zpp_nape/util/Lists.hx",4243,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4248_reverse,"zpp_nape.util.ZNPList_ZPP_Interactor","reverse",0x97673682,"zpp_nape.util.ZNPList_ZPP_Interactor.reverse","zpp_nape/util/Lists.hx",4248,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4264_empty,"zpp_nape.util.ZNPList_ZPP_Interactor","empty",0x4ab91fed,"zpp_nape.util.ZNPList_ZPP_Interactor.empty","zpp_nape/util/Lists.hx",4264,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4269_size,"zpp_nape.util.ZNPList_ZPP_Interactor","size",0xc6fe8761,"zpp_nape.util.ZNPList_ZPP_Interactor.size","zpp_nape/util/Lists.hx",4269,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4272_has,"zpp_nape.util.ZNPList_ZPP_Interactor","has",0xed580cba,"zpp_nape.util.ZNPList_ZPP_Interactor.has","zpp_nape/util/Lists.hx",4272,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4276_inlined_has,"zpp_nape.util.ZNPList_ZPP_Interactor","inlined_has",0xa2d8c726,"zpp_nape.util.ZNPList_ZPP_Interactor.inlined_has","zpp_nape/util/Lists.hx",4276,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4307_front,"zpp_nape.util.ZNPList_ZPP_Interactor","front",0xe16cfe09,"zpp_nape.util.ZNPList_ZPP_Interactor.front","zpp_nape/util/Lists.hx",4307,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4309_back,"zpp_nape.util.ZNPList_ZPP_Interactor","back",0xbbbbc0c7,"zpp_nape.util.ZNPList_ZPP_Interactor.back","zpp_nape/util/Lists.hx",4309,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4318_iterator_at,"zpp_nape.util.ZNPList_ZPP_Interactor","iterator_at",0xa777b744,"zpp_nape.util.ZNPList_ZPP_Interactor.iterator_at","zpp_nape/util/Lists.hx",4318,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_6e6827ba1ad030d5_4331_at,"zpp_nape.util.ZNPList_ZPP_Interactor","at",0x02365393,"zpp_nape.util.ZNPList_ZPP_Interactor.at","zpp_nape/util/Lists.hx",4331,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Interactor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_3928_new)
HXLINE(3938)		this->length = 0;
HXLINE(3937)		this->pushmod = false;
HXLINE(3936)		this->modified = false;
HXLINE(3929)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Interactor_obj::__CreateEmpty() { return new ZNPList_ZPP_Interactor_obj; }

void *ZNPList_ZPP_Interactor_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Interactor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Interactor_obj > _hx_result = new ZNPList_ZPP_Interactor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Interactor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b5f8d12;
}

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_3934_begin)
HXDLIN(3934)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,begin,return )

void ZNPList_ZPP_Interactor_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Interactor i){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_3941_setbegin)
HXLINE(3942)		this->head = i;
HXLINE(3943)		this->modified = true;
HXLINE(3944)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,setbegin,(void))

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::add( ::zpp_nape::phys::ZPP_Interactor o){
            	HX_GC_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_3947_add)
HXDLIN(3947)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret;
HXDLIN(3947)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(3947)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(3947)			ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(3947)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
HXDLIN(3947)			ret->next = null();
            		}
HXDLIN(3947)		ret->elt = o;
HXDLIN(3947)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret;
HXDLIN(3947)		temp->next = this->head;
HXDLIN(3947)		this->head = temp;
HXDLIN(3947)		this->modified = true;
HXDLIN(3947)		this->length++;
HXDLIN(3947)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,add,return )

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::inlined_add( ::zpp_nape::phys::ZPP_Interactor o){
            	HX_GC_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_3951_inlined_add)
HXLINE(3961)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret;
HXLINE(3963)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(3964)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3970)			ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXLINE(3971)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
HXLINE(3972)			ret->next = null();
            		}
HXLINE(3979)		ret->elt = o;
HXLINE(3960)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret;
HXLINE(3982)		temp->next = this->head;
HXLINE(3983)		this->head = temp;
HXLINE(3984)		this->modified = true;
HXLINE(3985)		this->length++;
HXLINE(3986)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,inlined_add,return )

void ZNPList_ZPP_Interactor_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Interactor x){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_3997_addAll)
HXLINE(3998)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = x->head;
HXLINE(3999)		while(hx::IsNotNull( cx_ite )){
HXLINE(4000)			 ::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;
HXLINE(4001)			this->add(i);
HXLINE(4002)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Interactor cur, ::zpp_nape::phys::ZPP_Interactor o){
            	HX_GC_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4007_insert)
HXDLIN(4007)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret;
HXDLIN(4007)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXDLIN(4007)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(4007)			ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4007)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
HXDLIN(4007)			ret->next = null();
            		}
HXDLIN(4007)		ret->elt = o;
HXDLIN(4007)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret;
HXDLIN(4007)		if (hx::IsNull( cur )) {
HXDLIN(4007)			temp->next = this->head;
HXDLIN(4007)			this->head = temp;
            		}
            		else {
HXDLIN(4007)			temp->next = cur->next;
HXDLIN(4007)			cur->next = temp;
            		}
HXDLIN(4007)		this->pushmod = (this->modified = true);
HXDLIN(4007)		this->length++;
HXDLIN(4007)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Interactor_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Interactor cur, ::zpp_nape::phys::ZPP_Interactor o){
            	HX_GC_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4011_inlined_insert)
HXLINE(4021)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret;
HXLINE(4023)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )) {
HXLINE(4024)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4030)			ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXLINE(4031)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
HXLINE(4032)			ret->next = null();
            		}
HXLINE(4039)		ret->elt = o;
HXLINE(4020)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor temp = ret;
HXLINE(4042)		if (hx::IsNull( cur )) {
HXLINE(4043)			temp->next = this->head;
HXLINE(4044)			this->head = temp;
            		}
            		else {
HXLINE(4047)			temp->next = cur->next;
HXLINE(4048)			cur->next = temp;
            		}
HXLINE(4050)		this->pushmod = (this->modified = true);
HXLINE(4051)		this->length++;
HXLINE(4052)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Interactor_obj,inlined_insert,return )

void ZNPList_ZPP_Interactor_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4055_pop)
HXDLIN(4055)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = this->head;
HXDLIN(4055)		this->head = ret->next;
HXDLIN(4055)		{
HXDLIN(4055)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXDLIN(4055)			o->elt = null();
HXDLIN(4055)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4055)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            		}
HXDLIN(4055)		if (hx::IsNull( this->head )) {
HXDLIN(4055)			this->pushmod = true;
            		}
HXDLIN(4055)		this->modified = true;
HXDLIN(4055)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,pop,(void))

void ZNPList_ZPP_Interactor_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4059_inlined_pop)
HXLINE(4068)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = this->head;
HXLINE(4069)		this->head = ret->next;
HXLINE(4071)		{
HXLINE(4072)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXLINE(4081)			o->elt = null();
HXLINE(4082)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXLINE(4083)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            		}
HXLINE(4088)		if (hx::IsNull( this->head )) {
HXLINE(4088)			this->pushmod = true;
            		}
HXLINE(4089)		this->modified = true;
HXLINE(4090)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,inlined_pop,(void))

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4093_pop_unsafe)
HXDLIN(4093)		 ::zpp_nape::phys::ZPP_Interactor ret = this->head->elt;
HXDLIN(4093)		this->pop();
HXDLIN(4093)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,pop_unsafe,return )

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4097_inlined_pop_unsafe)
HXLINE(4106)		 ::zpp_nape::phys::ZPP_Interactor ret = this->head->elt;
HXLINE(4107)		this->pop();
HXLINE(4108)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Interactor_obj::remove( ::zpp_nape::phys::ZPP_Interactor obj){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4119_remove)
HXDLIN(4119)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor pre = null();
HXDLIN(4119)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cur = this->head;
HXDLIN(4119)		bool ret = false;
HXDLIN(4119)		while(hx::IsNotNull( cur )){
HXDLIN(4119)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(4119)				{
HXDLIN(4119)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor old;
HXDLIN(4119)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;
HXDLIN(4119)					if (hx::IsNull( pre )) {
HXDLIN(4119)						old = this->head;
HXDLIN(4119)						ret1 = old->next;
HXDLIN(4119)						this->head = ret1;
HXDLIN(4119)						if (hx::IsNull( this->head )) {
HXDLIN(4119)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(4119)						old = pre->next;
HXDLIN(4119)						ret1 = old->next;
HXDLIN(4119)						pre->next = ret1;
HXDLIN(4119)						if (hx::IsNull( ret1 )) {
HXDLIN(4119)							this->pushmod = true;
            						}
            					}
HXDLIN(4119)					{
HXDLIN(4119)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = old;
HXDLIN(4119)						o->elt = null();
HXDLIN(4119)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4119)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            					}
HXDLIN(4119)					this->modified = true;
HXDLIN(4119)					this->length--;
HXDLIN(4119)					this->pushmod = true;
            				}
HXDLIN(4119)				ret = true;
HXDLIN(4119)				goto _hx_goto_13;
            			}
HXDLIN(4119)			pre = cur;
HXDLIN(4119)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,remove,(void))

bool ZNPList_ZPP_Interactor_obj::try_remove( ::zpp_nape::phys::ZPP_Interactor obj){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4121_try_remove)
HXLINE(4130)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor pre = null();
HXLINE(4131)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cur = this->head;
HXLINE(4132)		bool ret = false;
HXLINE(4133)		while(hx::IsNotNull( cur )){
HXLINE(4134)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4135)				this->erase(pre);
HXLINE(4136)				ret = true;
HXLINE(4137)				goto _hx_goto_15;
            			}
HXLINE(4139)			pre = cur;
HXLINE(4140)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(4142)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,try_remove,return )

void ZNPList_ZPP_Interactor_obj::inlined_remove( ::zpp_nape::phys::ZPP_Interactor obj){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4155_inlined_remove)
HXDLIN(4155)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor pre = null();
HXDLIN(4155)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cur = this->head;
HXDLIN(4155)		bool ret = false;
HXDLIN(4155)		while(hx::IsNotNull( cur )){
HXDLIN(4155)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(4155)				{
HXDLIN(4155)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor old;
HXDLIN(4155)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;
HXDLIN(4155)					if (hx::IsNull( pre )) {
HXDLIN(4155)						old = this->head;
HXDLIN(4155)						ret1 = old->next;
HXDLIN(4155)						this->head = ret1;
HXDLIN(4155)						if (hx::IsNull( this->head )) {
HXDLIN(4155)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(4155)						old = pre->next;
HXDLIN(4155)						ret1 = old->next;
HXDLIN(4155)						pre->next = ret1;
HXDLIN(4155)						if (hx::IsNull( ret1 )) {
HXDLIN(4155)							this->pushmod = true;
            						}
            					}
HXDLIN(4155)					{
HXDLIN(4155)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = old;
HXDLIN(4155)						o->elt = null();
HXDLIN(4155)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4155)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            					}
HXDLIN(4155)					this->modified = true;
HXDLIN(4155)					this->length--;
HXDLIN(4155)					this->pushmod = true;
            				}
HXDLIN(4155)				ret = true;
HXDLIN(4155)				goto _hx_goto_17;
            			}
HXDLIN(4155)			pre = cur;
HXDLIN(4155)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,inlined_remove,(void))

bool ZNPList_ZPP_Interactor_obj::inlined_try_remove( ::zpp_nape::phys::ZPP_Interactor obj){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4159_inlined_try_remove)
HXLINE(4168)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor pre = null();
HXLINE(4169)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cur = this->head;
HXLINE(4170)		bool ret = false;
HXLINE(4171)		while(hx::IsNotNull( cur )){
HXLINE(4172)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4173)				{
HXLINE(4173)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor old;
HXDLIN(4173)					 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;
HXDLIN(4173)					if (hx::IsNull( pre )) {
HXLINE(4173)						old = this->head;
HXDLIN(4173)						ret1 = old->next;
HXDLIN(4173)						this->head = ret1;
HXDLIN(4173)						if (hx::IsNull( this->head )) {
HXLINE(4173)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(4173)						old = pre->next;
HXDLIN(4173)						ret1 = old->next;
HXDLIN(4173)						pre->next = ret1;
HXDLIN(4173)						if (hx::IsNull( ret1 )) {
HXLINE(4173)							this->pushmod = true;
            						}
            					}
HXDLIN(4173)					{
HXLINE(4173)						 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = old;
HXDLIN(4173)						o->elt = null();
HXDLIN(4173)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4173)						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            					}
HXDLIN(4173)					this->modified = true;
HXDLIN(4173)					this->length--;
HXDLIN(4173)					this->pushmod = true;
            				}
HXLINE(4174)				ret = true;
HXLINE(4175)				goto _hx_goto_19;
            			}
HXLINE(4177)			pre = cur;
HXLINE(4178)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(4180)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Interactor pre){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4183_erase)
HXDLIN(4183)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor old;
HXDLIN(4183)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret;
HXDLIN(4183)		if (hx::IsNull( pre )) {
HXDLIN(4183)			old = this->head;
HXDLIN(4183)			ret = old->next;
HXDLIN(4183)			this->head = ret;
HXDLIN(4183)			if (hx::IsNull( this->head )) {
HXDLIN(4183)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(4183)			old = pre->next;
HXDLIN(4183)			ret = old->next;
HXDLIN(4183)			pre->next = ret;
HXDLIN(4183)			if (hx::IsNull( ret )) {
HXDLIN(4183)				this->pushmod = true;
            			}
            		}
HXDLIN(4183)		{
HXDLIN(4183)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = old;
HXDLIN(4183)			o->elt = null();
HXDLIN(4183)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4183)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            		}
HXDLIN(4183)		this->modified = true;
HXDLIN(4183)		this->length--;
HXDLIN(4183)		this->pushmod = true;
HXDLIN(4183)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Interactor pre){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4187_inlined_erase)
HXLINE(4196)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor old;
HXLINE(4197)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret;
HXLINE(4198)		if (hx::IsNull( pre )) {
HXLINE(4199)			old = this->head;
HXLINE(4200)			ret = old->next;
HXLINE(4201)			this->head = ret;
HXLINE(4202)			if (hx::IsNull( this->head )) {
HXLINE(4202)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(4205)			old = pre->next;
HXLINE(4206)			ret = old->next;
HXLINE(4207)			pre->next = ret;
HXLINE(4208)			if (hx::IsNull( ret )) {
HXLINE(4208)				this->pushmod = true;
            			}
            		}
HXLINE(4211)		{
HXLINE(4212)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = old;
HXLINE(4221)			o->elt = null();
HXLINE(4222)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXLINE(4223)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            		}
HXLINE(4228)		this->modified = true;
HXLINE(4229)		this->length--;
HXLINE(4230)		this->pushmod = true;
HXLINE(4231)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Interactor pre,int n){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4233_splice)
HXLINE(4234)		while(true){
HXLINE(4234)			bool _hx_tmp;
HXDLIN(4234)			n = (n - 1);
HXDLIN(4234)			if (((n + 1) > 0)) {
HXLINE(4234)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(4234)				_hx_tmp = false;
            			}
HXDLIN(4234)			if (!(_hx_tmp)) {
HXLINE(4234)				goto _hx_goto_23;
            			}
HXDLIN(4234)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(4235)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Interactor_obj,splice,return )

void ZNPList_ZPP_Interactor_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4238_clear)
HXDLIN(4238)		while(hx::IsNotNull( this->head )){
HXDLIN(4238)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = this->head;
HXDLIN(4238)			this->head = ret->next;
HXDLIN(4238)			{
HXDLIN(4238)				 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXDLIN(4238)				o->elt = null();
HXDLIN(4238)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4238)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            			}
HXDLIN(4238)			if (hx::IsNull( this->head )) {
HXDLIN(4238)				this->pushmod = true;
            			}
HXDLIN(4238)			this->modified = true;
HXDLIN(4238)			this->length--;
            		}
HXDLIN(4238)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,clear,(void))

void ZNPList_ZPP_Interactor_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4243_inlined_clear)
HXLINE(4244)		while(hx::IsNotNull( this->head )){
HXLINE(4244)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = this->head;
HXDLIN(4244)			this->head = ret->next;
HXDLIN(4244)			{
HXLINE(4244)				 ::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;
HXDLIN(4244)				o->elt = null();
HXDLIN(4244)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
HXDLIN(4244)				::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
            			}
HXDLIN(4244)			if (hx::IsNull( this->head )) {
HXLINE(4244)				this->pushmod = true;
            			}
HXDLIN(4244)			this->modified = true;
HXDLIN(4244)			this->length--;
            		}
HXLINE(4245)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,inlined_clear,(void))

void ZNPList_ZPP_Interactor_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4248_reverse)
HXLINE(4249)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cur = this->head;
HXLINE(4250)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor pre = null();
HXLINE(4251)		while(hx::IsNotNull( cur )){
HXLINE(4252)			 ::zpp_nape::util::ZNPNode_ZPP_Interactor nx = cur->next;
HXLINE(4253)			cur->next = pre;
HXLINE(4254)			this->head = cur;
HXLINE(4255)			pre = cur;
HXLINE(4256)			cur = nx;
            		}
HXLINE(4258)		this->modified = true;
HXLINE(4259)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,reverse,(void))

bool ZNPList_ZPP_Interactor_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4264_empty)
HXDLIN(4264)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,empty,return )

int ZNPList_ZPP_Interactor_obj::size(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4269_size)
HXDLIN(4269)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,size,return )

bool ZNPList_ZPP_Interactor_obj::has( ::zpp_nape::phys::ZPP_Interactor obj){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4272_has)
HXDLIN(4272)		bool ret;
HXDLIN(4272)		{
HXDLIN(4272)			ret = false;
HXDLIN(4272)			{
HXDLIN(4272)				 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->head;
HXDLIN(4272)				while(hx::IsNotNull( cx_ite )){
HXDLIN(4272)					 ::zpp_nape::phys::ZPP_Interactor npite = cx_ite->elt;
HXDLIN(4272)					if (hx::IsEq( npite,obj )) {
HXDLIN(4272)						ret = true;
HXDLIN(4272)						goto _hx_goto_33;
            					}
HXDLIN(4272)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(4272)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,has,return )

bool ZNPList_ZPP_Interactor_obj::inlined_has( ::zpp_nape::phys::ZPP_Interactor obj){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4276_inlined_has)
HXLINE(4285)		bool ret;
HXLINE(4286)		{
HXLINE(4287)			ret = false;
HXLINE(4288)			{
HXLINE(4289)				 ::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->head;
HXLINE(4290)				while(hx::IsNotNull( cx_ite )){
HXLINE(4291)					 ::zpp_nape::phys::ZPP_Interactor npite = cx_ite->elt;
HXLINE(4293)					if (hx::IsEq( npite,obj )) {
HXLINE(4294)						ret = true;
HXLINE(4295)						goto _hx_goto_35;
            					}
HXLINE(4298)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(4302)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,inlined_has,return )

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::front(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4307_front)
HXDLIN(4307)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,front,return )

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::back(){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4309_back)
HXLINE(4310)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = this->head;
HXLINE(4311)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor cur = ret;
HXLINE(4312)		while(hx::IsNotNull( cur )){
HXLINE(4313)			ret = cur;
HXLINE(4314)			cur = cur->next;
            		}
HXLINE(4316)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Interactor_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Interactor ZNPList_ZPP_Interactor_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4318_iterator_at)
HXLINE(4327)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor ret = this->head;
HXLINE(4328)		while(true){
HXLINE(4328)			bool _hx_tmp;
HXDLIN(4328)			ind = (ind - 1);
HXDLIN(4328)			if (((ind + 1) > 0)) {
HXLINE(4328)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(4328)				_hx_tmp = false;
            			}
HXDLIN(4328)			if (!(_hx_tmp)) {
HXLINE(4328)				goto _hx_goto_40;
            			}
HXDLIN(4328)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(4329)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,iterator_at,return )

 ::zpp_nape::phys::ZPP_Interactor ZNPList_ZPP_Interactor_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_6e6827ba1ad030d5_4331_at)
HXLINE(4340)		 ::zpp_nape::util::ZNPNode_ZPP_Interactor it = this->iterator_at(ind);
HXLINE(4341)		if (hx::IsNotNull( it )) {
HXLINE(4341)			return it->elt;
            		}
            		else {
HXLINE(4341)			return null();
            		}
HXDLIN(4341)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Interactor_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Interactor_obj > ZNPList_ZPP_Interactor_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Interactor_obj > __this = new ZNPList_ZPP_Interactor_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Interactor_obj > ZNPList_ZPP_Interactor_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Interactor_obj *__this = (ZNPList_ZPP_Interactor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Interactor_obj), true, "zpp_nape.util.ZNPList_ZPP_Interactor"));
	*(void **)__this = ZNPList_ZPP_Interactor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Interactor_obj::ZNPList_ZPP_Interactor_obj()
{
}

void ZNPList_ZPP_Interactor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Interactor);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Interactor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Interactor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Interactor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Interactor >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Interactor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Interactor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_Interactor */ ,(int)offsetof(ZNPList_ZPP_Interactor_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Interactor_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Interactor_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Interactor_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Interactor_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Interactor_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_Interactor_obj::__mClass;

void ZNPList_ZPP_Interactor_obj::__register()
{
	ZNPList_ZPP_Interactor_obj _hx_dummy;
	ZNPList_ZPP_Interactor_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_Interactor",ce,fd,52,40);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Interactor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Interactor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Interactor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Interactor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
