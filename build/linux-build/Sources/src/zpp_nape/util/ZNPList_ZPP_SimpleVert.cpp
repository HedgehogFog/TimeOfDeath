// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <hxinc/zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SimpleVert
#include <hxinc/zpp_nape/util/ZNPList_ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimpleVert
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_SimpleVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8098_new,"zpp_nape.util.ZNPList_ZPP_SimpleVert","new",0xb5465a6a,"zpp_nape.util.ZNPList_ZPP_SimpleVert.new","zpp_nape/util/Lists.hx",8098,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8104_begin,"zpp_nape.util.ZNPList_ZPP_SimpleVert","begin",0x6e868ab3,"zpp_nape.util.ZNPList_ZPP_SimpleVert.begin","zpp_nape/util/Lists.hx",8104,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8111_setbegin,"zpp_nape.util.ZNPList_ZPP_SimpleVert","setbegin",0x8887b4fd,"zpp_nape.util.ZNPList_ZPP_SimpleVert.setbegin","zpp_nape/util/Lists.hx",8111,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8117_add,"zpp_nape.util.ZNPList_ZPP_SimpleVert","add",0xb53c7c2b,"zpp_nape.util.ZNPList_ZPP_SimpleVert.add","zpp_nape/util/Lists.hx",8117,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8121_inlined_add,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_add",0x5928f097,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_add","zpp_nape/util/Lists.hx",8121,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8167_addAll,"zpp_nape.util.ZNPList_ZPP_SimpleVert","addAll",0x4b56e1b6,"zpp_nape.util.ZNPList_ZPP_SimpleVert.addAll","zpp_nape/util/Lists.hx",8167,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8177_insert,"zpp_nape.util.ZNPList_ZPP_SimpleVert","insert",0x4a391b6f,"zpp_nape.util.ZNPList_ZPP_SimpleVert.insert","zpp_nape/util/Lists.hx",8177,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8181_inlined_insert,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_insert",0xd5f03283,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_insert","zpp_nape/util/Lists.hx",8181,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8225_pop,"zpp_nape.util.ZNPList_ZPP_SimpleVert","pop",0xb547e79b,"zpp_nape.util.ZNPList_ZPP_SimpleVert.pop","zpp_nape/util/Lists.hx",8225,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8229_inlined_pop,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_pop",0x59345c07,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_pop","zpp_nape/util/Lists.hx",8229,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8263_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_SimpleVert","pop_unsafe",0x90b7a78a,"zpp_nape.util.ZNPList_ZPP_SimpleVert.pop_unsafe","zpp_nape/util/Lists.hx",8263,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8267_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_pop_unsafe",0x7f49d89e,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_pop_unsafe","zpp_nape/util/Lists.hx",8267,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8289_remove,"zpp_nape.util.ZNPList_ZPP_SimpleVert","remove",0xb0e4747a,"zpp_nape.util.ZNPList_ZPP_SimpleVert.remove","zpp_nape/util/Lists.hx",8289,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8291_try_remove,"zpp_nape.util.ZNPList_ZPP_SimpleVert","try_remove",0xa7e1dd3e,"zpp_nape.util.ZNPList_ZPP_SimpleVert.try_remove","zpp_nape/util/Lists.hx",8291,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8325_inlined_remove,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_remove",0x3c9b8b8e,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_remove","zpp_nape/util/Lists.hx",8325,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8329_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_try_remove",0x96740e52,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_try_remove","zpp_nape/util/Lists.hx",8329,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8353_erase,"zpp_nape.util.ZNPList_ZPP_SimpleVert","erase",0x314d8970,"zpp_nape.util.ZNPList_ZPP_SimpleVert.erase","zpp_nape/util/Lists.hx",8353,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8357_inlined_erase,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_erase",0x0090f0dc,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_erase","zpp_nape/util/Lists.hx",8357,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8403_splice,"zpp_nape.util.ZNPList_ZPP_SimpleVert","splice",0x6bfa5db2,"zpp_nape.util.ZNPList_ZPP_SimpleVert.splice","zpp_nape/util/Lists.hx",8403,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8408_clear,"zpp_nape.util.ZNPList_ZPP_SimpleVert","clear",0x068c1217,"zpp_nape.util.ZNPList_ZPP_SimpleVert.clear","zpp_nape/util/Lists.hx",8408,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8413_inlined_clear,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_clear",0xd5cf7983,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_clear","zpp_nape/util/Lists.hx",8413,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8418_reverse,"zpp_nape.util.ZNPList_ZPP_SimpleVert","reverse",0x3efd902c,"zpp_nape.util.ZNPList_ZPP_SimpleVert.reverse","zpp_nape/util/Lists.hx",8418,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8434_empty,"zpp_nape.util.ZNPList_ZPP_SimpleVert","empty",0x2e0adb17,"zpp_nape.util.ZNPList_ZPP_SimpleVert.empty","zpp_nape/util/Lists.hx",8434,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8439_size,"zpp_nape.util.ZNPList_ZPP_SimpleVert","size",0xeb99df77,"zpp_nape.util.ZNPList_ZPP_SimpleVert.size","zpp_nape/util/Lists.hx",8439,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8442_has,"zpp_nape.util.ZNPList_ZPP_SimpleVert","has",0xb541c964,"zpp_nape.util.ZNPList_ZPP_SimpleVert.has","zpp_nape/util/Lists.hx",8442,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8446_inlined_has,"zpp_nape.util.ZNPList_ZPP_SimpleVert","inlined_has",0x592e3dd0,"zpp_nape.util.ZNPList_ZPP_SimpleVert.inlined_has","zpp_nape/util/Lists.hx",8446,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8477_front,"zpp_nape.util.ZNPList_ZPP_SimpleVert","front",0xc4beb933,"zpp_nape.util.ZNPList_ZPP_SimpleVert.front","zpp_nape/util/Lists.hx",8477,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8479_back,"zpp_nape.util.ZNPList_ZPP_SimpleVert","back",0xe05718dd,"zpp_nape.util.ZNPList_ZPP_SimpleVert.back","zpp_nape/util/Lists.hx",8479,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8488_iterator_at,"zpp_nape.util.ZNPList_ZPP_SimpleVert","iterator_at",0x5dcd2dee,"zpp_nape.util.ZNPList_ZPP_SimpleVert.iterator_at","zpp_nape/util/Lists.hx",8488,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_b9c4e0e7fb05e930_8501_at,"zpp_nape.util.ZNPList_ZPP_SimpleVert","at",0xc2d25a29,"zpp_nape.util.ZNPList_ZPP_SimpleVert.at","zpp_nape/util/Lists.hx",8501,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_SimpleVert_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8098_new)
HXLINE(8108)		this->length = 0;
HXLINE(8107)		this->pushmod = false;
HXLINE(8106)		this->modified = false;
HXLINE(8099)		this->head = null();
            	}

Dynamic ZNPList_ZPP_SimpleVert_obj::__CreateEmpty() { return new ZNPList_ZPP_SimpleVert_obj; }

void *ZNPList_ZPP_SimpleVert_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_SimpleVert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_SimpleVert_obj > _hx_result = new ZNPList_ZPP_SimpleVert_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_SimpleVert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x47241384;
}

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8104_begin)
HXDLIN(8104)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,begin,return )

void ZNPList_ZPP_SimpleVert_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert i){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8111_setbegin)
HXLINE(8112)		this->head = i;
HXLINE(8113)		this->modified = true;
HXLINE(8114)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::add( ::zpp_nape::geom::ZPP_SimpleVert o){
            	HX_GC_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8117_add)
HXDLIN(8117)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret;
HXDLIN(8117)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool )) {
HXDLIN(8117)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(8117)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8117)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXDLIN(8117)			ret->next = null();
            		}
HXDLIN(8117)		ret->elt = o;
HXDLIN(8117)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert temp = ret;
HXDLIN(8117)		temp->next = this->head;
HXDLIN(8117)		this->head = temp;
HXDLIN(8117)		this->modified = true;
HXDLIN(8117)		this->length++;
HXDLIN(8117)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,add,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::inlined_add( ::zpp_nape::geom::ZPP_SimpleVert o){
            	HX_GC_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8121_inlined_add)
HXLINE(8131)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret;
HXLINE(8133)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(8134)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8140)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(8141)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXLINE(8142)			ret->next = null();
            		}
HXLINE(8149)		ret->elt = o;
HXLINE(8130)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert temp = ret;
HXLINE(8152)		temp->next = this->head;
HXLINE(8153)		this->head = temp;
HXLINE(8154)		this->modified = true;
HXLINE(8155)		this->length++;
HXLINE(8156)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,inlined_add,return )

void ZNPList_ZPP_SimpleVert_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_SimpleVert x){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8167_addAll)
HXLINE(8168)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cx_ite = x->head;
HXLINE(8169)		while(hx::IsNotNull( cx_ite )){
HXLINE(8170)			 ::zpp_nape::geom::ZPP_SimpleVert i = cx_ite->elt;
HXLINE(8171)			this->add(i);
HXLINE(8172)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur, ::zpp_nape::geom::ZPP_SimpleVert o){
            	HX_GC_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8177_insert)
HXDLIN(8177)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret;
HXDLIN(8177)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool )) {
HXDLIN(8177)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(8177)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8177)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXDLIN(8177)			ret->next = null();
            		}
HXDLIN(8177)		ret->elt = o;
HXDLIN(8177)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert temp = ret;
HXDLIN(8177)		if (hx::IsNull( cur )) {
HXDLIN(8177)			temp->next = this->head;
HXDLIN(8177)			this->head = temp;
            		}
            		else {
HXDLIN(8177)			temp->next = cur->next;
HXDLIN(8177)			cur->next = temp;
            		}
HXDLIN(8177)		this->pushmod = (this->modified = true);
HXDLIN(8177)		this->length++;
HXDLIN(8177)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SimpleVert_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur, ::zpp_nape::geom::ZPP_SimpleVert o){
            	HX_GC_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8181_inlined_insert)
HXLINE(8191)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret;
HXLINE(8193)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(8194)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8200)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(8201)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXLINE(8202)			ret->next = null();
            		}
HXLINE(8209)		ret->elt = o;
HXLINE(8190)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert temp = ret;
HXLINE(8212)		if (hx::IsNull( cur )) {
HXLINE(8213)			temp->next = this->head;
HXLINE(8214)			this->head = temp;
            		}
            		else {
HXLINE(8217)			temp->next = cur->next;
HXLINE(8218)			cur->next = temp;
            		}
HXLINE(8220)		this->pushmod = (this->modified = true);
HXLINE(8221)		this->length++;
HXLINE(8222)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SimpleVert_obj,inlined_insert,return )

void ZNPList_ZPP_SimpleVert_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8225_pop)
HXDLIN(8225)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret = this->head;
HXDLIN(8225)		this->head = ret->next;
HXDLIN(8225)		{
HXDLIN(8225)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = ret;
HXDLIN(8225)			o->elt = null();
HXDLIN(8225)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8225)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            		}
HXDLIN(8225)		if (hx::IsNull( this->head )) {
HXDLIN(8225)			this->pushmod = true;
            		}
HXDLIN(8225)		this->modified = true;
HXDLIN(8225)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,pop,(void))

void ZNPList_ZPP_SimpleVert_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8229_inlined_pop)
HXLINE(8238)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret = this->head;
HXLINE(8239)		this->head = ret->next;
HXLINE(8241)		{
HXLINE(8242)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = ret;
HXLINE(8251)			o->elt = null();
HXLINE(8252)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(8253)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            		}
HXLINE(8258)		if (hx::IsNull( this->head )) {
HXLINE(8258)			this->pushmod = true;
            		}
HXLINE(8259)		this->modified = true;
HXLINE(8260)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8263_pop_unsafe)
HXDLIN(8263)		 ::zpp_nape::geom::ZPP_SimpleVert ret = this->head->elt;
HXDLIN(8263)		this->pop();
HXDLIN(8263)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8267_inlined_pop_unsafe)
HXLINE(8276)		 ::zpp_nape::geom::ZPP_SimpleVert ret = this->head->elt;
HXLINE(8277)		this->pop();
HXLINE(8278)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_SimpleVert_obj::remove( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8289_remove)
HXDLIN(8289)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre = null();
HXDLIN(8289)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur = this->head;
HXDLIN(8289)		bool ret = false;
HXDLIN(8289)		while(hx::IsNotNull( cur )){
HXDLIN(8289)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(8289)				{
HXDLIN(8289)					 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert old;
HXDLIN(8289)					 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret1;
HXDLIN(8289)					if (hx::IsNull( pre )) {
HXDLIN(8289)						old = this->head;
HXDLIN(8289)						ret1 = old->next;
HXDLIN(8289)						this->head = ret1;
HXDLIN(8289)						if (hx::IsNull( this->head )) {
HXDLIN(8289)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(8289)						old = pre->next;
HXDLIN(8289)						ret1 = old->next;
HXDLIN(8289)						pre->next = ret1;
HXDLIN(8289)						if (hx::IsNull( ret1 )) {
HXDLIN(8289)							this->pushmod = true;
            						}
            					}
HXDLIN(8289)					{
HXDLIN(8289)						 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = old;
HXDLIN(8289)						o->elt = null();
HXDLIN(8289)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8289)						::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            					}
HXDLIN(8289)					this->modified = true;
HXDLIN(8289)					this->length--;
HXDLIN(8289)					this->pushmod = true;
            				}
HXDLIN(8289)				ret = true;
HXDLIN(8289)				goto _hx_goto_13;
            			}
HXDLIN(8289)			pre = cur;
HXDLIN(8289)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,remove,(void))

bool ZNPList_ZPP_SimpleVert_obj::try_remove( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8291_try_remove)
HXLINE(8300)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre = null();
HXLINE(8301)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur = this->head;
HXLINE(8302)		bool ret = false;
HXLINE(8303)		while(hx::IsNotNull( cur )){
HXLINE(8304)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(8305)				this->erase(pre);
HXLINE(8306)				ret = true;
HXLINE(8307)				goto _hx_goto_15;
            			}
HXLINE(8309)			pre = cur;
HXLINE(8310)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(8312)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,try_remove,return )

void ZNPList_ZPP_SimpleVert_obj::inlined_remove( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8325_inlined_remove)
HXDLIN(8325)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre = null();
HXDLIN(8325)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur = this->head;
HXDLIN(8325)		bool ret = false;
HXDLIN(8325)		while(hx::IsNotNull( cur )){
HXDLIN(8325)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(8325)				{
HXDLIN(8325)					 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert old;
HXDLIN(8325)					 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret1;
HXDLIN(8325)					if (hx::IsNull( pre )) {
HXDLIN(8325)						old = this->head;
HXDLIN(8325)						ret1 = old->next;
HXDLIN(8325)						this->head = ret1;
HXDLIN(8325)						if (hx::IsNull( this->head )) {
HXDLIN(8325)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(8325)						old = pre->next;
HXDLIN(8325)						ret1 = old->next;
HXDLIN(8325)						pre->next = ret1;
HXDLIN(8325)						if (hx::IsNull( ret1 )) {
HXDLIN(8325)							this->pushmod = true;
            						}
            					}
HXDLIN(8325)					{
HXDLIN(8325)						 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = old;
HXDLIN(8325)						o->elt = null();
HXDLIN(8325)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8325)						::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            					}
HXDLIN(8325)					this->modified = true;
HXDLIN(8325)					this->length--;
HXDLIN(8325)					this->pushmod = true;
            				}
HXDLIN(8325)				ret = true;
HXDLIN(8325)				goto _hx_goto_17;
            			}
HXDLIN(8325)			pre = cur;
HXDLIN(8325)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,inlined_remove,(void))

bool ZNPList_ZPP_SimpleVert_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8329_inlined_try_remove)
HXLINE(8338)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre = null();
HXLINE(8339)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur = this->head;
HXLINE(8340)		bool ret = false;
HXLINE(8341)		while(hx::IsNotNull( cur )){
HXLINE(8342)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(8343)				{
HXLINE(8343)					 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert old;
HXDLIN(8343)					 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret1;
HXDLIN(8343)					if (hx::IsNull( pre )) {
HXLINE(8343)						old = this->head;
HXDLIN(8343)						ret1 = old->next;
HXDLIN(8343)						this->head = ret1;
HXDLIN(8343)						if (hx::IsNull( this->head )) {
HXLINE(8343)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(8343)						old = pre->next;
HXDLIN(8343)						ret1 = old->next;
HXDLIN(8343)						pre->next = ret1;
HXDLIN(8343)						if (hx::IsNull( ret1 )) {
HXLINE(8343)							this->pushmod = true;
            						}
            					}
HXDLIN(8343)					{
HXLINE(8343)						 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = old;
HXDLIN(8343)						o->elt = null();
HXDLIN(8343)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8343)						::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            					}
HXDLIN(8343)					this->modified = true;
HXDLIN(8343)					this->length--;
HXDLIN(8343)					this->pushmod = true;
            				}
HXLINE(8344)				ret = true;
HXLINE(8345)				goto _hx_goto_19;
            			}
HXLINE(8347)			pre = cur;
HXLINE(8348)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(8350)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8353_erase)
HXDLIN(8353)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert old;
HXDLIN(8353)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret;
HXDLIN(8353)		if (hx::IsNull( pre )) {
HXDLIN(8353)			old = this->head;
HXDLIN(8353)			ret = old->next;
HXDLIN(8353)			this->head = ret;
HXDLIN(8353)			if (hx::IsNull( this->head )) {
HXDLIN(8353)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(8353)			old = pre->next;
HXDLIN(8353)			ret = old->next;
HXDLIN(8353)			pre->next = ret;
HXDLIN(8353)			if (hx::IsNull( ret )) {
HXDLIN(8353)				this->pushmod = true;
            			}
            		}
HXDLIN(8353)		{
HXDLIN(8353)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = old;
HXDLIN(8353)			o->elt = null();
HXDLIN(8353)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8353)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            		}
HXDLIN(8353)		this->modified = true;
HXDLIN(8353)		this->length--;
HXDLIN(8353)		this->pushmod = true;
HXDLIN(8353)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8357_inlined_erase)
HXLINE(8366)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert old;
HXLINE(8367)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret;
HXLINE(8368)		if (hx::IsNull( pre )) {
HXLINE(8369)			old = this->head;
HXLINE(8370)			ret = old->next;
HXLINE(8371)			this->head = ret;
HXLINE(8372)			if (hx::IsNull( this->head )) {
HXLINE(8372)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(8375)			old = pre->next;
HXLINE(8376)			ret = old->next;
HXLINE(8377)			pre->next = ret;
HXLINE(8378)			if (hx::IsNull( ret )) {
HXLINE(8378)				this->pushmod = true;
            			}
            		}
HXLINE(8381)		{
HXLINE(8382)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = old;
HXLINE(8391)			o->elt = null();
HXLINE(8392)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(8393)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            		}
HXLINE(8398)		this->modified = true;
HXLINE(8399)		this->length--;
HXLINE(8400)		this->pushmod = true;
HXLINE(8401)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre,int n){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8403_splice)
HXLINE(8404)		while(true){
HXLINE(8404)			bool _hx_tmp;
HXDLIN(8404)			n = (n - 1);
HXDLIN(8404)			if (((n + 1) > 0)) {
HXLINE(8404)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(8404)				_hx_tmp = false;
            			}
HXDLIN(8404)			if (!(_hx_tmp)) {
HXLINE(8404)				goto _hx_goto_23;
            			}
HXDLIN(8404)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(8405)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SimpleVert_obj,splice,return )

void ZNPList_ZPP_SimpleVert_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8408_clear)
HXDLIN(8408)		while(hx::IsNotNull( this->head )){
HXDLIN(8408)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret = this->head;
HXDLIN(8408)			this->head = ret->next;
HXDLIN(8408)			{
HXDLIN(8408)				 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = ret;
HXDLIN(8408)				o->elt = null();
HXDLIN(8408)				o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8408)				::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            			}
HXDLIN(8408)			if (hx::IsNull( this->head )) {
HXDLIN(8408)				this->pushmod = true;
            			}
HXDLIN(8408)			this->modified = true;
HXDLIN(8408)			this->length--;
            		}
HXDLIN(8408)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,clear,(void))

void ZNPList_ZPP_SimpleVert_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8413_inlined_clear)
HXLINE(8414)		while(hx::IsNotNull( this->head )){
HXLINE(8414)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret = this->head;
HXDLIN(8414)			this->head = ret->next;
HXDLIN(8414)			{
HXLINE(8414)				 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert o = ret;
HXDLIN(8414)				o->elt = null();
HXDLIN(8414)				o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(8414)				::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = o;
            			}
HXDLIN(8414)			if (hx::IsNull( this->head )) {
HXLINE(8414)				this->pushmod = true;
            			}
HXDLIN(8414)			this->modified = true;
HXDLIN(8414)			this->length--;
            		}
HXLINE(8415)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,inlined_clear,(void))

void ZNPList_ZPP_SimpleVert_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8418_reverse)
HXLINE(8419)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur = this->head;
HXLINE(8420)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert pre = null();
HXLINE(8421)		while(hx::IsNotNull( cur )){
HXLINE(8422)			 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert nx = cur->next;
HXLINE(8423)			cur->next = pre;
HXLINE(8424)			this->head = cur;
HXLINE(8425)			pre = cur;
HXLINE(8426)			cur = nx;
            		}
HXLINE(8428)		this->modified = true;
HXLINE(8429)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,reverse,(void))

bool ZNPList_ZPP_SimpleVert_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8434_empty)
HXDLIN(8434)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,empty,return )

int ZNPList_ZPP_SimpleVert_obj::size(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8439_size)
HXDLIN(8439)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,size,return )

bool ZNPList_ZPP_SimpleVert_obj::has( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8442_has)
HXDLIN(8442)		bool ret;
HXDLIN(8442)		{
HXDLIN(8442)			ret = false;
HXDLIN(8442)			{
HXDLIN(8442)				 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cx_ite = this->head;
HXDLIN(8442)				while(hx::IsNotNull( cx_ite )){
HXDLIN(8442)					 ::zpp_nape::geom::ZPP_SimpleVert npite = cx_ite->elt;
HXDLIN(8442)					if (hx::IsEq( npite,obj )) {
HXDLIN(8442)						ret = true;
HXDLIN(8442)						goto _hx_goto_33;
            					}
HXDLIN(8442)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(8442)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,has,return )

bool ZNPList_ZPP_SimpleVert_obj::inlined_has( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8446_inlined_has)
HXLINE(8455)		bool ret;
HXLINE(8456)		{
HXLINE(8457)			ret = false;
HXLINE(8458)			{
HXLINE(8459)				 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cx_ite = this->head;
HXLINE(8460)				while(hx::IsNotNull( cx_ite )){
HXLINE(8461)					 ::zpp_nape::geom::ZPP_SimpleVert npite = cx_ite->elt;
HXLINE(8463)					if (hx::IsEq( npite,obj )) {
HXLINE(8464)						ret = true;
HXLINE(8465)						goto _hx_goto_35;
            					}
HXLINE(8468)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(8472)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::front(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8477_front)
HXDLIN(8477)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,front,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::back(){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8479_back)
HXLINE(8480)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret = this->head;
HXLINE(8481)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert cur = ret;
HXLINE(8482)		while(hx::IsNotNull( cur )){
HXLINE(8483)			ret = cur;
HXLINE(8484)			cur = cur->next;
            		}
HXLINE(8486)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleVert_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8488_iterator_at)
HXLINE(8497)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert ret = this->head;
HXLINE(8498)		while(true){
HXLINE(8498)			bool _hx_tmp;
HXDLIN(8498)			ind = (ind - 1);
HXDLIN(8498)			if (((ind + 1) > 0)) {
HXLINE(8498)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(8498)				_hx_tmp = false;
            			}
HXDLIN(8498)			if (!(_hx_tmp)) {
HXLINE(8498)				goto _hx_goto_40;
            			}
HXDLIN(8498)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(8499)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZNPList_ZPP_SimpleVert_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_b9c4e0e7fb05e930_8501_at)
HXLINE(8510)		 ::zpp_nape::util::ZNPNode_ZPP_SimpleVert it = this->iterator_at(ind);
HXLINE(8511)		if (hx::IsNotNull( it )) {
HXLINE(8511)			return it->elt;
            		}
            		else {
HXLINE(8511)			return null();
            		}
HXDLIN(8511)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleVert_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_SimpleVert_obj > ZNPList_ZPP_SimpleVert_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_SimpleVert_obj > __this = new ZNPList_ZPP_SimpleVert_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_SimpleVert_obj > ZNPList_ZPP_SimpleVert_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_SimpleVert_obj *__this = (ZNPList_ZPP_SimpleVert_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_SimpleVert_obj), true, "zpp_nape.util.ZNPList_ZPP_SimpleVert"));
	*(void **)__this = ZNPList_ZPP_SimpleVert_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_SimpleVert_obj::ZNPList_ZPP_SimpleVert_obj()
{
}

void ZNPList_ZPP_SimpleVert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_SimpleVert);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_SimpleVert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_SimpleVert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_SimpleVert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_SimpleVert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_SimpleVert_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert */ ,(int)offsetof(ZNPList_ZPP_SimpleVert_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_SimpleVert_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_SimpleVert_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_SimpleVert_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_SimpleVert_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_SimpleVert_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_SimpleVert_obj::__mClass;

void ZNPList_ZPP_SimpleVert_obj::__register()
{
	ZNPList_ZPP_SimpleVert_obj _hx_dummy;
	ZNPList_ZPP_SimpleVert_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_SimpleVert",78,9d,62,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_SimpleVert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_SimpleVert_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_SimpleVert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_SimpleVert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
