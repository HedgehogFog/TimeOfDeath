// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2a026260f37e349_1426_new,"zpp_nape.util.ZNPList_ZPP_Body","new",0xb90114c9,"zpp_nape.util.ZNPList_ZPP_Body.new","zpp_nape/util/Lists.hx",1426,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1432_begin,"zpp_nape.util.ZNPList_ZPP_Body","begin",0xe22bdad2,"zpp_nape.util.ZNPList_ZPP_Body.begin","zpp_nape/util/Lists.hx",1432,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1439_setbegin,"zpp_nape.util.ZNPList_ZPP_Body","setbegin",0x1f92023e,"zpp_nape.util.ZNPList_ZPP_Body.setbegin","zpp_nape/util/Lists.hx",1439,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1445_add,"zpp_nape.util.ZNPList_ZPP_Body","add",0xb8f7368a,"zpp_nape.util.ZNPList_ZPP_Body.add","zpp_nape/util/Lists.hx",1445,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1449_inlined_add,"zpp_nape.util.ZNPList_ZPP_Body","inlined_add",0x54c3a1f6,"zpp_nape.util.ZNPList_ZPP_Body.inlined_add","zpp_nape/util/Lists.hx",1449,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1495_addAll,"zpp_nape.util.ZNPList_ZPP_Body","addAll",0x0857acb7,"zpp_nape.util.ZNPList_ZPP_Body.addAll","zpp_nape/util/Lists.hx",1495,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1505_insert,"zpp_nape.util.ZNPList_ZPP_Body","insert",0x0739e670,"zpp_nape.util.ZNPList_ZPP_Body.insert","zpp_nape/util/Lists.hx",1505,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1509_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Body","inlined_insert",0xd4256684,"zpp_nape.util.ZNPList_ZPP_Body.inlined_insert","zpp_nape/util/Lists.hx",1509,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1553_pop,"zpp_nape.util.ZNPList_ZPP_Body","pop",0xb902a1fa,"zpp_nape.util.ZNPList_ZPP_Body.pop","zpp_nape/util/Lists.hx",1553,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1557_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Body","inlined_pop",0x54cf0d66,"zpp_nape.util.ZNPList_ZPP_Body.inlined_pop","zpp_nape/util/Lists.hx",1557,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1591_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Body","pop_unsafe",0xb8e0870b,"zpp_nape.util.ZNPList_ZPP_Body.pop_unsafe","zpp_nape/util/Lists.hx",1591,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1595_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Body","inlined_pop_unsafe",0xa58fa11f,"zpp_nape.util.ZNPList_ZPP_Body.inlined_pop_unsafe","zpp_nape/util/Lists.hx",1595,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1617_remove,"zpp_nape.util.ZNPList_ZPP_Body","remove",0x6de53f7b,"zpp_nape.util.ZNPList_ZPP_Body.remove","zpp_nape/util/Lists.hx",1617,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1619_try_remove,"zpp_nape.util.ZNPList_ZPP_Body","try_remove",0xd00abcbf,"zpp_nape.util.ZNPList_ZPP_Body.try_remove","zpp_nape/util/Lists.hx",1619,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1653_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Body","inlined_remove",0x3ad0bf8f,"zpp_nape.util.ZNPList_ZPP_Body.inlined_remove","zpp_nape/util/Lists.hx",1653,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1657_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Body","inlined_try_remove",0xbcb9d6d3,"zpp_nape.util.ZNPList_ZPP_Body.inlined_try_remove","zpp_nape/util/Lists.hx",1657,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1681_erase,"zpp_nape.util.ZNPList_ZPP_Body","erase",0xa4f2d98f,"zpp_nape.util.ZNPList_ZPP_Body.erase","zpp_nape/util/Lists.hx",1681,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1685_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Body","inlined_erase",0x1d41f7fb,"zpp_nape.util.ZNPList_ZPP_Body.inlined_erase","zpp_nape/util/Lists.hx",1685,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1731_splice,"zpp_nape.util.ZNPList_ZPP_Body","splice",0x28fb28b3,"zpp_nape.util.ZNPList_ZPP_Body.splice","zpp_nape/util/Lists.hx",1731,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1736_clear,"zpp_nape.util.ZNPList_ZPP_Body","clear",0x7a316236,"zpp_nape.util.ZNPList_ZPP_Body.clear","zpp_nape/util/Lists.hx",1736,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1741_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Body","inlined_clear",0xf28080a2,"zpp_nape.util.ZNPList_ZPP_Body.inlined_clear","zpp_nape/util/Lists.hx",1741,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1746_reverse,"zpp_nape.util.ZNPList_ZPP_Body","reverse",0xe2ae660b,"zpp_nape.util.ZNPList_ZPP_Body.reverse","zpp_nape/util/Lists.hx",1746,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1762_empty,"zpp_nape.util.ZNPList_ZPP_Body","empty",0xa1b02b36,"zpp_nape.util.ZNPList_ZPP_Body.empty","zpp_nape/util/Lists.hx",1762,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1767_size,"zpp_nape.util.ZNPList_ZPP_Body","size",0x2b423838,"zpp_nape.util.ZNPList_ZPP_Body.size","zpp_nape/util/Lists.hx",1767,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1770_has,"zpp_nape.util.ZNPList_ZPP_Body","has",0xb8fc83c3,"zpp_nape.util.ZNPList_ZPP_Body.has","zpp_nape/util/Lists.hx",1770,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1774_inlined_has,"zpp_nape.util.ZNPList_ZPP_Body","inlined_has",0x54c8ef2f,"zpp_nape.util.ZNPList_ZPP_Body.inlined_has","zpp_nape/util/Lists.hx",1774,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1805_front,"zpp_nape.util.ZNPList_ZPP_Body","front",0x38640952,"zpp_nape.util.ZNPList_ZPP_Body.front","zpp_nape/util/Lists.hx",1805,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1807_back,"zpp_nape.util.ZNPList_ZPP_Body","back",0x1fff719e,"zpp_nape.util.ZNPList_ZPP_Body.back","zpp_nape/util/Lists.hx",1807,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1816_iterator_at,"zpp_nape.util.ZNPList_ZPP_Body","iterator_at",0x5967df4d,"zpp_nape.util.ZNPList_ZPP_Body.iterator_at","zpp_nape/util/Lists.hx",1816,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a026260f37e349_1829_at,"zpp_nape.util.ZNPList_ZPP_Body","at",0xa86f50aa,"zpp_nape.util.ZNPList_ZPP_Body.at","zpp_nape/util/Lists.hx",1829,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Body_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1426_new)
HXLINE(1436)		this->length = 0;
HXLINE(1435)		this->pushmod = false;
HXLINE(1434)		this->modified = false;
HXLINE(1427)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Body_obj::__CreateEmpty() { return new ZNPList_ZPP_Body_obj; }

void *ZNPList_ZPP_Body_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Body_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Body_obj > _hx_result = new ZNPList_ZPP_Body_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Body_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c512163;
}

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1432_begin)
HXDLIN(1432)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,begin,return )

void ZNPList_ZPP_Body_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Body i){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1439_setbegin)
HXLINE(1440)		this->head = i;
HXLINE(1441)		this->modified = true;
HXLINE(1442)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,setbegin,(void))

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::add( ::zpp_nape::phys::ZPP_Body o){
            	HX_GC_STACKFRAME(&_hx_pos_a2a026260f37e349_1445_add)
HXDLIN(1445)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXDLIN(1445)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXDLIN(1445)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(1445)			ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1445)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
HXDLIN(1445)			ret->next = null();
            		}
HXDLIN(1445)		ret->elt = o;
HXDLIN(1445)		 ::zpp_nape::util::ZNPNode_ZPP_Body temp = ret;
HXDLIN(1445)		temp->next = this->head;
HXDLIN(1445)		this->head = temp;
HXDLIN(1445)		this->modified = true;
HXDLIN(1445)		this->length++;
HXDLIN(1445)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,add,return )

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::inlined_add( ::zpp_nape::phys::ZPP_Body o){
            	HX_GC_STACKFRAME(&_hx_pos_a2a026260f37e349_1449_inlined_add)
HXLINE(1459)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXLINE(1461)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXLINE(1462)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1468)			ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXLINE(1469)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
HXLINE(1470)			ret->next = null();
            		}
HXLINE(1477)		ret->elt = o;
HXLINE(1458)		 ::zpp_nape::util::ZNPNode_ZPP_Body temp = ret;
HXLINE(1480)		temp->next = this->head;
HXLINE(1481)		this->head = temp;
HXLINE(1482)		this->modified = true;
HXLINE(1483)		this->length++;
HXLINE(1484)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,inlined_add,return )

void ZNPList_ZPP_Body_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Body x){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1495_addAll)
HXLINE(1496)		 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->head;
HXLINE(1497)		while(hx::IsNotNull( cx_ite )){
HXLINE(1498)			 ::zpp_nape::phys::ZPP_Body i = cx_ite->elt;
HXLINE(1499)			this->add(i);
HXLINE(1500)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Body cur, ::zpp_nape::phys::ZPP_Body o){
            	HX_GC_STACKFRAME(&_hx_pos_a2a026260f37e349_1505_insert)
HXDLIN(1505)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXDLIN(1505)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXDLIN(1505)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(1505)			ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1505)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
HXDLIN(1505)			ret->next = null();
            		}
HXDLIN(1505)		ret->elt = o;
HXDLIN(1505)		 ::zpp_nape::util::ZNPNode_ZPP_Body temp = ret;
HXDLIN(1505)		if (hx::IsNull( cur )) {
HXDLIN(1505)			temp->next = this->head;
HXDLIN(1505)			this->head = temp;
            		}
            		else {
HXDLIN(1505)			temp->next = cur->next;
HXDLIN(1505)			cur->next = temp;
            		}
HXDLIN(1505)		this->pushmod = (this->modified = true);
HXDLIN(1505)		this->length++;
HXDLIN(1505)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Body_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Body cur, ::zpp_nape::phys::ZPP_Body o){
            	HX_GC_STACKFRAME(&_hx_pos_a2a026260f37e349_1509_inlined_insert)
HXLINE(1519)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXLINE(1521)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )) {
HXLINE(1522)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1528)			ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXLINE(1529)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
HXLINE(1530)			ret->next = null();
            		}
HXLINE(1537)		ret->elt = o;
HXLINE(1518)		 ::zpp_nape::util::ZNPNode_ZPP_Body temp = ret;
HXLINE(1540)		if (hx::IsNull( cur )) {
HXLINE(1541)			temp->next = this->head;
HXLINE(1542)			this->head = temp;
            		}
            		else {
HXLINE(1545)			temp->next = cur->next;
HXLINE(1546)			cur->next = temp;
            		}
HXLINE(1548)		this->pushmod = (this->modified = true);
HXLINE(1549)		this->length++;
HXLINE(1550)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Body_obj,inlined_insert,return )

void ZNPList_ZPP_Body_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1553_pop)
HXDLIN(1553)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret = this->head;
HXDLIN(1553)		this->head = ret->next;
HXDLIN(1553)		{
HXDLIN(1553)			 ::zpp_nape::util::ZNPNode_ZPP_Body o = ret;
HXDLIN(1553)			o->elt = null();
HXDLIN(1553)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1553)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            		}
HXDLIN(1553)		if (hx::IsNull( this->head )) {
HXDLIN(1553)			this->pushmod = true;
            		}
HXDLIN(1553)		this->modified = true;
HXDLIN(1553)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,pop,(void))

void ZNPList_ZPP_Body_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1557_inlined_pop)
HXLINE(1566)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret = this->head;
HXLINE(1567)		this->head = ret->next;
HXLINE(1569)		{
HXLINE(1570)			 ::zpp_nape::util::ZNPNode_ZPP_Body o = ret;
HXLINE(1579)			o->elt = null();
HXLINE(1580)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXLINE(1581)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            		}
HXLINE(1586)		if (hx::IsNull( this->head )) {
HXLINE(1586)			this->pushmod = true;
            		}
HXLINE(1587)		this->modified = true;
HXLINE(1588)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,inlined_pop,(void))

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1591_pop_unsafe)
HXDLIN(1591)		 ::zpp_nape::phys::ZPP_Body ret = this->head->elt;
HXDLIN(1591)		this->pop();
HXDLIN(1591)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,pop_unsafe,return )

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1595_inlined_pop_unsafe)
HXLINE(1604)		 ::zpp_nape::phys::ZPP_Body ret = this->head->elt;
HXLINE(1605)		this->pop();
HXLINE(1606)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Body_obj::remove( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1617_remove)
HXDLIN(1617)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXDLIN(1617)		 ::zpp_nape::util::ZNPNode_ZPP_Body cur = this->head;
HXDLIN(1617)		bool ret = false;
HXDLIN(1617)		while(hx::IsNotNull( cur )){
HXDLIN(1617)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(1617)				{
HXDLIN(1617)					 ::zpp_nape::util::ZNPNode_ZPP_Body old;
HXDLIN(1617)					 ::zpp_nape::util::ZNPNode_ZPP_Body ret1;
HXDLIN(1617)					if (hx::IsNull( pre )) {
HXDLIN(1617)						old = this->head;
HXDLIN(1617)						ret1 = old->next;
HXDLIN(1617)						this->head = ret1;
HXDLIN(1617)						if (hx::IsNull( this->head )) {
HXDLIN(1617)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(1617)						old = pre->next;
HXDLIN(1617)						ret1 = old->next;
HXDLIN(1617)						pre->next = ret1;
HXDLIN(1617)						if (hx::IsNull( ret1 )) {
HXDLIN(1617)							this->pushmod = true;
            						}
            					}
HXDLIN(1617)					{
HXDLIN(1617)						 ::zpp_nape::util::ZNPNode_ZPP_Body o = old;
HXDLIN(1617)						o->elt = null();
HXDLIN(1617)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1617)						::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            					}
HXDLIN(1617)					this->modified = true;
HXDLIN(1617)					this->length--;
HXDLIN(1617)					this->pushmod = true;
            				}
HXDLIN(1617)				ret = true;
HXDLIN(1617)				goto _hx_goto_13;
            			}
HXDLIN(1617)			pre = cur;
HXDLIN(1617)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,remove,(void))

bool ZNPList_ZPP_Body_obj::try_remove( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1619_try_remove)
HXLINE(1628)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXLINE(1629)		 ::zpp_nape::util::ZNPNode_ZPP_Body cur = this->head;
HXLINE(1630)		bool ret = false;
HXLINE(1631)		while(hx::IsNotNull( cur )){
HXLINE(1632)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(1633)				this->erase(pre);
HXLINE(1634)				ret = true;
HXLINE(1635)				goto _hx_goto_15;
            			}
HXLINE(1637)			pre = cur;
HXLINE(1638)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(1640)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,try_remove,return )

void ZNPList_ZPP_Body_obj::inlined_remove( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1653_inlined_remove)
HXDLIN(1653)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXDLIN(1653)		 ::zpp_nape::util::ZNPNode_ZPP_Body cur = this->head;
HXDLIN(1653)		bool ret = false;
HXDLIN(1653)		while(hx::IsNotNull( cur )){
HXDLIN(1653)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(1653)				{
HXDLIN(1653)					 ::zpp_nape::util::ZNPNode_ZPP_Body old;
HXDLIN(1653)					 ::zpp_nape::util::ZNPNode_ZPP_Body ret1;
HXDLIN(1653)					if (hx::IsNull( pre )) {
HXDLIN(1653)						old = this->head;
HXDLIN(1653)						ret1 = old->next;
HXDLIN(1653)						this->head = ret1;
HXDLIN(1653)						if (hx::IsNull( this->head )) {
HXDLIN(1653)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(1653)						old = pre->next;
HXDLIN(1653)						ret1 = old->next;
HXDLIN(1653)						pre->next = ret1;
HXDLIN(1653)						if (hx::IsNull( ret1 )) {
HXDLIN(1653)							this->pushmod = true;
            						}
            					}
HXDLIN(1653)					{
HXDLIN(1653)						 ::zpp_nape::util::ZNPNode_ZPP_Body o = old;
HXDLIN(1653)						o->elt = null();
HXDLIN(1653)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1653)						::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            					}
HXDLIN(1653)					this->modified = true;
HXDLIN(1653)					this->length--;
HXDLIN(1653)					this->pushmod = true;
            				}
HXDLIN(1653)				ret = true;
HXDLIN(1653)				goto _hx_goto_17;
            			}
HXDLIN(1653)			pre = cur;
HXDLIN(1653)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,inlined_remove,(void))

bool ZNPList_ZPP_Body_obj::inlined_try_remove( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1657_inlined_try_remove)
HXLINE(1666)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXLINE(1667)		 ::zpp_nape::util::ZNPNode_ZPP_Body cur = this->head;
HXLINE(1668)		bool ret = false;
HXLINE(1669)		while(hx::IsNotNull( cur )){
HXLINE(1670)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(1671)				{
HXLINE(1671)					 ::zpp_nape::util::ZNPNode_ZPP_Body old;
HXDLIN(1671)					 ::zpp_nape::util::ZNPNode_ZPP_Body ret1;
HXDLIN(1671)					if (hx::IsNull( pre )) {
HXLINE(1671)						old = this->head;
HXDLIN(1671)						ret1 = old->next;
HXDLIN(1671)						this->head = ret1;
HXDLIN(1671)						if (hx::IsNull( this->head )) {
HXLINE(1671)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(1671)						old = pre->next;
HXDLIN(1671)						ret1 = old->next;
HXDLIN(1671)						pre->next = ret1;
HXDLIN(1671)						if (hx::IsNull( ret1 )) {
HXLINE(1671)							this->pushmod = true;
            						}
            					}
HXDLIN(1671)					{
HXLINE(1671)						 ::zpp_nape::util::ZNPNode_ZPP_Body o = old;
HXDLIN(1671)						o->elt = null();
HXDLIN(1671)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1671)						::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            					}
HXDLIN(1671)					this->modified = true;
HXDLIN(1671)					this->length--;
HXDLIN(1671)					this->pushmod = true;
            				}
HXLINE(1672)				ret = true;
HXLINE(1673)				goto _hx_goto_19;
            			}
HXLINE(1675)			pre = cur;
HXLINE(1676)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(1678)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Body pre){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1681_erase)
HXDLIN(1681)		 ::zpp_nape::util::ZNPNode_ZPP_Body old;
HXDLIN(1681)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXDLIN(1681)		if (hx::IsNull( pre )) {
HXDLIN(1681)			old = this->head;
HXDLIN(1681)			ret = old->next;
HXDLIN(1681)			this->head = ret;
HXDLIN(1681)			if (hx::IsNull( this->head )) {
HXDLIN(1681)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(1681)			old = pre->next;
HXDLIN(1681)			ret = old->next;
HXDLIN(1681)			pre->next = ret;
HXDLIN(1681)			if (hx::IsNull( ret )) {
HXDLIN(1681)				this->pushmod = true;
            			}
            		}
HXDLIN(1681)		{
HXDLIN(1681)			 ::zpp_nape::util::ZNPNode_ZPP_Body o = old;
HXDLIN(1681)			o->elt = null();
HXDLIN(1681)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1681)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            		}
HXDLIN(1681)		this->modified = true;
HXDLIN(1681)		this->length--;
HXDLIN(1681)		this->pushmod = true;
HXDLIN(1681)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Body pre){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1685_inlined_erase)
HXLINE(1694)		 ::zpp_nape::util::ZNPNode_ZPP_Body old;
HXLINE(1695)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret;
HXLINE(1696)		if (hx::IsNull( pre )) {
HXLINE(1697)			old = this->head;
HXLINE(1698)			ret = old->next;
HXLINE(1699)			this->head = ret;
HXLINE(1700)			if (hx::IsNull( this->head )) {
HXLINE(1700)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(1703)			old = pre->next;
HXLINE(1704)			ret = old->next;
HXLINE(1705)			pre->next = ret;
HXLINE(1706)			if (hx::IsNull( ret )) {
HXLINE(1706)				this->pushmod = true;
            			}
            		}
HXLINE(1709)		{
HXLINE(1710)			 ::zpp_nape::util::ZNPNode_ZPP_Body o = old;
HXLINE(1719)			o->elt = null();
HXLINE(1720)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXLINE(1721)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            		}
HXLINE(1726)		this->modified = true;
HXLINE(1727)		this->length--;
HXLINE(1728)		this->pushmod = true;
HXLINE(1729)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Body pre,int n){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1731_splice)
HXLINE(1732)		while(true){
HXLINE(1732)			bool _hx_tmp;
HXDLIN(1732)			n = (n - 1);
HXDLIN(1732)			if (((n + 1) > 0)) {
HXLINE(1732)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(1732)				_hx_tmp = false;
            			}
HXDLIN(1732)			if (!(_hx_tmp)) {
HXLINE(1732)				goto _hx_goto_23;
            			}
HXDLIN(1732)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(1733)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Body_obj,splice,return )

void ZNPList_ZPP_Body_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1736_clear)
HXDLIN(1736)		while(hx::IsNotNull( this->head )){
HXDLIN(1736)			 ::zpp_nape::util::ZNPNode_ZPP_Body ret = this->head;
HXDLIN(1736)			this->head = ret->next;
HXDLIN(1736)			{
HXDLIN(1736)				 ::zpp_nape::util::ZNPNode_ZPP_Body o = ret;
HXDLIN(1736)				o->elt = null();
HXDLIN(1736)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1736)				::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            			}
HXDLIN(1736)			if (hx::IsNull( this->head )) {
HXDLIN(1736)				this->pushmod = true;
            			}
HXDLIN(1736)			this->modified = true;
HXDLIN(1736)			this->length--;
            		}
HXDLIN(1736)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,clear,(void))

void ZNPList_ZPP_Body_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1741_inlined_clear)
HXLINE(1742)		while(hx::IsNotNull( this->head )){
HXLINE(1742)			 ::zpp_nape::util::ZNPNode_ZPP_Body ret = this->head;
HXDLIN(1742)			this->head = ret->next;
HXDLIN(1742)			{
HXLINE(1742)				 ::zpp_nape::util::ZNPNode_ZPP_Body o = ret;
HXDLIN(1742)				o->elt = null();
HXDLIN(1742)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
HXDLIN(1742)				::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
            			}
HXDLIN(1742)			if (hx::IsNull( this->head )) {
HXLINE(1742)				this->pushmod = true;
            			}
HXDLIN(1742)			this->modified = true;
HXDLIN(1742)			this->length--;
            		}
HXLINE(1743)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,inlined_clear,(void))

void ZNPList_ZPP_Body_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1746_reverse)
HXLINE(1747)		 ::zpp_nape::util::ZNPNode_ZPP_Body cur = this->head;
HXLINE(1748)		 ::zpp_nape::util::ZNPNode_ZPP_Body pre = null();
HXLINE(1749)		while(hx::IsNotNull( cur )){
HXLINE(1750)			 ::zpp_nape::util::ZNPNode_ZPP_Body nx = cur->next;
HXLINE(1751)			cur->next = pre;
HXLINE(1752)			this->head = cur;
HXLINE(1753)			pre = cur;
HXLINE(1754)			cur = nx;
            		}
HXLINE(1756)		this->modified = true;
HXLINE(1757)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,reverse,(void))

bool ZNPList_ZPP_Body_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1762_empty)
HXDLIN(1762)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,empty,return )

int ZNPList_ZPP_Body_obj::size(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1767_size)
HXDLIN(1767)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,size,return )

bool ZNPList_ZPP_Body_obj::has( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1770_has)
HXDLIN(1770)		bool ret;
HXDLIN(1770)		{
HXDLIN(1770)			ret = false;
HXDLIN(1770)			{
HXDLIN(1770)				 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->head;
HXDLIN(1770)				while(hx::IsNotNull( cx_ite )){
HXDLIN(1770)					 ::zpp_nape::phys::ZPP_Body npite = cx_ite->elt;
HXDLIN(1770)					if (hx::IsEq( npite,obj )) {
HXDLIN(1770)						ret = true;
HXDLIN(1770)						goto _hx_goto_33;
            					}
HXDLIN(1770)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(1770)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,has,return )

bool ZNPList_ZPP_Body_obj::inlined_has( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1774_inlined_has)
HXLINE(1783)		bool ret;
HXLINE(1784)		{
HXLINE(1785)			ret = false;
HXLINE(1786)			{
HXLINE(1787)				 ::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->head;
HXLINE(1788)				while(hx::IsNotNull( cx_ite )){
HXLINE(1789)					 ::zpp_nape::phys::ZPP_Body npite = cx_ite->elt;
HXLINE(1791)					if (hx::IsEq( npite,obj )) {
HXLINE(1792)						ret = true;
HXLINE(1793)						goto _hx_goto_35;
            					}
HXLINE(1796)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(1800)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,inlined_has,return )

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::front(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1805_front)
HXDLIN(1805)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,front,return )

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::back(){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1807_back)
HXLINE(1808)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret = this->head;
HXLINE(1809)		 ::zpp_nape::util::ZNPNode_ZPP_Body cur = ret;
HXLINE(1810)		while(hx::IsNotNull( cur )){
HXLINE(1811)			ret = cur;
HXLINE(1812)			cur = cur->next;
            		}
HXLINE(1814)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Body_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Body ZNPList_ZPP_Body_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1816_iterator_at)
HXLINE(1825)		 ::zpp_nape::util::ZNPNode_ZPP_Body ret = this->head;
HXLINE(1826)		while(true){
HXLINE(1826)			bool _hx_tmp;
HXDLIN(1826)			ind = (ind - 1);
HXDLIN(1826)			if (((ind + 1) > 0)) {
HXLINE(1826)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(1826)				_hx_tmp = false;
            			}
HXDLIN(1826)			if (!(_hx_tmp)) {
HXLINE(1826)				goto _hx_goto_40;
            			}
HXDLIN(1826)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(1827)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,iterator_at,return )

 ::zpp_nape::phys::ZPP_Body ZNPList_ZPP_Body_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_a2a026260f37e349_1829_at)
HXLINE(1838)		 ::zpp_nape::util::ZNPNode_ZPP_Body it = this->iterator_at(ind);
HXLINE(1839)		if (hx::IsNotNull( it )) {
HXLINE(1839)			return it->elt;
            		}
            		else {
HXLINE(1839)			return null();
            		}
HXDLIN(1839)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Body_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Body_obj > ZNPList_ZPP_Body_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Body_obj > __this = new ZNPList_ZPP_Body_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Body_obj > ZNPList_ZPP_Body_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Body_obj *__this = (ZNPList_ZPP_Body_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Body_obj), true, "zpp_nape.util.ZNPList_ZPP_Body"));
	*(void **)__this = ZNPList_ZPP_Body_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Body_obj::ZNPList_ZPP_Body_obj()
{
}

void ZNPList_ZPP_Body_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Body);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Body_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Body_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Body_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Body >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Body_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Body_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_Body */ ,(int)offsetof(ZNPList_ZPP_Body_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Body_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Body_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Body_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Body_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Body_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_Body_obj::__mClass;

void ZNPList_ZPP_Body_obj::__register()
{
	ZNPList_ZPP_Body_obj _hx_dummy;
	ZNPList_ZPP_Body_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_Body",57,fc,3a,63);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Body_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Body_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Body_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Body_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
