// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11017_new,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","new",0xac2b8ca6,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.new","zpp_nape/util/Lists.hx",11017,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11023_begin,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","begin",0xcec9c3ef,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.begin","zpp_nape/util/Lists.hx",11023,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11030_setbegin,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","setbegin",0x48f6e941,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.setbegin","zpp_nape/util/Lists.hx",11030,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11036_add,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","add",0xac21ae67,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.add","zpp_nape/util/Lists.hx",11036,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11040_inlined_add,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_add",0xd424bed3,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_add","zpp_nape/util/Lists.hx",11040,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11086_addAll,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","addAll",0x25e5bcfa,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.addAll","zpp_nape/util/Lists.hx",11086,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11096_insert,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","insert",0x24c7f6b3,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.insert","zpp_nape/util/Lists.hx",11096,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11100_inlined_insert,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_insert",0x7b71f1c7,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_insert","zpp_nape/util/Lists.hx",11100,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11144_pop,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","pop",0xac2d19d7,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.pop","zpp_nape/util/Lists.hx",11144,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11148_inlined_pop,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_pop",0xd4302a43,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_pop","zpp_nape/util/Lists.hx",11148,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11182_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","pop_unsafe",0xb28f74ce,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.pop_unsafe","zpp_nape/util/Lists.hx",11182,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11186_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_pop_unsafe",0x295689e2,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_pop_unsafe","zpp_nape/util/Lists.hx",11186,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11208_remove,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","remove",0x8b734fbe,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.remove","zpp_nape/util/Lists.hx",11208,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11210_try_remove,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","try_remove",0xc9b9aa82,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.try_remove","zpp_nape/util/Lists.hx",11210,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11244_inlined_remove,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_remove",0xe21d4ad2,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_remove","zpp_nape/util/Lists.hx",11244,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11248_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_try_remove",0x4080bf96,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_try_remove","zpp_nape/util/Lists.hx",11248,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11272_erase,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","erase",0x9190c2ac,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.erase","zpp_nape/util/Lists.hx",11272,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11276_inlined_erase,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_erase",0x0cc9c618,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_erase","zpp_nape/util/Lists.hx",11276,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11322_splice,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","splice",0x468938f6,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.splice","zpp_nape/util/Lists.hx",11322,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11327_clear,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","clear",0x66cf4b53,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.clear","zpp_nape/util/Lists.hx",11327,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11332_inlined_clear,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_clear",0xe2084ebf,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_clear","zpp_nape/util/Lists.hx",11332,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11337_reverse,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","reverse",0xa16e9068,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.reverse","zpp_nape/util/Lists.hx",11337,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11353_empty,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","empty",0x8e4e1453,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.empty","zpp_nape/util/Lists.hx",11353,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11358_size,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","size",0xfd40a1bb,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.size","zpp_nape/util/Lists.hx",11358,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11361_has,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","has",0xac26fba0,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.has","zpp_nape/util/Lists.hx",11361,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11365_inlined_has,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","inlined_has",0xd42a0c0c,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.inlined_has","zpp_nape/util/Lists.hx",11365,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11396_front,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","front",0x2501f26f,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.front","zpp_nape/util/Lists.hx",11396,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11398_back,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","back",0xf1fddb21,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.back","zpp_nape/util/Lists.hx",11398,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11407_iterator_at,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","iterator_at",0xd8c8fc2a,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.iterator_at","zpp_nape/util/Lists.hx",11407,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_d02f8a40928bcfe7_11420_at,"zpp_nape.util.ZNPList_ZPP_FluidArbiter","at",0x8df9436d,"zpp_nape.util.ZNPList_ZPP_FluidArbiter.at","zpp_nape/util/Lists.hx",11420,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_FluidArbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11017_new)
HXLINE(11027)		this->length = 0;
HXLINE(11026)		this->pushmod = false;
HXLINE(11025)		this->modified = false;
HXLINE(11018)		this->head = null();
            	}

Dynamic ZNPList_ZPP_FluidArbiter_obj::__CreateEmpty() { return new ZNPList_ZPP_FluidArbiter_obj; }

void *ZNPList_ZPP_FluidArbiter_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_FluidArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_FluidArbiter_obj > _hx_result = new ZNPList_ZPP_FluidArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_FluidArbiter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3bfce9f8;
}

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11023_begin)
HXDLIN(11023)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,begin,return )

void ZNPList_ZPP_FluidArbiter_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter i){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11030_setbegin)
HXLINE(11031)		this->head = i;
HXLINE(11032)		this->modified = true;
HXLINE(11033)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,setbegin,(void))

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::add( ::zpp_nape::dynamics::ZPP_FluidArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11036_add)
HXDLIN(11036)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;
HXDLIN(11036)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXDLIN(11036)			ret =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(11036)			ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11036)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
HXDLIN(11036)			ret->next = null();
            		}
HXDLIN(11036)		ret->elt = o;
HXDLIN(11036)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = ret;
HXDLIN(11036)		temp->next = this->head;
HXDLIN(11036)		this->head = temp;
HXDLIN(11036)		this->modified = true;
HXDLIN(11036)		this->length++;
HXDLIN(11036)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,add,return )

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::inlined_add( ::zpp_nape::dynamics::ZPP_FluidArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11040_inlined_add)
HXLINE(11050)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;
HXLINE(11052)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(11053)			ret =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11059)			ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(11060)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
HXLINE(11061)			ret->next = null();
            		}
HXLINE(11068)		ret->elt = o;
HXLINE(11049)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = ret;
HXLINE(11071)		temp->next = this->head;
HXLINE(11072)		this->head = temp;
HXLINE(11073)		this->modified = true;
HXLINE(11074)		this->length++;
HXLINE(11075)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,inlined_add,return )

void ZNPList_ZPP_FluidArbiter_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_FluidArbiter x){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11086_addAll)
HXLINE(11087)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = x->head;
HXLINE(11088)		while(hx::IsNotNull( cx_ite )){
HXLINE(11089)			 ::zpp_nape::dynamics::ZPP_FluidArbiter i = cx_ite->elt;
HXLINE(11090)			this->add(i);
HXLINE(11091)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur, ::zpp_nape::dynamics::ZPP_FluidArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11096_insert)
HXDLIN(11096)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;
HXDLIN(11096)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXDLIN(11096)			ret =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(11096)			ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11096)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
HXDLIN(11096)			ret->next = null();
            		}
HXDLIN(11096)		ret->elt = o;
HXDLIN(11096)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = ret;
HXDLIN(11096)		if (hx::IsNull( cur )) {
HXDLIN(11096)			temp->next = this->head;
HXDLIN(11096)			this->head = temp;
            		}
            		else {
HXDLIN(11096)			temp->next = cur->next;
HXDLIN(11096)			cur->next = temp;
            		}
HXDLIN(11096)		this->pushmod = (this->modified = true);
HXDLIN(11096)		this->length++;
HXDLIN(11096)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_FluidArbiter_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur, ::zpp_nape::dynamics::ZPP_FluidArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11100_inlined_insert)
HXLINE(11110)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;
HXLINE(11112)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )) {
HXLINE(11113)			ret =  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11119)			ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(11120)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
HXLINE(11121)			ret->next = null();
            		}
HXLINE(11128)		ret->elt = o;
HXLINE(11109)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp = ret;
HXLINE(11131)		if (hx::IsNull( cur )) {
HXLINE(11132)			temp->next = this->head;
HXLINE(11133)			this->head = temp;
            		}
            		else {
HXLINE(11136)			temp->next = cur->next;
HXLINE(11137)			cur->next = temp;
            		}
HXLINE(11139)		this->pushmod = (this->modified = true);
HXLINE(11140)		this->length++;
HXLINE(11141)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_FluidArbiter_obj,inlined_insert,return )

void ZNPList_ZPP_FluidArbiter_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11144_pop)
HXDLIN(11144)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret = this->head;
HXDLIN(11144)		this->head = ret->next;
HXDLIN(11144)		{
HXDLIN(11144)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = ret;
HXDLIN(11144)			o->elt = null();
HXDLIN(11144)			o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11144)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            		}
HXDLIN(11144)		if (hx::IsNull( this->head )) {
HXDLIN(11144)			this->pushmod = true;
            		}
HXDLIN(11144)		this->modified = true;
HXDLIN(11144)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,pop,(void))

void ZNPList_ZPP_FluidArbiter_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11148_inlined_pop)
HXLINE(11157)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret = this->head;
HXLINE(11158)		this->head = ret->next;
HXLINE(11160)		{
HXLINE(11161)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = ret;
HXLINE(11170)			o->elt = null();
HXLINE(11171)			o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(11172)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            		}
HXLINE(11177)		if (hx::IsNull( this->head )) {
HXLINE(11177)			this->pushmod = true;
            		}
HXLINE(11178)		this->modified = true;
HXLINE(11179)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,inlined_pop,(void))

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11182_pop_unsafe)
HXDLIN(11182)		 ::zpp_nape::dynamics::ZPP_FluidArbiter ret = this->head->elt;
HXDLIN(11182)		this->pop();
HXDLIN(11182)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,pop_unsafe,return )

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11186_inlined_pop_unsafe)
HXLINE(11195)		 ::zpp_nape::dynamics::ZPP_FluidArbiter ret = this->head->elt;
HXLINE(11196)		this->pop();
HXLINE(11197)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_FluidArbiter_obj::remove( ::zpp_nape::dynamics::ZPP_FluidArbiter obj){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11208_remove)
HXDLIN(11208)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();
HXDLIN(11208)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur = this->head;
HXDLIN(11208)		bool ret = false;
HXDLIN(11208)		while(hx::IsNotNull( cur )){
HXDLIN(11208)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(11208)				{
HXDLIN(11208)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;
HXDLIN(11208)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;
HXDLIN(11208)					if (hx::IsNull( pre )) {
HXDLIN(11208)						old = this->head;
HXDLIN(11208)						ret1 = old->next;
HXDLIN(11208)						this->head = ret1;
HXDLIN(11208)						if (hx::IsNull( this->head )) {
HXDLIN(11208)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(11208)						old = pre->next;
HXDLIN(11208)						ret1 = old->next;
HXDLIN(11208)						pre->next = ret1;
HXDLIN(11208)						if (hx::IsNull( ret1 )) {
HXDLIN(11208)							this->pushmod = true;
            						}
            					}
HXDLIN(11208)					{
HXDLIN(11208)						 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;
HXDLIN(11208)						o->elt = null();
HXDLIN(11208)						o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11208)						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            					}
HXDLIN(11208)					this->modified = true;
HXDLIN(11208)					this->length--;
HXDLIN(11208)					this->pushmod = true;
            				}
HXDLIN(11208)				ret = true;
HXDLIN(11208)				goto _hx_goto_13;
            			}
HXDLIN(11208)			pre = cur;
HXDLIN(11208)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,remove,(void))

bool ZNPList_ZPP_FluidArbiter_obj::try_remove( ::zpp_nape::dynamics::ZPP_FluidArbiter obj){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11210_try_remove)
HXLINE(11219)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();
HXLINE(11220)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur = this->head;
HXLINE(11221)		bool ret = false;
HXLINE(11222)		while(hx::IsNotNull( cur )){
HXLINE(11223)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(11224)				this->erase(pre);
HXLINE(11225)				ret = true;
HXLINE(11226)				goto _hx_goto_15;
            			}
HXLINE(11228)			pre = cur;
HXLINE(11229)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(11231)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,try_remove,return )

void ZNPList_ZPP_FluidArbiter_obj::inlined_remove( ::zpp_nape::dynamics::ZPP_FluidArbiter obj){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11244_inlined_remove)
HXDLIN(11244)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();
HXDLIN(11244)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur = this->head;
HXDLIN(11244)		bool ret = false;
HXDLIN(11244)		while(hx::IsNotNull( cur )){
HXDLIN(11244)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(11244)				{
HXDLIN(11244)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;
HXDLIN(11244)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;
HXDLIN(11244)					if (hx::IsNull( pre )) {
HXDLIN(11244)						old = this->head;
HXDLIN(11244)						ret1 = old->next;
HXDLIN(11244)						this->head = ret1;
HXDLIN(11244)						if (hx::IsNull( this->head )) {
HXDLIN(11244)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(11244)						old = pre->next;
HXDLIN(11244)						ret1 = old->next;
HXDLIN(11244)						pre->next = ret1;
HXDLIN(11244)						if (hx::IsNull( ret1 )) {
HXDLIN(11244)							this->pushmod = true;
            						}
            					}
HXDLIN(11244)					{
HXDLIN(11244)						 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;
HXDLIN(11244)						o->elt = null();
HXDLIN(11244)						o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11244)						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            					}
HXDLIN(11244)					this->modified = true;
HXDLIN(11244)					this->length--;
HXDLIN(11244)					this->pushmod = true;
            				}
HXDLIN(11244)				ret = true;
HXDLIN(11244)				goto _hx_goto_17;
            			}
HXDLIN(11244)			pre = cur;
HXDLIN(11244)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,inlined_remove,(void))

bool ZNPList_ZPP_FluidArbiter_obj::inlined_try_remove( ::zpp_nape::dynamics::ZPP_FluidArbiter obj){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11248_inlined_try_remove)
HXLINE(11257)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();
HXLINE(11258)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur = this->head;
HXLINE(11259)		bool ret = false;
HXLINE(11260)		while(hx::IsNotNull( cur )){
HXLINE(11261)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(11262)				{
HXLINE(11262)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;
HXDLIN(11262)					 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;
HXDLIN(11262)					if (hx::IsNull( pre )) {
HXLINE(11262)						old = this->head;
HXDLIN(11262)						ret1 = old->next;
HXDLIN(11262)						this->head = ret1;
HXDLIN(11262)						if (hx::IsNull( this->head )) {
HXLINE(11262)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(11262)						old = pre->next;
HXDLIN(11262)						ret1 = old->next;
HXDLIN(11262)						pre->next = ret1;
HXDLIN(11262)						if (hx::IsNull( ret1 )) {
HXLINE(11262)							this->pushmod = true;
            						}
            					}
HXDLIN(11262)					{
HXLINE(11262)						 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;
HXDLIN(11262)						o->elt = null();
HXDLIN(11262)						o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11262)						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            					}
HXDLIN(11262)					this->modified = true;
HXDLIN(11262)					this->length--;
HXDLIN(11262)					this->pushmod = true;
            				}
HXLINE(11263)				ret = true;
HXLINE(11264)				goto _hx_goto_19;
            			}
HXLINE(11266)			pre = cur;
HXLINE(11267)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(11269)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11272_erase)
HXDLIN(11272)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;
HXDLIN(11272)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;
HXDLIN(11272)		if (hx::IsNull( pre )) {
HXDLIN(11272)			old = this->head;
HXDLIN(11272)			ret = old->next;
HXDLIN(11272)			this->head = ret;
HXDLIN(11272)			if (hx::IsNull( this->head )) {
HXDLIN(11272)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(11272)			old = pre->next;
HXDLIN(11272)			ret = old->next;
HXDLIN(11272)			pre->next = ret;
HXDLIN(11272)			if (hx::IsNull( ret )) {
HXDLIN(11272)				this->pushmod = true;
            			}
            		}
HXDLIN(11272)		{
HXDLIN(11272)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;
HXDLIN(11272)			o->elt = null();
HXDLIN(11272)			o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11272)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            		}
HXDLIN(11272)		this->modified = true;
HXDLIN(11272)		this->length--;
HXDLIN(11272)		this->pushmod = true;
HXDLIN(11272)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11276_inlined_erase)
HXLINE(11285)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;
HXLINE(11286)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;
HXLINE(11287)		if (hx::IsNull( pre )) {
HXLINE(11288)			old = this->head;
HXLINE(11289)			ret = old->next;
HXLINE(11290)			this->head = ret;
HXLINE(11291)			if (hx::IsNull( this->head )) {
HXLINE(11291)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(11294)			old = pre->next;
HXLINE(11295)			ret = old->next;
HXLINE(11296)			pre->next = ret;
HXLINE(11297)			if (hx::IsNull( ret )) {
HXLINE(11297)				this->pushmod = true;
            			}
            		}
HXLINE(11300)		{
HXLINE(11301)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;
HXLINE(11310)			o->elt = null();
HXLINE(11311)			o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXLINE(11312)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            		}
HXLINE(11317)		this->modified = true;
HXLINE(11318)		this->length--;
HXLINE(11319)		this->pushmod = true;
HXLINE(11320)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre,int n){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11322_splice)
HXLINE(11323)		while(true){
HXLINE(11323)			bool _hx_tmp;
HXDLIN(11323)			n = (n - 1);
HXDLIN(11323)			if (((n + 1) > 0)) {
HXLINE(11323)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(11323)				_hx_tmp = false;
            			}
HXDLIN(11323)			if (!(_hx_tmp)) {
HXLINE(11323)				goto _hx_goto_23;
            			}
HXDLIN(11323)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(11324)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_FluidArbiter_obj,splice,return )

void ZNPList_ZPP_FluidArbiter_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11327_clear)
HXDLIN(11327)		while(hx::IsNotNull( this->head )){
HXDLIN(11327)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret = this->head;
HXDLIN(11327)			this->head = ret->next;
HXDLIN(11327)			{
HXDLIN(11327)				 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = ret;
HXDLIN(11327)				o->elt = null();
HXDLIN(11327)				o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11327)				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            			}
HXDLIN(11327)			if (hx::IsNull( this->head )) {
HXDLIN(11327)				this->pushmod = true;
            			}
HXDLIN(11327)			this->modified = true;
HXDLIN(11327)			this->length--;
            		}
HXDLIN(11327)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,clear,(void))

void ZNPList_ZPP_FluidArbiter_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11332_inlined_clear)
HXLINE(11333)		while(hx::IsNotNull( this->head )){
HXLINE(11333)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret = this->head;
HXDLIN(11333)			this->head = ret->next;
HXDLIN(11333)			{
HXLINE(11333)				 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = ret;
HXDLIN(11333)				o->elt = null();
HXDLIN(11333)				o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
HXDLIN(11333)				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
            			}
HXDLIN(11333)			if (hx::IsNull( this->head )) {
HXLINE(11333)				this->pushmod = true;
            			}
HXDLIN(11333)			this->modified = true;
HXDLIN(11333)			this->length--;
            		}
HXLINE(11334)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,inlined_clear,(void))

void ZNPList_ZPP_FluidArbiter_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11337_reverse)
HXLINE(11338)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur = this->head;
HXLINE(11339)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();
HXLINE(11340)		while(hx::IsNotNull( cur )){
HXLINE(11341)			 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter nx = cur->next;
HXLINE(11342)			cur->next = pre;
HXLINE(11343)			this->head = cur;
HXLINE(11344)			pre = cur;
HXLINE(11345)			cur = nx;
            		}
HXLINE(11347)		this->modified = true;
HXLINE(11348)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,reverse,(void))

bool ZNPList_ZPP_FluidArbiter_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11353_empty)
HXDLIN(11353)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,empty,return )

int ZNPList_ZPP_FluidArbiter_obj::size(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11358_size)
HXDLIN(11358)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,size,return )

bool ZNPList_ZPP_FluidArbiter_obj::has( ::zpp_nape::dynamics::ZPP_FluidArbiter obj){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11361_has)
HXDLIN(11361)		bool ret;
HXDLIN(11361)		{
HXDLIN(11361)			ret = false;
HXDLIN(11361)			{
HXDLIN(11361)				 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->head;
HXDLIN(11361)				while(hx::IsNotNull( cx_ite )){
HXDLIN(11361)					 ::zpp_nape::dynamics::ZPP_FluidArbiter npite = cx_ite->elt;
HXDLIN(11361)					if (hx::IsEq( npite,obj )) {
HXDLIN(11361)						ret = true;
HXDLIN(11361)						goto _hx_goto_33;
            					}
HXDLIN(11361)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(11361)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,has,return )

bool ZNPList_ZPP_FluidArbiter_obj::inlined_has( ::zpp_nape::dynamics::ZPP_FluidArbiter obj){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11365_inlined_has)
HXLINE(11374)		bool ret;
HXLINE(11375)		{
HXLINE(11376)			ret = false;
HXLINE(11377)			{
HXLINE(11378)				 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->head;
HXLINE(11379)				while(hx::IsNotNull( cx_ite )){
HXLINE(11380)					 ::zpp_nape::dynamics::ZPP_FluidArbiter npite = cx_ite->elt;
HXLINE(11382)					if (hx::IsEq( npite,obj )) {
HXLINE(11383)						ret = true;
HXLINE(11384)						goto _hx_goto_35;
            					}
HXLINE(11387)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(11391)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,inlined_has,return )

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::front(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11396_front)
HXDLIN(11396)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,front,return )

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::back(){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11398_back)
HXLINE(11399)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret = this->head;
HXLINE(11400)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cur = ret;
HXLINE(11401)		while(hx::IsNotNull( cur )){
HXLINE(11402)			ret = cur;
HXLINE(11403)			cur = cur->next;
            		}
HXLINE(11405)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_FluidArbiter_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11407_iterator_at)
HXLINE(11416)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret = this->head;
HXLINE(11417)		while(true){
HXLINE(11417)			bool _hx_tmp;
HXDLIN(11417)			ind = (ind - 1);
HXDLIN(11417)			if (((ind + 1) > 0)) {
HXLINE(11417)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(11417)				_hx_tmp = false;
            			}
HXDLIN(11417)			if (!(_hx_tmp)) {
HXLINE(11417)				goto _hx_goto_40;
            			}
HXDLIN(11417)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(11418)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,iterator_at,return )

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZNPList_ZPP_FluidArbiter_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_d02f8a40928bcfe7_11420_at)
HXLINE(11429)		 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter it = this->iterator_at(ind);
HXLINE(11430)		if (hx::IsNotNull( it )) {
HXLINE(11430)			return it->elt;
            		}
            		else {
HXLINE(11430)			return null();
            		}
HXDLIN(11430)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_FluidArbiter_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_FluidArbiter_obj > ZNPList_ZPP_FluidArbiter_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_FluidArbiter_obj > __this = new ZNPList_ZPP_FluidArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_FluidArbiter_obj > ZNPList_ZPP_FluidArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_FluidArbiter_obj *__this = (ZNPList_ZPP_FluidArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_FluidArbiter_obj), true, "zpp_nape.util.ZNPList_ZPP_FluidArbiter"));
	*(void **)__this = ZNPList_ZPP_FluidArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_FluidArbiter_obj::ZNPList_ZPP_FluidArbiter_obj()
{
}

void ZNPList_ZPP_FluidArbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_FluidArbiter);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_FluidArbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_FluidArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_FluidArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_FluidArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_FluidArbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter */ ,(int)offsetof(ZNPList_ZPP_FluidArbiter_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_FluidArbiter_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_FluidArbiter_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_FluidArbiter_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_FluidArbiter_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_FluidArbiter_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_FluidArbiter_obj::__mClass;

void ZNPList_ZPP_FluidArbiter_obj::__register()
{
	ZNPList_ZPP_FluidArbiter_obj _hx_dummy;
	ZNPList_ZPP_FluidArbiter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_FluidArbiter",b4,01,3b,c9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_FluidArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_FluidArbiter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_FluidArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_FluidArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
