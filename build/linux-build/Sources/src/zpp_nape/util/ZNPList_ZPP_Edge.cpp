// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <hxinc/zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f381924821743ef8_9766_new,"zpp_nape.util.ZNPList_ZPP_Edge","new",0x4a3acbe4,"zpp_nape.util.ZNPList_ZPP_Edge.new","zpp_nape/util/Lists.hx",9766,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9772_begin,"zpp_nape.util.ZNPList_ZPP_Edge","begin",0x7e95cead,"zpp_nape.util.ZNPList_ZPP_Edge.begin","zpp_nape/util/Lists.hx",9772,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9779_setbegin,"zpp_nape.util.ZNPList_ZPP_Edge","setbegin",0x9a63a943,"zpp_nape.util.ZNPList_ZPP_Edge.setbegin","zpp_nape/util/Lists.hx",9779,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9785_add,"zpp_nape.util.ZNPList_ZPP_Edge","add",0x4a30eda5,"zpp_nape.util.ZNPList_ZPP_Edge.add","zpp_nape/util/Lists.hx",9785,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9789_inlined_add,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_add",0x18826c11,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_add","zpp_nape/util/Lists.hx",9789,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9835_addAll,"zpp_nape.util.ZNPList_ZPP_Edge","addAll",0x48a3187c,"zpp_nape.util.ZNPList_ZPP_Edge.addAll","zpp_nape/util/Lists.hx",9835,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9845_insert,"zpp_nape.util.ZNPList_ZPP_Edge","insert",0x47855235,"zpp_nape.util.ZNPList_ZPP_Edge.insert","zpp_nape/util/Lists.hx",9845,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9849_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_insert",0x12199f49,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_insert","zpp_nape/util/Lists.hx",9849,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9893_pop,"zpp_nape.util.ZNPList_ZPP_Edge","pop",0x4a3c5915,"zpp_nape.util.ZNPList_ZPP_Edge.pop","zpp_nape/util/Lists.hx",9893,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9897_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_pop",0x188dd781,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_pop","zpp_nape/util/Lists.hx",9897,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9931_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Edge","pop_unsafe",0xc8adb950,"zpp_nape.util.ZNPList_ZPP_Edge.pop_unsafe","zpp_nape/util/Lists.hx",9931,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9935_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_pop_unsafe",0xcbf02064,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_pop_unsafe","zpp_nape/util/Lists.hx",9935,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9957_remove,"zpp_nape.util.ZNPList_ZPP_Edge","remove",0xae30ab40,"zpp_nape.util.ZNPList_ZPP_Edge.remove","zpp_nape/util/Lists.hx",9957,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9959_try_remove,"zpp_nape.util.ZNPList_ZPP_Edge","try_remove",0xdfd7ef04,"zpp_nape.util.ZNPList_ZPP_Edge.try_remove","zpp_nape/util/Lists.hx",9959,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9993_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_remove",0x78c4f854,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_remove","zpp_nape/util/Lists.hx",9993,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_9997_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_try_remove",0xe31a5618,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_try_remove","zpp_nape/util/Lists.hx",9997,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10021_erase,"zpp_nape.util.ZNPList_ZPP_Edge","erase",0x415ccd6a,"zpp_nape.util.ZNPList_ZPP_Edge.erase","zpp_nape/util/Lists.hx",10021,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10025_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_erase",0x65dbbed6,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_erase","zpp_nape/util/Lists.hx",10025,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10071_splice,"zpp_nape.util.ZNPList_ZPP_Edge","splice",0x69469478,"zpp_nape.util.ZNPList_ZPP_Edge.splice","zpp_nape/util/Lists.hx",10071,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10076_clear,"zpp_nape.util.ZNPList_ZPP_Edge","clear",0x169b5611,"zpp_nape.util.ZNPList_ZPP_Edge.clear","zpp_nape/util/Lists.hx",10076,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10081_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_clear",0x3b1a477d,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_clear","zpp_nape/util/Lists.hx",10081,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10086_reverse,"zpp_nape.util.ZNPList_ZPP_Edge","reverse",0xe46146a6,"zpp_nape.util.ZNPList_ZPP_Edge.reverse","zpp_nape/util/Lists.hx",10086,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10102_empty,"zpp_nape.util.ZNPList_ZPP_Edge","empty",0x3e1a1f11,"zpp_nape.util.ZNPList_ZPP_Edge.empty","zpp_nape/util/Lists.hx",10102,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10107_size,"zpp_nape.util.ZNPList_ZPP_Edge","size",0xac88b8bd,"zpp_nape.util.ZNPList_ZPP_Edge.size","zpp_nape/util/Lists.hx",10107,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10110_has,"zpp_nape.util.ZNPList_ZPP_Edge","has",0x4a363ade,"zpp_nape.util.ZNPList_ZPP_Edge.has","zpp_nape/util/Lists.hx",10110,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10114_inlined_has,"zpp_nape.util.ZNPList_ZPP_Edge","inlined_has",0x1887b94a,"zpp_nape.util.ZNPList_ZPP_Edge.inlined_has","zpp_nape/util/Lists.hx",10114,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10145_front,"zpp_nape.util.ZNPList_ZPP_Edge","front",0xd4cdfd2d,"zpp_nape.util.ZNPList_ZPP_Edge.front","zpp_nape/util/Lists.hx",10145,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10147_back,"zpp_nape.util.ZNPList_ZPP_Edge","back",0xa145f223,"zpp_nape.util.ZNPList_ZPP_Edge.back","zpp_nape/util/Lists.hx",10147,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10156_iterator_at,"zpp_nape.util.ZNPList_ZPP_Edge","iterator_at",0x1d26a968,"zpp_nape.util.ZNPList_ZPP_Edge.iterator_at","zpp_nape/util/Lists.hx",10156,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_f381924821743ef8_10169_at,"zpp_nape.util.ZNPList_ZPP_Edge","at",0x6c3e35ef,"zpp_nape.util.ZNPList_ZPP_Edge.at","zpp_nape/util/Lists.hx",10169,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Edge_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9766_new)
HXLINE(9776)		this->length = 0;
HXLINE(9775)		this->pushmod = false;
HXLINE(9774)		this->modified = false;
HXLINE(9767)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Edge_obj::__CreateEmpty() { return new ZNPList_ZPP_Edge_obj; }

void *ZNPList_ZPP_Edge_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Edge_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Edge_obj > _hx_result = new ZNPList_ZPP_Edge_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Edge_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6e446efe;
}

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9772_begin)
HXDLIN(9772)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,begin,return )

void ZNPList_ZPP_Edge_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Edge i){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9779_setbegin)
HXLINE(9780)		this->head = i;
HXLINE(9781)		this->modified = true;
HXLINE(9782)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,setbegin,(void))

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::add( ::zpp_nape::shape::ZPP_Edge o){
            	HX_GC_STACKFRAME(&_hx_pos_f381924821743ef8_9785_add)
HXDLIN(9785)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret;
HXDLIN(9785)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool )) {
HXDLIN(9785)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(9785)			ret = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(9785)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = ret->next;
HXDLIN(9785)			ret->next = null();
            		}
HXDLIN(9785)		ret->elt = o;
HXDLIN(9785)		 ::zpp_nape::util::ZNPNode_ZPP_Edge temp = ret;
HXDLIN(9785)		temp->next = this->head;
HXDLIN(9785)		this->head = temp;
HXDLIN(9785)		this->modified = true;
HXDLIN(9785)		this->length++;
HXDLIN(9785)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,add,return )

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::inlined_add( ::zpp_nape::shape::ZPP_Edge o){
            	HX_GC_STACKFRAME(&_hx_pos_f381924821743ef8_9789_inlined_add)
HXLINE(9799)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret;
HXLINE(9801)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool )) {
HXLINE(9802)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9808)			ret = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXLINE(9809)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = ret->next;
HXLINE(9810)			ret->next = null();
            		}
HXLINE(9817)		ret->elt = o;
HXLINE(9798)		 ::zpp_nape::util::ZNPNode_ZPP_Edge temp = ret;
HXLINE(9820)		temp->next = this->head;
HXLINE(9821)		this->head = temp;
HXLINE(9822)		this->modified = true;
HXLINE(9823)		this->length++;
HXLINE(9824)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,inlined_add,return )

void ZNPList_ZPP_Edge_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Edge x){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9835_addAll)
HXLINE(9836)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = x->head;
HXLINE(9837)		while(hx::IsNotNull( cx_ite )){
HXLINE(9838)			 ::zpp_nape::shape::ZPP_Edge i = cx_ite->elt;
HXLINE(9839)			this->add(i);
HXLINE(9840)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Edge cur, ::zpp_nape::shape::ZPP_Edge o){
            	HX_GC_STACKFRAME(&_hx_pos_f381924821743ef8_9845_insert)
HXDLIN(9845)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret;
HXDLIN(9845)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool )) {
HXDLIN(9845)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(9845)			ret = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(9845)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = ret->next;
HXDLIN(9845)			ret->next = null();
            		}
HXDLIN(9845)		ret->elt = o;
HXDLIN(9845)		 ::zpp_nape::util::ZNPNode_ZPP_Edge temp = ret;
HXDLIN(9845)		if (hx::IsNull( cur )) {
HXDLIN(9845)			temp->next = this->head;
HXDLIN(9845)			this->head = temp;
            		}
            		else {
HXDLIN(9845)			temp->next = cur->next;
HXDLIN(9845)			cur->next = temp;
            		}
HXDLIN(9845)		this->pushmod = (this->modified = true);
HXDLIN(9845)		this->length++;
HXDLIN(9845)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Edge_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Edge cur, ::zpp_nape::shape::ZPP_Edge o){
            	HX_GC_STACKFRAME(&_hx_pos_f381924821743ef8_9849_inlined_insert)
HXLINE(9859)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret;
HXLINE(9861)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool )) {
HXLINE(9862)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9868)			ret = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXLINE(9869)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = ret->next;
HXLINE(9870)			ret->next = null();
            		}
HXLINE(9877)		ret->elt = o;
HXLINE(9858)		 ::zpp_nape::util::ZNPNode_ZPP_Edge temp = ret;
HXLINE(9880)		if (hx::IsNull( cur )) {
HXLINE(9881)			temp->next = this->head;
HXLINE(9882)			this->head = temp;
            		}
            		else {
HXLINE(9885)			temp->next = cur->next;
HXLINE(9886)			cur->next = temp;
            		}
HXLINE(9888)		this->pushmod = (this->modified = true);
HXLINE(9889)		this->length++;
HXLINE(9890)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Edge_obj,inlined_insert,return )

void ZNPList_ZPP_Edge_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9893_pop)
HXDLIN(9893)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret = this->head;
HXDLIN(9893)		this->head = ret->next;
HXDLIN(9893)		{
HXDLIN(9893)			 ::zpp_nape::util::ZNPNode_ZPP_Edge o = ret;
HXDLIN(9893)			o->elt = null();
HXDLIN(9893)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(9893)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            		}
HXDLIN(9893)		if (hx::IsNull( this->head )) {
HXDLIN(9893)			this->pushmod = true;
            		}
HXDLIN(9893)		this->modified = true;
HXDLIN(9893)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,pop,(void))

void ZNPList_ZPP_Edge_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9897_inlined_pop)
HXLINE(9906)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret = this->head;
HXLINE(9907)		this->head = ret->next;
HXLINE(9909)		{
HXLINE(9910)			 ::zpp_nape::util::ZNPNode_ZPP_Edge o = ret;
HXLINE(9919)			o->elt = null();
HXLINE(9920)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXLINE(9921)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            		}
HXLINE(9926)		if (hx::IsNull( this->head )) {
HXLINE(9926)			this->pushmod = true;
            		}
HXLINE(9927)		this->modified = true;
HXLINE(9928)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,inlined_pop,(void))

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9931_pop_unsafe)
HXDLIN(9931)		 ::zpp_nape::shape::ZPP_Edge ret = this->head->elt;
HXDLIN(9931)		this->pop();
HXDLIN(9931)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,pop_unsafe,return )

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9935_inlined_pop_unsafe)
HXLINE(9944)		 ::zpp_nape::shape::ZPP_Edge ret = this->head->elt;
HXLINE(9945)		this->pop();
HXLINE(9946)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Edge_obj::remove( ::zpp_nape::shape::ZPP_Edge obj){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9957_remove)
HXDLIN(9957)		 ::zpp_nape::util::ZNPNode_ZPP_Edge pre = null();
HXDLIN(9957)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cur = this->head;
HXDLIN(9957)		bool ret = false;
HXDLIN(9957)		while(hx::IsNotNull( cur )){
HXDLIN(9957)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(9957)				{
HXDLIN(9957)					 ::zpp_nape::util::ZNPNode_ZPP_Edge old;
HXDLIN(9957)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ret1;
HXDLIN(9957)					if (hx::IsNull( pre )) {
HXDLIN(9957)						old = this->head;
HXDLIN(9957)						ret1 = old->next;
HXDLIN(9957)						this->head = ret1;
HXDLIN(9957)						if (hx::IsNull( this->head )) {
HXDLIN(9957)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(9957)						old = pre->next;
HXDLIN(9957)						ret1 = old->next;
HXDLIN(9957)						pre->next = ret1;
HXDLIN(9957)						if (hx::IsNull( ret1 )) {
HXDLIN(9957)							this->pushmod = true;
            						}
            					}
HXDLIN(9957)					{
HXDLIN(9957)						 ::zpp_nape::util::ZNPNode_ZPP_Edge o = old;
HXDLIN(9957)						o->elt = null();
HXDLIN(9957)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(9957)						::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            					}
HXDLIN(9957)					this->modified = true;
HXDLIN(9957)					this->length--;
HXDLIN(9957)					this->pushmod = true;
            				}
HXDLIN(9957)				ret = true;
HXDLIN(9957)				goto _hx_goto_13;
            			}
HXDLIN(9957)			pre = cur;
HXDLIN(9957)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,remove,(void))

bool ZNPList_ZPP_Edge_obj::try_remove( ::zpp_nape::shape::ZPP_Edge obj){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9959_try_remove)
HXLINE(9968)		 ::zpp_nape::util::ZNPNode_ZPP_Edge pre = null();
HXLINE(9969)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cur = this->head;
HXLINE(9970)		bool ret = false;
HXLINE(9971)		while(hx::IsNotNull( cur )){
HXLINE(9972)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9973)				this->erase(pre);
HXLINE(9974)				ret = true;
HXLINE(9975)				goto _hx_goto_15;
            			}
HXLINE(9977)			pre = cur;
HXLINE(9978)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(9980)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,try_remove,return )

void ZNPList_ZPP_Edge_obj::inlined_remove( ::zpp_nape::shape::ZPP_Edge obj){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9993_inlined_remove)
HXDLIN(9993)		 ::zpp_nape::util::ZNPNode_ZPP_Edge pre = null();
HXDLIN(9993)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cur = this->head;
HXDLIN(9993)		bool ret = false;
HXDLIN(9993)		while(hx::IsNotNull( cur )){
HXDLIN(9993)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(9993)				{
HXDLIN(9993)					 ::zpp_nape::util::ZNPNode_ZPP_Edge old;
HXDLIN(9993)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ret1;
HXDLIN(9993)					if (hx::IsNull( pre )) {
HXDLIN(9993)						old = this->head;
HXDLIN(9993)						ret1 = old->next;
HXDLIN(9993)						this->head = ret1;
HXDLIN(9993)						if (hx::IsNull( this->head )) {
HXDLIN(9993)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(9993)						old = pre->next;
HXDLIN(9993)						ret1 = old->next;
HXDLIN(9993)						pre->next = ret1;
HXDLIN(9993)						if (hx::IsNull( ret1 )) {
HXDLIN(9993)							this->pushmod = true;
            						}
            					}
HXDLIN(9993)					{
HXDLIN(9993)						 ::zpp_nape::util::ZNPNode_ZPP_Edge o = old;
HXDLIN(9993)						o->elt = null();
HXDLIN(9993)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(9993)						::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            					}
HXDLIN(9993)					this->modified = true;
HXDLIN(9993)					this->length--;
HXDLIN(9993)					this->pushmod = true;
            				}
HXDLIN(9993)				ret = true;
HXDLIN(9993)				goto _hx_goto_17;
            			}
HXDLIN(9993)			pre = cur;
HXDLIN(9993)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,inlined_remove,(void))

bool ZNPList_ZPP_Edge_obj::inlined_try_remove( ::zpp_nape::shape::ZPP_Edge obj){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_9997_inlined_try_remove)
HXLINE(10006)		 ::zpp_nape::util::ZNPNode_ZPP_Edge pre = null();
HXLINE(10007)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cur = this->head;
HXLINE(10008)		bool ret = false;
HXLINE(10009)		while(hx::IsNotNull( cur )){
HXLINE(10010)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10011)				{
HXLINE(10011)					 ::zpp_nape::util::ZNPNode_ZPP_Edge old;
HXDLIN(10011)					 ::zpp_nape::util::ZNPNode_ZPP_Edge ret1;
HXDLIN(10011)					if (hx::IsNull( pre )) {
HXLINE(10011)						old = this->head;
HXDLIN(10011)						ret1 = old->next;
HXDLIN(10011)						this->head = ret1;
HXDLIN(10011)						if (hx::IsNull( this->head )) {
HXLINE(10011)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10011)						old = pre->next;
HXDLIN(10011)						ret1 = old->next;
HXDLIN(10011)						pre->next = ret1;
HXDLIN(10011)						if (hx::IsNull( ret1 )) {
HXLINE(10011)							this->pushmod = true;
            						}
            					}
HXDLIN(10011)					{
HXLINE(10011)						 ::zpp_nape::util::ZNPNode_ZPP_Edge o = old;
HXDLIN(10011)						o->elt = null();
HXDLIN(10011)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(10011)						::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            					}
HXDLIN(10011)					this->modified = true;
HXDLIN(10011)					this->length--;
HXDLIN(10011)					this->pushmod = true;
            				}
HXLINE(10012)				ret = true;
HXLINE(10013)				goto _hx_goto_19;
            			}
HXLINE(10015)			pre = cur;
HXLINE(10016)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(10018)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Edge pre){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10021_erase)
HXDLIN(10021)		 ::zpp_nape::util::ZNPNode_ZPP_Edge old;
HXDLIN(10021)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret;
HXDLIN(10021)		if (hx::IsNull( pre )) {
HXDLIN(10021)			old = this->head;
HXDLIN(10021)			ret = old->next;
HXDLIN(10021)			this->head = ret;
HXDLIN(10021)			if (hx::IsNull( this->head )) {
HXDLIN(10021)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(10021)			old = pre->next;
HXDLIN(10021)			ret = old->next;
HXDLIN(10021)			pre->next = ret;
HXDLIN(10021)			if (hx::IsNull( ret )) {
HXDLIN(10021)				this->pushmod = true;
            			}
            		}
HXDLIN(10021)		{
HXDLIN(10021)			 ::zpp_nape::util::ZNPNode_ZPP_Edge o = old;
HXDLIN(10021)			o->elt = null();
HXDLIN(10021)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(10021)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            		}
HXDLIN(10021)		this->modified = true;
HXDLIN(10021)		this->length--;
HXDLIN(10021)		this->pushmod = true;
HXDLIN(10021)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Edge pre){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10025_inlined_erase)
HXLINE(10034)		 ::zpp_nape::util::ZNPNode_ZPP_Edge old;
HXLINE(10035)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret;
HXLINE(10036)		if (hx::IsNull( pre )) {
HXLINE(10037)			old = this->head;
HXLINE(10038)			ret = old->next;
HXLINE(10039)			this->head = ret;
HXLINE(10040)			if (hx::IsNull( this->head )) {
HXLINE(10040)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(10043)			old = pre->next;
HXLINE(10044)			ret = old->next;
HXLINE(10045)			pre->next = ret;
HXLINE(10046)			if (hx::IsNull( ret )) {
HXLINE(10046)				this->pushmod = true;
            			}
            		}
HXLINE(10049)		{
HXLINE(10050)			 ::zpp_nape::util::ZNPNode_ZPP_Edge o = old;
HXLINE(10059)			o->elt = null();
HXLINE(10060)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXLINE(10061)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            		}
HXLINE(10066)		this->modified = true;
HXLINE(10067)		this->length--;
HXLINE(10068)		this->pushmod = true;
HXLINE(10069)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Edge pre,int n){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10071_splice)
HXLINE(10072)		while(true){
HXLINE(10072)			bool _hx_tmp;
HXDLIN(10072)			n = (n - 1);
HXDLIN(10072)			if (((n + 1) > 0)) {
HXLINE(10072)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(10072)				_hx_tmp = false;
            			}
HXDLIN(10072)			if (!(_hx_tmp)) {
HXLINE(10072)				goto _hx_goto_23;
            			}
HXDLIN(10072)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(10073)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Edge_obj,splice,return )

void ZNPList_ZPP_Edge_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10076_clear)
HXDLIN(10076)		while(hx::IsNotNull( this->head )){
HXDLIN(10076)			 ::zpp_nape::util::ZNPNode_ZPP_Edge ret = this->head;
HXDLIN(10076)			this->head = ret->next;
HXDLIN(10076)			{
HXDLIN(10076)				 ::zpp_nape::util::ZNPNode_ZPP_Edge o = ret;
HXDLIN(10076)				o->elt = null();
HXDLIN(10076)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(10076)				::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            			}
HXDLIN(10076)			if (hx::IsNull( this->head )) {
HXDLIN(10076)				this->pushmod = true;
            			}
HXDLIN(10076)			this->modified = true;
HXDLIN(10076)			this->length--;
            		}
HXDLIN(10076)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,clear,(void))

void ZNPList_ZPP_Edge_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10081_inlined_clear)
HXLINE(10082)		while(hx::IsNotNull( this->head )){
HXLINE(10082)			 ::zpp_nape::util::ZNPNode_ZPP_Edge ret = this->head;
HXDLIN(10082)			this->head = ret->next;
HXDLIN(10082)			{
HXLINE(10082)				 ::zpp_nape::util::ZNPNode_ZPP_Edge o = ret;
HXDLIN(10082)				o->elt = null();
HXDLIN(10082)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool;
HXDLIN(10082)				::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = o;
            			}
HXDLIN(10082)			if (hx::IsNull( this->head )) {
HXLINE(10082)				this->pushmod = true;
            			}
HXDLIN(10082)			this->modified = true;
HXDLIN(10082)			this->length--;
            		}
HXLINE(10083)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,inlined_clear,(void))

void ZNPList_ZPP_Edge_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10086_reverse)
HXLINE(10087)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cur = this->head;
HXLINE(10088)		 ::zpp_nape::util::ZNPNode_ZPP_Edge pre = null();
HXLINE(10089)		while(hx::IsNotNull( cur )){
HXLINE(10090)			 ::zpp_nape::util::ZNPNode_ZPP_Edge nx = cur->next;
HXLINE(10091)			cur->next = pre;
HXLINE(10092)			this->head = cur;
HXLINE(10093)			pre = cur;
HXLINE(10094)			cur = nx;
            		}
HXLINE(10096)		this->modified = true;
HXLINE(10097)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,reverse,(void))

bool ZNPList_ZPP_Edge_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10102_empty)
HXDLIN(10102)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,empty,return )

int ZNPList_ZPP_Edge_obj::size(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10107_size)
HXDLIN(10107)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,size,return )

bool ZNPList_ZPP_Edge_obj::has( ::zpp_nape::shape::ZPP_Edge obj){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10110_has)
HXDLIN(10110)		bool ret;
HXDLIN(10110)		{
HXDLIN(10110)			ret = false;
HXDLIN(10110)			{
HXDLIN(10110)				 ::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = this->head;
HXDLIN(10110)				while(hx::IsNotNull( cx_ite )){
HXDLIN(10110)					 ::zpp_nape::shape::ZPP_Edge npite = cx_ite->elt;
HXDLIN(10110)					if (hx::IsEq( npite,obj )) {
HXDLIN(10110)						ret = true;
HXDLIN(10110)						goto _hx_goto_33;
            					}
HXDLIN(10110)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(10110)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,has,return )

bool ZNPList_ZPP_Edge_obj::inlined_has( ::zpp_nape::shape::ZPP_Edge obj){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10114_inlined_has)
HXLINE(10123)		bool ret;
HXLINE(10124)		{
HXLINE(10125)			ret = false;
HXLINE(10126)			{
HXLINE(10127)				 ::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = this->head;
HXLINE(10128)				while(hx::IsNotNull( cx_ite )){
HXLINE(10129)					 ::zpp_nape::shape::ZPP_Edge npite = cx_ite->elt;
HXLINE(10131)					if (hx::IsEq( npite,obj )) {
HXLINE(10132)						ret = true;
HXLINE(10133)						goto _hx_goto_35;
            					}
HXLINE(10136)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(10140)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,inlined_has,return )

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::front(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10145_front)
HXDLIN(10145)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,front,return )

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::back(){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10147_back)
HXLINE(10148)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret = this->head;
HXLINE(10149)		 ::zpp_nape::util::ZNPNode_ZPP_Edge cur = ret;
HXLINE(10150)		while(hx::IsNotNull( cur )){
HXLINE(10151)			ret = cur;
HXLINE(10152)			cur = cur->next;
            		}
HXLINE(10154)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Edge_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Edge ZNPList_ZPP_Edge_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10156_iterator_at)
HXLINE(10165)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ret = this->head;
HXLINE(10166)		while(true){
HXLINE(10166)			bool _hx_tmp;
HXDLIN(10166)			ind = (ind - 1);
HXDLIN(10166)			if (((ind + 1) > 0)) {
HXLINE(10166)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(10166)				_hx_tmp = false;
            			}
HXDLIN(10166)			if (!(_hx_tmp)) {
HXLINE(10166)				goto _hx_goto_40;
            			}
HXDLIN(10166)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(10167)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,iterator_at,return )

 ::zpp_nape::shape::ZPP_Edge ZNPList_ZPP_Edge_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_f381924821743ef8_10169_at)
HXLINE(10178)		 ::zpp_nape::util::ZNPNode_ZPP_Edge it = this->iterator_at(ind);
HXLINE(10179)		if (hx::IsNotNull( it )) {
HXLINE(10179)			return it->elt;
            		}
            		else {
HXLINE(10179)			return null();
            		}
HXDLIN(10179)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Edge_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Edge_obj > ZNPList_ZPP_Edge_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Edge_obj > __this = new ZNPList_ZPP_Edge_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Edge_obj > ZNPList_ZPP_Edge_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Edge_obj *__this = (ZNPList_ZPP_Edge_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Edge_obj), true, "zpp_nape.util.ZNPList_ZPP_Edge"));
	*(void **)__this = ZNPList_ZPP_Edge_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Edge_obj::ZNPList_ZPP_Edge_obj()
{
}

void ZNPList_ZPP_Edge_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Edge);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Edge_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Edge_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Edge_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Edge >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Edge_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Edge_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_Edge */ ,(int)offsetof(ZNPList_ZPP_Edge_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Edge_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Edge_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Edge_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Edge_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Edge_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_Edge_obj::__mClass;

void ZNPList_ZPP_Edge_obj::__register()
{
	ZNPList_ZPP_Edge_obj _hx_dummy;
	ZNPList_ZPP_Edge_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_Edge",f2,49,2e,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Edge_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Edge_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Edge_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Edge_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
