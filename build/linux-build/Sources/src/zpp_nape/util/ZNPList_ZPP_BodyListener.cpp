// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <hxinc/zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4345_new,"zpp_nape.util.ZNPList_ZPP_BodyListener","new",0x6caada5d,"zpp_nape.util.ZNPList_ZPP_BodyListener.new","zpp_nape/util/Lists.hx",4345,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4351_begin,"zpp_nape.util.ZNPList_ZPP_BodyListener","begin",0x28012d66,"zpp_nape.util.ZNPList_ZPP_BodyListener.begin","zpp_nape/util/Lists.hx",4351,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4358_setbegin,"zpp_nape.util.ZNPList_ZPP_BodyListener","setbegin",0x022f842a,"zpp_nape.util.ZNPList_ZPP_BodyListener.setbegin","zpp_nape/util/Lists.hx",4358,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4364_add,"zpp_nape.util.ZNPList_ZPP_BodyListener","add",0x6ca0fc1e,"zpp_nape.util.ZNPList_ZPP_BodyListener.add","zpp_nape/util/Lists.hx",4364,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4368_inlined_add,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_add",0x12cb1b8a,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_add","zpp_nape/util/Lists.hx",4368,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4414_addAll,"zpp_nape.util.ZNPList_ZPP_BodyListener","addAll",0xdd2a9ba3,"zpp_nape.util.ZNPList_ZPP_BodyListener.addAll","zpp_nape/util/Lists.hx",4414,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4424_insert,"zpp_nape.util.ZNPList_ZPP_BodyListener","insert",0xdc0cd55c,"zpp_nape.util.ZNPList_ZPP_BodyListener.insert","zpp_nape/util/Lists.hx",4424,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4428_inlined_insert,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_insert",0xb1232170,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_insert","zpp_nape/util/Lists.hx",4428,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4472_pop,"zpp_nape.util.ZNPList_ZPP_BodyListener","pop",0x6cac678e,"zpp_nape.util.ZNPList_ZPP_BodyListener.pop","zpp_nape/util/Lists.hx",4472,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4476_inlined_pop,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_pop",0x12d686fa,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_pop","zpp_nape/util/Lists.hx",4476,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4510_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_BodyListener","pop_unsafe",0x9f535bf7,"zpp_nape.util.ZNPList_ZPP_BodyListener.pop_unsafe","zpp_nape/util/Lists.hx",4510,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4514_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_pop_unsafe",0xaf83420b,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_pop_unsafe","zpp_nape/util/Lists.hx",4514,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4536_remove,"zpp_nape.util.ZNPList_ZPP_BodyListener","remove",0x42b82e67,"zpp_nape.util.ZNPList_ZPP_BodyListener.remove","zpp_nape/util/Lists.hx",4536,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4538_try_remove,"zpp_nape.util.ZNPList_ZPP_BodyListener","try_remove",0xb67d91ab,"zpp_nape.util.ZNPList_ZPP_BodyListener.try_remove","zpp_nape/util/Lists.hx",4538,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4572_inlined_remove,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_remove",0x17ce7a7b,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_remove","zpp_nape/util/Lists.hx",4572,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4576_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_try_remove",0xc6ad77bf,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_try_remove","zpp_nape/util/Lists.hx",4576,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4600_erase,"zpp_nape.util.ZNPList_ZPP_BodyListener","erase",0xeac82c23,"zpp_nape.util.ZNPList_ZPP_BodyListener.erase","zpp_nape/util/Lists.hx",4600,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4604_inlined_erase,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_erase",0x0749fe8f,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_erase","zpp_nape/util/Lists.hx",4604,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4650_splice,"zpp_nape.util.ZNPList_ZPP_BodyListener","splice",0xfdce179f,"zpp_nape.util.ZNPList_ZPP_BodyListener.splice","zpp_nape/util/Lists.hx",4650,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4655_clear,"zpp_nape.util.ZNPList_ZPP_BodyListener","clear",0xc006b4ca,"zpp_nape.util.ZNPList_ZPP_BodyListener.clear","zpp_nape/util/Lists.hx",4655,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4660_inlined_clear,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_clear",0xdc888736,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_clear","zpp_nape/util/Lists.hx",4660,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4665_reverse,"zpp_nape.util.ZNPList_ZPP_BodyListener","reverse",0x466c859f,"zpp_nape.util.ZNPList_ZPP_BodyListener.reverse","zpp_nape/util/Lists.hx",4665,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4681_empty,"zpp_nape.util.ZNPList_ZPP_BodyListener","empty",0xe7857dca,"zpp_nape.util.ZNPList_ZPP_BodyListener.empty","zpp_nape/util/Lists.hx",4681,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4686_size,"zpp_nape.util.ZNPList_ZPP_BodyListener","size",0xac255424,"zpp_nape.util.ZNPList_ZPP_BodyListener.size","zpp_nape/util/Lists.hx",4686,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4689_has,"zpp_nape.util.ZNPList_ZPP_BodyListener","has",0x6ca64957,"zpp_nape.util.ZNPList_ZPP_BodyListener.has","zpp_nape/util/Lists.hx",4689,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4693_inlined_has,"zpp_nape.util.ZNPList_ZPP_BodyListener","inlined_has",0x12d068c3,"zpp_nape.util.ZNPList_ZPP_BodyListener.inlined_has","zpp_nape/util/Lists.hx",4693,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4724_front,"zpp_nape.util.ZNPList_ZPP_BodyListener","front",0x7e395be6,"zpp_nape.util.ZNPList_ZPP_BodyListener.front","zpp_nape/util/Lists.hx",4724,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4726_back,"zpp_nape.util.ZNPList_ZPP_BodyListener","back",0xa0e28d8a,"zpp_nape.util.ZNPList_ZPP_BodyListener.back","zpp_nape/util/Lists.hx",4726,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4735_iterator_at,"zpp_nape.util.ZNPList_ZPP_BodyListener","iterator_at",0x176f58e1,"zpp_nape.util.ZNPList_ZPP_BodyListener.iterator_at","zpp_nape/util/Lists.hx",4735,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_e38b7c5fadbdbc95_4748_at,"zpp_nape.util.ZNPList_ZPP_BodyListener","at",0xbf0d5996,"zpp_nape.util.ZNPList_ZPP_BodyListener.at","zpp_nape/util/Lists.hx",4748,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_BodyListener_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4345_new)
HXLINE(4355)		this->length = 0;
HXLINE(4354)		this->pushmod = false;
HXLINE(4353)		this->modified = false;
HXLINE(4346)		this->head = null();
            	}

Dynamic ZNPList_ZPP_BodyListener_obj::__CreateEmpty() { return new ZNPList_ZPP_BodyListener_obj; }

void *ZNPList_ZPP_BodyListener_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_BodyListener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_BodyListener_obj > _hx_result = new ZNPList_ZPP_BodyListener_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_BodyListener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0547502f;
}

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4351_begin)
HXDLIN(4351)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,begin,return )

void ZNPList_ZPP_BodyListener_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_BodyListener i){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4358_setbegin)
HXLINE(4359)		this->head = i;
HXLINE(4360)		this->modified = true;
HXLINE(4361)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,setbegin,(void))

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::add( ::zpp_nape::callbacks::ZPP_BodyListener o){
            	HX_GC_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4364_add)
HXDLIN(4364)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXDLIN(4364)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )) {
HXDLIN(4364)			ret =  ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(4364)			ret = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4364)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = ret->next;
HXDLIN(4364)			ret->next = null();
            		}
HXDLIN(4364)		ret->elt = o;
HXDLIN(4364)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener temp = ret;
HXDLIN(4364)		temp->next = this->head;
HXDLIN(4364)		this->head = temp;
HXDLIN(4364)		this->modified = true;
HXDLIN(4364)		this->length++;
HXDLIN(4364)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,add,return )

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::inlined_add( ::zpp_nape::callbacks::ZPP_BodyListener o){
            	HX_GC_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4368_inlined_add)
HXLINE(4378)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXLINE(4380)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )) {
HXLINE(4381)			ret =  ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4387)			ret = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXLINE(4388)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = ret->next;
HXLINE(4389)			ret->next = null();
            		}
HXLINE(4396)		ret->elt = o;
HXLINE(4377)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener temp = ret;
HXLINE(4399)		temp->next = this->head;
HXLINE(4400)		this->head = temp;
HXLINE(4401)		this->modified = true;
HXLINE(4402)		this->length++;
HXLINE(4403)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,inlined_add,return )

void ZNPList_ZPP_BodyListener_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_BodyListener x){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4414_addAll)
HXLINE(4415)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = x->head;
HXLINE(4416)		while(hx::IsNotNull( cx_ite )){
HXLINE(4417)			 ::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;
HXLINE(4418)			this->add(i);
HXLINE(4419)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur, ::zpp_nape::callbacks::ZPP_BodyListener o){
            	HX_GC_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4424_insert)
HXDLIN(4424)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXDLIN(4424)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )) {
HXDLIN(4424)			ret =  ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(4424)			ret = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4424)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = ret->next;
HXDLIN(4424)			ret->next = null();
            		}
HXDLIN(4424)		ret->elt = o;
HXDLIN(4424)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener temp = ret;
HXDLIN(4424)		if (hx::IsNull( cur )) {
HXDLIN(4424)			temp->next = this->head;
HXDLIN(4424)			this->head = temp;
            		}
            		else {
HXDLIN(4424)			temp->next = cur->next;
HXDLIN(4424)			cur->next = temp;
            		}
HXDLIN(4424)		this->pushmod = (this->modified = true);
HXDLIN(4424)		this->length++;
HXDLIN(4424)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_BodyListener_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur, ::zpp_nape::callbacks::ZPP_BodyListener o){
            	HX_GC_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4428_inlined_insert)
HXLINE(4438)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXLINE(4440)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )) {
HXLINE(4441)			ret =  ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4447)			ret = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXLINE(4448)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = ret->next;
HXLINE(4449)			ret->next = null();
            		}
HXLINE(4456)		ret->elt = o;
HXLINE(4437)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener temp = ret;
HXLINE(4459)		if (hx::IsNull( cur )) {
HXLINE(4460)			temp->next = this->head;
HXLINE(4461)			this->head = temp;
            		}
            		else {
HXLINE(4464)			temp->next = cur->next;
HXLINE(4465)			cur->next = temp;
            		}
HXLINE(4467)		this->pushmod = (this->modified = true);
HXLINE(4468)		this->length++;
HXLINE(4469)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_BodyListener_obj,inlined_insert,return )

void ZNPList_ZPP_BodyListener_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4472_pop)
HXDLIN(4472)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret = this->head;
HXDLIN(4472)		this->head = ret->next;
HXDLIN(4472)		{
HXDLIN(4472)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = ret;
HXDLIN(4472)			o->elt = null();
HXDLIN(4472)			o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4472)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            		}
HXDLIN(4472)		if (hx::IsNull( this->head )) {
HXDLIN(4472)			this->pushmod = true;
            		}
HXDLIN(4472)		this->modified = true;
HXDLIN(4472)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,pop,(void))

void ZNPList_ZPP_BodyListener_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4476_inlined_pop)
HXLINE(4485)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret = this->head;
HXLINE(4486)		this->head = ret->next;
HXLINE(4488)		{
HXLINE(4489)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = ret;
HXLINE(4498)			o->elt = null();
HXLINE(4499)			o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXLINE(4500)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            		}
HXLINE(4505)		if (hx::IsNull( this->head )) {
HXLINE(4505)			this->pushmod = true;
            		}
HXLINE(4506)		this->modified = true;
HXLINE(4507)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,inlined_pop,(void))

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4510_pop_unsafe)
HXDLIN(4510)		 ::zpp_nape::callbacks::ZPP_BodyListener ret = this->head->elt;
HXDLIN(4510)		this->pop();
HXDLIN(4510)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,pop_unsafe,return )

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4514_inlined_pop_unsafe)
HXLINE(4523)		 ::zpp_nape::callbacks::ZPP_BodyListener ret = this->head->elt;
HXLINE(4524)		this->pop();
HXLINE(4525)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_BodyListener_obj::remove( ::zpp_nape::callbacks::ZPP_BodyListener obj){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4536_remove)
HXDLIN(4536)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre = null();
HXDLIN(4536)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur = this->head;
HXDLIN(4536)		bool ret = false;
HXDLIN(4536)		while(hx::IsNotNull( cur )){
HXDLIN(4536)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(4536)				{
HXDLIN(4536)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener old;
HXDLIN(4536)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret1;
HXDLIN(4536)					if (hx::IsNull( pre )) {
HXDLIN(4536)						old = this->head;
HXDLIN(4536)						ret1 = old->next;
HXDLIN(4536)						this->head = ret1;
HXDLIN(4536)						if (hx::IsNull( this->head )) {
HXDLIN(4536)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(4536)						old = pre->next;
HXDLIN(4536)						ret1 = old->next;
HXDLIN(4536)						pre->next = ret1;
HXDLIN(4536)						if (hx::IsNull( ret1 )) {
HXDLIN(4536)							this->pushmod = true;
            						}
            					}
HXDLIN(4536)					{
HXDLIN(4536)						 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = old;
HXDLIN(4536)						o->elt = null();
HXDLIN(4536)						o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4536)						::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            					}
HXDLIN(4536)					this->modified = true;
HXDLIN(4536)					this->length--;
HXDLIN(4536)					this->pushmod = true;
            				}
HXDLIN(4536)				ret = true;
HXDLIN(4536)				goto _hx_goto_13;
            			}
HXDLIN(4536)			pre = cur;
HXDLIN(4536)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,remove,(void))

bool ZNPList_ZPP_BodyListener_obj::try_remove( ::zpp_nape::callbacks::ZPP_BodyListener obj){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4538_try_remove)
HXLINE(4547)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre = null();
HXLINE(4548)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur = this->head;
HXLINE(4549)		bool ret = false;
HXLINE(4550)		while(hx::IsNotNull( cur )){
HXLINE(4551)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4552)				this->erase(pre);
HXLINE(4553)				ret = true;
HXLINE(4554)				goto _hx_goto_15;
            			}
HXLINE(4556)			pre = cur;
HXLINE(4557)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(4559)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,try_remove,return )

void ZNPList_ZPP_BodyListener_obj::inlined_remove( ::zpp_nape::callbacks::ZPP_BodyListener obj){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4572_inlined_remove)
HXDLIN(4572)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre = null();
HXDLIN(4572)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur = this->head;
HXDLIN(4572)		bool ret = false;
HXDLIN(4572)		while(hx::IsNotNull( cur )){
HXDLIN(4572)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(4572)				{
HXDLIN(4572)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener old;
HXDLIN(4572)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret1;
HXDLIN(4572)					if (hx::IsNull( pre )) {
HXDLIN(4572)						old = this->head;
HXDLIN(4572)						ret1 = old->next;
HXDLIN(4572)						this->head = ret1;
HXDLIN(4572)						if (hx::IsNull( this->head )) {
HXDLIN(4572)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(4572)						old = pre->next;
HXDLIN(4572)						ret1 = old->next;
HXDLIN(4572)						pre->next = ret1;
HXDLIN(4572)						if (hx::IsNull( ret1 )) {
HXDLIN(4572)							this->pushmod = true;
            						}
            					}
HXDLIN(4572)					{
HXDLIN(4572)						 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = old;
HXDLIN(4572)						o->elt = null();
HXDLIN(4572)						o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4572)						::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            					}
HXDLIN(4572)					this->modified = true;
HXDLIN(4572)					this->length--;
HXDLIN(4572)					this->pushmod = true;
            				}
HXDLIN(4572)				ret = true;
HXDLIN(4572)				goto _hx_goto_17;
            			}
HXDLIN(4572)			pre = cur;
HXDLIN(4572)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,inlined_remove,(void))

bool ZNPList_ZPP_BodyListener_obj::inlined_try_remove( ::zpp_nape::callbacks::ZPP_BodyListener obj){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4576_inlined_try_remove)
HXLINE(4585)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre = null();
HXLINE(4586)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur = this->head;
HXLINE(4587)		bool ret = false;
HXLINE(4588)		while(hx::IsNotNull( cur )){
HXLINE(4589)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4590)				{
HXLINE(4590)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener old;
HXDLIN(4590)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret1;
HXDLIN(4590)					if (hx::IsNull( pre )) {
HXLINE(4590)						old = this->head;
HXDLIN(4590)						ret1 = old->next;
HXDLIN(4590)						this->head = ret1;
HXDLIN(4590)						if (hx::IsNull( this->head )) {
HXLINE(4590)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(4590)						old = pre->next;
HXDLIN(4590)						ret1 = old->next;
HXDLIN(4590)						pre->next = ret1;
HXDLIN(4590)						if (hx::IsNull( ret1 )) {
HXLINE(4590)							this->pushmod = true;
            						}
            					}
HXDLIN(4590)					{
HXLINE(4590)						 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = old;
HXDLIN(4590)						o->elt = null();
HXDLIN(4590)						o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4590)						::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            					}
HXDLIN(4590)					this->modified = true;
HXDLIN(4590)					this->length--;
HXDLIN(4590)					this->pushmod = true;
            				}
HXLINE(4591)				ret = true;
HXLINE(4592)				goto _hx_goto_19;
            			}
HXLINE(4594)			pre = cur;
HXLINE(4595)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(4597)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4600_erase)
HXDLIN(4600)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener old;
HXDLIN(4600)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXDLIN(4600)		if (hx::IsNull( pre )) {
HXDLIN(4600)			old = this->head;
HXDLIN(4600)			ret = old->next;
HXDLIN(4600)			this->head = ret;
HXDLIN(4600)			if (hx::IsNull( this->head )) {
HXDLIN(4600)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(4600)			old = pre->next;
HXDLIN(4600)			ret = old->next;
HXDLIN(4600)			pre->next = ret;
HXDLIN(4600)			if (hx::IsNull( ret )) {
HXDLIN(4600)				this->pushmod = true;
            			}
            		}
HXDLIN(4600)		{
HXDLIN(4600)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = old;
HXDLIN(4600)			o->elt = null();
HXDLIN(4600)			o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4600)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            		}
HXDLIN(4600)		this->modified = true;
HXDLIN(4600)		this->length--;
HXDLIN(4600)		this->pushmod = true;
HXDLIN(4600)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4604_inlined_erase)
HXLINE(4613)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener old;
HXLINE(4614)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXLINE(4615)		if (hx::IsNull( pre )) {
HXLINE(4616)			old = this->head;
HXLINE(4617)			ret = old->next;
HXLINE(4618)			this->head = ret;
HXLINE(4619)			if (hx::IsNull( this->head )) {
HXLINE(4619)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(4622)			old = pre->next;
HXLINE(4623)			ret = old->next;
HXLINE(4624)			pre->next = ret;
HXLINE(4625)			if (hx::IsNull( ret )) {
HXLINE(4625)				this->pushmod = true;
            			}
            		}
HXLINE(4628)		{
HXLINE(4629)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = old;
HXLINE(4638)			o->elt = null();
HXLINE(4639)			o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXLINE(4640)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            		}
HXLINE(4645)		this->modified = true;
HXLINE(4646)		this->length--;
HXLINE(4647)		this->pushmod = true;
HXLINE(4648)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre,int n){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4650_splice)
HXLINE(4651)		while(true){
HXLINE(4651)			bool _hx_tmp;
HXDLIN(4651)			n = (n - 1);
HXDLIN(4651)			if (((n + 1) > 0)) {
HXLINE(4651)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(4651)				_hx_tmp = false;
            			}
HXDLIN(4651)			if (!(_hx_tmp)) {
HXLINE(4651)				goto _hx_goto_23;
            			}
HXDLIN(4651)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(4652)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_BodyListener_obj,splice,return )

void ZNPList_ZPP_BodyListener_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4655_clear)
HXDLIN(4655)		while(hx::IsNotNull( this->head )){
HXDLIN(4655)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret = this->head;
HXDLIN(4655)			this->head = ret->next;
HXDLIN(4655)			{
HXDLIN(4655)				 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = ret;
HXDLIN(4655)				o->elt = null();
HXDLIN(4655)				o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4655)				::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            			}
HXDLIN(4655)			if (hx::IsNull( this->head )) {
HXDLIN(4655)				this->pushmod = true;
            			}
HXDLIN(4655)			this->modified = true;
HXDLIN(4655)			this->length--;
            		}
HXDLIN(4655)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,clear,(void))

void ZNPList_ZPP_BodyListener_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4660_inlined_clear)
HXLINE(4661)		while(hx::IsNotNull( this->head )){
HXLINE(4661)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret = this->head;
HXDLIN(4661)			this->head = ret->next;
HXDLIN(4661)			{
HXLINE(4661)				 ::zpp_nape::util::ZNPNode_ZPP_BodyListener o = ret;
HXDLIN(4661)				o->elt = null();
HXDLIN(4661)				o->next = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN(4661)				::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = o;
            			}
HXDLIN(4661)			if (hx::IsNull( this->head )) {
HXLINE(4661)				this->pushmod = true;
            			}
HXDLIN(4661)			this->modified = true;
HXDLIN(4661)			this->length--;
            		}
HXLINE(4662)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,inlined_clear,(void))

void ZNPList_ZPP_BodyListener_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4665_reverse)
HXLINE(4666)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur = this->head;
HXLINE(4667)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener pre = null();
HXLINE(4668)		while(hx::IsNotNull( cur )){
HXLINE(4669)			 ::zpp_nape::util::ZNPNode_ZPP_BodyListener nx = cur->next;
HXLINE(4670)			cur->next = pre;
HXLINE(4671)			this->head = cur;
HXLINE(4672)			pre = cur;
HXLINE(4673)			cur = nx;
            		}
HXLINE(4675)		this->modified = true;
HXLINE(4676)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,reverse,(void))

bool ZNPList_ZPP_BodyListener_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4681_empty)
HXDLIN(4681)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,empty,return )

int ZNPList_ZPP_BodyListener_obj::size(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4686_size)
HXDLIN(4686)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,size,return )

bool ZNPList_ZPP_BodyListener_obj::has( ::zpp_nape::callbacks::ZPP_BodyListener obj){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4689_has)
HXDLIN(4689)		bool ret;
HXDLIN(4689)		{
HXDLIN(4689)			ret = false;
HXDLIN(4689)			{
HXDLIN(4689)				 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = this->head;
HXDLIN(4689)				while(hx::IsNotNull( cx_ite )){
HXDLIN(4689)					 ::zpp_nape::callbacks::ZPP_BodyListener npite = cx_ite->elt;
HXDLIN(4689)					if (hx::IsEq( npite,obj )) {
HXDLIN(4689)						ret = true;
HXDLIN(4689)						goto _hx_goto_33;
            					}
HXDLIN(4689)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(4689)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,has,return )

bool ZNPList_ZPP_BodyListener_obj::inlined_has( ::zpp_nape::callbacks::ZPP_BodyListener obj){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4693_inlined_has)
HXLINE(4702)		bool ret;
HXLINE(4703)		{
HXLINE(4704)			ret = false;
HXLINE(4705)			{
HXLINE(4706)				 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = this->head;
HXLINE(4707)				while(hx::IsNotNull( cx_ite )){
HXLINE(4708)					 ::zpp_nape::callbacks::ZPP_BodyListener npite = cx_ite->elt;
HXLINE(4710)					if (hx::IsEq( npite,obj )) {
HXLINE(4711)						ret = true;
HXLINE(4712)						goto _hx_goto_35;
            					}
HXLINE(4715)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(4719)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,inlined_has,return )

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::front(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4724_front)
HXDLIN(4724)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,front,return )

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::back(){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4726_back)
HXLINE(4727)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret = this->head;
HXLINE(4728)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cur = ret;
HXLINE(4729)		while(hx::IsNotNull( cur )){
HXLINE(4730)			ret = cur;
HXLINE(4731)			cur = cur->next;
            		}
HXLINE(4733)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_BodyListener_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4735_iterator_at)
HXLINE(4744)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret = this->head;
HXLINE(4745)		while(true){
HXLINE(4745)			bool _hx_tmp;
HXDLIN(4745)			ind = (ind - 1);
HXDLIN(4745)			if (((ind + 1) > 0)) {
HXLINE(4745)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(4745)				_hx_tmp = false;
            			}
HXDLIN(4745)			if (!(_hx_tmp)) {
HXLINE(4745)				goto _hx_goto_40;
            			}
HXDLIN(4745)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(4746)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,iterator_at,return )

 ::zpp_nape::callbacks::ZPP_BodyListener ZNPList_ZPP_BodyListener_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_e38b7c5fadbdbc95_4748_at)
HXLINE(4757)		 ::zpp_nape::util::ZNPNode_ZPP_BodyListener it = this->iterator_at(ind);
HXLINE(4758)		if (hx::IsNotNull( it )) {
HXLINE(4758)			return it->elt;
            		}
            		else {
HXLINE(4758)			return null();
            		}
HXDLIN(4758)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_BodyListener_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_BodyListener_obj > ZNPList_ZPP_BodyListener_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_BodyListener_obj > __this = new ZNPList_ZPP_BodyListener_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_BodyListener_obj > ZNPList_ZPP_BodyListener_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_BodyListener_obj *__this = (ZNPList_ZPP_BodyListener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_BodyListener_obj), true, "zpp_nape.util.ZNPList_ZPP_BodyListener"));
	*(void **)__this = ZNPList_ZPP_BodyListener_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_BodyListener_obj::ZNPList_ZPP_BodyListener_obj()
{
}

void ZNPList_ZPP_BodyListener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_BodyListener);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_BodyListener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_BodyListener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_BodyListener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_BodyListener >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_BodyListener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_BodyListener_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_BodyListener */ ,(int)offsetof(ZNPList_ZPP_BodyListener_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_BodyListener_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_BodyListener_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_BodyListener_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_BodyListener_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_BodyListener_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_BodyListener_obj::__mClass;

void ZNPList_ZPP_BodyListener_obj::__register()
{
	ZNPList_ZPP_BodyListener_obj _hx_dummy;
	ZNPList_ZPP_BodyListener_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_BodyListener",eb,67,85,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_BodyListener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_BodyListener_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_BodyListener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_BodyListener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
