// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2bda949fef87b14e_1009_new,"zpp_nape.util.ZNPList_ZPP_Shape","new",0x046456be,"zpp_nape.util.ZNPList_ZPP_Shape.new","zpp_nape/util/Lists.hx",1009,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1015_begin,"zpp_nape.util.ZNPList_ZPP_Shape","begin",0x3e5b4407,"zpp_nape.util.ZNPList_ZPP_Shape.begin","zpp_nape/util/Lists.hx",1015,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1022_setbegin,"zpp_nape.util.ZNPList_ZPP_Shape","setbegin",0xd5328829,"zpp_nape.util.ZNPList_ZPP_Shape.setbegin","zpp_nape/util/Lists.hx",1022,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1028_add,"zpp_nape.util.ZNPList_ZPP_Shape","add",0x045a787f,"zpp_nape.util.ZNPList_ZPP_Shape.add","zpp_nape/util/Lists.hx",1028,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1032_inlined_add,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_add",0x67d960eb,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_add","zpp_nape/util/Lists.hx",1032,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1078_addAll,"zpp_nape.util.ZNPList_ZPP_Shape","addAll",0x55a451e2,"zpp_nape.util.ZNPList_ZPP_Shape.addAll","zpp_nape/util/Lists.hx",1078,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1088_insert,"zpp_nape.util.ZNPList_ZPP_Shape","insert",0x54868b9b,"zpp_nape.util.ZNPList_ZPP_Shape.insert","zpp_nape/util/Lists.hx",1088,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1092_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_insert",0x54abaeaf,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_insert","zpp_nape/util/Lists.hx",1092,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1136_pop,"zpp_nape.util.ZNPList_ZPP_Shape","pop",0x0465e3ef,"zpp_nape.util.ZNPList_ZPP_Shape.pop","zpp_nape/util/Lists.hx",1136,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1140_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_pop",0x67e4cc5b,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_pop","zpp_nape/util/Lists.hx",1140,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1174_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Shape","pop_unsafe",0x7c1e9db6,"zpp_nape.util.ZNPList_ZPP_Shape.pop_unsafe","zpp_nape/util/Lists.hx",1174,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1178_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_pop_unsafe",0x7d14daca,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_pop_unsafe","zpp_nape/util/Lists.hx",1178,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1200_remove,"zpp_nape.util.ZNPList_ZPP_Shape","remove",0xbb31e4a6,"zpp_nape.util.ZNPList_ZPP_Shape.remove","zpp_nape/util/Lists.hx",1200,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1202_try_remove,"zpp_nape.util.ZNPList_ZPP_Shape","try_remove",0x9348d36a,"zpp_nape.util.ZNPList_ZPP_Shape.try_remove","zpp_nape/util/Lists.hx",1202,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1236_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_remove",0xbb5707ba,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_remove","zpp_nape/util/Lists.hx",1236,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1240_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_try_remove",0x943f107e,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_try_remove","zpp_nape/util/Lists.hx",1240,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1264_erase,"zpp_nape.util.ZNPList_ZPP_Shape","erase",0x012242c4,"zpp_nape.util.ZNPList_ZPP_Shape.erase","zpp_nape/util/Lists.hx",1264,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1268_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_erase",0x707d1e30,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_erase","zpp_nape/util/Lists.hx",1268,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1314_splice,"zpp_nape.util.ZNPList_ZPP_Shape","splice",0x7647cdde,"zpp_nape.util.ZNPList_ZPP_Shape.splice","zpp_nape/util/Lists.hx",1314,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1319_clear,"zpp_nape.util.ZNPList_ZPP_Shape","clear",0xd660cb6b,"zpp_nape.util.ZNPList_ZPP_Shape.clear","zpp_nape/util/Lists.hx",1319,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1324_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_clear",0x45bba6d7,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_clear","zpp_nape/util/Lists.hx",1324,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1329_reverse,"zpp_nape.util.ZNPList_ZPP_Shape","reverse",0x38724680,"zpp_nape.util.ZNPList_ZPP_Shape.reverse","zpp_nape/util/Lists.hx",1329,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1345_empty,"zpp_nape.util.ZNPList_ZPP_Shape","empty",0xfddf946b,"zpp_nape.util.ZNPList_ZPP_Shape.empty","zpp_nape/util/Lists.hx",1345,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1350_size,"zpp_nape.util.ZNPList_ZPP_Shape","size",0xd6b8aca3,"zpp_nape.util.ZNPList_ZPP_Shape.size","zpp_nape/util/Lists.hx",1350,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1353_has,"zpp_nape.util.ZNPList_ZPP_Shape","has",0x045fc5b8,"zpp_nape.util.ZNPList_ZPP_Shape.has","zpp_nape/util/Lists.hx",1353,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1357_inlined_has,"zpp_nape.util.ZNPList_ZPP_Shape","inlined_has",0x67deae24,"zpp_nape.util.ZNPList_ZPP_Shape.inlined_has","zpp_nape/util/Lists.hx",1357,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1388_front,"zpp_nape.util.ZNPList_ZPP_Shape","front",0x94937287,"zpp_nape.util.ZNPList_ZPP_Shape.front","zpp_nape/util/Lists.hx",1388,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1390_back,"zpp_nape.util.ZNPList_ZPP_Shape","back",0xcb75e609,"zpp_nape.util.ZNPList_ZPP_Shape.back","zpp_nape/util/Lists.hx",1390,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1399_iterator_at,"zpp_nape.util.ZNPList_ZPP_Shape","iterator_at",0x6c7d9e42,"zpp_nape.util.ZNPList_ZPP_Shape.iterator_at","zpp_nape/util/Lists.hx",1399,0x9f4e6754)
HX_LOCAL_STACK_FRAME(_hx_pos_2bda949fef87b14e_1412_at,"zpp_nape.util.ZNPList_ZPP_Shape","at",0x24c14455,"zpp_nape.util.ZNPList_ZPP_Shape.at","zpp_nape/util/Lists.hx",1412,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Shape_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1009_new)
HXLINE(1019)		this->length = 0;
HXLINE(1018)		this->pushmod = false;
HXLINE(1017)		this->modified = false;
HXLINE(1010)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Shape_obj::__CreateEmpty() { return new ZNPList_ZPP_Shape_obj; }

void *ZNPList_ZPP_Shape_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Shape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Shape_obj > _hx_result = new ZNPList_ZPP_Shape_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Shape_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1fd92540;
}

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1015_begin)
HXDLIN(1015)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,begin,return )

void ZNPList_ZPP_Shape_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Shape i){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1022_setbegin)
HXLINE(1023)		this->head = i;
HXLINE(1024)		this->modified = true;
HXLINE(1025)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,setbegin,(void))

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::add( ::zpp_nape::shape::ZPP_Shape o){
            	HX_GC_STACKFRAME(&_hx_pos_2bda949fef87b14e_1028_add)
HXDLIN(1028)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret;
HXDLIN(1028)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool )) {
HXDLIN(1028)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(1028)			ret = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1028)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = ret->next;
HXDLIN(1028)			ret->next = null();
            		}
HXDLIN(1028)		ret->elt = o;
HXDLIN(1028)		 ::zpp_nape::util::ZNPNode_ZPP_Shape temp = ret;
HXDLIN(1028)		temp->next = this->head;
HXDLIN(1028)		this->head = temp;
HXDLIN(1028)		this->modified = true;
HXDLIN(1028)		this->length++;
HXDLIN(1028)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,add,return )

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::inlined_add( ::zpp_nape::shape::ZPP_Shape o){
            	HX_GC_STACKFRAME(&_hx_pos_2bda949fef87b14e_1032_inlined_add)
HXLINE(1042)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret;
HXLINE(1044)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool )) {
HXLINE(1045)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1051)			ret = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXLINE(1052)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = ret->next;
HXLINE(1053)			ret->next = null();
            		}
HXLINE(1060)		ret->elt = o;
HXLINE(1041)		 ::zpp_nape::util::ZNPNode_ZPP_Shape temp = ret;
HXLINE(1063)		temp->next = this->head;
HXLINE(1064)		this->head = temp;
HXLINE(1065)		this->modified = true;
HXLINE(1066)		this->length++;
HXLINE(1067)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,inlined_add,return )

void ZNPList_ZPP_Shape_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Shape x){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1078_addAll)
HXLINE(1079)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = x->head;
HXLINE(1080)		while(hx::IsNotNull( cx_ite )){
HXLINE(1081)			 ::zpp_nape::shape::ZPP_Shape i = cx_ite->elt;
HXLINE(1082)			this->add(i);
HXLINE(1083)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Shape cur, ::zpp_nape::shape::ZPP_Shape o){
            	HX_GC_STACKFRAME(&_hx_pos_2bda949fef87b14e_1088_insert)
HXDLIN(1088)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret;
HXDLIN(1088)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool )) {
HXDLIN(1088)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::__alloc( HX_CTX );
            		}
            		else {
HXDLIN(1088)			ret = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1088)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = ret->next;
HXDLIN(1088)			ret->next = null();
            		}
HXDLIN(1088)		ret->elt = o;
HXDLIN(1088)		 ::zpp_nape::util::ZNPNode_ZPP_Shape temp = ret;
HXDLIN(1088)		if (hx::IsNull( cur )) {
HXDLIN(1088)			temp->next = this->head;
HXDLIN(1088)			this->head = temp;
            		}
            		else {
HXDLIN(1088)			temp->next = cur->next;
HXDLIN(1088)			cur->next = temp;
            		}
HXDLIN(1088)		this->pushmod = (this->modified = true);
HXDLIN(1088)		this->length++;
HXDLIN(1088)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Shape_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Shape cur, ::zpp_nape::shape::ZPP_Shape o){
            	HX_GC_STACKFRAME(&_hx_pos_2bda949fef87b14e_1092_inlined_insert)
HXLINE(1102)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret;
HXLINE(1104)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool )) {
HXLINE(1105)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1111)			ret = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXLINE(1112)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = ret->next;
HXLINE(1113)			ret->next = null();
            		}
HXLINE(1120)		ret->elt = o;
HXLINE(1101)		 ::zpp_nape::util::ZNPNode_ZPP_Shape temp = ret;
HXLINE(1123)		if (hx::IsNull( cur )) {
HXLINE(1124)			temp->next = this->head;
HXLINE(1125)			this->head = temp;
            		}
            		else {
HXLINE(1128)			temp->next = cur->next;
HXLINE(1129)			cur->next = temp;
            		}
HXLINE(1131)		this->pushmod = (this->modified = true);
HXLINE(1132)		this->length++;
HXLINE(1133)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Shape_obj,inlined_insert,return )

void ZNPList_ZPP_Shape_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1136_pop)
HXDLIN(1136)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret = this->head;
HXDLIN(1136)		this->head = ret->next;
HXDLIN(1136)		{
HXDLIN(1136)			 ::zpp_nape::util::ZNPNode_ZPP_Shape o = ret;
HXDLIN(1136)			o->elt = null();
HXDLIN(1136)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1136)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            		}
HXDLIN(1136)		if (hx::IsNull( this->head )) {
HXDLIN(1136)			this->pushmod = true;
            		}
HXDLIN(1136)		this->modified = true;
HXDLIN(1136)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,pop,(void))

void ZNPList_ZPP_Shape_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1140_inlined_pop)
HXLINE(1149)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret = this->head;
HXLINE(1150)		this->head = ret->next;
HXLINE(1152)		{
HXLINE(1153)			 ::zpp_nape::util::ZNPNode_ZPP_Shape o = ret;
HXLINE(1162)			o->elt = null();
HXLINE(1163)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXLINE(1164)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            		}
HXLINE(1169)		if (hx::IsNull( this->head )) {
HXLINE(1169)			this->pushmod = true;
            		}
HXLINE(1170)		this->modified = true;
HXLINE(1171)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,inlined_pop,(void))

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1174_pop_unsafe)
HXDLIN(1174)		 ::zpp_nape::shape::ZPP_Shape ret = this->head->elt;
HXDLIN(1174)		this->pop();
HXDLIN(1174)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,pop_unsafe,return )

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1178_inlined_pop_unsafe)
HXLINE(1187)		 ::zpp_nape::shape::ZPP_Shape ret = this->head->elt;
HXLINE(1188)		this->pop();
HXLINE(1189)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Shape_obj::remove( ::zpp_nape::shape::ZPP_Shape obj){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1200_remove)
HXDLIN(1200)		 ::zpp_nape::util::ZNPNode_ZPP_Shape pre = null();
HXDLIN(1200)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cur = this->head;
HXDLIN(1200)		bool ret = false;
HXDLIN(1200)		while(hx::IsNotNull( cur )){
HXDLIN(1200)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(1200)				{
HXDLIN(1200)					 ::zpp_nape::util::ZNPNode_ZPP_Shape old;
HXDLIN(1200)					 ::zpp_nape::util::ZNPNode_ZPP_Shape ret1;
HXDLIN(1200)					if (hx::IsNull( pre )) {
HXDLIN(1200)						old = this->head;
HXDLIN(1200)						ret1 = old->next;
HXDLIN(1200)						this->head = ret1;
HXDLIN(1200)						if (hx::IsNull( this->head )) {
HXDLIN(1200)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(1200)						old = pre->next;
HXDLIN(1200)						ret1 = old->next;
HXDLIN(1200)						pre->next = ret1;
HXDLIN(1200)						if (hx::IsNull( ret1 )) {
HXDLIN(1200)							this->pushmod = true;
            						}
            					}
HXDLIN(1200)					{
HXDLIN(1200)						 ::zpp_nape::util::ZNPNode_ZPP_Shape o = old;
HXDLIN(1200)						o->elt = null();
HXDLIN(1200)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1200)						::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            					}
HXDLIN(1200)					this->modified = true;
HXDLIN(1200)					this->length--;
HXDLIN(1200)					this->pushmod = true;
            				}
HXDLIN(1200)				ret = true;
HXDLIN(1200)				goto _hx_goto_13;
            			}
HXDLIN(1200)			pre = cur;
HXDLIN(1200)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,remove,(void))

bool ZNPList_ZPP_Shape_obj::try_remove( ::zpp_nape::shape::ZPP_Shape obj){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1202_try_remove)
HXLINE(1211)		 ::zpp_nape::util::ZNPNode_ZPP_Shape pre = null();
HXLINE(1212)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cur = this->head;
HXLINE(1213)		bool ret = false;
HXLINE(1214)		while(hx::IsNotNull( cur )){
HXLINE(1215)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(1216)				this->erase(pre);
HXLINE(1217)				ret = true;
HXLINE(1218)				goto _hx_goto_15;
            			}
HXLINE(1220)			pre = cur;
HXLINE(1221)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(1223)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,try_remove,return )

void ZNPList_ZPP_Shape_obj::inlined_remove( ::zpp_nape::shape::ZPP_Shape obj){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1236_inlined_remove)
HXDLIN(1236)		 ::zpp_nape::util::ZNPNode_ZPP_Shape pre = null();
HXDLIN(1236)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cur = this->head;
HXDLIN(1236)		bool ret = false;
HXDLIN(1236)		while(hx::IsNotNull( cur )){
HXDLIN(1236)			if (hx::IsEq( cur->elt,obj )) {
HXDLIN(1236)				{
HXDLIN(1236)					 ::zpp_nape::util::ZNPNode_ZPP_Shape old;
HXDLIN(1236)					 ::zpp_nape::util::ZNPNode_ZPP_Shape ret1;
HXDLIN(1236)					if (hx::IsNull( pre )) {
HXDLIN(1236)						old = this->head;
HXDLIN(1236)						ret1 = old->next;
HXDLIN(1236)						this->head = ret1;
HXDLIN(1236)						if (hx::IsNull( this->head )) {
HXDLIN(1236)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN(1236)						old = pre->next;
HXDLIN(1236)						ret1 = old->next;
HXDLIN(1236)						pre->next = ret1;
HXDLIN(1236)						if (hx::IsNull( ret1 )) {
HXDLIN(1236)							this->pushmod = true;
            						}
            					}
HXDLIN(1236)					{
HXDLIN(1236)						 ::zpp_nape::util::ZNPNode_ZPP_Shape o = old;
HXDLIN(1236)						o->elt = null();
HXDLIN(1236)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1236)						::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            					}
HXDLIN(1236)					this->modified = true;
HXDLIN(1236)					this->length--;
HXDLIN(1236)					this->pushmod = true;
            				}
HXDLIN(1236)				ret = true;
HXDLIN(1236)				goto _hx_goto_17;
            			}
HXDLIN(1236)			pre = cur;
HXDLIN(1236)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,inlined_remove,(void))

bool ZNPList_ZPP_Shape_obj::inlined_try_remove( ::zpp_nape::shape::ZPP_Shape obj){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1240_inlined_try_remove)
HXLINE(1249)		 ::zpp_nape::util::ZNPNode_ZPP_Shape pre = null();
HXLINE(1250)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cur = this->head;
HXLINE(1251)		bool ret = false;
HXLINE(1252)		while(hx::IsNotNull( cur )){
HXLINE(1253)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(1254)				{
HXLINE(1254)					 ::zpp_nape::util::ZNPNode_ZPP_Shape old;
HXDLIN(1254)					 ::zpp_nape::util::ZNPNode_ZPP_Shape ret1;
HXDLIN(1254)					if (hx::IsNull( pre )) {
HXLINE(1254)						old = this->head;
HXDLIN(1254)						ret1 = old->next;
HXDLIN(1254)						this->head = ret1;
HXDLIN(1254)						if (hx::IsNull( this->head )) {
HXLINE(1254)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(1254)						old = pre->next;
HXDLIN(1254)						ret1 = old->next;
HXDLIN(1254)						pre->next = ret1;
HXDLIN(1254)						if (hx::IsNull( ret1 )) {
HXLINE(1254)							this->pushmod = true;
            						}
            					}
HXDLIN(1254)					{
HXLINE(1254)						 ::zpp_nape::util::ZNPNode_ZPP_Shape o = old;
HXDLIN(1254)						o->elt = null();
HXDLIN(1254)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1254)						::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            					}
HXDLIN(1254)					this->modified = true;
HXDLIN(1254)					this->length--;
HXDLIN(1254)					this->pushmod = true;
            				}
HXLINE(1255)				ret = true;
HXLINE(1256)				goto _hx_goto_19;
            			}
HXLINE(1258)			pre = cur;
HXLINE(1259)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(1261)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Shape pre){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1264_erase)
HXDLIN(1264)		 ::zpp_nape::util::ZNPNode_ZPP_Shape old;
HXDLIN(1264)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret;
HXDLIN(1264)		if (hx::IsNull( pre )) {
HXDLIN(1264)			old = this->head;
HXDLIN(1264)			ret = old->next;
HXDLIN(1264)			this->head = ret;
HXDLIN(1264)			if (hx::IsNull( this->head )) {
HXDLIN(1264)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN(1264)			old = pre->next;
HXDLIN(1264)			ret = old->next;
HXDLIN(1264)			pre->next = ret;
HXDLIN(1264)			if (hx::IsNull( ret )) {
HXDLIN(1264)				this->pushmod = true;
            			}
            		}
HXDLIN(1264)		{
HXDLIN(1264)			 ::zpp_nape::util::ZNPNode_ZPP_Shape o = old;
HXDLIN(1264)			o->elt = null();
HXDLIN(1264)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1264)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            		}
HXDLIN(1264)		this->modified = true;
HXDLIN(1264)		this->length--;
HXDLIN(1264)		this->pushmod = true;
HXDLIN(1264)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Shape pre){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1268_inlined_erase)
HXLINE(1277)		 ::zpp_nape::util::ZNPNode_ZPP_Shape old;
HXLINE(1278)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret;
HXLINE(1279)		if (hx::IsNull( pre )) {
HXLINE(1280)			old = this->head;
HXLINE(1281)			ret = old->next;
HXLINE(1282)			this->head = ret;
HXLINE(1283)			if (hx::IsNull( this->head )) {
HXLINE(1283)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(1286)			old = pre->next;
HXLINE(1287)			ret = old->next;
HXLINE(1288)			pre->next = ret;
HXLINE(1289)			if (hx::IsNull( ret )) {
HXLINE(1289)				this->pushmod = true;
            			}
            		}
HXLINE(1292)		{
HXLINE(1293)			 ::zpp_nape::util::ZNPNode_ZPP_Shape o = old;
HXLINE(1302)			o->elt = null();
HXLINE(1303)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXLINE(1304)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            		}
HXLINE(1309)		this->modified = true;
HXLINE(1310)		this->length--;
HXLINE(1311)		this->pushmod = true;
HXLINE(1312)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Shape pre,int n){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1314_splice)
HXLINE(1315)		while(true){
HXLINE(1315)			bool _hx_tmp;
HXDLIN(1315)			n = (n - 1);
HXDLIN(1315)			if (((n + 1) > 0)) {
HXLINE(1315)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(1315)				_hx_tmp = false;
            			}
HXDLIN(1315)			if (!(_hx_tmp)) {
HXLINE(1315)				goto _hx_goto_23;
            			}
HXDLIN(1315)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(1316)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Shape_obj,splice,return )

void ZNPList_ZPP_Shape_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1319_clear)
HXDLIN(1319)		while(hx::IsNotNull( this->head )){
HXDLIN(1319)			 ::zpp_nape::util::ZNPNode_ZPP_Shape ret = this->head;
HXDLIN(1319)			this->head = ret->next;
HXDLIN(1319)			{
HXDLIN(1319)				 ::zpp_nape::util::ZNPNode_ZPP_Shape o = ret;
HXDLIN(1319)				o->elt = null();
HXDLIN(1319)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1319)				::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            			}
HXDLIN(1319)			if (hx::IsNull( this->head )) {
HXDLIN(1319)				this->pushmod = true;
            			}
HXDLIN(1319)			this->modified = true;
HXDLIN(1319)			this->length--;
            		}
HXDLIN(1319)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,clear,(void))

void ZNPList_ZPP_Shape_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1324_inlined_clear)
HXLINE(1325)		while(hx::IsNotNull( this->head )){
HXLINE(1325)			 ::zpp_nape::util::ZNPNode_ZPP_Shape ret = this->head;
HXDLIN(1325)			this->head = ret->next;
HXDLIN(1325)			{
HXLINE(1325)				 ::zpp_nape::util::ZNPNode_ZPP_Shape o = ret;
HXDLIN(1325)				o->elt = null();
HXDLIN(1325)				o->next = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool;
HXDLIN(1325)				::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = o;
            			}
HXDLIN(1325)			if (hx::IsNull( this->head )) {
HXLINE(1325)				this->pushmod = true;
            			}
HXDLIN(1325)			this->modified = true;
HXDLIN(1325)			this->length--;
            		}
HXLINE(1326)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,inlined_clear,(void))

void ZNPList_ZPP_Shape_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1329_reverse)
HXLINE(1330)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cur = this->head;
HXLINE(1331)		 ::zpp_nape::util::ZNPNode_ZPP_Shape pre = null();
HXLINE(1332)		while(hx::IsNotNull( cur )){
HXLINE(1333)			 ::zpp_nape::util::ZNPNode_ZPP_Shape nx = cur->next;
HXLINE(1334)			cur->next = pre;
HXLINE(1335)			this->head = cur;
HXLINE(1336)			pre = cur;
HXLINE(1337)			cur = nx;
            		}
HXLINE(1339)		this->modified = true;
HXLINE(1340)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,reverse,(void))

bool ZNPList_ZPP_Shape_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1345_empty)
HXDLIN(1345)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,empty,return )

int ZNPList_ZPP_Shape_obj::size(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1350_size)
HXDLIN(1350)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,size,return )

bool ZNPList_ZPP_Shape_obj::has( ::zpp_nape::shape::ZPP_Shape obj){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1353_has)
HXDLIN(1353)		bool ret;
HXDLIN(1353)		{
HXDLIN(1353)			ret = false;
HXDLIN(1353)			{
HXDLIN(1353)				 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = this->head;
HXDLIN(1353)				while(hx::IsNotNull( cx_ite )){
HXDLIN(1353)					 ::zpp_nape::shape::ZPP_Shape npite = cx_ite->elt;
HXDLIN(1353)					if (hx::IsEq( npite,obj )) {
HXDLIN(1353)						ret = true;
HXDLIN(1353)						goto _hx_goto_33;
            					}
HXDLIN(1353)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(1353)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,has,return )

bool ZNPList_ZPP_Shape_obj::inlined_has( ::zpp_nape::shape::ZPP_Shape obj){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1357_inlined_has)
HXLINE(1366)		bool ret;
HXLINE(1367)		{
HXLINE(1368)			ret = false;
HXLINE(1369)			{
HXLINE(1370)				 ::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = this->head;
HXLINE(1371)				while(hx::IsNotNull( cx_ite )){
HXLINE(1372)					 ::zpp_nape::shape::ZPP_Shape npite = cx_ite->elt;
HXLINE(1374)					if (hx::IsEq( npite,obj )) {
HXLINE(1375)						ret = true;
HXLINE(1376)						goto _hx_goto_35;
            					}
HXLINE(1379)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(1383)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,inlined_has,return )

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::front(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1388_front)
HXDLIN(1388)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,front,return )

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::back(){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1390_back)
HXLINE(1391)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret = this->head;
HXLINE(1392)		 ::zpp_nape::util::ZNPNode_ZPP_Shape cur = ret;
HXLINE(1393)		while(hx::IsNotNull( cur )){
HXLINE(1394)			ret = cur;
HXLINE(1395)			cur = cur->next;
            		}
HXLINE(1397)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Shape_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Shape ZNPList_ZPP_Shape_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1399_iterator_at)
HXLINE(1408)		 ::zpp_nape::util::ZNPNode_ZPP_Shape ret = this->head;
HXLINE(1409)		while(true){
HXLINE(1409)			bool _hx_tmp;
HXDLIN(1409)			ind = (ind - 1);
HXDLIN(1409)			if (((ind + 1) > 0)) {
HXLINE(1409)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(1409)				_hx_tmp = false;
            			}
HXDLIN(1409)			if (!(_hx_tmp)) {
HXLINE(1409)				goto _hx_goto_40;
            			}
HXDLIN(1409)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(1410)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,iterator_at,return )

 ::zpp_nape::shape::ZPP_Shape ZNPList_ZPP_Shape_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_2bda949fef87b14e_1412_at)
HXLINE(1421)		 ::zpp_nape::util::ZNPNode_ZPP_Shape it = this->iterator_at(ind);
HXLINE(1422)		if (hx::IsNotNull( it )) {
HXLINE(1422)			return it->elt;
            		}
            		else {
HXLINE(1422)			return null();
            		}
HXDLIN(1422)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Shape_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Shape_obj > ZNPList_ZPP_Shape_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Shape_obj > __this = new ZNPList_ZPP_Shape_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Shape_obj > ZNPList_ZPP_Shape_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Shape_obj *__this = (ZNPList_ZPP_Shape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Shape_obj), true, "zpp_nape.util.ZNPList_ZPP_Shape"));
	*(void **)__this = ZNPList_ZPP_Shape_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Shape_obj::ZNPList_ZPP_Shape_obj()
{
}

void ZNPList_ZPP_Shape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Shape);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Shape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Shape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Shape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Shape >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Shape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Shape_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_Shape */ ,(int)offsetof(ZNPList_ZPP_Shape_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Shape_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Shape_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Shape_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Shape_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Shape_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("begin",29,ea,55,b0),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZNPList_ZPP_Shape_obj::__mClass;

void ZNPList_ZPP_Shape_obj::__register()
{
	ZNPList_ZPP_Shape_obj _hx_dummy;
	ZNPList_ZPP_Shape_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.util.ZNPList_ZPP_Shape",cc,df,8e,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Shape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Shape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Shape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Shape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
