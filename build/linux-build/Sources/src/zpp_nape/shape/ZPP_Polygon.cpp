// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <hxinc/nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <hxinc/nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <hxinc/nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <hxinc/nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_EdgeList
#include <hxinc/nape/shape/EdgeList.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <hxinc/nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <hxinc/nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <hxinc/zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <hxinc/zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <hxinc/zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_EdgeList
#include <hxinc/zpp_nape/util/ZPP_EdgeList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_MixVec2List
#include <hxinc/zpp_nape/util/ZPP_MixVec2List.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Vec2List
#include <hxinc/zpp_nape/util/ZPP_Vec2List.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2f179caf7128118_174_new,"zpp_nape.shape.ZPP_Polygon","new",0xb68a7739,"zpp_nape.shape.ZPP_Polygon.new","zpp_nape/shape/Polygon.hx",174,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_184___clear,"zpp_nape.shape.ZPP_Polygon","__clear",0x322f51c6,"zpp_nape.shape.ZPP_Polygon.__clear","zpp_nape/shape/Polygon.hx",184,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_186_lverts_pa_invalidate,"zpp_nape.shape.ZPP_Polygon","lverts_pa_invalidate",0x9dc24ec7,"zpp_nape.shape.ZPP_Polygon.lverts_pa_invalidate","zpp_nape/shape/Polygon.hx",186,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_190_lverts_pa_immutable,"zpp_nape.shape.ZPP_Polygon","lverts_pa_immutable",0x49082076,"zpp_nape.shape.ZPP_Polygon.lverts_pa_immutable","zpp_nape/shape/Polygon.hx",190,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_193_gverts_pa_validate,"zpp_nape.shape.ZPP_Polygon","gverts_pa_validate",0xf5b83087,"zpp_nape.shape.ZPP_Polygon.gverts_pa_validate","zpp_nape/shape/Polygon.hx",193,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_199_lverts_post_adder,"zpp_nape.shape.ZPP_Polygon","lverts_post_adder",0x12ac5731,"zpp_nape.shape.ZPP_Polygon.lverts_post_adder","zpp_nape/shape/Polygon.hx",199,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_293_lverts_subber,"zpp_nape.shape.ZPP_Polygon","lverts_subber",0xcfa82191,"zpp_nape.shape.ZPP_Polygon.lverts_subber","zpp_nape/shape/Polygon.hx",293,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_296_lverts_invalidate,"zpp_nape.shape.ZPP_Polygon","lverts_invalidate",0x6107483d,"zpp_nape.shape.ZPP_Polygon.lverts_invalidate","zpp_nape/shape/Polygon.hx",296,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_299_lverts_validate,"zpp_nape.shape.ZPP_Polygon","lverts_validate",0x95b46ad8,"zpp_nape.shape.ZPP_Polygon.lverts_validate","zpp_nape/shape/Polygon.hx",299,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_302_lverts_modifiable,"zpp_nape.shape.ZPP_Polygon","lverts_modifiable",0x14232dc6,"zpp_nape.shape.ZPP_Polygon.lverts_modifiable","zpp_nape/shape/Polygon.hx",302,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_310_gverts_validate,"zpp_nape.shape.ZPP_Polygon","gverts_validate",0xacca4c13,"zpp_nape.shape.ZPP_Polygon.gverts_validate","zpp_nape/shape/Polygon.hx",310,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_313_edges_validate,"zpp_nape.shape.ZPP_Polygon","edges_validate",0x0d28fd66,"zpp_nape.shape.ZPP_Polygon.edges_validate","zpp_nape/shape/Polygon.hx",313,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_316_getlverts,"zpp_nape.shape.ZPP_Polygon","getlverts",0x1817c365,"zpp_nape.shape.ZPP_Polygon.getlverts","zpp_nape/shape/Polygon.hx",316,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_328_getgverts,"zpp_nape.shape.ZPP_Polygon","getgverts",0x184ef58a,"zpp_nape.shape.ZPP_Polygon.getgverts","zpp_nape/shape/Polygon.hx",328,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_334_getedges,"zpp_nape.shape.ZPP_Polygon","getedges",0x3deaf3c7,"zpp_nape.shape.ZPP_Polygon.getedges","zpp_nape/shape/Polygon.hx",334,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_341_invalidate_lverts,"zpp_nape.shape.ZPP_Polygon","invalidate_lverts",0xa7735cd3,"zpp_nape.shape.ZPP_Polygon.invalidate_lverts","zpp_nape/shape/Polygon.hx",341,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_353_invalidate_laxi,"zpp_nape.shape.ZPP_Polygon","invalidate_laxi",0x7600db83,"zpp_nape.shape.ZPP_Polygon.invalidate_laxi","zpp_nape/shape/Polygon.hx",353,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_359_invalidate_gverts,"zpp_nape.shape.ZPP_Polygon","invalidate_gverts",0xa7aa8ef8,"zpp_nape.shape.ZPP_Polygon.invalidate_gverts","zpp_nape/shape/Polygon.hx",359,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_365_invalidate_gaxi,"zpp_nape.shape.ZPP_Polygon","invalidate_gaxi",0x72b2ca68,"zpp_nape.shape.ZPP_Polygon.invalidate_gaxi","zpp_nape/shape/Polygon.hx",365,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_370_valid,"zpp_nape.shape.ZPP_Polygon","valid",0xe0094415,"zpp_nape.shape.ZPP_Polygon.valid","zpp_nape/shape/Polygon.hx",370,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_703_validate_lverts,"zpp_nape.shape.ZPP_Polygon","validate_lverts",0x1feb06d8,"zpp_nape.shape.ZPP_Polygon.validate_lverts","zpp_nape/shape/Polygon.hx",703,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_714_cleanup_lvert,"zpp_nape.shape.ZPP_Polygon","cleanup_lvert",0x289cf19b,"zpp_nape.shape.ZPP_Polygon.cleanup_lvert","zpp_nape/shape/Polygon.hx",714,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_816_splice_collinear,"zpp_nape.shape.ZPP_Polygon","splice_collinear",0x6723fbe9,"zpp_nape.shape.ZPP_Polygon.splice_collinear","zpp_nape/shape/Polygon.hx",816,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_821_splice_collinear_real,"zpp_nape.shape.ZPP_Polygon","splice_collinear_real",0x956d9eb4,"zpp_nape.shape.ZPP_Polygon.splice_collinear_real","zpp_nape/shape/Polygon.hx",821,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_877_reverse_vertices,"zpp_nape.shape.ZPP_Polygon","reverse_vertices",0xfec98f7d,"zpp_nape.shape.ZPP_Polygon.reverse_vertices","zpp_nape/shape/Polygon.hx",877,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_890_validate_laxi,"zpp_nape.shape.ZPP_Polygon","validate_laxi",0xdf5b8a48,"zpp_nape.shape.ZPP_Polygon.validate_laxi","zpp_nape/shape/Polygon.hx",890,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1056_validate_gverts,"zpp_nape.shape.ZPP_Polygon","validate_gverts",0x202238fd,"zpp_nape.shape.ZPP_Polygon.validate_gverts","zpp_nape/shape/Polygon.hx",1056,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1082_validate_gaxi,"zpp_nape.shape.ZPP_Polygon","validate_gaxi",0xdc0d792d,"zpp_nape.shape.ZPP_Polygon.validate_gaxi","zpp_nape/shape/Polygon.hx",1082,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1171___validate_aabb,"zpp_nape.shape.ZPP_Polygon","__validate_aabb",0x34bf4f62,"zpp_nape.shape.ZPP_Polygon.__validate_aabb","zpp_nape/shape/Polygon.hx",1171,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1233__force_validate_aabb,"zpp_nape.shape.ZPP_Polygon","_force_validate_aabb",0x369e419d,"zpp_nape.shape.ZPP_Polygon._force_validate_aabb","zpp_nape/shape/Polygon.hx",1233,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1302___validate_sweepRadius,"zpp_nape.shape.ZPP_Polygon","__validate_sweepRadius",0xb90ce2dc,"zpp_nape.shape.ZPP_Polygon.__validate_sweepRadius","zpp_nape/shape/Polygon.hx",1302,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1337___validate_area_inertia,"zpp_nape.shape.ZPP_Polygon","__validate_area_inertia",0x7eb6a9ca,"zpp_nape.shape.ZPP_Polygon.__validate_area_inertia","zpp_nape/shape/Polygon.hx",1337,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1393___validate_angDrag,"zpp_nape.shape.ZPP_Polygon","__validate_angDrag",0x856a006c,"zpp_nape.shape.ZPP_Polygon.__validate_angDrag","zpp_nape/shape/Polygon.hx",1393,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1621___validate_localCOM,"zpp_nape.shape.ZPP_Polygon","__validate_localCOM",0xeb39fd58,"zpp_nape.shape.ZPP_Polygon.__validate_localCOM","zpp_nape/shape/Polygon.hx",1621,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1768_localCOM_validate,"zpp_nape.shape.ZPP_Polygon","localCOM_validate",0xe322ee38,"zpp_nape.shape.ZPP_Polygon.localCOM_validate","zpp_nape/shape/Polygon.hx",1768,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1774_localCOM_invalidate,"zpp_nape.shape.ZPP_Polygon","localCOM_invalidate",0xc9a5639d,"zpp_nape.shape.ZPP_Polygon.localCOM_invalidate","zpp_nape/shape/Polygon.hx",1774,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1820_setupLocalCOM,"zpp_nape.shape.ZPP_Polygon","setupLocalCOM",0xdbca874c,"zpp_nape.shape.ZPP_Polygon.setupLocalCOM","zpp_nape/shape/Polygon.hx",1820,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1834___translate,"zpp_nape.shape.ZPP_Polygon","__translate",0xac9ac807,"zpp_nape.shape.ZPP_Polygon.__translate","zpp_nape/shape/Polygon.hx",1834,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1857___scale,"zpp_nape.shape.ZPP_Polygon","__scale",0x62a2aec3,"zpp_nape.shape.ZPP_Polygon.__scale","zpp_nape/shape/Polygon.hx",1857,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1871___rotate,"zpp_nape.shape.ZPP_Polygon","__rotate",0x7ab09802,"zpp_nape.shape.ZPP_Polygon.__rotate","zpp_nape/shape/Polygon.hx",1871,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1909___transform,"zpp_nape.shape.ZPP_Polygon","__transform",0xa8ae1e25,"zpp_nape.shape.ZPP_Polygon.__transform","zpp_nape/shape/Polygon.hx",1909,0x571b0a14)
HX_LOCAL_STACK_FRAME(_hx_pos_a2f179caf7128118_1926___copy,"zpp_nape.shape.ZPP_Polygon","__copy",0xc921859c,"zpp_nape.shape.ZPP_Polygon.__copy","zpp_nape/shape/Polygon.hx",1926,0x571b0a14)
namespace zpp_nape{
namespace shape{

void ZPP_Polygon_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a2f179caf7128118_174_new)
HXLINE( 812)		this->zip_sanitation = false;
HXLINE( 367)		this->zip_valid = false;
HXLINE( 363)		this->zip_gaxi = false;
HXLINE( 358)		this->zip_gverts = false;
HXLINE( 352)		this->zip_laxi = false;
HXLINE( 340)		this->zip_lverts = false;
HXLINE( 183)		this->reverse_flag = false;
HXLINE( 182)		this->edgeCnt = 0;
HXLINE( 181)		this->wrap_edges = null();
HXLINE( 180)		this->edges = null();
HXLINE( 179)		this->wrap_gverts = null();
HXLINE( 178)		this->gverts = null();
HXLINE( 177)		this->wrap_lverts = null();
HXLINE( 176)		this->lverts = null();
HXLINE( 175)		this->outer_zn = null();
HXLINE(1827)		super::__construct(1);
HXLINE(1828)		this->polygon = hx::ObjectPtr<OBJ_>(this);
HXLINE(1829)		this->lverts =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
HXLINE(1830)		this->gverts =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
HXLINE(1831)		this->edges =  ::zpp_nape::util::ZNPList_ZPP_Edge_obj::__alloc( HX_CTX );
HXLINE(1832)		this->edgeCnt = 0;
            	}

Dynamic ZPP_Polygon_obj::__CreateEmpty() { return new ZPP_Polygon_obj; }

void *ZPP_Polygon_obj::_hx_vtable = 0;

Dynamic ZPP_Polygon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Polygon_obj > _hx_result = new ZPP_Polygon_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Polygon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x31c749e8) {
		if (inClassId<=(int)0x247ad52d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x247ad52d;
		} else {
			return inClassId==(int)0x31c749e8;
		}
	} else {
		return inClassId==(int)0x54b7e901;
	}
}

void ZPP_Polygon_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_184___clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_hx___clear,(void))

void ZPP_Polygon_obj::lverts_pa_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_186_lverts_pa_invalidate)
HXDLIN( 186)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,lverts_pa_invalidate,(void))

void ZPP_Polygon_obj::lverts_pa_immutable(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_190_lverts_pa_immutable)
HXDLIN( 190)		bool _hx_tmp;
HXDLIN( 190)		bool _hx_tmp1;
HXDLIN( 190)		if (hx::IsNotNull( this->body )) {
HXDLIN( 190)			_hx_tmp1 = (this->body->type == 1);
            		}
            		else {
HXDLIN( 190)			_hx_tmp1 = false;
            		}
HXDLIN( 190)		if (_hx_tmp1) {
HXDLIN( 190)			_hx_tmp = hx::IsNotNull( this->body->space );
            		}
            		else {
HXDLIN( 190)			_hx_tmp = false;
            		}
HXDLIN( 190)		if (_hx_tmp) {
HXDLIN( 190)			HX_STACK_DO_THROW(HX_("Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space",0c,95,48,ad));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,lverts_pa_immutable,(void))

void ZPP_Polygon_obj::gverts_pa_validate(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_193_gverts_pa_validate)
HXLINE( 195)		if (hx::IsNull( this->body )) {
HXLINE( 195)			HX_STACK_DO_THROW(HX_("Error: World vertex only makes sense when Polygon is contained in a rigid body",79,3b,cf,2b));
            		}
HXLINE( 197)		if (this->zip_gverts) {
HXLINE( 197)			if (hx::IsNotNull( this->body )) {
HXLINE( 197)				this->zip_gverts = false;
HXDLIN( 197)				this->validate_lverts();
HXDLIN( 197)				{
HXLINE( 197)					 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN( 197)					if (_this->zip_axis) {
HXLINE( 197)						_this->zip_axis = false;
HXDLIN( 197)						{
HXLINE( 197)							_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN( 197)							_this->axisy = ::Math_obj::cos(_this->rot);
            						}
            					}
            				}
HXDLIN( 197)				 ::zpp_nape::geom::ZPP_Vec2 li = this->lverts->next;
HXDLIN( 197)				{
HXLINE( 197)					 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->gverts->next;
HXDLIN( 197)					while(hx::IsNotNull( cx_ite )){
HXLINE( 197)						 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite;
HXDLIN( 197)						{
HXLINE( 197)							 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 197)							li = li->next;
HXDLIN( 197)							{
HXLINE( 197)								g->x = (this->body->posx + ((this->body->axisy * l->x) - (this->body->axisx * l->y)));
HXDLIN( 197)								g->y = (this->body->posy + ((l->x * this->body->axisx) + (l->y * this->body->axisy)));
            							}
            						}
HXDLIN( 197)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,gverts_pa_validate,(void))

void ZPP_Polygon_obj::lverts_post_adder( ::nape::geom::Vec2 x){
            	HX_GC_STACKFRAME(&_hx_pos_a2f179caf7128118_199_lverts_post_adder)
HXLINE( 200)		x->zpp_inner->_invalidate = this->lverts_pa_invalidate_dyn();
HXLINE( 202)		x->zpp_inner->_isimmutable = this->lverts_pa_immutable_dyn();
HXLINE( 204)		 ::zpp_nape::geom::ZPP_Vec2 ite = null();
HXLINE( 205)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ite2 = null();
HXLINE( 206)		{
HXLINE( 207)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE( 208)			while(hx::IsNotNull( cx_ite )){
HXLINE( 209)				 ::zpp_nape::geom::ZPP_Vec2 i = cx_ite;
HXLINE( 211)				if (hx::IsEq( i,x->zpp_inner )) {
HXLINE( 211)					goto _hx_goto_6;
            				}
            				else {
HXLINE( 213)					if (hx::IsNull( ite )) {
HXLINE( 213)						ite = this->gverts->next;
            					}
            					else {
HXLINE( 213)						ite = ite->next;
            					}
HXLINE( 214)					if (hx::IsNull( ite2 )) {
HXLINE( 214)						ite2 = this->edges->head;
            					}
            					else {
HXLINE( 214)						ite2 = ite2->next;
            					}
            				}
HXLINE( 217)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_6:;
            		}
HXLINE( 220)		 ::zpp_nape::geom::ZPP_Vec2 ret;
HXDLIN( 220)		{
HXLINE( 220)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 220)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 220)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 220)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN( 220)				ret->next = null();
            			}
HXDLIN( 220)			ret->weak = false;
            		}
HXDLIN( 220)		ret->_immutable = true;
HXDLIN( 220)		{
HXLINE( 220)			ret->x = ( (Float)(0) );
HXDLIN( 220)			ret->y = ( (Float)(0) );
            		}
HXDLIN( 220)		 ::zpp_nape::geom::ZPP_Vec2 vec = ret;
HXLINE( 221)		this->gverts->insert(ite,vec);
HXLINE( 222)		if (hx::IsNotNull( this->lverts->next->next )) {
HXLINE( 223)			if (hx::IsNull( this->lverts->next->next->next )) {
HXLINE( 224)				 ::zpp_nape::shape::ZPP_Edge ed;
HXLINE( 226)				if (hx::IsNull( ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool )) {
HXLINE( 227)					ed =  ::zpp_nape::shape::ZPP_Edge_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 233)					ed = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool;
HXLINE( 234)					::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = ed->next;
HXLINE( 235)					ed->next = null();
            				}
HXLINE( 242)				ed->polygon = hx::ObjectPtr<OBJ_>(this);
HXLINE( 243)				this->edges->add(ed);
HXLINE( 244)				 ::zpp_nape::shape::ZPP_Edge ed1;
HXLINE( 246)				if (hx::IsNull( ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool )) {
HXLINE( 247)					ed1 =  ::zpp_nape::shape::ZPP_Edge_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 253)					ed1 = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool;
HXLINE( 254)					::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = ed1->next;
HXLINE( 255)					ed1->next = null();
            				}
HXLINE( 262)				ed1->polygon = hx::ObjectPtr<OBJ_>(this);
HXLINE( 263)				this->edges->add(ed1);
HXLINE( 264)				 ::zpp_nape::shape::ZPP_Polygon _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 264)				_hx_tmp->edgeCnt = (_hx_tmp->edgeCnt + 2);
            			}
            			else {
HXLINE( 267)				 ::zpp_nape::shape::ZPP_Edge ed2;
HXLINE( 269)				if (hx::IsNull( ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool )) {
HXLINE( 270)					ed2 =  ::zpp_nape::shape::ZPP_Edge_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 276)					ed2 = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool;
HXLINE( 277)					::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = ed2->next;
HXLINE( 278)					ed2->next = null();
            				}
HXLINE( 285)				ed2->polygon = hx::ObjectPtr<OBJ_>(this);
HXLINE( 286)				this->edges->insert(ite2,ed2);
HXLINE( 287)				this->edgeCnt++;
            			}
            		}
HXLINE( 290)		vec->_validate = this->gverts_pa_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,lverts_post_adder,(void))

void ZPP_Polygon_obj::lverts_subber( ::nape::geom::Vec2 x){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_293_lverts_subber)
HXDLIN( 293)		this->cleanup_lvert(x->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,lverts_subber,(void))

void ZPP_Polygon_obj::lverts_invalidate( ::zpp_nape::util::ZPP_Vec2List _){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_296_lverts_invalidate)
HXDLIN( 296)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,lverts_invalidate,(void))

void ZPP_Polygon_obj::lverts_validate(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_299_lverts_validate)
HXDLIN( 299)		this->validate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,lverts_validate,(void))

void ZPP_Polygon_obj::lverts_modifiable(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_302_lverts_modifiable)
HXLINE( 303)		this->immutable_midstep(HX_("Polygon::localVerts",51,f5,3d,c9));
HXLINE( 305)		bool _hx_tmp;
HXDLIN( 305)		bool _hx_tmp1;
HXDLIN( 305)		if (hx::IsNotNull( this->body )) {
HXLINE( 305)			_hx_tmp1 = (this->body->type == 1);
            		}
            		else {
HXLINE( 305)			_hx_tmp1 = false;
            		}
HXDLIN( 305)		if (_hx_tmp1) {
HXLINE( 305)			_hx_tmp = hx::IsNotNull( this->body->space );
            		}
            		else {
HXLINE( 305)			_hx_tmp = false;
            		}
HXDLIN( 305)		if (_hx_tmp) {
HXLINE( 305)			HX_STACK_DO_THROW(HX_("Error: Cannot modifiy shapes of static object once added to Space",96,ea,c2,bf));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,lverts_modifiable,(void))

void ZPP_Polygon_obj::gverts_validate(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_310_gverts_validate)
HXDLIN( 310)		if (this->zip_gverts) {
HXDLIN( 310)			if (hx::IsNotNull( this->body )) {
HXDLIN( 310)				this->zip_gverts = false;
HXDLIN( 310)				this->validate_lverts();
HXDLIN( 310)				{
HXDLIN( 310)					 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN( 310)					if (_this->zip_axis) {
HXDLIN( 310)						_this->zip_axis = false;
HXDLIN( 310)						{
HXDLIN( 310)							_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN( 310)							_this->axisy = ::Math_obj::cos(_this->rot);
            						}
            					}
            				}
HXDLIN( 310)				 ::zpp_nape::geom::ZPP_Vec2 li = this->lverts->next;
HXDLIN( 310)				{
HXDLIN( 310)					 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->gverts->next;
HXDLIN( 310)					while(hx::IsNotNull( cx_ite )){
HXDLIN( 310)						 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite;
HXDLIN( 310)						{
HXDLIN( 310)							 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 310)							li = li->next;
HXDLIN( 310)							{
HXDLIN( 310)								g->x = (this->body->posx + ((this->body->axisy * l->x) - (this->body->axisx * l->y)));
HXDLIN( 310)								g->y = (this->body->posy + ((l->x * this->body->axisx) + (l->y * this->body->axisy)));
            							}
            						}
HXDLIN( 310)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,gverts_validate,(void))

void ZPP_Polygon_obj::edges_validate(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_313_edges_validate)
HXDLIN( 313)		this->validate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,edges_validate,(void))

void ZPP_Polygon_obj::getlverts(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_316_getlverts)
HXLINE( 317)		 ::zpp_nape::shape::ZPP_Polygon me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 318)		this->wrap_lverts = ::zpp_nape::util::ZPP_MixVec2List_obj::get(this->lverts,null());
HXLINE( 319)		this->wrap_lverts->zpp_inner->post_adder = this->lverts_post_adder_dyn();
HXLINE( 320)		this->wrap_lverts->zpp_inner->subber = this->lverts_subber_dyn();
HXLINE( 321)		this->wrap_lverts->zpp_inner->_invalidate = this->lverts_invalidate_dyn();
HXLINE( 322)		this->wrap_lverts->zpp_inner->_validate = this->lverts_validate_dyn();
HXLINE( 324)		this->wrap_lverts->zpp_inner->_modifiable = this->lverts_modifiable_dyn();
HXLINE( 326)		this->wrap_lverts->zpp_inner->reverse_flag = this->reverse_flag;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,getlverts,(void))

void ZPP_Polygon_obj::getgverts(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_328_getgverts)
HXLINE( 329)		 ::zpp_nape::shape::ZPP_Polygon me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 330)		this->wrap_gverts = ::zpp_nape::util::ZPP_MixVec2List_obj::get(this->gverts,true);
HXLINE( 331)		this->wrap_gverts->zpp_inner->reverse_flag = this->reverse_flag;
HXLINE( 332)		this->wrap_gverts->zpp_inner->_validate = this->gverts_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,getgverts,(void))

void ZPP_Polygon_obj::getedges(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_334_getedges)
HXLINE( 335)		 ::zpp_nape::shape::ZPP_Polygon me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 336)		this->wrap_edges = ::zpp_nape::util::ZPP_EdgeList_obj::get(this->edges,true);
HXLINE( 337)		this->wrap_edges->zpp_inner->reverse_flag = this->reverse_flag;
HXLINE( 338)		this->wrap_edges->zpp_inner->_validate = this->edges_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,getedges,(void))

void ZPP_Polygon_obj::invalidate_lverts(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_341_invalidate_lverts)
HXLINE( 342)		this->invalidate_laxi();
HXLINE( 343)		this->invalidate_area_inertia();
HXLINE( 344)		this->invalidate_angDrag();
HXLINE( 345)		this->invalidate_localCOM();
HXLINE( 346)		this->invalidate_gverts();
HXLINE( 347)		this->zip_lverts = true;
HXLINE( 348)		this->zip_valid = true;
HXLINE( 349)		this->zip_sanitation = true;
HXLINE( 350)		if (hx::IsNotNull( this->body )) {
HXLINE( 350)			this->body->wake();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,invalidate_lverts,(void))

void ZPP_Polygon_obj::invalidate_laxi(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_353_invalidate_laxi)
HXLINE( 354)		this->invalidate_gaxi();
HXLINE( 355)		this->zip_sweepRadius = true;
HXLINE( 356)		this->zip_laxi = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,invalidate_laxi,(void))

void ZPP_Polygon_obj::invalidate_gverts(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_359_invalidate_gverts)
HXLINE( 360)		{
HXLINE( 360)			this->zip_aabb = true;
HXDLIN( 360)			if (hx::IsNotNull( this->body )) {
HXLINE( 360)				this->body->zip_aabb = true;
            			}
            		}
HXLINE( 361)		this->zip_gverts = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,invalidate_gverts,(void))

void ZPP_Polygon_obj::invalidate_gaxi(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_365_invalidate_gaxi)
HXDLIN( 365)		this->zip_gaxi = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,invalidate_gaxi,(void))

 ::nape::shape::ValidationResult ZPP_Polygon_obj::valid(){
            	HX_GC_STACKFRAME(&_hx_pos_a2f179caf7128118_370_valid)
HXDLIN( 370)		if (this->zip_valid) {
HXLINE( 371)			this->zip_valid = false;
HXLINE( 372)			if (this->zip_sanitation) {
HXLINE( 372)				this->zip_sanitation = false;
HXDLIN( 372)				this->splice_collinear_real();
            			}
HXLINE( 373)			if ((this->lverts->length < 3)) {
HXLINE( 373)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE )) {
HXLINE( 373)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 373)					::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 373)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 373)				return (this->validation = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE);
            			}
            			else {
HXLINE( 375)				this->validate_lverts();
HXLINE( 376)				this->validate_area_inertia();
HXLINE( 377)				if ((this->area < ::nape::Config_obj::epsilon)) {
HXLINE( 377)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE )) {
HXLINE( 377)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 377)						::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 377)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 377)					return (this->validation = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE);
            				}
            				else {
HXLINE( 379)					bool neg = false;
HXLINE( 380)					bool pos = false;
HXLINE( 381)					{
HXLINE( 382)						bool cx_cont = true;
HXLINE( 383)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE( 384)						 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXLINE( 385)						cx_ite = cx_ite->next;
HXLINE( 386)						 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXLINE( 387)						cx_ite = cx_ite->next;
HXLINE( 388)						while(hx::IsNotNull( cx_ite )){
HXLINE( 389)							 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXLINE( 390)							{
HXLINE( 391)								Float ax = ((Float)0.0);
HXLINE( 392)								Float ay = ((Float)0.0);
HXLINE( 393)								{
HXLINE( 394)									ax = (w->x - v->x);
HXLINE( 395)									ay = (w->y - v->y);
            								}
HXLINE( 397)								Float bx = ((Float)0.0);
HXLINE( 398)								Float by = ((Float)0.0);
HXLINE( 399)								{
HXLINE( 400)									bx = (v->x - u->x);
HXLINE( 401)									by = (v->y - u->y);
            								}
HXLINE( 403)								Float dot = ((by * ax) - (bx * ay));
HXLINE( 404)								if ((dot > ::nape::Config_obj::epsilon)) {
HXLINE( 404)									pos = true;
            								}
            								else {
HXLINE( 405)									if ((dot < -(::nape::Config_obj::epsilon))) {
HXLINE( 405)										neg = true;
            									}
            								}
HXLINE( 406)								bool _hx_tmp;
HXDLIN( 406)								if (pos) {
HXLINE( 406)									_hx_tmp = neg;
            								}
            								else {
HXLINE( 406)									_hx_tmp = false;
            								}
HXDLIN( 406)								if (_hx_tmp) {
HXLINE( 407)									cx_cont = false;
HXLINE( 408)									goto _hx_goto_22;
            								}
            							}
HXLINE( 411)							{
HXLINE( 412)								u = v;
HXLINE( 413)								v = w;
HXLINE( 414)								cx_ite = cx_ite->next;
            							}
            						}
            						_hx_goto_22:;
HXLINE( 417)						if (cx_cont) {
HXLINE( 418)							cx_ite = this->lverts->next;
HXLINE( 419)							 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXLINE( 420)							while(true){
HXLINE( 422)								Float ax1 = ((Float)0.0);
HXLINE( 423)								Float ay1 = ((Float)0.0);
HXLINE( 424)								{
HXLINE( 425)									ax1 = (w1->x - v->x);
HXLINE( 426)									ay1 = (w1->y - v->y);
            								}
HXLINE( 428)								Float bx1 = ((Float)0.0);
HXLINE( 429)								Float by1 = ((Float)0.0);
HXLINE( 430)								{
HXLINE( 431)									bx1 = (v->x - u->x);
HXLINE( 432)									by1 = (v->y - u->y);
            								}
HXLINE( 434)								Float dot1 = ((by1 * ax1) - (bx1 * ay1));
HXLINE( 435)								if ((dot1 > ::nape::Config_obj::epsilon)) {
HXLINE( 435)									pos = true;
            								}
            								else {
HXLINE( 436)									if ((dot1 < -(::nape::Config_obj::epsilon))) {
HXLINE( 436)										neg = true;
            									}
            								}
HXLINE( 437)								bool _hx_tmp1;
HXDLIN( 437)								if (pos) {
HXLINE( 437)									_hx_tmp1 = neg;
            								}
            								else {
HXLINE( 437)									_hx_tmp1 = false;
            								}
HXDLIN( 437)								if (_hx_tmp1) {
HXLINE( 438)									cx_cont = false;
HXLINE( 439)									goto _hx_goto_23;
            								}
HXLINE( 420)								if (!(false)) {
HXLINE( 420)									goto _hx_goto_23;
            								}
            							}
            							_hx_goto_23:;
HXLINE( 444)							if (cx_cont) {
HXLINE( 445)								{
HXLINE( 446)									u = v;
HXLINE( 447)									v = w1;
HXLINE( 448)									cx_ite = cx_ite->next;
            								}
HXLINE( 450)								 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXLINE( 451)								while(true){
HXLINE( 453)									Float ax2 = ((Float)0.0);
HXLINE( 454)									Float ay2 = ((Float)0.0);
HXLINE( 455)									{
HXLINE( 456)										ax2 = (w2->x - v->x);
HXLINE( 457)										ay2 = (w2->y - v->y);
            									}
HXLINE( 459)									Float bx2 = ((Float)0.0);
HXLINE( 460)									Float by2 = ((Float)0.0);
HXLINE( 461)									{
HXLINE( 462)										bx2 = (v->x - u->x);
HXLINE( 463)										by2 = (v->y - u->y);
            									}
HXLINE( 465)									Float dot2 = ((by2 * ax2) - (bx2 * ay2));
HXLINE( 466)									if ((dot2 > ::nape::Config_obj::epsilon)) {
HXLINE( 466)										pos = true;
            									}
            									else {
HXLINE( 467)										if ((dot2 < -(::nape::Config_obj::epsilon))) {
HXLINE( 467)											neg = true;
            										}
            									}
HXLINE( 468)									bool _hx_tmp2;
HXDLIN( 468)									if (pos) {
HXLINE( 468)										_hx_tmp2 = neg;
            									}
            									else {
HXLINE( 468)										_hx_tmp2 = false;
            									}
HXDLIN( 468)									if (_hx_tmp2) {
HXLINE( 468)										goto _hx_goto_24;
            									}
HXLINE( 451)									if (!(false)) {
HXLINE( 451)										goto _hx_goto_24;
            									}
            								}
            								_hx_goto_24:;
            							}
            						}
            					}
HXLINE( 475)					bool _hx_tmp3;
HXDLIN( 475)					if (pos) {
HXLINE( 475)						_hx_tmp3 = neg;
            					}
            					else {
HXLINE( 475)						_hx_tmp3 = false;
            					}
HXDLIN( 475)					if (_hx_tmp3) {
HXLINE( 475)						if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE )) {
HXLINE( 475)							::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 475)							::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 475)							::zpp_nape::util::ZPP_Flags_obj::internal = false;
            						}
HXDLIN( 475)						return (this->validation = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE);
            					}
            					else {
HXLINE( 477)						bool cont = true;
HXLINE( 478)						{
HXLINE( 479)							bool cx_cont1 = true;
HXLINE( 480)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = this->lverts->next;
HXLINE( 481)							 ::zpp_nape::geom::ZPP_Vec2 u1 = cx_ite1;
HXLINE( 482)							cx_ite1 = cx_ite1->next;
HXLINE( 483)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 484)								 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_ite1;
HXLINE( 485)								{
HXLINE( 486)									if (!(cont)) {
HXLINE( 487)										cx_cont1 = false;
HXLINE( 488)										goto _hx_goto_25;
            									}
HXLINE( 490)									{
HXLINE( 491)										bool cx_cont2 = true;
HXLINE( 492)										 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = this->lverts->next;
HXLINE( 493)										 ::zpp_nape::geom::ZPP_Vec2 a = cx_ite2;
HXLINE( 494)										cx_ite2 = cx_ite2->next;
HXLINE( 495)										while(hx::IsNotNull( cx_ite2 )){
HXLINE( 496)											 ::zpp_nape::geom::ZPP_Vec2 b = cx_ite2;
HXLINE( 497)											{
HXLINE( 498)												bool _hx_tmp4;
HXDLIN( 498)												bool _hx_tmp5;
HXDLIN( 498)												bool _hx_tmp6;
HXDLIN( 498)												if (hx::IsNotEq( u1,a )) {
HXLINE( 498)													_hx_tmp6 = hx::IsEq( u1,b );
            												}
            												else {
HXLINE( 498)													_hx_tmp6 = true;
            												}
HXDLIN( 498)												if (!(_hx_tmp6)) {
HXLINE( 498)													_hx_tmp5 = hx::IsEq( v1,a );
            												}
            												else {
HXLINE( 498)													_hx_tmp5 = true;
            												}
HXDLIN( 498)												if (!(_hx_tmp5)) {
HXLINE( 498)													_hx_tmp4 = hx::IsEq( v1,b );
            												}
            												else {
HXLINE( 498)													_hx_tmp4 = true;
            												}
HXDLIN( 498)												if (_hx_tmp4) {
HXLINE( 499)													{
HXLINE( 500)														a = b;
HXLINE( 501)														cx_ite2 = cx_ite2->next;
            													}
HXLINE( 503)													continue;
            												}
HXLINE( 505)												Float sx = ((Float)0.0);
HXLINE( 506)												Float sy = ((Float)0.0);
HXLINE( 507)												{
HXLINE( 508)													sx = (u1->x - a->x);
HXLINE( 509)													sy = (u1->y - a->y);
            												}
HXLINE( 511)												Float vx = ((Float)0.0);
HXLINE( 512)												Float vy = ((Float)0.0);
HXLINE( 513)												{
HXLINE( 514)													vx = (v1->x - u1->x);
HXLINE( 515)													vy = (v1->y - u1->y);
            												}
HXLINE( 517)												Float qx = ((Float)0.0);
HXLINE( 518)												Float qy = ((Float)0.0);
HXLINE( 519)												{
HXLINE( 520)													qx = (b->x - a->x);
HXLINE( 521)													qy = (b->y - a->y);
            												}
HXLINE( 523)												Float den = ((vy * qx) - (vx * qy));
HXLINE( 524)												if (((den * den) > ::nape::Config_obj::epsilon)) {
HXLINE( 525)													den = (( (Float)(1) ) / den);
HXLINE( 526)													Float t = (((qy * sx) - (qx * sy)) * den);
HXLINE( 527)													bool _hx_tmp7;
HXDLIN( 527)													if ((t > ::nape::Config_obj::epsilon)) {
HXLINE( 527)														_hx_tmp7 = (t < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            													}
            													else {
HXLINE( 527)														_hx_tmp7 = false;
            													}
HXDLIN( 527)													if (_hx_tmp7) {
HXLINE( 528)														Float s = (((vy * sx) - (vx * sy)) * den);
HXLINE( 529)														bool _hx_tmp8;
HXDLIN( 529)														if ((s > ::nape::Config_obj::epsilon)) {
HXLINE( 529)															_hx_tmp8 = (s < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            														}
            														else {
HXLINE( 529)															_hx_tmp8 = false;
            														}
HXDLIN( 529)														if (_hx_tmp8) {
HXLINE( 530)															cont = false;
HXLINE( 532)															cx_cont2 = false;
HXLINE( 533)															goto _hx_goto_26;
            														}
            													}
            												}
            											}
HXLINE( 539)											{
HXLINE( 540)												a = b;
HXLINE( 541)												cx_ite2 = cx_ite2->next;
            											}
            										}
            										_hx_goto_26:;
HXLINE( 544)										if (cx_cont2) {
HXLINE( 545)											while(true){
HXLINE( 546)												 ::zpp_nape::geom::ZPP_Vec2 b1 = this->lverts->next;
HXLINE( 547)												{
HXLINE( 548)													bool _hx_tmp9;
HXDLIN( 548)													bool _hx_tmp10;
HXDLIN( 548)													bool _hx_tmp11;
HXDLIN( 548)													if (hx::IsNotEq( u1,a )) {
HXLINE( 548)														_hx_tmp11 = hx::IsEq( u1,b1 );
            													}
            													else {
HXLINE( 548)														_hx_tmp11 = true;
            													}
HXDLIN( 548)													if (!(_hx_tmp11)) {
HXLINE( 548)														_hx_tmp10 = hx::IsEq( v1,a );
            													}
            													else {
HXLINE( 548)														_hx_tmp10 = true;
            													}
HXDLIN( 548)													if (!(_hx_tmp10)) {
HXLINE( 548)														_hx_tmp9 = hx::IsEq( v1,b1 );
            													}
            													else {
HXLINE( 548)														_hx_tmp9 = true;
            													}
HXDLIN( 548)													if (_hx_tmp9) {
HXLINE( 548)														goto _hx_goto_27;
            													}
HXLINE( 549)													Float sx1 = ((Float)0.0);
HXLINE( 550)													Float sy1 = ((Float)0.0);
HXLINE( 551)													{
HXLINE( 552)														sx1 = (u1->x - a->x);
HXLINE( 553)														sy1 = (u1->y - a->y);
            													}
HXLINE( 555)													Float vx1 = ((Float)0.0);
HXLINE( 556)													Float vy1 = ((Float)0.0);
HXLINE( 557)													{
HXLINE( 558)														vx1 = (v1->x - u1->x);
HXLINE( 559)														vy1 = (v1->y - u1->y);
            													}
HXLINE( 561)													Float qx1 = ((Float)0.0);
HXLINE( 562)													Float qy1 = ((Float)0.0);
HXLINE( 563)													{
HXLINE( 564)														qx1 = (b1->x - a->x);
HXLINE( 565)														qy1 = (b1->y - a->y);
            													}
HXLINE( 567)													Float den1 = ((vy1 * qx1) - (vx1 * qy1));
HXLINE( 568)													if (((den1 * den1) > ::nape::Config_obj::epsilon)) {
HXLINE( 569)														den1 = (( (Float)(1) ) / den1);
HXLINE( 570)														Float t1 = (((qy1 * sx1) - (qx1 * sy1)) * den1);
HXLINE( 571)														bool _hx_tmp12;
HXDLIN( 571)														if ((t1 > ::nape::Config_obj::epsilon)) {
HXLINE( 571)															_hx_tmp12 = (t1 < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            														}
            														else {
HXLINE( 571)															_hx_tmp12 = false;
            														}
HXDLIN( 571)														if (_hx_tmp12) {
HXLINE( 572)															Float s1 = (((vy1 * sx1) - (vx1 * sy1)) * den1);
HXLINE( 573)															bool _hx_tmp13;
HXDLIN( 573)															if ((s1 > ::nape::Config_obj::epsilon)) {
HXLINE( 573)																_hx_tmp13 = (s1 < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE( 573)																_hx_tmp13 = false;
            															}
HXDLIN( 573)															if (_hx_tmp13) {
HXLINE( 574)																cont = false;
HXLINE( 575)																goto _hx_goto_27;
            															}
            														}
            													}
            												}
HXLINE( 545)												if (!(false)) {
HXLINE( 545)													goto _hx_goto_27;
            												}
            											}
            											_hx_goto_27:;
            										}
            									}
            								}
HXLINE( 585)								{
HXLINE( 586)									u1 = v1;
HXLINE( 587)									cx_ite1 = cx_ite1->next;
            								}
            							}
            							_hx_goto_25:;
HXLINE( 590)							if (cx_cont1) {
HXLINE( 591)								while(true){
HXLINE( 592)									 ::zpp_nape::geom::ZPP_Vec2 v2 = this->lverts->next;
HXLINE( 593)									{
HXLINE( 594)										if (!(cont)) {
HXLINE( 594)											goto _hx_goto_28;
            										}
HXLINE( 595)										{
HXLINE( 596)											bool cx_cont3 = true;
HXLINE( 597)											 ::zpp_nape::geom::ZPP_Vec2 cx_ite3 = this->lverts->next;
HXLINE( 598)											 ::zpp_nape::geom::ZPP_Vec2 a1 = cx_ite3;
HXLINE( 599)											cx_ite3 = cx_ite3->next;
HXLINE( 600)											while(hx::IsNotNull( cx_ite3 )){
HXLINE( 601)												 ::zpp_nape::geom::ZPP_Vec2 b2 = cx_ite3;
HXLINE( 602)												{
HXLINE( 603)													bool _hx_tmp14;
HXDLIN( 603)													bool _hx_tmp15;
HXDLIN( 603)													bool _hx_tmp16;
HXDLIN( 603)													if (hx::IsNotEq( u1,a1 )) {
HXLINE( 603)														_hx_tmp16 = hx::IsEq( u1,b2 );
            													}
            													else {
HXLINE( 603)														_hx_tmp16 = true;
            													}
HXDLIN( 603)													if (!(_hx_tmp16)) {
HXLINE( 603)														_hx_tmp15 = hx::IsEq( v2,a1 );
            													}
            													else {
HXLINE( 603)														_hx_tmp15 = true;
            													}
HXDLIN( 603)													if (!(_hx_tmp15)) {
HXLINE( 603)														_hx_tmp14 = hx::IsEq( v2,b2 );
            													}
            													else {
HXLINE( 603)														_hx_tmp14 = true;
            													}
HXDLIN( 603)													if (_hx_tmp14) {
HXLINE( 604)														{
HXLINE( 605)															a1 = b2;
HXLINE( 606)															cx_ite3 = cx_ite3->next;
            														}
HXLINE( 608)														continue;
            													}
HXLINE( 610)													Float sx2 = ((Float)0.0);
HXLINE( 611)													Float sy2 = ((Float)0.0);
HXLINE( 612)													{
HXLINE( 613)														sx2 = (u1->x - a1->x);
HXLINE( 614)														sy2 = (u1->y - a1->y);
            													}
HXLINE( 616)													Float vx2 = ((Float)0.0);
HXLINE( 617)													Float vy2 = ((Float)0.0);
HXLINE( 618)													{
HXLINE( 619)														vx2 = (v2->x - u1->x);
HXLINE( 620)														vy2 = (v2->y - u1->y);
            													}
HXLINE( 622)													Float qx2 = ((Float)0.0);
HXLINE( 623)													Float qy2 = ((Float)0.0);
HXLINE( 624)													{
HXLINE( 625)														qx2 = (b2->x - a1->x);
HXLINE( 626)														qy2 = (b2->y - a1->y);
            													}
HXLINE( 628)													Float den2 = ((vy2 * qx2) - (vx2 * qy2));
HXLINE( 629)													if (((den2 * den2) > ::nape::Config_obj::epsilon)) {
HXLINE( 630)														den2 = (( (Float)(1) ) / den2);
HXLINE( 631)														Float t2 = (((qy2 * sx2) - (qx2 * sy2)) * den2);
HXLINE( 632)														bool _hx_tmp17;
HXDLIN( 632)														if ((t2 > ::nape::Config_obj::epsilon)) {
HXLINE( 632)															_hx_tmp17 = (t2 < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            														}
            														else {
HXLINE( 632)															_hx_tmp17 = false;
            														}
HXDLIN( 632)														if (_hx_tmp17) {
HXLINE( 633)															Float s2 = (((vy2 * sx2) - (vx2 * sy2)) * den2);
HXLINE( 634)															bool _hx_tmp18;
HXDLIN( 634)															if ((s2 > ::nape::Config_obj::epsilon)) {
HXLINE( 634)																_hx_tmp18 = (s2 < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE( 634)																_hx_tmp18 = false;
            															}
HXDLIN( 634)															if (_hx_tmp18) {
HXLINE( 635)																cont = false;
HXLINE( 637)																cx_cont3 = false;
HXLINE( 638)																goto _hx_goto_29;
            															}
            														}
            													}
            												}
HXLINE( 644)												{
HXLINE( 645)													a1 = b2;
HXLINE( 646)													cx_ite3 = cx_ite3->next;
            												}
            											}
            											_hx_goto_29:;
HXLINE( 649)											if (cx_cont3) {
HXLINE( 650)												while(true){
HXLINE( 651)													 ::zpp_nape::geom::ZPP_Vec2 b3 = this->lverts->next;
HXLINE( 652)													{
HXLINE( 653)														bool _hx_tmp19;
HXDLIN( 653)														bool _hx_tmp20;
HXDLIN( 653)														bool _hx_tmp21;
HXDLIN( 653)														if (hx::IsNotEq( u1,a1 )) {
HXLINE( 653)															_hx_tmp21 = hx::IsEq( u1,b3 );
            														}
            														else {
HXLINE( 653)															_hx_tmp21 = true;
            														}
HXDLIN( 653)														if (!(_hx_tmp21)) {
HXLINE( 653)															_hx_tmp20 = hx::IsEq( v2,a1 );
            														}
            														else {
HXLINE( 653)															_hx_tmp20 = true;
            														}
HXDLIN( 653)														if (!(_hx_tmp20)) {
HXLINE( 653)															_hx_tmp19 = hx::IsEq( v2,b3 );
            														}
            														else {
HXLINE( 653)															_hx_tmp19 = true;
            														}
HXDLIN( 653)														if (_hx_tmp19) {
HXLINE( 653)															goto _hx_goto_30;
            														}
HXLINE( 654)														Float sx3 = ((Float)0.0);
HXLINE( 655)														Float sy3 = ((Float)0.0);
HXLINE( 656)														{
HXLINE( 657)															sx3 = (u1->x - a1->x);
HXLINE( 658)															sy3 = (u1->y - a1->y);
            														}
HXLINE( 660)														Float vx3 = ((Float)0.0);
HXLINE( 661)														Float vy3 = ((Float)0.0);
HXLINE( 662)														{
HXLINE( 663)															vx3 = (v2->x - u1->x);
HXLINE( 664)															vy3 = (v2->y - u1->y);
            														}
HXLINE( 666)														Float qx3 = ((Float)0.0);
HXLINE( 667)														Float qy3 = ((Float)0.0);
HXLINE( 668)														{
HXLINE( 669)															qx3 = (b3->x - a1->x);
HXLINE( 670)															qy3 = (b3->y - a1->y);
            														}
HXLINE( 672)														Float den3 = ((vy3 * qx3) - (vx3 * qy3));
HXLINE( 673)														if (((den3 * den3) > ::nape::Config_obj::epsilon)) {
HXLINE( 674)															den3 = (( (Float)(1) ) / den3);
HXLINE( 675)															Float t3 = (((qy3 * sx3) - (qx3 * sy3)) * den3);
HXLINE( 676)															bool _hx_tmp22;
HXDLIN( 676)															if ((t3 > ::nape::Config_obj::epsilon)) {
HXLINE( 676)																_hx_tmp22 = (t3 < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE( 676)																_hx_tmp22 = false;
            															}
HXDLIN( 676)															if (_hx_tmp22) {
HXLINE( 677)																Float s3 = (((vy3 * sx3) - (vx3 * sy3)) * den3);
HXLINE( 678)																bool _hx_tmp23;
HXDLIN( 678)																if ((s3 > ::nape::Config_obj::epsilon)) {
HXLINE( 678)																	_hx_tmp23 = (s3 < (( (Float)(1) ) - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE( 678)																	_hx_tmp23 = false;
            																}
HXDLIN( 678)																if (_hx_tmp23) {
HXLINE( 679)																	cont = false;
HXLINE( 680)																	goto _hx_goto_30;
            																}
            															}
            														}
            													}
HXLINE( 650)													if (!(false)) {
HXLINE( 650)														goto _hx_goto_30;
            													}
            												}
            												_hx_goto_30:;
            											}
            										}
            									}
HXLINE( 591)									if (!(false)) {
HXLINE( 591)										goto _hx_goto_28;
            									}
            								}
            								_hx_goto_28:;
            							}
            						}
HXLINE( 694)						if (!(cont)) {
HXLINE( 694)							if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING )) {
HXLINE( 694)								::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 694)								::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 694)								::zpp_nape::util::ZPP_Flags_obj::internal = false;
            							}
HXDLIN( 694)							return (this->validation = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING);
            						}
            						else {
HXLINE( 695)							if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 695)								::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 695)								::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 695)								::zpp_nape::util::ZPP_Flags_obj::internal = false;
            							}
HXDLIN( 695)							return (this->validation = ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID);
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 700)			return this->validation;
            		}
HXLINE( 370)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,valid,return )

void ZPP_Polygon_obj::validate_lverts(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_703_validate_lverts)
HXDLIN( 703)		if (this->zip_lverts) {
HXLINE( 704)			this->zip_lverts = false;
HXLINE( 705)			if ((this->lverts->length > 2)) {
HXLINE( 706)				this->validate_area_inertia();
HXLINE( 707)				if ((this->area < 0)) {
HXLINE( 708)					this->reverse_vertices();
HXLINE( 709)					this->area = -(this->area);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,validate_lverts,(void))

void ZPP_Polygon_obj::cleanup_lvert( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_714_cleanup_lvert)
HXLINE( 715)		 ::zpp_nape::geom::ZPP_Vec2 ite = null();
HXLINE( 716)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ite2 = null();
HXLINE( 717)		{
HXLINE( 718)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE( 719)			while(hx::IsNotNull( cx_ite )){
HXLINE( 720)				 ::zpp_nape::geom::ZPP_Vec2 i = cx_ite;
HXLINE( 722)				if (hx::IsEq( i,x )) {
HXLINE( 722)					goto _hx_goto_33;
            				}
            				else {
HXLINE( 724)					if (hx::IsNull( ite )) {
HXLINE( 724)						ite = this->gverts->next;
            					}
            					else {
HXLINE( 724)						ite = ite->next;
            					}
HXLINE( 725)					if (hx::IsNull( ite2 )) {
HXLINE( 725)						ite2 = this->edges->head;
            					}
            					else {
HXLINE( 725)						ite2 = ite2->next;
            					}
            				}
HXLINE( 728)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_33:;
            		}
HXLINE( 731)		 ::zpp_nape::geom::ZPP_Vec2 rem;
HXDLIN( 731)		if (hx::IsNull( ite )) {
HXLINE( 731)			rem = this->gverts->next;
            		}
            		else {
HXLINE( 731)			rem = ite->next;
            		}
HXLINE( 732)		this->gverts->erase(ite);
HXLINE( 733)		{
HXLINE( 734)			 ::zpp_nape::geom::ZPP_Vec2 o = rem;
HXLINE( 743)			{
HXLINE( 743)				if (hx::IsNotNull( o->outer )) {
HXLINE( 743)					o->outer->zpp_inner = null();
HXDLIN( 743)					o->outer = null();
            				}
HXDLIN( 743)				o->_isimmutable = null();
HXDLIN( 743)				o->_validate = null();
HXDLIN( 743)				o->_invalidate = null();
            			}
HXLINE( 744)			o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 745)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            		}
HXLINE( 750)		if ((this->edgeCnt == 2)) {
HXLINE( 751)			 ::zpp_nape::shape::ZPP_Edge rem1 = this->edges->pop_unsafe();
HXLINE( 752)			{
HXLINE( 753)				 ::zpp_nape::shape::ZPP_Edge o1 = rem1;
HXLINE( 762)				o1->polygon = null();
HXLINE( 763)				o1->next = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool;
HXLINE( 764)				::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = o1;
            			}
HXLINE( 769)			rem1 = this->edges->pop_unsafe();
HXLINE( 770)			{
HXLINE( 771)				 ::zpp_nape::shape::ZPP_Edge o2 = rem1;
HXLINE( 780)				o2->polygon = null();
HXLINE( 781)				o2->next = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool;
HXLINE( 782)				::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = o2;
            			}
HXLINE( 787)			this->edgeCnt = 0;
            		}
            		else {
HXLINE( 789)			if ((this->edgeCnt != 0)) {
HXLINE( 790)				 ::zpp_nape::shape::ZPP_Edge rem2;
HXDLIN( 790)				if (hx::IsNull( ite2 )) {
HXLINE( 790)					rem2 = this->edges->head->elt;
            				}
            				else {
HXLINE( 790)					rem2 = ite2->next->elt;
            				}
HXLINE( 791)				this->edges->erase(ite2);
HXLINE( 792)				{
HXLINE( 793)					 ::zpp_nape::shape::ZPP_Edge o3 = rem2;
HXLINE( 802)					o3->polygon = null();
HXLINE( 803)					o3->next = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool;
HXLINE( 804)					::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = o3;
            				}
HXLINE( 809)				this->edgeCnt--;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,cleanup_lvert,(void))

void ZPP_Polygon_obj::splice_collinear(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_816_splice_collinear)
HXDLIN( 816)		if (this->zip_sanitation) {
HXLINE( 817)			this->zip_sanitation = false;
HXLINE( 818)			this->splice_collinear_real();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,splice_collinear,(void))

void ZPP_Polygon_obj::splice_collinear_real(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_821_splice_collinear_real)
HXLINE( 822)		if (hx::IsNull( this->lverts->next )) {
HXLINE( 822)			return;
            		}
HXLINE( 823)		if (hx::IsNull( this->lverts->next->next )) {
HXLINE( 823)			return;
            		}
HXLINE( 824)		if (hx::IsNull( this->lverts->next->next->next )) {
HXLINE( 824)			return;
            		}
HXLINE( 825)		 ::zpp_nape::geom::ZPP_Vec2 pre = null();
HXLINE( 826)		 ::zpp_nape::geom::ZPP_Vec2 cur = this->lverts->next;
HXLINE( 827)		while(hx::IsNotNull( cur )){
HXLINE( 828)			 ::zpp_nape::geom::ZPP_Vec2 nxt;
HXDLIN( 828)			if (hx::IsNull( cur->next )) {
HXLINE( 828)				nxt = this->lverts->next;
            			}
            			else {
HXLINE( 828)				nxt = cur->next;
            			}
HXLINE( 829)			 ::zpp_nape::geom::ZPP_Vec2 u = cur;
HXLINE( 830)			 ::zpp_nape::geom::ZPP_Vec2 v = nxt;
HXLINE( 831)			Float dx = ((Float)0.0);
HXDLIN( 831)			Float dy = ((Float)0.0);
HXDLIN( 831)			{
HXLINE( 831)				dx = (u->x - v->x);
HXDLIN( 831)				dy = (u->y - v->y);
            			}
HXDLIN( 831)			if ((((dx * dx) + (dy * dy)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 832)				this->cleanup_lvert(cur);
HXLINE( 833)				cur = this->lverts->erase(pre);
            			}
            			else {
HXLINE( 836)				pre = cur;
HXLINE( 837)				cur = cur->next;
            			}
            		}
HXLINE( 840)		if (hx::IsNull( this->lverts->next )) {
HXLINE( 840)			return;
            		}
HXLINE( 841)		bool removed;
HXLINE( 842)		while(true){
HXLINE( 843)			removed = false;
HXLINE( 844)			 ::zpp_nape::geom::ZPP_Vec2 pre1 = this->lverts->next;
HXLINE( 845)			while(hx::IsNotNull( pre1 )){
HXLINE( 846)				 ::zpp_nape::geom::ZPP_Vec2 cur1;
HXDLIN( 846)				if (hx::IsNull( pre1->next )) {
HXLINE( 846)					cur1 = this->lverts->next;
            				}
            				else {
HXLINE( 846)					cur1 = pre1->next;
            				}
HXLINE( 847)				 ::zpp_nape::geom::ZPP_Vec2 nxt1;
HXDLIN( 847)				if (hx::IsNull( cur1->next )) {
HXLINE( 847)					nxt1 = this->lverts->next;
            				}
            				else {
HXLINE( 847)					nxt1 = cur1->next;
            				}
HXLINE( 848)				 ::zpp_nape::geom::ZPP_Vec2 u1 = pre1;
HXLINE( 849)				 ::zpp_nape::geom::ZPP_Vec2 v1 = cur1;
HXLINE( 850)				 ::zpp_nape::geom::ZPP_Vec2 w = nxt1;
HXLINE( 851)				Float ax = ((Float)0.0);
HXLINE( 852)				Float ay = ((Float)0.0);
HXLINE( 853)				{
HXLINE( 854)					ax = (v1->x - u1->x);
HXLINE( 855)					ay = (v1->y - u1->y);
            				}
HXLINE( 857)				Float bx = ((Float)0.0);
HXLINE( 858)				Float by = ((Float)0.0);
HXLINE( 859)				{
HXLINE( 860)					bx = (w->x - v1->x);
HXLINE( 861)					by = (w->y - v1->y);
            				}
HXLINE( 863)				Float crs = ((by * ax) - (bx * ay));
HXLINE( 864)				if (((crs * crs) >= (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 865)					pre1 = pre1->next;
            				}
            				else {
HXLINE( 868)					this->cleanup_lvert(cur1);
HXLINE( 869)					 ::zpp_nape::geom::ZPP_Vec2 _hx_tmp;
HXDLIN( 869)					if (hx::IsNull( pre1->next )) {
HXLINE( 869)						_hx_tmp = null();
            					}
            					else {
HXLINE( 869)						_hx_tmp = pre1;
            					}
HXDLIN( 869)					this->lverts->erase(_hx_tmp);
HXLINE( 870)					removed = true;
HXLINE( 871)					pre1 = pre1->next;
            				}
            			}
HXLINE( 842)			if (!(removed)) {
HXLINE( 842)				goto _hx_goto_37;
            			}
            		}
            		_hx_goto_37:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,splice_collinear_real,(void))

void ZPP_Polygon_obj::reverse_vertices(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_877_reverse_vertices)
HXLINE( 878)		this->lverts->reverse();
HXLINE( 879)		this->gverts->reverse();
HXLINE( 880)		this->edges->reverse();
HXLINE( 881)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = this->edges->iterator_at((this->edgeCnt - 1));
HXLINE( 882)		 ::zpp_nape::shape::ZPP_Edge elem = this->edges->pop_unsafe();
HXLINE( 883)		this->edges->insert(ite,elem);
HXLINE( 884)		this->reverse_flag = !(this->reverse_flag);
HXLINE( 885)		if (hx::IsNotNull( this->wrap_lverts )) {
HXLINE( 885)			this->wrap_lverts->zpp_inner->reverse_flag = this->reverse_flag;
            		}
HXLINE( 886)		if (hx::IsNotNull( this->wrap_gverts )) {
HXLINE( 886)			this->wrap_gverts->zpp_inner->reverse_flag = this->reverse_flag;
            		}
HXLINE( 887)		if (hx::IsNotNull( this->wrap_edges )) {
HXLINE( 887)			this->wrap_edges->zpp_inner->reverse_flag = this->reverse_flag;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,reverse_vertices,(void))

void ZPP_Polygon_obj::validate_laxi(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_890_validate_laxi)
HXDLIN( 890)		if (this->zip_laxi) {
HXLINE( 891)			this->zip_laxi = false;
HXLINE( 892)			this->validate_lverts();
HXLINE( 893)			 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = this->edges->head;
HXLINE( 894)			{
HXLINE( 895)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE( 896)				 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXLINE( 897)				cx_ite = cx_ite->next;
HXLINE( 898)				while(hx::IsNotNull( cx_ite )){
HXLINE( 899)					 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXLINE( 900)					{
HXLINE( 901)						 ::zpp_nape::shape::ZPP_Edge edge = ite->elt;
HXLINE( 902)						ite = ite->next;
HXLINE( 903)						edge->lp0 = u;
HXLINE( 904)						edge->lp1 = v;
HXLINE( 905)						Float dx = ((Float)0.0);
HXLINE( 906)						Float dy = ((Float)0.0);
HXLINE( 907)						{
HXLINE( 908)							dx = (u->x - v->x);
HXLINE( 909)							dy = (u->y - v->y);
            						}
HXLINE( 911)						Float l = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE( 912)						edge->length = l;
HXLINE( 913)						{
HXLINE( 914)							Float t = (((Float)1.0) / l);
HXLINE( 923)							dx = (dx * t);
HXLINE( 924)							dy = (dy * t);
            						}
HXLINE( 926)						{
HXLINE( 927)							Float t1 = dx;
HXLINE( 928)							dx = -(dy);
HXLINE( 929)							dy = t1;
            						}
HXLINE( 931)						edge->lprojection = ((dx * u->x) + (dy * u->y));
HXLINE( 932)						{
HXLINE( 933)							edge->lnormx = dx;
HXLINE( 934)							edge->lnormy = dy;
            						}
HXLINE( 952)						if (hx::IsNotNull( edge->wrap_lnorm )) {
HXLINE( 953)							edge->wrap_lnorm->zpp_inner->x = dx;
HXLINE( 954)							edge->wrap_lnorm->zpp_inner->y = dy;
            						}
            					}
HXLINE( 973)					u = v;
HXLINE( 974)					cx_ite = cx_ite->next;
            				}
HXLINE( 976)				 ::zpp_nape::geom::ZPP_Vec2 v1 = this->lverts->next;
HXLINE( 977)				{
HXLINE( 978)					 ::zpp_nape::shape::ZPP_Edge edge1 = ite->elt;
HXLINE( 979)					ite = ite->next;
HXLINE( 980)					edge1->lp0 = u;
HXLINE( 981)					edge1->lp1 = v1;
HXLINE( 982)					Float dx1 = ((Float)0.0);
HXLINE( 983)					Float dy1 = ((Float)0.0);
HXLINE( 984)					{
HXLINE( 985)						dx1 = (u->x - v1->x);
HXLINE( 986)						dy1 = (u->y - v1->y);
            					}
HXLINE( 988)					Float l1 = ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));
HXLINE( 989)					edge1->length = l1;
HXLINE( 990)					{
HXLINE( 991)						Float t2 = (((Float)1.0) / l1);
HXLINE(1000)						dx1 = (dx1 * t2);
HXLINE(1001)						dy1 = (dy1 * t2);
            					}
HXLINE(1003)					{
HXLINE(1004)						Float t3 = dx1;
HXLINE(1005)						dx1 = -(dy1);
HXLINE(1006)						dy1 = t3;
            					}
HXLINE(1008)					edge1->lprojection = ((dx1 * u->x) + (dy1 * u->y));
HXLINE(1009)					{
HXLINE(1010)						edge1->lnormx = dx1;
HXLINE(1011)						edge1->lnormy = dy1;
            					}
HXLINE(1029)					if (hx::IsNotNull( edge1->wrap_lnorm )) {
HXLINE(1030)						edge1->wrap_lnorm->zpp_inner->x = dx1;
HXLINE(1031)						edge1->wrap_lnorm->zpp_inner->y = dy1;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,validate_laxi,(void))

void ZPP_Polygon_obj::validate_gverts(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1056_validate_gverts)
HXDLIN(1056)		if (this->zip_gverts) {
HXLINE(1057)			if (hx::IsNotNull( this->body )) {
HXLINE(1058)				this->zip_gverts = false;
HXLINE(1059)				this->validate_lverts();
HXLINE(1060)				{
HXLINE(1060)					 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN(1060)					if (_this->zip_axis) {
HXLINE(1060)						_this->zip_axis = false;
HXDLIN(1060)						{
HXLINE(1060)							_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1060)							_this->axisy = ::Math_obj::cos(_this->rot);
            						}
            					}
            				}
HXLINE(1061)				 ::zpp_nape::geom::ZPP_Vec2 li = this->lverts->next;
HXLINE(1062)				{
HXLINE(1063)					 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->gverts->next;
HXLINE(1064)					while(hx::IsNotNull( cx_ite )){
HXLINE(1065)						 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite;
HXLINE(1066)						{
HXLINE(1067)							 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXLINE(1068)							li = li->next;
HXLINE(1069)							{
HXLINE(1070)								g->x = (this->body->posx + ((this->body->axisy * l->x) - (this->body->axisx * l->y)));
HXLINE(1071)								g->y = (this->body->posy + ((l->x * this->body->axisx) + (l->y * this->body->axisy)));
            							}
            						}
HXLINE(1074)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,validate_gverts,(void))

void ZPP_Polygon_obj::validate_gaxi(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1082_validate_gaxi)
HXDLIN(1082)		if (this->zip_gaxi) {
HXLINE(1083)			if (hx::IsNotNull( this->body )) {
HXLINE(1084)				this->zip_gaxi = false;
HXLINE(1085)				this->validate_laxi();
HXLINE(1086)				{
HXLINE(1086)					 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN(1086)					if (_this->zip_axis) {
HXLINE(1086)						_this->zip_axis = false;
HXDLIN(1086)						{
HXLINE(1086)							_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1086)							_this->axisy = ::Math_obj::cos(_this->rot);
            						}
            					}
            				}
HXLINE(1087)				if (this->zip_gverts) {
HXLINE(1087)					if (hx::IsNotNull( this->body )) {
HXLINE(1087)						this->zip_gverts = false;
HXDLIN(1087)						this->validate_lverts();
HXDLIN(1087)						{
HXLINE(1087)							 ::zpp_nape::phys::ZPP_Body _this1 = this->body;
HXDLIN(1087)							if (_this1->zip_axis) {
HXLINE(1087)								_this1->zip_axis = false;
HXDLIN(1087)								{
HXLINE(1087)									_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN(1087)									_this1->axisy = ::Math_obj::cos(_this1->rot);
            								}
            							}
            						}
HXDLIN(1087)						 ::zpp_nape::geom::ZPP_Vec2 li = this->lverts->next;
HXDLIN(1087)						{
HXLINE(1087)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->gverts->next;
HXDLIN(1087)							while(hx::IsNotNull( cx_ite )){
HXLINE(1087)								 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite;
HXDLIN(1087)								{
HXLINE(1087)									 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(1087)									li = li->next;
HXDLIN(1087)									{
HXLINE(1087)										g->x = (this->body->posx + ((this->body->axisy * l->x) - (this->body->axisx * l->y)));
HXDLIN(1087)										g->y = (this->body->posy + ((l->x * this->body->axisx) + (l->y * this->body->axisy)));
            									}
            								}
HXDLIN(1087)								cx_ite = cx_ite->next;
            							}
            						}
            					}
            				}
HXLINE(1088)				 ::zpp_nape::util::ZNPNode_ZPP_Edge ite = this->edges->head;
HXLINE(1089)				{
HXLINE(1090)					 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = this->gverts->next;
HXLINE(1091)					 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;
HXLINE(1092)					cx_ite1 = cx_ite1->next;
HXLINE(1093)					while(hx::IsNotNull( cx_ite1 )){
HXLINE(1094)						 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;
HXLINE(1095)						{
HXLINE(1096)							 ::zpp_nape::shape::ZPP_Edge e = ite->elt;
HXLINE(1097)							ite = ite->next;
HXLINE(1098)							e->gp0 = u;
HXLINE(1099)							e->gp1 = v;
HXLINE(1100)							{
HXLINE(1101)								e->gnormx = ((this->body->axisy * e->lnormx) - (this->body->axisx * e->lnormy));
HXLINE(1102)								e->gnormy = ((e->lnormx * this->body->axisx) + (e->lnormy * this->body->axisy));
            							}
HXLINE(1104)							e->gprojection = (((this->body->posx * e->gnormx) + (this->body->posy * e->gnormy)) + e->lprojection);
HXLINE(1105)							if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE(1106)								e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXLINE(1107)								e->wrap_gnorm->zpp_inner->y = e->gnormy;
            							}
HXLINE(1125)							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXLINE(1126)							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            						}
HXLINE(1128)						u = v;
HXLINE(1129)						cx_ite1 = cx_ite1->next;
            					}
HXLINE(1131)					 ::zpp_nape::geom::ZPP_Vec2 v1 = this->gverts->next;
HXLINE(1132)					{
HXLINE(1133)						 ::zpp_nape::shape::ZPP_Edge e1 = ite->elt;
HXLINE(1134)						ite = ite->next;
HXLINE(1135)						e1->gp0 = u;
HXLINE(1136)						e1->gp1 = v1;
HXLINE(1137)						{
HXLINE(1138)							e1->gnormx = ((this->body->axisy * e1->lnormx) - (this->body->axisx * e1->lnormy));
HXLINE(1139)							e1->gnormy = ((e1->lnormx * this->body->axisx) + (e1->lnormy * this->body->axisy));
            						}
HXLINE(1141)						e1->gprojection = (((this->body->posx * e1->gnormx) + (this->body->posy * e1->gnormy)) + e1->lprojection);
HXLINE(1142)						if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE(1143)							e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXLINE(1144)							e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            						}
HXLINE(1162)						e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXLINE(1163)						e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,validate_gaxi,(void))

void ZPP_Polygon_obj::_hx___validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1171___validate_aabb)
HXLINE(1172)		if (this->zip_gverts) {
HXLINE(1172)			if (hx::IsNotNull( this->body )) {
HXLINE(1172)				this->zip_gverts = false;
HXDLIN(1172)				this->validate_lverts();
HXDLIN(1172)				{
HXLINE(1172)					 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN(1172)					if (_this->zip_axis) {
HXLINE(1172)						_this->zip_axis = false;
HXDLIN(1172)						{
HXLINE(1172)							_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1172)							_this->axisy = ::Math_obj::cos(_this->rot);
            						}
            					}
            				}
HXDLIN(1172)				 ::zpp_nape::geom::ZPP_Vec2 li = this->lverts->next;
HXDLIN(1172)				{
HXLINE(1172)					 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->gverts->next;
HXDLIN(1172)					while(hx::IsNotNull( cx_ite )){
HXLINE(1172)						 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite;
HXDLIN(1172)						{
HXLINE(1172)							 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN(1172)							li = li->next;
HXDLIN(1172)							{
HXLINE(1172)								g->x = (this->body->posx + ((this->body->axisy * l->x) - (this->body->axisx * l->y)));
HXDLIN(1172)								g->y = (this->body->posy + ((l->x * this->body->axisx) + (l->y * this->body->axisy)));
            							}
            						}
HXDLIN(1172)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
HXLINE(1174)		if (hx::IsNull( this->lverts->next )) {
HXLINE(1174)			HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            		}
HXLINE(1176)		 ::zpp_nape::geom::ZPP_Vec2 p0 = this->gverts->next;
HXLINE(1177)		{
HXLINE(1178)			this->aabb->minx = p0->x;
HXLINE(1179)			this->aabb->miny = p0->y;
            		}
HXLINE(1197)		{
HXLINE(1198)			this->aabb->maxx = p0->x;
HXLINE(1199)			this->aabb->maxy = p0->y;
            		}
HXLINE(1217)		{
HXLINE(1218)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = this->gverts->next->next;
HXLINE(1219)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(1220)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite1;
HXLINE(1221)				{
HXLINE(1222)					if ((p->x < this->aabb->minx)) {
HXLINE(1222)						this->aabb->minx = p->x;
            					}
HXLINE(1223)					if ((p->x > this->aabb->maxx)) {
HXLINE(1223)						this->aabb->maxx = p->x;
            					}
HXLINE(1224)					if ((p->y < this->aabb->miny)) {
HXLINE(1224)						this->aabb->miny = p->y;
            					}
HXLINE(1225)					if ((p->y > this->aabb->maxy)) {
HXLINE(1225)						this->aabb->maxy = p->y;
            					}
            				}
HXLINE(1227)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_hx___validate_aabb,(void))

void ZPP_Polygon_obj::_force_validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1233__force_validate_aabb)
HXLINE(1234)		 ::zpp_nape::geom::ZPP_Vec2 li = this->lverts->next;
HXLINE(1235)		 ::zpp_nape::geom::ZPP_Vec2 p0 = this->gverts->next;
HXLINE(1236)		 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXLINE(1237)		li = li->next;
HXLINE(1238)		{
HXLINE(1239)			p0->x = (this->body->posx + ((this->body->axisy * l->x) - (this->body->axisx * l->y)));
HXLINE(1240)			p0->y = (this->body->posy + ((l->x * this->body->axisx) + (l->y * this->body->axisy)));
            		}
HXLINE(1242)		{
HXLINE(1243)			this->aabb->minx = p0->x;
HXLINE(1244)			this->aabb->miny = p0->y;
            		}
HXLINE(1262)		{
HXLINE(1263)			this->aabb->maxx = p0->x;
HXLINE(1264)			this->aabb->maxy = p0->y;
            		}
HXLINE(1282)		{
HXLINE(1283)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->gverts->next->next;
HXLINE(1284)			while(hx::IsNotNull( cx_ite )){
HXLINE(1285)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite;
HXLINE(1286)				{
HXLINE(1287)					 ::zpp_nape::geom::ZPP_Vec2 l1 = li;
HXLINE(1288)					li = li->next;
HXLINE(1289)					{
HXLINE(1290)						p->x = (this->body->posx + ((this->body->axisy * l1->x) - (this->body->axisx * l1->y)));
HXLINE(1291)						p->y = (this->body->posy + ((l1->x * this->body->axisx) + (l1->y * this->body->axisy)));
            					}
HXLINE(1293)					if ((p->x < this->aabb->minx)) {
HXLINE(1293)						this->aabb->minx = p->x;
            					}
HXLINE(1294)					if ((p->x > this->aabb->maxx)) {
HXLINE(1294)						this->aabb->maxx = p->x;
            					}
HXLINE(1295)					if ((p->y < this->aabb->miny)) {
HXLINE(1295)						this->aabb->miny = p->y;
            					}
HXLINE(1296)					if ((p->y > this->aabb->maxy)) {
HXLINE(1296)						this->aabb->maxy = p->y;
            					}
            				}
HXLINE(1298)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_force_validate_aabb,(void))

void ZPP_Polygon_obj::_hx___validate_sweepRadius(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1302___validate_sweepRadius)
HXLINE(1303)		Float maxRadius = ((Float)0.0);
HXLINE(1304)		Float minRadius = ((Float)0.0);
HXLINE(1305)		this->validate_laxi();
HXLINE(1306)		{
HXLINE(1307)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1308)			while(hx::IsNotNull( cx_ite )){
HXLINE(1309)				 ::zpp_nape::geom::ZPP_Vec2 x = cx_ite;
HXLINE(1310)				{
HXLINE(1311)					Float r = ((x->x * x->x) + (x->y * x->y));
HXLINE(1312)					if ((r > maxRadius)) {
HXLINE(1313)						maxRadius = r;
            					}
            				}
HXLINE(1316)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1319)		{
HXLINE(1320)			 ::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite1 = this->edges->head;
HXLINE(1321)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(1322)				 ::zpp_nape::shape::ZPP_Edge e = cx_ite1->elt;
HXLINE(1324)				if ((e->lprojection < minRadius)) {
HXLINE(1325)					minRadius = e->lprojection;
HXLINE(1326)					if ((minRadius < 0)) {
HXLINE(1326)						goto _hx_goto_54;
            					}
            				}
HXLINE(1329)				cx_ite1 = cx_ite1->next;
            			}
            			_hx_goto_54:;
            		}
HXLINE(1332)		if ((minRadius < 0)) {
HXLINE(1332)			minRadius = ( (Float)(0) );
            		}
HXLINE(1333)		this->sweepRadius = ::Math_obj::sqrt(maxRadius);
HXLINE(1334)		this->sweepCoef = (this->sweepRadius - minRadius);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_hx___validate_sweepRadius,(void))

void ZPP_Polygon_obj::_hx___validate_area_inertia(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1337___validate_area_inertia)
HXDLIN(1337)		bool _hx_tmp;
HXDLIN(1337)		bool _hx_tmp1;
HXDLIN(1337)		if (hx::IsNotNull( this->lverts->next )) {
HXDLIN(1337)			_hx_tmp1 = hx::IsNull( this->lverts->next->next );
            		}
            		else {
HXDLIN(1337)			_hx_tmp1 = true;
            		}
HXDLIN(1337)		if (!(_hx_tmp1)) {
HXDLIN(1337)			_hx_tmp = hx::IsNull( this->lverts->next->next->next );
            		}
            		else {
HXDLIN(1337)			_hx_tmp = true;
            		}
HXDLIN(1337)		if (_hx_tmp) {
HXLINE(1338)			this->area = ( (Float)(0) );
HXLINE(1339)			this->inertia = ( (Float)(0) );
            		}
            		else {
HXLINE(1342)			this->area = ((Float)0.0);
HXLINE(1343)			Float s1 = ((Float)0.0);
HXLINE(1344)			Float s2 = ((Float)0.0);
HXLINE(1345)			{
HXLINE(1346)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1347)				 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXLINE(1348)				cx_ite = cx_ite->next;
HXLINE(1349)				 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXLINE(1350)				cx_ite = cx_ite->next;
HXLINE(1351)				while(hx::IsNotNull( cx_ite )){
HXLINE(1352)					 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXLINE(1353)					{
HXLINE(1354)						Float a = ((v->y * u->x) - (v->x * u->y));
HXLINE(1355)						Float b = ((((v->x * v->x) + (v->y * v->y)) + ((v->x * u->x) + (v->y * u->y))) + ((u->x * u->x) + (u->y * u->y)));
HXLINE(1356)						s1 = (s1 + (a * b));
HXLINE(1357)						s2 = (s2 + a);
HXLINE(1358)						 ::zpp_nape::shape::ZPP_Polygon _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1358)						_hx_tmp2->area = (_hx_tmp2->area + (v->x * (w->y - u->y)));
            					}
HXLINE(1360)					u = v;
HXLINE(1361)					v = w;
HXLINE(1362)					cx_ite = cx_ite->next;
            				}
HXLINE(1364)				cx_ite = this->lverts->next;
HXLINE(1365)				 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXLINE(1366)				{
HXLINE(1367)					Float a1 = ((v->y * u->x) - (v->x * u->y));
HXLINE(1368)					Float b1 = ((((v->x * v->x) + (v->y * v->y)) + ((v->x * u->x) + (v->y * u->y))) + ((u->x * u->x) + (u->y * u->y)));
HXLINE(1369)					s1 = (s1 + (a1 * b1));
HXLINE(1370)					s2 = (s2 + a1);
HXLINE(1371)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1371)					_hx_tmp3->area = (_hx_tmp3->area + (v->x * (w1->y - u->y)));
            				}
HXLINE(1373)				u = v;
HXLINE(1374)				v = w1;
HXLINE(1375)				cx_ite = cx_ite->next;
HXLINE(1376)				 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXLINE(1377)				{
HXLINE(1378)					Float a2 = ((v->y * u->x) - (v->x * u->y));
HXLINE(1379)					Float b2 = ((((v->x * v->x) + (v->y * v->y)) + ((v->x * u->x) + (v->y * u->y))) + ((u->x * u->x) + (u->y * u->y)));
HXLINE(1380)					s1 = (s1 + (a2 * b2));
HXLINE(1381)					s2 = (s2 + a2);
HXLINE(1382)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1382)					_hx_tmp4->area = (_hx_tmp4->area + (v->x * (w2->y - u->y)));
            				}
            			}
HXLINE(1385)			this->inertia = (s1 / (( (Float)(6) ) * s2));
HXLINE(1386)			 ::zpp_nape::shape::ZPP_Polygon _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1386)			_hx_tmp5->area = (_hx_tmp5->area * ((Float)0.5));
HXLINE(1387)			if ((this->area < 0)) {
HXLINE(1388)				this->area = -(this->area);
HXLINE(1389)				this->reverse_vertices();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_hx___validate_area_inertia,(void))

void ZPP_Polygon_obj::_hx___validate_angDrag(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1393___validate_angDrag)
HXLINE(1395)		if ((this->lverts->length < 3)) {
HXLINE(1395)			HX_STACK_DO_THROW(HX_("Error: Polygon's with less than 3 vertices have no meaningful angDrag",c5,16,29,69));
            		}
HXLINE(1397)		this->validate_area_inertia();
HXLINE(1398)		this->validate_laxi();
HXLINE(1399)		Float accum = ((Float)0.0);
HXLINE(1400)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ei = this->edges->head;
HXLINE(1401)		Float perim = ((Float)0.0);
HXLINE(1402)		{
HXLINE(1403)			bool cx_cont = true;
HXLINE(1404)			 ::zpp_nape::geom::ZPP_Vec2 cx_itei = this->lverts->next;
HXLINE(1405)			 ::zpp_nape::geom::ZPP_Vec2 u = cx_itei;
HXLINE(1406)			 ::zpp_nape::geom::ZPP_Vec2 cx_itej = cx_itei->next;
HXLINE(1407)			while(hx::IsNotNull( cx_itej )){
HXLINE(1408)				 ::zpp_nape::geom::ZPP_Vec2 v = cx_itej;
HXLINE(1409)				{
HXLINE(1410)					 ::zpp_nape::shape::ZPP_Edge edge = ei->elt;
HXLINE(1411)					ei = ei->next;
HXLINE(1412)					perim = (perim + edge->length);
HXLINE(1413)					Float dx = ((Float)0.0);
HXLINE(1414)					Float dy = ((Float)0.0);
HXLINE(1415)					{
HXLINE(1416)						dx = (v->x - u->x);
HXLINE(1417)						dy = (v->y - u->y);
            					}
HXLINE(1419)					accum = (accum + ((((edge->length * ::nape::Config_obj::fluidAngularDragFriction) * this->material->dynamicFriction) * edge->lprojection) * edge->lprojection));
HXLINE(1420)					Float t = (-(((u->y * edge->lnormx) - (u->x * edge->lnormy))) / ((dy * edge->lnormx) - (dx * edge->lnormy)));
HXLINE(1421)					if ((t > 0)) {
HXLINE(1422)						Float ta;
HXDLIN(1422)						if ((t > 1)) {
HXLINE(1422)							ta = ( (Float)(1) );
            						}
            						else {
HXLINE(1422)							ta = t;
            						}
HXLINE(1423)						Float cx = ((Float)0.0);
HXLINE(1424)						Float cy = ((Float)0.0);
HXLINE(1425)						{
HXLINE(1426)							cx = u->x;
HXLINE(1427)							cy = u->y;
            						}
HXLINE(1445)						{
HXLINE(1446)							Float t1 = ta;
HXLINE(1455)							cx = (cx + (dx * t1));
HXLINE(1456)							cy = (cy + (dy * t1));
            						}
HXLINE(1458)						Float dota = ((edge->lnormy * u->x) - (edge->lnormx * u->y));
HXLINE(1459)						Float dotb = ((edge->lnormy * cx) - (edge->lnormx * cy));
HXLINE(1460)						Float dots = ((((dotb * dotb) * dotb) - ((dota * dota) * dota)) / (( (Float)(3) ) * (dotb - dota)));
HXLINE(1461)						accum = (accum + (((dots * ta) * edge->length) * ::nape::Config_obj::fluidAngularDrag));
            					}
HXLINE(1463)					if ((t < 1)) {
HXLINE(1464)						Float tb;
HXDLIN(1464)						if ((t < 0)) {
HXLINE(1464)							tb = ( (Float)(0) );
            						}
            						else {
HXLINE(1464)							tb = t;
            						}
HXLINE(1465)						Float cx1 = ((Float)0.0);
HXLINE(1466)						Float cy1 = ((Float)0.0);
HXLINE(1467)						{
HXLINE(1468)							cx1 = u->x;
HXLINE(1469)							cy1 = u->y;
            						}
HXLINE(1487)						{
HXLINE(1488)							Float t2 = tb;
HXLINE(1497)							cx1 = (cx1 + (dx * t2));
HXLINE(1498)							cy1 = (cy1 + (dy * t2));
            						}
HXLINE(1500)						Float dota1 = ((edge->lnormy * cx1) - (edge->lnormx * cy1));
HXLINE(1501)						Float dotb1 = ((edge->lnormy * v->x) - (edge->lnormx * v->y));
HXLINE(1502)						Float dots1 = ((((dotb1 * dotb1) * dotb1) - ((dota1 * dota1) * dota1)) / (( (Float)(3) ) * (dotb1 - dota1)));
HXLINE(1503)						accum = (accum + ((((dots1 * ::nape::Config_obj::fluidVacuumDrag) * (( (Float)(1) ) - tb)) * edge->length) * ::nape::Config_obj::fluidAngularDrag));
            					}
            				}
HXLINE(1506)				{
HXLINE(1507)					cx_itei = cx_itej;
HXLINE(1508)					u = v;
HXLINE(1509)					cx_itej = cx_itej->next;
            				}
            			}
HXLINE(1512)			if (cx_cont) {
HXLINE(1513)				while(true){
HXLINE(1514)					cx_itej = this->lverts->next;
HXLINE(1515)					 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_itej;
HXLINE(1516)					{
HXLINE(1517)						 ::zpp_nape::shape::ZPP_Edge edge1 = ei->elt;
HXLINE(1518)						ei = ei->next;
HXLINE(1519)						perim = (perim + edge1->length);
HXLINE(1520)						Float dx1 = ((Float)0.0);
HXLINE(1521)						Float dy1 = ((Float)0.0);
HXLINE(1522)						{
HXLINE(1523)							dx1 = (v1->x - u->x);
HXLINE(1524)							dy1 = (v1->y - u->y);
            						}
HXLINE(1526)						accum = (accum + ((((edge1->length * ::nape::Config_obj::fluidAngularDragFriction) * this->material->dynamicFriction) * edge1->lprojection) * edge1->lprojection));
HXLINE(1527)						Float t3 = (-(((u->y * edge1->lnormx) - (u->x * edge1->lnormy))) / ((dy1 * edge1->lnormx) - (dx1 * edge1->lnormy)));
HXLINE(1528)						if ((t3 > 0)) {
HXLINE(1529)							Float ta1;
HXDLIN(1529)							if ((t3 > 1)) {
HXLINE(1529)								ta1 = ( (Float)(1) );
            							}
            							else {
HXLINE(1529)								ta1 = t3;
            							}
HXLINE(1530)							Float cx2 = ((Float)0.0);
HXLINE(1531)							Float cy2 = ((Float)0.0);
HXLINE(1532)							{
HXLINE(1533)								cx2 = u->x;
HXLINE(1534)								cy2 = u->y;
            							}
HXLINE(1552)							{
HXLINE(1553)								Float t4 = ta1;
HXLINE(1562)								cx2 = (cx2 + (dx1 * t4));
HXLINE(1563)								cy2 = (cy2 + (dy1 * t4));
            							}
HXLINE(1565)							Float dota2 = ((edge1->lnormy * u->x) - (edge1->lnormx * u->y));
HXLINE(1566)							Float dotb2 = ((edge1->lnormy * cx2) - (edge1->lnormx * cy2));
HXLINE(1567)							Float dots2 = ((((dotb2 * dotb2) * dotb2) - ((dota2 * dota2) * dota2)) / (( (Float)(3) ) * (dotb2 - dota2)));
HXLINE(1568)							accum = (accum + (((dots2 * ta1) * edge1->length) * ::nape::Config_obj::fluidAngularDrag));
            						}
HXLINE(1570)						if ((t3 < 1)) {
HXLINE(1571)							Float tb1;
HXDLIN(1571)							if ((t3 < 0)) {
HXLINE(1571)								tb1 = ( (Float)(0) );
            							}
            							else {
HXLINE(1571)								tb1 = t3;
            							}
HXLINE(1572)							Float cx3 = ((Float)0.0);
HXLINE(1573)							Float cy3 = ((Float)0.0);
HXLINE(1574)							{
HXLINE(1575)								cx3 = u->x;
HXLINE(1576)								cy3 = u->y;
            							}
HXLINE(1594)							{
HXLINE(1595)								Float t5 = tb1;
HXLINE(1604)								cx3 = (cx3 + (dx1 * t5));
HXLINE(1605)								cy3 = (cy3 + (dy1 * t5));
            							}
HXLINE(1607)							Float dota3 = ((edge1->lnormy * cx3) - (edge1->lnormx * cy3));
HXLINE(1608)							Float dotb3 = ((edge1->lnormy * v1->x) - (edge1->lnormx * v1->y));
HXLINE(1609)							Float dots3 = ((((dotb3 * dotb3) * dotb3) - ((dota3 * dota3) * dota3)) / (( (Float)(3) ) * (dotb3 - dota3)));
HXLINE(1610)							accum = (accum + ((((dots3 * ::nape::Config_obj::fluidVacuumDrag) * (( (Float)(1) ) - tb1)) * edge1->length) * ::nape::Config_obj::fluidAngularDrag));
            						}
            					}
HXLINE(1513)					if (!(false)) {
HXLINE(1513)						goto _hx_goto_59;
            					}
            				}
            				_hx_goto_59:;
            			}
            		}
HXLINE(1617)		this->angDrag = (accum / (this->inertia * perim));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_hx___validate_angDrag,(void))

void ZPP_Polygon_obj::_hx___validate_localCOM(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1621___validate_localCOM)
HXLINE(1623)		if (hx::IsNull( this->lverts->next )) {
HXLINE(1623)			HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            		}
HXLINE(1625)		if (hx::IsNull( this->lverts->next->next )) {
HXLINE(1626)			this->localCOMx = this->lverts->next->x;
HXLINE(1627)			this->localCOMy = this->lverts->next->y;
            		}
            		else {
HXLINE(1645)			if (hx::IsNull( this->lverts->next->next->next )) {
HXLINE(1646)				{
HXLINE(1647)					this->localCOMx = this->lverts->next->x;
HXLINE(1648)					this->localCOMy = this->lverts->next->y;
            				}
HXLINE(1666)				{
HXLINE(1667)					Float t = ((Float)1.0);
HXLINE(1676)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1676)					_hx_tmp->localCOMx = (_hx_tmp->localCOMx + (this->lverts->next->next->x * t));
HXLINE(1677)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1677)					_hx_tmp1->localCOMy = (_hx_tmp1->localCOMy + (this->lverts->next->next->y * t));
            				}
HXLINE(1679)				{
HXLINE(1680)					Float t1 = ((Float)0.5);
HXLINE(1689)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1689)					_hx_tmp2->localCOMx = (_hx_tmp2->localCOMx * t1);
HXLINE(1690)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1690)					_hx_tmp3->localCOMy = (_hx_tmp3->localCOMy * t1);
            				}
            			}
            			else {
HXLINE(1694)				{
HXLINE(1695)					this->localCOMx = ( (Float)(0) );
HXLINE(1696)					this->localCOMy = ( (Float)(0) );
            				}
HXLINE(1714)				Float area = ((Float)0.0);
HXLINE(1715)				{
HXLINE(1716)					 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1717)					 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXLINE(1718)					cx_ite = cx_ite->next;
HXLINE(1719)					 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXLINE(1720)					cx_ite = cx_ite->next;
HXLINE(1721)					while(hx::IsNotNull( cx_ite )){
HXLINE(1722)						 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXLINE(1723)						{
HXLINE(1724)							area = (area + (v->x * (w->y - u->y)));
HXLINE(1725)							Float cf = ((w->y * v->x) - (w->x * v->y));
HXLINE(1726)							 ::zpp_nape::shape::ZPP_Polygon _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1726)							_hx_tmp4->localCOMx = (_hx_tmp4->localCOMx + ((v->x + w->x) * cf));
HXLINE(1727)							 ::zpp_nape::shape::ZPP_Polygon _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1727)							_hx_tmp5->localCOMy = (_hx_tmp5->localCOMy + ((v->y + w->y) * cf));
            						}
HXLINE(1729)						u = v;
HXLINE(1730)						v = w;
HXLINE(1731)						cx_ite = cx_ite->next;
            					}
HXLINE(1733)					cx_ite = this->lverts->next;
HXLINE(1734)					 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXLINE(1735)					{
HXLINE(1736)						area = (area + (v->x * (w1->y - u->y)));
HXLINE(1737)						Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXLINE(1738)						 ::zpp_nape::shape::ZPP_Polygon _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1738)						_hx_tmp6->localCOMx = (_hx_tmp6->localCOMx + ((v->x + w1->x) * cf1));
HXLINE(1739)						 ::zpp_nape::shape::ZPP_Polygon _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1739)						_hx_tmp7->localCOMy = (_hx_tmp7->localCOMy + ((v->y + w1->y) * cf1));
            					}
HXLINE(1741)					u = v;
HXLINE(1742)					v = w1;
HXLINE(1743)					cx_ite = cx_ite->next;
HXLINE(1744)					 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXLINE(1745)					{
HXLINE(1746)						area = (area + (v->x * (w2->y - u->y)));
HXLINE(1747)						Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXLINE(1748)						 ::zpp_nape::shape::ZPP_Polygon _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1748)						_hx_tmp8->localCOMx = (_hx_tmp8->localCOMx + ((v->x + w2->x) * cf2));
HXLINE(1749)						 ::zpp_nape::shape::ZPP_Polygon _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1749)						_hx_tmp9->localCOMy = (_hx_tmp9->localCOMy + ((v->y + w2->y) * cf2));
            					}
            				}
HXLINE(1752)				area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXLINE(1753)				{
HXLINE(1754)					Float t2 = area;
HXLINE(1763)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1763)					_hx_tmp10->localCOMx = (_hx_tmp10->localCOMx * t2);
HXLINE(1764)					 ::zpp_nape::shape::ZPP_Polygon _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1764)					_hx_tmp11->localCOMy = (_hx_tmp11->localCOMy * t2);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,_hx___validate_localCOM,(void))

void ZPP_Polygon_obj::localCOM_validate(){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1768_localCOM_validate)
HXLINE(1770)		if (hx::IsNull( this->lverts->next )) {
HXLINE(1770)			HX_STACK_DO_THROW(HX_("Error: An empty polygon does not have any meaningful localCOM",e0,45,bc,29));
            		}
HXLINE(1772)		if (this->zip_localCOM) {
HXLINE(1772)			this->zip_localCOM = false;
HXDLIN(1772)			if ((this->type == 1)) {
HXLINE(1772)				 ::zpp_nape::shape::ZPP_Polygon _this = this->polygon;
HXDLIN(1772)				if (hx::IsNull( _this->lverts->next )) {
HXLINE(1772)					HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            				}
HXDLIN(1772)				if (hx::IsNull( _this->lverts->next->next )) {
HXLINE(1772)					_this->localCOMx = _this->lverts->next->x;
HXDLIN(1772)					_this->localCOMy = _this->lverts->next->y;
            				}
            				else {
HXLINE(1772)					if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE(1772)						{
HXLINE(1772)							_this->localCOMx = _this->lverts->next->x;
HXDLIN(1772)							_this->localCOMy = _this->lverts->next->y;
            						}
HXDLIN(1772)						{
HXLINE(1772)							Float t = ((Float)1.0);
HXDLIN(1772)							 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN(1772)							_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN(1772)							 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN(1772)							_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            						}
HXDLIN(1772)						{
HXLINE(1772)							Float t1 = ((Float)0.5);
HXDLIN(1772)							 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN(1772)							_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN(1772)							 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN(1772)							_this4->localCOMy = (_this4->localCOMy * t1);
            						}
            					}
            					else {
HXLINE(1772)						{
HXLINE(1772)							_this->localCOMx = ( (Float)(0) );
HXDLIN(1772)							_this->localCOMy = ( (Float)(0) );
            						}
HXDLIN(1772)						Float area = ((Float)0.0);
HXDLIN(1772)						{
HXLINE(1772)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN(1772)							 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(1772)							cx_ite = cx_ite->next;
HXDLIN(1772)							 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(1772)							cx_ite = cx_ite->next;
HXDLIN(1772)							while(hx::IsNotNull( cx_ite )){
HXLINE(1772)								 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(1772)								{
HXLINE(1772)									area = (area + (v->x * (w->y - u->y)));
HXDLIN(1772)									Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1772)									 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN(1772)									_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1772)									 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN(1772)									_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            								}
HXDLIN(1772)								u = v;
HXDLIN(1772)								v = w;
HXDLIN(1772)								cx_ite = cx_ite->next;
            							}
HXDLIN(1772)							cx_ite = _this->lverts->next;
HXDLIN(1772)							 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(1772)							{
HXLINE(1772)								area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1772)								Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1772)								 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN(1772)								_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1772)								 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN(1772)								_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            							}
HXDLIN(1772)							u = v;
HXDLIN(1772)							v = w1;
HXDLIN(1772)							cx_ite = cx_ite->next;
HXDLIN(1772)							 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(1772)							{
HXLINE(1772)								area = (area + (v->x * (w2->y - u->y)));
HXDLIN(1772)								Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(1772)								 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN(1772)								_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(1772)								 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN(1772)								_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            							}
            						}
HXDLIN(1772)						area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(1772)						{
HXLINE(1772)							Float t2 = area;
HXDLIN(1772)							 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN(1772)							_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN(1772)							 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN(1772)							_this12->localCOMy = (_this12->localCOMy * t2);
            						}
            					}
            				}
            			}
HXDLIN(1772)			if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE(1772)				this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXDLIN(1772)				this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,localCOM_validate,(void))

void ZPP_Polygon_obj::localCOM_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1774_localCOM_invalidate)
HXLINE(1775)		if (this->zip_localCOM) {
HXLINE(1775)			this->zip_localCOM = false;
HXDLIN(1775)			if ((this->type == 1)) {
HXLINE(1775)				 ::zpp_nape::shape::ZPP_Polygon _this = this->polygon;
HXDLIN(1775)				if (hx::IsNull( _this->lverts->next )) {
HXLINE(1775)					HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            				}
HXDLIN(1775)				if (hx::IsNull( _this->lverts->next->next )) {
HXLINE(1775)					_this->localCOMx = _this->lverts->next->x;
HXDLIN(1775)					_this->localCOMy = _this->lverts->next->y;
            				}
            				else {
HXLINE(1775)					if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE(1775)						{
HXLINE(1775)							_this->localCOMx = _this->lverts->next->x;
HXDLIN(1775)							_this->localCOMy = _this->lverts->next->y;
            						}
HXDLIN(1775)						{
HXLINE(1775)							Float t = ((Float)1.0);
HXDLIN(1775)							 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN(1775)							_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN(1775)							 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN(1775)							_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            						}
HXDLIN(1775)						{
HXLINE(1775)							Float t1 = ((Float)0.5);
HXDLIN(1775)							 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN(1775)							_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN(1775)							 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN(1775)							_this4->localCOMy = (_this4->localCOMy * t1);
            						}
            					}
            					else {
HXLINE(1775)						{
HXLINE(1775)							_this->localCOMx = ( (Float)(0) );
HXDLIN(1775)							_this->localCOMy = ( (Float)(0) );
            						}
HXDLIN(1775)						Float area = ((Float)0.0);
HXDLIN(1775)						{
HXLINE(1775)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN(1775)							 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN(1775)							cx_ite = cx_ite->next;
HXDLIN(1775)							 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN(1775)							cx_ite = cx_ite->next;
HXDLIN(1775)							while(hx::IsNotNull( cx_ite )){
HXLINE(1775)								 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN(1775)								{
HXLINE(1775)									area = (area + (v->x * (w->y - u->y)));
HXDLIN(1775)									Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1775)									 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN(1775)									_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1775)									 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN(1775)									_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            								}
HXDLIN(1775)								u = v;
HXDLIN(1775)								v = w;
HXDLIN(1775)								cx_ite = cx_ite->next;
            							}
HXDLIN(1775)							cx_ite = _this->lverts->next;
HXDLIN(1775)							 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN(1775)							{
HXLINE(1775)								area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1775)								Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1775)								 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN(1775)								_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1775)								 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN(1775)								_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            							}
HXDLIN(1775)							u = v;
HXDLIN(1775)							v = w1;
HXDLIN(1775)							cx_ite = cx_ite->next;
HXDLIN(1775)							 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN(1775)							{
HXLINE(1775)								area = (area + (v->x * (w2->y - u->y)));
HXDLIN(1775)								Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN(1775)								 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN(1775)								_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN(1775)								 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN(1775)								_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            							}
            						}
HXDLIN(1775)						area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN(1775)						{
HXLINE(1775)							Float t2 = area;
HXDLIN(1775)							 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN(1775)							_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN(1775)							 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN(1775)							_this12->localCOMy = (_this12->localCOMy * t2);
            						}
            					}
            				}
            			}
HXDLIN(1775)			if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE(1775)				this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXDLIN(1775)				this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            			}
            		}
HXLINE(1776)		Float delx = ( (Float)(0) );
HXLINE(1777)		Float dely = ( (Float)(0) );
HXLINE(1794)		{
HXLINE(1795)			delx = (x->x - this->localCOMx);
HXLINE(1796)			dely = (x->y - this->localCOMy);
            		}
HXLINE(1798)		{
HXLINE(1799)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = this->lverts->next;
HXLINE(1800)			while(hx::IsNotNull( cx_ite1 )){
HXLINE(1801)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite1;
HXLINE(1802)				{
HXLINE(1803)					Float t3 = ((Float)1.0);
HXLINE(1812)					 ::zpp_nape::geom::ZPP_Vec2 p1 = p;
HXDLIN(1812)					p1->x = (p1->x + (delx * t3));
HXLINE(1813)					 ::zpp_nape::geom::ZPP_Vec2 p2 = p;
HXDLIN(1813)					p2->y = (p2->y + (dely * t3));
            				}
HXLINE(1815)				cx_ite1 = cx_ite1->next;
            			}
            		}
HXLINE(1818)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,localCOM_invalidate,(void))

void ZPP_Polygon_obj::setupLocalCOM(){
            	HX_GC_STACKFRAME(&_hx_pos_a2f179caf7128118_1820_setupLocalCOM)
HXLINE(1821)		Float x = this->localCOMx;
HXDLIN(1821)		Float y = this->localCOMy;
HXDLIN(1821)		bool _hx_tmp;
HXDLIN(1821)		if ((x == x)) {
HXLINE(1821)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE(1821)			_hx_tmp = true;
            		}
HXDLIN(1821)		if (_hx_tmp) {
HXLINE(1821)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN(1821)		 ::nape::geom::Vec2 ret;
HXDLIN(1821)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1821)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1821)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1821)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1821)			ret->zpp_pool = null();
HXDLIN(1821)			ret->zpp_disp = false;
HXDLIN(1821)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1821)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1821)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1821)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1821)			{
HXLINE(1821)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1821)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1821)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1821)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1821)					ret1->next = null();
            				}
HXDLIN(1821)				ret1->weak = false;
            			}
HXDLIN(1821)			ret1->_immutable = false;
HXDLIN(1821)			{
HXLINE(1821)				ret1->x = x;
HXDLIN(1821)				ret1->y = y;
            			}
HXDLIN(1821)			ret->zpp_inner = ret1;
HXDLIN(1821)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1821)			bool _hx_tmp1;
HXDLIN(1821)			if (hx::IsNotNull( ret )) {
HXLINE(1821)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE(1821)				_hx_tmp1 = false;
            			}
HXDLIN(1821)			if (_hx_tmp1) {
HXLINE(1821)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1821)			{
HXLINE(1821)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(1821)				if (_this->_immutable) {
HXLINE(1821)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1821)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1821)					_this->_isimmutable();
            				}
            			}
HXDLIN(1821)			bool _hx_tmp2;
HXDLIN(1821)			if ((x == x)) {
HXLINE(1821)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE(1821)				_hx_tmp2 = true;
            			}
HXDLIN(1821)			if (_hx_tmp2) {
HXLINE(1821)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1821)			bool _hx_tmp3;
HXDLIN(1821)			bool _hx_tmp4;
HXDLIN(1821)			if (hx::IsNotNull( ret )) {
HXLINE(1821)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE(1821)				_hx_tmp4 = false;
            			}
HXDLIN(1821)			if (_hx_tmp4) {
HXLINE(1821)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1821)			{
HXLINE(1821)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(1821)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1821)					_this1->_validate();
            				}
            			}
HXDLIN(1821)			if ((ret->zpp_inner->x == x)) {
HXLINE(1821)				bool _hx_tmp5;
HXDLIN(1821)				if (hx::IsNotNull( ret )) {
HXLINE(1821)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE(1821)					_hx_tmp5 = false;
            				}
HXDLIN(1821)				if (_hx_tmp5) {
HXLINE(1821)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1821)				{
HXLINE(1821)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(1821)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1821)						_this2->_validate();
            					}
            				}
HXDLIN(1821)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1821)				_hx_tmp3 = false;
            			}
HXDLIN(1821)			if (!(_hx_tmp3)) {
HXLINE(1821)				{
HXLINE(1821)					ret->zpp_inner->x = x;
HXDLIN(1821)					ret->zpp_inner->y = y;
            				}
HXDLIN(1821)				{
HXLINE(1821)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(1821)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(1821)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN(1821)		ret->zpp_inner->weak = false;
HXDLIN(1821)		this->wrap_localCOM = ret;
HXLINE(1822)		this->wrap_localCOM->zpp_inner->_inuse = true;
HXLINE(1823)		this->wrap_localCOM->zpp_inner->_validate = this->localCOM_validate_dyn();
HXLINE(1824)		this->wrap_localCOM->zpp_inner->_invalidate = this->localCOM_invalidate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,setupLocalCOM,(void))

void ZPP_Polygon_obj::_hx___translate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1834___translate)
HXLINE(1835)		{
HXLINE(1836)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1837)			while(hx::IsNotNull( cx_ite )){
HXLINE(1838)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite;
HXLINE(1839)				{
HXLINE(1840)					Float t = ((Float)1.0);
HXLINE(1849)					 ::zpp_nape::geom::ZPP_Vec2 p1 = p;
HXDLIN(1849)					p1->x = (p1->x + (dx * t));
HXLINE(1850)					 ::zpp_nape::geom::ZPP_Vec2 p2 = p;
HXDLIN(1850)					p2->y = (p2->y + (dy * t));
            				}
HXLINE(1852)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1855)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Polygon_obj,_hx___translate,(void))

void ZPP_Polygon_obj::_hx___scale(Float sx,Float sy){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1857___scale)
HXLINE(1858)		{
HXLINE(1859)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1860)			while(hx::IsNotNull( cx_ite )){
HXLINE(1861)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite;
HXLINE(1862)				{
HXLINE(1863)					 ::zpp_nape::geom::ZPP_Vec2 p1 = p;
HXDLIN(1863)					p1->x = (p1->x * sx);
HXLINE(1864)					 ::zpp_nape::geom::ZPP_Vec2 p2 = p;
HXDLIN(1864)					p2->y = (p2->y * sy);
            				}
HXLINE(1866)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1869)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Polygon_obj,_hx___scale,(void))

void ZPP_Polygon_obj::_hx___rotate(Float ax,Float ay){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1871___rotate)
HXLINE(1872)		{
HXLINE(1873)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1874)			while(hx::IsNotNull( cx_ite )){
HXLINE(1875)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite;
HXLINE(1876)				{
HXLINE(1877)					Float tempx = ((Float)0.0);
HXLINE(1878)					Float tempy = ((Float)0.0);
HXLINE(1879)					{
HXLINE(1880)						tempx = ((ay * p->x) - (ax * p->y));
HXLINE(1881)						tempy = ((p->x * ax) + (p->y * ay));
            					}
HXLINE(1883)					{
HXLINE(1884)						p->x = tempx;
HXLINE(1885)						p->y = tempy;
            					}
            				}
HXLINE(1904)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1907)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Polygon_obj,_hx___rotate,(void))

void ZPP_Polygon_obj::_hx___transform( ::nape::geom::Mat23 mat){
            	HX_STACKFRAME(&_hx_pos_a2f179caf7128118_1909___transform)
HXLINE(1910)		{
HXLINE(1911)			 ::zpp_nape::geom::ZPP_Vec2 cx_ite = this->lverts->next;
HXLINE(1912)			while(hx::IsNotNull( cx_ite )){
HXLINE(1913)				 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite;
HXLINE(1915)				{
HXLINE(1916)					Float t = (((mat->zpp_inner->a * p->x) + (mat->zpp_inner->b * p->y)) + mat->zpp_inner->tx);
HXLINE(1917)					p->y = (((mat->zpp_inner->c * p->x) + (mat->zpp_inner->d * p->y)) + mat->zpp_inner->ty);
HXLINE(1918)					p->x = t;
            				}
HXLINE(1921)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1924)		this->invalidate_lverts();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Polygon_obj,_hx___transform,(void))

 ::zpp_nape::shape::ZPP_Polygon ZPP_Polygon_obj::__copy(){
            	HX_GC_STACKFRAME(&_hx_pos_a2f179caf7128118_1926___copy)
HXLINE(1927)		 ::nape::shape::Polygon _this = this->outer_zn;
HXDLIN(1927)		if (hx::IsNull( _this->zpp_inner_zn->wrap_lverts )) {
HXLINE(1927)			_this->zpp_inner_zn->getlverts();
            		}
HXDLIN(1927)		 ::zpp_nape::shape::ZPP_Polygon ret =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,_this->zpp_inner_zn->wrap_lverts,null(),null())->zpp_inner_zn;
HXLINE(1928)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Polygon_obj,__copy,return )


hx::ObjectPtr< ZPP_Polygon_obj > ZPP_Polygon_obj::__new() {
	hx::ObjectPtr< ZPP_Polygon_obj > __this = new ZPP_Polygon_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Polygon_obj > ZPP_Polygon_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Polygon_obj *__this = (ZPP_Polygon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Polygon_obj), true, "zpp_nape.shape.ZPP_Polygon"));
	*(void **)__this = ZPP_Polygon_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Polygon_obj::ZPP_Polygon_obj()
{
}

void ZPP_Polygon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Polygon);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(lverts,"lverts");
	HX_MARK_MEMBER_NAME(wrap_lverts,"wrap_lverts");
	HX_MARK_MEMBER_NAME(gverts,"gverts");
	HX_MARK_MEMBER_NAME(wrap_gverts,"wrap_gverts");
	HX_MARK_MEMBER_NAME(edges,"edges");
	HX_MARK_MEMBER_NAME(wrap_edges,"wrap_edges");
	HX_MARK_MEMBER_NAME(edgeCnt,"edgeCnt");
	HX_MARK_MEMBER_NAME(reverse_flag,"reverse_flag");
	HX_MARK_MEMBER_NAME(zip_lverts,"zip_lverts");
	HX_MARK_MEMBER_NAME(zip_laxi,"zip_laxi");
	HX_MARK_MEMBER_NAME(zip_gverts,"zip_gverts");
	HX_MARK_MEMBER_NAME(zip_gaxi,"zip_gaxi");
	HX_MARK_MEMBER_NAME(zip_valid,"zip_valid");
	HX_MARK_MEMBER_NAME(validation,"validation");
	HX_MARK_MEMBER_NAME(zip_sanitation,"zip_sanitation");
	 ::zpp_nape::shape::ZPP_Shape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_Polygon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(lverts,"lverts");
	HX_VISIT_MEMBER_NAME(wrap_lverts,"wrap_lverts");
	HX_VISIT_MEMBER_NAME(gverts,"gverts");
	HX_VISIT_MEMBER_NAME(wrap_gverts,"wrap_gverts");
	HX_VISIT_MEMBER_NAME(edges,"edges");
	HX_VISIT_MEMBER_NAME(wrap_edges,"wrap_edges");
	HX_VISIT_MEMBER_NAME(edgeCnt,"edgeCnt");
	HX_VISIT_MEMBER_NAME(reverse_flag,"reverse_flag");
	HX_VISIT_MEMBER_NAME(zip_lverts,"zip_lverts");
	HX_VISIT_MEMBER_NAME(zip_laxi,"zip_laxi");
	HX_VISIT_MEMBER_NAME(zip_gverts,"zip_gverts");
	HX_VISIT_MEMBER_NAME(zip_gaxi,"zip_gaxi");
	HX_VISIT_MEMBER_NAME(zip_valid,"zip_valid");
	HX_VISIT_MEMBER_NAME(validation,"validation");
	HX_VISIT_MEMBER_NAME(zip_sanitation,"zip_sanitation");
	 ::zpp_nape::shape::ZPP_Shape_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_Polygon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"edges") ) { return hx::Val( edges ); }
		if (HX_FIELD_EQ(inName,"valid") ) { return hx::Val( valid_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lverts") ) { return hx::Val( lverts ); }
		if (HX_FIELD_EQ(inName,"gverts") ) { return hx::Val( gverts ); }
		if (HX_FIELD_EQ(inName,"__copy") ) { return hx::Val( __copy_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"edgeCnt") ) { return hx::Val( edgeCnt ); }
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__scale") ) { return hx::Val( _hx___scale_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn ); }
		if (HX_FIELD_EQ(inName,"getedges") ) { return hx::Val( getedges_dyn() ); }
		if (HX_FIELD_EQ(inName,"zip_laxi") ) { return hx::Val( zip_laxi ); }
		if (HX_FIELD_EQ(inName,"zip_gaxi") ) { return hx::Val( zip_gaxi ); }
		if (HX_FIELD_EQ(inName,"__rotate") ) { return hx::Val( _hx___rotate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getlverts") ) { return hx::Val( getlverts_dyn() ); }
		if (HX_FIELD_EQ(inName,"getgverts") ) { return hx::Val( getgverts_dyn() ); }
		if (HX_FIELD_EQ(inName,"zip_valid") ) { return hx::Val( zip_valid ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wrap_edges") ) { return hx::Val( wrap_edges ); }
		if (HX_FIELD_EQ(inName,"zip_lverts") ) { return hx::Val( zip_lverts ); }
		if (HX_FIELD_EQ(inName,"zip_gverts") ) { return hx::Val( zip_gverts ); }
		if (HX_FIELD_EQ(inName,"validation") ) { return hx::Val( validation ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_lverts") ) { return hx::Val( wrap_lverts ); }
		if (HX_FIELD_EQ(inName,"wrap_gverts") ) { return hx::Val( wrap_gverts ); }
		if (HX_FIELD_EQ(inName,"__translate") ) { return hx::Val( _hx___translate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reverse_flag") ) { return hx::Val( reverse_flag ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lverts_subber") ) { return hx::Val( lverts_subber_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanup_lvert") ) { return hx::Val( cleanup_lvert_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_laxi") ) { return hx::Val( validate_laxi_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_gaxi") ) { return hx::Val( validate_gaxi_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupLocalCOM") ) { return hx::Val( setupLocalCOM_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"edges_validate") ) { return hx::Val( edges_validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"zip_sanitation") ) { return hx::Val( zip_sanitation ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lverts_validate") ) { return hx::Val( lverts_validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"gverts_validate") ) { return hx::Val( gverts_validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_laxi") ) { return hx::Val( invalidate_laxi_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_gaxi") ) { return hx::Val( invalidate_gaxi_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_lverts") ) { return hx::Val( validate_lverts_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_gverts") ) { return hx::Val( validate_gverts_dyn() ); }
		if (HX_FIELD_EQ(inName,"__validate_aabb") ) { return hx::Val( _hx___validate_aabb_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"splice_collinear") ) { return hx::Val( splice_collinear_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverse_vertices") ) { return hx::Val( reverse_vertices_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"lverts_post_adder") ) { return hx::Val( lverts_post_adder_dyn() ); }
		if (HX_FIELD_EQ(inName,"lverts_invalidate") ) { return hx::Val( lverts_invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"lverts_modifiable") ) { return hx::Val( lverts_modifiable_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_lverts") ) { return hx::Val( invalidate_lverts_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_gverts") ) { return hx::Val( invalidate_gverts_dyn() ); }
		if (HX_FIELD_EQ(inName,"localCOM_validate") ) { return hx::Val( localCOM_validate_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gverts_pa_validate") ) { return hx::Val( gverts_pa_validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__validate_angDrag") ) { return hx::Val( _hx___validate_angDrag_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"lverts_pa_immutable") ) { return hx::Val( lverts_pa_immutable_dyn() ); }
		if (HX_FIELD_EQ(inName,"__validate_localCOM") ) { return hx::Val( _hx___validate_localCOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"localCOM_invalidate") ) { return hx::Val( localCOM_invalidate_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"lverts_pa_invalidate") ) { return hx::Val( lverts_pa_invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"_force_validate_aabb") ) { return hx::Val( _force_validate_aabb_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"splice_collinear_real") ) { return hx::Val( splice_collinear_real_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__validate_sweepRadius") ) { return hx::Val( _hx___validate_sweepRadius_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__validate_area_inertia") ) { return hx::Val( _hx___validate_area_inertia_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Polygon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"edges") ) { edges=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Edge >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lverts") ) { lverts=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gverts") ) { gverts=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"edgeCnt") ) { edgeCnt=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::shape::Polygon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_laxi") ) { zip_laxi=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_gaxi") ) { zip_gaxi=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zip_valid") ) { zip_valid=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wrap_edges") ) { wrap_edges=inValue.Cast<  ::nape::shape::EdgeList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_lverts") ) { zip_lverts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_gverts") ) { zip_gverts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"validation") ) { validation=inValue.Cast<  ::nape::shape::ValidationResult >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_lverts") ) { wrap_lverts=inValue.Cast<  ::nape::geom::Vec2List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_gverts") ) { wrap_gverts=inValue.Cast<  ::nape::geom::Vec2List >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reverse_flag") ) { reverse_flag=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"zip_sanitation") ) { zip_sanitation=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Polygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_zn",38,07,b0,a2));
	outFields->push(HX_("lverts",b6,de,ec,62));
	outFields->push(HX_("wrap_lverts",cb,e3,7b,4d));
	outFields->push(HX_("gverts",db,10,24,63));
	outFields->push(HX_("wrap_gverts",f0,15,b3,4d));
	outFields->push(HX_("edges",96,6d,e0,69));
	outFields->push(HX_("wrap_edges",21,62,67,95));
	outFields->push(HX_("edgeCnt",2c,73,e3,f4));
	outFields->push(HX_("reverse_flag",29,93,06,7a));
	outFields->push(HX_("zip_lverts",94,0f,f7,ff));
	outFields->push(HX_("zip_laxi",04,ac,0e,13));
	outFields->push(HX_("zip_gverts",b9,41,2e,00));
	outFields->push(HX_("zip_gaxi",e9,9a,c0,0f));
	outFields->push(HX_("zip_valid",de,89,c0,5b));
	outFields->push(HX_("validation",39,0c,ed,e1));
	outFields->push(HX_("zip_sanitation",a8,46,ff,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Polygon_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::shape::Polygon */ ,(int)offsetof(ZPP_Polygon_obj,outer_zn),HX_("outer_zn",38,07,b0,a2)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_Vec2 */ ,(int)offsetof(ZPP_Polygon_obj,lverts),HX_("lverts",b6,de,ec,62)},
	{hx::fsObject /*  ::nape::geom::Vec2List */ ,(int)offsetof(ZPP_Polygon_obj,wrap_lverts),HX_("wrap_lverts",cb,e3,7b,4d)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_Vec2 */ ,(int)offsetof(ZPP_Polygon_obj,gverts),HX_("gverts",db,10,24,63)},
	{hx::fsObject /*  ::nape::geom::Vec2List */ ,(int)offsetof(ZPP_Polygon_obj,wrap_gverts),HX_("wrap_gverts",f0,15,b3,4d)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Edge */ ,(int)offsetof(ZPP_Polygon_obj,edges),HX_("edges",96,6d,e0,69)},
	{hx::fsObject /*  ::nape::shape::EdgeList */ ,(int)offsetof(ZPP_Polygon_obj,wrap_edges),HX_("wrap_edges",21,62,67,95)},
	{hx::fsInt,(int)offsetof(ZPP_Polygon_obj,edgeCnt),HX_("edgeCnt",2c,73,e3,f4)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,reverse_flag),HX_("reverse_flag",29,93,06,7a)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,zip_lverts),HX_("zip_lverts",94,0f,f7,ff)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,zip_laxi),HX_("zip_laxi",04,ac,0e,13)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,zip_gverts),HX_("zip_gverts",b9,41,2e,00)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,zip_gaxi),HX_("zip_gaxi",e9,9a,c0,0f)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,zip_valid),HX_("zip_valid",de,89,c0,5b)},
	{hx::fsObject /*  ::nape::shape::ValidationResult */ ,(int)offsetof(ZPP_Polygon_obj,validation),HX_("validation",39,0c,ed,e1)},
	{hx::fsBool,(int)offsetof(ZPP_Polygon_obj,zip_sanitation),HX_("zip_sanitation",a8,46,ff,71)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Polygon_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Polygon_obj_sMemberFields[] = {
	HX_("outer_zn",38,07,b0,a2),
	HX_("lverts",b6,de,ec,62),
	HX_("wrap_lverts",cb,e3,7b,4d),
	HX_("gverts",db,10,24,63),
	HX_("wrap_gverts",f0,15,b3,4d),
	HX_("edges",96,6d,e0,69),
	HX_("wrap_edges",21,62,67,95),
	HX_("edgeCnt",2c,73,e3,f4),
	HX_("reverse_flag",29,93,06,7a),
	HX_("__clear",6d,ca,b9,b2),
	HX_("lverts_pa_invalidate",c0,39,1e,4d),
	HX_("lverts_pa_immutable",9d,77,f8,2b),
	HX_("gverts_pa_validate",40,3b,b1,2c),
	HX_("lverts_post_adder",98,c6,14,b7),
	HX_("lverts_subber",78,11,dd,83),
	HX_("lverts_invalidate",a4,b7,6f,05),
	HX_("lverts_validate",7f,62,f2,74),
	HX_("lverts_modifiable",2d,9d,8b,b8),
	HX_("gverts_validate",ba,43,08,8c),
	HX_("edges_validate",9f,f7,45,07),
	HX_("getlverts",cc,f3,ae,aa),
	HX_("getgverts",f1,25,e6,aa),
	HX_("getedges",40,0d,8a,36),
	HX_("zip_lverts",94,0f,f7,ff),
	HX_("invalidate_lverts",3a,cc,db,4b),
	HX_("zip_laxi",04,ac,0e,13),
	HX_("invalidate_laxi",2a,d3,3e,55),
	HX_("zip_gverts",b9,41,2e,00),
	HX_("invalidate_gverts",5f,fe,12,4c),
	HX_("zip_gaxi",e9,9a,c0,0f),
	HX_("invalidate_gaxi",0f,c2,f0,51),
	HX_("zip_valid",de,89,c0,5b),
	HX_("validation",39,0c,ed,e1),
	HX_("valid",fc,74,b8,31),
	HX_("validate_lverts",7f,fe,28,ff),
	HX_("cleanup_lvert",82,e1,d1,dc),
	HX_("zip_sanitation",a8,46,ff,71),
	HX_("splice_collinear",62,b6,1e,de),
	HX_("splice_collinear_real",9b,4d,7f,56),
	HX_("reverse_vertices",f6,49,c4,75),
	HX_("validate_laxi",2f,7a,90,93),
	HX_("validate_gverts",a4,30,60,ff),
	HX_("validate_gaxi",14,69,42,90),
	HX_("__validate_aabb",09,47,fd,13),
	HX_("_force_validate_aabb",96,2c,fa,e5),
	HX_("__validate_sweepRadius",15,3e,74,e7),
	HX_("__validate_area_inertia",71,20,bf,ea),
	HX_("__validate_angDrag",25,0b,63,bc),
	HX_("__validate_localCOM",7f,54,2a,ce),
	HX_("localCOM_validate",9f,5d,8b,87),
	HX_("localCOM_invalidate",c4,ba,95,ac),
	HX_("setupLocalCOM",33,77,ff,8f),
	HX_("__translate",2e,20,ac,77),
	HX_("__scale",6a,27,2d,e3),
	HX_("__rotate",7b,b1,4f,73),
	HX_("__transform",4c,76,bf,73),
	HX_("__copy",d5,1e,bd,f0),
	::String(null()) };

hx::Class ZPP_Polygon_obj::__mClass;

void ZPP_Polygon_obj::__register()
{
	ZPP_Polygon_obj _hx_dummy;
	ZPP_Polygon_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.shape.ZPP_Polygon",c7,66,e6,b8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Polygon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Polygon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Polygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Polygon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace shape
