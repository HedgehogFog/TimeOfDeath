// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <hxinc/nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <hxinc/nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeType
#include <hxinc/nape/shape/ShapeType.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <hxinc/zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <hxinc/zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <hxinc/zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <hxinc/zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <hxinc/zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepData
#include <hxinc/zpp_nape/space/ZPP_SweepData.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_AABBPair
#include <hxinc/zpp_nape/util/ZNPList_ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <hxinc/zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b9d7424bab0d317c_174_new,"zpp_nape.shape.ZPP_Shape","new",0xc06ffa20,"zpp_nape.shape.ZPP_Shape.new","zpp_nape/shape/Shape.hx",174,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_181_isCircle,"zpp_nape.shape.ZPP_Shape","isCircle",0x6f2b8bda,"zpp_nape.shape.ZPP_Shape.isCircle","zpp_nape/shape/Shape.hx",181,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_185_isPolygon,"zpp_nape.shape.ZPP_Shape","isPolygon",0xf3c97970,"zpp_nape.shape.ZPP_Shape.isPolygon","zpp_nape/shape/Shape.hx",185,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_206_invalidate_sweepRadius,"zpp_nape.shape.ZPP_Shape","invalidate_sweepRadius",0xa6cb159a,"zpp_nape.shape.ZPP_Shape.invalidate_sweepRadius","zpp_nape/shape/Shape.hx",206,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_209_validate_sweepRadius,"zpp_nape.shape.ZPP_Shape","validate_sweepRadius",0x4c647935,"zpp_nape.shape.ZPP_Shape.validate_sweepRadius","zpp_nape/shape/Shape.hx",209,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_227_clear,"zpp_nape.shape.ZPP_Shape","clear",0x67258b4d,"zpp_nape.shape.ZPP_Shape.clear","zpp_nape/shape/Shape.hx",227,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_235_validate_aabb,"zpp_nape.shape.ZPP_Shape","validate_aabb",0x4d64e7e9,"zpp_nape.shape.ZPP_Shape.validate_aabb","zpp_nape/shape/Shape.hx",235,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_246_force_validate_aabb,"zpp_nape.shape.ZPP_Shape","force_validate_aabb",0xe23cbf55,"zpp_nape.shape.ZPP_Shape.force_validate_aabb","zpp_nape/shape/Shape.hx",246,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_251_invalidate_aabb,"zpp_nape.shape.ZPP_Shape","invalidate_aabb",0xec8d30e4,"zpp_nape.shape.ZPP_Shape.invalidate_aabb","zpp_nape/shape/Shape.hx",251,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_256_validate_area_inertia,"zpp_nape.shape.ZPP_Shape","validate_area_inertia",0xd802a151,"zpp_nape.shape.ZPP_Shape.validate_area_inertia","zpp_nape/shape/Shape.hx",256,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_263_validate_angDrag,"zpp_nape.shape.ZPP_Shape","validate_angDrag",0x738f3645,"zpp_nape.shape.ZPP_Shape.validate_angDrag","zpp_nape/shape/Shape.hx",263,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_273_validate_localCOM,"zpp_nape.shape.ZPP_Shape","validate_localCOM",0x5da3e55f,"zpp_nape.shape.ZPP_Shape.validate_localCOM","zpp_nape/shape/Shape.hx",273,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_301_validate_worldCOM,"zpp_nape.shape.ZPP_Shape","validate_worldCOM",0x2247e2d8,"zpp_nape.shape.ZPP_Shape.validate_worldCOM","zpp_nape/shape/Shape.hx",301,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_313_getworldCOM,"zpp_nape.shape.ZPP_Shape","getworldCOM",0x0bc1b565,"zpp_nape.shape.ZPP_Shape.getworldCOM","zpp_nape/shape/Shape.hx",313,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_339_invalidate_area_inertia,"zpp_nape.shape.ZPP_Shape","invalidate_area_inertia",0x9764dd4c,"zpp_nape.shape.ZPP_Shape.invalidate_area_inertia","zpp_nape/shape/Shape.hx",339,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_348_invalidate_angDrag,"zpp_nape.shape.ZPP_Shape","invalidate_angDrag",0xfaac7c2a,"zpp_nape.shape.ZPP_Shape.invalidate_angDrag","zpp_nape/shape/Shape.hx",348,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_350_invalidate_localCOM,"zpp_nape.shape.ZPP_Shape","invalidate_localCOM",0x1023c7da,"zpp_nape.shape.ZPP_Shape.invalidate_localCOM","zpp_nape/shape/Shape.hx",350,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_358_invalidate_worldCOM,"zpp_nape.shape.ZPP_Shape","invalidate_worldCOM",0xd4c7c553,"zpp_nape.shape.ZPP_Shape.invalidate_worldCOM","zpp_nape/shape/Shape.hx",358,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_362_invalidate_material,"zpp_nape.shape.ZPP_Shape","invalidate_material",0x20e95ceb,"zpp_nape.shape.ZPP_Shape.invalidate_material","zpp_nape/shape/Shape.hx",362,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_380_invalidate_filter,"zpp_nape.shape.ZPP_Shape","invalidate_filter",0xb08dc6fc,"zpp_nape.shape.ZPP_Shape.invalidate_filter","zpp_nape/shape/Shape.hx",380,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_383_invalidate_fluidprops,"zpp_nape.shape.ZPP_Shape","invalidate_fluidprops",0x5b97826a,"zpp_nape.shape.ZPP_Shape.invalidate_fluidprops","zpp_nape/shape/Shape.hx",383,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_385_aabb_validate,"zpp_nape.shape.ZPP_Shape","aabb_validate",0x56b2ab15,"zpp_nape.shape.ZPP_Shape.aabb_validate","zpp_nape/shape/Shape.hx",385,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_449_setMaterial,"zpp_nape.shape.ZPP_Shape","setMaterial",0x3c021029,"zpp_nape.shape.ZPP_Shape.setMaterial","zpp_nape/shape/Shape.hx",449,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_460_setFilter,"zpp_nape.shape.ZPP_Shape","setFilter",0xc2168eba,"zpp_nape.shape.ZPP_Shape.setFilter","zpp_nape/shape/Shape.hx",460,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_470_setFluid,"zpp_nape.shape.ZPP_Shape","setFluid",0xd1844148,"zpp_nape.shape.ZPP_Shape.setFluid","zpp_nape/shape/Shape.hx",470,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_481___immutable_midstep,"zpp_nape.shape.ZPP_Shape","__immutable_midstep",0x993ac337,"zpp_nape.shape.ZPP_Shape.__immutable_midstep","zpp_nape/shape/Shape.hx",481,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_484_addedToBody,"zpp_nape.shape.ZPP_Shape","addedToBody",0xed59285d,"zpp_nape.shape.ZPP_Shape.addedToBody","zpp_nape/shape/Shape.hx",484,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_488_removedFromBody,"zpp_nape.shape.ZPP_Shape","removedFromBody",0x1cc58eac,"zpp_nape.shape.ZPP_Shape.removedFromBody","zpp_nape/shape/Shape.hx",488,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_489_addedToSpace,"zpp_nape.shape.ZPP_Shape","addedToSpace",0x8b20e2ab,"zpp_nape.shape.ZPP_Shape.addedToSpace","zpp_nape/shape/Shape.hx",489,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_495_removedFromSpace,"zpp_nape.shape.ZPP_Shape","removedFromSpace",0xda8e017c,"zpp_nape.shape.ZPP_Shape.removedFromSpace","zpp_nape/shape/Shape.hx",495,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_501_copy,"zpp_nape.shape.ZPP_Shape","copy",0x9a4d19f5,"zpp_nape.shape.ZPP_Shape.copy","zpp_nape/shape/Shape.hx",501,0xb83747cd)
HX_LOCAL_STACK_FRAME(_hx_pos_b9d7424bab0d317c_178_boot,"zpp_nape.shape.ZPP_Shape","boot",0x99a3e272,"zpp_nape.shape.ZPP_Shape.boot","zpp_nape/shape/Shape.hx",178,0xb83747cd)
namespace zpp_nape{
namespace shape{

void ZPP_Shape_obj::__construct(int type){
            	HX_GC_STACKFRAME(&_hx_pos_b9d7424bab0d317c_174_new)
HXLINE( 231)		this->zip_aabb = false;
HXLINE( 230)		this->aabb = null();
HXLINE( 225)		this->pairs = null();
HXLINE( 224)		this->node = null();
HXLINE( 223)		this->sweep = null();
HXLINE( 222)		this->sensorEnabled = false;
HXLINE( 221)		this->fluidEnabled = false;
HXLINE( 220)		this->fluidProperties = null();
HXLINE( 219)		this->filter = null();
HXLINE( 218)		this->material = null();
HXLINE( 217)		this->refmaterial = null();
HXLINE( 216)		this->polygon = null();
HXLINE( 215)		this->circle = null();
HXLINE( 202)		this->sweepCoef = ((Float)0.0);
HXLINE( 201)		this->zip_sweepRadius = false;
HXLINE( 200)		this->sweepRadius = ((Float)0.0);
HXLINE( 199)		this->wrap_worldCOM = null();
HXLINE( 198)		this->wrap_localCOM = null();
HXLINE( 197)		this->zip_worldCOM = false;
HXLINE( 196)		this->worldCOMy = ((Float)0.0);
HXLINE( 195)		this->worldCOMx = ((Float)0.0);
HXLINE( 194)		this->zip_localCOM = false;
HXLINE( 193)		this->localCOMy = ((Float)0.0);
HXLINE( 192)		this->localCOMx = ((Float)0.0);
HXLINE( 191)		this->zip_angDrag = false;
HXLINE( 190)		this->angDrag = ((Float)0.0);
HXLINE( 189)		this->inertia = ((Float)0.0);
HXLINE( 188)		this->zip_area_inertia = false;
HXLINE( 187)		this->area = ((Float)0.0);
HXLINE( 177)		this->type = 0;
HXLINE( 176)		this->body = null();
HXLINE( 175)		this->outer = null();
HXLINE( 392)		super::__construct();
HXLINE( 393)		this->pairs =  ::zpp_nape::util::ZNPList_ZPP_AABBPair_obj::__alloc( HX_CTX );
HXLINE( 394)		this->ishape = hx::ObjectPtr<OBJ_>(this);
HXLINE( 395)		this->type = type;
HXLINE( 396)		 ::zpp_nape::geom::ZPP_AABB ret;
HXDLIN( 396)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 396)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 396)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 396)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 396)			ret->next = null();
            		}
HXDLIN( 396)		{
HXLINE( 396)			ret->minx = ( (Float)(0) );
HXDLIN( 396)			ret->miny = ( (Float)(0) );
            		}
HXDLIN( 396)		{
HXLINE( 396)			ret->maxx = ( (Float)(0) );
HXDLIN( 396)			ret->maxy = ( (Float)(0) );
            		}
HXDLIN( 396)		this->aabb = ret;
HXLINE( 397)		this->aabb->_immutable = true;
HXLINE( 398)		 ::zpp_nape::shape::ZPP_Shape me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 399)		this->aabb->_validate = this->aabb_validate_dyn();
HXLINE( 400)		this->zip_area_inertia = (this->zip_angDrag = (this->zip_localCOM = (this->zip_sweepRadius = true)));
HXLINE( 401)		{
HXLINE( 402)			this->localCOMx = ( (Float)(0) );
HXLINE( 403)			this->localCOMy = ( (Float)(0) );
            		}
HXLINE( 421)		{
HXLINE( 422)			this->worldCOMx = ( (Float)(0) );
HXLINE( 423)			this->worldCOMy = ( (Float)(0) );
            		}
HXLINE( 441)		this->fluidEnabled = false;
HXLINE( 442)		this->sensorEnabled = false;
HXLINE( 443)		this->fluidProperties = null();
HXLINE( 444)		this->body = null();
HXLINE( 445)		this->refmaterial =  ::zpp_nape::phys::ZPP_Material_obj::__alloc( HX_CTX );
HXLINE( 446)		this->sweepRadius = (this->sweepCoef = ( (Float)(0) ));
            	}

Dynamic ZPP_Shape_obj::__CreateEmpty() { return new ZPP_Shape_obj; }

void *ZPP_Shape_obj::_hx_vtable = 0;

Dynamic ZPP_Shape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Shape_obj > _hx_result = new ZPP_Shape_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZPP_Shape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x247ad52d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x247ad52d;
	} else {
		return inClassId==(int)0x31c749e8;
	}
}

bool ZPP_Shape_obj::isCircle(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_181_isCircle)
HXDLIN( 181)		return (this->type == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,isCircle,return )

bool ZPP_Shape_obj::isPolygon(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_185_isPolygon)
HXDLIN( 185)		return (this->type == 1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,isPolygon,return )

void ZPP_Shape_obj::invalidate_sweepRadius(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_206_invalidate_sweepRadius)
HXDLIN( 206)		this->zip_sweepRadius = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_sweepRadius,(void))

void ZPP_Shape_obj::validate_sweepRadius(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_209_validate_sweepRadius)
HXDLIN( 209)		if (this->zip_sweepRadius) {
HXLINE( 210)			this->zip_sweepRadius = false;
HXLINE( 211)			if ((this->type == 0)) {
HXLINE( 211)				this->circle->_hx___validate_sweepRadius();
            			}
            			else {
HXLINE( 212)				this->polygon->_hx___validate_sweepRadius();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,validate_sweepRadius,(void))

void ZPP_Shape_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_227_clear)
HXDLIN( 227)		if ((this->type == 0)) {
HXDLIN( 227)			this->circle->_hx___clear();
            		}
            		else {
HXLINE( 228)			this->polygon->_hx___clear();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,clear,(void))

void ZPP_Shape_obj::validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_235_validate_aabb)
HXDLIN( 235)		if (this->zip_aabb) {
HXLINE( 236)			if (hx::IsNotNull( this->body )) {
HXLINE( 237)				this->zip_aabb = false;
HXLINE( 238)				if ((this->type == 0)) {
HXLINE( 238)					 ::zpp_nape::shape::ZPP_Circle _this = this->circle;
HXDLIN( 238)					if (_this->zip_worldCOM) {
HXLINE( 238)						if (hx::IsNotNull( _this->body )) {
HXLINE( 238)							_this->zip_worldCOM = false;
HXDLIN( 238)							if (_this->zip_localCOM) {
HXLINE( 238)								_this->zip_localCOM = false;
HXDLIN( 238)								if ((_this->type == 1)) {
HXLINE( 238)									 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN( 238)									if (hx::IsNull( _this1->lverts->next )) {
HXLINE( 238)										HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            									}
HXDLIN( 238)									if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE( 238)										_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 238)										_this1->localCOMy = _this1->lverts->next->y;
            									}
            									else {
HXLINE( 238)										if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE( 238)											{
HXLINE( 238)												_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 238)												_this1->localCOMy = _this1->lverts->next->y;
            											}
HXDLIN( 238)											{
HXLINE( 238)												Float t = ((Float)1.0);
HXDLIN( 238)												 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN( 238)												_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN( 238)												 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN( 238)												_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            											}
HXDLIN( 238)											{
HXLINE( 238)												Float t1 = ((Float)0.5);
HXDLIN( 238)												 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN( 238)												_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN( 238)												 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN( 238)												_this5->localCOMy = (_this5->localCOMy * t1);
            											}
            										}
            										else {
HXLINE( 238)											{
HXLINE( 238)												_this1->localCOMx = ( (Float)(0) );
HXDLIN( 238)												_this1->localCOMy = ( (Float)(0) );
            											}
HXDLIN( 238)											Float area = ((Float)0.0);
HXDLIN( 238)											{
HXLINE( 238)												 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN( 238)												 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 238)												cx_ite = cx_ite->next;
HXDLIN( 238)												 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 238)												cx_ite = cx_ite->next;
HXDLIN( 238)												while(hx::IsNotNull( cx_ite )){
HXLINE( 238)													 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 238)													{
HXLINE( 238)														area = (area + (v->x * (w->y - u->y)));
HXDLIN( 238)														Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 238)														 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN( 238)														_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 238)														 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN( 238)														_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            													}
HXDLIN( 238)													u = v;
HXDLIN( 238)													v = w;
HXDLIN( 238)													cx_ite = cx_ite->next;
            												}
HXDLIN( 238)												cx_ite = _this1->lverts->next;
HXDLIN( 238)												 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 238)												{
HXLINE( 238)													area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 238)													Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 238)													 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN( 238)													_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 238)													 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN( 238)													_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            												}
HXDLIN( 238)												u = v;
HXDLIN( 238)												v = w1;
HXDLIN( 238)												cx_ite = cx_ite->next;
HXDLIN( 238)												 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 238)												{
HXLINE( 238)													area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 238)													Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 238)													 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN( 238)													_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 238)													 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN( 238)													_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            												}
            											}
HXDLIN( 238)											area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 238)											{
HXLINE( 238)												Float t2 = area;
HXDLIN( 238)												 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN( 238)												_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN( 238)												 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN( 238)												_this13->localCOMy = (_this13->localCOMy * t2);
            											}
            										}
            									}
            								}
HXDLIN( 238)								if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE( 238)									_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN( 238)									_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            								}
            							}
HXDLIN( 238)							{
HXLINE( 238)								 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN( 238)								if (_this14->zip_axis) {
HXLINE( 238)									_this14->zip_axis = false;
HXDLIN( 238)									{
HXLINE( 238)										_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN( 238)										_this14->axisy = ::Math_obj::cos(_this14->rot);
            									}
            								}
            							}
HXDLIN( 238)							{
HXLINE( 238)								_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 238)								_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            							}
            						}
            					}
HXDLIN( 238)					Float rx = _this->radius;
HXDLIN( 238)					Float ry = _this->radius;
HXDLIN( 238)					{
HXLINE( 238)						_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN( 238)						_this->aabb->miny = (_this->worldCOMy - ry);
            					}
HXDLIN( 238)					{
HXLINE( 238)						_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN( 238)						_this->aabb->maxy = (_this->worldCOMy + ry);
            					}
            				}
            				else {
HXLINE( 239)					 ::zpp_nape::shape::ZPP_Polygon _this15 = this->polygon;
HXDLIN( 239)					if (_this15->zip_gverts) {
HXLINE( 239)						if (hx::IsNotNull( _this15->body )) {
HXLINE( 239)							_this15->zip_gverts = false;
HXDLIN( 239)							_this15->validate_lverts();
HXDLIN( 239)							{
HXLINE( 239)								 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN( 239)								if (_this16->zip_axis) {
HXLINE( 239)									_this16->zip_axis = false;
HXDLIN( 239)									{
HXLINE( 239)										_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN( 239)										_this16->axisy = ::Math_obj::cos(_this16->rot);
            									}
            								}
            							}
HXDLIN( 239)							 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN( 239)							{
HXLINE( 239)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN( 239)								while(hx::IsNotNull( cx_ite1 )){
HXLINE( 239)									 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN( 239)									{
HXLINE( 239)										 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 239)										li = li->next;
HXDLIN( 239)										{
HXLINE( 239)											g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN( 239)											g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            										}
            									}
HXDLIN( 239)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
            					}
HXDLIN( 239)					if (hx::IsNull( _this15->lverts->next )) {
HXLINE( 239)						HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            					}
HXDLIN( 239)					 ::zpp_nape::geom::ZPP_Vec2 p0 = _this15->gverts->next;
HXDLIN( 239)					{
HXLINE( 239)						_this15->aabb->minx = p0->x;
HXDLIN( 239)						_this15->aabb->miny = p0->y;
            					}
HXDLIN( 239)					{
HXLINE( 239)						_this15->aabb->maxx = p0->x;
HXDLIN( 239)						_this15->aabb->maxy = p0->y;
            					}
HXDLIN( 239)					{
HXLINE( 239)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next->next;
HXDLIN( 239)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 239)							 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN( 239)							{
HXLINE( 239)								if ((p->x < _this15->aabb->minx)) {
HXLINE( 239)									_this15->aabb->minx = p->x;
            								}
HXDLIN( 239)								if ((p->x > _this15->aabb->maxx)) {
HXLINE( 239)									_this15->aabb->maxx = p->x;
            								}
HXDLIN( 239)								if ((p->y < _this15->aabb->miny)) {
HXLINE( 239)									_this15->aabb->miny = p->y;
            								}
HXDLIN( 239)								if ((p->y > _this15->aabb->maxy)) {
HXLINE( 239)									_this15->aabb->maxy = p->y;
            								}
            							}
HXDLIN( 239)							cx_ite2 = cx_ite2->next;
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,validate_aabb,(void))

void ZPP_Shape_obj::force_validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_246_force_validate_aabb)
HXDLIN( 246)		if ((this->type == 0)) {
HXDLIN( 246)			 ::zpp_nape::shape::ZPP_Circle _this = this->circle;
HXDLIN( 246)			{
HXDLIN( 246)				_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 246)				_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            			}
HXDLIN( 246)			_this->aabb->minx = (_this->worldCOMx - _this->radius);
HXDLIN( 246)			_this->aabb->miny = (_this->worldCOMy - _this->radius);
HXDLIN( 246)			_this->aabb->maxx = (_this->worldCOMx + _this->radius);
HXDLIN( 246)			_this->aabb->maxy = (_this->worldCOMy + _this->radius);
            		}
            		else {
HXLINE( 247)			 ::zpp_nape::shape::ZPP_Polygon _this1 = this->polygon;
HXDLIN( 247)			 ::zpp_nape::geom::ZPP_Vec2 li = _this1->lverts->next;
HXDLIN( 247)			 ::zpp_nape::geom::ZPP_Vec2 p0 = _this1->gverts->next;
HXDLIN( 247)			 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 247)			li = li->next;
HXDLIN( 247)			{
HXLINE( 247)				p0->x = (_this1->body->posx + ((_this1->body->axisy * l->x) - (_this1->body->axisx * l->y)));
HXDLIN( 247)				p0->y = (_this1->body->posy + ((l->x * _this1->body->axisx) + (l->y * _this1->body->axisy)));
            			}
HXDLIN( 247)			{
HXLINE( 247)				_this1->aabb->minx = p0->x;
HXDLIN( 247)				_this1->aabb->miny = p0->y;
            			}
HXDLIN( 247)			{
HXLINE( 247)				_this1->aabb->maxx = p0->x;
HXDLIN( 247)				_this1->aabb->maxy = p0->y;
            			}
HXDLIN( 247)			{
HXLINE( 247)				 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->gverts->next->next;
HXDLIN( 247)				while(hx::IsNotNull( cx_ite )){
HXLINE( 247)					 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite;
HXDLIN( 247)					{
HXLINE( 247)						 ::zpp_nape::geom::ZPP_Vec2 l1 = li;
HXDLIN( 247)						li = li->next;
HXDLIN( 247)						{
HXLINE( 247)							p->x = (_this1->body->posx + ((_this1->body->axisy * l1->x) - (_this1->body->axisx * l1->y)));
HXDLIN( 247)							p->y = (_this1->body->posy + ((l1->x * _this1->body->axisx) + (l1->y * _this1->body->axisy)));
            						}
HXDLIN( 247)						if ((p->x < _this1->aabb->minx)) {
HXLINE( 247)							_this1->aabb->minx = p->x;
            						}
HXDLIN( 247)						if ((p->x > _this1->aabb->maxx)) {
HXLINE( 247)							_this1->aabb->maxx = p->x;
            						}
HXDLIN( 247)						if ((p->y < _this1->aabb->miny)) {
HXLINE( 247)							_this1->aabb->miny = p->y;
            						}
HXDLIN( 247)						if ((p->y > _this1->aabb->maxy)) {
HXLINE( 247)							_this1->aabb->maxy = p->y;
            						}
            					}
HXDLIN( 247)					cx_ite = cx_ite->next;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,force_validate_aabb,(void))

void ZPP_Shape_obj::invalidate_aabb(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_251_invalidate_aabb)
HXLINE( 252)		this->zip_aabb = true;
HXLINE( 253)		if (hx::IsNotNull( this->body )) {
HXLINE( 253)			this->body->zip_aabb = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_aabb,(void))

void ZPP_Shape_obj::validate_area_inertia(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_256_validate_area_inertia)
HXDLIN( 256)		if (this->zip_area_inertia) {
HXLINE( 257)			this->zip_area_inertia = false;
HXLINE( 258)			if ((this->type == 0)) {
HXLINE( 258)				this->circle->_hx___validate_area_inertia();
            			}
            			else {
HXLINE( 259)				this->polygon->_hx___validate_area_inertia();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,validate_area_inertia,(void))

void ZPP_Shape_obj::validate_angDrag(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_263_validate_angDrag)
HXDLIN( 263)		bool _hx_tmp;
HXDLIN( 263)		if (!(this->zip_angDrag)) {
HXDLIN( 263)			_hx_tmp = (this->refmaterial->dynamicFriction != this->material->dynamicFriction);
            		}
            		else {
HXDLIN( 263)			_hx_tmp = true;
            		}
HXDLIN( 263)		if (_hx_tmp) {
HXLINE( 264)			this->zip_angDrag = false;
HXLINE( 265)			this->refmaterial->dynamicFriction = this->material->dynamicFriction;
HXLINE( 266)			if ((this->type == 0)) {
HXLINE( 266)				this->circle->_hx___validate_angDrag();
            			}
            			else {
HXLINE( 267)				this->polygon->_hx___validate_angDrag();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,validate_angDrag,(void))

void ZPP_Shape_obj::validate_localCOM(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_273_validate_localCOM)
HXDLIN( 273)		if (this->zip_localCOM) {
HXLINE( 274)			this->zip_localCOM = false;
HXLINE( 275)			if ((this->type == 1)) {
HXLINE( 275)				 ::zpp_nape::shape::ZPP_Polygon _this = this->polygon;
HXDLIN( 275)				if (hx::IsNull( _this->lverts->next )) {
HXLINE( 275)					HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            				}
HXDLIN( 275)				if (hx::IsNull( _this->lverts->next->next )) {
HXLINE( 275)					_this->localCOMx = _this->lverts->next->x;
HXDLIN( 275)					_this->localCOMy = _this->lverts->next->y;
            				}
            				else {
HXLINE( 275)					if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE( 275)						{
HXLINE( 275)							_this->localCOMx = _this->lverts->next->x;
HXDLIN( 275)							_this->localCOMy = _this->lverts->next->y;
            						}
HXDLIN( 275)						{
HXLINE( 275)							Float t = ((Float)1.0);
HXDLIN( 275)							 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN( 275)							_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN( 275)							 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN( 275)							_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            						}
HXDLIN( 275)						{
HXLINE( 275)							Float t1 = ((Float)0.5);
HXDLIN( 275)							 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN( 275)							_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN( 275)							 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN( 275)							_this4->localCOMy = (_this4->localCOMy * t1);
            						}
            					}
            					else {
HXLINE( 275)						{
HXLINE( 275)							_this->localCOMx = ( (Float)(0) );
HXDLIN( 275)							_this->localCOMy = ( (Float)(0) );
            						}
HXDLIN( 275)						Float area = ((Float)0.0);
HXDLIN( 275)						{
HXLINE( 275)							 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN( 275)							 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 275)							cx_ite = cx_ite->next;
HXDLIN( 275)							 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 275)							cx_ite = cx_ite->next;
HXDLIN( 275)							while(hx::IsNotNull( cx_ite )){
HXLINE( 275)								 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 275)								{
HXLINE( 275)									area = (area + (v->x * (w->y - u->y)));
HXDLIN( 275)									Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 275)									 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN( 275)									_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 275)									 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN( 275)									_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            								}
HXDLIN( 275)								u = v;
HXDLIN( 275)								v = w;
HXDLIN( 275)								cx_ite = cx_ite->next;
            							}
HXDLIN( 275)							cx_ite = _this->lverts->next;
HXDLIN( 275)							 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 275)							{
HXLINE( 275)								area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 275)								Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 275)								 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN( 275)								_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 275)								 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN( 275)								_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            							}
HXDLIN( 275)							u = v;
HXDLIN( 275)							v = w1;
HXDLIN( 275)							cx_ite = cx_ite->next;
HXDLIN( 275)							 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 275)							{
HXLINE( 275)								area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 275)								Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 275)								 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN( 275)								_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 275)								 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN( 275)								_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            							}
            						}
HXDLIN( 275)						area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 275)						{
HXLINE( 275)							Float t2 = area;
HXDLIN( 275)							 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN( 275)							_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN( 275)							 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN( 275)							_this12->localCOMy = (_this12->localCOMy * t2);
            						}
            					}
            				}
            			}
HXLINE( 276)			if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE( 277)				this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXLINE( 278)				this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,validate_localCOM,(void))

void ZPP_Shape_obj::validate_worldCOM(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_301_validate_worldCOM)
HXDLIN( 301)		if (this->zip_worldCOM) {
HXLINE( 302)			if (hx::IsNotNull( this->body )) {
HXLINE( 303)				this->zip_worldCOM = false;
HXLINE( 304)				if (this->zip_localCOM) {
HXLINE( 304)					this->zip_localCOM = false;
HXDLIN( 304)					if ((this->type == 1)) {
HXLINE( 304)						 ::zpp_nape::shape::ZPP_Polygon _this = this->polygon;
HXDLIN( 304)						if (hx::IsNull( _this->lverts->next )) {
HXLINE( 304)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            						}
HXDLIN( 304)						if (hx::IsNull( _this->lverts->next->next )) {
HXLINE( 304)							_this->localCOMx = _this->lverts->next->x;
HXDLIN( 304)							_this->localCOMy = _this->lverts->next->y;
            						}
            						else {
HXLINE( 304)							if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE( 304)								{
HXLINE( 304)									_this->localCOMx = _this->lverts->next->x;
HXDLIN( 304)									_this->localCOMy = _this->lverts->next->y;
            								}
HXDLIN( 304)								{
HXLINE( 304)									Float t = ((Float)1.0);
HXDLIN( 304)									 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN( 304)									_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN( 304)									 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN( 304)									_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            								}
HXDLIN( 304)								{
HXLINE( 304)									Float t1 = ((Float)0.5);
HXDLIN( 304)									 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN( 304)									_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN( 304)									 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN( 304)									_this4->localCOMy = (_this4->localCOMy * t1);
            								}
            							}
            							else {
HXLINE( 304)								{
HXLINE( 304)									_this->localCOMx = ( (Float)(0) );
HXDLIN( 304)									_this->localCOMy = ( (Float)(0) );
            								}
HXDLIN( 304)								Float area = ((Float)0.0);
HXDLIN( 304)								{
HXLINE( 304)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN( 304)									 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 304)									cx_ite = cx_ite->next;
HXDLIN( 304)									 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 304)									cx_ite = cx_ite->next;
HXDLIN( 304)									while(hx::IsNotNull( cx_ite )){
HXLINE( 304)										 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 304)										{
HXLINE( 304)											area = (area + (v->x * (w->y - u->y)));
HXDLIN( 304)											Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 304)											 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN( 304)											_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 304)											 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN( 304)											_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            										}
HXDLIN( 304)										u = v;
HXDLIN( 304)										v = w;
HXDLIN( 304)										cx_ite = cx_ite->next;
            									}
HXDLIN( 304)									cx_ite = _this->lverts->next;
HXDLIN( 304)									 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 304)									{
HXLINE( 304)										area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 304)										Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 304)										 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN( 304)										_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 304)										 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN( 304)										_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            									}
HXDLIN( 304)									u = v;
HXDLIN( 304)									v = w1;
HXDLIN( 304)									cx_ite = cx_ite->next;
HXDLIN( 304)									 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 304)									{
HXLINE( 304)										area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 304)										Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 304)										 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN( 304)										_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 304)										 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN( 304)										_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            									}
            								}
HXDLIN( 304)								area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 304)								{
HXLINE( 304)									Float t2 = area;
HXDLIN( 304)									 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN( 304)									_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN( 304)									 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN( 304)									_this12->localCOMy = (_this12->localCOMy * t2);
            								}
            							}
            						}
            					}
HXDLIN( 304)					if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE( 304)						this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXDLIN( 304)						this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            					}
            				}
HXLINE( 305)				{
HXLINE( 305)					 ::zpp_nape::phys::ZPP_Body _this13 = this->body;
HXDLIN( 305)					if (_this13->zip_axis) {
HXLINE( 305)						_this13->zip_axis = false;
HXDLIN( 305)						{
HXLINE( 305)							_this13->axisx = ::Math_obj::sin(_this13->rot);
HXDLIN( 305)							_this13->axisy = ::Math_obj::cos(_this13->rot);
            						}
            					}
            				}
HXLINE( 306)				{
HXLINE( 307)					this->worldCOMx = (this->body->posx + ((this->body->axisy * this->localCOMx) - (this->body->axisx * this->localCOMy)));
HXLINE( 308)					this->worldCOMy = (this->body->posy + ((this->localCOMx * this->body->axisx) + (this->localCOMy * this->body->axisy)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,validate_worldCOM,(void))

void ZPP_Shape_obj::getworldCOM(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_313_getworldCOM)
HXLINE( 315)		if (hx::IsNull( this->body )) {
HXLINE( 315)			HX_STACK_DO_THROW(HX_("Error: worldCOM only makes sense when Shape belongs to a Body",33,ae,6f,8c));
            		}
HXLINE( 317)		if (this->zip_worldCOM) {
HXLINE( 317)			if (hx::IsNotNull( this->body )) {
HXLINE( 317)				this->zip_worldCOM = false;
HXDLIN( 317)				if (this->zip_localCOM) {
HXLINE( 317)					this->zip_localCOM = false;
HXDLIN( 317)					if ((this->type == 1)) {
HXLINE( 317)						 ::zpp_nape::shape::ZPP_Polygon _this = this->polygon;
HXDLIN( 317)						if (hx::IsNull( _this->lverts->next )) {
HXLINE( 317)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            						}
HXDLIN( 317)						if (hx::IsNull( _this->lverts->next->next )) {
HXLINE( 317)							_this->localCOMx = _this->lverts->next->x;
HXDLIN( 317)							_this->localCOMy = _this->lverts->next->y;
            						}
            						else {
HXLINE( 317)							if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE( 317)								{
HXLINE( 317)									_this->localCOMx = _this->lverts->next->x;
HXDLIN( 317)									_this->localCOMy = _this->lverts->next->y;
            								}
HXDLIN( 317)								{
HXLINE( 317)									Float t = ((Float)1.0);
HXDLIN( 317)									 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN( 317)									_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN( 317)									 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN( 317)									_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            								}
HXDLIN( 317)								{
HXLINE( 317)									Float t1 = ((Float)0.5);
HXDLIN( 317)									 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN( 317)									_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN( 317)									 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN( 317)									_this4->localCOMy = (_this4->localCOMy * t1);
            								}
            							}
            							else {
HXLINE( 317)								{
HXLINE( 317)									_this->localCOMx = ( (Float)(0) );
HXDLIN( 317)									_this->localCOMy = ( (Float)(0) );
            								}
HXDLIN( 317)								Float area = ((Float)0.0);
HXDLIN( 317)								{
HXLINE( 317)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN( 317)									 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 317)									cx_ite = cx_ite->next;
HXDLIN( 317)									 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 317)									cx_ite = cx_ite->next;
HXDLIN( 317)									while(hx::IsNotNull( cx_ite )){
HXLINE( 317)										 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 317)										{
HXLINE( 317)											area = (area + (v->x * (w->y - u->y)));
HXDLIN( 317)											Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 317)											 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN( 317)											_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 317)											 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN( 317)											_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            										}
HXDLIN( 317)										u = v;
HXDLIN( 317)										v = w;
HXDLIN( 317)										cx_ite = cx_ite->next;
            									}
HXDLIN( 317)									cx_ite = _this->lverts->next;
HXDLIN( 317)									 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 317)									{
HXLINE( 317)										area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 317)										Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 317)										 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN( 317)										_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 317)										 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN( 317)										_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            									}
HXDLIN( 317)									u = v;
HXDLIN( 317)									v = w1;
HXDLIN( 317)									cx_ite = cx_ite->next;
HXDLIN( 317)									 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 317)									{
HXLINE( 317)										area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 317)										Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 317)										 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN( 317)										_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 317)										 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN( 317)										_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            									}
            								}
HXDLIN( 317)								area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 317)								{
HXLINE( 317)									Float t2 = area;
HXDLIN( 317)									 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN( 317)									_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN( 317)									 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN( 317)									_this12->localCOMy = (_this12->localCOMy * t2);
            								}
            							}
            						}
            					}
HXDLIN( 317)					if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE( 317)						this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXDLIN( 317)						this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            					}
            				}
HXDLIN( 317)				{
HXLINE( 317)					 ::zpp_nape::phys::ZPP_Body _this13 = this->body;
HXDLIN( 317)					if (_this13->zip_axis) {
HXLINE( 317)						_this13->zip_axis = false;
HXDLIN( 317)						{
HXLINE( 317)							_this13->axisx = ::Math_obj::sin(_this13->rot);
HXDLIN( 317)							_this13->axisy = ::Math_obj::cos(_this13->rot);
            						}
            					}
            				}
HXDLIN( 317)				{
HXLINE( 317)					this->worldCOMx = (this->body->posx + ((this->body->axisy * this->localCOMx) - (this->body->axisx * this->localCOMy)));
HXDLIN( 317)					this->worldCOMy = (this->body->posy + ((this->localCOMx * this->body->axisx) + (this->localCOMy * this->body->axisy)));
            				}
            			}
            		}
HXLINE( 318)		{
HXLINE( 319)			this->wrap_worldCOM->zpp_inner->x = this->worldCOMx;
HXLINE( 320)			this->wrap_worldCOM->zpp_inner->y = this->worldCOMy;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,getworldCOM,(void))

void ZPP_Shape_obj::invalidate_area_inertia(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_339_invalidate_area_inertia)
HXLINE( 340)		this->zip_area_inertia = true;
HXLINE( 341)		if (hx::IsNotNull( this->body )) {
HXLINE( 342)			{
HXLINE( 342)				 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN( 342)				_this->zip_localCOM = true;
HXDLIN( 342)				_this->zip_worldCOM = true;
            			}
HXLINE( 343)			this->body->invalidate_mass();
HXLINE( 344)			this->body->invalidate_inertia();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_area_inertia,(void))

void ZPP_Shape_obj::invalidate_angDrag(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_348_invalidate_angDrag)
HXDLIN( 348)		this->zip_angDrag = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_angDrag,(void))

void ZPP_Shape_obj::invalidate_localCOM(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_350_invalidate_localCOM)
HXLINE( 351)		this->zip_localCOM = true;
HXLINE( 352)		this->invalidate_area_inertia();
HXLINE( 353)		if ((this->type == 0)) {
HXLINE( 353)			this->zip_sweepRadius = true;
            		}
HXLINE( 354)		this->invalidate_angDrag();
HXLINE( 355)		this->invalidate_worldCOM();
HXLINE( 356)		if (hx::IsNotNull( this->body )) {
HXLINE( 356)			 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN( 356)			_this->zip_localCOM = true;
HXDLIN( 356)			_this->zip_worldCOM = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_localCOM,(void))

void ZPP_Shape_obj::invalidate_worldCOM(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_358_invalidate_worldCOM)
HXLINE( 359)		this->zip_worldCOM = true;
HXLINE( 360)		{
HXLINE( 360)			this->zip_aabb = true;
HXDLIN( 360)			if (hx::IsNotNull( this->body )) {
HXLINE( 360)				this->body->zip_aabb = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_worldCOM,(void))

void ZPP_Shape_obj::invalidate_material(int flags){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_362_invalidate_material)
HXLINE( 363)		if (((flags & ::zpp_nape::phys::ZPP_Material_obj::WAKE) != 0)) {
HXLINE( 363)			this->wake();
            		}
HXLINE( 364)		if (((flags & ::zpp_nape::phys::ZPP_Material_obj::ARBITERS) != 0)) {
HXLINE( 365)			if (hx::IsNotNull( this->body )) {
HXLINE( 365)				this->body->refreshArbiters();
            			}
            		}
HXLINE( 367)		if (((flags & ::zpp_nape::phys::ZPP_Material_obj::PROPS) != 0)) {
HXLINE( 368)			if (hx::IsNotNull( this->body )) {
HXLINE( 369)				{
HXLINE( 369)					 ::zpp_nape::phys::ZPP_Body _this = this->body;
HXDLIN( 369)					_this->zip_localCOM = true;
HXDLIN( 369)					_this->zip_worldCOM = true;
            				}
HXLINE( 370)				this->body->invalidate_mass();
HXLINE( 371)				this->body->invalidate_inertia();
            			}
            		}
HXLINE( 374)		if (((flags & ::zpp_nape::phys::ZPP_Material_obj::ANGDRAG) != 0)) {
HXLINE( 375)			this->invalidate_angDrag();
            		}
HXLINE( 377)		this->refmaterial->set(this->material);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Shape_obj,invalidate_material,(void))

void ZPP_Shape_obj::invalidate_filter(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_380_invalidate_filter)
HXDLIN( 380)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_filter,(void))

void ZPP_Shape_obj::invalidate_fluidprops(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_383_invalidate_fluidprops)
HXDLIN( 383)		if (this->fluidEnabled) {
HXDLIN( 383)			this->wake();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,invalidate_fluidprops,(void))

void ZPP_Shape_obj::aabb_validate(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_385_aabb_validate)
HXLINE( 387)		if (hx::IsNull( this->body )) {
HXLINE( 387)			HX_STACK_DO_THROW(HX_("Error: bounds only makes sense when Shape belongs to a Body",99,3e,44,1a));
            		}
HXLINE( 389)		if (this->zip_aabb) {
HXLINE( 389)			if (hx::IsNotNull( this->body )) {
HXLINE( 389)				this->zip_aabb = false;
HXDLIN( 389)				if ((this->type == 0)) {
HXLINE( 389)					 ::zpp_nape::shape::ZPP_Circle _this = this->circle;
HXDLIN( 389)					if (_this->zip_worldCOM) {
HXLINE( 389)						if (hx::IsNotNull( _this->body )) {
HXLINE( 389)							_this->zip_worldCOM = false;
HXDLIN( 389)							if (_this->zip_localCOM) {
HXLINE( 389)								_this->zip_localCOM = false;
HXDLIN( 389)								if ((_this->type == 1)) {
HXLINE( 389)									 ::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;
HXDLIN( 389)									if (hx::IsNull( _this1->lverts->next )) {
HXLINE( 389)										HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            									}
HXDLIN( 389)									if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE( 389)										_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 389)										_this1->localCOMy = _this1->lverts->next->y;
            									}
            									else {
HXLINE( 389)										if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE( 389)											{
HXLINE( 389)												_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 389)												_this1->localCOMy = _this1->lverts->next->y;
            											}
HXDLIN( 389)											{
HXLINE( 389)												Float t = ((Float)1.0);
HXDLIN( 389)												 ::zpp_nape::shape::ZPP_Polygon _this2 = _this1;
HXDLIN( 389)												_this2->localCOMx = (_this2->localCOMx + (_this1->lverts->next->next->x * t));
HXDLIN( 389)												 ::zpp_nape::shape::ZPP_Polygon _this3 = _this1;
HXDLIN( 389)												_this3->localCOMy = (_this3->localCOMy + (_this1->lverts->next->next->y * t));
            											}
HXDLIN( 389)											{
HXLINE( 389)												Float t1 = ((Float)0.5);
HXDLIN( 389)												 ::zpp_nape::shape::ZPP_Polygon _this4 = _this1;
HXDLIN( 389)												_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN( 389)												 ::zpp_nape::shape::ZPP_Polygon _this5 = _this1;
HXDLIN( 389)												_this5->localCOMy = (_this5->localCOMy * t1);
            											}
            										}
            										else {
HXLINE( 389)											{
HXLINE( 389)												_this1->localCOMx = ( (Float)(0) );
HXDLIN( 389)												_this1->localCOMy = ( (Float)(0) );
            											}
HXDLIN( 389)											Float area = ((Float)0.0);
HXDLIN( 389)											{
HXLINE( 389)												 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;
HXDLIN( 389)												 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 389)												cx_ite = cx_ite->next;
HXDLIN( 389)												 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 389)												cx_ite = cx_ite->next;
HXDLIN( 389)												while(hx::IsNotNull( cx_ite )){
HXLINE( 389)													 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 389)													{
HXLINE( 389)														area = (area + (v->x * (w->y - u->y)));
HXDLIN( 389)														Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 389)														 ::zpp_nape::shape::ZPP_Polygon _this6 = _this1;
HXDLIN( 389)														_this6->localCOMx = (_this6->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 389)														 ::zpp_nape::shape::ZPP_Polygon _this7 = _this1;
HXDLIN( 389)														_this7->localCOMy = (_this7->localCOMy + ((v->y + w->y) * cf));
            													}
HXDLIN( 389)													u = v;
HXDLIN( 389)													v = w;
HXDLIN( 389)													cx_ite = cx_ite->next;
            												}
HXDLIN( 389)												cx_ite = _this1->lverts->next;
HXDLIN( 389)												 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 389)												{
HXLINE( 389)													area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 389)													Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 389)													 ::zpp_nape::shape::ZPP_Polygon _this8 = _this1;
HXDLIN( 389)													_this8->localCOMx = (_this8->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 389)													 ::zpp_nape::shape::ZPP_Polygon _this9 = _this1;
HXDLIN( 389)													_this9->localCOMy = (_this9->localCOMy + ((v->y + w1->y) * cf1));
            												}
HXDLIN( 389)												u = v;
HXDLIN( 389)												v = w1;
HXDLIN( 389)												cx_ite = cx_ite->next;
HXDLIN( 389)												 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 389)												{
HXLINE( 389)													area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 389)													Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 389)													 ::zpp_nape::shape::ZPP_Polygon _this10 = _this1;
HXDLIN( 389)													_this10->localCOMx = (_this10->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 389)													 ::zpp_nape::shape::ZPP_Polygon _this11 = _this1;
HXDLIN( 389)													_this11->localCOMy = (_this11->localCOMy + ((v->y + w2->y) * cf2));
            												}
            											}
HXDLIN( 389)											area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 389)											{
HXLINE( 389)												Float t2 = area;
HXDLIN( 389)												 ::zpp_nape::shape::ZPP_Polygon _this12 = _this1;
HXDLIN( 389)												_this12->localCOMx = (_this12->localCOMx * t2);
HXDLIN( 389)												 ::zpp_nape::shape::ZPP_Polygon _this13 = _this1;
HXDLIN( 389)												_this13->localCOMy = (_this13->localCOMy * t2);
            											}
            										}
            									}
            								}
HXDLIN( 389)								if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE( 389)									_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN( 389)									_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            								}
            							}
HXDLIN( 389)							{
HXLINE( 389)								 ::zpp_nape::phys::ZPP_Body _this14 = _this->body;
HXDLIN( 389)								if (_this14->zip_axis) {
HXLINE( 389)									_this14->zip_axis = false;
HXDLIN( 389)									{
HXLINE( 389)										_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN( 389)										_this14->axisy = ::Math_obj::cos(_this14->rot);
            									}
            								}
            							}
HXDLIN( 389)							{
HXLINE( 389)								_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 389)								_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            							}
            						}
            					}
HXDLIN( 389)					Float rx = _this->radius;
HXDLIN( 389)					Float ry = _this->radius;
HXDLIN( 389)					{
HXLINE( 389)						_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN( 389)						_this->aabb->miny = (_this->worldCOMy - ry);
            					}
HXDLIN( 389)					{
HXLINE( 389)						_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN( 389)						_this->aabb->maxy = (_this->worldCOMy + ry);
            					}
            				}
            				else {
HXLINE( 389)					 ::zpp_nape::shape::ZPP_Polygon _this15 = this->polygon;
HXDLIN( 389)					if (_this15->zip_gverts) {
HXLINE( 389)						if (hx::IsNotNull( _this15->body )) {
HXLINE( 389)							_this15->zip_gverts = false;
HXDLIN( 389)							_this15->validate_lverts();
HXDLIN( 389)							{
HXLINE( 389)								 ::zpp_nape::phys::ZPP_Body _this16 = _this15->body;
HXDLIN( 389)								if (_this16->zip_axis) {
HXLINE( 389)									_this16->zip_axis = false;
HXDLIN( 389)									{
HXLINE( 389)										_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN( 389)										_this16->axisy = ::Math_obj::cos(_this16->rot);
            									}
            								}
            							}
HXDLIN( 389)							 ::zpp_nape::geom::ZPP_Vec2 li = _this15->lverts->next;
HXDLIN( 389)							{
HXLINE( 389)								 ::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this15->gverts->next;
HXDLIN( 389)								while(hx::IsNotNull( cx_ite1 )){
HXLINE( 389)									 ::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;
HXDLIN( 389)									{
HXLINE( 389)										 ::zpp_nape::geom::ZPP_Vec2 l = li;
HXDLIN( 389)										li = li->next;
HXDLIN( 389)										{
HXLINE( 389)											g->x = (_this15->body->posx + ((_this15->body->axisy * l->x) - (_this15->body->axisx * l->y)));
HXDLIN( 389)											g->y = (_this15->body->posy + ((l->x * _this15->body->axisx) + (l->y * _this15->body->axisy)));
            										}
            									}
HXDLIN( 389)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
            					}
HXDLIN( 389)					if (hx::IsNull( _this15->lverts->next )) {
HXLINE( 389)						HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful bounds",da,28,5b,f5));
            					}
HXDLIN( 389)					 ::zpp_nape::geom::ZPP_Vec2 p0 = _this15->gverts->next;
HXDLIN( 389)					{
HXLINE( 389)						_this15->aabb->minx = p0->x;
HXDLIN( 389)						_this15->aabb->miny = p0->y;
            					}
HXDLIN( 389)					{
HXLINE( 389)						_this15->aabb->maxx = p0->x;
HXDLIN( 389)						_this15->aabb->maxy = p0->y;
            					}
HXDLIN( 389)					{
HXLINE( 389)						 ::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this15->gverts->next->next;
HXDLIN( 389)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 389)							 ::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;
HXDLIN( 389)							{
HXLINE( 389)								if ((p->x < _this15->aabb->minx)) {
HXLINE( 389)									_this15->aabb->minx = p->x;
            								}
HXDLIN( 389)								if ((p->x > _this15->aabb->maxx)) {
HXLINE( 389)									_this15->aabb->maxx = p->x;
            								}
HXDLIN( 389)								if ((p->y < _this15->aabb->miny)) {
HXLINE( 389)									_this15->aabb->miny = p->y;
            								}
HXDLIN( 389)								if ((p->y > _this15->aabb->maxy)) {
HXLINE( 389)									_this15->aabb->maxy = p->y;
            								}
            							}
HXDLIN( 389)							cx_ite2 = cx_ite2->next;
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,aabb_validate,(void))

void ZPP_Shape_obj::setMaterial( ::zpp_nape::phys::ZPP_Material material){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_449_setMaterial)
HXDLIN( 449)		if (hx::IsNotEq( this->material,material )) {
HXLINE( 450)			bool _hx_tmp;
HXDLIN( 450)			if (hx::IsNotNull( this->body )) {
HXLINE( 450)				_hx_tmp = hx::IsNotNull( this->body->space );
            			}
            			else {
HXLINE( 450)				_hx_tmp = false;
            			}
HXDLIN( 450)			if (_hx_tmp) {
HXLINE( 451)				if (hx::IsNotNull( this->material )) {
HXLINE( 451)					this->material->shapes->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 453)			this->material = material;
HXLINE( 454)			bool _hx_tmp1;
HXDLIN( 454)			if (hx::IsNotNull( this->body )) {
HXLINE( 454)				_hx_tmp1 = hx::IsNotNull( this->body->space );
            			}
            			else {
HXLINE( 454)				_hx_tmp1 = false;
            			}
HXDLIN( 454)			if (_hx_tmp1) {
HXLINE( 454)				material->shapes->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 455)			this->wake();
HXLINE( 456)			if (hx::IsNotNull( this->body )) {
HXLINE( 456)				this->body->refreshArbiters();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Shape_obj,setMaterial,(void))

void ZPP_Shape_obj::setFilter( ::zpp_nape::dynamics::ZPP_InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_460_setFilter)
HXDLIN( 460)		if (hx::IsNotEq( this->filter,filter )) {
HXLINE( 461)			bool _hx_tmp;
HXDLIN( 461)			if (hx::IsNotNull( this->body )) {
HXLINE( 461)				_hx_tmp = hx::IsNotNull( this->body->space );
            			}
            			else {
HXLINE( 461)				_hx_tmp = false;
            			}
HXDLIN( 461)			if (_hx_tmp) {
HXLINE( 462)				if (hx::IsNotNull( this->filter )) {
HXLINE( 462)					this->filter->shapes->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 464)			this->filter = filter;
HXLINE( 465)			bool _hx_tmp1;
HXDLIN( 465)			if (hx::IsNotNull( this->body )) {
HXLINE( 465)				_hx_tmp1 = hx::IsNotNull( this->body->space );
            			}
            			else {
HXLINE( 465)				_hx_tmp1 = false;
            			}
HXDLIN( 465)			if (_hx_tmp1) {
HXLINE( 465)				filter->shapes->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 466)			this->wake();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Shape_obj,setFilter,(void))

void ZPP_Shape_obj::setFluid( ::zpp_nape::phys::ZPP_FluidProperties fluid){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_470_setFluid)
HXDLIN( 470)		if (hx::IsNotEq( this->fluidProperties,fluid )) {
HXLINE( 471)			bool _hx_tmp;
HXDLIN( 471)			if (hx::IsNotNull( this->body )) {
HXLINE( 471)				_hx_tmp = hx::IsNotNull( this->body->space );
            			}
            			else {
HXLINE( 471)				_hx_tmp = false;
            			}
HXDLIN( 471)			if (_hx_tmp) {
HXLINE( 472)				if (hx::IsNotNull( this->fluidProperties )) {
HXLINE( 472)					this->fluidProperties->shapes->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 474)			this->fluidProperties = fluid;
HXLINE( 475)			bool _hx_tmp1;
HXDLIN( 475)			if (hx::IsNotNull( this->body )) {
HXLINE( 475)				_hx_tmp1 = hx::IsNotNull( this->body->space );
            			}
            			else {
HXLINE( 475)				_hx_tmp1 = false;
            			}
HXDLIN( 475)			if (_hx_tmp1) {
HXLINE( 475)				fluid->shapes->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 476)			if (this->fluidEnabled) {
HXLINE( 476)				this->wake();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Shape_obj,setFluid,(void))

void ZPP_Shape_obj::_hx___immutable_midstep(::String name){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_481___immutable_midstep)
HXDLIN( 481)		bool _hx_tmp;
HXDLIN( 481)		bool _hx_tmp1;
HXDLIN( 481)		if (hx::IsNotNull( this->body )) {
HXDLIN( 481)			_hx_tmp1 = hx::IsNotNull( this->body->space );
            		}
            		else {
HXDLIN( 481)			_hx_tmp1 = false;
            		}
HXDLIN( 481)		if (_hx_tmp1) {
HXDLIN( 481)			_hx_tmp = this->body->space->midstep;
            		}
            		else {
HXDLIN( 481)			_hx_tmp = false;
            		}
HXDLIN( 481)		if (_hx_tmp) {
HXDLIN( 481)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + name) + HX_(" cannot be set during a space step()",87,d5,6a,c1)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Shape_obj,_hx___immutable_midstep,(void))

void ZPP_Shape_obj::addedToBody(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_484_addedToBody)
HXLINE( 485)		this->invalidate_worldCOM();
HXLINE( 486)		{
HXLINE( 486)			this->zip_aabb = true;
HXDLIN( 486)			if (hx::IsNotNull( this->body )) {
HXLINE( 486)				this->body->zip_aabb = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,addedToBody,(void))

void ZPP_Shape_obj::removedFromBody(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_488_removedFromBody)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,removedFromBody,(void))

void ZPP_Shape_obj::addedToSpace(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_489_addedToSpace)
HXLINE( 490)		this->_hx___iaddedToSpace();
HXLINE( 491)		this->material->shapes->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 492)		this->filter->shapes->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 493)		if (hx::IsNotNull( this->fluidProperties )) {
HXLINE( 493)			this->fluidProperties->shapes->add(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,addedToSpace,(void))

void ZPP_Shape_obj::removedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_495_removedFromSpace)
HXLINE( 496)		this->_hx___iremovedFromSpace();
HXLINE( 497)		this->material->shapes->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE( 498)		this->filter->shapes->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE( 499)		if (hx::IsNotNull( this->fluidProperties )) {
HXLINE( 499)			this->fluidProperties->shapes->remove(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,removedFromSpace,(void))

 ::nape::shape::Shape ZPP_Shape_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_501_copy)
HXLINE( 502)		 ::zpp_nape::shape::ZPP_Shape ret = null();
HXLINE( 503)		if ((this->type == 0)) {
HXLINE( 503)			ret = this->circle->__copy();
            		}
            		else {
HXLINE( 504)			ret = this->polygon->__copy();
            		}
HXLINE( 505)		if (!(this->zip_area_inertia)) {
HXLINE( 506)			ret->area = this->area;
HXLINE( 507)			ret->inertia = this->inertia;
            		}
            		else {
HXLINE( 509)			ret->invalidate_area_inertia();
            		}
HXLINE( 510)		if (!(this->zip_sweepRadius)) {
HXLINE( 511)			ret->sweepRadius = this->sweepRadius;
HXLINE( 512)			ret->sweepCoef = this->sweepCoef;
            		}
            		else {
HXLINE( 514)			ret->zip_sweepRadius = true;
            		}
HXLINE( 515)		if (!(this->zip_angDrag)) {
HXLINE( 515)			ret->angDrag = this->angDrag;
            		}
            		else {
HXLINE( 516)			ret->invalidate_angDrag();
            		}
HXLINE( 517)		if (!(this->zip_aabb)) {
HXLINE( 518)			{
HXLINE( 519)				ret->aabb->minx = this->aabb->minx;
HXLINE( 520)				ret->aabb->miny = this->aabb->miny;
            			}
HXLINE( 538)			{
HXLINE( 539)				ret->aabb->maxx = this->aabb->maxx;
HXLINE( 540)				ret->aabb->maxy = this->aabb->maxy;
            			}
            		}
            		else {
HXLINE( 559)			ret->zip_aabb = true;
HXDLIN( 559)			if (hx::IsNotNull( ret->body )) {
HXLINE( 559)				ret->body->zip_aabb = true;
            			}
            		}
HXLINE( 560)		{
HXLINE( 561)			 ::zpp_nape::phys::ZPP_Material o = ret->material;
HXLINE( 570)			o->outer = null();
HXLINE( 571)			o->next = ::zpp_nape::phys::ZPP_Material_obj::zpp_pool;
HXLINE( 572)			::zpp_nape::phys::ZPP_Material_obj::zpp_pool = o;
            		}
HXLINE( 577)		{
HXLINE( 578)			 ::zpp_nape::dynamics::ZPP_InteractionFilter o1 = ret->filter;
HXLINE( 587)			o1->outer = null();
HXLINE( 588)			o1->next = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 589)			::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = o1;
            		}
HXLINE( 594)		ret->material = this->material;
HXLINE( 595)		ret->filter = this->filter;
HXLINE( 596)		if (hx::IsNotNull( this->fluidProperties )) {
HXLINE( 596)			ret->fluidProperties = this->fluidProperties;
            		}
HXLINE( 597)		ret->fluidEnabled = this->fluidEnabled;
HXLINE( 598)		ret->sensorEnabled = this->sensorEnabled;
HXLINE( 599)		if (hx::IsNotNull( this->userData )) {
HXLINE( 599)			ret->userData = ::Reflect_obj::copy(this->userData);
            		}
HXLINE( 600)		this->copyto(ret->outer);
HXLINE( 601)		return ret->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Shape_obj,copy,return )

::Array< ::Dynamic> ZPP_Shape_obj::types;


hx::ObjectPtr< ZPP_Shape_obj > ZPP_Shape_obj::__new(int type) {
	hx::ObjectPtr< ZPP_Shape_obj > __this = new ZPP_Shape_obj();
	__this->__construct(type);
	return __this;
}

hx::ObjectPtr< ZPP_Shape_obj > ZPP_Shape_obj::__alloc(hx::Ctx *_hx_ctx,int type) {
	ZPP_Shape_obj *__this = (ZPP_Shape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Shape_obj), true, "zpp_nape.shape.ZPP_Shape"));
	*(void **)__this = ZPP_Shape_obj::_hx_vtable;
	__this->__construct(type);
	return __this;
}

ZPP_Shape_obj::ZPP_Shape_obj()
{
}

void ZPP_Shape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Shape);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(area,"area");
	HX_MARK_MEMBER_NAME(zip_area_inertia,"zip_area_inertia");
	HX_MARK_MEMBER_NAME(inertia,"inertia");
	HX_MARK_MEMBER_NAME(angDrag,"angDrag");
	HX_MARK_MEMBER_NAME(zip_angDrag,"zip_angDrag");
	HX_MARK_MEMBER_NAME(localCOMx,"localCOMx");
	HX_MARK_MEMBER_NAME(localCOMy,"localCOMy");
	HX_MARK_MEMBER_NAME(zip_localCOM,"zip_localCOM");
	HX_MARK_MEMBER_NAME(worldCOMx,"worldCOMx");
	HX_MARK_MEMBER_NAME(worldCOMy,"worldCOMy");
	HX_MARK_MEMBER_NAME(zip_worldCOM,"zip_worldCOM");
	HX_MARK_MEMBER_NAME(wrap_localCOM,"wrap_localCOM");
	HX_MARK_MEMBER_NAME(wrap_worldCOM,"wrap_worldCOM");
	HX_MARK_MEMBER_NAME(sweepRadius,"sweepRadius");
	HX_MARK_MEMBER_NAME(zip_sweepRadius,"zip_sweepRadius");
	HX_MARK_MEMBER_NAME(sweepCoef,"sweepCoef");
	HX_MARK_MEMBER_NAME(circle,"circle");
	HX_MARK_MEMBER_NAME(polygon,"polygon");
	HX_MARK_MEMBER_NAME(refmaterial,"refmaterial");
	HX_MARK_MEMBER_NAME(material,"material");
	HX_MARK_MEMBER_NAME(filter,"filter");
	HX_MARK_MEMBER_NAME(fluidProperties,"fluidProperties");
	HX_MARK_MEMBER_NAME(fluidEnabled,"fluidEnabled");
	HX_MARK_MEMBER_NAME(sensorEnabled,"sensorEnabled");
	HX_MARK_MEMBER_NAME(sweep,"sweep");
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_MEMBER_NAME(pairs,"pairs");
	HX_MARK_MEMBER_NAME(aabb,"aabb");
	HX_MARK_MEMBER_NAME(zip_aabb,"zip_aabb");
	 ::zpp_nape::phys::ZPP_Interactor_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_Shape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(area,"area");
	HX_VISIT_MEMBER_NAME(zip_area_inertia,"zip_area_inertia");
	HX_VISIT_MEMBER_NAME(inertia,"inertia");
	HX_VISIT_MEMBER_NAME(angDrag,"angDrag");
	HX_VISIT_MEMBER_NAME(zip_angDrag,"zip_angDrag");
	HX_VISIT_MEMBER_NAME(localCOMx,"localCOMx");
	HX_VISIT_MEMBER_NAME(localCOMy,"localCOMy");
	HX_VISIT_MEMBER_NAME(zip_localCOM,"zip_localCOM");
	HX_VISIT_MEMBER_NAME(worldCOMx,"worldCOMx");
	HX_VISIT_MEMBER_NAME(worldCOMy,"worldCOMy");
	HX_VISIT_MEMBER_NAME(zip_worldCOM,"zip_worldCOM");
	HX_VISIT_MEMBER_NAME(wrap_localCOM,"wrap_localCOM");
	HX_VISIT_MEMBER_NAME(wrap_worldCOM,"wrap_worldCOM");
	HX_VISIT_MEMBER_NAME(sweepRadius,"sweepRadius");
	HX_VISIT_MEMBER_NAME(zip_sweepRadius,"zip_sweepRadius");
	HX_VISIT_MEMBER_NAME(sweepCoef,"sweepCoef");
	HX_VISIT_MEMBER_NAME(circle,"circle");
	HX_VISIT_MEMBER_NAME(polygon,"polygon");
	HX_VISIT_MEMBER_NAME(refmaterial,"refmaterial");
	HX_VISIT_MEMBER_NAME(material,"material");
	HX_VISIT_MEMBER_NAME(filter,"filter");
	HX_VISIT_MEMBER_NAME(fluidProperties,"fluidProperties");
	HX_VISIT_MEMBER_NAME(fluidEnabled,"fluidEnabled");
	HX_VISIT_MEMBER_NAME(sensorEnabled,"sensorEnabled");
	HX_VISIT_MEMBER_NAME(sweep,"sweep");
	HX_VISIT_MEMBER_NAME(node,"node");
	HX_VISIT_MEMBER_NAME(pairs,"pairs");
	HX_VISIT_MEMBER_NAME(aabb,"aabb");
	HX_VISIT_MEMBER_NAME(zip_aabb,"zip_aabb");
	 ::zpp_nape::phys::ZPP_Interactor_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_Shape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"area") ) { return hx::Val( area ); }
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node ); }
		if (HX_FIELD_EQ(inName,"aabb") ) { return hx::Val( aabb ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		if (HX_FIELD_EQ(inName,"sweep") ) { return hx::Val( sweep ); }
		if (HX_FIELD_EQ(inName,"pairs") ) { return hx::Val( pairs ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"circle") ) { return hx::Val( circle ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inertia") ) { return hx::Val( inertia ); }
		if (HX_FIELD_EQ(inName,"angDrag") ) { return hx::Val( angDrag ); }
		if (HX_FIELD_EQ(inName,"polygon") ) { return hx::Val( polygon ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isCircle") ) { return hx::Val( isCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"material") ) { return hx::Val( material ); }
		if (HX_FIELD_EQ(inName,"zip_aabb") ) { return hx::Val( zip_aabb ); }
		if (HX_FIELD_EQ(inName,"setFluid") ) { return hx::Val( setFluid_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPolygon") ) { return hx::Val( isPolygon_dyn() ); }
		if (HX_FIELD_EQ(inName,"localCOMx") ) { return hx::Val( localCOMx ); }
		if (HX_FIELD_EQ(inName,"localCOMy") ) { return hx::Val( localCOMy ); }
		if (HX_FIELD_EQ(inName,"worldCOMx") ) { return hx::Val( worldCOMx ); }
		if (HX_FIELD_EQ(inName,"worldCOMy") ) { return hx::Val( worldCOMy ); }
		if (HX_FIELD_EQ(inName,"sweepCoef") ) { return hx::Val( sweepCoef ); }
		if (HX_FIELD_EQ(inName,"setFilter") ) { return hx::Val( setFilter_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"zip_angDrag") ) { return hx::Val( zip_angDrag ); }
		if (HX_FIELD_EQ(inName,"sweepRadius") ) { return hx::Val( sweepRadius ); }
		if (HX_FIELD_EQ(inName,"refmaterial") ) { return hx::Val( refmaterial ); }
		if (HX_FIELD_EQ(inName,"getworldCOM") ) { return hx::Val( getworldCOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMaterial") ) { return hx::Val( setMaterial_dyn() ); }
		if (HX_FIELD_EQ(inName,"addedToBody") ) { return hx::Val( addedToBody_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zip_localCOM") ) { return hx::Val( zip_localCOM ); }
		if (HX_FIELD_EQ(inName,"zip_worldCOM") ) { return hx::Val( zip_worldCOM ); }
		if (HX_FIELD_EQ(inName,"fluidEnabled") ) { return hx::Val( fluidEnabled ); }
		if (HX_FIELD_EQ(inName,"addedToSpace") ) { return hx::Val( addedToSpace_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_localCOM") ) { return hx::Val( wrap_localCOM ); }
		if (HX_FIELD_EQ(inName,"wrap_worldCOM") ) { return hx::Val( wrap_worldCOM ); }
		if (HX_FIELD_EQ(inName,"sensorEnabled") ) { return hx::Val( sensorEnabled ); }
		if (HX_FIELD_EQ(inName,"validate_aabb") ) { return hx::Val( validate_aabb_dyn() ); }
		if (HX_FIELD_EQ(inName,"aabb_validate") ) { return hx::Val( aabb_validate_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"zip_sweepRadius") ) { return hx::Val( zip_sweepRadius ); }
		if (HX_FIELD_EQ(inName,"fluidProperties") ) { return hx::Val( fluidProperties ); }
		if (HX_FIELD_EQ(inName,"invalidate_aabb") ) { return hx::Val( invalidate_aabb_dyn() ); }
		if (HX_FIELD_EQ(inName,"removedFromBody") ) { return hx::Val( removedFromBody_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"zip_area_inertia") ) { return hx::Val( zip_area_inertia ); }
		if (HX_FIELD_EQ(inName,"validate_angDrag") ) { return hx::Val( validate_angDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"removedFromSpace") ) { return hx::Val( removedFromSpace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"validate_localCOM") ) { return hx::Val( validate_localCOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_worldCOM") ) { return hx::Val( validate_worldCOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_filter") ) { return hx::Val( invalidate_filter_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"invalidate_angDrag") ) { return hx::Val( invalidate_angDrag_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"force_validate_aabb") ) { return hx::Val( force_validate_aabb_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_localCOM") ) { return hx::Val( invalidate_localCOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_worldCOM") ) { return hx::Val( invalidate_worldCOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_material") ) { return hx::Val( invalidate_material_dyn() ); }
		if (HX_FIELD_EQ(inName,"__immutable_midstep") ) { return hx::Val( _hx___immutable_midstep_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"validate_sweepRadius") ) { return hx::Val( validate_sweepRadius_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"validate_area_inertia") ) { return hx::Val( validate_area_inertia_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidate_fluidprops") ) { return hx::Val( invalidate_fluidprops_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"invalidate_sweepRadius") ) { return hx::Val( invalidate_sweepRadius_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"invalidate_area_inertia") ) { return hx::Val( invalidate_area_inertia_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Shape_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { outValue = ( types ); return true; }
	}
	return false;
}

hx::Val ZPP_Shape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"area") ) { area=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::zpp_nape::space::ZPP_AABBNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aabb") ) { aabb=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweep") ) { sweep=inValue.Cast<  ::zpp_nape::space::ZPP_SweepData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pairs") ) { pairs=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_AABBPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"circle") ) { circle=inValue.Cast<  ::zpp_nape::shape::ZPP_Circle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filter") ) { filter=inValue.Cast<  ::zpp_nape::dynamics::ZPP_InteractionFilter >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inertia") ) { inertia=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angDrag") ) { angDrag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"polygon") ) { polygon=inValue.Cast<  ::zpp_nape::shape::ZPP_Polygon >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"material") ) { material=inValue.Cast<  ::zpp_nape::phys::ZPP_Material >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_aabb") ) { zip_aabb=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localCOMx") ) { localCOMx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localCOMy") ) { localCOMy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"worldCOMx") ) { worldCOMx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"worldCOMy") ) { worldCOMy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepCoef") ) { sweepCoef=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"zip_angDrag") ) { zip_angDrag=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepRadius") ) { sweepRadius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"refmaterial") ) { refmaterial=inValue.Cast<  ::zpp_nape::phys::ZPP_Material >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zip_localCOM") ) { zip_localCOM=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_worldCOM") ) { zip_worldCOM=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fluidEnabled") ) { fluidEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_localCOM") ) { wrap_localCOM=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_worldCOM") ) { wrap_worldCOM=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sensorEnabled") ) { sensorEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"zip_sweepRadius") ) { zip_sweepRadius=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fluidProperties") ) { fluidProperties=inValue.Cast<  ::zpp_nape::phys::ZPP_FluidProperties >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"zip_area_inertia") ) { zip_area_inertia=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Shape_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void ZPP_Shape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("body",a2,7a,1b,41));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("area",8d,8b,74,40));
	outFields->push(HX_("zip_area_inertia",66,96,4c,e4));
	outFields->push(HX_("inertia",fa,b0,ba,7c));
	outFields->push(HX_("angDrag",ee,c7,72,38));
	outFields->push(HX_("zip_angDrag",50,59,53,04));
	outFields->push(HX_("localCOMx",22,dc,ee,03));
	outFields->push(HX_("localCOMy",23,dc,ee,03));
	outFields->push(HX_("zip_localCOM",f4,6b,7e,78));
	outFields->push(HX_("worldCOMx",89,a8,c8,4e));
	outFields->push(HX_("worldCOMy",8a,a8,c8,4e));
	outFields->push(HX_("zip_worldCOM",6d,69,22,3d));
	outFields->push(HX_("wrap_localCOM",eb,fb,09,d0));
	outFields->push(HX_("wrap_worldCOM",64,f9,ad,94));
	outFields->push(HX_("sweepRadius",5e,93,9c,27));
	outFields->push(HX_("zip_sweepRadius",c0,7d,de,ea));
	outFields->push(HX_("sweepCoef",19,5a,67,cc));
	outFields->push(HX_("circle",10,72,0d,56));
	outFields->push(HX_("polygon",7a,02,91,12));
	outFields->push(HX_("refmaterial",fa,40,42,3d));
	outFields->push(HX_("material",a7,5c,a5,f0));
	outFields->push(HX_("filter",b8,1f,35,85));
	outFields->push(HX_("fluidProperties",9d,0a,80,04));
	outFields->push(HX_("fluidEnabled",97,87,5e,9a));
	outFields->push(HX_("sensorEnabled",67,15,aa,41));
	outFields->push(HX_("sweep",ec,15,0a,86));
	outFields->push(HX_("node",02,0a,0a,49));
	outFields->push(HX_("pairs",19,bb,4e,bd));
	outFields->push(HX_("aabb",a0,a2,67,40));
	outFields->push(HX_("zip_aabb",fe,3f,c9,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Shape_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::shape::Shape */ ,(int)offsetof(ZPP_Shape_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_Shape_obj,body),HX_("body",a2,7a,1b,41)},
	{hx::fsInt,(int)offsetof(ZPP_Shape_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,area),HX_("area",8d,8b,74,40)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,zip_area_inertia),HX_("zip_area_inertia",66,96,4c,e4)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,inertia),HX_("inertia",fa,b0,ba,7c)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,angDrag),HX_("angDrag",ee,c7,72,38)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,zip_angDrag),HX_("zip_angDrag",50,59,53,04)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,localCOMx),HX_("localCOMx",22,dc,ee,03)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,localCOMy),HX_("localCOMy",23,dc,ee,03)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,zip_localCOM),HX_("zip_localCOM",f4,6b,7e,78)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,worldCOMx),HX_("worldCOMx",89,a8,c8,4e)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,worldCOMy),HX_("worldCOMy",8a,a8,c8,4e)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,zip_worldCOM),HX_("zip_worldCOM",6d,69,22,3d)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_Shape_obj,wrap_localCOM),HX_("wrap_localCOM",eb,fb,09,d0)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_Shape_obj,wrap_worldCOM),HX_("wrap_worldCOM",64,f9,ad,94)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,sweepRadius),HX_("sweepRadius",5e,93,9c,27)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,zip_sweepRadius),HX_("zip_sweepRadius",c0,7d,de,ea)},
	{hx::fsFloat,(int)offsetof(ZPP_Shape_obj,sweepCoef),HX_("sweepCoef",19,5a,67,cc)},
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Circle */ ,(int)offsetof(ZPP_Shape_obj,circle),HX_("circle",10,72,0d,56)},
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Polygon */ ,(int)offsetof(ZPP_Shape_obj,polygon),HX_("polygon",7a,02,91,12)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Material */ ,(int)offsetof(ZPP_Shape_obj,refmaterial),HX_("refmaterial",fa,40,42,3d)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Material */ ,(int)offsetof(ZPP_Shape_obj,material),HX_("material",a7,5c,a5,f0)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_InteractionFilter */ ,(int)offsetof(ZPP_Shape_obj,filter),HX_("filter",b8,1f,35,85)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_FluidProperties */ ,(int)offsetof(ZPP_Shape_obj,fluidProperties),HX_("fluidProperties",9d,0a,80,04)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,fluidEnabled),HX_("fluidEnabled",97,87,5e,9a)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,sensorEnabled),HX_("sensorEnabled",67,15,aa,41)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_SweepData */ ,(int)offsetof(ZPP_Shape_obj,sweep),HX_("sweep",ec,15,0a,86)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_AABBNode */ ,(int)offsetof(ZPP_Shape_obj,node),HX_("node",02,0a,0a,49)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_AABBPair */ ,(int)offsetof(ZPP_Shape_obj,pairs),HX_("pairs",19,bb,4e,bd)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_AABB */ ,(int)offsetof(ZPP_Shape_obj,aabb),HX_("aabb",a0,a2,67,40)},
	{hx::fsBool,(int)offsetof(ZPP_Shape_obj,zip_aabb),HX_("zip_aabb",fe,3f,c9,0b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Shape_obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ZPP_Shape_obj::types,HX_("types",79,70,cb,1a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Shape_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("body",a2,7a,1b,41),
	HX_("type",ba,f2,08,4d),
	HX_("isCircle",9a,0d,77,ae),
	HX_("isPolygon",b0,7f,8f,16),
	HX_("area",8d,8b,74,40),
	HX_("zip_area_inertia",66,96,4c,e4),
	HX_("inertia",fa,b0,ba,7c),
	HX_("angDrag",ee,c7,72,38),
	HX_("zip_angDrag",50,59,53,04),
	HX_("localCOMx",22,dc,ee,03),
	HX_("localCOMy",23,dc,ee,03),
	HX_("zip_localCOM",f4,6b,7e,78),
	HX_("worldCOMx",89,a8,c8,4e),
	HX_("worldCOMy",8a,a8,c8,4e),
	HX_("zip_worldCOM",6d,69,22,3d),
	HX_("wrap_localCOM",eb,fb,09,d0),
	HX_("wrap_worldCOM",64,f9,ad,94),
	HX_("sweepRadius",5e,93,9c,27),
	HX_("zip_sweepRadius",c0,7d,de,ea),
	HX_("sweepCoef",19,5a,67,cc),
	HX_("invalidate_sweepRadius",5a,27,8e,7b),
	HX_("validate_sweepRadius",f5,9a,cb,1f),
	HX_("circle",10,72,0d,56),
	HX_("polygon",7a,02,91,12),
	HX_("refmaterial",fa,40,42,3d),
	HX_("material",a7,5c,a5,f0),
	HX_("filter",b8,1f,35,85),
	HX_("fluidProperties",9d,0a,80,04),
	HX_("fluidEnabled",97,87,5e,9a),
	HX_("sensorEnabled",67,15,aa,41),
	HX_("sweep",ec,15,0a,86),
	HX_("node",02,0a,0a,49),
	HX_("pairs",19,bb,4e,bd),
	HX_("clear",8d,71,5b,48),
	HX_("aabb",a0,a2,67,40),
	HX_("zip_aabb",fe,3f,c9,0b),
	HX_("validate_aabb",29,0e,4b,8c),
	HX_("force_validate_aabb",95,15,a1,e6),
	HX_("invalidate_aabb",24,67,f9,4d),
	HX_("validate_area_inertia",91,07,d9,fe),
	HX_("validate_angDrag",05,78,d2,50),
	HX_("validate_localCOM",9f,2b,3a,1b),
	HX_("validate_worldCOM",18,29,de,df),
	HX_("getworldCOM",a5,cb,c5,f0),
	HX_("invalidate_area_inertia",8c,53,51,ed),
	HX_("invalidate_angDrag",ea,ad,93,20),
	HX_("invalidate_localCOM",1a,1e,88,14),
	HX_("invalidate_worldCOM",93,1b,2c,d9),
	HX_("invalidate_material",2b,b3,4d,25),
	HX_("invalidate_filter",3c,0d,24,6e),
	HX_("invalidate_fluidprops",aa,e8,6d,82),
	HX_("aabb_validate",55,d1,98,95),
	HX_("setMaterial",69,26,06,21),
	HX_("setFilter",fa,94,dc,e4),
	HX_("setFluid",08,c3,cf,10),
	HX_("__immutable_midstep",77,19,9f,9d),
	HX_("addedToBody",9d,3e,5d,d2),
	HX_("removedFromBody",ec,c4,31,7e),
	HX_("addedToSpace",6b,44,b0,09),
	HX_("removedFromSpace",3c,43,d1,b7),
	HX_("copy",b5,bb,c4,41),
	::String(null()) };

static void ZPP_Shape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Shape_obj::types,"types");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Shape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Shape_obj::types,"types");
};

#endif

hx::Class ZPP_Shape_obj::__mClass;

static ::String ZPP_Shape_obj_sStaticFields[] = {
	HX_("types",79,70,cb,1a),
	::String(null())
};

void ZPP_Shape_obj::__register()
{
	ZPP_Shape_obj _hx_dummy;
	ZPP_Shape_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.shape.ZPP_Shape",2e,aa,a8,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Shape_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Shape_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Shape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Shape_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Shape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Shape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Shape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Shape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Shape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Shape_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::Array< ::Dynamic> _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b9d7424bab0d317c_178_boot)
HXDLIN( 178)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE )) {
HXDLIN( 178)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 178)				::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE =  ::nape::shape::ShapeType_obj::__alloc( HX_CTX );
HXDLIN( 178)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 178)			 ::nape::shape::ShapeType _hx_tmp = ::zpp_nape::util::ZPP_Flags_obj::ShapeType_CIRCLE;
HXDLIN( 178)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON )) {
HXDLIN( 178)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 178)				::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON =  ::nape::shape::ShapeType_obj::__alloc( HX_CTX );
HXDLIN( 178)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 178)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,::zpp_nape::util::ZPP_Flags_obj::ShapeType_POLYGON);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b9d7424bab0d317c_178_boot)
HXDLIN( 178)		types = ( (::Array< ::Dynamic>)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace zpp_nape
} // end namespace shape
