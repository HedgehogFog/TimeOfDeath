// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Arbiter
#include <hxinc/nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <hxinc/nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SpaceArbiterList
#include <hxinc/zpp_nape/dynamics/ZPP_SpaceArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_174_new,"zpp_nape.dynamics.ZPP_SpaceArbiterList","new",0xed598891,"zpp_nape.dynamics.ZPP_SpaceArbiterList.new","zpp_nape/dynamics/SpaceArbiterList.hx",174,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_189_zpp_gl,"zpp_nape.dynamics.ZPP_SpaceArbiterList","zpp_gl",0x927c0ff9,"zpp_nape.dynamics.ZPP_SpaceArbiterList.zpp_gl","zpp_nape/dynamics/SpaceArbiterList.hx",189,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_261_zpp_vm,"zpp_nape.dynamics.ZPP_SpaceArbiterList","zpp_vm",0x927c1d0b,"zpp_nape.dynamics.ZPP_SpaceArbiterList.zpp_vm","zpp_nape/dynamics/SpaceArbiterList.hx",261,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_292_push,"zpp_nape.dynamics.ZPP_SpaceArbiterList","push",0xc25c8489,"zpp_nape.dynamics.ZPP_SpaceArbiterList.push","zpp_nape/dynamics/SpaceArbiterList.hx",292,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_298_pop,"zpp_nape.dynamics.ZPP_SpaceArbiterList","pop",0xed5b15c2,"zpp_nape.dynamics.ZPP_SpaceArbiterList.pop","zpp_nape/dynamics/SpaceArbiterList.hx",298,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_304_unshift,"zpp_nape.dynamics.ZPP_SpaceArbiterList","unshift",0xbd98083a,"zpp_nape.dynamics.ZPP_SpaceArbiterList.unshift","zpp_nape/dynamics/SpaceArbiterList.hx",304,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_310_shift,"zpp_nape.dynamics.ZPP_SpaceArbiterList","shift",0x002bd2f3,"zpp_nape.dynamics.ZPP_SpaceArbiterList.shift","zpp_nape/dynamics/SpaceArbiterList.hx",310,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_316_remove,"zpp_nape.dynamics.ZPP_SpaceArbiterList","remove",0x084958b3,"zpp_nape.dynamics.ZPP_SpaceArbiterList.remove","zpp_nape/dynamics/SpaceArbiterList.hx",316,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_322_clear,"zpp_nape.dynamics.ZPP_SpaceArbiterList","clear",0xcc6457fe,"zpp_nape.dynamics.ZPP_SpaceArbiterList.clear","zpp_nape/dynamics/SpaceArbiterList.hx",322,0x1150d7c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6f7184e042f06761_325_at,"zpp_nape.dynamics.ZPP_SpaceArbiterList","at",0x01106de2,"zpp_nape.dynamics.ZPP_SpaceArbiterList.at","zpp_nape/dynamics/SpaceArbiterList.hx",325,0x1150d7c4)
namespace zpp_nape{
namespace dynamics{

void ZPP_SpaceArbiterList_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_174_new)
HXLINE( 260)		this->at_index_3 = 0;
HXLINE( 259)		this->at_index_2 = 0;
HXLINE( 258)		this->at_index_1 = 0;
HXLINE( 257)		this->at_index_0 = 0;
HXLINE( 256)		this->ite_3 = null();
HXLINE( 255)		this->ite_2 = null();
HXLINE( 254)		this->ite_1 = null();
HXLINE( 253)		this->ite_0 = null();
HXLINE( 252)		this->lengths = null();
HXLINE( 177)		this->zip_length = false;
HXLINE( 176)		this->_length = 0;
HXLINE( 175)		this->space = null();
HXLINE( 179)		super::__construct();
HXLINE( 180)		this->at_index_0 = 0;
HXLINE( 181)		this->at_index_1 = 0;
HXLINE( 182)		this->at_index_2 = 0;
HXLINE( 183)		this->at_index_3 = 0;
HXLINE( 184)		this->zip_length = true;
HXLINE( 185)		this->_length = 0;
HXLINE( 186)		this->lengths = ::Array_obj< int >::__new();
HXLINE( 187)		{
HXLINE( 187)			this->lengths->push(0);
HXDLIN( 187)			this->lengths->push(0);
HXDLIN( 187)			this->lengths->push(0);
HXDLIN( 187)			this->lengths->push(0);
            		}
            	}

Dynamic ZPP_SpaceArbiterList_obj::__CreateEmpty() { return new ZPP_SpaceArbiterList_obj; }

void *ZPP_SpaceArbiterList_obj::_hx_vtable = 0;

Dynamic ZPP_SpaceArbiterList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SpaceArbiterList_obj > _hx_result = new ZPP_SpaceArbiterList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SpaceArbiterList_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4a670447) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4a670447;
	} else {
		return inClassId==(int)0x610568e7;
	}
}

int ZPP_SpaceArbiterList_obj::zpp_gl(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_189_zpp_gl)
HXLINE( 190)		this->zpp_vm();
HXLINE( 191)		if (this->zip_length) {
HXLINE( 192)			this->_length = 0;
HXLINE( 193)			int ind = 0;
HXLINE( 194)			{
HXLINE( 195)				{
HXLINE( 196)					int len = 0;
HXLINE( 197)					{
HXLINE( 198)						 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter cx_ite = this->space->c_arbiters_true->head;
HXLINE( 199)						while(hx::IsNotNull( cx_ite )){
HXLINE( 200)							 ::zpp_nape::dynamics::ZPP_ColArbiter i = cx_ite->elt;
HXLINE( 201)							if (i->active) {
HXLINE( 201)								len = (len + 1);
            							}
HXLINE( 202)							cx_ite = cx_ite->next;
            						}
            					}
HXLINE( 205)					ind = (ind + 1);
HXDLIN( 205)					this->lengths[(ind - 1)] = len;
HXLINE( 206)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 206)					_hx_tmp->_length = (_hx_tmp->_length + len);
            				}
HXLINE( 208)				{
HXLINE( 209)					int len1 = 0;
HXLINE( 210)					{
HXLINE( 211)						 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter cx_ite1 = this->space->c_arbiters_false->head;
HXLINE( 212)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 213)							 ::zpp_nape::dynamics::ZPP_ColArbiter i1 = cx_ite1->elt;
HXLINE( 214)							if (i1->active) {
HXLINE( 214)								len1 = (len1 + 1);
            							}
HXLINE( 215)							cx_ite1 = cx_ite1->next;
            						}
            					}
HXLINE( 218)					ind = (ind + 1);
HXDLIN( 218)					this->lengths[(ind - 1)] = len1;
HXLINE( 219)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 219)					_hx_tmp1->_length = (_hx_tmp1->_length + len1);
            				}
HXLINE( 221)				{
HXLINE( 222)					int len2 = 0;
HXLINE( 223)					{
HXLINE( 224)						 ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite2 = this->space->f_arbiters->head;
HXLINE( 225)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 226)							 ::zpp_nape::dynamics::ZPP_FluidArbiter i2 = cx_ite2->elt;
HXLINE( 227)							if (i2->active) {
HXLINE( 227)								len2 = (len2 + 1);
            							}
HXLINE( 228)							cx_ite2 = cx_ite2->next;
            						}
            					}
HXLINE( 231)					ind = (ind + 1);
HXDLIN( 231)					this->lengths[(ind - 1)] = len2;
HXLINE( 232)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 232)					_hx_tmp2->_length = (_hx_tmp2->_length + len2);
            				}
HXLINE( 234)				{
HXLINE( 235)					int len3 = 0;
HXLINE( 236)					{
HXLINE( 237)						 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter cx_ite3 = this->space->s_arbiters->head;
HXLINE( 238)						while(hx::IsNotNull( cx_ite3 )){
HXLINE( 239)							 ::zpp_nape::dynamics::ZPP_SensorArbiter i3 = cx_ite3->elt;
HXLINE( 240)							if (i3->active) {
HXLINE( 240)								len3 = (len3 + 1);
            							}
HXLINE( 241)							cx_ite3 = cx_ite3->next;
            						}
            					}
HXLINE( 244)					ind = (ind + 1);
HXDLIN( 244)					this->lengths[(ind - 1)] = len3;
HXLINE( 245)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)					_hx_tmp3->_length = (_hx_tmp3->_length + len3);
            				}
            			}
HXLINE( 248)			this->zip_length = false;
            		}
HXLINE( 250)		return this->_length;
            	}


void ZPP_SpaceArbiterList_obj::zpp_vm(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_261_zpp_vm)
HXLINE( 262)		bool modified = false;
HXLINE( 263)		{
HXLINE( 264)			if (this->space->c_arbiters_true->modified) {
HXLINE( 265)				modified = true;
HXLINE( 266)				this->space->c_arbiters_true->modified = false;
            			}
HXLINE( 268)			if (this->space->c_arbiters_false->modified) {
HXLINE( 269)				modified = true;
HXLINE( 270)				this->space->c_arbiters_false->modified = false;
            			}
HXLINE( 272)			if (this->space->f_arbiters->modified) {
HXLINE( 273)				modified = true;
HXLINE( 274)				this->space->f_arbiters->modified = false;
            			}
HXLINE( 276)			if (this->space->s_arbiters->modified) {
HXLINE( 277)				modified = true;
HXLINE( 278)				this->space->s_arbiters->modified = false;
            			}
            		}
HXLINE( 281)		if (modified) {
HXLINE( 282)			this->zip_length = true;
HXLINE( 283)			this->_length = 0;
HXLINE( 284)			this->ite_0 = null();
HXLINE( 285)			this->ite_1 = null();
HXLINE( 286)			this->ite_2 = null();
HXLINE( 287)			this->ite_3 = null();
            		}
            	}


bool ZPP_SpaceArbiterList_obj::push( ::nape::dynamics::Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_292_push)
HXDLIN( 292)		HX_STACK_DO_THROW(HX_("Error: ArbiterList is immutable",d3,21,2d,d5));
HXDLIN( 292)		return false;
            	}


 ::nape::dynamics::Arbiter ZPP_SpaceArbiterList_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_298_pop)
HXDLIN( 298)		HX_STACK_DO_THROW(HX_("Error: ArbiterList is immutable",d3,21,2d,d5));
HXDLIN( 298)		return null();
            	}


bool ZPP_SpaceArbiterList_obj::unshift( ::nape::dynamics::Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_304_unshift)
HXDLIN( 304)		HX_STACK_DO_THROW(HX_("Error: ArbiterList is immutable",d3,21,2d,d5));
HXDLIN( 304)		return false;
            	}


 ::nape::dynamics::Arbiter ZPP_SpaceArbiterList_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_310_shift)
HXDLIN( 310)		HX_STACK_DO_THROW(HX_("Error: ArbiterList is immutable",d3,21,2d,d5));
HXDLIN( 310)		return null();
            	}


bool ZPP_SpaceArbiterList_obj::remove( ::nape::dynamics::Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_316_remove)
HXDLIN( 316)		HX_STACK_DO_THROW(HX_("Error: ArbiterList is immutable",d3,21,2d,d5));
HXDLIN( 316)		return false;
            	}


void ZPP_SpaceArbiterList_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_322_clear)
HXDLIN( 322)		HX_STACK_DO_THROW(HX_("Error: ArbiterList is immutable",d3,21,2d,d5));
            	}


 ::nape::dynamics::Arbiter ZPP_SpaceArbiterList_obj::at(int index){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_325_at)
HXLINE( 326)		this->zpp_vm();
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if ((index >= 0)) {
HXLINE( 328)			_hx_tmp = (index >= this->zpp_gl());
            		}
            		else {
HXLINE( 328)			_hx_tmp = true;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 328)			HX_STACK_DO_THROW(HX_("Error: Index out of bounds",10,f3,5b,3f));
            		}
HXLINE( 330)		 ::nape::dynamics::Arbiter ret = null();
HXLINE( 331)		int accum_length = 0;
HXLINE( 333)		if (hx::IsNull( ret )) {
HXLINE( 334)			if ((index < (accum_length + this->lengths->__get(0)))) {
HXLINE( 335)				int offset = (index - accum_length);
HXLINE( 336)				bool _hx_tmp1;
HXDLIN( 336)				if ((offset >= this->at_index_0)) {
HXLINE( 336)					_hx_tmp1 = hx::IsNull( this->ite_0 );
            				}
            				else {
HXLINE( 336)					_hx_tmp1 = true;
            				}
HXDLIN( 336)				if (_hx_tmp1) {
HXLINE( 337)					this->at_index_0 = 0;
HXLINE( 338)					this->ite_0 = this->space->c_arbiters_true->head;
HXLINE( 339)					while(true){
HXLINE( 340)						 ::zpp_nape::dynamics::ZPP_ColArbiter x = this->ite_0->elt;
HXLINE( 341)						if (x->active) {
HXLINE( 341)							goto _hx_goto_13;
            						}
HXLINE( 342)						this->ite_0 = this->ite_0->next;
            					}
            					_hx_goto_13:;
            				}
HXLINE( 345)				while((this->at_index_0 != offset)){
HXLINE( 346)					this->at_index_0++;
HXLINE( 347)					this->ite_0 = this->ite_0->next;
HXLINE( 348)					while(true){
HXLINE( 349)						 ::zpp_nape::dynamics::ZPP_ColArbiter x1 = this->ite_0->elt;
HXLINE( 350)						if (x1->active) {
HXLINE( 350)							goto _hx_goto_15;
            						}
HXLINE( 351)						this->ite_0 = this->ite_0->next;
            					}
            					_hx_goto_15:;
            				}
HXLINE( 354)				ret = this->ite_0->elt->wrapper();
            			}
            			else {
HXLINE( 356)				accum_length = (accum_length + this->lengths->__get(0));
            			}
            		}
HXLINE( 358)		if (hx::IsNull( ret )) {
HXLINE( 359)			if ((index < (accum_length + this->lengths->__get(1)))) {
HXLINE( 360)				int offset1 = (index - accum_length);
HXLINE( 361)				bool _hx_tmp2;
HXDLIN( 361)				if ((offset1 >= this->at_index_1)) {
HXLINE( 361)					_hx_tmp2 = hx::IsNull( this->ite_1 );
            				}
            				else {
HXLINE( 361)					_hx_tmp2 = true;
            				}
HXDLIN( 361)				if (_hx_tmp2) {
HXLINE( 362)					this->at_index_1 = 0;
HXLINE( 363)					this->ite_1 = this->space->c_arbiters_false->head;
HXLINE( 364)					while(true){
HXLINE( 365)						 ::zpp_nape::dynamics::ZPP_ColArbiter x2 = this->ite_1->elt;
HXLINE( 366)						if (x2->active) {
HXLINE( 366)							goto _hx_goto_16;
            						}
HXLINE( 367)						this->ite_1 = this->ite_1->next;
            					}
            					_hx_goto_16:;
            				}
HXLINE( 370)				while((this->at_index_1 != offset1)){
HXLINE( 371)					this->at_index_1++;
HXLINE( 372)					this->ite_1 = this->ite_1->next;
HXLINE( 373)					while(true){
HXLINE( 374)						 ::zpp_nape::dynamics::ZPP_ColArbiter x3 = this->ite_1->elt;
HXLINE( 375)						if (x3->active) {
HXLINE( 375)							goto _hx_goto_18;
            						}
HXLINE( 376)						this->ite_1 = this->ite_1->next;
            					}
            					_hx_goto_18:;
            				}
HXLINE( 379)				ret = this->ite_1->elt->wrapper();
            			}
            			else {
HXLINE( 381)				accum_length = (accum_length + this->lengths->__get(1));
            			}
            		}
HXLINE( 383)		if (hx::IsNull( ret )) {
HXLINE( 384)			if ((index < (accum_length + this->lengths->__get(2)))) {
HXLINE( 385)				int offset2 = (index - accum_length);
HXLINE( 386)				bool _hx_tmp3;
HXDLIN( 386)				if ((offset2 >= this->at_index_2)) {
HXLINE( 386)					_hx_tmp3 = hx::IsNull( this->ite_2 );
            				}
            				else {
HXLINE( 386)					_hx_tmp3 = true;
            				}
HXDLIN( 386)				if (_hx_tmp3) {
HXLINE( 387)					this->at_index_2 = 0;
HXLINE( 388)					this->ite_2 = this->space->f_arbiters->head;
HXLINE( 389)					while(true){
HXLINE( 390)						 ::zpp_nape::dynamics::ZPP_FluidArbiter x4 = this->ite_2->elt;
HXLINE( 391)						if (x4->active) {
HXLINE( 391)							goto _hx_goto_19;
            						}
HXLINE( 392)						this->ite_2 = this->ite_2->next;
            					}
            					_hx_goto_19:;
            				}
HXLINE( 395)				while((this->at_index_2 != offset2)){
HXLINE( 396)					this->at_index_2++;
HXLINE( 397)					this->ite_2 = this->ite_2->next;
HXLINE( 398)					while(true){
HXLINE( 399)						 ::zpp_nape::dynamics::ZPP_FluidArbiter x5 = this->ite_2->elt;
HXLINE( 400)						if (x5->active) {
HXLINE( 400)							goto _hx_goto_21;
            						}
HXLINE( 401)						this->ite_2 = this->ite_2->next;
            					}
            					_hx_goto_21:;
            				}
HXLINE( 404)				ret = this->ite_2->elt->wrapper();
            			}
            			else {
HXLINE( 406)				accum_length = (accum_length + this->lengths->__get(2));
            			}
            		}
HXLINE( 408)		if (hx::IsNull( ret )) {
HXLINE( 409)			if ((index < (accum_length + this->lengths->__get(3)))) {
HXLINE( 410)				int offset3 = (index - accum_length);
HXLINE( 411)				bool _hx_tmp4;
HXDLIN( 411)				if ((offset3 >= this->at_index_3)) {
HXLINE( 411)					_hx_tmp4 = hx::IsNull( this->ite_3 );
            				}
            				else {
HXLINE( 411)					_hx_tmp4 = true;
            				}
HXDLIN( 411)				if (_hx_tmp4) {
HXLINE( 412)					this->at_index_3 = 0;
HXLINE( 413)					this->ite_3 = this->space->s_arbiters->head;
HXLINE( 414)					while(true){
HXLINE( 415)						 ::zpp_nape::dynamics::ZPP_SensorArbiter x6 = this->ite_3->elt;
HXLINE( 416)						if (x6->active) {
HXLINE( 416)							goto _hx_goto_22;
            						}
HXLINE( 417)						this->ite_3 = this->ite_3->next;
            					}
            					_hx_goto_22:;
            				}
HXLINE( 420)				while((this->at_index_3 != offset3)){
HXLINE( 421)					this->at_index_3++;
HXLINE( 422)					this->ite_3 = this->ite_3->next;
HXLINE( 423)					while(true){
HXLINE( 424)						 ::zpp_nape::dynamics::ZPP_SensorArbiter x7 = this->ite_3->elt;
HXLINE( 425)						if (x7->active) {
HXLINE( 425)							goto _hx_goto_24;
            						}
HXLINE( 426)						this->ite_3 = this->ite_3->next;
            					}
            					_hx_goto_24:;
            				}
HXLINE( 429)				ret = this->ite_3->elt->wrapper();
            			}
            			else {
HXLINE( 431)				accum_length = (accum_length + this->lengths->__get(3));
            			}
            		}
HXLINE( 433)		return ret;
            	}



hx::ObjectPtr< ZPP_SpaceArbiterList_obj > ZPP_SpaceArbiterList_obj::__new() {
	hx::ObjectPtr< ZPP_SpaceArbiterList_obj > __this = new ZPP_SpaceArbiterList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SpaceArbiterList_obj > ZPP_SpaceArbiterList_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SpaceArbiterList_obj *__this = (ZPP_SpaceArbiterList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SpaceArbiterList_obj), true, "zpp_nape.dynamics.ZPP_SpaceArbiterList"));
	*(void **)__this = ZPP_SpaceArbiterList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SpaceArbiterList_obj::ZPP_SpaceArbiterList_obj()
{
}

void ZPP_SpaceArbiterList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SpaceArbiterList);
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(zip_length,"zip_length");
	HX_MARK_MEMBER_NAME(lengths,"lengths");
	HX_MARK_MEMBER_NAME(ite_0,"ite_0");
	HX_MARK_MEMBER_NAME(ite_1,"ite_1");
	HX_MARK_MEMBER_NAME(ite_2,"ite_2");
	HX_MARK_MEMBER_NAME(ite_3,"ite_3");
	HX_MARK_MEMBER_NAME(at_index_0,"at_index_0");
	HX_MARK_MEMBER_NAME(at_index_1,"at_index_1");
	HX_MARK_MEMBER_NAME(at_index_2,"at_index_2");
	HX_MARK_MEMBER_NAME(at_index_3,"at_index_3");
	 ::nape::dynamics::ArbiterList_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_SpaceArbiterList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(zip_length,"zip_length");
	HX_VISIT_MEMBER_NAME(lengths,"lengths");
	HX_VISIT_MEMBER_NAME(ite_0,"ite_0");
	HX_VISIT_MEMBER_NAME(ite_1,"ite_1");
	HX_VISIT_MEMBER_NAME(ite_2,"ite_2");
	HX_VISIT_MEMBER_NAME(ite_3,"ite_3");
	HX_VISIT_MEMBER_NAME(at_index_0,"at_index_0");
	HX_VISIT_MEMBER_NAME(at_index_1,"at_index_1");
	HX_VISIT_MEMBER_NAME(at_index_2,"at_index_2");
	HX_VISIT_MEMBER_NAME(at_index_3,"at_index_3");
	 ::nape::dynamics::ArbiterList_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_SpaceArbiterList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space ); }
		if (HX_FIELD_EQ(inName,"ite_0") ) { return hx::Val( ite_0 ); }
		if (HX_FIELD_EQ(inName,"ite_1") ) { return hx::Val( ite_1 ); }
		if (HX_FIELD_EQ(inName,"ite_2") ) { return hx::Val( ite_2 ); }
		if (HX_FIELD_EQ(inName,"ite_3") ) { return hx::Val( ite_3 ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"zpp_gl") ) { return hx::Val( zpp_gl_dyn() ); }
		if (HX_FIELD_EQ(inName,"zpp_vm") ) { return hx::Val( zpp_vm_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length ); }
		if (HX_FIELD_EQ(inName,"lengths") ) { return hx::Val( lengths ); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zip_length") ) { return hx::Val( zip_length ); }
		if (HX_FIELD_EQ(inName,"at_index_0") ) { return hx::Val( at_index_0 ); }
		if (HX_FIELD_EQ(inName,"at_index_1") ) { return hx::Val( at_index_1 ); }
		if (HX_FIELD_EQ(inName,"at_index_2") ) { return hx::Val( at_index_2 ); }
		if (HX_FIELD_EQ(inName,"at_index_3") ) { return hx::Val( at_index_3 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_SpaceArbiterList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_0") ) { ite_0=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_1") ) { ite_1=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_2") ) { ite_2=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_3") ) { ite_3=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lengths") ) { lengths=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zip_length") ) { zip_length=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_0") ) { at_index_0=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_1") ) { at_index_1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_2") ) { at_index_2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_3") ) { at_index_3=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_SpaceArbiterList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("_length",85,a6,7e,0d));
	outFields->push(HX_("zip_length",c4,c5,11,3c));
	outFields->push(HX_("lengths",cd,b4,9a,87));
	outFields->push(HX_("ite_0",8b,9f,0c,c2));
	outFields->push(HX_("ite_1",8c,9f,0c,c2));
	outFields->push(HX_("ite_2",8d,9f,0c,c2));
	outFields->push(HX_("ite_3",8e,9f,0c,c2));
	outFields->push(HX_("at_index_0",f7,af,12,8c));
	outFields->push(HX_("at_index_1",f8,af,12,8c));
	outFields->push(HX_("at_index_2",f9,af,12,8c));
	outFields->push(HX_("at_index_3",fa,af,12,8c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SpaceArbiterList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Space */ ,(int)offsetof(ZPP_SpaceArbiterList_obj,space),HX_("space",c6,8c,66,81)},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,_length),HX_("_length",85,a6,7e,0d)},
	{hx::fsBool,(int)offsetof(ZPP_SpaceArbiterList_obj,zip_length),HX_("zip_length",c4,c5,11,3c)},
	{hx::fsObject /* ::Array< int > */ ,(int)offsetof(ZPP_SpaceArbiterList_obj,lengths),HX_("lengths",cd,b4,9a,87)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter */ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_0),HX_("ite_0",8b,9f,0c,c2)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter */ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_1),HX_("ite_1",8c,9f,0c,c2)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter */ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_2),HX_("ite_2",8d,9f,0c,c2)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter */ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_3),HX_("ite_3",8e,9f,0c,c2)},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_0),HX_("at_index_0",f7,af,12,8c)},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_1),HX_("at_index_1",f8,af,12,8c)},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_2),HX_("at_index_2",f9,af,12,8c)},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_3),HX_("at_index_3",fa,af,12,8c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_SpaceArbiterList_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_SpaceArbiterList_obj_sMemberFields[] = {
	HX_("space",c6,8c,66,81),
	HX_("_length",85,a6,7e,0d),
	HX_("zip_length",c4,c5,11,3c),
	HX_("zpp_gl",8a,53,bb,8e),
	HX_("lengths",cd,b4,9a,87),
	HX_("ite_0",8b,9f,0c,c2),
	HX_("ite_1",8c,9f,0c,c2),
	HX_("ite_2",8d,9f,0c,c2),
	HX_("ite_3",8e,9f,0c,c2),
	HX_("at_index_0",f7,af,12,8c),
	HX_("at_index_1",f8,af,12,8c),
	HX_("at_index_2",f9,af,12,8c),
	HX_("at_index_3",fa,af,12,8c),
	HX_("zpp_vm",9c,60,bb,8e),
	HX_("push",da,11,61,4a),
	HX_("pop",91,5d,55,00),
	HX_("unshift",89,e3,b3,78),
	HX_("shift",82,ec,22,7c),
	HX_("remove",44,9c,88,04),
	HX_("clear",8d,71,5b,48),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZPP_SpaceArbiterList_obj::__mClass;

void ZPP_SpaceArbiterList_obj::__register()
{
	ZPP_SpaceArbiterList_obj _hx_dummy;
	ZPP_SpaceArbiterList_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.dynamics.ZPP_SpaceArbiterList",1f,ec,cb,a2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SpaceArbiterList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SpaceArbiterList_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SpaceArbiterList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SpaceArbiterList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace dynamics
