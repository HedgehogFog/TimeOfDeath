// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Contact
#include <hxinc/nape/dynamics/Contact.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <hxinc/zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <hxinc/zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_174_new,"zpp_nape.dynamics.ZPP_Contact","new",0xb5c4a1f4,"zpp_nape.dynamics.ZPP_Contact.new","zpp_nape/dynamics/Contact.hx",174,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_177_wrapper,"zpp_nape.dynamics.ZPP_Contact","wrapper",0x316000e7,"zpp_nape.dynamics.ZPP_Contact.wrapper","zpp_nape/dynamics/Contact.hx",177,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_188_position_validate,"zpp_nape.dynamics.ZPP_Contact","position_validate",0xb6a936c0,"zpp_nape.dynamics.ZPP_Contact.position_validate","zpp_nape/dynamics/Contact.hx",188,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_214_getposition,"zpp_nape.dynamics.ZPP_Contact","getposition",0xc6f72cd3,"zpp_nape.dynamics.ZPP_Contact.getposition","zpp_nape/dynamics/Contact.hx",214,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_222_inactiveme,"zpp_nape.dynamics.ZPP_Contact","inactiveme",0x80dab06f,"zpp_nape.dynamics.ZPP_Contact.inactiveme","zpp_nape/dynamics/Contact.hx",222,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_239_free,"zpp_nape.dynamics.ZPP_Contact","free",0x51092c98,"zpp_nape.dynamics.ZPP_Contact.free","zpp_nape/dynamics/Contact.hx",239,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_243_alloc,"zpp_nape.dynamics.ZPP_Contact","alloc",0xb20b0309,"zpp_nape.dynamics.ZPP_Contact.alloc","zpp_nape/dynamics/Contact.hx",243,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_272_elem,"zpp_nape.dynamics.ZPP_Contact","elem",0x505b687b,"zpp_nape.dynamics.ZPP_Contact.elem","zpp_nape/dynamics/Contact.hx",272,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_277_begin,"zpp_nape.dynamics.ZPP_Contact","begin",0x40cd48bd,"zpp_nape.dynamics.ZPP_Contact.begin","zpp_nape/dynamics/Contact.hx",277,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_285_setbegin,"zpp_nape.dynamics.ZPP_Contact","setbegin",0x8327d933,"zpp_nape.dynamics.ZPP_Contact.setbegin","zpp_nape/dynamics/Contact.hx",285,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_291_add,"zpp_nape.dynamics.ZPP_Contact","add",0xb5bac3b5,"zpp_nape.dynamics.ZPP_Contact.add","zpp_nape/dynamics/Contact.hx",291,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_295_inlined_add,"zpp_nape.dynamics.ZPP_Contact","inlined_add",0xb1e8d221,"zpp_nape.dynamics.ZPP_Contact.inlined_add","zpp_nape/dynamics/Contact.hx",295,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_323_addAll,"zpp_nape.dynamics.ZPP_Contact","addAll",0x76f66c6c,"zpp_nape.dynamics.ZPP_Contact.addAll","zpp_nape/dynamics/Contact.hx",323,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_333_insert,"zpp_nape.dynamics.ZPP_Contact","insert",0x75d8a625,"zpp_nape.dynamics.ZPP_Contact.insert","zpp_nape/dynamics/Contact.hx",333,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_337_inlined_insert,"zpp_nape.dynamics.ZPP_Contact","inlined_insert",0x52ca6339,"zpp_nape.dynamics.ZPP_Contact.inlined_insert","zpp_nape/dynamics/Contact.hx",337,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_363_pop,"zpp_nape.dynamics.ZPP_Contact","pop",0xb5c62f25,"zpp_nape.dynamics.ZPP_Contact.pop","zpp_nape/dynamics/Contact.hx",363,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_367_inlined_pop,"zpp_nape.dynamics.ZPP_Contact","inlined_pop",0xb1f43d91,"zpp_nape.dynamics.ZPP_Contact.inlined_pop","zpp_nape/dynamics/Contact.hx",367,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_387_pop_unsafe,"zpp_nape.dynamics.ZPP_Contact","pop_unsafe",0x8ed1c540,"zpp_nape.dynamics.ZPP_Contact.pop_unsafe","zpp_nape/dynamics/Contact.hx",387,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_391_inlined_pop_unsafe,"zpp_nape.dynamics.ZPP_Contact","inlined_pop_unsafe",0x77e99c54,"zpp_nape.dynamics.ZPP_Contact.inlined_pop_unsafe","zpp_nape/dynamics/Contact.hx",391,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_413_remove,"zpp_nape.dynamics.ZPP_Contact","remove",0xdc83ff30,"zpp_nape.dynamics.ZPP_Contact.remove","zpp_nape/dynamics/Contact.hx",413,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_415_try_remove,"zpp_nape.dynamics.ZPP_Contact","try_remove",0xa5fbfaf4,"zpp_nape.dynamics.ZPP_Contact.try_remove","zpp_nape/dynamics/Contact.hx",415,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_449_inlined_remove,"zpp_nape.dynamics.ZPP_Contact","inlined_remove",0xb975bc44,"zpp_nape.dynamics.ZPP_Contact.inlined_remove","zpp_nape/dynamics/Contact.hx",449,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_453_inlined_try_remove,"zpp_nape.dynamics.ZPP_Contact","inlined_try_remove",0x8f13d208,"zpp_nape.dynamics.ZPP_Contact.inlined_try_remove","zpp_nape/dynamics/Contact.hx",453,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_477_erase,"zpp_nape.dynamics.ZPP_Contact","erase",0x0394477a,"zpp_nape.dynamics.ZPP_Contact.erase","zpp_nape/dynamics/Contact.hx",477,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_481_inlined_erase,"zpp_nape.dynamics.ZPP_Contact","inlined_erase",0xf233c8e6,"zpp_nape.dynamics.ZPP_Contact.inlined_erase","zpp_nape/dynamics/Contact.hx",481,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_513_splice,"zpp_nape.dynamics.ZPP_Contact","splice",0x9799e868,"zpp_nape.dynamics.ZPP_Contact.splice","zpp_nape/dynamics/Contact.hx",513,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_518_clear,"zpp_nape.dynamics.ZPP_Contact","clear",0xd8d2d021,"zpp_nape.dynamics.ZPP_Contact.clear","zpp_nape/dynamics/Contact.hx",518,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_523_inlined_clear,"zpp_nape.dynamics.ZPP_Contact","inlined_clear",0xc772518d,"zpp_nape.dynamics.ZPP_Contact.inlined_clear","zpp_nape/dynamics/Contact.hx",523,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_528_reverse,"zpp_nape.dynamics.ZPP_Contact","reverse",0x3ef764b6,"zpp_nape.dynamics.ZPP_Contact.reverse","zpp_nape/dynamics/Contact.hx",528,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_544_empty,"zpp_nape.dynamics.ZPP_Contact","empty",0x00519921,"zpp_nape.dynamics.ZPP_Contact.empty","zpp_nape/dynamics/Contact.hx",544,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_549_size,"zpp_nape.dynamics.ZPP_Contact","size",0x599a30ad,"zpp_nape.dynamics.ZPP_Contact.size","zpp_nape/dynamics/Contact.hx",549,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_552_has,"zpp_nape.dynamics.ZPP_Contact","has",0xb5c010ee,"zpp_nape.dynamics.ZPP_Contact.has","zpp_nape/dynamics/Contact.hx",552,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_556_inlined_has,"zpp_nape.dynamics.ZPP_Contact","inlined_has",0xb1ee1f5a,"zpp_nape.dynamics.ZPP_Contact.inlined_has","zpp_nape/dynamics/Contact.hx",556,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_587_front,"zpp_nape.dynamics.ZPP_Contact","front",0x9705773d,"zpp_nape.dynamics.ZPP_Contact.front","zpp_nape/dynamics/Contact.hx",587,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_589_back,"zpp_nape.dynamics.ZPP_Contact","back",0x4e576a13,"zpp_nape.dynamics.ZPP_Contact.back","zpp_nape/dynamics/Contact.hx",589,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_598_iterator_at,"zpp_nape.dynamics.ZPP_Contact","iterator_at",0xb68d0f78,"zpp_nape.dynamics.ZPP_Contact.iterator_at","zpp_nape/dynamics/Contact.hx",598,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_611_at,"zpp_nape.dynamics.ZPP_Contact","at",0xd77cd1df,"zpp_nape.dynamics.ZPP_Contact.at","zpp_nape/dynamics/Contact.hx",611,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_176_boot,"zpp_nape.dynamics.ZPP_Contact","boot",0x4e62141e,"zpp_nape.dynamics.ZPP_Contact.boot","zpp_nape/dynamics/Contact.hx",176,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_f46bbcc55a95dcf0_244_boot,"zpp_nape.dynamics.ZPP_Contact","boot",0x4e62141e,"zpp_nape.dynamics.ZPP_Contact.boot","zpp_nape/dynamics/Contact.hx",244,0xe7cc00d7)
namespace zpp_nape{
namespace dynamics{

void ZPP_Contact_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_174_new)
HXLINE( 282)		this->length = 0;
HXLINE( 281)		this->pushmod = false;
HXLINE( 280)		this->modified = false;
HXLINE( 279)		this->_inuse = false;
HXLINE( 268)		this->next = null();
HXLINE( 232)		this->elasticity = ((Float)0.0);
HXLINE( 231)		this->dist = ((Float)0.0);
HXLINE( 230)		this->fresh = false;
HXLINE( 229)		this->hash = 0;
HXLINE( 228)		this->stamp = 0;
HXLINE( 227)		this->posOnly = false;
HXLINE( 226)		this->active = false;
HXLINE( 225)		this->inner = null();
HXLINE( 224)		this->arbiter = null();
HXLINE( 213)		this->wrap_position = null();
HXLINE( 187)		this->py = ((Float)0.0);
HXLINE( 186)		this->px = ((Float)0.0);
HXLINE( 175)		this->outer = null();
HXLINE( 234)		this->inner =  ::zpp_nape::dynamics::ZPP_IContact_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_Contact_obj::__CreateEmpty() { return new ZPP_Contact_obj; }

void *ZPP_Contact_obj::_hx_vtable = 0;

Dynamic ZPP_Contact_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Contact_obj > _hx_result = new ZPP_Contact_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Contact_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x173864da;
}

 ::nape::dynamics::Contact ZPP_Contact_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_177_wrapper)
HXLINE( 178)		if (hx::IsNull( this->outer )) {
HXLINE( 179)			::zpp_nape::dynamics::ZPP_Contact_obj::internal = true;
HXLINE( 180)			this->outer =  ::nape::dynamics::Contact_obj::__alloc( HX_CTX );
HXLINE( 181)			::zpp_nape::dynamics::ZPP_Contact_obj::internal = false;
HXLINE( 182)			this->outer->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 184)		return this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,wrapper,return )

void ZPP_Contact_obj::position_validate(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_188_position_validate)
HXLINE( 190)		if (this->inactiveme()) {
HXLINE( 190)			HX_STACK_DO_THROW(HX_("Error: Contact not currently in use",01,5d,35,04));
            		}
HXLINE( 192)		{
HXLINE( 193)			this->wrap_position->zpp_inner->x = this->px;
HXLINE( 194)			this->wrap_position->zpp_inner->y = this->py;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,position_validate,(void))

void ZPP_Contact_obj::getposition(){
            	HX_GC_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_214_getposition)
HXLINE( 215)		 ::zpp_nape::dynamics::ZPP_Contact me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 216)		Float x = ( (Float)(0) );
HXDLIN( 216)		Float y = ( (Float)(0) );
HXDLIN( 216)		bool _hx_tmp;
HXDLIN( 216)		if ((x == x)) {
HXLINE( 216)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 216)			_hx_tmp = true;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 216)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 216)		 ::nape::geom::Vec2 ret;
HXDLIN( 216)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 216)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 216)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 216)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 216)			ret->zpp_pool = null();
HXDLIN( 216)			ret->zpp_disp = false;
HXDLIN( 216)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 216)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 216)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 216)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 216)			{
HXLINE( 216)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 216)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 216)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 216)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 216)					ret1->next = null();
            				}
HXDLIN( 216)				ret1->weak = false;
            			}
HXDLIN( 216)			ret1->_immutable = false;
HXDLIN( 216)			{
HXLINE( 216)				ret1->x = x;
HXDLIN( 216)				ret1->y = y;
            			}
HXDLIN( 216)			ret->zpp_inner = ret1;
HXDLIN( 216)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 216)			bool _hx_tmp1;
HXDLIN( 216)			if (hx::IsNotNull( ret )) {
HXLINE( 216)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 216)				_hx_tmp1 = false;
            			}
HXDLIN( 216)			if (_hx_tmp1) {
HXLINE( 216)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 216)			{
HXLINE( 216)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 216)				if (_this->_immutable) {
HXLINE( 216)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 216)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 216)					_this->_isimmutable();
            				}
            			}
HXDLIN( 216)			bool _hx_tmp2;
HXDLIN( 216)			if ((x == x)) {
HXLINE( 216)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 216)				_hx_tmp2 = true;
            			}
HXDLIN( 216)			if (_hx_tmp2) {
HXLINE( 216)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 216)			bool _hx_tmp3;
HXDLIN( 216)			bool _hx_tmp4;
HXDLIN( 216)			if (hx::IsNotNull( ret )) {
HXLINE( 216)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 216)				_hx_tmp4 = false;
            			}
HXDLIN( 216)			if (_hx_tmp4) {
HXLINE( 216)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 216)			{
HXLINE( 216)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 216)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 216)					_this1->_validate();
            				}
            			}
HXDLIN( 216)			if ((ret->zpp_inner->x == x)) {
HXLINE( 216)				bool _hx_tmp5;
HXDLIN( 216)				if (hx::IsNotNull( ret )) {
HXLINE( 216)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 216)					_hx_tmp5 = false;
            				}
HXDLIN( 216)				if (_hx_tmp5) {
HXLINE( 216)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 216)				{
HXLINE( 216)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 216)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 216)						_this2->_validate();
            					}
            				}
HXDLIN( 216)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 216)				_hx_tmp3 = false;
            			}
HXDLIN( 216)			if (!(_hx_tmp3)) {
HXLINE( 216)				{
HXLINE( 216)					ret->zpp_inner->x = x;
HXDLIN( 216)					ret->zpp_inner->y = y;
            				}
HXDLIN( 216)				{
HXLINE( 216)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 216)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 216)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 216)		ret->zpp_inner->weak = false;
HXDLIN( 216)		this->wrap_position = ret;
HXLINE( 217)		this->wrap_position->zpp_inner->_inuse = true;
HXLINE( 218)		this->wrap_position->zpp_inner->_immutable = true;
HXLINE( 219)		this->wrap_position->zpp_inner->_validate = this->position_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,getposition,(void))

bool ZPP_Contact_obj::inactiveme(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_222_inactiveme)
HXDLIN( 222)		bool _hx_tmp;
HXDLIN( 222)		bool _hx_tmp1;
HXDLIN( 222)		if (this->active) {
HXDLIN( 222)			_hx_tmp1 = hx::IsNotNull( this->arbiter );
            		}
            		else {
HXDLIN( 222)			_hx_tmp1 = false;
            		}
HXDLIN( 222)		if (_hx_tmp1) {
HXDLIN( 222)			_hx_tmp = !(!(this->arbiter->active));
            		}
            		else {
HXDLIN( 222)			_hx_tmp = false;
            		}
HXDLIN( 222)		return !(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,inactiveme,return )

void ZPP_Contact_obj::free(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_239_free)
HXDLIN( 239)		this->arbiter = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,free,(void))

void ZPP_Contact_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_243_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,alloc,(void))

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::elem(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_272_elem)
HXDLIN( 272)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,elem,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_277_begin)
HXDLIN( 277)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,begin,return )

void ZPP_Contact_obj::setbegin( ::zpp_nape::dynamics::ZPP_Contact i){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_285_setbegin)
HXLINE( 286)		this->next = i;
HXLINE( 287)		this->modified = true;
HXLINE( 288)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,setbegin,(void))

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::add( ::zpp_nape::dynamics::ZPP_Contact o){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_291_add)
HXDLIN( 291)		o->_inuse = true;
HXDLIN( 291)		 ::zpp_nape::dynamics::ZPP_Contact temp = o;
HXDLIN( 291)		temp->next = this->next;
HXDLIN( 291)		this->next = temp;
HXDLIN( 291)		this->modified = true;
HXDLIN( 291)		this->length++;
HXDLIN( 291)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,add,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::inlined_add( ::zpp_nape::dynamics::ZPP_Contact o){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_295_inlined_add)
HXLINE( 305)		o->_inuse = true;
HXLINE( 304)		 ::zpp_nape::dynamics::ZPP_Contact temp = o;
HXLINE( 308)		temp->next = this->next;
HXLINE( 309)		this->next = temp;
HXLINE( 310)		this->modified = true;
HXLINE( 311)		this->length++;
HXLINE( 312)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,inlined_add,return )

void ZPP_Contact_obj::addAll( ::zpp_nape::dynamics::ZPP_Contact x){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_323_addAll)
HXLINE( 324)		 ::zpp_nape::dynamics::ZPP_Contact cx_ite = x->next;
HXLINE( 325)		while(hx::IsNotNull( cx_ite )){
HXLINE( 326)			 ::zpp_nape::dynamics::ZPP_Contact i = cx_ite;
HXLINE( 327)			this->add(i);
HXLINE( 328)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,addAll,(void))

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::insert( ::zpp_nape::dynamics::ZPP_Contact cur, ::zpp_nape::dynamics::ZPP_Contact o){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_333_insert)
HXDLIN( 333)		o->_inuse = true;
HXDLIN( 333)		 ::zpp_nape::dynamics::ZPP_Contact temp = o;
HXDLIN( 333)		if (hx::IsNull( cur )) {
HXDLIN( 333)			temp->next = this->next;
HXDLIN( 333)			this->next = temp;
            		}
            		else {
HXDLIN( 333)			temp->next = cur->next;
HXDLIN( 333)			cur->next = temp;
            		}
HXDLIN( 333)		this->pushmod = (this->modified = true);
HXDLIN( 333)		this->length++;
HXDLIN( 333)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Contact_obj,insert,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::inlined_insert( ::zpp_nape::dynamics::ZPP_Contact cur, ::zpp_nape::dynamics::ZPP_Contact o){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_337_inlined_insert)
HXLINE( 347)		o->_inuse = true;
HXLINE( 346)		 ::zpp_nape::dynamics::ZPP_Contact temp = o;
HXLINE( 350)		if (hx::IsNull( cur )) {
HXLINE( 351)			temp->next = this->next;
HXLINE( 352)			this->next = temp;
            		}
            		else {
HXLINE( 355)			temp->next = cur->next;
HXLINE( 356)			cur->next = temp;
            		}
HXLINE( 358)		this->pushmod = (this->modified = true);
HXLINE( 359)		this->length++;
HXLINE( 360)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Contact_obj,inlined_insert,return )

void ZPP_Contact_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_363_pop)
HXDLIN( 363)		 ::zpp_nape::dynamics::ZPP_Contact ret = this->next;
HXDLIN( 363)		this->next = ret->next;
HXDLIN( 363)		ret->_inuse = false;
HXDLIN( 363)		if (hx::IsNull( this->next )) {
HXDLIN( 363)			this->pushmod = true;
            		}
HXDLIN( 363)		this->modified = true;
HXDLIN( 363)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,pop,(void))

void ZPP_Contact_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_367_inlined_pop)
HXLINE( 376)		 ::zpp_nape::dynamics::ZPP_Contact ret = this->next;
HXLINE( 377)		this->next = ret->next;
HXLINE( 379)		ret->_inuse = false;
HXLINE( 382)		if (hx::IsNull( this->next )) {
HXLINE( 382)			this->pushmod = true;
            		}
HXLINE( 383)		this->modified = true;
HXLINE( 384)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,inlined_pop,(void))

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_387_pop_unsafe)
HXDLIN( 387)		 ::zpp_nape::dynamics::ZPP_Contact ret = this->next;
HXDLIN( 387)		this->pop();
HXDLIN( 387)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,pop_unsafe,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_391_inlined_pop_unsafe)
HXLINE( 400)		 ::zpp_nape::dynamics::ZPP_Contact ret = this->next;
HXLINE( 401)		this->pop();
HXLINE( 402)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,inlined_pop_unsafe,return )

void ZPP_Contact_obj::remove( ::zpp_nape::dynamics::ZPP_Contact obj){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_413_remove)
HXDLIN( 413)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXDLIN( 413)		 ::zpp_nape::dynamics::ZPP_Contact cur = this->next;
HXDLIN( 413)		bool ret = false;
HXDLIN( 413)		while(hx::IsNotNull( cur )){
HXDLIN( 413)			if (hx::IsEq( cur,obj )) {
HXDLIN( 413)				{
HXDLIN( 413)					 ::zpp_nape::dynamics::ZPP_Contact old;
HXDLIN( 413)					 ::zpp_nape::dynamics::ZPP_Contact ret1;
HXDLIN( 413)					if (hx::IsNull( pre )) {
HXDLIN( 413)						old = this->next;
HXDLIN( 413)						ret1 = old->next;
HXDLIN( 413)						this->next = ret1;
HXDLIN( 413)						if (hx::IsNull( this->next )) {
HXDLIN( 413)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 413)						old = pre->next;
HXDLIN( 413)						ret1 = old->next;
HXDLIN( 413)						pre->next = ret1;
HXDLIN( 413)						if (hx::IsNull( ret1 )) {
HXDLIN( 413)							this->pushmod = true;
            						}
            					}
HXDLIN( 413)					old->_inuse = false;
HXDLIN( 413)					this->modified = true;
HXDLIN( 413)					this->length--;
HXDLIN( 413)					this->pushmod = true;
            				}
HXDLIN( 413)				ret = true;
HXDLIN( 413)				goto _hx_goto_20;
            			}
HXDLIN( 413)			pre = cur;
HXDLIN( 413)			cur = cur->next;
            		}
            		_hx_goto_20:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,remove,(void))

bool ZPP_Contact_obj::try_remove( ::zpp_nape::dynamics::ZPP_Contact obj){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_415_try_remove)
HXLINE( 424)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXLINE( 425)		 ::zpp_nape::dynamics::ZPP_Contact cur = this->next;
HXLINE( 426)		bool ret = false;
HXLINE( 427)		while(hx::IsNotNull( cur )){
HXLINE( 428)			if (hx::IsEq( cur,obj )) {
HXLINE( 429)				this->erase(pre);
HXLINE( 430)				ret = true;
HXLINE( 431)				goto _hx_goto_22;
            			}
HXLINE( 433)			pre = cur;
HXLINE( 434)			cur = cur->next;
            		}
            		_hx_goto_22:;
HXLINE( 436)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,try_remove,return )

void ZPP_Contact_obj::inlined_remove( ::zpp_nape::dynamics::ZPP_Contact obj){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_449_inlined_remove)
HXDLIN( 449)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXDLIN( 449)		 ::zpp_nape::dynamics::ZPP_Contact cur = this->next;
HXDLIN( 449)		bool ret = false;
HXDLIN( 449)		while(hx::IsNotNull( cur )){
HXDLIN( 449)			if (hx::IsEq( cur,obj )) {
HXDLIN( 449)				{
HXDLIN( 449)					 ::zpp_nape::dynamics::ZPP_Contact old;
HXDLIN( 449)					 ::zpp_nape::dynamics::ZPP_Contact ret1;
HXDLIN( 449)					if (hx::IsNull( pre )) {
HXDLIN( 449)						old = this->next;
HXDLIN( 449)						ret1 = old->next;
HXDLIN( 449)						this->next = ret1;
HXDLIN( 449)						if (hx::IsNull( this->next )) {
HXDLIN( 449)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 449)						old = pre->next;
HXDLIN( 449)						ret1 = old->next;
HXDLIN( 449)						pre->next = ret1;
HXDLIN( 449)						if (hx::IsNull( ret1 )) {
HXDLIN( 449)							this->pushmod = true;
            						}
            					}
HXDLIN( 449)					old->_inuse = false;
HXDLIN( 449)					this->modified = true;
HXDLIN( 449)					this->length--;
HXDLIN( 449)					this->pushmod = true;
            				}
HXDLIN( 449)				ret = true;
HXDLIN( 449)				goto _hx_goto_24;
            			}
HXDLIN( 449)			pre = cur;
HXDLIN( 449)			cur = cur->next;
            		}
            		_hx_goto_24:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,inlined_remove,(void))

bool ZPP_Contact_obj::inlined_try_remove( ::zpp_nape::dynamics::ZPP_Contact obj){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_453_inlined_try_remove)
HXLINE( 462)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXLINE( 463)		 ::zpp_nape::dynamics::ZPP_Contact cur = this->next;
HXLINE( 464)		bool ret = false;
HXLINE( 465)		while(hx::IsNotNull( cur )){
HXLINE( 466)			if (hx::IsEq( cur,obj )) {
HXLINE( 467)				{
HXLINE( 467)					 ::zpp_nape::dynamics::ZPP_Contact old;
HXDLIN( 467)					 ::zpp_nape::dynamics::ZPP_Contact ret1;
HXDLIN( 467)					if (hx::IsNull( pre )) {
HXLINE( 467)						old = this->next;
HXDLIN( 467)						ret1 = old->next;
HXDLIN( 467)						this->next = ret1;
HXDLIN( 467)						if (hx::IsNull( this->next )) {
HXLINE( 467)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 467)						old = pre->next;
HXDLIN( 467)						ret1 = old->next;
HXDLIN( 467)						pre->next = ret1;
HXDLIN( 467)						if (hx::IsNull( ret1 )) {
HXLINE( 467)							this->pushmod = true;
            						}
            					}
HXDLIN( 467)					old->_inuse = false;
HXDLIN( 467)					this->modified = true;
HXDLIN( 467)					this->length--;
HXDLIN( 467)					this->pushmod = true;
            				}
HXLINE( 468)				ret = true;
HXLINE( 469)				goto _hx_goto_26;
            			}
HXLINE( 471)			pre = cur;
HXLINE( 472)			cur = cur->next;
            		}
            		_hx_goto_26:;
HXLINE( 474)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,inlined_try_remove,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::erase( ::zpp_nape::dynamics::ZPP_Contact pre){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_477_erase)
HXDLIN( 477)		 ::zpp_nape::dynamics::ZPP_Contact old;
HXDLIN( 477)		 ::zpp_nape::dynamics::ZPP_Contact ret;
HXDLIN( 477)		if (hx::IsNull( pre )) {
HXDLIN( 477)			old = this->next;
HXDLIN( 477)			ret = old->next;
HXDLIN( 477)			this->next = ret;
HXDLIN( 477)			if (hx::IsNull( this->next )) {
HXDLIN( 477)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN( 477)			old = pre->next;
HXDLIN( 477)			ret = old->next;
HXDLIN( 477)			pre->next = ret;
HXDLIN( 477)			if (hx::IsNull( ret )) {
HXDLIN( 477)				this->pushmod = true;
            			}
            		}
HXDLIN( 477)		old->_inuse = false;
HXDLIN( 477)		this->modified = true;
HXDLIN( 477)		this->length--;
HXDLIN( 477)		this->pushmod = true;
HXDLIN( 477)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,erase,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::inlined_erase( ::zpp_nape::dynamics::ZPP_Contact pre){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_481_inlined_erase)
HXLINE( 490)		 ::zpp_nape::dynamics::ZPP_Contact old;
HXLINE( 491)		 ::zpp_nape::dynamics::ZPP_Contact ret;
HXLINE( 492)		if (hx::IsNull( pre )) {
HXLINE( 493)			old = this->next;
HXLINE( 494)			ret = old->next;
HXLINE( 495)			this->next = ret;
HXLINE( 496)			if (hx::IsNull( this->next )) {
HXLINE( 496)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 499)			old = pre->next;
HXLINE( 500)			ret = old->next;
HXLINE( 501)			pre->next = ret;
HXLINE( 502)			if (hx::IsNull( ret )) {
HXLINE( 502)				this->pushmod = true;
            			}
            		}
HXLINE( 505)		old->_inuse = false;
HXLINE( 508)		this->modified = true;
HXLINE( 509)		this->length--;
HXLINE( 510)		this->pushmod = true;
HXLINE( 511)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,inlined_erase,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::splice( ::zpp_nape::dynamics::ZPP_Contact pre,int n){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_513_splice)
HXLINE( 514)		while(true){
HXLINE( 514)			bool _hx_tmp;
HXDLIN( 514)			n = (n - 1);
HXDLIN( 514)			if (((n + 1) > 0)) {
HXLINE( 514)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 514)				_hx_tmp = false;
            			}
HXDLIN( 514)			if (!(_hx_tmp)) {
HXLINE( 514)				goto _hx_goto_30;
            			}
HXDLIN( 514)			this->erase(pre);
            		}
            		_hx_goto_30:;
HXLINE( 515)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Contact_obj,splice,return )

void ZPP_Contact_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_518_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,clear,(void))

void ZPP_Contact_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_523_inlined_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,inlined_clear,(void))

void ZPP_Contact_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_528_reverse)
HXLINE( 529)		 ::zpp_nape::dynamics::ZPP_Contact cur = this->next;
HXLINE( 530)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXLINE( 531)		while(hx::IsNotNull( cur )){
HXLINE( 532)			 ::zpp_nape::dynamics::ZPP_Contact nx = cur->next;
HXLINE( 533)			cur->next = pre;
HXLINE( 534)			this->next = cur;
HXLINE( 535)			pre = cur;
HXLINE( 536)			cur = nx;
            		}
HXLINE( 538)		this->modified = true;
HXLINE( 539)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,reverse,(void))

bool ZPP_Contact_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_544_empty)
HXDLIN( 544)		return hx::IsNull( this->next );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,empty,return )

int ZPP_Contact_obj::size(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_549_size)
HXDLIN( 549)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,size,return )

bool ZPP_Contact_obj::has( ::zpp_nape::dynamics::ZPP_Contact obj){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_552_has)
HXDLIN( 552)		bool ret;
HXDLIN( 552)		{
HXDLIN( 552)			ret = false;
HXDLIN( 552)			{
HXDLIN( 552)				 ::zpp_nape::dynamics::ZPP_Contact cx_ite = this->next;
HXDLIN( 552)				while(hx::IsNotNull( cx_ite )){
HXDLIN( 552)					 ::zpp_nape::dynamics::ZPP_Contact npite = cx_ite;
HXDLIN( 552)					if (hx::IsEq( npite,obj )) {
HXDLIN( 552)						ret = true;
HXDLIN( 552)						goto _hx_goto_38;
            					}
HXDLIN( 552)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_38:;
            			}
            		}
HXDLIN( 552)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,has,return )

bool ZPP_Contact_obj::inlined_has( ::zpp_nape::dynamics::ZPP_Contact obj){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_556_inlined_has)
HXLINE( 565)		bool ret;
HXLINE( 566)		{
HXLINE( 567)			ret = false;
HXLINE( 568)			{
HXLINE( 569)				 ::zpp_nape::dynamics::ZPP_Contact cx_ite = this->next;
HXLINE( 570)				while(hx::IsNotNull( cx_ite )){
HXLINE( 571)					 ::zpp_nape::dynamics::ZPP_Contact npite = cx_ite;
HXLINE( 573)					if (hx::IsEq( npite,obj )) {
HXLINE( 574)						ret = true;
HXLINE( 575)						goto _hx_goto_40;
            					}
HXLINE( 578)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_40:;
            			}
            		}
HXLINE( 582)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,inlined_has,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::front(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_587_front)
HXDLIN( 587)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,front,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::back(){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_589_back)
HXLINE( 590)		 ::zpp_nape::dynamics::ZPP_Contact ret = this->next;
HXLINE( 591)		 ::zpp_nape::dynamics::ZPP_Contact cur = ret;
HXLINE( 592)		while(hx::IsNotNull( cur )){
HXLINE( 593)			ret = cur;
HXLINE( 594)			cur = cur->next;
            		}
HXLINE( 596)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Contact_obj,back,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_598_iterator_at)
HXLINE( 607)		 ::zpp_nape::dynamics::ZPP_Contact ret = this->next;
HXLINE( 608)		while(true){
HXLINE( 608)			bool _hx_tmp;
HXDLIN( 608)			ind = (ind - 1);
HXDLIN( 608)			if (((ind + 1) > 0)) {
HXLINE( 608)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE( 608)				_hx_tmp = false;
            			}
HXDLIN( 608)			if (!(_hx_tmp)) {
HXLINE( 608)				goto _hx_goto_45;
            			}
HXDLIN( 608)			ret = ret->next;
            		}
            		_hx_goto_45:;
HXLINE( 609)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,iterator_at,return )

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_611_at)
HXLINE( 620)		 ::zpp_nape::dynamics::ZPP_Contact it = this->iterator_at(ind);
HXLINE( 621)		if (hx::IsNotNull( it )) {
HXLINE( 621)			return it;
            		}
            		else {
HXLINE( 621)			return null();
            		}
HXDLIN( 621)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Contact_obj,at,return )

bool ZPP_Contact_obj::internal;

 ::zpp_nape::dynamics::ZPP_Contact ZPP_Contact_obj::zpp_pool;


hx::ObjectPtr< ZPP_Contact_obj > ZPP_Contact_obj::__new() {
	hx::ObjectPtr< ZPP_Contact_obj > __this = new ZPP_Contact_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Contact_obj > ZPP_Contact_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Contact_obj *__this = (ZPP_Contact_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Contact_obj), true, "zpp_nape.dynamics.ZPP_Contact"));
	*(void **)__this = ZPP_Contact_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Contact_obj::ZPP_Contact_obj()
{
}

void ZPP_Contact_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Contact);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(px,"px");
	HX_MARK_MEMBER_NAME(py,"py");
	HX_MARK_MEMBER_NAME(wrap_position,"wrap_position");
	HX_MARK_MEMBER_NAME(arbiter,"arbiter");
	HX_MARK_MEMBER_NAME(inner,"inner");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(posOnly,"posOnly");
	HX_MARK_MEMBER_NAME(stamp,"stamp");
	HX_MARK_MEMBER_NAME(hash,"hash");
	HX_MARK_MEMBER_NAME(fresh,"fresh");
	HX_MARK_MEMBER_NAME(dist,"dist");
	HX_MARK_MEMBER_NAME(elasticity,"elasticity");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(_inuse,"_inuse");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZPP_Contact_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(px,"px");
	HX_VISIT_MEMBER_NAME(py,"py");
	HX_VISIT_MEMBER_NAME(wrap_position,"wrap_position");
	HX_VISIT_MEMBER_NAME(arbiter,"arbiter");
	HX_VISIT_MEMBER_NAME(inner,"inner");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(posOnly,"posOnly");
	HX_VISIT_MEMBER_NAME(stamp,"stamp");
	HX_VISIT_MEMBER_NAME(hash,"hash");
	HX_VISIT_MEMBER_NAME(fresh,"fresh");
	HX_VISIT_MEMBER_NAME(dist,"dist");
	HX_VISIT_MEMBER_NAME(elasticity,"elasticity");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(_inuse,"_inuse");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZPP_Contact_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"px") ) { return hx::Val( px ); }
		if (HX_FIELD_EQ(inName,"py") ) { return hx::Val( py ); }
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"hash") ) { return hx::Val( hash ); }
		if (HX_FIELD_EQ(inName,"dist") ) { return hx::Val( dist ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"elem") ) { return hx::Val( elem_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		if (HX_FIELD_EQ(inName,"inner") ) { return hx::Val( inner ); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp ); }
		if (HX_FIELD_EQ(inName,"fresh") ) { return hx::Val( fresh ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"_inuse") ) { return hx::Val( _inuse ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn() ); }
		if (HX_FIELD_EQ(inName,"arbiter") ) { return hx::Val( arbiter ); }
		if (HX_FIELD_EQ(inName,"posOnly") ) { return hx::Val( posOnly ); }
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"inactiveme") ) { return hx::Val( inactiveme_dyn() ); }
		if (HX_FIELD_EQ(inName,"elasticity") ) { return hx::Val( elasticity ); }
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getposition") ) { return hx::Val( getposition_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_position") ) { return hx::Val( wrap_position ); }
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"position_validate") ) { return hx::Val( position_validate_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Contact_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = ( internal ); return true; }
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
	}
	return false;
}

hx::Val ZPP_Contact_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"px") ) { px=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"py") ) { py=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"hash") ) { hash=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dist") ) { dist=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Contact >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::dynamics::Contact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inner") ) { inner=inValue.Cast<  ::zpp_nape::dynamics::ZPP_IContact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stamp") ) { stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fresh") ) { fresh=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_inuse") ) { _inuse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arbiter") ) { arbiter=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Arbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posOnly") ) { posOnly=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { elasticity=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_position") ) { wrap_position=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Contact_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::dynamics::ZPP_Contact >(); return true; }
	}
	return false;
}

void ZPP_Contact_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("px",08,62,00,00));
	outFields->push(HX_("py",09,62,00,00));
	outFields->push(HX_("wrap_position",fe,d4,24,bb));
	outFields->push(HX_("arbiter",e9,bf,55,09));
	outFields->push(HX_("inner",96,31,1c,be));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("posOnly",20,69,a1,fe));
	outFields->push(HX_("stamp",03,70,0b,84));
	outFields->push(HX_("hash",ce,2f,08,45));
	outFields->push(HX_("fresh",6e,86,86,06));
	outFields->push(HX_("dist",66,67,69,42));
	outFields->push(HX_("elasticity",79,23,b4,4d));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("_inuse",c3,d4,08,ba));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Contact_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::dynamics::Contact */ ,(int)offsetof(ZPP_Contact_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsFloat,(int)offsetof(ZPP_Contact_obj,px),HX_("px",08,62,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_Contact_obj,py),HX_("py",09,62,00,00)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_Contact_obj,wrap_position),HX_("wrap_position",fe,d4,24,bb)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Arbiter */ ,(int)offsetof(ZPP_Contact_obj,arbiter),HX_("arbiter",e9,bf,55,09)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_IContact */ ,(int)offsetof(ZPP_Contact_obj,inner),HX_("inner",96,31,1c,be)},
	{hx::fsBool,(int)offsetof(ZPP_Contact_obj,active),HX_("active",c6,41,46,16)},
	{hx::fsBool,(int)offsetof(ZPP_Contact_obj,posOnly),HX_("posOnly",20,69,a1,fe)},
	{hx::fsInt,(int)offsetof(ZPP_Contact_obj,stamp),HX_("stamp",03,70,0b,84)},
	{hx::fsInt,(int)offsetof(ZPP_Contact_obj,hash),HX_("hash",ce,2f,08,45)},
	{hx::fsBool,(int)offsetof(ZPP_Contact_obj,fresh),HX_("fresh",6e,86,86,06)},
	{hx::fsFloat,(int)offsetof(ZPP_Contact_obj,dist),HX_("dist",66,67,69,42)},
	{hx::fsFloat,(int)offsetof(ZPP_Contact_obj,elasticity),HX_("elasticity",79,23,b4,4d)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Contact */ ,(int)offsetof(ZPP_Contact_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsBool,(int)offsetof(ZPP_Contact_obj,_inuse),HX_("_inuse",c3,d4,08,ba)},
	{hx::fsBool,(int)offsetof(ZPP_Contact_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZPP_Contact_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZPP_Contact_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Contact_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ZPP_Contact_obj::internal,HX_("internal",3d,67,76,28)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Contact */ ,(void *) &ZPP_Contact_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Contact_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("wrapper",53,d5,64,0d),
	HX_("px",08,62,00,00),
	HX_("py",09,62,00,00),
	HX_("position_validate",2c,4a,54,ce),
	HX_("wrap_position",fe,d4,24,bb),
	HX_("getposition",3f,a7,3c,17),
	HX_("inactiveme",83,67,f5,67),
	HX_("arbiter",e9,bf,55,09),
	HX_("inner",96,31,1c,be),
	HX_("active",c6,41,46,16),
	HX_("posOnly",20,69,a1,fe),
	HX_("stamp",03,70,0b,84),
	HX_("hash",ce,2f,08,45),
	HX_("fresh",6e,86,86,06),
	HX_("dist",66,67,69,42),
	HX_("elasticity",79,23,b4,4d),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	HX_("next",f3,84,02,49),
	HX_("elem",8f,d8,14,43),
	HX_("begin",29,ea,55,b0),
	HX_("_inuse",c3,d4,08,ba),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

static void ZPP_Contact_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Contact_obj::internal,"internal");
	HX_MARK_MEMBER_NAME(ZPP_Contact_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Contact_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Contact_obj::internal,"internal");
	HX_VISIT_MEMBER_NAME(ZPP_Contact_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Contact_obj::__mClass;

static ::String ZPP_Contact_obj_sStaticFields[] = {
	HX_("internal",3d,67,76,28),
	HX_("zpp_pool",81,5d,d4,38),
	::String(null())
};

void ZPP_Contact_obj::__register()
{
	ZPP_Contact_obj _hx_dummy;
	ZPP_Contact_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.dynamics.ZPP_Contact",02,d8,6f,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Contact_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Contact_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Contact_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Contact_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Contact_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Contact_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Contact_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Contact_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Contact_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Contact_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_176_boot)
HXDLIN( 176)		internal = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f46bbcc55a95dcf0_244_boot)
HXDLIN( 244)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
