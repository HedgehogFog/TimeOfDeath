// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_dynamics_Arbiter
#include <hxinc/nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_CollisionArbiter
#include <hxinc/nape/dynamics/CollisionArbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_Contact
#include <hxinc/nape/dynamics/Contact.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactList
#include <hxinc/nape/dynamics/ContactList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <hxinc/zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <hxinc/zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <hxinc/zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <hxinc/zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <hxinc/zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <hxinc/zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ContactList
#include <hxinc/zpp_nape/util/ZPP_ContactList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1391_new,"zpp_nape.dynamics.ZPP_ColArbiter","new",0xa8567bd9,"zpp_nape.dynamics.ZPP_ColArbiter.new","zpp_nape/dynamics/Arbiter.hx",1391,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1408_normal_validate,"zpp_nape.dynamics.ZPP_ColArbiter","normal_validate",0xea7cd5e7,"zpp_nape.dynamics.ZPP_ColArbiter.normal_validate","zpp_nape/dynamics/Arbiter.hx",1408,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1438_getnormal,"zpp_nape.dynamics.ZPP_ColArbiter","getnormal",0x8ba59376,"zpp_nape.dynamics.ZPP_ColArbiter.getnormal","zpp_nape/dynamics/Arbiter.hx",1438,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1521_alloc,"zpp_nape.dynamics.ZPP_ColArbiter","alloc",0xd032e02e,"zpp_nape.dynamics.ZPP_ColArbiter.alloc","zpp_nape/dynamics/Arbiter.hx",1521,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1532_free,"zpp_nape.dynamics.ZPP_ColArbiter","free",0x9e15fb13,"zpp_nape.dynamics.ZPP_ColArbiter.free","zpp_nape/dynamics/Arbiter.hx",1532,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1558_injectContact,"zpp_nape.dynamics.ZPP_ColArbiter","injectContact",0x73f258c8,"zpp_nape.dynamics.ZPP_ColArbiter.injectContact","zpp_nape/dynamics/Arbiter.hx",1558,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1646_assign,"zpp_nape.dynamics.ZPP_ColArbiter","assign",0x68bb4c56,"zpp_nape.dynamics.ZPP_ColArbiter.assign","zpp_nape/dynamics/Arbiter.hx",1646,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1654_calcProperties,"zpp_nape.dynamics.ZPP_ColArbiter","calcProperties",0xc66e8a0f,"zpp_nape.dynamics.ZPP_ColArbiter.calcProperties","zpp_nape/dynamics/Arbiter.hx",1654,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1675_validate_props,"zpp_nape.dynamics.ZPP_ColArbiter","validate_props",0x089c98ee,"zpp_nape.dynamics.ZPP_ColArbiter.validate_props","zpp_nape/dynamics/Arbiter.hx",1675,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1682_retire,"zpp_nape.dynamics.ZPP_ColArbiter","retire",0x25d98fc2,"zpp_nape.dynamics.ZPP_ColArbiter.retire","zpp_nape/dynamics/Arbiter.hx",1682,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1726_makemutable,"zpp_nape.dynamics.ZPP_ColArbiter","makemutable",0x6d41cbf1,"zpp_nape.dynamics.ZPP_ColArbiter.makemutable","zpp_nape/dynamics/Arbiter.hx",1726,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1733_makeimmutable,"zpp_nape.dynamics.ZPP_ColArbiter","makeimmutable",0xb6e45d4d,"zpp_nape.dynamics.ZPP_ColArbiter.makeimmutable","zpp_nape/dynamics/Arbiter.hx",1733,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1740_contacts_adder,"zpp_nape.dynamics.ZPP_ColArbiter","contacts_adder",0x72379349,"zpp_nape.dynamics.ZPP_ColArbiter.contacts_adder","zpp_nape/dynamics/Arbiter.hx",1740,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1744_contacts_subber,"zpp_nape.dynamics.ZPP_ColArbiter","contacts_subber",0x7950e8f4,"zpp_nape.dynamics.ZPP_ColArbiter.contacts_subber","zpp_nape/dynamics/Arbiter.hx",1744,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1783_setupcontacts,"zpp_nape.dynamics.ZPP_ColArbiter","setupcontacts",0xfc2be209,"zpp_nape.dynamics.ZPP_ColArbiter.setupcontacts","zpp_nape/dynamics/Arbiter.hx",1783,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1792_cleanupContacts,"zpp_nape.dynamics.ZPP_ColArbiter","cleanupContacts",0xed1bdb10,"zpp_nape.dynamics.ZPP_ColArbiter.cleanupContacts","zpp_nape/dynamics/Arbiter.hx",1792,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1882_preStep,"zpp_nape.dynamics.ZPP_ColArbiter","preStep",0x26711d08,"zpp_nape.dynamics.ZPP_ColArbiter.preStep","zpp_nape/dynamics/Arbiter.hx",1882,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_2127_warmStart,"zpp_nape.dynamics.ZPP_ColArbiter","warmStart",0xfe7d3416,"zpp_nape.dynamics.ZPP_ColArbiter.warmStart","zpp_nape/dynamics/Arbiter.hx",2127,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_2197_applyImpulseVel,"zpp_nape.dynamics.ZPP_ColArbiter","applyImpulseVel",0x4e2344af,"zpp_nape.dynamics.ZPP_ColArbiter.applyImpulseVel","zpp_nape/dynamics/Arbiter.hx",2197,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_2343_applyImpulsePos,"zpp_nape.dynamics.ZPP_ColArbiter","applyImpulsePos",0x4e1ebfe6,"zpp_nape.dynamics.ZPP_ColArbiter.applyImpulsePos","zpp_nape/dynamics/Arbiter.hx",2343,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1466_boot,"zpp_nape.dynamics.ZPP_ColArbiter","boot",0x9b6ee299,"zpp_nape.dynamics.ZPP_ColArbiter.boot","zpp_nape/dynamics/Arbiter.hx",1466,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1467_boot,"zpp_nape.dynamics.ZPP_ColArbiter","boot",0x9b6ee299,"zpp_nape.dynamics.ZPP_ColArbiter.boot","zpp_nape/dynamics/Arbiter.hx",1467,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1468_boot,"zpp_nape.dynamics.ZPP_ColArbiter","boot",0x9b6ee299,"zpp_nape.dynamics.ZPP_ColArbiter.boot","zpp_nape/dynamics/Arbiter.hx",1468,0x26846f2e)
HX_LOCAL_STACK_FRAME(_hx_pos_c52dfbc26d5435ef_1486_boot,"zpp_nape.dynamics.ZPP_ColArbiter","boot",0x9b6ee299,"zpp_nape.dynamics.ZPP_ColArbiter.boot","zpp_nape/dynamics/Arbiter.hx",1486,0x26846f2e)
namespace zpp_nape{
namespace dynamics{

void ZPP_ColArbiter_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1391_new)
HXLINE(1879)		this->pre_dt = ((Float)0.0);
HXLINE(1723)		this->_hx_mutable = false;
HXLINE(1555)		this->stat = false;
HXLINE(1485)		this->next = null();
HXLINE(1484)		this->hpc2 = false;
HXLINE(1483)		this->hc2 = false;
HXLINE(1482)		this->oc2 = null();
HXLINE(1481)		this->c2 = null();
HXLINE(1480)		this->oc1 = null();
HXLINE(1479)		this->c1 = null();
HXLINE(1478)		this->_hx___ref_vertex = 0;
HXLINE(1477)		this->_hx___ref_edge2 = null();
HXLINE(1476)		this->_hx___ref_edge1 = null();
HXLINE(1475)		this->biasCoef = ((Float)0.0);
HXLINE(1474)		this->rev = false;
HXLINE(1473)		this->radius = ((Float)0.0);
HXLINE(1472)		this->lproj = ((Float)0.0);
HXLINE(1471)		this->lnormy = ((Float)0.0);
HXLINE(1470)		this->lnormx = ((Float)0.0);
HXLINE(1465)		this->surfacey = ((Float)0.0);
HXLINE(1464)		this->surfacex = ((Float)0.0);
HXLINE(1463)		this->k2y = ((Float)0.0);
HXLINE(1462)		this->k2x = ((Float)0.0);
HXLINE(1461)		this->k1y = ((Float)0.0);
HXLINE(1460)		this->k1x = ((Float)0.0);
HXLINE(1459)		this->rt2b = ((Float)0.0);
HXLINE(1458)		this->rn2b = ((Float)0.0);
HXLINE(1457)		this->rt2a = ((Float)0.0);
HXLINE(1456)		this->rn2a = ((Float)0.0);
HXLINE(1455)		this->rt1b = ((Float)0.0);
HXLINE(1454)		this->rn1b = ((Float)0.0);
HXLINE(1453)		this->rt1a = ((Float)0.0);
HXLINE(1452)		this->rn1a = ((Float)0.0);
HXLINE(1451)		this->jrAcc = ((Float)0.0);
HXLINE(1450)		this->rMass = ((Float)0.0);
HXLINE(1449)		this->Kc = ((Float)0.0);
HXLINE(1448)		this->Kb = ((Float)0.0);
HXLINE(1447)		this->Ka = ((Float)0.0);
HXLINE(1446)		this->kMassc = ((Float)0.0);
HXLINE(1445)		this->kMassb = ((Float)0.0);
HXLINE(1444)		this->kMassa = ((Float)0.0);
HXLINE(1437)		this->wrap_normal = null();
HXLINE(1407)		this->ny = ((Float)0.0);
HXLINE(1406)		this->nx = ((Float)0.0);
HXLINE(1405)		this->innards = null();
HXLINE(1404)		this->wrap_contacts = null();
HXLINE(1403)		this->contacts = null();
HXLINE(1402)		this->s2 = null();
HXLINE(1401)		this->s1 = null();
HXLINE(1400)		this->userdef_rfric = false;
HXLINE(1399)		this->userdef_restitution = false;
HXLINE(1398)		this->userdef_stat_fric = false;
HXLINE(1397)		this->userdef_dyn_fric = false;
HXLINE(1396)		this->rfric = ((Float)0.0);
HXLINE(1395)		this->restitution = ((Float)0.0);
HXLINE(1394)		this->stat_fric = ((Float)0.0);
HXLINE(1393)		this->dyn_fric = ((Float)0.0);
HXLINE(1392)		this->outer_zn = null();
HXLINE(1511)		super::__construct();
HXLINE(1512)		this->pre_dt = ((Float)-1.0);
HXLINE(1513)		this->contacts =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
HXLINE(1514)		this->innards =  ::zpp_nape::dynamics::ZPP_IContact_obj::__alloc( HX_CTX );
HXLINE(1515)		this->type = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;
HXLINE(1516)		this->colarb = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic ZPP_ColArbiter_obj::__CreateEmpty() { return new ZPP_ColArbiter_obj; }

void *ZPP_ColArbiter_obj::_hx_vtable = 0;

Dynamic ZPP_ColArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_ColArbiter_obj > _hx_result = new ZPP_ColArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_ColArbiter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0719aa23) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0719aa23;
	} else {
		return inClassId==(int)0x5bc8a58f;
	}
}

void ZPP_ColArbiter_obj::normal_validate(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1408_normal_validate)
HXLINE(1409)		if (this->cleared) {
HXLINE(1409)			HX_STACK_DO_THROW(HX_("Error: Arbiter not currently in use",18,2d,13,a7));
            		}
HXLINE(1410)		{
HXLINE(1411)			this->wrap_normal->zpp_inner->x = this->nx;
HXLINE(1412)			this->wrap_normal->zpp_inner->y = this->ny;
            		}
HXLINE(1430)		if ((this->ws1->id > this->ws2->id)) {
HXLINE(1432)			this->wrap_normal->zpp_inner->x = -(this->wrap_normal->zpp_inner->x);
HXLINE(1433)			this->wrap_normal->zpp_inner->y = -(this->wrap_normal->zpp_inner->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,normal_validate,(void))

void ZPP_ColArbiter_obj::getnormal(){
            	HX_GC_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1438_getnormal)
HXLINE(1439)		 ::nape::geom::Vec2 ret;
HXDLIN(1439)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1439)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1439)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1439)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1439)			ret->zpp_pool = null();
HXDLIN(1439)			ret->zpp_disp = false;
HXDLIN(1439)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1439)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN(1439)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1439)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1439)			{
HXLINE(1439)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1439)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1439)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1439)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1439)					ret1->next = null();
            				}
HXDLIN(1439)				ret1->weak = false;
            			}
HXDLIN(1439)			ret1->_immutable = false;
HXDLIN(1439)			{
HXLINE(1439)				ret1->x = ( (Float)(0) );
HXDLIN(1439)				ret1->y = ( (Float)(0) );
            			}
HXDLIN(1439)			ret->zpp_inner = ret1;
HXDLIN(1439)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1439)			bool _hx_tmp;
HXDLIN(1439)			if (hx::IsNotNull( ret )) {
HXLINE(1439)				_hx_tmp = ret->zpp_disp;
            			}
            			else {
HXLINE(1439)				_hx_tmp = false;
            			}
HXDLIN(1439)			if (_hx_tmp) {
HXLINE(1439)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1439)			{
HXLINE(1439)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(1439)				if (_this->_immutable) {
HXLINE(1439)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN(1439)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1439)					_this->_isimmutable();
            				}
            			}
HXDLIN(1439)			bool _hx_tmp1;
HXDLIN(1439)			bool _hx_tmp2;
HXDLIN(1439)			if (hx::IsNotNull( ret )) {
HXLINE(1439)				_hx_tmp2 = ret->zpp_disp;
            			}
            			else {
HXLINE(1439)				_hx_tmp2 = false;
            			}
HXDLIN(1439)			if (_hx_tmp2) {
HXLINE(1439)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN(1439)			{
HXLINE(1439)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(1439)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1439)					_this1->_validate();
            				}
            			}
HXDLIN(1439)			if ((ret->zpp_inner->x == 0)) {
HXLINE(1439)				bool _hx_tmp3;
HXDLIN(1439)				if (hx::IsNotNull( ret )) {
HXLINE(1439)					_hx_tmp3 = ret->zpp_disp;
            				}
            				else {
HXLINE(1439)					_hx_tmp3 = false;
            				}
HXDLIN(1439)				if (_hx_tmp3) {
HXLINE(1439)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1439)				{
HXLINE(1439)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(1439)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1439)						_this2->_validate();
            					}
            				}
HXDLIN(1439)				_hx_tmp1 = (ret->zpp_inner->y == 0);
            			}
            			else {
HXLINE(1439)				_hx_tmp1 = false;
            			}
HXDLIN(1439)			if (!(_hx_tmp1)) {
HXLINE(1439)				{
HXLINE(1439)					ret->zpp_inner->x = ( (Float)(0) );
HXDLIN(1439)					ret->zpp_inner->y = ( (Float)(0) );
            				}
HXDLIN(1439)				{
HXLINE(1439)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(1439)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(1439)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN(1439)		ret->zpp_inner->weak = false;
HXDLIN(1439)		this->wrap_normal = ret;
HXLINE(1440)		this->wrap_normal->zpp_inner->_immutable = true;
HXLINE(1441)		this->wrap_normal->zpp_inner->_inuse = true;
HXLINE(1442)		this->wrap_normal->zpp_inner->_validate = this->normal_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,getnormal,(void))

void ZPP_ColArbiter_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1521_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,alloc,(void))

void ZPP_ColArbiter_obj::free(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1532_free)
HXLINE(1549)		this->userdef_dyn_fric = false;
HXLINE(1550)		this->userdef_stat_fric = false;
HXLINE(1551)		this->userdef_restitution = false;
HXLINE(1552)		this->userdef_rfric = false;
HXLINE(1553)		this->_hx___ref_edge1 = (this->_hx___ref_edge2 = null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,free,(void))

 ::zpp_nape::dynamics::ZPP_Contact ZPP_ColArbiter_obj::injectContact(Float px,Float py,Float nx,Float ny,Float dist,int hash,hx::Null< bool >  __o_posOnly){
            		bool posOnly = __o_posOnly.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1558_injectContact)
HXLINE(1559)		 ::zpp_nape::dynamics::ZPP_Contact c = null();
HXLINE(1560)		{
HXLINE(1561)			 ::zpp_nape::dynamics::ZPP_Contact cx_ite = this->contacts->next;
HXLINE(1562)			while(hx::IsNotNull( cx_ite )){
HXLINE(1563)				 ::zpp_nape::dynamics::ZPP_Contact cur = cx_ite;
HXLINE(1564)				if ((hash == cur->hash)) {
HXLINE(1565)					c = cur;
HXLINE(1566)					goto _hx_goto_5;
            				}
HXLINE(1568)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_5:;
            		}
HXLINE(1571)		if (hx::IsNull( c )) {
HXLINE(1573)			if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE(1574)				c =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(1580)				c = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXLINE(1581)				::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c->next;
HXLINE(1582)				c->next = null();
            			}
HXLINE(1589)			 ::zpp_nape::dynamics::ZPP_IContact ci = c->inner;
HXLINE(1590)			ci->jnAcc = (ci->jtAcc = ( (Float)(0) ));
HXLINE(1591)			c->hash = hash;
HXLINE(1592)			c->fresh = true;
HXLINE(1593)			c->arbiter = hx::ObjectPtr<OBJ_>(this);
HXLINE(1594)			this->jrAcc = ( (Float)(0) );
HXLINE(1595)			{
HXLINE(1595)				 ::zpp_nape::dynamics::ZPP_Contact _this = this->contacts;
HXDLIN(1595)				c->_inuse = true;
HXDLIN(1595)				 ::zpp_nape::dynamics::ZPP_Contact temp = c;
HXDLIN(1595)				temp->next = _this->next;
HXDLIN(1595)				_this->next = temp;
HXDLIN(1595)				_this->modified = true;
HXDLIN(1595)				_this->length++;
            			}
HXLINE(1596)			this->innards->add(ci);
            		}
            		else {
HXLINE(1598)			c->fresh = false;
            		}
HXLINE(1599)		{
HXLINE(1600)			c->px = px;
HXLINE(1601)			c->py = py;
            		}
HXLINE(1619)		{
HXLINE(1620)			this->nx = nx;
HXLINE(1621)			this->ny = ny;
            		}
HXLINE(1639)		c->dist = dist;
HXLINE(1640)		c->stamp = this->stamp;
HXLINE(1641)		c->posOnly = posOnly;
HXLINE(1642)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC7(ZPP_ColArbiter_obj,injectContact,return )

void ZPP_ColArbiter_obj::assign( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,int id,int di){
            	HX_GC_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1646_assign)
HXLINE(1647)		{
HXLINE(1647)			this->b1 = s1->body;
HXDLIN(1647)			this->ws1 = s1;
HXDLIN(1647)			this->b2 = s2->body;
HXDLIN(1647)			this->ws2 = s2;
HXDLIN(1647)			this->id = id;
HXDLIN(1647)			this->di = di;
HXDLIN(1647)			{
HXLINE(1647)				 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this = this->b1->arbiters;
HXDLIN(1647)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;
HXDLIN(1647)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(1647)					ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1647)					ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1647)					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXDLIN(1647)					ret->next = null();
            				}
HXDLIN(1647)				ret->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1647)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp = ret;
HXDLIN(1647)				temp->next = _this->head;
HXDLIN(1647)				_this->head = temp;
HXDLIN(1647)				_this->modified = true;
HXDLIN(1647)				_this->length++;
            			}
HXDLIN(1647)			{
HXLINE(1647)				 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = this->b2->arbiters;
HXDLIN(1647)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;
HXDLIN(1647)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(1647)					ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1647)					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1647)					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
HXDLIN(1647)					ret1->next = null();
            				}
HXDLIN(1647)				ret1->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1647)				 ::zpp_nape::util::ZNPNode_ZPP_Arbiter temp1 = ret1;
HXDLIN(1647)				temp1->next = _this1->head;
HXDLIN(1647)				_this1->head = temp1;
HXDLIN(1647)				_this1->modified = true;
HXDLIN(1647)				_this1->length++;
            			}
HXDLIN(1647)			this->active = true;
HXDLIN(1647)			this->present = 0;
HXDLIN(1647)			this->cleared = false;
HXDLIN(1647)			this->sleeping = false;
HXDLIN(1647)			this->fresh = false;
HXDLIN(1647)			this->presentable = false;
            		}
HXLINE(1648)		this->s1 = s1;
HXLINE(1649)		this->s2 = s2;
HXLINE(1650)		{
HXLINE(1650)			if (!(this->userdef_restitution)) {
HXLINE(1650)				bool _hx_tmp;
HXDLIN(1650)				if (!((this->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))) {
HXLINE(1650)					_hx_tmp = (this->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY);
            				}
            				else {
HXLINE(1650)					_hx_tmp = true;
            				}
HXDLIN(1650)				if (_hx_tmp) {
HXLINE(1650)					this->restitution = ( (Float)(0) );
            				}
            				else {
HXLINE(1650)					bool _hx_tmp1;
HXDLIN(1650)					if (!((this->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))) {
HXLINE(1650)						_hx_tmp1 = (this->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY);
            					}
            					else {
HXLINE(1650)						_hx_tmp1 = true;
            					}
HXDLIN(1650)					if (_hx_tmp1) {
HXLINE(1650)						this->restitution = ( (Float)(1) );
            					}
            					else {
HXLINE(1650)						this->restitution = ((this->s1->material->elasticity + this->s2->material->elasticity) / ( (Float)(2) ));
            					}
            				}
HXDLIN(1650)				if ((this->restitution < 0)) {
HXLINE(1650)					this->restitution = ( (Float)(0) );
            				}
HXDLIN(1650)				if ((this->restitution > 1)) {
HXLINE(1650)					this->restitution = ( (Float)(1) );
            				}
            			}
HXDLIN(1650)			if (!(this->userdef_dyn_fric)) {
HXLINE(1650)				this->dyn_fric = ::Math_obj::sqrt((this->s1->material->dynamicFriction * this->s2->material->dynamicFriction));
            			}
HXDLIN(1650)			if (!(this->userdef_stat_fric)) {
HXLINE(1650)				this->stat_fric = ::Math_obj::sqrt((this->s1->material->staticFriction * this->s2->material->staticFriction));
            			}
HXDLIN(1650)			if (!(this->userdef_rfric)) {
HXLINE(1650)				this->rfric = ::Math_obj::sqrt((this->s1->material->rollingFriction * this->s2->material->rollingFriction));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_ColArbiter_obj,assign,(void))

void ZPP_ColArbiter_obj::calcProperties(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1654_calcProperties)
HXLINE(1655)		if (!(this->userdef_restitution)) {
HXLINE(1656)			bool _hx_tmp;
HXDLIN(1656)			if (!((this->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))) {
HXLINE(1656)				_hx_tmp = (this->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY);
            			}
            			else {
HXLINE(1656)				_hx_tmp = true;
            			}
HXDLIN(1656)			if (_hx_tmp) {
HXLINE(1656)				this->restitution = ( (Float)(0) );
            			}
            			else {
HXLINE(1657)				bool _hx_tmp1;
HXDLIN(1657)				if (!((this->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))) {
HXLINE(1657)					_hx_tmp1 = (this->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY);
            				}
            				else {
HXLINE(1657)					_hx_tmp1 = true;
            				}
HXDLIN(1657)				if (_hx_tmp1) {
HXLINE(1657)					this->restitution = ( (Float)(1) );
            				}
            				else {
HXLINE(1658)					this->restitution = ((this->s1->material->elasticity + this->s2->material->elasticity) / ( (Float)(2) ));
            				}
            			}
HXLINE(1659)			if ((this->restitution < 0)) {
HXLINE(1659)				this->restitution = ( (Float)(0) );
            			}
HXLINE(1660)			if ((this->restitution > 1)) {
HXLINE(1660)				this->restitution = ( (Float)(1) );
            			}
            		}
HXLINE(1662)		if (!(this->userdef_dyn_fric)) {
HXLINE(1663)			this->dyn_fric = ::Math_obj::sqrt((this->s1->material->dynamicFriction * this->s2->material->dynamicFriction));
            		}
HXLINE(1665)		if (!(this->userdef_stat_fric)) {
HXLINE(1666)			this->stat_fric = ::Math_obj::sqrt((this->s1->material->staticFriction * this->s2->material->staticFriction));
            		}
HXLINE(1668)		if (!(this->userdef_rfric)) {
HXLINE(1669)			this->rfric = ::Math_obj::sqrt((this->s1->material->rollingFriction * this->s2->material->rollingFriction));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,calcProperties,(void))

void ZPP_ColArbiter_obj::validate_props(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1675_validate_props)
HXDLIN(1675)		if (this->invalidated) {
HXLINE(1676)			this->invalidated = false;
HXLINE(1677)			{
HXLINE(1677)				if (!(this->userdef_restitution)) {
HXLINE(1677)					bool _hx_tmp;
HXDLIN(1677)					if (!((this->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))) {
HXLINE(1677)						_hx_tmp = (this->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY);
            					}
            					else {
HXLINE(1677)						_hx_tmp = true;
            					}
HXDLIN(1677)					if (_hx_tmp) {
HXLINE(1677)						this->restitution = ( (Float)(0) );
            					}
            					else {
HXLINE(1677)						bool _hx_tmp1;
HXDLIN(1677)						if (!((this->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))) {
HXLINE(1677)							_hx_tmp1 = (this->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY);
            						}
            						else {
HXLINE(1677)							_hx_tmp1 = true;
            						}
HXDLIN(1677)						if (_hx_tmp1) {
HXLINE(1677)							this->restitution = ( (Float)(1) );
            						}
            						else {
HXLINE(1677)							this->restitution = ((this->s1->material->elasticity + this->s2->material->elasticity) / ( (Float)(2) ));
            						}
            					}
HXDLIN(1677)					if ((this->restitution < 0)) {
HXLINE(1677)						this->restitution = ( (Float)(0) );
            					}
HXDLIN(1677)					if ((this->restitution > 1)) {
HXLINE(1677)						this->restitution = ( (Float)(1) );
            					}
            				}
HXDLIN(1677)				if (!(this->userdef_dyn_fric)) {
HXLINE(1677)					this->dyn_fric = ::Math_obj::sqrt((this->s1->material->dynamicFriction * this->s2->material->dynamicFriction));
            				}
HXDLIN(1677)				if (!(this->userdef_stat_fric)) {
HXLINE(1677)					this->stat_fric = ::Math_obj::sqrt((this->s1->material->staticFriction * this->s2->material->staticFriction));
            				}
HXDLIN(1677)				if (!(this->userdef_rfric)) {
HXLINE(1677)					this->rfric = ::Math_obj::sqrt((this->s1->material->rollingFriction * this->s2->material->rollingFriction));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,validate_props,(void))

void ZPP_ColArbiter_obj::retire(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1682_retire)
HXLINE(1683)		{
HXLINE(1683)			if (!(this->cleared)) {
HXLINE(1683)				{
HXLINE(1683)					 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this = this->b1->arbiters;
HXDLIN(1683)					{
HXLINE(1683)						 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();
HXDLIN(1683)						 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;
HXDLIN(1683)						bool ret = false;
HXDLIN(1683)						while(hx::IsNotNull( cur )){
HXLINE(1683)							if (hx::IsEq( cur->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1683)								{
HXLINE(1683)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old;
HXDLIN(1683)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;
HXDLIN(1683)									if (hx::IsNull( pre )) {
HXLINE(1683)										old = _this->head;
HXDLIN(1683)										ret1 = old->next;
HXDLIN(1683)										_this->head = ret1;
HXDLIN(1683)										if (hx::IsNull( _this->head )) {
HXLINE(1683)											_this->pushmod = true;
            										}
            									}
            									else {
HXLINE(1683)										old = pre->next;
HXDLIN(1683)										ret1 = old->next;
HXDLIN(1683)										pre->next = ret1;
HXDLIN(1683)										if (hx::IsNull( ret1 )) {
HXLINE(1683)											_this->pushmod = true;
            										}
            									}
HXDLIN(1683)									{
HXLINE(1683)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;
HXDLIN(1683)										o->elt = null();
HXDLIN(1683)										o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1683)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            									}
HXDLIN(1683)									_this->modified = true;
HXDLIN(1683)									_this->length--;
HXDLIN(1683)									_this->pushmod = true;
            								}
HXDLIN(1683)								ret = true;
HXDLIN(1683)								goto _hx_goto_10;
            							}
HXDLIN(1683)							pre = cur;
HXDLIN(1683)							cur = cur->next;
            						}
            						_hx_goto_10:;
            					}
            				}
HXDLIN(1683)				{
HXLINE(1683)					 ::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = this->b2->arbiters;
HXDLIN(1683)					{
HXLINE(1683)						 ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();
HXDLIN(1683)						 ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur1 = _this1->head;
HXDLIN(1683)						bool ret2 = false;
HXDLIN(1683)						while(hx::IsNotNull( cur1 )){
HXLINE(1683)							if (hx::IsEq( cur1->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1683)								{
HXLINE(1683)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter old1;
HXDLIN(1683)									 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ret3;
HXDLIN(1683)									if (hx::IsNull( pre1 )) {
HXLINE(1683)										old1 = _this1->head;
HXDLIN(1683)										ret3 = old1->next;
HXDLIN(1683)										_this1->head = ret3;
HXDLIN(1683)										if (hx::IsNull( _this1->head )) {
HXLINE(1683)											_this1->pushmod = true;
            										}
            									}
            									else {
HXLINE(1683)										old1 = pre1->next;
HXDLIN(1683)										ret3 = old1->next;
HXDLIN(1683)										pre1->next = ret3;
HXDLIN(1683)										if (hx::IsNull( ret3 )) {
HXLINE(1683)											_this1->pushmod = true;
            										}
            									}
HXDLIN(1683)									{
HXLINE(1683)										 ::zpp_nape::util::ZNPNode_ZPP_Arbiter o1 = old1;
HXDLIN(1683)										o1->elt = null();
HXDLIN(1683)										o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1683)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            									}
HXDLIN(1683)									_this1->modified = true;
HXDLIN(1683)									_this1->length--;
HXDLIN(1683)									_this1->pushmod = true;
            								}
HXDLIN(1683)								ret2 = true;
HXDLIN(1683)								goto _hx_goto_11;
            							}
HXDLIN(1683)							pre1 = cur1;
HXDLIN(1683)							cur1 = cur1->next;
            						}
            						_hx_goto_11:;
            					}
            				}
HXDLIN(1683)				if (hx::IsNotNull( this->pair )) {
HXLINE(1683)					this->pair->arb = null();
HXDLIN(1683)					this->pair = null();
            				}
            			}
HXDLIN(1683)			this->b1 = (this->b2 = null());
HXDLIN(1683)			this->active = false;
HXDLIN(1683)			this->intchange = false;
            		}
HXLINE(1684)		while(hx::IsNotNull( this->contacts->next )){
HXLINE(1685)			{
HXLINE(1686)				 ::zpp_nape::dynamics::ZPP_Contact _this2 = this->contacts;
HXDLIN(1686)				 ::zpp_nape::dynamics::ZPP_Contact ret4 = _this2->next;
HXDLIN(1686)				_this2->pop();
HXDLIN(1686)				 ::zpp_nape::dynamics::ZPP_Contact o2 = ret4;
HXLINE(1695)				o2->arbiter = null();
HXLINE(1696)				o2->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXLINE(1697)				::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o2;
            			}
HXLINE(1702)			{
HXLINE(1702)				 ::zpp_nape::dynamics::ZPP_IContact _this3 = this->innards;
HXDLIN(1702)				 ::zpp_nape::dynamics::ZPP_IContact ret5 = _this3->next;
HXDLIN(1702)				_this3->next = ret5->next;
HXDLIN(1702)				ret5->_inuse = false;
HXDLIN(1702)				if (hx::IsNull( _this3->next )) {
HXLINE(1702)					_this3->pushmod = true;
            				}
HXDLIN(1702)				_this3->modified = true;
HXDLIN(1702)				_this3->length--;
            			}
            		}
HXLINE(1704)		{
HXLINE(1705)			 ::zpp_nape::dynamics::ZPP_ColArbiter o3 = hx::ObjectPtr<OBJ_>(this);
HXLINE(1714)			{
HXLINE(1714)				o3->userdef_dyn_fric = false;
HXDLIN(1714)				o3->userdef_stat_fric = false;
HXDLIN(1714)				o3->userdef_restitution = false;
HXDLIN(1714)				o3->userdef_rfric = false;
HXDLIN(1714)				o3->_hx___ref_edge1 = (o3->_hx___ref_edge2 = null());
            			}
HXLINE(1715)			o3->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
HXLINE(1716)			::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o3;
            		}
HXLINE(1721)		this->pre_dt = ((Float)-1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,retire,(void))

void ZPP_ColArbiter_obj::makemutable(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1726_makemutable)
HXLINE(1727)		this->_hx_mutable = true;
HXLINE(1728)		if (hx::IsNotNull( this->wrap_normal )) {
HXLINE(1728)			this->wrap_normal->zpp_inner->_immutable = false;
            		}
HXLINE(1729)		if (hx::IsNotNull( this->wrap_contacts )) {
HXLINE(1729)			this->wrap_contacts->zpp_inner->immutable = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,makemutable,(void))

void ZPP_ColArbiter_obj::makeimmutable(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1733_makeimmutable)
HXLINE(1734)		this->_hx_mutable = false;
HXLINE(1735)		if (hx::IsNotNull( this->wrap_normal )) {
HXLINE(1735)			this->wrap_normal->zpp_inner->_immutable = true;
            		}
HXLINE(1736)		if (hx::IsNotNull( this->wrap_contacts )) {
HXLINE(1736)			this->wrap_contacts->zpp_inner->immutable = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,makeimmutable,(void))

bool ZPP_ColArbiter_obj::contacts_adder( ::nape::dynamics::Contact x){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1740_contacts_adder)
HXDLIN(1740)		HX_STACK_DO_THROW(HX_("Error: Cannot add new contacts, information required is far too specific and detailed :)",fb,36,a0,b5));
HXDLIN(1740)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_ColArbiter_obj,contacts_adder,return )

void ZPP_ColArbiter_obj::contacts_subber( ::nape::dynamics::Contact x){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1744_contacts_subber)
HXLINE(1745)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXLINE(1746)		 ::zpp_nape::dynamics::ZPP_IContact prei = null();
HXLINE(1747)		 ::zpp_nape::dynamics::ZPP_IContact cx_itei = this->innards->next;
HXLINE(1748)		{
HXLINE(1749)			 ::zpp_nape::dynamics::ZPP_Contact cx_ite = this->contacts->next;
HXLINE(1750)			while(hx::IsNotNull( cx_ite )){
HXLINE(1751)				 ::zpp_nape::dynamics::ZPP_Contact c = cx_ite;
HXLINE(1752)				{
HXLINE(1753)					if (hx::IsEq( c,x->zpp_inner )) {
HXLINE(1754)						this->contacts->erase(pre);
HXLINE(1755)						this->innards->erase(prei);
HXLINE(1756)						{
HXLINE(1757)							 ::zpp_nape::dynamics::ZPP_Contact o = c;
HXLINE(1766)							o->arbiter = null();
HXLINE(1767)							o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXLINE(1768)							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
            						}
HXLINE(1773)						goto _hx_goto_17;
            					}
HXLINE(1775)					pre = cx_ite;
HXLINE(1776)					prei = cx_itei;
HXLINE(1777)					cx_itei = cx_itei->next;
            				}
HXLINE(1779)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_17:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_ColArbiter_obj,contacts_subber,(void))

void ZPP_ColArbiter_obj::setupcontacts(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1783_setupcontacts)
HXLINE(1784)		this->wrap_contacts = ::zpp_nape::util::ZPP_ContactList_obj::get(this->contacts,true);
HXLINE(1785)		this->wrap_contacts->zpp_inner->immutable = !(this->_hx_mutable);
HXLINE(1786)		this->wrap_contacts->zpp_inner->adder = this->contacts_adder_dyn();
HXLINE(1787)		this->wrap_contacts->zpp_inner->dontremove = true;
HXLINE(1788)		this->wrap_contacts->zpp_inner->subber = this->contacts_subber_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,setupcontacts,(void))

bool ZPP_ColArbiter_obj::cleanupContacts(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1792_cleanupContacts)
HXLINE(1793)		bool fst = true;
HXLINE(1794)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXLINE(1795)		 ::zpp_nape::dynamics::ZPP_IContact prei = null();
HXLINE(1796)		 ::zpp_nape::dynamics::ZPP_IContact cx_itei = this->innards->next;
HXLINE(1797)		this->hc2 = false;
HXLINE(1798)		{
HXLINE(1799)			 ::zpp_nape::dynamics::ZPP_Contact cx_ite = this->contacts->next;
HXLINE(1800)			while(hx::IsNotNull( cx_ite )){
HXLINE(1801)				 ::zpp_nape::dynamics::ZPP_Contact c = cx_ite;
HXLINE(1802)				{
HXLINE(1803)					if (((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < this->stamp)) {
HXLINE(1804)						 ::zpp_nape::dynamics::ZPP_Contact _this = this->contacts;
HXDLIN(1804)						 ::zpp_nape::dynamics::ZPP_Contact old;
HXDLIN(1804)						 ::zpp_nape::dynamics::ZPP_Contact ret;
HXDLIN(1804)						if (hx::IsNull( pre )) {
HXLINE(1804)							old = _this->next;
HXDLIN(1804)							ret = old->next;
HXDLIN(1804)							_this->next = ret;
HXDLIN(1804)							if (hx::IsNull( _this->next )) {
HXLINE(1804)								_this->pushmod = true;
            							}
            						}
            						else {
HXLINE(1804)							old = pre->next;
HXDLIN(1804)							ret = old->next;
HXDLIN(1804)							pre->next = ret;
HXDLIN(1804)							if (hx::IsNull( ret )) {
HXLINE(1804)								_this->pushmod = true;
            							}
            						}
HXDLIN(1804)						old->_inuse = false;
HXDLIN(1804)						_this->modified = true;
HXDLIN(1804)						_this->length--;
HXDLIN(1804)						_this->pushmod = true;
HXDLIN(1804)						cx_ite = ret;
HXLINE(1805)						 ::zpp_nape::dynamics::ZPP_IContact _this1 = this->innards;
HXDLIN(1805)						 ::zpp_nape::dynamics::ZPP_IContact old1;
HXDLIN(1805)						 ::zpp_nape::dynamics::ZPP_IContact ret1;
HXDLIN(1805)						if (hx::IsNull( prei )) {
HXLINE(1805)							old1 = _this1->next;
HXDLIN(1805)							ret1 = old1->next;
HXDLIN(1805)							_this1->next = ret1;
HXDLIN(1805)							if (hx::IsNull( _this1->next )) {
HXLINE(1805)								_this1->pushmod = true;
            							}
            						}
            						else {
HXLINE(1805)							old1 = prei->next;
HXDLIN(1805)							ret1 = old1->next;
HXDLIN(1805)							prei->next = ret1;
HXDLIN(1805)							if (hx::IsNull( ret1 )) {
HXLINE(1805)								_this1->pushmod = true;
            							}
            						}
HXDLIN(1805)						old1->_inuse = false;
HXDLIN(1805)						_this1->modified = true;
HXDLIN(1805)						_this1->length--;
HXDLIN(1805)						_this1->pushmod = true;
HXDLIN(1805)						cx_itei = ret1;
HXLINE(1806)						{
HXLINE(1807)							 ::zpp_nape::dynamics::ZPP_Contact o = c;
HXLINE(1816)							o->arbiter = null();
HXLINE(1817)							o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXLINE(1818)							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
            						}
HXLINE(1823)						continue;
            					}
HXLINE(1825)					 ::zpp_nape::dynamics::ZPP_IContact ci = c->inner;
HXLINE(1826)					bool pact = c->active;
HXLINE(1827)					c->active = (c->stamp == this->stamp);
HXLINE(1828)					if (c->active) {
HXLINE(1829)						if (fst) {
HXLINE(1830)							fst = false;
HXLINE(1831)							this->c1 = ci;
HXLINE(1832)							this->oc1 = c;
            						}
            						else {
HXLINE(1843)							this->hc2 = true;
HXLINE(1844)							this->c2 = ci;
HXLINE(1845)							this->oc2 = c;
            						}
            					}
HXLINE(1848)					if ((pact != c->active)) {
HXLINE(1848)						this->contacts->modified = true;
            					}
HXLINE(1849)					pre = cx_ite;
HXLINE(1850)					prei = cx_itei;
HXLINE(1851)					cx_itei = cx_itei->next;
            				}
HXLINE(1853)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1856)		if (this->hc2) {
HXLINE(1857)			this->hpc2 = true;
HXLINE(1858)			if (this->oc1->posOnly) {
HXLINE(1859)				 ::zpp_nape::dynamics::ZPP_IContact tmp = this->c1;
HXLINE(1860)				this->c1 = this->c2;
HXLINE(1861)				this->c2 = tmp;
HXLINE(1862)				 ::zpp_nape::dynamics::ZPP_Contact tmp2 = this->oc1;
HXLINE(1863)				this->oc1 = this->oc2;
HXLINE(1864)				this->oc2 = tmp2;
HXLINE(1865)				this->hc2 = false;
            			}
            			else {
HXLINE(1867)				if (this->oc2->posOnly) {
HXLINE(1868)					this->hc2 = false;
            				}
            			}
HXLINE(1870)			if (this->oc1->posOnly) {
HXLINE(1871)				fst = true;
            			}
            		}
            		else {
HXLINE(1875)			this->hpc2 = false;
            		}
HXLINE(1877)		return fst;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,cleanupContacts,return )

bool ZPP_ColArbiter_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1882_preStep)
HXLINE(1883)		if (this->invalidated) {
HXLINE(1883)			this->invalidated = false;
HXDLIN(1883)			{
HXLINE(1883)				if (!(this->userdef_restitution)) {
HXLINE(1883)					bool _hx_tmp;
HXDLIN(1883)					if (!((this->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))) {
HXLINE(1883)						_hx_tmp = (this->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY);
            					}
            					else {
HXLINE(1883)						_hx_tmp = true;
            					}
HXDLIN(1883)					if (_hx_tmp) {
HXLINE(1883)						this->restitution = ( (Float)(0) );
            					}
            					else {
HXLINE(1883)						bool _hx_tmp1;
HXDLIN(1883)						if (!((this->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))) {
HXLINE(1883)							_hx_tmp1 = (this->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY);
            						}
            						else {
HXLINE(1883)							_hx_tmp1 = true;
            						}
HXDLIN(1883)						if (_hx_tmp1) {
HXLINE(1883)							this->restitution = ( (Float)(1) );
            						}
            						else {
HXLINE(1883)							this->restitution = ((this->s1->material->elasticity + this->s2->material->elasticity) / ( (Float)(2) ));
            						}
            					}
HXDLIN(1883)					if ((this->restitution < 0)) {
HXLINE(1883)						this->restitution = ( (Float)(0) );
            					}
HXDLIN(1883)					if ((this->restitution > 1)) {
HXLINE(1883)						this->restitution = ( (Float)(1) );
            					}
            				}
HXDLIN(1883)				if (!(this->userdef_dyn_fric)) {
HXLINE(1883)					this->dyn_fric = ::Math_obj::sqrt((this->s1->material->dynamicFriction * this->s2->material->dynamicFriction));
            				}
HXDLIN(1883)				if (!(this->userdef_stat_fric)) {
HXLINE(1883)					this->stat_fric = ::Math_obj::sqrt((this->s1->material->staticFriction * this->s2->material->staticFriction));
            				}
HXDLIN(1883)				if (!(this->userdef_rfric)) {
HXLINE(1883)					this->rfric = ::Math_obj::sqrt((this->s1->material->rollingFriction * this->s2->material->rollingFriction));
            				}
            			}
            		}
HXLINE(1886)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE(1886)			this->pre_dt = dt;
            		}
HXLINE(1887)		Float dtratio = (dt / this->pre_dt);
HXLINE(1888)		this->pre_dt = dt;
HXLINE(1889)		Float mass_sum = (this->b1->smass + this->b2->smass);
HXLINE(1890)		this->hc2 = false;
HXLINE(1891)		bool fst = true;
HXLINE(1892)		bool statType;
HXDLIN(1892)		if ((this->b1->type == 2)) {
HXLINE(1892)			statType = (this->b2->type != 2);
            		}
            		else {
HXLINE(1892)			statType = true;
            		}
HXLINE(1893)		Float bias;
HXDLIN(1893)		if (statType) {
HXLINE(1893)			if (this->continuous) {
HXLINE(1893)				bias = ::nape::Config_obj::contactContinuousStaticBiasCoef;
            			}
            			else {
HXLINE(1893)				bias = ::nape::Config_obj::contactStaticBiasCoef;
            			}
            		}
            		else {
HXLINE(1893)			if (this->continuous) {
HXLINE(1893)				bias = ::nape::Config_obj::contactContinuousBiasCoef;
            			}
            			else {
HXLINE(1893)				bias = ::nape::Config_obj::contactBiasCoef;
            			}
            		}
HXLINE(1894)		this->biasCoef = bias;
HXLINE(1895)		this->continuous = false;
HXLINE(1896)		 ::zpp_nape::dynamics::ZPP_Contact pre = null();
HXLINE(1897)		 ::zpp_nape::dynamics::ZPP_IContact prei = null();
HXLINE(1898)		 ::zpp_nape::dynamics::ZPP_IContact cx_itei = this->innards->next;
HXLINE(1899)		{
HXLINE(1900)			 ::zpp_nape::dynamics::ZPP_Contact cx_ite = this->contacts->next;
HXLINE(1901)			while(hx::IsNotNull( cx_ite )){
HXLINE(1902)				 ::zpp_nape::dynamics::ZPP_Contact c = cx_ite;
HXLINE(1903)				{
HXLINE(1904)					if (((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < this->stamp)) {
HXLINE(1905)						 ::zpp_nape::dynamics::ZPP_Contact _this = this->contacts;
HXDLIN(1905)						 ::zpp_nape::dynamics::ZPP_Contact old;
HXDLIN(1905)						 ::zpp_nape::dynamics::ZPP_Contact ret;
HXDLIN(1905)						if (hx::IsNull( pre )) {
HXLINE(1905)							old = _this->next;
HXDLIN(1905)							ret = old->next;
HXDLIN(1905)							_this->next = ret;
HXDLIN(1905)							if (hx::IsNull( _this->next )) {
HXLINE(1905)								_this->pushmod = true;
            							}
            						}
            						else {
HXLINE(1905)							old = pre->next;
HXDLIN(1905)							ret = old->next;
HXDLIN(1905)							pre->next = ret;
HXDLIN(1905)							if (hx::IsNull( ret )) {
HXLINE(1905)								_this->pushmod = true;
            							}
            						}
HXDLIN(1905)						old->_inuse = false;
HXDLIN(1905)						_this->modified = true;
HXDLIN(1905)						_this->length--;
HXDLIN(1905)						_this->pushmod = true;
HXDLIN(1905)						cx_ite = ret;
HXLINE(1906)						 ::zpp_nape::dynamics::ZPP_IContact _this1 = this->innards;
HXDLIN(1906)						 ::zpp_nape::dynamics::ZPP_IContact old1;
HXDLIN(1906)						 ::zpp_nape::dynamics::ZPP_IContact ret1;
HXDLIN(1906)						if (hx::IsNull( prei )) {
HXLINE(1906)							old1 = _this1->next;
HXDLIN(1906)							ret1 = old1->next;
HXDLIN(1906)							_this1->next = ret1;
HXDLIN(1906)							if (hx::IsNull( _this1->next )) {
HXLINE(1906)								_this1->pushmod = true;
            							}
            						}
            						else {
HXLINE(1906)							old1 = prei->next;
HXDLIN(1906)							ret1 = old1->next;
HXDLIN(1906)							prei->next = ret1;
HXDLIN(1906)							if (hx::IsNull( ret1 )) {
HXLINE(1906)								_this1->pushmod = true;
            							}
            						}
HXDLIN(1906)						old1->_inuse = false;
HXDLIN(1906)						_this1->modified = true;
HXDLIN(1906)						_this1->length--;
HXDLIN(1906)						_this1->pushmod = true;
HXDLIN(1906)						cx_itei = ret1;
HXLINE(1907)						{
HXLINE(1908)							 ::zpp_nape::dynamics::ZPP_Contact o = c;
HXLINE(1917)							o->arbiter = null();
HXLINE(1918)							o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXLINE(1919)							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
            						}
HXLINE(1924)						continue;
            					}
HXLINE(1928)					 ::zpp_nape::dynamics::ZPP_IContact ci = c->inner;
HXLINE(1929)					bool pact = c->active;
HXLINE(1930)					c->active = (c->stamp == this->stamp);
HXLINE(1931)					if (c->active) {
HXLINE(1934)						if (fst) {
HXLINE(1935)							fst = false;
HXLINE(1936)							this->c1 = ci;
HXLINE(1937)							this->oc1 = c;
            						}
            						else {
HXLINE(1940)							this->hc2 = true;
HXLINE(1941)							this->c2 = ci;
HXLINE(1942)							this->oc2 = c;
            						}
HXLINE(1944)						{
HXLINE(1945)							ci->r2x = (c->px - this->b2->posx);
HXLINE(1946)							ci->r2y = (c->py - this->b2->posy);
            						}
HXLINE(1948)						{
HXLINE(1949)							ci->r1x = (c->px - this->b1->posx);
HXLINE(1950)							ci->r1y = (c->py - this->b1->posy);
            						}
HXLINE(1952)						Float x = ((ci->r2x * this->nx) + (ci->r2y * this->ny));
HXDLIN(1952)						Float kt = (mass_sum + (this->b2->sinertia * (x * x)));
HXLINE(1953)						Float x1 = ((ci->r1x * this->nx) + (ci->r1y * this->ny));
HXDLIN(1953)						kt = (kt + (this->b1->sinertia * (x1 * x1)));
HXLINE(1954)						Float _hx_tmp2;
HXDLIN(1954)						if ((kt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1954)							_hx_tmp2 = ( (Float)(0) );
            						}
            						else {
HXLINE(1954)							_hx_tmp2 = (((Float)1.0) / kt);
            						}
HXDLIN(1954)						ci->tMass = _hx_tmp2;
HXLINE(1955)						Float x2 = ((this->ny * ci->r2x) - (this->nx * ci->r2y));
HXDLIN(1955)						Float nt = (mass_sum + (this->b2->sinertia * (x2 * x2)));
HXLINE(1956)						Float x3 = ((this->ny * ci->r1x) - (this->nx * ci->r1y));
HXDLIN(1956)						nt = (nt + (this->b1->sinertia * (x3 * x3)));
HXLINE(1957)						Float _hx_tmp3;
HXDLIN(1957)						if ((nt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1957)							_hx_tmp3 = ( (Float)(0) );
            						}
            						else {
HXLINE(1957)							_hx_tmp3 = (((Float)1.0) / nt);
            						}
HXDLIN(1957)						ci->nMass = _hx_tmp3;
HXLINE(1958)						Float vrx = ((Float)0.0);
HXLINE(1959)						Float vry = ((Float)0.0);
HXLINE(1960)						{
HXLINE(1961)							Float ang = (this->b2->angvel + this->b2->kinangvel);
HXLINE(1962)							vrx = ((this->b2->velx + this->b2->kinvelx) - (ci->r2y * ang));
HXLINE(1963)							vry = ((this->b2->vely + this->b2->kinvely) + (ci->r2x * ang));
HXLINE(1964)							ang = (this->b1->angvel + this->b1->kinangvel);
HXLINE(1965)							vrx = (vrx - ((this->b1->velx + this->b1->kinvelx) - (ci->r1y * ang)));
HXLINE(1966)							vry = (vry - ((this->b1->vely + this->b1->kinvely) + (ci->r1x * ang)));
            						}
HXLINE(1968)						Float vdot = ((this->nx * vrx) + (this->ny * vry));
HXLINE(1969)						c->elasticity = this->restitution;
HXLINE(1970)						ci->bounce = (vdot * c->elasticity);
HXLINE(1971)						if ((ci->bounce > -(::nape::Config_obj::elasticThreshold))) {
HXLINE(1972)							ci->bounce = ( (Float)(0) );
            						}
HXLINE(1974)						vdot = ((vry * this->nx) - (vrx * this->ny));
HXLINE(1975)						Float thr = ::nape::Config_obj::staticFrictionThreshold;
HXLINE(1976)						if (((vdot * vdot) > (thr * thr))) {
HXLINE(1977)							ci->friction = this->dyn_fric;
            						}
            						else {
HXLINE(1980)							ci->friction = this->stat_fric;
            						}
HXLINE(1982)						 ::zpp_nape::dynamics::ZPP_IContact ci1 = ci;
HXDLIN(1982)						ci1->jnAcc = (ci1->jnAcc * dtratio);
HXLINE(1983)						 ::zpp_nape::dynamics::ZPP_IContact ci2 = ci;
HXDLIN(1983)						ci2->jtAcc = (ci2->jtAcc * dtratio);
            					}
HXLINE(1985)					if ((pact != c->active)) {
HXLINE(1985)						this->contacts->modified = true;
            					}
HXLINE(1986)					pre = cx_ite;
HXLINE(1987)					prei = cx_itei;
HXLINE(1988)					cx_itei = cx_itei->next;
            				}
HXLINE(1990)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1993)		if (this->hc2) {
HXLINE(1994)			this->hpc2 = true;
HXLINE(1995)			if (this->oc1->posOnly) {
HXLINE(1996)				 ::zpp_nape::dynamics::ZPP_IContact tmp = this->c1;
HXLINE(1997)				this->c1 = this->c2;
HXLINE(1998)				this->c2 = tmp;
HXLINE(1999)				 ::zpp_nape::dynamics::ZPP_Contact tmp2 = this->oc1;
HXLINE(2000)				this->oc1 = this->oc2;
HXLINE(2001)				this->oc2 = tmp2;
HXLINE(2002)				this->hc2 = false;
            			}
            			else {
HXLINE(2004)				if (this->oc2->posOnly) {
HXLINE(2005)					this->hc2 = false;
            				}
            			}
HXLINE(2007)			if (this->oc1->posOnly) {
HXLINE(2008)				fst = true;
            			}
            		}
            		else {
HXLINE(2012)			this->hpc2 = false;
            		}
HXLINE(2014)		 ::zpp_nape::dynamics::ZPP_ColArbiter _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2014)		_hx_tmp4->jrAcc = (_hx_tmp4->jrAcc * dtratio);
HXLINE(2015)		if (!(fst)) {
HXLINE(2016)			this->rn1a = ((this->ny * this->c1->r1x) - (this->nx * this->c1->r1y));
HXLINE(2017)			this->rt1a = ((this->c1->r1x * this->nx) + (this->c1->r1y * this->ny));
HXLINE(2018)			this->rn1b = ((this->ny * this->c1->r2x) - (this->nx * this->c1->r2y));
HXLINE(2019)			this->rt1b = ((this->c1->r2x * this->nx) + (this->c1->r2y * this->ny));
HXLINE(2020)			this->k1x = ((this->b2->kinvelx - (this->c1->r2y * this->b2->kinangvel)) - (this->b1->kinvelx - (this->c1->r1y * this->b1->kinangvel)));
HXLINE(2021)			this->k1y = ((this->b2->kinvely + (this->c1->r2x * this->b2->kinangvel)) - (this->b1->kinvely + (this->c1->r1x * this->b1->kinangvel)));
            		}
HXLINE(2023)		if (this->hc2) {
HXLINE(2024)			this->rn2a = ((this->ny * this->c2->r1x) - (this->nx * this->c2->r1y));
HXLINE(2025)			this->rt2a = ((this->c2->r1x * this->nx) + (this->c2->r1y * this->ny));
HXLINE(2026)			this->rn2b = ((this->ny * this->c2->r2x) - (this->nx * this->c2->r2y));
HXLINE(2027)			this->rt2b = ((this->c2->r2x * this->nx) + (this->c2->r2y * this->ny));
HXLINE(2028)			this->k2x = ((this->b2->kinvelx - (this->c2->r2y * this->b2->kinangvel)) - (this->b1->kinvelx - (this->c2->r1y * this->b1->kinangvel)));
HXLINE(2029)			this->k2y = ((this->b2->kinvely + (this->c2->r2x * this->b2->kinangvel)) - (this->b1->kinvely + (this->c2->r1x * this->b1->kinangvel)));
HXLINE(2030)			{
HXLINE(2031)				this->kMassa = ((mass_sum + ((this->b1->sinertia * this->rn1a) * this->rn1a)) + ((this->b2->sinertia * this->rn1b) * this->rn1b));
HXLINE(2032)				this->kMassb = ((mass_sum + ((this->b1->sinertia * this->rn1a) * this->rn2a)) + ((this->b2->sinertia * this->rn1b) * this->rn2b));
HXLINE(2033)				this->kMassc = ((mass_sum + ((this->b1->sinertia * this->rn2a) * this->rn2a)) + ((this->b2->sinertia * this->rn2b) * this->rn2b));
            			}
HXLINE(2035)			Float norm = (((this->kMassa * this->kMassa) + ((( (Float)(2) ) * this->kMassb) * this->kMassb)) + (this->kMassc * this->kMassc));
HXLINE(2036)			if ((norm < (::nape::Config_obj::illConditionedThreshold * ((this->kMassa * this->kMassc) - (this->kMassb * this->kMassb))))) {
HXLINE(2037)				{
HXLINE(2038)					this->Ka = this->kMassa;
HXLINE(2039)					this->Kb = this->kMassb;
HXLINE(2040)					this->Kc = this->kMassc;
            				}
HXLINE(2042)				{
HXLINE(2043)					Float det = ((this->kMassa * this->kMassc) - (this->kMassb * this->kMassb));
HXLINE(2044)					if ((det != det)) {
HXLINE(2045)						this->kMassa = (this->kMassb = (this->kMassc = ( (Float)(0) )));
            					}
            					else {
HXLINE(2048)						if ((det == 0)) {
HXLINE(2049)							int flag = 0;
HXLINE(2050)							if ((this->kMassa != 0)) {
HXLINE(2050)								this->kMassa = (( (Float)(1) ) / this->kMassa);
            							}
            							else {
HXLINE(2052)								this->kMassa = ( (Float)(0) );
HXLINE(2053)								flag = (flag | 1);
            							}
HXLINE(2055)							if ((this->kMassc != 0)) {
HXLINE(2055)								this->kMassc = (( (Float)(1) ) / this->kMassc);
            							}
            							else {
HXLINE(2057)								this->kMassc = ( (Float)(0) );
HXLINE(2058)								flag = (flag | 2);
            							}
HXLINE(2060)							this->kMassb = ( (Float)(0) );
            						}
            						else {
HXLINE(2064)							det = (( (Float)(1) ) / det);
HXLINE(2065)							Float t = (this->kMassc * det);
HXLINE(2066)							this->kMassc = (this->kMassa * det);
HXLINE(2067)							this->kMassa = t;
HXLINE(2068)							 ::zpp_nape::dynamics::ZPP_ColArbiter _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2068)							_hx_tmp5->kMassb = (_hx_tmp5->kMassb * -(det));
            						}
            					}
            				}
            			}
            			else {
HXLINE(2074)				this->hc2 = false;
HXLINE(2075)				if ((this->oc2->dist < this->oc1->dist)) {
HXLINE(2076)					 ::zpp_nape::dynamics::ZPP_IContact t1 = this->c1;
HXLINE(2077)					this->c1 = this->c2;
HXLINE(2078)					this->c2 = t1;
            				}
HXLINE(2080)				this->oc2->active = false;
HXLINE(2081)				this->contacts->modified = true;
            			}
            		}
HXLINE(2084)		{
HXLINE(2085)			this->surfacex = this->b2->svelx;
HXLINE(2086)			this->surfacey = this->b2->svely;
            		}
HXLINE(2104)		{
HXLINE(2105)			Float t2 = ((Float)1.0);
HXLINE(2114)			 ::zpp_nape::dynamics::ZPP_ColArbiter _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2114)			_hx_tmp6->surfacex = (_hx_tmp6->surfacex + (this->b1->svelx * t2));
HXLINE(2115)			 ::zpp_nape::dynamics::ZPP_ColArbiter _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2115)			_hx_tmp7->surfacey = (_hx_tmp7->surfacey + (this->b1->svely * t2));
            		}
HXLINE(2117)		{
HXLINE(2118)			this->surfacex = -(this->surfacex);
HXLINE(2119)			this->surfacey = -(this->surfacey);
            		}
HXLINE(2121)		this->rMass = (this->b1->sinertia + this->b2->sinertia);
HXLINE(2122)		if ((this->rMass != 0)) {
HXLINE(2122)			this->rMass = (( (Float)(1) ) / this->rMass);
            		}
HXLINE(2123)		return fst;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_ColArbiter_obj,preStep,return )

void ZPP_ColArbiter_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_2127_warmStart)
HXLINE(2128)		{
HXLINE(2129)			Float jx = ((this->nx * this->c1->jnAcc) - (this->ny * this->c1->jtAcc));
HXLINE(2130)			Float jy = ((this->ny * this->c1->jnAcc) + (this->nx * this->c1->jtAcc));
HXLINE(2131)			{
HXLINE(2132)				Float t = this->b1->imass;
HXLINE(2141)				 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN(2141)				_hx_tmp->velx = (_hx_tmp->velx - (jx * t));
HXLINE(2142)				 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(2142)				_hx_tmp1->vely = (_hx_tmp1->vely - (jy * t));
            			}
HXLINE(2144)			 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(2144)			_hx_tmp2->angvel = (_hx_tmp2->angvel - (this->b1->iinertia * ((jy * this->c1->r1x) - (jx * this->c1->r1y))));
HXLINE(2145)			{
HXLINE(2146)				Float t1 = this->b2->imass;
HXLINE(2155)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(2155)				_hx_tmp3->velx = (_hx_tmp3->velx + (jx * t1));
HXLINE(2156)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(2156)				_hx_tmp4->vely = (_hx_tmp4->vely + (jy * t1));
            			}
HXLINE(2158)			 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(2158)			_hx_tmp5->angvel = (_hx_tmp5->angvel + (this->b2->iinertia * ((jy * this->c1->r2x) - (jx * this->c1->r2y))));
            		}
HXLINE(2160)		if (this->hc2) {
HXLINE(2161)			Float jx1 = ((this->nx * this->c2->jnAcc) - (this->ny * this->c2->jtAcc));
HXLINE(2162)			Float jy1 = ((this->ny * this->c2->jnAcc) + (this->nx * this->c2->jtAcc));
HXLINE(2163)			{
HXLINE(2164)				Float t2 = this->b1->imass;
HXLINE(2173)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(2173)				_hx_tmp6->velx = (_hx_tmp6->velx - (jx1 * t2));
HXLINE(2174)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b1;
HXDLIN(2174)				_hx_tmp7->vely = (_hx_tmp7->vely - (jy1 * t2));
            			}
HXLINE(2176)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(2176)			_hx_tmp8->angvel = (_hx_tmp8->angvel - (this->b1->iinertia * ((jy1 * this->c2->r1x) - (jx1 * this->c2->r1y))));
HXLINE(2177)			{
HXLINE(2178)				Float t3 = this->b2->imass;
HXLINE(2187)				 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(2187)				_hx_tmp9->velx = (_hx_tmp9->velx + (jx1 * t3));
HXLINE(2188)				 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b2;
HXDLIN(2188)				_hx_tmp10->vely = (_hx_tmp10->vely + (jy1 * t3));
            			}
HXLINE(2190)			 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b2;
HXDLIN(2190)			_hx_tmp11->angvel = (_hx_tmp11->angvel + (this->b2->iinertia * ((jy1 * this->c2->r2x) - (jx1 * this->c2->r2y))));
            		}
HXLINE(2192)		 ::zpp_nape::phys::ZPP_Body _hx_tmp12 = this->b2;
HXDLIN(2192)		_hx_tmp12->angvel = (_hx_tmp12->angvel + (this->jrAcc * this->b2->iinertia));
HXLINE(2193)		 ::zpp_nape::phys::ZPP_Body _hx_tmp13 = this->b1;
HXDLIN(2193)		_hx_tmp13->angvel = (_hx_tmp13->angvel - (this->jrAcc * this->b1->iinertia));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,warmStart,(void))

void ZPP_ColArbiter_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_2197_applyImpulseVel)
HXLINE(2204)		Float v1x = (((this->k1x + this->b2->velx) - (this->c1->r2y * this->b2->angvel)) - (this->b1->velx - (this->c1->r1y * this->b1->angvel)));
HXLINE(2205)		Float v1y = (((this->k1y + this->b2->vely) + (this->c1->r2x * this->b2->angvel)) - (this->b1->vely + (this->c1->r1x * this->b1->angvel)));
HXLINE(2200)		Float j = ((((v1y * this->nx) - (v1x * this->ny)) + this->surfacex) * this->c1->tMass);
HXLINE(2201)		Float jMax = (this->c1->friction * this->c1->jnAcc);
HXLINE(2202)		Float jOld = this->c1->jtAcc;
HXLINE(2203)		Float cjAcc = (jOld - j);
HXLINE(2210)		if ((cjAcc > jMax)) {
HXLINE(2210)			cjAcc = jMax;
            		}
            		else {
HXLINE(2210)			if ((cjAcc < -(jMax))) {
HXLINE(2210)				cjAcc = -(jMax);
            			}
            		}
HXLINE(2211)		j = (cjAcc - jOld);
HXLINE(2212)		this->c1->jtAcc = cjAcc;
HXLINE(2198)		Float jx = (-(this->ny) * j);
HXLINE(2199)		Float jy = (this->nx * j);
HXLINE(2215)		 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b2;
HXDLIN(2215)		_hx_tmp->velx = (_hx_tmp->velx + (jx * this->b2->imass));
HXLINE(2216)		 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b2;
HXDLIN(2216)		_hx_tmp1->vely = (_hx_tmp1->vely + (jy * this->b2->imass));
HXLINE(2217)		 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(2217)		_hx_tmp2->velx = (_hx_tmp2->velx - (jx * this->b1->imass));
HXLINE(2218)		 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN(2218)		_hx_tmp3->vely = (_hx_tmp3->vely - (jy * this->b1->imass));
HXLINE(2219)		 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(2219)		_hx_tmp4->angvel = (_hx_tmp4->angvel + ((this->rt1b * j) * this->b2->iinertia));
HXLINE(2220)		 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(2220)		_hx_tmp5->angvel = (_hx_tmp5->angvel - ((this->rt1a * j) * this->b1->iinertia));
HXLINE(2221)		if (this->hc2) {
HXLINE(2222)			Float v2x = (((this->k2x + this->b2->velx) - (this->c2->r2y * this->b2->angvel)) - (this->b1->velx - (this->c2->r1y * this->b1->angvel)));
HXLINE(2223)			Float v2y = (((this->k2y + this->b2->vely) + (this->c2->r2x * this->b2->angvel)) - (this->b1->vely + (this->c2->r1x * this->b1->angvel)));
HXLINE(2224)			j = ((((v2y * this->nx) - (v2x * this->ny)) + this->surfacex) * this->c2->tMass);
HXLINE(2225)			jMax = (this->c2->friction * this->c2->jnAcc);
HXLINE(2226)			jOld = this->c2->jtAcc;
HXLINE(2227)			cjAcc = (jOld - j);
HXLINE(2228)			if ((cjAcc > jMax)) {
HXLINE(2228)				cjAcc = jMax;
            			}
            			else {
HXLINE(2228)				if ((cjAcc < -(jMax))) {
HXLINE(2228)					cjAcc = -(jMax);
            				}
            			}
HXLINE(2229)			j = (cjAcc - jOld);
HXLINE(2230)			this->c2->jtAcc = cjAcc;
HXLINE(2231)			jx = (-(this->ny) * j);
HXLINE(2232)			jy = (this->nx * j);
HXLINE(2233)			 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN(2233)			_hx_tmp6->velx = (_hx_tmp6->velx + (jx * this->b2->imass));
HXLINE(2234)			 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(2234)			_hx_tmp7->vely = (_hx_tmp7->vely + (jy * this->b2->imass));
HXLINE(2235)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(2235)			_hx_tmp8->velx = (_hx_tmp8->velx - (jx * this->b1->imass));
HXLINE(2236)			 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b1;
HXDLIN(2236)			_hx_tmp9->vely = (_hx_tmp9->vely - (jy * this->b1->imass));
HXLINE(2237)			 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b2;
HXDLIN(2237)			_hx_tmp10->angvel = (_hx_tmp10->angvel + ((this->rt2b * j) * this->b2->iinertia));
HXLINE(2238)			 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b1;
HXDLIN(2238)			_hx_tmp11->angvel = (_hx_tmp11->angvel - ((this->rt2a * j) * this->b1->iinertia));
HXLINE(2239)			v1x = (((this->k1x + this->b2->velx) - (this->c1->r2y * this->b2->angvel)) - (this->b1->velx - (this->c1->r1y * this->b1->angvel)));
HXLINE(2240)			v1y = (((this->k1y + this->b2->vely) + (this->c1->r2x * this->b2->angvel)) - (this->b1->vely + (this->c1->r1x * this->b1->angvel)));
HXLINE(2241)			v2x = (((this->k2x + this->b2->velx) - (this->c2->r2y * this->b2->angvel)) - (this->b1->velx - (this->c2->r1y * this->b1->angvel)));
HXLINE(2242)			v2y = (((this->k2y + this->b2->vely) + (this->c2->r2x * this->b2->angvel)) - (this->b1->vely + (this->c2->r1x * this->b1->angvel)));
HXLINE(2243)			Float ax = this->c1->jnAcc;
HXLINE(2244)			Float ay = this->c2->jnAcc;
HXLINE(2261)			Float jnx = (((((v1x * this->nx) + (v1y * this->ny)) + this->surfacey) + this->c1->bounce) - ((this->Ka * ax) + (this->Kb * ay)));
HXLINE(2262)			Float jny = (((((v2x * this->nx) + (v2y * this->ny)) + this->surfacey) + this->c2->bounce) - ((this->Kb * ax) + (this->Kc * ay)));
HXLINE(2263)			Float xx = -(((this->kMassa * jnx) + (this->kMassb * jny)));
HXLINE(2264)			Float xy = -(((this->kMassb * jnx) + (this->kMassc * jny)));
HXLINE(2265)			bool _hx_tmp12;
HXDLIN(2265)			if ((xx >= 0)) {
HXLINE(2265)				_hx_tmp12 = (xy >= 0);
            			}
            			else {
HXLINE(2265)				_hx_tmp12 = false;
            			}
HXDLIN(2265)			if (_hx_tmp12) {
HXLINE(2266)				{
HXLINE(2267)					jnx = (xx - ax);
HXLINE(2268)					jny = (xy - ay);
            				}
HXLINE(2270)				this->c1->jnAcc = xx;
HXLINE(2271)				this->c2->jnAcc = xy;
            			}
            			else {
HXLINE(2274)				xx = (-(this->c1->nMass) * jnx);
HXLINE(2275)				bool _hx_tmp13;
HXDLIN(2275)				if ((xx >= 0)) {
HXLINE(2275)					_hx_tmp13 = (((this->Kb * xx) + jny) >= 0);
            				}
            				else {
HXLINE(2275)					_hx_tmp13 = false;
            				}
HXDLIN(2275)				if (_hx_tmp13) {
HXLINE(2276)					jnx = (xx - ax);
HXLINE(2277)					jny = -(ay);
HXLINE(2278)					this->c1->jnAcc = xx;
HXLINE(2279)					this->c2->jnAcc = ( (Float)(0) );
            				}
            				else {
HXLINE(2282)					xy = (-(this->c2->nMass) * jny);
HXLINE(2283)					bool _hx_tmp14;
HXDLIN(2283)					if ((xy >= 0)) {
HXLINE(2283)						_hx_tmp14 = (((this->Kb * xy) + jnx) >= 0);
            					}
            					else {
HXLINE(2283)						_hx_tmp14 = false;
            					}
HXDLIN(2283)					if (_hx_tmp14) {
HXLINE(2284)						jnx = -(ax);
HXLINE(2285)						jny = (xy - ay);
HXLINE(2286)						this->c1->jnAcc = ( (Float)(0) );
HXLINE(2287)						this->c2->jnAcc = xy;
            					}
            					else {
HXLINE(2289)						bool _hx_tmp15;
HXDLIN(2289)						if ((jnx >= 0)) {
HXLINE(2289)							_hx_tmp15 = (jny >= 0);
            						}
            						else {
HXLINE(2289)							_hx_tmp15 = false;
            						}
HXDLIN(2289)						if (_hx_tmp15) {
HXLINE(2290)							jnx = -(ax);
HXLINE(2291)							jny = -(ay);
HXLINE(2292)							this->c1->jnAcc = (this->c2->jnAcc = ( (Float)(0) ));
            						}
            						else {
HXLINE(2295)							jnx = ( (Float)(0) );
HXLINE(2296)							jny = ( (Float)(0) );
            						}
            					}
            				}
            			}
HXLINE(2300)			j = (jnx + jny);
HXLINE(2301)			jx = (this->nx * j);
HXLINE(2302)			jy = (this->ny * j);
HXLINE(2303)			 ::zpp_nape::phys::ZPP_Body _hx_tmp16 = this->b2;
HXDLIN(2303)			_hx_tmp16->velx = (_hx_tmp16->velx + (jx * this->b2->imass));
HXLINE(2304)			 ::zpp_nape::phys::ZPP_Body _hx_tmp17 = this->b2;
HXDLIN(2304)			_hx_tmp17->vely = (_hx_tmp17->vely + (jy * this->b2->imass));
HXLINE(2305)			 ::zpp_nape::phys::ZPP_Body _hx_tmp18 = this->b1;
HXDLIN(2305)			_hx_tmp18->velx = (_hx_tmp18->velx - (jx * this->b1->imass));
HXLINE(2306)			 ::zpp_nape::phys::ZPP_Body _hx_tmp19 = this->b1;
HXDLIN(2306)			_hx_tmp19->vely = (_hx_tmp19->vely - (jy * this->b1->imass));
HXLINE(2307)			 ::zpp_nape::phys::ZPP_Body _hx_tmp20 = this->b2;
HXDLIN(2307)			_hx_tmp20->angvel = (_hx_tmp20->angvel + (((this->rn1b * jnx) + (this->rn2b * jny)) * this->b2->iinertia));
HXLINE(2308)			 ::zpp_nape::phys::ZPP_Body _hx_tmp21 = this->b1;
HXDLIN(2308)			_hx_tmp21->angvel = (_hx_tmp21->angvel - (((this->rn1a * jnx) + (this->rn2a * jny)) * this->b1->iinertia));
            		}
            		else {
HXLINE(2311)			if ((this->radius != ((Float)0.0))) {
HXLINE(2312)				Float dw = (this->b2->angvel - this->b1->angvel);
HXLINE(2313)				j = (dw * this->rMass);
HXLINE(2314)				jMax = (this->rfric * this->c1->jnAcc);
HXLINE(2315)				jOld = this->jrAcc;
HXLINE(2316)				 ::zpp_nape::dynamics::ZPP_ColArbiter _hx_tmp22 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2316)				_hx_tmp22->jrAcc = (_hx_tmp22->jrAcc - j);
HXLINE(2317)				if ((this->jrAcc > jMax)) {
HXLINE(2317)					this->jrAcc = jMax;
            				}
            				else {
HXLINE(2317)					if ((this->jrAcc < -(jMax))) {
HXLINE(2317)						this->jrAcc = -(jMax);
            					}
            				}
HXLINE(2318)				j = (this->jrAcc - jOld);
HXLINE(2319)				 ::zpp_nape::phys::ZPP_Body _hx_tmp23 = this->b2;
HXDLIN(2319)				_hx_tmp23->angvel = (_hx_tmp23->angvel + (j * this->b2->iinertia));
HXLINE(2320)				 ::zpp_nape::phys::ZPP_Body _hx_tmp24 = this->b1;
HXDLIN(2320)				_hx_tmp24->angvel = (_hx_tmp24->angvel - (j * this->b1->iinertia));
            			}
HXLINE(2322)			v1x = (((this->k1x + this->b2->velx) - (this->c1->r2y * this->b2->angvel)) - (this->b1->velx - (this->c1->r1y * this->b1->angvel)));
HXLINE(2323)			v1y = (((this->k1y + this->b2->vely) + (this->c1->r2x * this->b2->angvel)) - (this->b1->vely + (this->c1->r1x * this->b1->angvel)));
HXLINE(2324)			j = (((this->c1->bounce + ((this->nx * v1x) + (this->ny * v1y))) + this->surfacey) * this->c1->nMass);
HXLINE(2325)			jOld = this->c1->jnAcc;
HXLINE(2326)			cjAcc = (jOld - j);
HXLINE(2327)			if ((cjAcc < ((Float)0.0))) {
HXLINE(2327)				cjAcc = ((Float)0.0);
            			}
HXLINE(2328)			j = (cjAcc - jOld);
HXLINE(2329)			this->c1->jnAcc = cjAcc;
HXLINE(2330)			jx = (this->nx * j);
HXLINE(2331)			jy = (this->ny * j);
HXLINE(2332)			 ::zpp_nape::phys::ZPP_Body _hx_tmp25 = this->b2;
HXDLIN(2332)			_hx_tmp25->velx = (_hx_tmp25->velx + (jx * this->b2->imass));
HXLINE(2333)			 ::zpp_nape::phys::ZPP_Body _hx_tmp26 = this->b2;
HXDLIN(2333)			_hx_tmp26->vely = (_hx_tmp26->vely + (jy * this->b2->imass));
HXLINE(2334)			 ::zpp_nape::phys::ZPP_Body _hx_tmp27 = this->b1;
HXDLIN(2334)			_hx_tmp27->velx = (_hx_tmp27->velx - (jx * this->b1->imass));
HXLINE(2335)			 ::zpp_nape::phys::ZPP_Body _hx_tmp28 = this->b1;
HXDLIN(2335)			_hx_tmp28->vely = (_hx_tmp28->vely - (jy * this->b1->imass));
HXLINE(2336)			 ::zpp_nape::phys::ZPP_Body _hx_tmp29 = this->b2;
HXDLIN(2336)			_hx_tmp29->angvel = (_hx_tmp29->angvel + ((this->rn1b * j) * this->b2->iinertia));
HXLINE(2337)			 ::zpp_nape::phys::ZPP_Body _hx_tmp30 = this->b1;
HXDLIN(2337)			_hx_tmp30->angvel = (_hx_tmp30->angvel - ((this->rn1a * j) * this->b1->iinertia));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,applyImpulseVel,(void))

void ZPP_ColArbiter_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_2343_applyImpulsePos)
HXDLIN(2343)		if ((this->ptype == 2)) {
HXLINE(2344)			 ::zpp_nape::dynamics::ZPP_IContact c = this->c1;
HXLINE(2345)			Float dx = ((Float)0.0);
HXLINE(2346)			Float dy = ((Float)0.0);
HXLINE(2347)			Float r2x = ((Float)0.0);
HXLINE(2348)			Float r2y = ((Float)0.0);
HXLINE(2349)			{
HXLINE(2350)				r2x = ((this->b2->axisy * c->lr2x) - (this->b2->axisx * c->lr2y));
HXLINE(2351)				r2y = ((c->lr2x * this->b2->axisx) + (c->lr2y * this->b2->axisy));
            			}
HXLINE(2353)			{
HXLINE(2354)				Float t = ((Float)1.0);
HXLINE(2363)				r2x = (r2x + (this->b2->posx * t));
HXLINE(2364)				r2y = (r2y + (this->b2->posy * t));
            			}
HXLINE(2366)			Float r1x = ((Float)0.0);
HXLINE(2367)			Float r1y = ((Float)0.0);
HXLINE(2368)			{
HXLINE(2369)				r1x = ((this->b1->axisy * c->lr1x) - (this->b1->axisx * c->lr1y));
HXLINE(2370)				r1y = ((c->lr1x * this->b1->axisx) + (c->lr1y * this->b1->axisy));
            			}
HXLINE(2372)			{
HXLINE(2373)				Float t1 = ((Float)1.0);
HXLINE(2382)				r1x = (r1x + (this->b1->posx * t1));
HXLINE(2383)				r1y = (r1y + (this->b1->posy * t1));
            			}
HXLINE(2385)			Float dx1 = ((Float)0.0);
HXLINE(2386)			Float dy1 = ((Float)0.0);
HXLINE(2387)			{
HXLINE(2388)				dx1 = (r2x - r1x);
HXLINE(2389)				dy1 = (r2y - r1y);
            			}
HXLINE(2391)			Float dl = ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));
HXLINE(2392)			Float r = (this->radius - ::nape::Config_obj::collisionSlop);
HXLINE(2393)			Float err = (dl - r);
HXLINE(2394)			if ((((dx1 * this->nx) + (dy1 * this->ny)) < 0)) {
HXLINE(2395)				{
HXLINE(2396)					dx1 = -(dx1);
HXLINE(2397)					dy1 = -(dy1);
            				}
HXLINE(2399)				err = (err - this->radius);
            			}
HXLINE(2401)			if ((err < 0)) {
HXLINE(2402)				if ((dl < ::nape::Config_obj::epsilon)) {
HXLINE(2403)					if ((this->b1->smass != ((Float)0.0))) {
HXLINE(2403)						 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN(2403)						_hx_tmp->posx = (_hx_tmp->posx + (::nape::Config_obj::epsilon * ( (Float)(10) )));
            					}
            					else {
HXLINE(2404)						 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b2;
HXDLIN(2404)						_hx_tmp1->posx = (_hx_tmp1->posx + (::nape::Config_obj::epsilon * ( (Float)(10) )));
            					}
            				}
            				else {
HXLINE(2407)					{
HXLINE(2408)						Float t2 = (((Float)1.0) / dl);
HXLINE(2417)						dx1 = (dx1 * t2);
HXLINE(2418)						dy1 = (dy1 * t2);
            					}
HXLINE(2420)					Float px = (((Float)0.5) * (r1x + r2x));
HXLINE(2421)					Float py = (((Float)0.5) * (r1y + r2y));
HXLINE(2438)					Float pen = (dl - r);
HXLINE(2439)					{
HXLINE(2440)						r1x = (px - this->b1->posx);
HXLINE(2441)						r1y = (py - this->b1->posy);
            					}
HXLINE(2443)					{
HXLINE(2444)						r2x = (px - this->b2->posx);
HXLINE(2445)						r2y = (py - this->b2->posy);
            					}
HXLINE(2447)					Float rn1 = ((dy1 * r1x) - (dx1 * r1y));
HXLINE(2448)					Float rn2 = ((dy1 * r2x) - (dx1 * r2y));
HXLINE(2449)					Float K = (((this->b2->smass + ((rn2 * rn2) * this->b2->sinertia)) + this->b1->smass) + ((rn1 * rn1) * this->b1->sinertia));
HXLINE(2450)					if ((K != 0)) {
HXLINE(2451)						Float jn = ((-(this->biasCoef) * pen) / K);
HXLINE(2452)						Float Jx = ((Float)0.0);
HXLINE(2453)						Float Jy = ((Float)0.0);
HXLINE(2454)						{
HXLINE(2455)							Float t3 = jn;
HXLINE(2464)							Jx = (dx1 * t3);
HXLINE(2465)							Jy = (dy1 * t3);
            						}
HXLINE(2467)						{
HXLINE(2468)							Float t4 = this->b1->imass;
HXLINE(2477)							 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(2477)							_hx_tmp2->posx = (_hx_tmp2->posx - (Jx * t4));
HXLINE(2478)							 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN(2478)							_hx_tmp3->posy = (_hx_tmp3->posy - (Jy * t4));
            						}
HXLINE(2480)						{
HXLINE(2480)							 ::zpp_nape::phys::ZPP_Body _this = this->b1;
HXDLIN(2480)							Float dr = ((-(rn1) * this->b1->iinertia) * jn);
HXDLIN(2480)							 ::zpp_nape::phys::ZPP_Body _this1 = _this;
HXDLIN(2480)							_this1->rot = (_this1->rot + dr);
HXDLIN(2480)							if (((dr * dr) > ((Float)0.0001))) {
HXLINE(2480)								_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(2480)								_this->axisy = ::Math_obj::cos(_this->rot);
            							}
            							else {
HXLINE(2480)								Float d2 = (dr * dr);
HXDLIN(2480)								Float p = (( (Float)(1) ) - (((Float)0.5) * d2));
HXDLIN(2480)								Float m = (( (Float)(1) ) - ((d2 * d2) / ( (Float)(8) )));
HXDLIN(2480)								Float nx = (((p * _this->axisx) + (dr * _this->axisy)) * m);
HXDLIN(2480)								_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m);
HXDLIN(2480)								_this->axisx = nx;
            							}
            						}
HXLINE(2481)						{
HXLINE(2482)							Float t5 = this->b2->imass;
HXLINE(2491)							 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(2491)							_hx_tmp4->posx = (_hx_tmp4->posx + (Jx * t5));
HXLINE(2492)							 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(2492)							_hx_tmp5->posy = (_hx_tmp5->posy + (Jy * t5));
            						}
HXLINE(2494)						{
HXLINE(2494)							 ::zpp_nape::phys::ZPP_Body _this2 = this->b2;
HXDLIN(2494)							Float dr1 = ((rn2 * this->b2->iinertia) * jn);
HXDLIN(2494)							 ::zpp_nape::phys::ZPP_Body _this3 = _this2;
HXDLIN(2494)							_this3->rot = (_this3->rot + dr1);
HXDLIN(2494)							if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(2494)								_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(2494)								_this2->axisy = ::Math_obj::cos(_this2->rot);
            							}
            							else {
HXLINE(2494)								Float d21 = (dr1 * dr1);
HXDLIN(2494)								Float p1 = (( (Float)(1) ) - (((Float)0.5) * d21));
HXDLIN(2494)								Float m1 = (( (Float)(1) ) - ((d21 * d21) / ( (Float)(8) )));
HXDLIN(2494)								Float nx1 = (((p1 * _this2->axisx) + (dr1 * _this2->axisy)) * m1);
HXDLIN(2494)								_this2->axisy = (((p1 * _this2->axisy) - (dr1 * _this2->axisx)) * m1);
HXDLIN(2494)								_this2->axisx = nx1;
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(2500)			Float gnormx = ((Float)0.0);
HXLINE(2501)			Float gnormy = ((Float)0.0);
HXLINE(2502)			Float gproj;
HXLINE(2503)			Float clip1x = ((Float)0.0);
HXLINE(2504)			Float clip1y = ((Float)0.0);
HXLINE(2505)			Float clip2x = ( (Float)(0) );
HXLINE(2506)			Float clip2y = ( (Float)(0) );
HXLINE(2523)			if ((this->ptype == 0)) {
HXLINE(2524)				{
HXLINE(2525)					gnormx = ((this->b1->axisy * this->lnormx) - (this->b1->axisx * this->lnormy));
HXLINE(2526)					gnormy = ((this->lnormx * this->b1->axisx) + (this->lnormy * this->b1->axisy));
            				}
HXLINE(2528)				gproj = (this->lproj + ((gnormx * this->b1->posx) + (gnormy * this->b1->posy)));
HXLINE(2529)				{
HXLINE(2530)					clip1x = ((this->b2->axisy * this->c1->lr1x) - (this->b2->axisx * this->c1->lr1y));
HXLINE(2531)					clip1y = ((this->c1->lr1x * this->b2->axisx) + (this->c1->lr1y * this->b2->axisy));
            				}
HXLINE(2533)				{
HXLINE(2534)					Float t6 = ((Float)1.0);
HXLINE(2543)					clip1x = (clip1x + (this->b2->posx * t6));
HXLINE(2544)					clip1y = (clip1y + (this->b2->posy * t6));
            				}
HXLINE(2546)				if (this->hpc2) {
HXLINE(2547)					{
HXLINE(2548)						clip2x = ((this->b2->axisy * this->c2->lr1x) - (this->b2->axisx * this->c2->lr1y));
HXLINE(2549)						clip2y = ((this->c2->lr1x * this->b2->axisx) + (this->c2->lr1y * this->b2->axisy));
            					}
HXLINE(2551)					{
HXLINE(2552)						Float t7 = ((Float)1.0);
HXLINE(2561)						clip2x = (clip2x + (this->b2->posx * t7));
HXLINE(2562)						clip2y = (clip2y + (this->b2->posy * t7));
            					}
            				}
            			}
            			else {
HXLINE(2567)				{
HXLINE(2568)					gnormx = ((this->b2->axisy * this->lnormx) - (this->b2->axisx * this->lnormy));
HXLINE(2569)					gnormy = ((this->lnormx * this->b2->axisx) + (this->lnormy * this->b2->axisy));
            				}
HXLINE(2571)				gproj = (this->lproj + ((gnormx * this->b2->posx) + (gnormy * this->b2->posy)));
HXLINE(2572)				{
HXLINE(2573)					clip1x = ((this->b1->axisy * this->c1->lr1x) - (this->b1->axisx * this->c1->lr1y));
HXLINE(2574)					clip1y = ((this->c1->lr1x * this->b1->axisx) + (this->c1->lr1y * this->b1->axisy));
            				}
HXLINE(2576)				{
HXLINE(2577)					Float t8 = ((Float)1.0);
HXLINE(2586)					clip1x = (clip1x + (this->b1->posx * t8));
HXLINE(2587)					clip1y = (clip1y + (this->b1->posy * t8));
            				}
HXLINE(2589)				if (this->hpc2) {
HXLINE(2590)					{
HXLINE(2591)						clip2x = ((this->b1->axisy * this->c2->lr1x) - (this->b1->axisx * this->c2->lr1y));
HXLINE(2592)						clip2y = ((this->c2->lr1x * this->b1->axisx) + (this->c2->lr1y * this->b1->axisy));
            					}
HXLINE(2594)					{
HXLINE(2595)						Float t9 = ((Float)1.0);
HXLINE(2604)						clip2x = (clip2x + (this->b1->posx * t9));
HXLINE(2605)						clip2y = (clip2y + (this->b1->posy * t9));
            					}
            				}
            			}
HXLINE(2609)			Float err1 = ((((clip1x * gnormx) + (clip1y * gnormy)) - gproj) - this->radius);
HXLINE(2610)			err1 = (err1 + ::nape::Config_obj::collisionSlop);
HXLINE(2611)			Float err2 = ((Float)0.0);
HXLINE(2612)			if (this->hpc2) {
HXLINE(2613)				err2 = ((((clip2x * gnormx) + (clip2y * gnormy)) - gproj) - this->radius);
HXLINE(2614)				err2 = (err2 + ::nape::Config_obj::collisionSlop);
            			}
HXLINE(2616)			bool _hx_tmp6;
HXDLIN(2616)			if (!((err1 < 0))) {
HXLINE(2616)				_hx_tmp6 = (err2 < 0);
            			}
            			else {
HXLINE(2616)				_hx_tmp6 = true;
            			}
HXDLIN(2616)			if (_hx_tmp6) {
HXLINE(2617)				if (this->rev) {
HXLINE(2618)					gnormx = -(gnormx);
HXLINE(2619)					gnormy = -(gnormy);
            				}
HXLINE(2621)				Float c1r1x = ((Float)0.0);
HXLINE(2622)				Float c1r1y = ((Float)0.0);
HXLINE(2623)				{
HXLINE(2624)					c1r1x = (clip1x - this->b1->posx);
HXLINE(2625)					c1r1y = (clip1y - this->b1->posy);
            				}
HXLINE(2627)				Float c1r2x = ((Float)0.0);
HXLINE(2628)				Float c1r2y = ((Float)0.0);
HXLINE(2629)				{
HXLINE(2630)					c1r2x = (clip1x - this->b2->posx);
HXLINE(2631)					c1r2y = (clip1y - this->b2->posy);
            				}
HXLINE(2633)				Float c2r1x = ( (Float)(0) );
HXLINE(2634)				Float c2r1y = ( (Float)(0) );
HXLINE(2651)				Float c2r2x = ( (Float)(0) );
HXLINE(2652)				Float c2r2y = ( (Float)(0) );
HXLINE(2669)				if (this->hpc2) {
HXLINE(2670)					{
HXLINE(2671)						c2r1x = (clip2x - this->b1->posx);
HXLINE(2672)						c2r1y = (clip2y - this->b1->posy);
            					}
HXLINE(2674)					{
HXLINE(2675)						c2r2x = (clip2x - this->b2->posx);
HXLINE(2676)						c2r2y = (clip2y - this->b2->posy);
            					}
HXLINE(2678)					Float rn1a = ((gnormy * c1r1x) - (gnormx * c1r1y));
HXLINE(2679)					Float rn1b = ((gnormy * c1r2x) - (gnormx * c1r2y));
HXLINE(2680)					Float rn2a = ((gnormy * c2r1x) - (gnormx * c2r1y));
HXLINE(2681)					Float rn2b = ((gnormy * c2r2x) - (gnormx * c2r2y));
HXLINE(2682)					Float mass_sum = (this->b1->smass + this->b2->smass);
HXLINE(2683)					{
HXLINE(2684)						this->kMassa = ((mass_sum + ((this->b1->sinertia * rn1a) * rn1a)) + ((this->b2->sinertia * rn1b) * rn1b));
HXLINE(2685)						this->kMassb = ((mass_sum + ((this->b1->sinertia * rn1a) * rn2a)) + ((this->b2->sinertia * rn1b) * rn2b));
HXLINE(2686)						this->kMassc = ((mass_sum + ((this->b1->sinertia * rn2a) * rn2a)) + ((this->b2->sinertia * rn2b) * rn2b));
            					}
HXLINE(2688)					Float Ka = ((Float)0.0);
HXLINE(2689)					Float Kb = ((Float)0.0);
HXLINE(2690)					Float Kc = ((Float)0.0);
HXLINE(2691)					{
HXLINE(2692)						Ka = this->kMassa;
HXLINE(2693)						Kb = this->kMassb;
HXLINE(2694)						Kc = this->kMassc;
            					}
HXLINE(2696)					Float bx = (err1 * this->biasCoef);
HXLINE(2697)					Float by = (err2 * this->biasCoef);
HXLINE(2714)					while(true){
HXLINE(2715)						Float xx = ((Float)0.0);
HXLINE(2716)						Float xy = ((Float)0.0);
HXLINE(2717)						{
HXLINE(2718)							xx = bx;
HXLINE(2719)							xy = by;
            						}
HXLINE(2737)						{
HXLINE(2738)							xx = -(xx);
HXLINE(2739)							xy = -(xy);
            						}
HXLINE(2741)						{
HXLINE(2742)							Float det = ((this->kMassa * this->kMassc) - (this->kMassb * this->kMassb));
HXLINE(2743)							if ((det != det)) {
HXLINE(2743)								xy = ( (Float)(0) );
HXDLIN(2743)								xx = xy;
            							}
            							else {
HXLINE(2744)								if ((det == 0)) {
HXLINE(2745)									if ((this->kMassa != 0)) {
HXLINE(2745)										xx = (xx / this->kMassa);
            									}
            									else {
HXLINE(2746)										xx = ( (Float)(0) );
            									}
HXLINE(2747)									if ((this->kMassc != 0)) {
HXLINE(2747)										xy = (xy / this->kMassc);
            									}
            									else {
HXLINE(2748)										xy = ( (Float)(0) );
            									}
            								}
            								else {
HXLINE(2751)									det = (( (Float)(1) ) / det);
HXLINE(2752)									Float t10 = (det * ((this->kMassc * xx) - (this->kMassb * xy)));
HXLINE(2753)									xy = (det * ((this->kMassa * xy) - (this->kMassb * xx)));
HXLINE(2754)									xx = t10;
            								}
            							}
            						}
HXLINE(2757)						bool _hx_tmp7;
HXDLIN(2757)						if ((xx >= 0)) {
HXLINE(2757)							_hx_tmp7 = (xy >= 0);
            						}
            						else {
HXLINE(2757)							_hx_tmp7 = false;
            						}
HXDLIN(2757)						if (_hx_tmp7) {
HXLINE(2758)							{
HXLINE(2759)								Float t11 = ((xx + xy) * this->b1->imass);
HXLINE(2768)								 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(2768)								_hx_tmp8->posx = (_hx_tmp8->posx - (gnormx * t11));
HXLINE(2769)								 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b1;
HXDLIN(2769)								_hx_tmp9->posy = (_hx_tmp9->posy - (gnormy * t11));
            							}
HXLINE(2771)							{
HXLINE(2771)								 ::zpp_nape::phys::ZPP_Body _this4 = this->b1;
HXDLIN(2771)								Float dr2 = (-(this->b1->iinertia) * ((rn1a * xx) + (rn2a * xy)));
HXDLIN(2771)								 ::zpp_nape::phys::ZPP_Body _this5 = _this4;
HXDLIN(2771)								_this5->rot = (_this5->rot + dr2);
HXDLIN(2771)								if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(2771)									_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN(2771)									_this4->axisy = ::Math_obj::cos(_this4->rot);
            								}
            								else {
HXLINE(2771)									Float d22 = (dr2 * dr2);
HXDLIN(2771)									Float p2 = (( (Float)(1) ) - (((Float)0.5) * d22));
HXDLIN(2771)									Float m2 = (( (Float)(1) ) - ((d22 * d22) / ( (Float)(8) )));
HXDLIN(2771)									Float nx2 = (((p2 * _this4->axisx) + (dr2 * _this4->axisy)) * m2);
HXDLIN(2771)									_this4->axisy = (((p2 * _this4->axisy) - (dr2 * _this4->axisx)) * m2);
HXDLIN(2771)									_this4->axisx = nx2;
            								}
            							}
HXLINE(2772)							{
HXLINE(2773)								Float t12 = ((xx + xy) * this->b2->imass);
HXLINE(2782)								 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b2;
HXDLIN(2782)								_hx_tmp10->posx = (_hx_tmp10->posx + (gnormx * t12));
HXLINE(2783)								 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b2;
HXDLIN(2783)								_hx_tmp11->posy = (_hx_tmp11->posy + (gnormy * t12));
            							}
HXLINE(2785)							{
HXLINE(2785)								 ::zpp_nape::phys::ZPP_Body _this6 = this->b2;
HXDLIN(2785)								Float dr3 = (this->b2->iinertia * ((rn1b * xx) + (rn2b * xy)));
HXDLIN(2785)								 ::zpp_nape::phys::ZPP_Body _this7 = _this6;
HXDLIN(2785)								_this7->rot = (_this7->rot + dr3);
HXDLIN(2785)								if (((dr3 * dr3) > ((Float)0.0001))) {
HXLINE(2785)									_this6->axisx = ::Math_obj::sin(_this6->rot);
HXDLIN(2785)									_this6->axisy = ::Math_obj::cos(_this6->rot);
            								}
            								else {
HXLINE(2785)									Float d23 = (dr3 * dr3);
HXDLIN(2785)									Float p3 = (( (Float)(1) ) - (((Float)0.5) * d23));
HXDLIN(2785)									Float m3 = (( (Float)(1) ) - ((d23 * d23) / ( (Float)(8) )));
HXDLIN(2785)									Float nx3 = (((p3 * _this6->axisx) + (dr3 * _this6->axisy)) * m3);
HXDLIN(2785)									_this6->axisy = (((p3 * _this6->axisy) - (dr3 * _this6->axisx)) * m3);
HXDLIN(2785)									_this6->axisx = nx3;
            								}
            							}
HXLINE(2786)							goto _hx_goto_26;
            						}
HXLINE(2788)						{
HXLINE(2789)							xx = (-(bx) / Ka);
HXLINE(2790)							xy = ( (Float)(0) );
            						}
HXLINE(2808)						Float vn2 = ((Kb * xx) + by);
HXLINE(2809)						bool _hx_tmp12;
HXDLIN(2809)						if ((xx >= 0)) {
HXLINE(2809)							_hx_tmp12 = (vn2 >= 0);
            						}
            						else {
HXLINE(2809)							_hx_tmp12 = false;
            						}
HXDLIN(2809)						if (_hx_tmp12) {
HXLINE(2810)							{
HXLINE(2811)								Float t13 = ((xx + xy) * this->b1->imass);
HXLINE(2820)								 ::zpp_nape::phys::ZPP_Body _hx_tmp13 = this->b1;
HXDLIN(2820)								_hx_tmp13->posx = (_hx_tmp13->posx - (gnormx * t13));
HXLINE(2821)								 ::zpp_nape::phys::ZPP_Body _hx_tmp14 = this->b1;
HXDLIN(2821)								_hx_tmp14->posy = (_hx_tmp14->posy - (gnormy * t13));
            							}
HXLINE(2823)							{
HXLINE(2823)								 ::zpp_nape::phys::ZPP_Body _this8 = this->b1;
HXDLIN(2823)								Float dr4 = (-(this->b1->iinertia) * ((rn1a * xx) + (rn2a * xy)));
HXDLIN(2823)								 ::zpp_nape::phys::ZPP_Body _this9 = _this8;
HXDLIN(2823)								_this9->rot = (_this9->rot + dr4);
HXDLIN(2823)								if (((dr4 * dr4) > ((Float)0.0001))) {
HXLINE(2823)									_this8->axisx = ::Math_obj::sin(_this8->rot);
HXDLIN(2823)									_this8->axisy = ::Math_obj::cos(_this8->rot);
            								}
            								else {
HXLINE(2823)									Float d24 = (dr4 * dr4);
HXDLIN(2823)									Float p4 = (( (Float)(1) ) - (((Float)0.5) * d24));
HXDLIN(2823)									Float m4 = (( (Float)(1) ) - ((d24 * d24) / ( (Float)(8) )));
HXDLIN(2823)									Float nx4 = (((p4 * _this8->axisx) + (dr4 * _this8->axisy)) * m4);
HXDLIN(2823)									_this8->axisy = (((p4 * _this8->axisy) - (dr4 * _this8->axisx)) * m4);
HXDLIN(2823)									_this8->axisx = nx4;
            								}
            							}
HXLINE(2824)							{
HXLINE(2825)								Float t14 = ((xx + xy) * this->b2->imass);
HXLINE(2834)								 ::zpp_nape::phys::ZPP_Body _hx_tmp15 = this->b2;
HXDLIN(2834)								_hx_tmp15->posx = (_hx_tmp15->posx + (gnormx * t14));
HXLINE(2835)								 ::zpp_nape::phys::ZPP_Body _hx_tmp16 = this->b2;
HXDLIN(2835)								_hx_tmp16->posy = (_hx_tmp16->posy + (gnormy * t14));
            							}
HXLINE(2837)							{
HXLINE(2837)								 ::zpp_nape::phys::ZPP_Body _this10 = this->b2;
HXDLIN(2837)								Float dr5 = (this->b2->iinertia * ((rn1b * xx) + (rn2b * xy)));
HXDLIN(2837)								 ::zpp_nape::phys::ZPP_Body _this11 = _this10;
HXDLIN(2837)								_this11->rot = (_this11->rot + dr5);
HXDLIN(2837)								if (((dr5 * dr5) > ((Float)0.0001))) {
HXLINE(2837)									_this10->axisx = ::Math_obj::sin(_this10->rot);
HXDLIN(2837)									_this10->axisy = ::Math_obj::cos(_this10->rot);
            								}
            								else {
HXLINE(2837)									Float d25 = (dr5 * dr5);
HXDLIN(2837)									Float p5 = (( (Float)(1) ) - (((Float)0.5) * d25));
HXDLIN(2837)									Float m5 = (( (Float)(1) ) - ((d25 * d25) / ( (Float)(8) )));
HXDLIN(2837)									Float nx5 = (((p5 * _this10->axisx) + (dr5 * _this10->axisy)) * m5);
HXDLIN(2837)									_this10->axisy = (((p5 * _this10->axisy) - (dr5 * _this10->axisx)) * m5);
HXDLIN(2837)									_this10->axisx = nx5;
            								}
            							}
HXLINE(2838)							goto _hx_goto_26;
            						}
HXLINE(2840)						{
HXLINE(2841)							xx = ( (Float)(0) );
HXLINE(2842)							xy = (-(by) / Kc);
            						}
HXLINE(2860)						Float vn1 = ((Kb * xy) + bx);
HXLINE(2861)						bool _hx_tmp17;
HXDLIN(2861)						if ((xy >= 0)) {
HXLINE(2861)							_hx_tmp17 = (vn1 >= 0);
            						}
            						else {
HXLINE(2861)							_hx_tmp17 = false;
            						}
HXDLIN(2861)						if (_hx_tmp17) {
HXLINE(2862)							{
HXLINE(2863)								Float t15 = ((xx + xy) * this->b1->imass);
HXLINE(2872)								 ::zpp_nape::phys::ZPP_Body _hx_tmp18 = this->b1;
HXDLIN(2872)								_hx_tmp18->posx = (_hx_tmp18->posx - (gnormx * t15));
HXLINE(2873)								 ::zpp_nape::phys::ZPP_Body _hx_tmp19 = this->b1;
HXDLIN(2873)								_hx_tmp19->posy = (_hx_tmp19->posy - (gnormy * t15));
            							}
HXLINE(2875)							{
HXLINE(2875)								 ::zpp_nape::phys::ZPP_Body _this12 = this->b1;
HXDLIN(2875)								Float dr6 = (-(this->b1->iinertia) * ((rn1a * xx) + (rn2a * xy)));
HXDLIN(2875)								 ::zpp_nape::phys::ZPP_Body _this13 = _this12;
HXDLIN(2875)								_this13->rot = (_this13->rot + dr6);
HXDLIN(2875)								if (((dr6 * dr6) > ((Float)0.0001))) {
HXLINE(2875)									_this12->axisx = ::Math_obj::sin(_this12->rot);
HXDLIN(2875)									_this12->axisy = ::Math_obj::cos(_this12->rot);
            								}
            								else {
HXLINE(2875)									Float d26 = (dr6 * dr6);
HXDLIN(2875)									Float p6 = (( (Float)(1) ) - (((Float)0.5) * d26));
HXDLIN(2875)									Float m6 = (( (Float)(1) ) - ((d26 * d26) / ( (Float)(8) )));
HXDLIN(2875)									Float nx6 = (((p6 * _this12->axisx) + (dr6 * _this12->axisy)) * m6);
HXDLIN(2875)									_this12->axisy = (((p6 * _this12->axisy) - (dr6 * _this12->axisx)) * m6);
HXDLIN(2875)									_this12->axisx = nx6;
            								}
            							}
HXLINE(2876)							{
HXLINE(2877)								Float t16 = ((xx + xy) * this->b2->imass);
HXLINE(2886)								 ::zpp_nape::phys::ZPP_Body _hx_tmp20 = this->b2;
HXDLIN(2886)								_hx_tmp20->posx = (_hx_tmp20->posx + (gnormx * t16));
HXLINE(2887)								 ::zpp_nape::phys::ZPP_Body _hx_tmp21 = this->b2;
HXDLIN(2887)								_hx_tmp21->posy = (_hx_tmp21->posy + (gnormy * t16));
            							}
HXLINE(2889)							{
HXLINE(2889)								 ::zpp_nape::phys::ZPP_Body _this14 = this->b2;
HXDLIN(2889)								Float dr7 = (this->b2->iinertia * ((rn1b * xx) + (rn2b * xy)));
HXDLIN(2889)								 ::zpp_nape::phys::ZPP_Body _this15 = _this14;
HXDLIN(2889)								_this15->rot = (_this15->rot + dr7);
HXDLIN(2889)								if (((dr7 * dr7) > ((Float)0.0001))) {
HXLINE(2889)									_this14->axisx = ::Math_obj::sin(_this14->rot);
HXDLIN(2889)									_this14->axisy = ::Math_obj::cos(_this14->rot);
            								}
            								else {
HXLINE(2889)									Float d27 = (dr7 * dr7);
HXDLIN(2889)									Float p7 = (( (Float)(1) ) - (((Float)0.5) * d27));
HXDLIN(2889)									Float m7 = (( (Float)(1) ) - ((d27 * d27) / ( (Float)(8) )));
HXDLIN(2889)									Float nx7 = (((p7 * _this14->axisx) + (dr7 * _this14->axisy)) * m7);
HXDLIN(2889)									_this14->axisy = (((p7 * _this14->axisy) - (dr7 * _this14->axisx)) * m7);
HXDLIN(2889)									_this14->axisx = nx7;
            								}
            							}
HXLINE(2890)							goto _hx_goto_26;
            						}
HXLINE(2714)						if (!(false)) {
HXLINE(2714)							goto _hx_goto_26;
            						}
            					}
            					_hx_goto_26:;
            				}
            				else {
HXLINE(2896)					Float rn11 = ((gnormy * c1r1x) - (gnormx * c1r1y));
HXLINE(2897)					Float rn21 = ((gnormy * c1r2x) - (gnormx * c1r2y));
HXLINE(2898)					Float K1 = (((this->b2->smass + ((rn21 * rn21) * this->b2->sinertia)) + this->b1->smass) + ((rn11 * rn11) * this->b1->sinertia));
HXLINE(2899)					if ((K1 != 0)) {
HXLINE(2900)						Float jn1 = ((-(this->biasCoef) * err1) / K1);
HXLINE(2901)						Float Jx1 = ((Float)0.0);
HXLINE(2902)						Float Jy1 = ((Float)0.0);
HXLINE(2903)						{
HXLINE(2904)							Float t17 = jn1;
HXLINE(2913)							Jx1 = (gnormx * t17);
HXLINE(2914)							Jy1 = (gnormy * t17);
            						}
HXLINE(2916)						{
HXLINE(2917)							Float t18 = this->b1->imass;
HXLINE(2926)							 ::zpp_nape::phys::ZPP_Body _hx_tmp22 = this->b1;
HXDLIN(2926)							_hx_tmp22->posx = (_hx_tmp22->posx - (Jx1 * t18));
HXLINE(2927)							 ::zpp_nape::phys::ZPP_Body _hx_tmp23 = this->b1;
HXDLIN(2927)							_hx_tmp23->posy = (_hx_tmp23->posy - (Jy1 * t18));
            						}
HXLINE(2929)						{
HXLINE(2929)							 ::zpp_nape::phys::ZPP_Body _this16 = this->b1;
HXDLIN(2929)							Float dr8 = ((-(rn11) * this->b1->iinertia) * jn1);
HXDLIN(2929)							 ::zpp_nape::phys::ZPP_Body _this17 = _this16;
HXDLIN(2929)							_this17->rot = (_this17->rot + dr8);
HXDLIN(2929)							if (((dr8 * dr8) > ((Float)0.0001))) {
HXLINE(2929)								_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN(2929)								_this16->axisy = ::Math_obj::cos(_this16->rot);
            							}
            							else {
HXLINE(2929)								Float d28 = (dr8 * dr8);
HXDLIN(2929)								Float p8 = (( (Float)(1) ) - (((Float)0.5) * d28));
HXDLIN(2929)								Float m8 = (( (Float)(1) ) - ((d28 * d28) / ( (Float)(8) )));
HXDLIN(2929)								Float nx8 = (((p8 * _this16->axisx) + (dr8 * _this16->axisy)) * m8);
HXDLIN(2929)								_this16->axisy = (((p8 * _this16->axisy) - (dr8 * _this16->axisx)) * m8);
HXDLIN(2929)								_this16->axisx = nx8;
            							}
            						}
HXLINE(2930)						{
HXLINE(2931)							Float t19 = this->b2->imass;
HXLINE(2940)							 ::zpp_nape::phys::ZPP_Body _hx_tmp24 = this->b2;
HXDLIN(2940)							_hx_tmp24->posx = (_hx_tmp24->posx + (Jx1 * t19));
HXLINE(2941)							 ::zpp_nape::phys::ZPP_Body _hx_tmp25 = this->b2;
HXDLIN(2941)							_hx_tmp25->posy = (_hx_tmp25->posy + (Jy1 * t19));
            						}
HXLINE(2943)						{
HXLINE(2943)							 ::zpp_nape::phys::ZPP_Body _this18 = this->b2;
HXDLIN(2943)							Float dr9 = ((rn21 * this->b2->iinertia) * jn1);
HXDLIN(2943)							 ::zpp_nape::phys::ZPP_Body _this19 = _this18;
HXDLIN(2943)							_this19->rot = (_this19->rot + dr9);
HXDLIN(2943)							if (((dr9 * dr9) > ((Float)0.0001))) {
HXLINE(2943)								_this18->axisx = ::Math_obj::sin(_this18->rot);
HXDLIN(2943)								_this18->axisy = ::Math_obj::cos(_this18->rot);
            							}
            							else {
HXLINE(2943)								Float d29 = (dr9 * dr9);
HXDLIN(2943)								Float p9 = (( (Float)(1) ) - (((Float)0.5) * d29));
HXDLIN(2943)								Float m9 = (( (Float)(1) ) - ((d29 * d29) / ( (Float)(8) )));
HXDLIN(2943)								Float nx9 = (((p9 * _this18->axisx) + (dr9 * _this18->axisy)) * m9);
HXDLIN(2943)								_this18->axisy = (((p9 * _this18->axisy) - (dr9 * _this18->axisx)) * m9);
HXDLIN(2943)								_this18->axisx = nx9;
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ColArbiter_obj,applyImpulsePos,(void))

int ZPP_ColArbiter_obj::FACE1;

int ZPP_ColArbiter_obj::FACE2;

int ZPP_ColArbiter_obj::CIRCLE;

 ::zpp_nape::dynamics::ZPP_ColArbiter ZPP_ColArbiter_obj::zpp_pool;


hx::ObjectPtr< ZPP_ColArbiter_obj > ZPP_ColArbiter_obj::__new() {
	hx::ObjectPtr< ZPP_ColArbiter_obj > __this = new ZPP_ColArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_ColArbiter_obj > ZPP_ColArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_ColArbiter_obj *__this = (ZPP_ColArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_ColArbiter_obj), true, "zpp_nape.dynamics.ZPP_ColArbiter"));
	*(void **)__this = ZPP_ColArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_ColArbiter_obj::ZPP_ColArbiter_obj()
{
}

void ZPP_ColArbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_ColArbiter);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(dyn_fric,"dyn_fric");
	HX_MARK_MEMBER_NAME(stat_fric,"stat_fric");
	HX_MARK_MEMBER_NAME(restitution,"restitution");
	HX_MARK_MEMBER_NAME(rfric,"rfric");
	HX_MARK_MEMBER_NAME(userdef_dyn_fric,"userdef_dyn_fric");
	HX_MARK_MEMBER_NAME(userdef_stat_fric,"userdef_stat_fric");
	HX_MARK_MEMBER_NAME(userdef_restitution,"userdef_restitution");
	HX_MARK_MEMBER_NAME(userdef_rfric,"userdef_rfric");
	HX_MARK_MEMBER_NAME(s1,"s1");
	HX_MARK_MEMBER_NAME(s2,"s2");
	HX_MARK_MEMBER_NAME(contacts,"contacts");
	HX_MARK_MEMBER_NAME(wrap_contacts,"wrap_contacts");
	HX_MARK_MEMBER_NAME(innards,"innards");
	HX_MARK_MEMBER_NAME(nx,"nx");
	HX_MARK_MEMBER_NAME(ny,"ny");
	HX_MARK_MEMBER_NAME(wrap_normal,"wrap_normal");
	HX_MARK_MEMBER_NAME(kMassa,"kMassa");
	HX_MARK_MEMBER_NAME(kMassb,"kMassb");
	HX_MARK_MEMBER_NAME(kMassc,"kMassc");
	HX_MARK_MEMBER_NAME(Ka,"Ka");
	HX_MARK_MEMBER_NAME(Kb,"Kb");
	HX_MARK_MEMBER_NAME(Kc,"Kc");
	HX_MARK_MEMBER_NAME(rMass,"rMass");
	HX_MARK_MEMBER_NAME(jrAcc,"jrAcc");
	HX_MARK_MEMBER_NAME(rn1a,"rn1a");
	HX_MARK_MEMBER_NAME(rt1a,"rt1a");
	HX_MARK_MEMBER_NAME(rn1b,"rn1b");
	HX_MARK_MEMBER_NAME(rt1b,"rt1b");
	HX_MARK_MEMBER_NAME(rn2a,"rn2a");
	HX_MARK_MEMBER_NAME(rt2a,"rt2a");
	HX_MARK_MEMBER_NAME(rn2b,"rn2b");
	HX_MARK_MEMBER_NAME(rt2b,"rt2b");
	HX_MARK_MEMBER_NAME(k1x,"k1x");
	HX_MARK_MEMBER_NAME(k1y,"k1y");
	HX_MARK_MEMBER_NAME(k2x,"k2x");
	HX_MARK_MEMBER_NAME(k2y,"k2y");
	HX_MARK_MEMBER_NAME(surfacex,"surfacex");
	HX_MARK_MEMBER_NAME(surfacey,"surfacey");
	HX_MARK_MEMBER_NAME(ptype,"ptype");
	HX_MARK_MEMBER_NAME(lnormx,"lnormx");
	HX_MARK_MEMBER_NAME(lnormy,"lnormy");
	HX_MARK_MEMBER_NAME(lproj,"lproj");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(rev,"rev");
	HX_MARK_MEMBER_NAME(biasCoef,"biasCoef");
	HX_MARK_MEMBER_NAME(_hx___ref_edge1,"__ref_edge1");
	HX_MARK_MEMBER_NAME(_hx___ref_edge2,"__ref_edge2");
	HX_MARK_MEMBER_NAME(_hx___ref_vertex,"__ref_vertex");
	HX_MARK_MEMBER_NAME(c1,"c1");
	HX_MARK_MEMBER_NAME(oc1,"oc1");
	HX_MARK_MEMBER_NAME(c2,"c2");
	HX_MARK_MEMBER_NAME(oc2,"oc2");
	HX_MARK_MEMBER_NAME(hc2,"hc2");
	HX_MARK_MEMBER_NAME(hpc2,"hpc2");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(stat,"stat");
	HX_MARK_MEMBER_NAME(_hx_mutable,"mutable");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	 ::zpp_nape::dynamics::ZPP_Arbiter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_ColArbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(dyn_fric,"dyn_fric");
	HX_VISIT_MEMBER_NAME(stat_fric,"stat_fric");
	HX_VISIT_MEMBER_NAME(restitution,"restitution");
	HX_VISIT_MEMBER_NAME(rfric,"rfric");
	HX_VISIT_MEMBER_NAME(userdef_dyn_fric,"userdef_dyn_fric");
	HX_VISIT_MEMBER_NAME(userdef_stat_fric,"userdef_stat_fric");
	HX_VISIT_MEMBER_NAME(userdef_restitution,"userdef_restitution");
	HX_VISIT_MEMBER_NAME(userdef_rfric,"userdef_rfric");
	HX_VISIT_MEMBER_NAME(s1,"s1");
	HX_VISIT_MEMBER_NAME(s2,"s2");
	HX_VISIT_MEMBER_NAME(contacts,"contacts");
	HX_VISIT_MEMBER_NAME(wrap_contacts,"wrap_contacts");
	HX_VISIT_MEMBER_NAME(innards,"innards");
	HX_VISIT_MEMBER_NAME(nx,"nx");
	HX_VISIT_MEMBER_NAME(ny,"ny");
	HX_VISIT_MEMBER_NAME(wrap_normal,"wrap_normal");
	HX_VISIT_MEMBER_NAME(kMassa,"kMassa");
	HX_VISIT_MEMBER_NAME(kMassb,"kMassb");
	HX_VISIT_MEMBER_NAME(kMassc,"kMassc");
	HX_VISIT_MEMBER_NAME(Ka,"Ka");
	HX_VISIT_MEMBER_NAME(Kb,"Kb");
	HX_VISIT_MEMBER_NAME(Kc,"Kc");
	HX_VISIT_MEMBER_NAME(rMass,"rMass");
	HX_VISIT_MEMBER_NAME(jrAcc,"jrAcc");
	HX_VISIT_MEMBER_NAME(rn1a,"rn1a");
	HX_VISIT_MEMBER_NAME(rt1a,"rt1a");
	HX_VISIT_MEMBER_NAME(rn1b,"rn1b");
	HX_VISIT_MEMBER_NAME(rt1b,"rt1b");
	HX_VISIT_MEMBER_NAME(rn2a,"rn2a");
	HX_VISIT_MEMBER_NAME(rt2a,"rt2a");
	HX_VISIT_MEMBER_NAME(rn2b,"rn2b");
	HX_VISIT_MEMBER_NAME(rt2b,"rt2b");
	HX_VISIT_MEMBER_NAME(k1x,"k1x");
	HX_VISIT_MEMBER_NAME(k1y,"k1y");
	HX_VISIT_MEMBER_NAME(k2x,"k2x");
	HX_VISIT_MEMBER_NAME(k2y,"k2y");
	HX_VISIT_MEMBER_NAME(surfacex,"surfacex");
	HX_VISIT_MEMBER_NAME(surfacey,"surfacey");
	HX_VISIT_MEMBER_NAME(ptype,"ptype");
	HX_VISIT_MEMBER_NAME(lnormx,"lnormx");
	HX_VISIT_MEMBER_NAME(lnormy,"lnormy");
	HX_VISIT_MEMBER_NAME(lproj,"lproj");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(rev,"rev");
	HX_VISIT_MEMBER_NAME(biasCoef,"biasCoef");
	HX_VISIT_MEMBER_NAME(_hx___ref_edge1,"__ref_edge1");
	HX_VISIT_MEMBER_NAME(_hx___ref_edge2,"__ref_edge2");
	HX_VISIT_MEMBER_NAME(_hx___ref_vertex,"__ref_vertex");
	HX_VISIT_MEMBER_NAME(c1,"c1");
	HX_VISIT_MEMBER_NAME(oc1,"oc1");
	HX_VISIT_MEMBER_NAME(c2,"c2");
	HX_VISIT_MEMBER_NAME(oc2,"oc2");
	HX_VISIT_MEMBER_NAME(hc2,"hc2");
	HX_VISIT_MEMBER_NAME(hpc2,"hpc2");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(stat,"stat");
	HX_VISIT_MEMBER_NAME(_hx_mutable,"mutable");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
	 ::zpp_nape::dynamics::ZPP_Arbiter_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_ColArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"s1") ) { return hx::Val( s1 ); }
		if (HX_FIELD_EQ(inName,"s2") ) { return hx::Val( s2 ); }
		if (HX_FIELD_EQ(inName,"nx") ) { return hx::Val( nx ); }
		if (HX_FIELD_EQ(inName,"ny") ) { return hx::Val( ny ); }
		if (HX_FIELD_EQ(inName,"Ka") ) { return hx::Val( Ka ); }
		if (HX_FIELD_EQ(inName,"Kb") ) { return hx::Val( Kb ); }
		if (HX_FIELD_EQ(inName,"Kc") ) { return hx::Val( Kc ); }
		if (HX_FIELD_EQ(inName,"c1") ) { return hx::Val( c1 ); }
		if (HX_FIELD_EQ(inName,"c2") ) { return hx::Val( c2 ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"k1x") ) { return hx::Val( k1x ); }
		if (HX_FIELD_EQ(inName,"k1y") ) { return hx::Val( k1y ); }
		if (HX_FIELD_EQ(inName,"k2x") ) { return hx::Val( k2x ); }
		if (HX_FIELD_EQ(inName,"k2y") ) { return hx::Val( k2y ); }
		if (HX_FIELD_EQ(inName,"rev") ) { return hx::Val( rev ); }
		if (HX_FIELD_EQ(inName,"oc1") ) { return hx::Val( oc1 ); }
		if (HX_FIELD_EQ(inName,"oc2") ) { return hx::Val( oc2 ); }
		if (HX_FIELD_EQ(inName,"hc2") ) { return hx::Val( hc2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rn1a") ) { return hx::Val( rn1a ); }
		if (HX_FIELD_EQ(inName,"rt1a") ) { return hx::Val( rt1a ); }
		if (HX_FIELD_EQ(inName,"rn1b") ) { return hx::Val( rn1b ); }
		if (HX_FIELD_EQ(inName,"rt1b") ) { return hx::Val( rt1b ); }
		if (HX_FIELD_EQ(inName,"rn2a") ) { return hx::Val( rn2a ); }
		if (HX_FIELD_EQ(inName,"rt2a") ) { return hx::Val( rt2a ); }
		if (HX_FIELD_EQ(inName,"rn2b") ) { return hx::Val( rn2b ); }
		if (HX_FIELD_EQ(inName,"rt2b") ) { return hx::Val( rt2b ); }
		if (HX_FIELD_EQ(inName,"hpc2") ) { return hx::Val( hpc2 ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		if (HX_FIELD_EQ(inName,"stat") ) { return hx::Val( stat ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"rfric") ) { return hx::Val( rfric ); }
		if (HX_FIELD_EQ(inName,"rMass") ) { return hx::Val( rMass ); }
		if (HX_FIELD_EQ(inName,"jrAcc") ) { return hx::Val( jrAcc ); }
		if (HX_FIELD_EQ(inName,"ptype") ) { return hx::Val( ptype ); }
		if (HX_FIELD_EQ(inName,"lproj") ) { return hx::Val( lproj ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"kMassa") ) { return hx::Val( kMassa ); }
		if (HX_FIELD_EQ(inName,"kMassb") ) { return hx::Val( kMassb ); }
		if (HX_FIELD_EQ(inName,"kMassc") ) { return hx::Val( kMassc ); }
		if (HX_FIELD_EQ(inName,"lnormx") ) { return hx::Val( lnormx ); }
		if (HX_FIELD_EQ(inName,"lnormy") ) { return hx::Val( lnormy ); }
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		if (HX_FIELD_EQ(inName,"assign") ) { return hx::Val( assign_dyn() ); }
		if (HX_FIELD_EQ(inName,"retire") ) { return hx::Val( retire_dyn() ); }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return hx::Val( pre_dt ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"innards") ) { return hx::Val( innards ); }
		if (HX_FIELD_EQ(inName,"mutable") ) { return hx::Val( _hx_mutable ); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn ); }
		if (HX_FIELD_EQ(inName,"dyn_fric") ) { return hx::Val( dyn_fric ); }
		if (HX_FIELD_EQ(inName,"contacts") ) { return hx::Val( contacts ); }
		if (HX_FIELD_EQ(inName,"surfacex") ) { return hx::Val( surfacex ); }
		if (HX_FIELD_EQ(inName,"surfacey") ) { return hx::Val( surfacey ); }
		if (HX_FIELD_EQ(inName,"biasCoef") ) { return hx::Val( biasCoef ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stat_fric") ) { return hx::Val( stat_fric ); }
		if (HX_FIELD_EQ(inName,"getnormal") ) { return hx::Val( getnormal_dyn() ); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { return hx::Val( restitution ); }
		if (HX_FIELD_EQ(inName,"wrap_normal") ) { return hx::Val( wrap_normal ); }
		if (HX_FIELD_EQ(inName,"__ref_edge1") ) { return hx::Val( _hx___ref_edge1 ); }
		if (HX_FIELD_EQ(inName,"__ref_edge2") ) { return hx::Val( _hx___ref_edge2 ); }
		if (HX_FIELD_EQ(inName,"makemutable") ) { return hx::Val( makemutable_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__ref_vertex") ) { return hx::Val( _hx___ref_vertex ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"userdef_rfric") ) { return hx::Val( userdef_rfric ); }
		if (HX_FIELD_EQ(inName,"wrap_contacts") ) { return hx::Val( wrap_contacts ); }
		if (HX_FIELD_EQ(inName,"injectContact") ) { return hx::Val( injectContact_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeimmutable") ) { return hx::Val( makeimmutable_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupcontacts") ) { return hx::Val( setupcontacts_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"calcProperties") ) { return hx::Val( calcProperties_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_props") ) { return hx::Val( validate_props_dyn() ); }
		if (HX_FIELD_EQ(inName,"contacts_adder") ) { return hx::Val( contacts_adder_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"normal_validate") ) { return hx::Val( normal_validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"contacts_subber") ) { return hx::Val( contacts_subber_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanupContacts") ) { return hx::Val( cleanupContacts_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"userdef_dyn_fric") ) { return hx::Val( userdef_dyn_fric ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"userdef_stat_fric") ) { return hx::Val( userdef_stat_fric ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"userdef_restitution") ) { return hx::Val( userdef_restitution ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_ColArbiter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
	}
	return false;
}

hx::Val ZPP_ColArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"s1") ) { s1=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s2") ) { s2=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nx") ) { nx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ny") ) { ny=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Ka") ) { Ka=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Kb") ) { Kb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Kc") ) { Kc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c1") ) { c1=inValue.Cast<  ::zpp_nape::dynamics::ZPP_IContact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c2") ) { c2=inValue.Cast<  ::zpp_nape::dynamics::ZPP_IContact >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"k1x") ) { k1x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"k1y") ) { k1y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"k2x") ) { k2x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"k2y") ) { k2y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rev") ) { rev=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oc1") ) { oc1=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Contact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oc2") ) { oc2=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Contact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hc2") ) { hc2=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rn1a") ) { rn1a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rt1a") ) { rt1a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rn1b") ) { rn1b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rt1b") ) { rt1b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rn2a") ) { rn2a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rt2a") ) { rt2a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rn2b") ) { rn2b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rt2b") ) { rt2b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hpc2") ) { hpc2=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::dynamics::ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stat") ) { stat=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"rfric") ) { rfric=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rMass") ) { rMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jrAcc") ) { jrAcc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ptype") ) { ptype=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lproj") ) { lproj=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"kMassa") ) { kMassa=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassb") ) { kMassb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassc") ) { kMassc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lnormx") ) { lnormx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lnormy") ) { lnormy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"innards") ) { innards=inValue.Cast<  ::zpp_nape::dynamics::ZPP_IContact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mutable") ) { _hx_mutable=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::dynamics::CollisionArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dyn_fric") ) { dyn_fric=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contacts") ) { contacts=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Contact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"surfacex") ) { surfacex=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"surfacey") ) { surfacey=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasCoef") ) { biasCoef=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stat_fric") ) { stat_fric=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { restitution=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_normal") ) { wrap_normal=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__ref_edge1") ) { _hx___ref_edge1=inValue.Cast<  ::zpp_nape::shape::ZPP_Edge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__ref_edge2") ) { _hx___ref_edge2=inValue.Cast<  ::zpp_nape::shape::ZPP_Edge >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__ref_vertex") ) { _hx___ref_vertex=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"userdef_rfric") ) { userdef_rfric=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_contacts") ) { wrap_contacts=inValue.Cast<  ::nape::dynamics::ContactList >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"userdef_dyn_fric") ) { userdef_dyn_fric=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"userdef_stat_fric") ) { userdef_stat_fric=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"userdef_restitution") ) { userdef_restitution=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_ColArbiter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::dynamics::ZPP_ColArbiter >(); return true; }
	}
	return false;
}

void ZPP_ColArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_zn",38,07,b0,a2));
	outFields->push(HX_("dyn_fric",2c,22,6f,f1));
	outFields->push(HX_("stat_fric",b1,77,29,c7));
	outFields->push(HX_("restitution",6a,2c,4d,08));
	outFields->push(HX_("rfric",98,c1,70,e7));
	outFields->push(HX_("userdef_dyn_fric",f1,55,5d,31));
	outFields->push(HX_("userdef_stat_fric",4c,90,a8,77));
	outFields->push(HX_("userdef_restitution",c5,e1,37,29));
	outFields->push(HX_("userdef_rfric",b3,b0,fa,4e));
	outFields->push(HX_("s1",5e,64,00,00));
	outFields->push(HX_("s2",5f,64,00,00));
	outFields->push(HX_("contacts",d3,d1,76,2c));
	outFields->push(HX_("wrap_contacts",28,06,a1,1c));
	outFields->push(HX_("innards",29,c0,17,a0));
	outFields->push(HX_("nx",4a,60,00,00));
	outFields->push(HX_("ny",4b,60,00,00));
	outFields->push(HX_("wrap_normal",3c,77,f8,1a));
	outFields->push(HX_("kMassa",82,a0,7f,5e));
	outFields->push(HX_("kMassb",83,a0,7f,5e));
	outFields->push(HX_("kMassc",84,a0,7f,5e));
	outFields->push(HX_("Ka",b6,41,00,00));
	outFields->push(HX_("Kb",b7,41,00,00));
	outFields->push(HX_("Kc",b8,41,00,00));
	outFields->push(HX_("rMass",86,8e,dd,d6));
	outFields->push(HX_("jrAcc",59,79,05,54));
	outFields->push(HX_("rn1a",cc,f5,ad,4b));
	outFields->push(HX_("rt1a",52,83,b2,4b));
	outFields->push(HX_("rn1b",cd,f5,ad,4b));
	outFields->push(HX_("rt1b",53,83,b2,4b));
	outFields->push(HX_("rn2a",ab,f6,ad,4b));
	outFields->push(HX_("rt2a",31,84,b2,4b));
	outFields->push(HX_("rn2b",ac,f6,ad,4b));
	outFields->push(HX_("rt2b",32,84,b2,4b));
	outFields->push(HX_("k1x",52,5c,51,00));
	outFields->push(HX_("k1y",53,5c,51,00));
	outFields->push(HX_("k2x",31,5d,51,00));
	outFields->push(HX_("k2y",32,5d,51,00));
	outFields->push(HX_("surfacex",ab,01,f0,42));
	outFields->push(HX_("surfacey",ac,01,f0,42));
	outFields->push(HX_("ptype",2a,eb,e9,c9));
	outFields->push(HX_("lnormx",d0,56,54,ce));
	outFields->push(HX_("lnormy",d1,56,54,ce));
	outFields->push(HX_("lproj",09,6e,a5,79));
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("rev",63,d9,56,00));
	outFields->push(HX_("biasCoef",26,f9,ed,1f));
	outFields->push(HX_("__ref_edge1",08,17,e9,a5));
	outFields->push(HX_("__ref_edge2",09,17,e9,a5));
	outFields->push(HX_("__ref_vertex",30,af,d3,ec));
	outFields->push(HX_("c1",6e,56,00,00));
	outFields->push(HX_("oc1",9d,90,54,00));
	outFields->push(HX_("c2",6f,56,00,00));
	outFields->push(HX_("oc2",9e,90,54,00));
	outFields->push(HX_("hc2",d7,40,4f,00));
	outFields->push(HX_("hpc2",77,83,13,45));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("stat",d4,e3,5b,4c));
	outFields->push(HX_("mutable",a6,7f,48,87));
	outFields->push(HX_("pre_dt",6c,85,b1,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_ColArbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::dynamics::CollisionArbiter */ ,(int)offsetof(ZPP_ColArbiter_obj,outer_zn),HX_("outer_zn",38,07,b0,a2)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,dyn_fric),HX_("dyn_fric",2c,22,6f,f1)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,stat_fric),HX_("stat_fric",b1,77,29,c7)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,restitution),HX_("restitution",6a,2c,4d,08)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rfric),HX_("rfric",98,c1,70,e7)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,userdef_dyn_fric),HX_("userdef_dyn_fric",f1,55,5d,31)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,userdef_stat_fric),HX_("userdef_stat_fric",4c,90,a8,77)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,userdef_restitution),HX_("userdef_restitution",c5,e1,37,29)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,userdef_rfric),HX_("userdef_rfric",b3,b0,fa,4e)},
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Shape */ ,(int)offsetof(ZPP_ColArbiter_obj,s1),HX_("s1",5e,64,00,00)},
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Shape */ ,(int)offsetof(ZPP_ColArbiter_obj,s2),HX_("s2",5f,64,00,00)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Contact */ ,(int)offsetof(ZPP_ColArbiter_obj,contacts),HX_("contacts",d3,d1,76,2c)},
	{hx::fsObject /*  ::nape::dynamics::ContactList */ ,(int)offsetof(ZPP_ColArbiter_obj,wrap_contacts),HX_("wrap_contacts",28,06,a1,1c)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_IContact */ ,(int)offsetof(ZPP_ColArbiter_obj,innards),HX_("innards",29,c0,17,a0)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,nx),HX_("nx",4a,60,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,ny),HX_("ny",4b,60,00,00)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_ColArbiter_obj,wrap_normal),HX_("wrap_normal",3c,77,f8,1a)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,kMassa),HX_("kMassa",82,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,kMassb),HX_("kMassb",83,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,kMassc),HX_("kMassc",84,a0,7f,5e)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,Ka),HX_("Ka",b6,41,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,Kb),HX_("Kb",b7,41,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,Kc),HX_("Kc",b8,41,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rMass),HX_("rMass",86,8e,dd,d6)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,jrAcc),HX_("jrAcc",59,79,05,54)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rn1a),HX_("rn1a",cc,f5,ad,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rt1a),HX_("rt1a",52,83,b2,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rn1b),HX_("rn1b",cd,f5,ad,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rt1b),HX_("rt1b",53,83,b2,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rn2a),HX_("rn2a",ab,f6,ad,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rt2a),HX_("rt2a",31,84,b2,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rn2b),HX_("rn2b",ac,f6,ad,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,rt2b),HX_("rt2b",32,84,b2,4b)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,k1x),HX_("k1x",52,5c,51,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,k1y),HX_("k1y",53,5c,51,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,k2x),HX_("k2x",31,5d,51,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,k2y),HX_("k2y",32,5d,51,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,surfacex),HX_("surfacex",ab,01,f0,42)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,surfacey),HX_("surfacey",ac,01,f0,42)},
	{hx::fsInt,(int)offsetof(ZPP_ColArbiter_obj,ptype),HX_("ptype",2a,eb,e9,c9)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,lnormx),HX_("lnormx",d0,56,54,ce)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,lnormy),HX_("lnormy",d1,56,54,ce)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,lproj),HX_("lproj",09,6e,a5,79)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,radius),HX_("radius",52,d0,f6,b0)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,rev),HX_("rev",63,d9,56,00)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,biasCoef),HX_("biasCoef",26,f9,ed,1f)},
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Edge */ ,(int)offsetof(ZPP_ColArbiter_obj,_hx___ref_edge1),HX_("__ref_edge1",08,17,e9,a5)},
	{hx::fsObject /*  ::zpp_nape::shape::ZPP_Edge */ ,(int)offsetof(ZPP_ColArbiter_obj,_hx___ref_edge2),HX_("__ref_edge2",09,17,e9,a5)},
	{hx::fsInt,(int)offsetof(ZPP_ColArbiter_obj,_hx___ref_vertex),HX_("__ref_vertex",30,af,d3,ec)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_IContact */ ,(int)offsetof(ZPP_ColArbiter_obj,c1),HX_("c1",6e,56,00,00)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Contact */ ,(int)offsetof(ZPP_ColArbiter_obj,oc1),HX_("oc1",9d,90,54,00)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_IContact */ ,(int)offsetof(ZPP_ColArbiter_obj,c2),HX_("c2",6f,56,00,00)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Contact */ ,(int)offsetof(ZPP_ColArbiter_obj,oc2),HX_("oc2",9e,90,54,00)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,hc2),HX_("hc2",d7,40,4f,00)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,hpc2),HX_("hpc2",77,83,13,45)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_ColArbiter */ ,(int)offsetof(ZPP_ColArbiter_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,stat),HX_("stat",d4,e3,5b,4c)},
	{hx::fsBool,(int)offsetof(ZPP_ColArbiter_obj,_hx_mutable),HX_("mutable",a6,7f,48,87)},
	{hx::fsFloat,(int)offsetof(ZPP_ColArbiter_obj,pre_dt),HX_("pre_dt",6c,85,b1,ae)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_ColArbiter_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ZPP_ColArbiter_obj::FACE1,HX_("FACE1",f4,8c,36,79)},
	{hx::fsInt,(void *) &ZPP_ColArbiter_obj::FACE2,HX_("FACE2",f5,8c,36,79)},
	{hx::fsInt,(void *) &ZPP_ColArbiter_obj::CIRCLE,HX_("CIRCLE",10,1e,90,08)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_ColArbiter */ ,(void *) &ZPP_ColArbiter_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_ColArbiter_obj_sMemberFields[] = {
	HX_("outer_zn",38,07,b0,a2),
	HX_("dyn_fric",2c,22,6f,f1),
	HX_("stat_fric",b1,77,29,c7),
	HX_("restitution",6a,2c,4d,08),
	HX_("rfric",98,c1,70,e7),
	HX_("userdef_dyn_fric",f1,55,5d,31),
	HX_("userdef_stat_fric",4c,90,a8,77),
	HX_("userdef_restitution",c5,e1,37,29),
	HX_("userdef_rfric",b3,b0,fa,4e),
	HX_("s1",5e,64,00,00),
	HX_("s2",5f,64,00,00),
	HX_("contacts",d3,d1,76,2c),
	HX_("wrap_contacts",28,06,a1,1c),
	HX_("innards",29,c0,17,a0),
	HX_("nx",4a,60,00,00),
	HX_("ny",4b,60,00,00),
	HX_("normal_validate",ee,58,aa,bb),
	HX_("wrap_normal",3c,77,f8,1a),
	HX_("getnormal",3d,87,2b,78),
	HX_("kMassa",82,a0,7f,5e),
	HX_("kMassb",83,a0,7f,5e),
	HX_("kMassc",84,a0,7f,5e),
	HX_("Ka",b6,41,00,00),
	HX_("Kb",b7,41,00,00),
	HX_("Kc",b8,41,00,00),
	HX_("rMass",86,8e,dd,d6),
	HX_("jrAcc",59,79,05,54),
	HX_("rn1a",cc,f5,ad,4b),
	HX_("rt1a",52,83,b2,4b),
	HX_("rn1b",cd,f5,ad,4b),
	HX_("rt1b",53,83,b2,4b),
	HX_("rn2a",ab,f6,ad,4b),
	HX_("rt2a",31,84,b2,4b),
	HX_("rn2b",ac,f6,ad,4b),
	HX_("rt2b",32,84,b2,4b),
	HX_("k1x",52,5c,51,00),
	HX_("k1y",53,5c,51,00),
	HX_("k2x",31,5d,51,00),
	HX_("k2y",32,5d,51,00),
	HX_("surfacex",ab,01,f0,42),
	HX_("surfacey",ac,01,f0,42),
	HX_("ptype",2a,eb,e9,c9),
	HX_("lnormx",d0,56,54,ce),
	HX_("lnormy",d1,56,54,ce),
	HX_("lproj",09,6e,a5,79),
	HX_("radius",52,d0,f6,b0),
	HX_("rev",63,d9,56,00),
	HX_("biasCoef",26,f9,ed,1f),
	HX_("__ref_edge1",08,17,e9,a5),
	HX_("__ref_edge2",09,17,e9,a5),
	HX_("__ref_vertex",30,af,d3,ec),
	HX_("c1",6e,56,00,00),
	HX_("oc1",9d,90,54,00),
	HX_("c2",6f,56,00,00),
	HX_("oc2",9e,90,54,00),
	HX_("hc2",d7,40,4f,00),
	HX_("hpc2",77,83,13,45),
	HX_("next",f3,84,02,49),
	HX_("alloc",75,a4,93,21),
	HX_("free",ac,9c,c2,43),
	HX_("stat",d4,e3,5b,4c),
	HX_("injectContact",0f,3c,ab,7a),
	HX_("assign",2f,46,06,4c),
	HX_("calcProperties",e8,84,7c,a1),
	HX_("validate_props",c7,93,aa,e3),
	HX_("retire",9b,89,24,09),
	HX_("mutable",a6,7f,48,87),
	HX_("makemutable",78,7f,01,fe),
	HX_("makeimmutable",94,40,9d,bd),
	HX_("contacts_adder",22,8e,45,4d),
	HX_("contacts_subber",fb,6b,7e,4a),
	HX_("setupcontacts",50,c5,e4,02),
	HX_("cleanupContacts",17,5e,49,be),
	HX_("pre_dt",6c,85,b1,ae),
	HX_("preStep",0f,c1,c0,24),
	HX_("warmStart",dd,27,03,eb),
	HX_("applyImpulseVel",b6,c7,50,1f),
	HX_("applyImpulsePos",ed,42,4c,1f),
	::String(null()) };

static void ZPP_ColArbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_ColArbiter_obj::FACE1,"FACE1");
	HX_MARK_MEMBER_NAME(ZPP_ColArbiter_obj::FACE2,"FACE2");
	HX_MARK_MEMBER_NAME(ZPP_ColArbiter_obj::CIRCLE,"CIRCLE");
	HX_MARK_MEMBER_NAME(ZPP_ColArbiter_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_ColArbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_ColArbiter_obj::FACE1,"FACE1");
	HX_VISIT_MEMBER_NAME(ZPP_ColArbiter_obj::FACE2,"FACE2");
	HX_VISIT_MEMBER_NAME(ZPP_ColArbiter_obj::CIRCLE,"CIRCLE");
	HX_VISIT_MEMBER_NAME(ZPP_ColArbiter_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_ColArbiter_obj::__mClass;

static ::String ZPP_ColArbiter_obj_sStaticFields[] = {
	HX_("FACE1",f4,8c,36,79),
	HX_("FACE2",f5,8c,36,79),
	HX_("CIRCLE",10,1e,90,08),
	HX_("zpp_pool",81,5d,d4,38),
	::String(null())
};

void ZPP_ColArbiter_obj::__register()
{
	ZPP_ColArbiter_obj _hx_dummy;
	ZPP_ColArbiter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.dynamics.ZPP_ColArbiter",67,9b,eb,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_ColArbiter_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_ColArbiter_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_ColArbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_ColArbiter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_ColArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_ColArbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_ColArbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_ColArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_ColArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_ColArbiter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1466_boot)
HXDLIN(1466)		FACE1 = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1467_boot)
HXDLIN(1467)		FACE2 = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1468_boot)
HXDLIN(1468)		CIRCLE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c52dfbc26d5435ef_1486_boot)
HXDLIN(1486)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
