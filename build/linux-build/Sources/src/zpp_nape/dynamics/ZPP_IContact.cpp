// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <hxinc/zpp_nape/dynamics/ZPP_IContact.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_76e0a17efa968797_625_new,"zpp_nape.dynamics.ZPP_IContact","new",0xcc755907,"zpp_nape.dynamics.ZPP_IContact.new","zpp_nape/dynamics/Contact.hx",625,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_645_elem,"zpp_nape.dynamics.ZPP_IContact","elem",0x144ae208,"zpp_nape.dynamics.ZPP_IContact.elem","zpp_nape/dynamics/Contact.hx",645,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_650_begin,"zpp_nape.dynamics.ZPP_IContact","begin",0xee682a90,"zpp_nape.dynamics.ZPP_IContact.begin","zpp_nape/dynamics/Contact.hx",650,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_658_setbegin,"zpp_nape.dynamics.ZPP_IContact","setbegin",0x16479d40,"zpp_nape.dynamics.ZPP_IContact.setbegin","zpp_nape/dynamics/Contact.hx",658,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_664_add,"zpp_nape.dynamics.ZPP_IContact","add",0xcc6b7ac8,"zpp_nape.dynamics.ZPP_IContact.add","zpp_nape/dynamics/Contact.hx",664,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_668_inlined_add,"zpp_nape.dynamics.ZPP_IContact","inlined_add",0x32935434,"zpp_nape.dynamics.ZPP_IContact.inlined_add","zpp_nape/dynamics/Contact.hx",668,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_696_addAll,"zpp_nape.dynamics.ZPP_IContact","addAll",0xb0e12339,"zpp_nape.dynamics.ZPP_IContact.addAll","zpp_nape/dynamics/Contact.hx",696,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_706_insert,"zpp_nape.dynamics.ZPP_IContact","insert",0xafc35cf2,"zpp_nape.dynamics.ZPP_IContact.insert","zpp_nape/dynamics/Contact.hx",706,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_710_inlined_insert,"zpp_nape.dynamics.ZPP_IContact","inlined_insert",0x12ac2f06,"zpp_nape.dynamics.ZPP_IContact.inlined_insert","zpp_nape/dynamics/Contact.hx",710,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_736_pop,"zpp_nape.dynamics.ZPP_IContact","pop",0xcc76e638,"zpp_nape.dynamics.ZPP_IContact.pop","zpp_nape/dynamics/Contact.hx",736,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_740_inlined_pop,"zpp_nape.dynamics.ZPP_IContact","inlined_pop",0x329ebfa4,"zpp_nape.dynamics.ZPP_IContact.inlined_pop","zpp_nape/dynamics/Contact.hx",740,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_760_pop_unsafe,"zpp_nape.dynamics.ZPP_IContact","pop_unsafe",0xfc74668d,"zpp_nape.dynamics.ZPP_IContact.pop_unsafe","zpp_nape/dynamics/Contact.hx",760,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_764_inlined_pop_unsafe,"zpp_nape.dynamics.ZPP_IContact","inlined_pop_unsafe",0x9d31d2a1,"zpp_nape.dynamics.ZPP_IContact.inlined_pop_unsafe","zpp_nape/dynamics/Contact.hx",764,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_786_remove,"zpp_nape.dynamics.ZPP_IContact","remove",0x166eb5fd,"zpp_nape.dynamics.ZPP_IContact.remove","zpp_nape/dynamics/Contact.hx",786,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_788_try_remove,"zpp_nape.dynamics.ZPP_IContact","try_remove",0x139e9c41,"zpp_nape.dynamics.ZPP_IContact.try_remove","zpp_nape/dynamics/Contact.hx",788,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_822_inlined_remove,"zpp_nape.dynamics.ZPP_IContact","inlined_remove",0x79578811,"zpp_nape.dynamics.ZPP_IContact.inlined_remove","zpp_nape/dynamics/Contact.hx",822,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_826_inlined_try_remove,"zpp_nape.dynamics.ZPP_IContact","inlined_try_remove",0xb45c0855,"zpp_nape.dynamics.ZPP_IContact.inlined_try_remove","zpp_nape/dynamics/Contact.hx",826,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_850_erase,"zpp_nape.dynamics.ZPP_IContact","erase",0xb12f294d,"zpp_nape.dynamics.ZPP_IContact.erase","zpp_nape/dynamics/Contact.hx",850,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_854_inlined_erase,"zpp_nape.dynamics.ZPP_IContact","inlined_erase",0xd41135b9,"zpp_nape.dynamics.ZPP_IContact.inlined_erase","zpp_nape/dynamics/Contact.hx",854,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_886_splice,"zpp_nape.dynamics.ZPP_IContact","splice",0xd1849f35,"zpp_nape.dynamics.ZPP_IContact.splice","zpp_nape/dynamics/Contact.hx",886,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_891_clear,"zpp_nape.dynamics.ZPP_IContact","clear",0x866db1f4,"zpp_nape.dynamics.ZPP_IContact.clear","zpp_nape/dynamics/Contact.hx",891,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_896_inlined_clear,"zpp_nape.dynamics.ZPP_IContact","inlined_clear",0xa94fbe60,"zpp_nape.dynamics.ZPP_IContact.inlined_clear","zpp_nape/dynamics/Contact.hx",896,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_901_reverse,"zpp_nape.dynamics.ZPP_IContact","reverse",0xb26ca149,"zpp_nape.dynamics.ZPP_IContact.reverse","zpp_nape/dynamics/Contact.hx",901,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_917_empty,"zpp_nape.dynamics.ZPP_IContact","empty",0xadec7af4,"zpp_nape.dynamics.ZPP_IContact.empty","zpp_nape/dynamics/Contact.hx",917,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_922_size,"zpp_nape.dynamics.ZPP_IContact","size",0x1d89aa3a,"zpp_nape.dynamics.ZPP_IContact.size","zpp_nape/dynamics/Contact.hx",922,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_925_has,"zpp_nape.dynamics.ZPP_IContact","has",0xcc70c801,"zpp_nape.dynamics.ZPP_IContact.has","zpp_nape/dynamics/Contact.hx",925,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_929_inlined_has,"zpp_nape.dynamics.ZPP_IContact","inlined_has",0x3298a16d,"zpp_nape.dynamics.ZPP_IContact.inlined_has","zpp_nape/dynamics/Contact.hx",929,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_960_front,"zpp_nape.dynamics.ZPP_IContact","front",0x44a05910,"zpp_nape.dynamics.ZPP_IContact.front","zpp_nape/dynamics/Contact.hx",960,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_962_back,"zpp_nape.dynamics.ZPP_IContact","back",0x1246e3a0,"zpp_nape.dynamics.ZPP_IContact.back","zpp_nape/dynamics/Contact.hx",962,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_971_iterator_at,"zpp_nape.dynamics.ZPP_IContact","iterator_at",0x3737918b,"zpp_nape.dynamics.ZPP_IContact.iterator_at","zpp_nape/dynamics/Contact.hx",971,0xe7cc00d7)
HX_LOCAL_STACK_FRAME(_hx_pos_76e0a17efa968797_984_at,"zpp_nape.dynamics.ZPP_IContact","at",0xd796de2c,"zpp_nape.dynamics.ZPP_IContact.at","zpp_nape/dynamics/Contact.hx",984,0xe7cc00d7)
namespace zpp_nape{
namespace dynamics{

void ZPP_IContact_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_625_new)
HXLINE( 655)		this->length = 0;
HXLINE( 654)		this->pushmod = false;
HXLINE( 653)		this->modified = false;
HXLINE( 652)		this->_inuse = false;
HXLINE( 641)		this->next = null();
HXLINE( 639)		this->lr2y = ((Float)0.0);
HXLINE( 638)		this->lr2x = ((Float)0.0);
HXLINE( 637)		this->lr1y = ((Float)0.0);
HXLINE( 636)		this->lr1x = ((Float)0.0);
HXLINE( 635)		this->jtAcc = ((Float)0.0);
HXLINE( 634)		this->jnAcc = ((Float)0.0);
HXLINE( 633)		this->friction = ((Float)0.0);
HXLINE( 632)		this->bounce = ((Float)0.0);
HXLINE( 631)		this->tMass = ((Float)0.0);
HXLINE( 630)		this->nMass = ((Float)0.0);
HXLINE( 629)		this->r2y = ((Float)0.0);
HXLINE( 628)		this->r2x = ((Float)0.0);
HXLINE( 627)		this->r1y = ((Float)0.0);
HXLINE( 626)		this->r1x = ((Float)0.0);
            	}

Dynamic ZPP_IContact_obj::__CreateEmpty() { return new ZPP_IContact_obj; }

void *ZPP_IContact_obj::_hx_vtable = 0;

Dynamic ZPP_IContact_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_IContact_obj > _hx_result = new ZPP_IContact_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_IContact_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6a1f79bd;
}

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::elem(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_645_elem)
HXDLIN( 645)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,elem,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_650_begin)
HXDLIN( 650)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,begin,return )

void ZPP_IContact_obj::setbegin( ::zpp_nape::dynamics::ZPP_IContact i){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_658_setbegin)
HXLINE( 659)		this->next = i;
HXLINE( 660)		this->modified = true;
HXLINE( 661)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,setbegin,(void))

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::add( ::zpp_nape::dynamics::ZPP_IContact o){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_664_add)
HXDLIN( 664)		o->_inuse = true;
HXDLIN( 664)		 ::zpp_nape::dynamics::ZPP_IContact temp = o;
HXDLIN( 664)		temp->next = this->next;
HXDLIN( 664)		this->next = temp;
HXDLIN( 664)		this->modified = true;
HXDLIN( 664)		this->length++;
HXDLIN( 664)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,add,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::inlined_add( ::zpp_nape::dynamics::ZPP_IContact o){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_668_inlined_add)
HXLINE( 678)		o->_inuse = true;
HXLINE( 677)		 ::zpp_nape::dynamics::ZPP_IContact temp = o;
HXLINE( 681)		temp->next = this->next;
HXLINE( 682)		this->next = temp;
HXLINE( 683)		this->modified = true;
HXLINE( 684)		this->length++;
HXLINE( 685)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,inlined_add,return )

void ZPP_IContact_obj::addAll( ::zpp_nape::dynamics::ZPP_IContact x){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_696_addAll)
HXLINE( 697)		 ::zpp_nape::dynamics::ZPP_IContact cx_ite = x->next;
HXLINE( 698)		while(hx::IsNotNull( cx_ite )){
HXLINE( 699)			 ::zpp_nape::dynamics::ZPP_IContact i = cx_ite;
HXLINE( 700)			this->add(i);
HXLINE( 701)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,addAll,(void))

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::insert( ::zpp_nape::dynamics::ZPP_IContact cur, ::zpp_nape::dynamics::ZPP_IContact o){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_706_insert)
HXDLIN( 706)		o->_inuse = true;
HXDLIN( 706)		 ::zpp_nape::dynamics::ZPP_IContact temp = o;
HXDLIN( 706)		if (hx::IsNull( cur )) {
HXDLIN( 706)			temp->next = this->next;
HXDLIN( 706)			this->next = temp;
            		}
            		else {
HXDLIN( 706)			temp->next = cur->next;
HXDLIN( 706)			cur->next = temp;
            		}
HXDLIN( 706)		this->pushmod = (this->modified = true);
HXDLIN( 706)		this->length++;
HXDLIN( 706)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_IContact_obj,insert,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::inlined_insert( ::zpp_nape::dynamics::ZPP_IContact cur, ::zpp_nape::dynamics::ZPP_IContact o){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_710_inlined_insert)
HXLINE( 720)		o->_inuse = true;
HXLINE( 719)		 ::zpp_nape::dynamics::ZPP_IContact temp = o;
HXLINE( 723)		if (hx::IsNull( cur )) {
HXLINE( 724)			temp->next = this->next;
HXLINE( 725)			this->next = temp;
            		}
            		else {
HXLINE( 728)			temp->next = cur->next;
HXLINE( 729)			cur->next = temp;
            		}
HXLINE( 731)		this->pushmod = (this->modified = true);
HXLINE( 732)		this->length++;
HXLINE( 733)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_IContact_obj,inlined_insert,return )

void ZPP_IContact_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_736_pop)
HXDLIN( 736)		 ::zpp_nape::dynamics::ZPP_IContact ret = this->next;
HXDLIN( 736)		this->next = ret->next;
HXDLIN( 736)		ret->_inuse = false;
HXDLIN( 736)		if (hx::IsNull( this->next )) {
HXDLIN( 736)			this->pushmod = true;
            		}
HXDLIN( 736)		this->modified = true;
HXDLIN( 736)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,pop,(void))

void ZPP_IContact_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_740_inlined_pop)
HXLINE( 749)		 ::zpp_nape::dynamics::ZPP_IContact ret = this->next;
HXLINE( 750)		this->next = ret->next;
HXLINE( 752)		ret->_inuse = false;
HXLINE( 755)		if (hx::IsNull( this->next )) {
HXLINE( 755)			this->pushmod = true;
            		}
HXLINE( 756)		this->modified = true;
HXLINE( 757)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,inlined_pop,(void))

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_760_pop_unsafe)
HXDLIN( 760)		 ::zpp_nape::dynamics::ZPP_IContact ret = this->next;
HXDLIN( 760)		this->pop();
HXDLIN( 760)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,pop_unsafe,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_764_inlined_pop_unsafe)
HXLINE( 773)		 ::zpp_nape::dynamics::ZPP_IContact ret = this->next;
HXLINE( 774)		this->pop();
HXLINE( 775)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,inlined_pop_unsafe,return )

void ZPP_IContact_obj::remove( ::zpp_nape::dynamics::ZPP_IContact obj){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_786_remove)
HXDLIN( 786)		 ::zpp_nape::dynamics::ZPP_IContact pre = null();
HXDLIN( 786)		 ::zpp_nape::dynamics::ZPP_IContact cur = this->next;
HXDLIN( 786)		bool ret = false;
HXDLIN( 786)		while(hx::IsNotNull( cur )){
HXDLIN( 786)			if (hx::IsEq( cur,obj )) {
HXDLIN( 786)				{
HXDLIN( 786)					 ::zpp_nape::dynamics::ZPP_IContact old;
HXDLIN( 786)					 ::zpp_nape::dynamics::ZPP_IContact ret1;
HXDLIN( 786)					if (hx::IsNull( pre )) {
HXDLIN( 786)						old = this->next;
HXDLIN( 786)						ret1 = old->next;
HXDLIN( 786)						this->next = ret1;
HXDLIN( 786)						if (hx::IsNull( this->next )) {
HXDLIN( 786)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 786)						old = pre->next;
HXDLIN( 786)						ret1 = old->next;
HXDLIN( 786)						pre->next = ret1;
HXDLIN( 786)						if (hx::IsNull( ret1 )) {
HXDLIN( 786)							this->pushmod = true;
            						}
            					}
HXDLIN( 786)					old->_inuse = false;
HXDLIN( 786)					this->modified = true;
HXDLIN( 786)					this->length--;
HXDLIN( 786)					this->pushmod = true;
            				}
HXDLIN( 786)				ret = true;
HXDLIN( 786)				goto _hx_goto_14;
            			}
HXDLIN( 786)			pre = cur;
HXDLIN( 786)			cur = cur->next;
            		}
            		_hx_goto_14:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,remove,(void))

bool ZPP_IContact_obj::try_remove( ::zpp_nape::dynamics::ZPP_IContact obj){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_788_try_remove)
HXLINE( 797)		 ::zpp_nape::dynamics::ZPP_IContact pre = null();
HXLINE( 798)		 ::zpp_nape::dynamics::ZPP_IContact cur = this->next;
HXLINE( 799)		bool ret = false;
HXLINE( 800)		while(hx::IsNotNull( cur )){
HXLINE( 801)			if (hx::IsEq( cur,obj )) {
HXLINE( 802)				this->erase(pre);
HXLINE( 803)				ret = true;
HXLINE( 804)				goto _hx_goto_16;
            			}
HXLINE( 806)			pre = cur;
HXLINE( 807)			cur = cur->next;
            		}
            		_hx_goto_16:;
HXLINE( 809)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,try_remove,return )

void ZPP_IContact_obj::inlined_remove( ::zpp_nape::dynamics::ZPP_IContact obj){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_822_inlined_remove)
HXDLIN( 822)		 ::zpp_nape::dynamics::ZPP_IContact pre = null();
HXDLIN( 822)		 ::zpp_nape::dynamics::ZPP_IContact cur = this->next;
HXDLIN( 822)		bool ret = false;
HXDLIN( 822)		while(hx::IsNotNull( cur )){
HXDLIN( 822)			if (hx::IsEq( cur,obj )) {
HXDLIN( 822)				{
HXDLIN( 822)					 ::zpp_nape::dynamics::ZPP_IContact old;
HXDLIN( 822)					 ::zpp_nape::dynamics::ZPP_IContact ret1;
HXDLIN( 822)					if (hx::IsNull( pre )) {
HXDLIN( 822)						old = this->next;
HXDLIN( 822)						ret1 = old->next;
HXDLIN( 822)						this->next = ret1;
HXDLIN( 822)						if (hx::IsNull( this->next )) {
HXDLIN( 822)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 822)						old = pre->next;
HXDLIN( 822)						ret1 = old->next;
HXDLIN( 822)						pre->next = ret1;
HXDLIN( 822)						if (hx::IsNull( ret1 )) {
HXDLIN( 822)							this->pushmod = true;
            						}
            					}
HXDLIN( 822)					old->_inuse = false;
HXDLIN( 822)					this->modified = true;
HXDLIN( 822)					this->length--;
HXDLIN( 822)					this->pushmod = true;
            				}
HXDLIN( 822)				ret = true;
HXDLIN( 822)				goto _hx_goto_18;
            			}
HXDLIN( 822)			pre = cur;
HXDLIN( 822)			cur = cur->next;
            		}
            		_hx_goto_18:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,inlined_remove,(void))

bool ZPP_IContact_obj::inlined_try_remove( ::zpp_nape::dynamics::ZPP_IContact obj){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_826_inlined_try_remove)
HXLINE( 835)		 ::zpp_nape::dynamics::ZPP_IContact pre = null();
HXLINE( 836)		 ::zpp_nape::dynamics::ZPP_IContact cur = this->next;
HXLINE( 837)		bool ret = false;
HXLINE( 838)		while(hx::IsNotNull( cur )){
HXLINE( 839)			if (hx::IsEq( cur,obj )) {
HXLINE( 840)				{
HXLINE( 840)					 ::zpp_nape::dynamics::ZPP_IContact old;
HXDLIN( 840)					 ::zpp_nape::dynamics::ZPP_IContact ret1;
HXDLIN( 840)					if (hx::IsNull( pre )) {
HXLINE( 840)						old = this->next;
HXDLIN( 840)						ret1 = old->next;
HXDLIN( 840)						this->next = ret1;
HXDLIN( 840)						if (hx::IsNull( this->next )) {
HXLINE( 840)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 840)						old = pre->next;
HXDLIN( 840)						ret1 = old->next;
HXDLIN( 840)						pre->next = ret1;
HXDLIN( 840)						if (hx::IsNull( ret1 )) {
HXLINE( 840)							this->pushmod = true;
            						}
            					}
HXDLIN( 840)					old->_inuse = false;
HXDLIN( 840)					this->modified = true;
HXDLIN( 840)					this->length--;
HXDLIN( 840)					this->pushmod = true;
            				}
HXLINE( 841)				ret = true;
HXLINE( 842)				goto _hx_goto_20;
            			}
HXLINE( 844)			pre = cur;
HXLINE( 845)			cur = cur->next;
            		}
            		_hx_goto_20:;
HXLINE( 847)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,inlined_try_remove,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::erase( ::zpp_nape::dynamics::ZPP_IContact pre){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_850_erase)
HXDLIN( 850)		 ::zpp_nape::dynamics::ZPP_IContact old;
HXDLIN( 850)		 ::zpp_nape::dynamics::ZPP_IContact ret;
HXDLIN( 850)		if (hx::IsNull( pre )) {
HXDLIN( 850)			old = this->next;
HXDLIN( 850)			ret = old->next;
HXDLIN( 850)			this->next = ret;
HXDLIN( 850)			if (hx::IsNull( this->next )) {
HXDLIN( 850)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN( 850)			old = pre->next;
HXDLIN( 850)			ret = old->next;
HXDLIN( 850)			pre->next = ret;
HXDLIN( 850)			if (hx::IsNull( ret )) {
HXDLIN( 850)				this->pushmod = true;
            			}
            		}
HXDLIN( 850)		old->_inuse = false;
HXDLIN( 850)		this->modified = true;
HXDLIN( 850)		this->length--;
HXDLIN( 850)		this->pushmod = true;
HXDLIN( 850)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,erase,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::inlined_erase( ::zpp_nape::dynamics::ZPP_IContact pre){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_854_inlined_erase)
HXLINE( 863)		 ::zpp_nape::dynamics::ZPP_IContact old;
HXLINE( 864)		 ::zpp_nape::dynamics::ZPP_IContact ret;
HXLINE( 865)		if (hx::IsNull( pre )) {
HXLINE( 866)			old = this->next;
HXLINE( 867)			ret = old->next;
HXLINE( 868)			this->next = ret;
HXLINE( 869)			if (hx::IsNull( this->next )) {
HXLINE( 869)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 872)			old = pre->next;
HXLINE( 873)			ret = old->next;
HXLINE( 874)			pre->next = ret;
HXLINE( 875)			if (hx::IsNull( ret )) {
HXLINE( 875)				this->pushmod = true;
            			}
            		}
HXLINE( 878)		old->_inuse = false;
HXLINE( 881)		this->modified = true;
HXLINE( 882)		this->length--;
HXLINE( 883)		this->pushmod = true;
HXLINE( 884)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,inlined_erase,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::splice( ::zpp_nape::dynamics::ZPP_IContact pre,int n){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_886_splice)
HXLINE( 887)		while(true){
HXLINE( 887)			bool _hx_tmp;
HXDLIN( 887)			n = (n - 1);
HXDLIN( 887)			if (((n + 1) > 0)) {
HXLINE( 887)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 887)				_hx_tmp = false;
            			}
HXDLIN( 887)			if (!(_hx_tmp)) {
HXLINE( 887)				goto _hx_goto_24;
            			}
HXDLIN( 887)			this->erase(pre);
            		}
            		_hx_goto_24:;
HXLINE( 888)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_IContact_obj,splice,return )

void ZPP_IContact_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_891_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,clear,(void))

void ZPP_IContact_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_896_inlined_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,inlined_clear,(void))

void ZPP_IContact_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_901_reverse)
HXLINE( 902)		 ::zpp_nape::dynamics::ZPP_IContact cur = this->next;
HXLINE( 903)		 ::zpp_nape::dynamics::ZPP_IContact pre = null();
HXLINE( 904)		while(hx::IsNotNull( cur )){
HXLINE( 905)			 ::zpp_nape::dynamics::ZPP_IContact nx = cur->next;
HXLINE( 906)			cur->next = pre;
HXLINE( 907)			this->next = cur;
HXLINE( 908)			pre = cur;
HXLINE( 909)			cur = nx;
            		}
HXLINE( 911)		this->modified = true;
HXLINE( 912)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,reverse,(void))

bool ZPP_IContact_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_917_empty)
HXDLIN( 917)		return hx::IsNull( this->next );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,empty,return )

int ZPP_IContact_obj::size(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_922_size)
HXDLIN( 922)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,size,return )

bool ZPP_IContact_obj::has( ::zpp_nape::dynamics::ZPP_IContact obj){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_925_has)
HXDLIN( 925)		bool ret;
HXDLIN( 925)		{
HXDLIN( 925)			ret = false;
HXDLIN( 925)			{
HXDLIN( 925)				 ::zpp_nape::dynamics::ZPP_IContact cx_ite = this->next;
HXDLIN( 925)				while(hx::IsNotNull( cx_ite )){
HXDLIN( 925)					 ::zpp_nape::dynamics::ZPP_IContact npite = cx_ite;
HXDLIN( 925)					if (hx::IsEq( npite,obj )) {
HXDLIN( 925)						ret = true;
HXDLIN( 925)						goto _hx_goto_32;
            					}
HXDLIN( 925)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_32:;
            			}
            		}
HXDLIN( 925)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,has,return )

bool ZPP_IContact_obj::inlined_has( ::zpp_nape::dynamics::ZPP_IContact obj){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_929_inlined_has)
HXLINE( 938)		bool ret;
HXLINE( 939)		{
HXLINE( 940)			ret = false;
HXLINE( 941)			{
HXLINE( 942)				 ::zpp_nape::dynamics::ZPP_IContact cx_ite = this->next;
HXLINE( 943)				while(hx::IsNotNull( cx_ite )){
HXLINE( 944)					 ::zpp_nape::dynamics::ZPP_IContact npite = cx_ite;
HXLINE( 946)					if (hx::IsEq( npite,obj )) {
HXLINE( 947)						ret = true;
HXLINE( 948)						goto _hx_goto_34;
            					}
HXLINE( 951)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_34:;
            			}
            		}
HXLINE( 955)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,inlined_has,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::front(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_960_front)
HXDLIN( 960)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,front,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::back(){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_962_back)
HXLINE( 963)		 ::zpp_nape::dynamics::ZPP_IContact ret = this->next;
HXLINE( 964)		 ::zpp_nape::dynamics::ZPP_IContact cur = ret;
HXLINE( 965)		while(hx::IsNotNull( cur )){
HXLINE( 966)			ret = cur;
HXLINE( 967)			cur = cur->next;
            		}
HXLINE( 969)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_IContact_obj,back,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_971_iterator_at)
HXLINE( 980)		 ::zpp_nape::dynamics::ZPP_IContact ret = this->next;
HXLINE( 981)		while(true){
HXLINE( 981)			bool _hx_tmp;
HXDLIN( 981)			ind = (ind - 1);
HXDLIN( 981)			if (((ind + 1) > 0)) {
HXLINE( 981)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE( 981)				_hx_tmp = false;
            			}
HXDLIN( 981)			if (!(_hx_tmp)) {
HXLINE( 981)				goto _hx_goto_39;
            			}
HXDLIN( 981)			ret = ret->next;
            		}
            		_hx_goto_39:;
HXLINE( 982)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,iterator_at,return )

 ::zpp_nape::dynamics::ZPP_IContact ZPP_IContact_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_984_at)
HXLINE( 993)		 ::zpp_nape::dynamics::ZPP_IContact it = this->iterator_at(ind);
HXLINE( 994)		if (hx::IsNotNull( it )) {
HXLINE( 994)			return it;
            		}
            		else {
HXLINE( 994)			return null();
            		}
HXDLIN( 994)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_IContact_obj,at,return )


ZPP_IContact_obj::ZPP_IContact_obj()
{
}

void ZPP_IContact_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_IContact);
	HX_MARK_MEMBER_NAME(r1x,"r1x");
	HX_MARK_MEMBER_NAME(r1y,"r1y");
	HX_MARK_MEMBER_NAME(r2x,"r2x");
	HX_MARK_MEMBER_NAME(r2y,"r2y");
	HX_MARK_MEMBER_NAME(nMass,"nMass");
	HX_MARK_MEMBER_NAME(tMass,"tMass");
	HX_MARK_MEMBER_NAME(bounce,"bounce");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_MEMBER_NAME(jnAcc,"jnAcc");
	HX_MARK_MEMBER_NAME(jtAcc,"jtAcc");
	HX_MARK_MEMBER_NAME(lr1x,"lr1x");
	HX_MARK_MEMBER_NAME(lr1y,"lr1y");
	HX_MARK_MEMBER_NAME(lr2x,"lr2x");
	HX_MARK_MEMBER_NAME(lr2y,"lr2y");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(_inuse,"_inuse");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZPP_IContact_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(r1x,"r1x");
	HX_VISIT_MEMBER_NAME(r1y,"r1y");
	HX_VISIT_MEMBER_NAME(r2x,"r2x");
	HX_VISIT_MEMBER_NAME(r2y,"r2y");
	HX_VISIT_MEMBER_NAME(nMass,"nMass");
	HX_VISIT_MEMBER_NAME(tMass,"tMass");
	HX_VISIT_MEMBER_NAME(bounce,"bounce");
	HX_VISIT_MEMBER_NAME(friction,"friction");
	HX_VISIT_MEMBER_NAME(jnAcc,"jnAcc");
	HX_VISIT_MEMBER_NAME(jtAcc,"jtAcc");
	HX_VISIT_MEMBER_NAME(lr1x,"lr1x");
	HX_VISIT_MEMBER_NAME(lr1y,"lr1y");
	HX_VISIT_MEMBER_NAME(lr2x,"lr2x");
	HX_VISIT_MEMBER_NAME(lr2y,"lr2y");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(_inuse,"_inuse");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZPP_IContact_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"r1x") ) { return hx::Val( r1x ); }
		if (HX_FIELD_EQ(inName,"r1y") ) { return hx::Val( r1y ); }
		if (HX_FIELD_EQ(inName,"r2x") ) { return hx::Val( r2x ); }
		if (HX_FIELD_EQ(inName,"r2y") ) { return hx::Val( r2y ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lr1x") ) { return hx::Val( lr1x ); }
		if (HX_FIELD_EQ(inName,"lr1y") ) { return hx::Val( lr1y ); }
		if (HX_FIELD_EQ(inName,"lr2x") ) { return hx::Val( lr2x ); }
		if (HX_FIELD_EQ(inName,"lr2y") ) { return hx::Val( lr2y ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"elem") ) { return hx::Val( elem_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nMass") ) { return hx::Val( nMass ); }
		if (HX_FIELD_EQ(inName,"tMass") ) { return hx::Val( tMass ); }
		if (HX_FIELD_EQ(inName,"jnAcc") ) { return hx::Val( jnAcc ); }
		if (HX_FIELD_EQ(inName,"jtAcc") ) { return hx::Val( jtAcc ); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounce") ) { return hx::Val( bounce ); }
		if (HX_FIELD_EQ(inName,"_inuse") ) { return hx::Val( _inuse ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { return hx::Val( friction ); }
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_IContact_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"r1x") ) { r1x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r1y") ) { r1y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r2x") ) { r2x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r2y") ) { r2y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lr1x") ) { lr1x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lr1y") ) { lr1y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lr2x") ) { lr2x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lr2y") ) { lr2y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::dynamics::ZPP_IContact >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nMass") ) { nMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tMass") ) { tMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jnAcc") ) { jnAcc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jtAcc") ) { jtAcc=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounce") ) { bounce=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_inuse") ) { _inuse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_IContact_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("r1x",19,ac,56,00));
	outFields->push(HX_("r1y",1a,ac,56,00));
	outFields->push(HX_("r2x",f8,ac,56,00));
	outFields->push(HX_("r2y",f9,ac,56,00));
	outFields->push(HX_("nMass",82,3c,43,89));
	outFields->push(HX_("tMass",88,b7,aa,fd));
	outFields->push(HX_("bounce",88,85,1d,66));
	outFields->push(HX_("friction",fa,78,c9,97));
	outFields->push(HX_("jnAcc",dd,9e,60,51));
	outFields->push(HX_("jtAcc",97,e6,57,55));
	outFields->push(HX_("lr1x",2d,b7,b9,47));
	outFields->push(HX_("lr1y",2e,b7,b9,47));
	outFields->push(HX_("lr2x",0c,b8,b9,47));
	outFields->push(HX_("lr2y",0d,b8,b9,47));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("_inuse",c3,d4,08,ba));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_IContact_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,r1x),HX_("r1x",19,ac,56,00)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,r1y),HX_("r1y",1a,ac,56,00)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,r2x),HX_("r2x",f8,ac,56,00)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,r2y),HX_("r2y",f9,ac,56,00)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,nMass),HX_("nMass",82,3c,43,89)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,tMass),HX_("tMass",88,b7,aa,fd)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,bounce),HX_("bounce",88,85,1d,66)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,friction),HX_("friction",fa,78,c9,97)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,jnAcc),HX_("jnAcc",dd,9e,60,51)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,jtAcc),HX_("jtAcc",97,e6,57,55)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,lr1x),HX_("lr1x",2d,b7,b9,47)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,lr1y),HX_("lr1y",2e,b7,b9,47)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,lr2x),HX_("lr2x",0c,b8,b9,47)},
	{hx::fsFloat,(int)offsetof(ZPP_IContact_obj,lr2y),HX_("lr2y",0d,b8,b9,47)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_IContact */ ,(int)offsetof(ZPP_IContact_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsBool,(int)offsetof(ZPP_IContact_obj,_inuse),HX_("_inuse",c3,d4,08,ba)},
	{hx::fsBool,(int)offsetof(ZPP_IContact_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZPP_IContact_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZPP_IContact_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_IContact_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_IContact_obj_sMemberFields[] = {
	HX_("r1x",19,ac,56,00),
	HX_("r1y",1a,ac,56,00),
	HX_("r2x",f8,ac,56,00),
	HX_("r2y",f9,ac,56,00),
	HX_("nMass",82,3c,43,89),
	HX_("tMass",88,b7,aa,fd),
	HX_("bounce",88,85,1d,66),
	HX_("friction",fa,78,c9,97),
	HX_("jnAcc",dd,9e,60,51),
	HX_("jtAcc",97,e6,57,55),
	HX_("lr1x",2d,b7,b9,47),
	HX_("lr1y",2e,b7,b9,47),
	HX_("lr2x",0c,b8,b9,47),
	HX_("lr2y",0d,b8,b9,47),
	HX_("next",f3,84,02,49),
	HX_("elem",8f,d8,14,43),
	HX_("begin",29,ea,55,b0),
	HX_("_inuse",c3,d4,08,ba),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	::String(null()) };

hx::Class ZPP_IContact_obj::__mClass;

void ZPP_IContact_obj::__register()
{
	ZPP_IContact_obj _hx_dummy;
	ZPP_IContact_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.dynamics.ZPP_IContact",95,c9,6c,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_IContact_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_IContact_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_IContact_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_IContact_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace dynamics
