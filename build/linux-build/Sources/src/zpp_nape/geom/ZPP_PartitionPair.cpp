// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionPair
#include <hxinc/zpp_nape/geom/ZPP_PartitionPair.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <hxinc/zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionPair
#include <hxinc/zpp_nape/util/ZPP_Set_ZPP_PartitionPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_02ad1aad4e592309_174_new,"zpp_nape.geom.ZPP_PartitionPair","new",0x9bb0ae20,"zpp_nape.geom.ZPP_PartitionPair.new","zpp_nape/geom/Triangular.hx",174,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_203_elem,"zpp_nape.geom.ZPP_PartitionPair","elem",0x98fa02cf,"zpp_nape.geom.ZPP_PartitionPair.elem","zpp_nape/geom/Triangular.hx",203,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_208_begin,"zpp_nape.geom.ZPP_PartitionPair","begin",0x82f5b7e9,"zpp_nape.geom.ZPP_PartitionPair.begin","zpp_nape/geom/Triangular.hx",208,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_216_setbegin,"zpp_nape.geom.ZPP_PartitionPair","setbegin",0x85c42d87,"zpp_nape.geom.ZPP_PartitionPair.setbegin","zpp_nape/geom/Triangular.hx",216,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_222_add,"zpp_nape.geom.ZPP_PartitionPair","add",0x9ba6cfe1,"zpp_nape.geom.ZPP_PartitionPair.add","zpp_nape/geom/Triangular.hx",222,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_226_inlined_add,"zpp_nape.geom.ZPP_PartitionPair","inlined_add",0xf63eea4d,"zpp_nape.geom.ZPP_PartitionPair.inlined_add","zpp_nape/geom/Triangular.hx",226,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_254_addAll,"zpp_nape.geom.ZPP_PartitionPair","addAll",0x182f43c0,"zpp_nape.geom.ZPP_PartitionPair.addAll","zpp_nape/geom/Triangular.hx",254,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_264_insert,"zpp_nape.geom.ZPP_PartitionPair","insert",0x17117d79,"zpp_nape.geom.ZPP_PartitionPair.insert","zpp_nape/geom/Triangular.hx",264,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_268_inlined_insert,"zpp_nape.geom.ZPP_PartitionPair","inlined_insert",0xe268ae8d,"zpp_nape.geom.ZPP_PartitionPair.inlined_insert","zpp_nape/geom/Triangular.hx",268,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_294_pop,"zpp_nape.geom.ZPP_PartitionPair","pop",0x9bb23b51,"zpp_nape.geom.ZPP_PartitionPair.pop","zpp_nape/geom/Triangular.hx",294,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_298_inlined_pop,"zpp_nape.geom.ZPP_PartitionPair","inlined_pop",0xf64a55bd,"zpp_nape.geom.ZPP_PartitionPair.inlined_pop","zpp_nape/geom/Triangular.hx",298,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_318_pop_unsafe,"zpp_nape.geom.ZPP_PartitionPair","pop_unsafe",0xb06ad694,"zpp_nape.geom.ZPP_PartitionPair.pop_unsafe","zpp_nape/geom/Triangular.hx",318,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_322_inlined_pop_unsafe,"zpp_nape.geom.ZPP_PartitionPair","inlined_pop_unsafe",0x99b221a8,"zpp_nape.geom.ZPP_PartitionPair.inlined_pop_unsafe","zpp_nape/geom/Triangular.hx",322,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_344_remove,"zpp_nape.geom.ZPP_PartitionPair","remove",0x7dbcd684,"zpp_nape.geom.ZPP_PartitionPair.remove","zpp_nape/geom/Triangular.hx",344,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_346_try_remove,"zpp_nape.geom.ZPP_PartitionPair","try_remove",0xc7950c48,"zpp_nape.geom.ZPP_PartitionPair.try_remove","zpp_nape/geom/Triangular.hx",346,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_380_inlined_remove,"zpp_nape.geom.ZPP_PartitionPair","inlined_remove",0x49140798,"zpp_nape.geom.ZPP_PartitionPair.inlined_remove","zpp_nape/geom/Triangular.hx",380,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_384_inlined_try_remove,"zpp_nape.geom.ZPP_PartitionPair","inlined_try_remove",0xb0dc575c,"zpp_nape.geom.ZPP_PartitionPair.inlined_try_remove","zpp_nape/geom/Triangular.hx",384,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_408_erase,"zpp_nape.geom.ZPP_PartitionPair","erase",0x45bcb6a6,"zpp_nape.geom.ZPP_PartitionPair.erase","zpp_nape/geom/Triangular.hx",408,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_412_inlined_erase,"zpp_nape.geom.ZPP_PartitionPair","inlined_erase",0x8a614412,"zpp_nape.geom.ZPP_PartitionPair.inlined_erase","zpp_nape/geom/Triangular.hx",412,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_444_splice,"zpp_nape.geom.ZPP_PartitionPair","splice",0x38d2bfbc,"zpp_nape.geom.ZPP_PartitionPair.splice","zpp_nape/geom/Triangular.hx",444,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_449_clear,"zpp_nape.geom.ZPP_PartitionPair","clear",0x1afb3f4d,"zpp_nape.geom.ZPP_PartitionPair.clear","zpp_nape/geom/Triangular.hx",449,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_454_inlined_clear,"zpp_nape.geom.ZPP_PartitionPair","inlined_clear",0x5f9fccb9,"zpp_nape.geom.ZPP_PartitionPair.inlined_clear","zpp_nape/geom/Triangular.hx",454,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_459_reverse,"zpp_nape.geom.ZPP_PartitionPair","reverse",0xaf7af6e2,"zpp_nape.geom.ZPP_PartitionPair.reverse","zpp_nape/geom/Triangular.hx",459,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_475_empty,"zpp_nape.geom.ZPP_PartitionPair","empty",0x427a084d,"zpp_nape.geom.ZPP_PartitionPair.empty","zpp_nape/geom/Triangular.hx",475,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_480_size,"zpp_nape.geom.ZPP_PartitionPair","size",0xa238cb01,"zpp_nape.geom.ZPP_PartitionPair.size","zpp_nape/geom/Triangular.hx",480,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_483_has,"zpp_nape.geom.ZPP_PartitionPair","has",0x9bac1d1a,"zpp_nape.geom.ZPP_PartitionPair.has","zpp_nape/geom/Triangular.hx",483,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_487_inlined_has,"zpp_nape.geom.ZPP_PartitionPair","inlined_has",0xf6443786,"zpp_nape.geom.ZPP_PartitionPair.inlined_has","zpp_nape/geom/Triangular.hx",487,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_518_front,"zpp_nape.geom.ZPP_PartitionPair","front",0xd92de669,"zpp_nape.geom.ZPP_PartitionPair.front","zpp_nape/geom/Triangular.hx",518,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_520_back,"zpp_nape.geom.ZPP_PartitionPair","back",0x96f60467,"zpp_nape.geom.ZPP_PartitionPair.back","zpp_nape/geom/Triangular.hx",520,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_529_iterator_at,"zpp_nape.geom.ZPP_PartitionPair","iterator_at",0xfae327a4,"zpp_nape.geom.ZPP_PartitionPair.iterator_at","zpp_nape/geom/Triangular.hx",529,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_542_at,"zpp_nape.geom.ZPP_PartitionPair","at",0xef7a6f33,"zpp_nape.geom.ZPP_PartitionPair.at","zpp_nape/geom/Triangular.hx",542,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_556_free,"zpp_nape.geom.ZPP_PartitionPair","free",0x99a7c6ec,"zpp_nape.geom.ZPP_PartitionPair.free","zpp_nape/geom/Triangular.hx",556,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_562_alloc,"zpp_nape.geom.ZPP_PartitionPair","alloc",0xf4337235,"zpp_nape.geom.ZPP_PartitionPair.alloc","zpp_nape/geom/Triangular.hx",562,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_569_get,"zpp_nape.geom.ZPP_PartitionPair","get",0x9bab5e56,"zpp_nape.geom.ZPP_PartitionPair.get","zpp_nape/geom/Triangular.hx",569,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_602_edge_swap,"zpp_nape.geom.ZPP_PartitionPair","edge_swap",0x6d8a2ed5,"zpp_nape.geom.ZPP_PartitionPair.edge_swap","zpp_nape/geom/Triangular.hx",602,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_609_edge_lt,"zpp_nape.geom.ZPP_PartitionPair","edge_lt",0x89776e4a,"zpp_nape.geom.ZPP_PartitionPair.edge_lt","zpp_nape/geom/Triangular.hx",609,0x53295a96)
HX_LOCAL_STACK_FRAME(_hx_pos_02ad1aad4e592309_175_boot,"zpp_nape.geom.ZPP_PartitionPair","boot",0x9700ae72,"zpp_nape.geom.ZPP_PartitionPair.boot","zpp_nape/geom/Triangular.hx",175,0x53295a96)
namespace zpp_nape{
namespace geom{

void ZPP_PartitionPair_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_174_new)
HXLINE( 600)		this->node = null();
HXLINE( 566)		this->di = 0;
HXLINE( 565)		this->id = 0;
HXLINE( 564)		this->b = null();
HXLINE( 563)		this->a = null();
HXLINE( 213)		this->length = 0;
HXLINE( 212)		this->pushmod = false;
HXLINE( 211)		this->modified = false;
HXLINE( 210)		this->_inuse = false;
HXLINE( 199)		this->next = null();
            	}

Dynamic ZPP_PartitionPair_obj::__CreateEmpty() { return new ZPP_PartitionPair_obj; }

void *ZPP_PartitionPair_obj::_hx_vtable = 0;

Dynamic ZPP_PartitionPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_PartitionPair_obj > _hx_result = new ZPP_PartitionPair_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_PartitionPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x18baedb6;
}

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::elem(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_203_elem)
HXDLIN( 203)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,elem,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_208_begin)
HXDLIN( 208)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,begin,return )

void ZPP_PartitionPair_obj::setbegin( ::zpp_nape::geom::ZPP_PartitionPair i){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_216_setbegin)
HXLINE( 217)		this->next = i;
HXLINE( 218)		this->modified = true;
HXLINE( 219)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::add( ::zpp_nape::geom::ZPP_PartitionPair o){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_222_add)
HXDLIN( 222)		o->_inuse = true;
HXDLIN( 222)		 ::zpp_nape::geom::ZPP_PartitionPair temp = o;
HXDLIN( 222)		temp->next = this->next;
HXDLIN( 222)		this->next = temp;
HXDLIN( 222)		this->modified = true;
HXDLIN( 222)		this->length++;
HXDLIN( 222)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,add,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::inlined_add( ::zpp_nape::geom::ZPP_PartitionPair o){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_226_inlined_add)
HXLINE( 236)		o->_inuse = true;
HXLINE( 235)		 ::zpp_nape::geom::ZPP_PartitionPair temp = o;
HXLINE( 239)		temp->next = this->next;
HXLINE( 240)		this->next = temp;
HXLINE( 241)		this->modified = true;
HXLINE( 242)		this->length++;
HXLINE( 243)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,inlined_add,return )

void ZPP_PartitionPair_obj::addAll( ::zpp_nape::geom::ZPP_PartitionPair x){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_254_addAll)
HXLINE( 255)		 ::zpp_nape::geom::ZPP_PartitionPair cx_ite = x->next;
HXLINE( 256)		while(hx::IsNotNull( cx_ite )){
HXLINE( 257)			 ::zpp_nape::geom::ZPP_PartitionPair i = cx_ite;
HXLINE( 258)			this->add(i);
HXLINE( 259)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,addAll,(void))

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::insert( ::zpp_nape::geom::ZPP_PartitionPair cur, ::zpp_nape::geom::ZPP_PartitionPair o){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_264_insert)
HXDLIN( 264)		o->_inuse = true;
HXDLIN( 264)		 ::zpp_nape::geom::ZPP_PartitionPair temp = o;
HXDLIN( 264)		if (hx::IsNull( cur )) {
HXDLIN( 264)			temp->next = this->next;
HXDLIN( 264)			this->next = temp;
            		}
            		else {
HXDLIN( 264)			temp->next = cur->next;
HXDLIN( 264)			cur->next = temp;
            		}
HXDLIN( 264)		this->pushmod = (this->modified = true);
HXDLIN( 264)		this->length++;
HXDLIN( 264)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionPair_obj,insert,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::inlined_insert( ::zpp_nape::geom::ZPP_PartitionPair cur, ::zpp_nape::geom::ZPP_PartitionPair o){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_268_inlined_insert)
HXLINE( 278)		o->_inuse = true;
HXLINE( 277)		 ::zpp_nape::geom::ZPP_PartitionPair temp = o;
HXLINE( 281)		if (hx::IsNull( cur )) {
HXLINE( 282)			temp->next = this->next;
HXLINE( 283)			this->next = temp;
            		}
            		else {
HXLINE( 286)			temp->next = cur->next;
HXLINE( 287)			cur->next = temp;
            		}
HXLINE( 289)		this->pushmod = (this->modified = true);
HXLINE( 290)		this->length++;
HXLINE( 291)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionPair_obj,inlined_insert,return )

void ZPP_PartitionPair_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_294_pop)
HXDLIN( 294)		 ::zpp_nape::geom::ZPP_PartitionPair ret = this->next;
HXDLIN( 294)		this->next = ret->next;
HXDLIN( 294)		ret->_inuse = false;
HXDLIN( 294)		if (hx::IsNull( this->next )) {
HXDLIN( 294)			this->pushmod = true;
            		}
HXDLIN( 294)		this->modified = true;
HXDLIN( 294)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,pop,(void))

void ZPP_PartitionPair_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_298_inlined_pop)
HXLINE( 307)		 ::zpp_nape::geom::ZPP_PartitionPair ret = this->next;
HXLINE( 308)		this->next = ret->next;
HXLINE( 310)		ret->_inuse = false;
HXLINE( 313)		if (hx::IsNull( this->next )) {
HXLINE( 313)			this->pushmod = true;
            		}
HXLINE( 314)		this->modified = true;
HXLINE( 315)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_318_pop_unsafe)
HXDLIN( 318)		 ::zpp_nape::geom::ZPP_PartitionPair ret = this->next;
HXDLIN( 318)		this->pop();
HXDLIN( 318)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_322_inlined_pop_unsafe)
HXLINE( 331)		 ::zpp_nape::geom::ZPP_PartitionPair ret = this->next;
HXLINE( 332)		this->pop();
HXLINE( 333)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,inlined_pop_unsafe,return )

void ZPP_PartitionPair_obj::remove( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_344_remove)
HXDLIN( 344)		 ::zpp_nape::geom::ZPP_PartitionPair pre = null();
HXDLIN( 344)		 ::zpp_nape::geom::ZPP_PartitionPair cur = this->next;
HXDLIN( 344)		bool ret = false;
HXDLIN( 344)		while(hx::IsNotNull( cur )){
HXDLIN( 344)			if (hx::IsEq( cur,obj )) {
HXDLIN( 344)				{
HXDLIN( 344)					 ::zpp_nape::geom::ZPP_PartitionPair old;
HXDLIN( 344)					 ::zpp_nape::geom::ZPP_PartitionPair ret1;
HXDLIN( 344)					if (hx::IsNull( pre )) {
HXDLIN( 344)						old = this->next;
HXDLIN( 344)						ret1 = old->next;
HXDLIN( 344)						this->next = ret1;
HXDLIN( 344)						if (hx::IsNull( this->next )) {
HXDLIN( 344)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 344)						old = pre->next;
HXDLIN( 344)						ret1 = old->next;
HXDLIN( 344)						pre->next = ret1;
HXDLIN( 344)						if (hx::IsNull( ret1 )) {
HXDLIN( 344)							this->pushmod = true;
            						}
            					}
HXDLIN( 344)					old->_inuse = false;
HXDLIN( 344)					this->modified = true;
HXDLIN( 344)					this->length--;
HXDLIN( 344)					this->pushmod = true;
            				}
HXDLIN( 344)				ret = true;
HXDLIN( 344)				goto _hx_goto_14;
            			}
HXDLIN( 344)			pre = cur;
HXDLIN( 344)			cur = cur->next;
            		}
            		_hx_goto_14:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,remove,(void))

bool ZPP_PartitionPair_obj::try_remove( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_346_try_remove)
HXLINE( 355)		 ::zpp_nape::geom::ZPP_PartitionPair pre = null();
HXLINE( 356)		 ::zpp_nape::geom::ZPP_PartitionPair cur = this->next;
HXLINE( 357)		bool ret = false;
HXLINE( 358)		while(hx::IsNotNull( cur )){
HXLINE( 359)			if (hx::IsEq( cur,obj )) {
HXLINE( 360)				this->erase(pre);
HXLINE( 361)				ret = true;
HXLINE( 362)				goto _hx_goto_16;
            			}
HXLINE( 364)			pre = cur;
HXLINE( 365)			cur = cur->next;
            		}
            		_hx_goto_16:;
HXLINE( 367)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,try_remove,return )

void ZPP_PartitionPair_obj::inlined_remove( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_380_inlined_remove)
HXDLIN( 380)		 ::zpp_nape::geom::ZPP_PartitionPair pre = null();
HXDLIN( 380)		 ::zpp_nape::geom::ZPP_PartitionPair cur = this->next;
HXDLIN( 380)		bool ret = false;
HXDLIN( 380)		while(hx::IsNotNull( cur )){
HXDLIN( 380)			if (hx::IsEq( cur,obj )) {
HXDLIN( 380)				{
HXDLIN( 380)					 ::zpp_nape::geom::ZPP_PartitionPair old;
HXDLIN( 380)					 ::zpp_nape::geom::ZPP_PartitionPair ret1;
HXDLIN( 380)					if (hx::IsNull( pre )) {
HXDLIN( 380)						old = this->next;
HXDLIN( 380)						ret1 = old->next;
HXDLIN( 380)						this->next = ret1;
HXDLIN( 380)						if (hx::IsNull( this->next )) {
HXDLIN( 380)							this->pushmod = true;
            						}
            					}
            					else {
HXDLIN( 380)						old = pre->next;
HXDLIN( 380)						ret1 = old->next;
HXDLIN( 380)						pre->next = ret1;
HXDLIN( 380)						if (hx::IsNull( ret1 )) {
HXDLIN( 380)							this->pushmod = true;
            						}
            					}
HXDLIN( 380)					old->_inuse = false;
HXDLIN( 380)					this->modified = true;
HXDLIN( 380)					this->length--;
HXDLIN( 380)					this->pushmod = true;
            				}
HXDLIN( 380)				ret = true;
HXDLIN( 380)				goto _hx_goto_18;
            			}
HXDLIN( 380)			pre = cur;
HXDLIN( 380)			cur = cur->next;
            		}
            		_hx_goto_18:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,inlined_remove,(void))

bool ZPP_PartitionPair_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_384_inlined_try_remove)
HXLINE( 393)		 ::zpp_nape::geom::ZPP_PartitionPair pre = null();
HXLINE( 394)		 ::zpp_nape::geom::ZPP_PartitionPair cur = this->next;
HXLINE( 395)		bool ret = false;
HXLINE( 396)		while(hx::IsNotNull( cur )){
HXLINE( 397)			if (hx::IsEq( cur,obj )) {
HXLINE( 398)				{
HXLINE( 398)					 ::zpp_nape::geom::ZPP_PartitionPair old;
HXDLIN( 398)					 ::zpp_nape::geom::ZPP_PartitionPair ret1;
HXDLIN( 398)					if (hx::IsNull( pre )) {
HXLINE( 398)						old = this->next;
HXDLIN( 398)						ret1 = old->next;
HXDLIN( 398)						this->next = ret1;
HXDLIN( 398)						if (hx::IsNull( this->next )) {
HXLINE( 398)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 398)						old = pre->next;
HXDLIN( 398)						ret1 = old->next;
HXDLIN( 398)						pre->next = ret1;
HXDLIN( 398)						if (hx::IsNull( ret1 )) {
HXLINE( 398)							this->pushmod = true;
            						}
            					}
HXDLIN( 398)					old->_inuse = false;
HXDLIN( 398)					this->modified = true;
HXDLIN( 398)					this->length--;
HXDLIN( 398)					this->pushmod = true;
            				}
HXLINE( 399)				ret = true;
HXLINE( 400)				goto _hx_goto_20;
            			}
HXLINE( 402)			pre = cur;
HXLINE( 403)			cur = cur->next;
            		}
            		_hx_goto_20:;
HXLINE( 405)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,inlined_try_remove,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::erase( ::zpp_nape::geom::ZPP_PartitionPair pre){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_408_erase)
HXDLIN( 408)		 ::zpp_nape::geom::ZPP_PartitionPair old;
HXDLIN( 408)		 ::zpp_nape::geom::ZPP_PartitionPair ret;
HXDLIN( 408)		if (hx::IsNull( pre )) {
HXDLIN( 408)			old = this->next;
HXDLIN( 408)			ret = old->next;
HXDLIN( 408)			this->next = ret;
HXDLIN( 408)			if (hx::IsNull( this->next )) {
HXDLIN( 408)				this->pushmod = true;
            			}
            		}
            		else {
HXDLIN( 408)			old = pre->next;
HXDLIN( 408)			ret = old->next;
HXDLIN( 408)			pre->next = ret;
HXDLIN( 408)			if (hx::IsNull( ret )) {
HXDLIN( 408)				this->pushmod = true;
            			}
            		}
HXDLIN( 408)		old->_inuse = false;
HXDLIN( 408)		this->modified = true;
HXDLIN( 408)		this->length--;
HXDLIN( 408)		this->pushmod = true;
HXDLIN( 408)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,erase,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::inlined_erase( ::zpp_nape::geom::ZPP_PartitionPair pre){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_412_inlined_erase)
HXLINE( 421)		 ::zpp_nape::geom::ZPP_PartitionPair old;
HXLINE( 422)		 ::zpp_nape::geom::ZPP_PartitionPair ret;
HXLINE( 423)		if (hx::IsNull( pre )) {
HXLINE( 424)			old = this->next;
HXLINE( 425)			ret = old->next;
HXLINE( 426)			this->next = ret;
HXLINE( 427)			if (hx::IsNull( this->next )) {
HXLINE( 427)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 430)			old = pre->next;
HXLINE( 431)			ret = old->next;
HXLINE( 432)			pre->next = ret;
HXLINE( 433)			if (hx::IsNull( ret )) {
HXLINE( 433)				this->pushmod = true;
            			}
            		}
HXLINE( 436)		old->_inuse = false;
HXLINE( 439)		this->modified = true;
HXLINE( 440)		this->length--;
HXLINE( 441)		this->pushmod = true;
HXLINE( 442)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,inlined_erase,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::splice( ::zpp_nape::geom::ZPP_PartitionPair pre,int n){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_444_splice)
HXLINE( 445)		while(true){
HXLINE( 445)			bool _hx_tmp;
HXDLIN( 445)			n = (n - 1);
HXDLIN( 445)			if (((n + 1) > 0)) {
HXLINE( 445)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 445)				_hx_tmp = false;
            			}
HXDLIN( 445)			if (!(_hx_tmp)) {
HXLINE( 445)				goto _hx_goto_24;
            			}
HXDLIN( 445)			this->erase(pre);
            		}
            		_hx_goto_24:;
HXLINE( 446)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionPair_obj,splice,return )

void ZPP_PartitionPair_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_449_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,clear,(void))

void ZPP_PartitionPair_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_454_inlined_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,inlined_clear,(void))

void ZPP_PartitionPair_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_459_reverse)
HXLINE( 460)		 ::zpp_nape::geom::ZPP_PartitionPair cur = this->next;
HXLINE( 461)		 ::zpp_nape::geom::ZPP_PartitionPair pre = null();
HXLINE( 462)		while(hx::IsNotNull( cur )){
HXLINE( 463)			 ::zpp_nape::geom::ZPP_PartitionPair nx = cur->next;
HXLINE( 464)			cur->next = pre;
HXLINE( 465)			this->next = cur;
HXLINE( 466)			pre = cur;
HXLINE( 467)			cur = nx;
            		}
HXLINE( 469)		this->modified = true;
HXLINE( 470)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,reverse,(void))

bool ZPP_PartitionPair_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_475_empty)
HXDLIN( 475)		return hx::IsNull( this->next );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,empty,return )

int ZPP_PartitionPair_obj::size(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_480_size)
HXDLIN( 480)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,size,return )

bool ZPP_PartitionPair_obj::has( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_483_has)
HXDLIN( 483)		bool ret;
HXDLIN( 483)		{
HXDLIN( 483)			ret = false;
HXDLIN( 483)			{
HXDLIN( 483)				 ::zpp_nape::geom::ZPP_PartitionPair cx_ite = this->next;
HXDLIN( 483)				while(hx::IsNotNull( cx_ite )){
HXDLIN( 483)					 ::zpp_nape::geom::ZPP_PartitionPair npite = cx_ite;
HXDLIN( 483)					if (hx::IsEq( npite,obj )) {
HXDLIN( 483)						ret = true;
HXDLIN( 483)						goto _hx_goto_32;
            					}
HXDLIN( 483)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_32:;
            			}
            		}
HXDLIN( 483)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,has,return )

bool ZPP_PartitionPair_obj::inlined_has( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_487_inlined_has)
HXLINE( 496)		bool ret;
HXLINE( 497)		{
HXLINE( 498)			ret = false;
HXLINE( 499)			{
HXLINE( 500)				 ::zpp_nape::geom::ZPP_PartitionPair cx_ite = this->next;
HXLINE( 501)				while(hx::IsNotNull( cx_ite )){
HXLINE( 502)					 ::zpp_nape::geom::ZPP_PartitionPair npite = cx_ite;
HXLINE( 504)					if (hx::IsEq( npite,obj )) {
HXLINE( 505)						ret = true;
HXLINE( 506)						goto _hx_goto_34;
            					}
HXLINE( 509)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_34:;
            			}
            		}
HXLINE( 513)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::front(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_518_front)
HXDLIN( 518)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,front,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::back(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_520_back)
HXLINE( 521)		 ::zpp_nape::geom::ZPP_PartitionPair ret = this->next;
HXLINE( 522)		 ::zpp_nape::geom::ZPP_PartitionPair cur = ret;
HXLINE( 523)		while(hx::IsNotNull( cur )){
HXLINE( 524)			ret = cur;
HXLINE( 525)			cur = cur->next;
            		}
HXLINE( 527)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,back,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_529_iterator_at)
HXLINE( 538)		 ::zpp_nape::geom::ZPP_PartitionPair ret = this->next;
HXLINE( 539)		while(true){
HXLINE( 539)			bool _hx_tmp;
HXDLIN( 539)			ind = (ind - 1);
HXDLIN( 539)			if (((ind + 1) > 0)) {
HXLINE( 539)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE( 539)				_hx_tmp = false;
            			}
HXDLIN( 539)			if (!(_hx_tmp)) {
HXLINE( 539)				goto _hx_goto_39;
            			}
HXDLIN( 539)			ret = ret->next;
            		}
            		_hx_goto_39:;
HXLINE( 540)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_542_at)
HXLINE( 551)		 ::zpp_nape::geom::ZPP_PartitionPair it = this->iterator_at(ind);
HXLINE( 552)		if (hx::IsNotNull( it )) {
HXLINE( 552)			return it;
            		}
            		else {
HXLINE( 552)			return null();
            		}
HXDLIN( 552)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionPair_obj,at,return )

void ZPP_PartitionPair_obj::free(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_556_free)
HXLINE( 557)		this->a = (this->b = null());
HXLINE( 558)		this->node = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,free,(void))

void ZPP_PartitionPair_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_562_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionPair_obj,alloc,(void))

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_PartitionPair_obj::get( ::zpp_nape::geom::ZPP_PartitionVertex a, ::zpp_nape::geom::ZPP_PartitionVertex b){
            	HX_GC_STACKFRAME(&_hx_pos_02ad1aad4e592309_569_get)
HXLINE( 570)		 ::zpp_nape::geom::ZPP_PartitionPair ret;
HXLINE( 572)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE( 573)			ret =  ::zpp_nape::geom::ZPP_PartitionPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 579)			ret = ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool;
HXLINE( 580)			::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool = ret->next;
HXLINE( 581)			ret->next = null();
            		}
HXLINE( 588)		ret->a = a;
HXLINE( 589)		ret->b = b;
HXLINE( 590)		if ((a->id < b->id)) {
HXLINE( 591)			ret->id = a->id;
HXLINE( 592)			ret->di = b->id;
            		}
            		else {
HXLINE( 595)			ret->id = b->id;
HXLINE( 596)			ret->di = a->id;
            		}
HXLINE( 598)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionPair_obj,get,return )

void ZPP_PartitionPair_obj::edge_swap( ::zpp_nape::geom::ZPP_PartitionPair a, ::zpp_nape::geom::ZPP_PartitionPair b){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_602_edge_swap)
HXLINE( 603)		 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair t = a->node;
HXLINE( 604)		a->node = b->node;
HXLINE( 605)		b->node = t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionPair_obj,edge_swap,(void))

bool ZPP_PartitionPair_obj::edge_lt( ::zpp_nape::geom::ZPP_PartitionPair a, ::zpp_nape::geom::ZPP_PartitionPair b){
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_609_edge_lt)
HXDLIN( 609)		if ((a->id >= b->id)) {
HXDLIN( 609)			if ((a->id == b->id)) {
HXDLIN( 609)				return (a->di < b->di);
            			}
            			else {
HXDLIN( 609)				return false;
            			}
            		}
            		else {
HXDLIN( 609)			return true;
            		}
HXDLIN( 609)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionPair_obj,edge_lt,return )


hx::ObjectPtr< ZPP_PartitionPair_obj > ZPP_PartitionPair_obj::__new() {
	hx::ObjectPtr< ZPP_PartitionPair_obj > __this = new ZPP_PartitionPair_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_PartitionPair_obj > ZPP_PartitionPair_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_PartitionPair_obj *__this = (ZPP_PartitionPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PartitionPair_obj), true, "zpp_nape.geom.ZPP_PartitionPair"));
	*(void **)__this = ZPP_PartitionPair_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_PartitionPair_obj::ZPP_PartitionPair_obj()
{
}

void ZPP_PartitionPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_PartitionPair);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(_inuse,"_inuse");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(di,"di");
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_END_CLASS();
}

void ZPP_PartitionPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(_inuse,"_inuse");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(di,"di");
	HX_VISIT_MEMBER_NAME(node,"node");
}

hx::Val ZPP_PartitionPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		if (HX_FIELD_EQ(inName,"di") ) { return hx::Val( di ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"elem") ) { return hx::Val( elem_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn() ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_inuse") ) { return hx::Val( _inuse ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified ); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn() ); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_PartitionPair_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"edge_lt") ) { outValue = edge_lt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"edge_swap") ) { outValue = edge_swap_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_PartitionPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"di") ) { di=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_inuse") ) { _inuse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_PartitionPair_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_PartitionPair >(); return true; }
	}
	return false;
}

void ZPP_PartitionPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("_inuse",c3,d4,08,ba));
	outFields->push(HX_("modified",49,db,c7,16));
	outFields->push(HX_("pushmod",28,29,4b,75));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("a",61,00,00,00));
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("di",85,57,00,00));
	outFields->push(HX_("node",02,0a,0a,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_PartitionPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_PartitionPair */ ,(int)offsetof(ZPP_PartitionPair_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsBool,(int)offsetof(ZPP_PartitionPair_obj,_inuse),HX_("_inuse",c3,d4,08,ba)},
	{hx::fsBool,(int)offsetof(ZPP_PartitionPair_obj,modified),HX_("modified",49,db,c7,16)},
	{hx::fsBool,(int)offsetof(ZPP_PartitionPair_obj,pushmod),HX_("pushmod",28,29,4b,75)},
	{hx::fsInt,(int)offsetof(ZPP_PartitionPair_obj,length),HX_("length",e6,94,07,9f)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_PartitionVertex */ ,(int)offsetof(ZPP_PartitionPair_obj,a),HX_("a",61,00,00,00)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_PartitionVertex */ ,(int)offsetof(ZPP_PartitionPair_obj,b),HX_("b",62,00,00,00)},
	{hx::fsInt,(int)offsetof(ZPP_PartitionPair_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsInt,(int)offsetof(ZPP_PartitionPair_obj,di),HX_("di",85,57,00,00)},
	{hx::fsObject /*  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair */ ,(int)offsetof(ZPP_PartitionPair_obj,node),HX_("node",02,0a,0a,49)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_PartitionPair_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_PartitionPair */ ,(void *) &ZPP_PartitionPair_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_PartitionPair_obj_sMemberFields[] = {
	HX_("next",f3,84,02,49),
	HX_("elem",8f,d8,14,43),
	HX_("begin",29,ea,55,b0),
	HX_("_inuse",c3,d4,08,ba),
	HX_("modified",49,db,c7,16),
	HX_("pushmod",28,29,4b,75),
	HX_("length",e6,94,07,9f),
	HX_("setbegin",47,e3,5c,2b),
	HX_("add",21,f2,49,00),
	HX_("inlined_add",8d,4c,2e,02),
	HX_("addAll",80,09,fb,9e),
	HX_("insert",39,43,dd,9d),
	HX_("inlined_insert",4d,34,10,a7),
	HX_("pop",91,5d,55,00),
	HX_("inlined_pop",fd,b7,39,02),
	HX_("pop_unsafe",54,7c,ec,75),
	HX_("inlined_pop_unsafe",68,87,ef,15),
	HX_("remove",44,9c,88,04),
	HX_("try_remove",08,b2,16,8d),
	HX_("inlined_remove",58,8d,bb,0d),
	HX_("inlined_try_remove",1c,bd,19,2d),
	HX_("erase",e6,e8,1c,73),
	HX_("inlined_erase",52,b6,9d,fa),
	HX_("splice",7c,85,9e,bf),
	HX_("clear",8d,71,5b,48),
	HX_("inlined_clear",f9,3e,dc,cf),
	HX_("reverse",22,39,fc,1a),
	HX_("empty",8d,3a,da,6f),
	HX_("size",c1,a0,53,4c),
	HX_("has",5a,3f,4f,00),
	HX_("inlined_has",c6,99,33,02),
	HX_("front",a9,18,8e,06),
	HX_("back",27,da,10,41),
	HX_("iterator_at",e4,89,d2,06),
	HX_("at",f3,54,00,00),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	HX_("a",61,00,00,00),
	HX_("b",62,00,00,00),
	HX_("id",db,5b,00,00),
	HX_("di",85,57,00,00),
	HX_("node",02,0a,0a,49),
	::String(null()) };

static void ZPP_PartitionPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_PartitionPair_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_PartitionPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_PartitionPair_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_PartitionPair_obj::__mClass;

static ::String ZPP_PartitionPair_obj_sStaticFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	HX_("get",96,80,4e,00),
	HX_("edge_swap",15,81,90,ad),
	HX_("edge_lt",8a,b0,f8,f4),
	::String(null())
};

void ZPP_PartitionPair_obj::__register()
{
	ZPP_PartitionPair_obj _hx_dummy;
	ZPP_PartitionPair_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_PartitionPair",2e,5e,7f,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_PartitionPair_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_PartitionPair_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_PartitionPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_PartitionPair_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_PartitionPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_PartitionPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_PartitionPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_PartitionPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_PartitionPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_PartitionPair_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_02ad1aad4e592309_175_boot)
HXDLIN( 175)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
