// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_Vec3
#include <hxinc/nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <hxinc/zpp_nape/geom/ZPP_Vec3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e3cadb2c03a5c4da_174_new,"zpp_nape.geom.ZPP_Vec3","new",0x58734907,"zpp_nape.geom.ZPP_Vec3.new","zpp_nape/geom/Vec3.hx",174,0x8339fc0e)
HX_LOCAL_STACK_FRAME(_hx_pos_e3cadb2c03a5c4da_184_validate,"zpp_nape.geom.ZPP_Vec3","validate",0x754a9a8f,"zpp_nape.geom.ZPP_Vec3.validate","zpp_nape/geom/Vec3.hx",184,0x8339fc0e)
namespace zpp_nape{
namespace geom{

void ZPP_Vec3_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e3cadb2c03a5c4da_174_new)
HXLINE( 180)		this->_validate = null();
HXLINE( 179)		this->immutable = false;
HXLINE( 178)		this->z = ((Float)0.0);
HXLINE( 177)		this->y = ((Float)0.0);
HXLINE( 176)		this->x = ((Float)0.0);
HXLINE( 175)		this->outer = null();
HXLINE( 189)		this->immutable = false;
HXLINE( 190)		this->_validate = null();
            	}

Dynamic ZPP_Vec3_obj::__CreateEmpty() { return new ZPP_Vec3_obj; }

void *ZPP_Vec3_obj::_hx_vtable = 0;

Dynamic ZPP_Vec3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Vec3_obj > _hx_result = new ZPP_Vec3_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Vec3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1c1a4771;
}

void ZPP_Vec3_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_e3cadb2c03a5c4da_184_validate)
HXDLIN( 184)		if (hx::IsNotNull( this->_validate )) {
HXLINE( 185)			this->_validate();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Vec3_obj,validate,(void))


hx::ObjectPtr< ZPP_Vec3_obj > ZPP_Vec3_obj::__new() {
	hx::ObjectPtr< ZPP_Vec3_obj > __this = new ZPP_Vec3_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Vec3_obj > ZPP_Vec3_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Vec3_obj *__this = (ZPP_Vec3_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Vec3_obj), true, "zpp_nape.geom.ZPP_Vec3"));
	*(void **)__this = ZPP_Vec3_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Vec3_obj::ZPP_Vec3_obj()
{
}

void ZPP_Vec3_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Vec3);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(immutable,"immutable");
	HX_MARK_MEMBER_NAME(_validate,"_validate");
	HX_MARK_END_CLASS();
}

void ZPP_Vec3_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(immutable,"immutable");
	HX_VISIT_MEMBER_NAME(_validate,"_validate");
}

hx::Val ZPP_Vec3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immutable") ) { return hx::Val( immutable ); }
		if (HX_FIELD_EQ(inName,"_validate") ) { return hx::Val( _validate ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Vec3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::geom::Vec3 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immutable") ) { immutable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_validate") ) { _validate=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Vec3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("immutable",42,28,c7,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Vec3_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::geom::Vec3 */ ,(int)offsetof(ZPP_Vec3_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsFloat,(int)offsetof(ZPP_Vec3_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_Vec3_obj,y),HX_("y",79,00,00,00)},
	{hx::fsFloat,(int)offsetof(ZPP_Vec3_obj,z),HX_("z",7a,00,00,00)},
	{hx::fsBool,(int)offsetof(ZPP_Vec3_obj,immutable),HX_("immutable",42,28,c7,66)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ZPP_Vec3_obj,_validate),HX_("_validate",f5,c7,79,4c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Vec3_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Vec3_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("immutable",42,28,c7,66),
	HX_("_validate",f5,c7,79,4c),
	HX_("validate",96,d0,e3,04),
	::String(null()) };

hx::Class ZPP_Vec3_obj::__mClass;

void ZPP_Vec3_obj::__register()
{
	ZPP_Vec3_obj _hx_dummy;
	ZPP_Vec3_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_Vec3",95,b9,b2,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Vec3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Vec3_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Vec3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Vec3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
