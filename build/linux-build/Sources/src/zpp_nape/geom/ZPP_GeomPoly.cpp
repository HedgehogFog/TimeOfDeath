// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_GeomPoly
#include <hxinc/nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <hxinc/zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <hxinc/zpp_nape/geom/ZPP_GeomVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3dc856b2e8c88615_319_new,"zpp_nape.geom.ZPP_GeomPoly","new",0x1e62c450,"zpp_nape.geom.ZPP_GeomPoly.new","zpp_nape/geom/GeomPoly.hx",319,0x22e30365)
namespace zpp_nape{
namespace geom{

void ZPP_GeomPoly_obj::__construct( ::nape::geom::GeomPoly outer){
            	HX_STACKFRAME(&_hx_pos_3dc856b2e8c88615_319_new)
HXLINE( 321)		this->vertices = null();
HXLINE( 320)		this->outer = null();
HXLINE( 323)		this->outer = outer;
            	}

Dynamic ZPP_GeomPoly_obj::__CreateEmpty() { return new ZPP_GeomPoly_obj; }

void *ZPP_GeomPoly_obj::_hx_vtable = 0;

Dynamic ZPP_GeomPoly_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_GeomPoly_obj > _hx_result = new ZPP_GeomPoly_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZPP_GeomPoly_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71fd39d6;
}


hx::ObjectPtr< ZPP_GeomPoly_obj > ZPP_GeomPoly_obj::__new( ::nape::geom::GeomPoly outer) {
	hx::ObjectPtr< ZPP_GeomPoly_obj > __this = new ZPP_GeomPoly_obj();
	__this->__construct(outer);
	return __this;
}

hx::ObjectPtr< ZPP_GeomPoly_obj > ZPP_GeomPoly_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::geom::GeomPoly outer) {
	ZPP_GeomPoly_obj *__this = (ZPP_GeomPoly_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_GeomPoly_obj), true, "zpp_nape.geom.ZPP_GeomPoly"));
	*(void **)__this = ZPP_GeomPoly_obj::_hx_vtable;
	__this->__construct(outer);
	return __this;
}

ZPP_GeomPoly_obj::ZPP_GeomPoly_obj()
{
}

void ZPP_GeomPoly_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_GeomPoly);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_END_CLASS();
}

void ZPP_GeomPoly_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
}

hx::Val ZPP_GeomPoly_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_GeomPoly_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::geom::GeomPoly >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_GeomPoly_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("vertices",f9,bf,15,6a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_GeomPoly_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::geom::GeomPoly */ ,(int)offsetof(ZPP_GeomPoly_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVert */ ,(int)offsetof(ZPP_GeomPoly_obj,vertices),HX_("vertices",f9,bf,15,6a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_GeomPoly_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_GeomPoly_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("vertices",f9,bf,15,6a),
	::String(null()) };

hx::Class ZPP_GeomPoly_obj::__mClass;

void ZPP_GeomPoly_obj::__register()
{
	ZPP_GeomPoly_obj _hx_dummy;
	ZPP_GeomPoly_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_GeomPoly",5e,9c,7e,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_GeomPoly_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_GeomPoly_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_GeomPoly_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_GeomPoly_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
