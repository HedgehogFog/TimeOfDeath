// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_ConvexResult
#include <hxinc/nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <hxinc/zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_174_new,"zpp_nape.geom.ZPP_ConvexRayResult","new",0xb0fabd7c,"zpp_nape.geom.ZPP_ConvexRayResult.new","zpp_nape/geom/ConvexRayResult.hx",174,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_236_disposed,"zpp_nape.geom.ZPP_ConvexRayResult","disposed",0x23c01849,"zpp_nape.geom.ZPP_ConvexRayResult.disposed","zpp_nape/geom/ConvexRayResult.hx",236,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_239_free,"zpp_nape.geom.ZPP_ConvexRayResult","free",0x252b2810,"zpp_nape.geom.ZPP_ConvexRayResult.free","zpp_nape/geom/ConvexRayResult.hx",239,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_187_getRay,"zpp_nape.geom.ZPP_ConvexRayResult","getRay",0x18533b58,"zpp_nape.geom.ZPP_ConvexRayResult.getRay","zpp_nape/geom/ConvexRayResult.hx",187,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_209_getConvex,"zpp_nape.geom.ZPP_ConvexRayResult","getConvex",0xe0a4aab9,"zpp_nape.geom.ZPP_ConvexRayResult.getConvex","zpp_nape/geom/ConvexRayResult.hx",209,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_177_boot,"zpp_nape.geom.ZPP_ConvexRayResult","boot",0x22840f96,"zpp_nape.geom.ZPP_ConvexRayResult.boot","zpp_nape/geom/ConvexRayResult.hx",177,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_180_boot,"zpp_nape.geom.ZPP_ConvexRayResult","boot",0x22840f96,"zpp_nape.geom.ZPP_ConvexRayResult.boot","zpp_nape/geom/ConvexRayResult.hx",180,0x535a39cf)
HX_LOCAL_STACK_FRAME(_hx_pos_74e08a15acb54d1a_186_boot,"zpp_nape.geom.ZPP_ConvexRayResult","boot",0x22840f96,"zpp_nape.geom.ZPP_ConvexRayResult.boot","zpp_nape/geom/ConvexRayResult.hx",186,0x535a39cf)
namespace zpp_nape{
namespace geom{

void ZPP_ConvexRayResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_174_new)
HXLINE( 184)		this->toiDistance = ((Float)0.0);
HXLINE( 183)		this->next = null();
HXLINE( 182)		this->inner = false;
HXLINE( 181)		this->ray = null();
HXLINE( 179)		this->position = null();
HXLINE( 178)		this->convex = null();
HXLINE( 176)		this->shape = null();
HXLINE( 175)		this->normal = null();
            	}

Dynamic ZPP_ConvexRayResult_obj::__CreateEmpty() { return new ZPP_ConvexRayResult_obj; }

void *ZPP_ConvexRayResult_obj::_hx_vtable = 0;

Dynamic ZPP_ConvexRayResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_ConvexRayResult_obj > _hx_result = new ZPP_ConvexRayResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_ConvexRayResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44641112;
}

void ZPP_ConvexRayResult_obj::disposed(){
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_236_disposed)
HXDLIN( 236)		if (hx::IsNotNull( this->next )) {
HXDLIN( 236)			HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ConvexRayResult_obj,disposed,(void))

void ZPP_ConvexRayResult_obj::free(){
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_239_free)
HXLINE( 240)		this->normal->zpp_inner->_immutable = false;
HXLINE( 241)		{
HXLINE( 241)			 ::nape::geom::Vec2 _this = this->normal;
HXDLIN( 241)			bool _hx_tmp;
HXDLIN( 241)			if (hx::IsNotNull( _this )) {
HXLINE( 241)				_hx_tmp = _this->zpp_disp;
            			}
            			else {
HXLINE( 241)				_hx_tmp = false;
            			}
HXDLIN( 241)			if (_hx_tmp) {
HXLINE( 241)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 241)			{
HXLINE( 241)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 241)				if (_this1->_immutable) {
HXLINE( 241)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 241)				if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 241)					_this1->_isimmutable();
            				}
            			}
HXDLIN( 241)			if (_this->zpp_inner->_inuse) {
HXLINE( 241)				HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            			}
HXDLIN( 241)			 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 241)			_this->zpp_inner->outer = null();
HXDLIN( 241)			_this->zpp_inner = null();
HXDLIN( 241)			{
HXLINE( 241)				 ::nape::geom::Vec2 o = _this;
HXDLIN( 241)				o->zpp_pool = null();
HXDLIN( 241)				if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 241)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
            				}
            				else {
HXLINE( 241)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            				}
HXDLIN( 241)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
HXDLIN( 241)				o->zpp_disp = true;
            			}
HXDLIN( 241)			{
HXLINE( 241)				 ::zpp_nape::geom::ZPP_Vec2 o1 = inner;
HXDLIN( 241)				{
HXLINE( 241)					if (hx::IsNotNull( o1->outer )) {
HXLINE( 241)						o1->outer->zpp_inner = null();
HXDLIN( 241)						o1->outer = null();
            					}
HXDLIN( 241)					o1->_isimmutable = null();
HXDLIN( 241)					o1->_validate = null();
HXDLIN( 241)					o1->_invalidate = null();
            				}
HXDLIN( 241)				o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 241)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            			}
            		}
HXLINE( 242)		if (hx::IsNotNull( this->position )) {
HXLINE( 243)			this->position->zpp_inner->_immutable = false;
HXLINE( 244)			{
HXLINE( 244)				 ::nape::geom::Vec2 _this2 = this->position;
HXDLIN( 244)				bool _hx_tmp1;
HXDLIN( 244)				if (hx::IsNotNull( _this2 )) {
HXLINE( 244)					_hx_tmp1 = _this2->zpp_disp;
            				}
            				else {
HXLINE( 244)					_hx_tmp1 = false;
            				}
HXDLIN( 244)				if (_hx_tmp1) {
HXLINE( 244)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 244)				{
HXLINE( 244)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = _this2->zpp_inner;
HXDLIN( 244)					if (_this3->_immutable) {
HXLINE( 244)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN( 244)					if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE( 244)						_this3->_isimmutable();
            					}
            				}
HXDLIN( 244)				if (_this2->zpp_inner->_inuse) {
HXLINE( 244)					HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            				}
HXDLIN( 244)				 ::zpp_nape::geom::ZPP_Vec2 inner1 = _this2->zpp_inner;
HXDLIN( 244)				_this2->zpp_inner->outer = null();
HXDLIN( 244)				_this2->zpp_inner = null();
HXDLIN( 244)				{
HXLINE( 244)					 ::nape::geom::Vec2 o2 = _this2;
HXDLIN( 244)					o2->zpp_pool = null();
HXDLIN( 244)					if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 244)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o2;
            					}
            					else {
HXLINE( 244)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            					}
HXDLIN( 244)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o2;
HXDLIN( 244)					o2->zpp_disp = true;
            				}
HXDLIN( 244)				{
HXLINE( 244)					 ::zpp_nape::geom::ZPP_Vec2 o3 = inner1;
HXDLIN( 244)					{
HXLINE( 244)						if (hx::IsNotNull( o3->outer )) {
HXLINE( 244)							o3->outer->zpp_inner = null();
HXDLIN( 244)							o3->outer = null();
            						}
HXDLIN( 244)						o3->_isimmutable = null();
HXDLIN( 244)						o3->_validate = null();
HXDLIN( 244)						o3->_invalidate = null();
            					}
HXDLIN( 244)					o3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 244)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o3;
            				}
            			}
            		}
HXLINE( 246)		this->shape = null();
HXLINE( 247)		this->toiDistance = ((Float)0.0);
HXLINE( 248)		if (hx::IsNotNull( this->convex )) {
HXLINE( 249)			this->next = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool;
HXLINE( 250)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool = hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE( 253)			this->next = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool;
HXLINE( 254)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool = hx::ObjectPtr<OBJ_>(this);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ConvexRayResult_obj,free,(void))

 ::zpp_nape::geom::ZPP_ConvexRayResult ZPP_ConvexRayResult_obj::convexPool;

 ::zpp_nape::geom::ZPP_ConvexRayResult ZPP_ConvexRayResult_obj::rayPool;

bool ZPP_ConvexRayResult_obj::internal;

 ::nape::geom::RayResult ZPP_ConvexRayResult_obj::getRay( ::nape::geom::Vec2 normal,Float time,bool inner, ::nape::shape::Shape shape){
            	HX_GC_STACKFRAME(&_hx_pos_74e08a15acb54d1a_187_getRay)
HXLINE( 188)		 ::nape::geom::RayResult ret;
HXLINE( 189)		if (hx::IsNull( ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool )) {
HXLINE( 190)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = true;
HXLINE( 191)			ret =  ::nape::geom::RayResult_obj::__alloc( HX_CTX );
HXLINE( 192)			ret->zpp_inner =  ::zpp_nape::geom::ZPP_ConvexRayResult_obj::__alloc( HX_CTX );
HXLINE( 193)			ret->zpp_inner->ray = ret;
HXLINE( 194)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = false;
            		}
            		else {
HXLINE( 197)			ret = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool->ray;
HXLINE( 198)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool->next;
HXLINE( 199)			ret->zpp_inner->next = null();
            		}
HXLINE( 201)		 ::zpp_nape::geom::ZPP_ConvexRayResult zinner = ret->zpp_inner;
HXLINE( 202)		zinner->normal = normal;
HXLINE( 203)		normal->zpp_inner->_immutable = true;
HXLINE( 204)		zinner->toiDistance = time;
HXLINE( 205)		zinner->inner = inner;
HXLINE( 206)		zinner->shape = shape;
HXLINE( 207)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_ConvexRayResult_obj,getRay,return )

 ::nape::geom::ConvexResult ZPP_ConvexRayResult_obj::getConvex( ::nape::geom::Vec2 normal, ::nape::geom::Vec2 position,Float toiDistance, ::nape::shape::Shape shape){
            	HX_GC_STACKFRAME(&_hx_pos_74e08a15acb54d1a_209_getConvex)
HXLINE( 210)		 ::nape::geom::ConvexResult ret;
HXLINE( 211)		if (hx::IsNull( ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool )) {
HXLINE( 212)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = true;
HXLINE( 213)			ret =  ::nape::geom::ConvexResult_obj::__alloc( HX_CTX );
HXLINE( 214)			ret->zpp_inner =  ::zpp_nape::geom::ZPP_ConvexRayResult_obj::__alloc( HX_CTX );
HXLINE( 215)			ret->zpp_inner->convex = ret;
HXLINE( 216)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = false;
            		}
            		else {
HXLINE( 219)			ret = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool->convex;
HXLINE( 220)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool->next;
HXLINE( 221)			ret->zpp_inner->next = null();
            		}
HXLINE( 223)		 ::zpp_nape::geom::ZPP_ConvexRayResult inner = ret->zpp_inner;
HXLINE( 224)		inner->normal = normal;
HXLINE( 225)		inner->position = position;
HXLINE( 226)		normal->zpp_inner->_immutable = true;
HXLINE( 227)		position->zpp_inner->_immutable = true;
HXLINE( 228)		inner->toiDistance = toiDistance;
HXLINE( 229)		inner->shape = shape;
HXLINE( 230)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_ConvexRayResult_obj,getConvex,return )


hx::ObjectPtr< ZPP_ConvexRayResult_obj > ZPP_ConvexRayResult_obj::__new() {
	hx::ObjectPtr< ZPP_ConvexRayResult_obj > __this = new ZPP_ConvexRayResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_ConvexRayResult_obj > ZPP_ConvexRayResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_ConvexRayResult_obj *__this = (ZPP_ConvexRayResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_ConvexRayResult_obj), true, "zpp_nape.geom.ZPP_ConvexRayResult"));
	*(void **)__this = ZPP_ConvexRayResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_ConvexRayResult_obj::ZPP_ConvexRayResult_obj()
{
}

void ZPP_ConvexRayResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_ConvexRayResult);
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(shape,"shape");
	HX_MARK_MEMBER_NAME(convex,"convex");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(ray,"ray");
	HX_MARK_MEMBER_NAME(inner,"inner");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(toiDistance,"toiDistance");
	HX_MARK_END_CLASS();
}

void ZPP_ConvexRayResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(shape,"shape");
	HX_VISIT_MEMBER_NAME(convex,"convex");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(ray,"ray");
	HX_VISIT_MEMBER_NAME(inner,"inner");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(toiDistance,"toiDistance");
}

hx::Val ZPP_ConvexRayResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { return hx::Val( shape ); }
		if (HX_FIELD_EQ(inName,"inner") ) { return hx::Val( inner ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		if (HX_FIELD_EQ(inName,"convex") ) { return hx::Val( convex ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"disposed") ) { return hx::Val( disposed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toiDistance") ) { return hx::Val( toiDistance ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_ConvexRayResult_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getRay") ) { outValue = getRay_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayPool") ) { outValue = ( rayPool ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = ( internal ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getConvex") ) { outValue = getConvex_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"convexPool") ) { outValue = ( convexPool ); return true; }
	}
	return false;
}

hx::Val ZPP_ConvexRayResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { ray=inValue.Cast<  ::nape::geom::RayResult >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { shape=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inner") ) { inner=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"convex") ) { convex=inValue.Cast<  ::nape::geom::ConvexResult >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toiDistance") ) { toiDistance=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_ConvexRayResult_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rayPool") ) { rayPool=ioValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"convexPool") ) { convexPool=ioValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return true; }
	}
	return false;
}

void ZPP_ConvexRayResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("normal",27,72,69,30));
	outFields->push(HX_("shape",21,e3,1c,7c));
	outFields->push(HX_("convex",67,77,de,c7));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("ray",ea,d5,56,00));
	outFields->push(HX_("inner",96,31,1c,be));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("toiDistance",e3,f3,c1,8f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_ConvexRayResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_ConvexRayResult_obj,normal),HX_("normal",27,72,69,30)},
	{hx::fsObject /*  ::nape::shape::Shape */ ,(int)offsetof(ZPP_ConvexRayResult_obj,shape),HX_("shape",21,e3,1c,7c)},
	{hx::fsObject /*  ::nape::geom::ConvexResult */ ,(int)offsetof(ZPP_ConvexRayResult_obj,convex),HX_("convex",67,77,de,c7)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_ConvexRayResult_obj,position),HX_("position",a9,a0,fa,ca)},
	{hx::fsObject /*  ::nape::geom::RayResult */ ,(int)offsetof(ZPP_ConvexRayResult_obj,ray),HX_("ray",ea,d5,56,00)},
	{hx::fsBool,(int)offsetof(ZPP_ConvexRayResult_obj,inner),HX_("inner",96,31,1c,be)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_ConvexRayResult */ ,(int)offsetof(ZPP_ConvexRayResult_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsFloat,(int)offsetof(ZPP_ConvexRayResult_obj,toiDistance),HX_("toiDistance",e3,f3,c1,8f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_ConvexRayResult_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_ConvexRayResult */ ,(void *) &ZPP_ConvexRayResult_obj::convexPool,HX_("convexPool",e3,63,61,41)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_ConvexRayResult */ ,(void *) &ZPP_ConvexRayResult_obj::rayPool,HX_("rayPool",e6,bf,de,2d)},
	{hx::fsBool,(void *) &ZPP_ConvexRayResult_obj::internal,HX_("internal",3d,67,76,28)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_ConvexRayResult_obj_sMemberFields[] = {
	HX_("normal",27,72,69,30),
	HX_("shape",21,e3,1c,7c),
	HX_("convex",67,77,de,c7),
	HX_("position",a9,a0,fa,ca),
	HX_("ray",ea,d5,56,00),
	HX_("inner",96,31,1c,be),
	HX_("next",f3,84,02,49),
	HX_("toiDistance",e3,f3,c1,8f),
	HX_("disposed",e5,0a,a4,27),
	HX_("free",ac,9c,c2,43),
	::String(null()) };

static void ZPP_ConvexRayResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::convexPool,"convexPool");
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::rayPool,"rayPool");
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::internal,"internal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_ConvexRayResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::convexPool,"convexPool");
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::rayPool,"rayPool");
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::internal,"internal");
};

#endif

hx::Class ZPP_ConvexRayResult_obj::__mClass;

static ::String ZPP_ConvexRayResult_obj_sStaticFields[] = {
	HX_("convexPool",e3,63,61,41),
	HX_("rayPool",e6,bf,de,2d),
	HX_("internal",3d,67,76,28),
	HX_("getRay",f4,0e,26,a3),
	HX_("getConvex",9d,00,35,44),
	::String(null())
};

void ZPP_ConvexRayResult_obj::__register()
{
	ZPP_ConvexRayResult_obj _hx_dummy;
	ZPP_ConvexRayResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_ConvexRayResult",8a,8f,7f,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_ConvexRayResult_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_ConvexRayResult_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_ConvexRayResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_ConvexRayResult_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_ConvexRayResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_ConvexRayResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_ConvexRayResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_ConvexRayResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_ConvexRayResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_ConvexRayResult_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_177_boot)
HXDLIN( 177)		convexPool = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_180_boot)
HXDLIN( 180)		rayPool = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_186_boot)
HXDLIN( 186)		internal = false;
            	}
}

} // end namespace zpp_nape
} // end namespace geom
