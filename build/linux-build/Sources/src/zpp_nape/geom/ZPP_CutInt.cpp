// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_CutInt
#include <hxinc/zpp_nape/geom/ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_CutVert
#include <hxinc/zpp_nape/geom/ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <hxinc/zpp_nape/geom/ZPP_GeomVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09f42029a88b67ea_247_new,"zpp_nape.geom.ZPP_CutInt","new",0x023ba6b5,"zpp_nape.geom.ZPP_CutInt.new","zpp_nape/geom/Cutter.hx",247,0x9f85878e)
HX_LOCAL_STACK_FRAME(_hx_pos_09f42029a88b67ea_283_alloc,"zpp_nape.geom.ZPP_CutInt","alloc",0x4ddd7a0a,"zpp_nape.geom.ZPP_CutInt.alloc","zpp_nape/geom/Cutter.hx",283,0x9f85878e)
HX_LOCAL_STACK_FRAME(_hx_pos_09f42029a88b67ea_286_free,"zpp_nape.geom.ZPP_CutInt","free",0xecb650b7,"zpp_nape.geom.ZPP_CutInt.free","zpp_nape/geom/Cutter.hx",286,0x9f85878e)
HX_LOCAL_STACK_FRAME(_hx_pos_09f42029a88b67ea_291_get,"zpp_nape.geom.ZPP_CutInt","get",0x023656eb,"zpp_nape.geom.ZPP_CutInt.get","zpp_nape/geom/Cutter.hx",291,0x9f85878e)
HX_LOCAL_STACK_FRAME(_hx_pos_09f42029a88b67ea_249_boot,"zpp_nape.geom.ZPP_CutInt","boot",0xea0f383d,"zpp_nape.geom.ZPP_CutInt.boot","zpp_nape/geom/Cutter.hx",249,0x9f85878e)
namespace zpp_nape{
namespace geom{

void ZPP_CutInt_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_09f42029a88b67ea_247_new)
HXLINE( 279)		this->path1 = null();
HXLINE( 278)		this->start = null();
HXLINE( 277)		this->end = null();
HXLINE( 276)		this->path0 = null();
HXLINE( 275)		this->vertex = false;
HXLINE( 274)		this->virtualint = false;
HXLINE( 273)		this->time = ((Float)0.0);
HXLINE( 248)		this->next = null();
            	}

Dynamic ZPP_CutInt_obj::__CreateEmpty() { return new ZPP_CutInt_obj; }

void *ZPP_CutInt_obj::_hx_vtable = 0;

Dynamic ZPP_CutInt_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_CutInt_obj > _hx_result = new ZPP_CutInt_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_CutInt_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0bb2bfe7;
}

void ZPP_CutInt_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_09f42029a88b67ea_283_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CutInt_obj,alloc,(void))

void ZPP_CutInt_obj::free(){
            	HX_STACKFRAME(&_hx_pos_09f42029a88b67ea_286_free)
HXLINE( 287)		this->end = (this->start = null());
HXLINE( 288)		this->path0 = (this->path1 = null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CutInt_obj,free,(void))

 ::zpp_nape::geom::ZPP_CutInt ZPP_CutInt_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_CutInt ZPP_CutInt_obj::get(Float time, ::zpp_nape::geom::ZPP_GeomVert end, ::zpp_nape::geom::ZPP_GeomVert start, ::zpp_nape::geom::ZPP_CutVert path0, ::zpp_nape::geom::ZPP_CutVert path1,hx::Null< bool >  __o_virtualint,hx::Null< bool >  __o_vertex){
            		bool virtualint = __o_virtualint.Default(false);
            		bool vertex = __o_vertex.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_09f42029a88b67ea_291_get)
HXLINE( 292)		 ::zpp_nape::geom::ZPP_CutInt ret;
HXLINE( 294)		if (hx::IsNull( ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool )) {
HXLINE( 295)			ret =  ::zpp_nape::geom::ZPP_CutInt_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 301)			ret = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXLINE( 302)			::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = ret->next;
HXLINE( 303)			ret->next = null();
            		}
HXLINE( 310)		ret->virtualint = virtualint;
HXLINE( 311)		ret->end = end;
HXLINE( 312)		ret->start = start;
HXLINE( 313)		ret->path0 = path0;
HXLINE( 314)		ret->path1 = path1;
HXLINE( 315)		ret->time = time;
HXLINE( 316)		ret->vertex = vertex;
HXLINE( 317)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ZPP_CutInt_obj,get,return )


hx::ObjectPtr< ZPP_CutInt_obj > ZPP_CutInt_obj::__new() {
	hx::ObjectPtr< ZPP_CutInt_obj > __this = new ZPP_CutInt_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_CutInt_obj > ZPP_CutInt_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_CutInt_obj *__this = (ZPP_CutInt_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_CutInt_obj), true, "zpp_nape.geom.ZPP_CutInt"));
	*(void **)__this = ZPP_CutInt_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_CutInt_obj::ZPP_CutInt_obj()
{
}

void ZPP_CutInt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_CutInt);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(virtualint,"virtualint");
	HX_MARK_MEMBER_NAME(vertex,"vertex");
	HX_MARK_MEMBER_NAME(path0,"path0");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(path1,"path1");
	HX_MARK_END_CLASS();
}

void ZPP_CutInt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(virtualint,"virtualint");
	HX_VISIT_MEMBER_NAME(vertex,"vertex");
	HX_VISIT_MEMBER_NAME(path0,"path0");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(path1,"path1");
}

hx::Val ZPP_CutInt_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"path0") ) { return hx::Val( path0 ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"path1") ) { return hx::Val( path1 ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vertex") ) { return hx::Val( vertex ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"virtualint") ) { return hx::Val( virtualint ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_CutInt_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
	}
	return false;
}

hx::Val ZPP_CutInt_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_CutInt >(); return inValue; }
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"path0") ) { path0=inValue.Cast<  ::zpp_nape::geom::ZPP_CutVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path1") ) { path1=inValue.Cast<  ::zpp_nape::geom::ZPP_CutVert >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vertex") ) { vertex=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"virtualint") ) { virtualint=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_CutInt_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_CutInt >(); return true; }
	}
	return false;
}

void ZPP_CutInt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("virtualint",c4,87,da,60));
	outFields->push(HX_("vertex",64,db,47,a1));
	outFields->push(HX_("path0",eb,0a,57,bd));
	outFields->push(HX_("end",db,03,4d,00));
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("path1",ec,0a,57,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_CutInt_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_CutInt */ ,(int)offsetof(ZPP_CutInt_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsFloat,(int)offsetof(ZPP_CutInt_obj,time),HX_("time",0d,cc,fc,4c)},
	{hx::fsBool,(int)offsetof(ZPP_CutInt_obj,virtualint),HX_("virtualint",c4,87,da,60)},
	{hx::fsBool,(int)offsetof(ZPP_CutInt_obj,vertex),HX_("vertex",64,db,47,a1)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_CutVert */ ,(int)offsetof(ZPP_CutInt_obj,path0),HX_("path0",eb,0a,57,bd)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVert */ ,(int)offsetof(ZPP_CutInt_obj,end),HX_("end",db,03,4d,00)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVert */ ,(int)offsetof(ZPP_CutInt_obj,start),HX_("start",62,74,0b,84)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_CutVert */ ,(int)offsetof(ZPP_CutInt_obj,path1),HX_("path1",ec,0a,57,bd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_CutInt_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_CutInt */ ,(void *) &ZPP_CutInt_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_CutInt_obj_sMemberFields[] = {
	HX_("next",f3,84,02,49),
	HX_("time",0d,cc,fc,4c),
	HX_("virtualint",c4,87,da,60),
	HX_("vertex",64,db,47,a1),
	HX_("path0",eb,0a,57,bd),
	HX_("end",db,03,4d,00),
	HX_("start",62,74,0b,84),
	HX_("path1",ec,0a,57,bd),
	HX_("alloc",75,a4,93,21),
	HX_("free",ac,9c,c2,43),
	::String(null()) };

static void ZPP_CutInt_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_CutInt_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_CutInt_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_CutInt_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_CutInt_obj::__mClass;

static ::String ZPP_CutInt_obj_sStaticFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	HX_("get",96,80,4e,00),
	::String(null())
};

void ZPP_CutInt_obj::__register()
{
	ZPP_CutInt_obj _hx_dummy;
	ZPP_CutInt_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_CutInt",43,28,f3,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_CutInt_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_CutInt_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_CutInt_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_CutInt_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_CutInt_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_CutInt_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_CutInt_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_CutInt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_CutInt_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_CutInt_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_09f42029a88b67ea_249_boot)
HXDLIN( 249)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
