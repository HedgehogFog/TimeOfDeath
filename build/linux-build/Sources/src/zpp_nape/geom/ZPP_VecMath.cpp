// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_VecMath
#include <hxinc/zpp_nape/geom/ZPP_VecMath.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_48696f23572a9a7f_176_vec_dsq,"zpp_nape.geom.ZPP_VecMath","vec_dsq",0xb07d1caf,"zpp_nape.geom.ZPP_VecMath.vec_dsq","zpp_nape/geom/VecMath.hx",176,0x9d2cc613)
HX_LOCAL_STACK_FRAME(_hx_pos_48696f23572a9a7f_186_vec_distance,"zpp_nape.geom.ZPP_VecMath","vec_distance",0x98be6968,"zpp_nape.geom.ZPP_VecMath.vec_distance","zpp_nape/geom/VecMath.hx",186,0x9d2cc613)
namespace zpp_nape{
namespace geom{

void ZPP_VecMath_obj::__construct() { }

Dynamic ZPP_VecMath_obj::__CreateEmpty() { return new ZPP_VecMath_obj; }

void *ZPP_VecMath_obj::_hx_vtable = 0;

Dynamic ZPP_VecMath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_VecMath_obj > _hx_result = new ZPP_VecMath_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_VecMath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a76c16a;
}

Float ZPP_VecMath_obj::vec_dsq(Float ax,Float ay,Float bx,Float by){
            	HX_STACKFRAME(&_hx_pos_48696f23572a9a7f_176_vec_dsq)
HXLINE( 177)		Float dx = ((Float)0.0);
HXLINE( 178)		Float dy = ((Float)0.0);
HXLINE( 179)		{
HXLINE( 180)			dx = (ax - bx);
HXLINE( 181)			dy = (ay - by);
            		}
HXLINE( 183)		return ((dx * dx) + (dy * dy));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_VecMath_obj,vec_dsq,return )

Float ZPP_VecMath_obj::vec_distance(Float ax,Float ay,Float bx,Float by){
            	HX_STACKFRAME(&_hx_pos_48696f23572a9a7f_186_vec_distance)
HXLINE( 187)		Float dx = ((Float)0.0);
HXLINE( 188)		Float dy = ((Float)0.0);
HXLINE( 189)		{
HXLINE( 190)			dx = (ax - bx);
HXLINE( 191)			dy = (ay - by);
            		}
HXLINE( 193)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_VecMath_obj,vec_distance,return )


ZPP_VecMath_obj::ZPP_VecMath_obj()
{
}

bool ZPP_VecMath_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"vec_dsq") ) { outValue = vec_dsq_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vec_distance") ) { outValue = vec_distance_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_VecMath_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ZPP_VecMath_obj_sStaticStorageInfo = 0;
#endif

hx::Class ZPP_VecMath_obj::__mClass;

static ::String ZPP_VecMath_obj_sStaticFields[] = {
	HX_("vec_dsq",57,27,b3,cc),
	HX_("vec_distance",c0,bd,58,36),
	::String(null())
};

void ZPP_VecMath_obj::__register()
{
	ZPP_VecMath_obj _hx_dummy;
	ZPP_VecMath_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_VecMath",c6,3d,fd,2a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_VecMath_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_VecMath_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_VecMath_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_VecMath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_VecMath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
