// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_GeomVertexIterator
#include <hxinc/nape/geom/GeomVertexIterator.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <hxinc/zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVertexIterator
#include <hxinc/zpp_nape/geom/ZPP_GeomVertexIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7f3627dc9209b0ff_327_new,"zpp_nape.geom.ZPP_GeomVertexIterator","new",0x9d8000f6,"zpp_nape.geom.ZPP_GeomVertexIterator.new","zpp_nape/geom/GeomPoly.hx",327,0x22e30365)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3627dc9209b0ff_360_free,"zpp_nape.geom.ZPP_GeomVertexIterator","free",0x2d40ef56,"zpp_nape.geom.ZPP_GeomVertexIterator.free","zpp_nape/geom/GeomPoly.hx",360,0x22e30365)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3627dc9209b0ff_366_alloc,"zpp_nape.geom.ZPP_GeomVertexIterator","alloc",0x869da68b,"zpp_nape.geom.ZPP_GeomVertexIterator.alloc","zpp_nape/geom/GeomPoly.hx",366,0x22e30365)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3627dc9209b0ff_379_get,"zpp_nape.geom.ZPP_GeomVertexIterator","get",0x9d7ab12c,"zpp_nape.geom.ZPP_GeomVertexIterator.get","zpp_nape/geom/GeomPoly.hx",379,0x22e30365)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3627dc9209b0ff_334_boot,"zpp_nape.geom.ZPP_GeomVertexIterator","boot",0x2a99d6dc,"zpp_nape.geom.ZPP_GeomVertexIterator.boot","zpp_nape/geom/GeomPoly.hx",334,0x22e30365)
HX_LOCAL_STACK_FRAME(_hx_pos_7f3627dc9209b0ff_368_boot,"zpp_nape.geom.ZPP_GeomVertexIterator","boot",0x2a99d6dc,"zpp_nape.geom.ZPP_GeomVertexIterator.boot","zpp_nape/geom/GeomPoly.hx",368,0x22e30365)
namespace zpp_nape{
namespace geom{

void ZPP_GeomVertexIterator_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7f3627dc9209b0ff_327_new)
HXLINE( 333)		this->next = null();
HXLINE( 332)		this->outer = null();
HXLINE( 331)		this->forward = false;
HXLINE( 330)		this->first = false;
HXLINE( 329)		this->start = null();
HXLINE( 328)		this->ptr = null();
HXLINE( 372)		::zpp_nape::geom::ZPP_GeomVertexIterator_obj::internal = true;
HXLINE( 374)		this->outer =  ::nape::geom::GeomVertexIterator_obj::__alloc( HX_CTX );
HXLINE( 376)		::zpp_nape::geom::ZPP_GeomVertexIterator_obj::internal = false;
            	}

Dynamic ZPP_GeomVertexIterator_obj::__CreateEmpty() { return new ZPP_GeomVertexIterator_obj; }

void *ZPP_GeomVertexIterator_obj::_hx_vtable = 0;

Dynamic ZPP_GeomVertexIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_GeomVertexIterator_obj > _hx_result = new ZPP_GeomVertexIterator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_GeomVertexIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x58471844;
}

void ZPP_GeomVertexIterator_obj::free(){
            	HX_STACKFRAME(&_hx_pos_7f3627dc9209b0ff_360_free)
HXLINE( 361)		this->outer->zpp_inner = null();
HXLINE( 362)		this->ptr = (this->start = null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_GeomVertexIterator_obj,free,(void))

void ZPP_GeomVertexIterator_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_7f3627dc9209b0ff_366_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_GeomVertexIterator_obj,alloc,(void))

 ::zpp_nape::geom::ZPP_GeomVertexIterator ZPP_GeomVertexIterator_obj::zpp_pool;

bool ZPP_GeomVertexIterator_obj::internal;

 ::nape::geom::GeomVertexIterator ZPP_GeomVertexIterator_obj::get( ::zpp_nape::geom::ZPP_GeomVert poly,bool forward){
            	HX_GC_STACKFRAME(&_hx_pos_7f3627dc9209b0ff_379_get)
HXLINE( 380)		 ::zpp_nape::geom::ZPP_GeomVertexIterator ret;
HXLINE( 382)		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool )) {
HXLINE( 383)			ret =  ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 389)			ret = ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool;
HXLINE( 390)			::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool = ret->next;
HXLINE( 391)			ret->next = null();
            		}
HXLINE( 398)		ret->outer->zpp_inner = ret;
HXLINE( 399)		ret->ptr = poly;
HXLINE( 400)		ret->forward = forward;
HXLINE( 401)		ret->start = poly;
HXLINE( 402)		ret->first = hx::IsNotNull( poly );
HXLINE( 403)		return ret->outer;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_GeomVertexIterator_obj,get,return )


hx::ObjectPtr< ZPP_GeomVertexIterator_obj > ZPP_GeomVertexIterator_obj::__new() {
	hx::ObjectPtr< ZPP_GeomVertexIterator_obj > __this = new ZPP_GeomVertexIterator_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_GeomVertexIterator_obj > ZPP_GeomVertexIterator_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_GeomVertexIterator_obj *__this = (ZPP_GeomVertexIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_GeomVertexIterator_obj), true, "zpp_nape.geom.ZPP_GeomVertexIterator"));
	*(void **)__this = ZPP_GeomVertexIterator_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_GeomVertexIterator_obj::ZPP_GeomVertexIterator_obj()
{
}

void ZPP_GeomVertexIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_GeomVertexIterator);
	HX_MARK_MEMBER_NAME(ptr,"ptr");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(first,"first");
	HX_MARK_MEMBER_NAME(forward,"forward");
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_END_CLASS();
}

void ZPP_GeomVertexIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ptr,"ptr");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(first,"first");
	HX_VISIT_MEMBER_NAME(forward,"forward");
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(next,"next");
}

hx::Val ZPP_GeomVertexIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ptr") ) { return hx::Val( ptr ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first ); }
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"forward") ) { return hx::Val( forward ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_GeomVertexIterator_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = ( internal ); return true; }
	}
	return false;
}

hx::Val ZPP_GeomVertexIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ptr") ) { ptr=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVertexIterator >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"first") ) { first=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::geom::GeomVertexIterator >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"forward") ) { forward=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_GeomVertexIterator_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_GeomVertexIterator >(); return true; }
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ZPP_GeomVertexIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ptr",ee,61,55,00));
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("first",30,78,9d,00));
	outFields->push(HX_("forward",c5,e1,ca,e5));
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("next",f3,84,02,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_GeomVertexIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVert */ ,(int)offsetof(ZPP_GeomVertexIterator_obj,ptr),HX_("ptr",ee,61,55,00)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVert */ ,(int)offsetof(ZPP_GeomVertexIterator_obj,start),HX_("start",62,74,0b,84)},
	{hx::fsBool,(int)offsetof(ZPP_GeomVertexIterator_obj,first),HX_("first",30,78,9d,00)},
	{hx::fsBool,(int)offsetof(ZPP_GeomVertexIterator_obj,forward),HX_("forward",c5,e1,ca,e5)},
	{hx::fsObject /*  ::nape::geom::GeomVertexIterator */ ,(int)offsetof(ZPP_GeomVertexIterator_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVertexIterator */ ,(int)offsetof(ZPP_GeomVertexIterator_obj,next),HX_("next",f3,84,02,49)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_GeomVertexIterator_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_GeomVertexIterator */ ,(void *) &ZPP_GeomVertexIterator_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{hx::fsBool,(void *) &ZPP_GeomVertexIterator_obj::internal,HX_("internal",3d,67,76,28)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_GeomVertexIterator_obj_sMemberFields[] = {
	HX_("ptr",ee,61,55,00),
	HX_("start",62,74,0b,84),
	HX_("first",30,78,9d,00),
	HX_("forward",c5,e1,ca,e5),
	HX_("outer",7b,b8,28,37),
	HX_("next",f3,84,02,49),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	::String(null()) };

static void ZPP_GeomVertexIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_GeomVertexIterator_obj::zpp_pool,"zpp_pool");
	HX_MARK_MEMBER_NAME(ZPP_GeomVertexIterator_obj::internal,"internal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_GeomVertexIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_GeomVertexIterator_obj::zpp_pool,"zpp_pool");
	HX_VISIT_MEMBER_NAME(ZPP_GeomVertexIterator_obj::internal,"internal");
};

#endif

hx::Class ZPP_GeomVertexIterator_obj::__mClass;

static ::String ZPP_GeomVertexIterator_obj_sStaticFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	HX_("internal",3d,67,76,28),
	HX_("get",96,80,4e,00),
	::String(null())
};

void ZPP_GeomVertexIterator_obj::__register()
{
	ZPP_GeomVertexIterator_obj _hx_dummy;
	ZPP_GeomVertexIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_GeomVertexIterator",04,0e,8b,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_GeomVertexIterator_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_GeomVertexIterator_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_GeomVertexIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_GeomVertexIterator_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_GeomVertexIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_GeomVertexIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_GeomVertexIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_GeomVertexIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_GeomVertexIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_GeomVertexIterator_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7f3627dc9209b0ff_334_boot)
HXDLIN( 334)		zpp_pool = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7f3627dc9209b0ff_368_boot)
HXDLIN( 368)		internal = false;
            	}
}

} // end namespace zpp_nape
} // end namespace geom
