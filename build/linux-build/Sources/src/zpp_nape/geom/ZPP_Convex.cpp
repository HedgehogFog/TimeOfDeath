// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_Convex
#include <hxinc/zpp_nape/geom/ZPP_Convex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <hxinc/zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <hxinc/zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionVertex
#include <hxinc/zpp_nape/util/ZNPList_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f463647f2cccefbe_175_isinner,"zpp_nape.geom.ZPP_Convex","isinner",0xfd4f4f1b,"zpp_nape.geom.ZPP_Convex.isinner","zpp_nape/geom/Convex.hx",175,0x1f8412c6)
HX_LOCAL_STACK_FRAME(_hx_pos_f463647f2cccefbe_190_optimise,"zpp_nape.geom.ZPP_Convex","optimise",0x06ca1635,"zpp_nape.geom.ZPP_Convex.optimise","zpp_nape/geom/Convex.hx",190,0x1f8412c6)
namespace zpp_nape{
namespace geom{

void ZPP_Convex_obj::__construct() { }

Dynamic ZPP_Convex_obj::__CreateEmpty() { return new ZPP_Convex_obj; }

void *ZPP_Convex_obj::_hx_vtable = 0;

Dynamic ZPP_Convex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Convex_obj > _hx_result = new ZPP_Convex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Convex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12885295;
}

bool ZPP_Convex_obj::isinner( ::zpp_nape::geom::ZPP_PartitionVertex a, ::zpp_nape::geom::ZPP_PartitionVertex b, ::zpp_nape::geom::ZPP_PartitionVertex c){
            	HX_STACKFRAME(&_hx_pos_f463647f2cccefbe_175_isinner)
HXLINE( 176)		Float ux = ((Float)0.0);
HXLINE( 177)		Float uy = ((Float)0.0);
HXLINE( 178)		{
HXLINE( 179)			ux = (a->x - b->x);
HXLINE( 180)			uy = (a->y - b->y);
            		}
HXLINE( 182)		Float vx = ((Float)0.0);
HXLINE( 183)		Float vy = ((Float)0.0);
HXLINE( 184)		{
HXLINE( 185)			vx = (c->x - b->x);
HXLINE( 186)			vy = (c->y - b->y);
            		}
HXLINE( 188)		return (((vy * ux) - (vx * uy)) >= 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_Convex_obj,isinner,return )

void ZPP_Convex_obj::optimise( ::zpp_nape::geom::ZPP_PartitionedPoly P){
            	HX_STACKFRAME(&_hx_pos_f463647f2cccefbe_190_optimise)
HXLINE( 191)		{
HXLINE( 192)			 ::zpp_nape::geom::ZPP_PartitionVertex F = P->vertices;
HXLINE( 193)			 ::zpp_nape::geom::ZPP_PartitionVertex L = P->vertices;
HXLINE( 194)			if (hx::IsNotNull( F )) {
HXLINE( 195)				 ::zpp_nape::geom::ZPP_PartitionVertex nite = F;
HXLINE( 196)				while(true){
HXLINE( 197)					 ::zpp_nape::geom::ZPP_PartitionVertex p = nite;
HXLINE( 199)					p->sort();
HXLINE( 201)					nite = nite->next;
HXLINE( 196)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 196)						goto _hx_goto_1;
            					}
            				}
            				_hx_goto_1:;
            			}
            		}
HXLINE( 206)		{
HXLINE( 207)			 ::zpp_nape::geom::ZPP_PartitionVertex F1 = P->vertices;
HXLINE( 208)			 ::zpp_nape::geom::ZPP_PartitionVertex L1 = P->vertices;
HXLINE( 209)			if (hx::IsNotNull( F1 )) {
HXLINE( 210)				 ::zpp_nape::geom::ZPP_PartitionVertex nite1 = F1;
HXLINE( 211)				while(true){
HXLINE( 212)					 ::zpp_nape::geom::ZPP_PartitionVertex p1 = nite1;
HXLINE( 214)					{
HXLINE( 215)						 ::zpp_nape::geom::ZPP_PartitionVertex pright = p1->prev;
HXLINE( 216)						 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex ppre = null();
HXLINE( 217)						{
HXLINE( 218)							 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cx_ite = p1->diagonals->head;
HXLINE( 219)							while(hx::IsNotNull( cx_ite )){
HXLINE( 220)								 ::zpp_nape::geom::ZPP_PartitionVertex pdiag = cx_ite->elt;
HXLINE( 221)								{
HXLINE( 222)									 ::zpp_nape::geom::ZPP_PartitionVertex pleft;
HXDLIN( 222)									if (hx::IsNull( cx_ite->next )) {
HXLINE( 222)										pleft = p1->next;
            									}
            									else {
HXLINE( 222)										pleft = cx_ite->next->elt;
            									}
HXLINE( 223)									if (!(::zpp_nape::geom::ZPP_Convex_obj::isinner(pleft,p1,pright))) {
HXLINE( 224)										ppre = cx_ite;
HXLINE( 225)										pright = pdiag;
HXLINE( 227)										cx_ite = cx_ite->next;
HXLINE( 228)										continue;
            									}
HXLINE( 231)									bool removable = true;
HXLINE( 232)									 ::zpp_nape::geom::ZPP_PartitionVertex q = pdiag;
HXLINE( 233)									 ::zpp_nape::geom::ZPP_PartitionVertex qright = q->prev;
HXLINE( 234)									 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex qpre = null();
HXLINE( 235)									{
HXLINE( 236)										 ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex cx_ite1 = q->diagonals->head;
HXLINE( 237)										while(hx::IsNotNull( cx_ite1 )){
HXLINE( 238)											 ::zpp_nape::geom::ZPP_PartitionVertex qdiag = cx_ite1->elt;
HXLINE( 239)											{
HXLINE( 240)												if (hx::IsEq( qdiag,p1 )) {
HXLINE( 241)													 ::zpp_nape::geom::ZPP_PartitionVertex qleft;
HXDLIN( 241)													if (hx::IsNull( cx_ite1->next )) {
HXLINE( 241)														qleft = q->next;
            													}
            													else {
HXLINE( 241)														qleft = cx_ite1->next->elt;
            													}
HXLINE( 242)													removable = ::zpp_nape::geom::ZPP_Convex_obj::isinner(qleft,q,qright);
HXLINE( 243)													goto _hx_goto_4;
            												}
HXLINE( 245)												qright = qdiag;
HXLINE( 246)												qpre = cx_ite1;
            											}
HXLINE( 248)											cx_ite1 = cx_ite1->next;
            										}
            										_hx_goto_4:;
            									}
HXLINE( 251)									if (removable) {
HXLINE( 252)										cx_ite = p1->diagonals->erase(ppre);
HXLINE( 253)										q->diagonals->erase(qpre);
HXLINE( 254)										continue;
            									}
HXLINE( 256)									pright = pdiag;
HXLINE( 257)									ppre = cx_ite;
            								}
HXLINE( 259)								cx_ite = cx_ite->next;
            							}
            						}
            					}
HXLINE( 264)					nite1 = nite1->next;
HXLINE( 211)					if (!(hx::IsNotEq( nite1,L1 ))) {
HXLINE( 211)						goto _hx_goto_2;
            					}
            				}
            				_hx_goto_2:;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Convex_obj,optimise,(void))


ZPP_Convex_obj::ZPP_Convex_obj()
{
}

bool ZPP_Convex_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"isinner") ) { outValue = isinner_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"optimise") ) { outValue = optimise_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Convex_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ZPP_Convex_obj_sStaticStorageInfo = 0;
#endif

hx::Class ZPP_Convex_obj::__mClass;

static ::String ZPP_Convex_obj_sStaticFields[] = {
	HX_("isinner",6c,65,74,c7),
	HX_("optimise",c4,86,18,1d),
	::String(null())
};

void ZPP_Convex_obj::__register()
{
	ZPP_Convex_obj _hx_dummy;
	ZPP_Convex_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_Convex",1d,83,b6,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Convex_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Convex_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Convex_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Convex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Convex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
