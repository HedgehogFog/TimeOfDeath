// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleEvent
#include <hxinc/zpp_nape/geom/ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleSeg
#include <hxinc/zpp_nape/geom/ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <hxinc/zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleEvent
#include <hxinc/zpp_nape/util/ZPP_Set_ZPP_SimpleEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7cb419ed877578a6_383_new,"zpp_nape.geom.ZPP_SimpleEvent","new",0xb70e1104,"zpp_nape.geom.ZPP_SimpleEvent.new","zpp_nape/geom/Simple.hx",383,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb419ed877578a6_430_free,"zpp_nape.geom.ZPP_SimpleEvent","free",0x7000eb88,"zpp_nape.geom.ZPP_SimpleEvent.free","zpp_nape/geom/Simple.hx",430,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb419ed877578a6_437_alloc,"zpp_nape.geom.ZPP_SimpleEvent","alloc",0xabda5619,"zpp_nape.geom.ZPP_SimpleEvent.alloc","zpp_nape/geom/Simple.hx",437,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb419ed877578a6_389_swap_nodes,"zpp_nape.geom.ZPP_SimpleEvent","swap_nodes",0x1e31b621,"zpp_nape.geom.ZPP_SimpleEvent.swap_nodes","zpp_nape/geom/Simple.hx",389,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb419ed877578a6_395_less_xy,"zpp_nape.geom.ZPP_SimpleEvent","less_xy",0x1f0bac0b,"zpp_nape.geom.ZPP_SimpleEvent.less_xy","zpp_nape/geom/Simple.hx",395,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb419ed877578a6_440_get,"zpp_nape.geom.ZPP_SimpleEvent","get",0xb708c13a,"zpp_nape.geom.ZPP_SimpleEvent.get","zpp_nape/geom/Simple.hx",440,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb419ed877578a6_404_boot,"zpp_nape.geom.ZPP_SimpleEvent","boot",0x6d59d30e,"zpp_nape.geom.ZPP_SimpleEvent.boot","zpp_nape/geom/Simple.hx",404,0x62f156db)
namespace zpp_nape{
namespace geom{

void ZPP_SimpleEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7cb419ed877578a6_383_new)
HXLINE( 403)		this->next = null();
HXLINE( 388)		this->node = null();
HXLINE( 387)		this->segment2 = null();
HXLINE( 386)		this->segment = null();
HXLINE( 385)		this->vertex = null();
HXLINE( 384)		this->type = 0;
            	}

Dynamic ZPP_SimpleEvent_obj::__CreateEmpty() { return new ZPP_SimpleEvent_obj; }

void *ZPP_SimpleEvent_obj::_hx_vtable = 0;

Dynamic ZPP_SimpleEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SimpleEvent_obj > _hx_result = new ZPP_SimpleEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SimpleEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ff6e596;
}

void ZPP_SimpleEvent_obj::free(){
            	HX_STACKFRAME(&_hx_pos_7cb419ed877578a6_430_free)
HXLINE( 431)		this->vertex = null();
HXLINE( 432)		this->segment = (this->segment2 = null());
HXLINE( 433)		this->node = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimpleEvent_obj,free,(void))

void ZPP_SimpleEvent_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_7cb419ed877578a6_437_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimpleEvent_obj,alloc,(void))

void ZPP_SimpleEvent_obj::swap_nodes( ::zpp_nape::geom::ZPP_SimpleEvent a, ::zpp_nape::geom::ZPP_SimpleEvent b){
            	HX_STACKFRAME(&_hx_pos_7cb419ed877578a6_389_swap_nodes)
HXLINE( 390)		 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent t = a->node;
HXLINE( 391)		a->node = b->node;
HXLINE( 392)		b->node = t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleEvent_obj,swap_nodes,(void))

bool ZPP_SimpleEvent_obj::less_xy( ::zpp_nape::geom::ZPP_SimpleEvent a, ::zpp_nape::geom::ZPP_SimpleEvent b){
            	HX_STACKFRAME(&_hx_pos_7cb419ed877578a6_395_less_xy)
HXDLIN( 395)		if ((a->vertex->x < b->vertex->x)) {
HXDLIN( 395)			return true;
            		}
            		else {
HXLINE( 396)			if ((a->vertex->x > b->vertex->x)) {
HXLINE( 396)				return false;
            			}
            			else {
HXLINE( 398)				if ((a->vertex->y < b->vertex->y)) {
HXLINE( 398)					return true;
            				}
            				else {
HXLINE( 399)					if ((a->vertex->y > b->vertex->y)) {
HXLINE( 399)						return false;
            					}
            					else {
HXLINE( 400)						return (a->type < b->type);
            					}
            				}
            			}
            		}
HXLINE( 395)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleEvent_obj,less_xy,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_SimpleEvent_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_SimpleEvent_obj::get( ::zpp_nape::geom::ZPP_SimpleVert v){
            	HX_GC_STACKFRAME(&_hx_pos_7cb419ed877578a6_440_get)
HXLINE( 441)		 ::zpp_nape::geom::ZPP_SimpleEvent ret;
HXLINE( 443)		if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 444)			ret =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 450)			ret = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE( 451)			::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret->next;
HXLINE( 452)			ret->next = null();
            		}
HXLINE( 459)		ret->vertex = v;
HXLINE( 460)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_SimpleEvent_obj,get,return )


hx::ObjectPtr< ZPP_SimpleEvent_obj > ZPP_SimpleEvent_obj::__new() {
	hx::ObjectPtr< ZPP_SimpleEvent_obj > __this = new ZPP_SimpleEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SimpleEvent_obj > ZPP_SimpleEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SimpleEvent_obj *__this = (ZPP_SimpleEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SimpleEvent_obj), true, "zpp_nape.geom.ZPP_SimpleEvent"));
	*(void **)__this = ZPP_SimpleEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SimpleEvent_obj::ZPP_SimpleEvent_obj()
{
}

void ZPP_SimpleEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SimpleEvent);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(vertex,"vertex");
	HX_MARK_MEMBER_NAME(segment,"segment");
	HX_MARK_MEMBER_NAME(segment2,"segment2");
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_END_CLASS();
}

void ZPP_SimpleEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(vertex,"vertex");
	HX_VISIT_MEMBER_NAME(segment,"segment");
	HX_VISIT_MEMBER_NAME(segment2,"segment2");
	HX_VISIT_MEMBER_NAME(node,"node");
	HX_VISIT_MEMBER_NAME(next,"next");
}

hx::Val ZPP_SimpleEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vertex") ) { return hx::Val( vertex ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"segment") ) { return hx::Val( segment ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segment2") ) { return hx::Val( segment2 ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_SimpleEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"less_xy") ) { outValue = less_xy_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"swap_nodes") ) { outValue = swap_nodes_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_SimpleEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleEvent >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vertex") ) { vertex=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleVert >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"segment") ) { segment=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSeg >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segment2") ) { segment2=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSeg >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_SimpleEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_SimpleEvent >(); return true; }
	}
	return false;
}

void ZPP_SimpleEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("vertex",64,db,47,a1));
	outFields->push(HX_("segment",b3,cf,ce,a6));
	outFields->push(HX_("segment2",1f,ed,26,4e));
	outFields->push(HX_("node",02,0a,0a,49));
	outFields->push(HX_("next",f3,84,02,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SimpleEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ZPP_SimpleEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleVert */ ,(int)offsetof(ZPP_SimpleEvent_obj,vertex),HX_("vertex",64,db,47,a1)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleSeg */ ,(int)offsetof(ZPP_SimpleEvent_obj,segment),HX_("segment",b3,cf,ce,a6)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleSeg */ ,(int)offsetof(ZPP_SimpleEvent_obj,segment2),HX_("segment2",1f,ed,26,4e)},
	{hx::fsObject /*  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent */ ,(int)offsetof(ZPP_SimpleEvent_obj,node),HX_("node",02,0a,0a,49)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleEvent */ ,(int)offsetof(ZPP_SimpleEvent_obj,next),HX_("next",f3,84,02,49)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_SimpleEvent_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleEvent */ ,(void *) &ZPP_SimpleEvent_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_SimpleEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("vertex",64,db,47,a1),
	HX_("segment",b3,cf,ce,a6),
	HX_("segment2",1f,ed,26,4e),
	HX_("node",02,0a,0a,49),
	HX_("next",f3,84,02,49),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	::String(null()) };

static void ZPP_SimpleEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SimpleEvent_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SimpleEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SimpleEvent_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_SimpleEvent_obj::__mClass;

static ::String ZPP_SimpleEvent_obj_sStaticFields[] = {
	HX_("swap_nodes",45,da,d2,e8),
	HX_("less_xy",67,49,7a,70),
	HX_("zpp_pool",81,5d,d4,38),
	HX_("get",96,80,4e,00),
	::String(null())
};

void ZPP_SimpleEvent_obj::__register()
{
	ZPP_SimpleEvent_obj _hx_dummy;
	ZPP_SimpleEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_SimpleEvent",12,7f,70,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SimpleEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_SimpleEvent_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_SimpleEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SimpleEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SimpleEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SimpleEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SimpleEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SimpleEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SimpleEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_SimpleEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7cb419ed877578a6_404_boot)
HXDLIN( 404)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
