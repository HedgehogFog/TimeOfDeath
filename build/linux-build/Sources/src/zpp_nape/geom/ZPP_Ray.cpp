// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <hxinc/nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <hxinc/nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <hxinc/zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <hxinc/zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <hxinc/zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <hxinc/zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <hxinc/zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <hxinc/zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <hxinc/zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_RayResult
#include <hxinc/zpp_nape/util/ZNPList_RayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_RayResult
#include <hxinc/zpp_nape/util/ZNPNode_RayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_RayResultList
#include <hxinc/zpp_nape/util/ZPP_RayResultList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_174_new,"zpp_nape.geom.ZPP_Ray","new",0x8196e766,"zpp_nape.geom.ZPP_Ray.new","zpp_nape/geom/Ray.hx",174,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_193_origin_invalidate,"zpp_nape.geom.ZPP_Ray","origin_invalidate",0x49c6fffa,"zpp_nape.geom.ZPP_Ray.origin_invalidate","zpp_nape/geom/Ray.hx",193,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_214_direction_invalidate,"zpp_nape.geom.ZPP_Ray","direction_invalidate",0x73b160f5,"zpp_nape.geom.ZPP_Ray.direction_invalidate","zpp_nape/geom/Ray.hx",214,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_288_invalidate_dir,"zpp_nape.geom.ZPP_Ray","invalidate_dir",0x06fe5003,"zpp_nape.geom.ZPP_Ray.invalidate_dir","zpp_nape/geom/Ray.hx",288,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_291_validate_dir,"zpp_nape.geom.ZPP_Ray","validate_dir",0x991f2e1e,"zpp_nape.geom.ZPP_Ray.validate_dir","zpp_nape/geom/Ray.hx",291,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_391_rayAABB,"zpp_nape.geom.ZPP_Ray","rayAABB",0xae538f90,"zpp_nape.geom.ZPP_Ray.rayAABB","zpp_nape/geom/Ray.hx",391,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_427_aabbtest,"zpp_nape.geom.ZPP_Ray","aabbtest",0xfe44ee2c,"zpp_nape.geom.ZPP_Ray.aabbtest","zpp_nape/geom/Ray.hx",427,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_435_aabbsect,"zpp_nape.geom.ZPP_Ray","aabbsect",0xfd9ba99d,"zpp_nape.geom.ZPP_Ray.aabbsect","zpp_nape/geom/Ray.hx",435,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_491_circlesect,"zpp_nape.geom.ZPP_Ray","circlesect",0x6df4b38d,"zpp_nape.geom.ZPP_Ray.circlesect","zpp_nape/geom/Ray.hx",491,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_761_circlesect2,"zpp_nape.geom.ZPP_Ray","circlesect2",0xc8286805,"zpp_nape.geom.ZPP_Ray.circlesect2","zpp_nape/geom/Ray.hx",761,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_1068_polysect,"zpp_nape.geom.ZPP_Ray","polysect",0xdb85cb49,"zpp_nape.geom.ZPP_Ray.polysect","zpp_nape/geom/Ray.hx",1068,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_1185_polysect2,"zpp_nape.geom.ZPP_Ray","polysect2",0x398c14c9,"zpp_nape.geom.ZPP_Ray.polysect2","zpp_nape/geom/Ray.hx",1185,0x908d5ea5)
HX_LOCAL_STACK_FRAME(_hx_pos_f0f2732ef9260e4c_176_boot,"zpp_nape.geom.ZPP_Ray","boot",0xda8c926c,"zpp_nape.geom.ZPP_Ray.boot","zpp_nape/geom/Ray.hx",176,0x908d5ea5)
namespace zpp_nape{
namespace geom{

void ZPP_Ray_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_174_new)
HXLINE( 284)		this->zip_dir = false;
HXLINE( 191)		this->absnormaly = ((Float)0.0);
HXLINE( 190)		this->absnormalx = ((Float)0.0);
HXLINE( 189)		this->normaly = ((Float)0.0);
HXLINE( 188)		this->normalx = ((Float)0.0);
HXLINE( 187)		this->idiry = ((Float)0.0);
HXLINE( 186)		this->idirx = ((Float)0.0);
HXLINE( 185)		this->diry = ((Float)0.0);
HXLINE( 184)		this->dirx = ((Float)0.0);
HXLINE( 183)		this->originy = ((Float)0.0);
HXLINE( 182)		this->originx = ((Float)0.0);
HXLINE( 181)		this->userData = null();
HXLINE( 180)		this->maxdist = ((Float)0.0);
HXLINE( 179)		this->direction = null();
HXLINE( 178)		this->origin = null();
HXLINE( 238)		Float x = ( (Float)(0) );
HXDLIN( 238)		Float y = ( (Float)(0) );
HXDLIN( 238)		bool _hx_tmp;
HXDLIN( 238)		if ((x == x)) {
HXLINE( 238)			_hx_tmp = (y != y);
            		}
            		else {
HXLINE( 238)			_hx_tmp = true;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 238)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 238)		 ::nape::geom::Vec2 ret;
HXDLIN( 238)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 238)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 238)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 238)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 238)			ret->zpp_pool = null();
HXDLIN( 238)			ret->zpp_disp = false;
HXDLIN( 238)			if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 238)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 238)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 238)			 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 238)			{
HXLINE( 238)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 238)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 238)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 238)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 238)					ret1->next = null();
            				}
HXDLIN( 238)				ret1->weak = false;
            			}
HXDLIN( 238)			ret1->_immutable = false;
HXDLIN( 238)			{
HXLINE( 238)				ret1->x = x;
HXDLIN( 238)				ret1->y = y;
            			}
HXDLIN( 238)			ret->zpp_inner = ret1;
HXDLIN( 238)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 238)			bool _hx_tmp1;
HXDLIN( 238)			if (hx::IsNotNull( ret )) {
HXLINE( 238)				_hx_tmp1 = ret->zpp_disp;
            			}
            			else {
HXLINE( 238)				_hx_tmp1 = false;
            			}
HXDLIN( 238)			if (_hx_tmp1) {
HXLINE( 238)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 238)			{
HXLINE( 238)				 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN( 238)				if (_this->_immutable) {
HXLINE( 238)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 238)				if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE( 238)					_this->_isimmutable();
            				}
            			}
HXDLIN( 238)			bool _hx_tmp2;
HXDLIN( 238)			if ((x == x)) {
HXLINE( 238)				_hx_tmp2 = (y != y);
            			}
            			else {
HXLINE( 238)				_hx_tmp2 = true;
            			}
HXDLIN( 238)			if (_hx_tmp2) {
HXLINE( 238)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 238)			bool _hx_tmp3;
HXDLIN( 238)			bool _hx_tmp4;
HXDLIN( 238)			if (hx::IsNotNull( ret )) {
HXLINE( 238)				_hx_tmp4 = ret->zpp_disp;
            			}
            			else {
HXLINE( 238)				_hx_tmp4 = false;
            			}
HXDLIN( 238)			if (_hx_tmp4) {
HXLINE( 238)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 238)			{
HXLINE( 238)				 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN( 238)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 238)					_this1->_validate();
            				}
            			}
HXDLIN( 238)			if ((ret->zpp_inner->x == x)) {
HXLINE( 238)				bool _hx_tmp5;
HXDLIN( 238)				if (hx::IsNotNull( ret )) {
HXLINE( 238)					_hx_tmp5 = ret->zpp_disp;
            				}
            				else {
HXLINE( 238)					_hx_tmp5 = false;
            				}
HXDLIN( 238)				if (_hx_tmp5) {
HXLINE( 238)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 238)				{
HXLINE( 238)					 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN( 238)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 238)						_this2->_validate();
            					}
            				}
HXDLIN( 238)				_hx_tmp3 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 238)				_hx_tmp3 = false;
            			}
HXDLIN( 238)			if (!(_hx_tmp3)) {
HXLINE( 238)				{
HXLINE( 238)					ret->zpp_inner->x = x;
HXDLIN( 238)					ret->zpp_inner->y = y;
            				}
HXDLIN( 238)				{
HXLINE( 238)					 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN( 238)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 238)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 238)		ret->zpp_inner->weak = false;
HXDLIN( 238)		this->origin = ret;
HXLINE( 239)		this->origin->zpp_inner->_invalidate = this->origin_invalidate_dyn();
HXLINE( 240)		Float x1 = ( (Float)(0) );
HXDLIN( 240)		Float y1 = ( (Float)(0) );
HXDLIN( 240)		bool _hx_tmp6;
HXDLIN( 240)		if ((x1 == x1)) {
HXLINE( 240)			_hx_tmp6 = (y1 != y1);
            		}
            		else {
HXLINE( 240)			_hx_tmp6 = true;
            		}
HXDLIN( 240)		if (_hx_tmp6) {
HXLINE( 240)			HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            		}
HXDLIN( 240)		 ::nape::geom::Vec2 ret2;
HXDLIN( 240)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 240)			ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 240)			ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 240)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 240)			ret2->zpp_pool = null();
HXDLIN( 240)			ret2->zpp_disp = false;
HXDLIN( 240)			if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 240)				::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            			}
            		}
HXDLIN( 240)		if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 240)			 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN( 240)			{
HXLINE( 240)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 240)					ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 240)					ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 240)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 240)					ret3->next = null();
            				}
HXDLIN( 240)				ret3->weak = false;
            			}
HXDLIN( 240)			ret3->_immutable = false;
HXDLIN( 240)			{
HXLINE( 240)				ret3->x = x1;
HXDLIN( 240)				ret3->y = y1;
            			}
HXDLIN( 240)			ret2->zpp_inner = ret3;
HXDLIN( 240)			ret2->zpp_inner->outer = ret2;
            		}
            		else {
HXLINE( 240)			bool _hx_tmp7;
HXDLIN( 240)			if (hx::IsNotNull( ret2 )) {
HXLINE( 240)				_hx_tmp7 = ret2->zpp_disp;
            			}
            			else {
HXLINE( 240)				_hx_tmp7 = false;
            			}
HXDLIN( 240)			if (_hx_tmp7) {
HXLINE( 240)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 240)			{
HXLINE( 240)				 ::zpp_nape::geom::ZPP_Vec2 _this4 = ret2->zpp_inner;
HXDLIN( 240)				if (_this4->_immutable) {
HXLINE( 240)					HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            				}
HXDLIN( 240)				if (hx::IsNotNull( _this4->_isimmutable )) {
HXLINE( 240)					_this4->_isimmutable();
            				}
            			}
HXDLIN( 240)			bool _hx_tmp8;
HXDLIN( 240)			if ((x1 == x1)) {
HXLINE( 240)				_hx_tmp8 = (y1 != y1);
            			}
            			else {
HXLINE( 240)				_hx_tmp8 = true;
            			}
HXDLIN( 240)			if (_hx_tmp8) {
HXLINE( 240)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN( 240)			bool _hx_tmp9;
HXDLIN( 240)			bool _hx_tmp10;
HXDLIN( 240)			if (hx::IsNotNull( ret2 )) {
HXLINE( 240)				_hx_tmp10 = ret2->zpp_disp;
            			}
            			else {
HXLINE( 240)				_hx_tmp10 = false;
            			}
HXDLIN( 240)			if (_hx_tmp10) {
HXLINE( 240)				HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            			}
HXDLIN( 240)			{
HXLINE( 240)				 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret2->zpp_inner;
HXDLIN( 240)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 240)					_this5->_validate();
            				}
            			}
HXDLIN( 240)			if ((ret2->zpp_inner->x == x1)) {
HXLINE( 240)				bool _hx_tmp11;
HXDLIN( 240)				if (hx::IsNotNull( ret2 )) {
HXLINE( 240)					_hx_tmp11 = ret2->zpp_disp;
            				}
            				else {
HXLINE( 240)					_hx_tmp11 = false;
            				}
HXDLIN( 240)				if (_hx_tmp11) {
HXLINE( 240)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN( 240)				{
HXLINE( 240)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret2->zpp_inner;
HXDLIN( 240)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 240)						_this6->_validate();
            					}
            				}
HXDLIN( 240)				_hx_tmp9 = (ret2->zpp_inner->y == y1);
            			}
            			else {
HXLINE( 240)				_hx_tmp9 = false;
            			}
HXDLIN( 240)			if (!(_hx_tmp9)) {
HXLINE( 240)				{
HXLINE( 240)					ret2->zpp_inner->x = x1;
HXDLIN( 240)					ret2->zpp_inner->y = y1;
            				}
HXDLIN( 240)				{
HXLINE( 240)					 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret2->zpp_inner;
HXDLIN( 240)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 240)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN( 240)		ret2->zpp_inner->weak = false;
HXDLIN( 240)		this->direction = ret2;
HXLINE( 241)		this->direction->zpp_inner->_invalidate = this->direction_invalidate_dyn();
HXLINE( 242)		{
HXLINE( 243)			this->originx = ( (Float)(0) );
HXLINE( 244)			this->originy = ( (Float)(0) );
            		}
HXLINE( 262)		{
HXLINE( 263)			this->dirx = ( (Float)(0) );
HXLINE( 264)			this->diry = ( (Float)(0) );
            		}
HXLINE( 282)		this->zip_dir = false;
            	}

Dynamic ZPP_Ray_obj::__CreateEmpty() { return new ZPP_Ray_obj; }

void *ZPP_Ray_obj::_hx_vtable = 0;

Dynamic ZPP_Ray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Ray_obj > _hx_result = new ZPP_Ray_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Ray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00a851fc;
}

void ZPP_Ray_obj::origin_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_193_origin_invalidate)
HXLINE( 194)		this->originx = x->x;
HXLINE( 195)		this->originy = x->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Ray_obj,origin_invalidate,(void))

void ZPP_Ray_obj::direction_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_214_direction_invalidate)
HXLINE( 215)		{
HXLINE( 216)			this->dirx = x->x;
HXLINE( 217)			this->diry = x->y;
            		}
HXLINE( 235)		this->zip_dir = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Ray_obj,direction_invalidate,(void))

void ZPP_Ray_obj::invalidate_dir(){
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_288_invalidate_dir)
HXDLIN( 288)		this->zip_dir = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Ray_obj,invalidate_dir,(void))

void ZPP_Ray_obj::validate_dir(){
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_291_validate_dir)
HXDLIN( 291)		if (this->zip_dir) {
HXLINE( 292)			this->zip_dir = false;
HXLINE( 294)			if ((((this->dirx * this->dirx) + (this->diry * this->diry)) < ::nape::Config_obj::epsilon)) {
HXLINE( 295)				HX_STACK_DO_THROW(HX_("Error: Ray::direction is degenerate",0f,9a,8b,e5));
            			}
HXLINE( 298)			{
HXLINE( 299)				Float d = ((this->dirx * this->dirx) + (this->diry * this->diry));
HXLINE( 308)				Float imag = (((Float)1.0) / ::Math_obj::sqrt(d));
HXLINE( 309)				{
HXLINE( 310)					Float t = imag;
HXLINE( 319)					 ::zpp_nape::geom::ZPP_Ray _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 319)					_hx_tmp->dirx = (_hx_tmp->dirx * t);
HXLINE( 320)					 ::zpp_nape::geom::ZPP_Ray _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 320)					_hx_tmp1->diry = (_hx_tmp1->diry * t);
            				}
            			}
HXLINE( 323)			{
HXLINE( 324)				this->idirx = (( (Float)(1) ) / this->dirx);
HXLINE( 325)				this->idiry = (( (Float)(1) ) / this->diry);
            			}
HXLINE( 343)			{
HXLINE( 344)				this->normalx = -(this->diry);
HXLINE( 345)				this->normaly = this->dirx;
            			}
HXLINE( 363)			{
HXLINE( 365)				Float x = this->normalx;
HXLINE( 364)				Float _hx_tmp2;
HXLINE( 366)				if ((x < 0)) {
HXLINE( 364)					_hx_tmp2 = -(x);
            				}
            				else {
HXLINE( 364)					_hx_tmp2 = x;
            				}
HXDLIN( 364)				this->absnormalx = _hx_tmp2;
HXLINE( 369)				Float x1 = this->normaly;
HXLINE( 368)				Float _hx_tmp3;
HXLINE( 370)				if ((x1 < 0)) {
HXLINE( 368)					_hx_tmp3 = -(x1);
            				}
            				else {
HXLINE( 368)					_hx_tmp3 = x1;
            				}
HXDLIN( 368)				this->absnormaly = _hx_tmp3;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Ray_obj,validate_dir,(void))

 ::zpp_nape::geom::ZPP_AABB ZPP_Ray_obj::rayAABB(){
            	HX_GC_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_391_rayAABB)
HXLINE( 392)		Float x0 = this->originx;
HXLINE( 393)		Float x1 = x0;
HXLINE( 394)		Float y0 = this->originy;
HXLINE( 395)		Float y1 = y0;
HXLINE( 396)		if ((this->maxdist >= ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 397)			if ((this->dirx > 0)) {
HXLINE( 398)				x1 = ::Math_obj::POSITIVE_INFINITY;
            			}
            			else {
HXLINE( 400)				if ((this->dirx < 0)) {
HXLINE( 401)					x1 = ::Math_obj::NEGATIVE_INFINITY;
            				}
            			}
HXLINE( 403)			if ((this->diry > 0)) {
HXLINE( 404)				y1 = ::Math_obj::POSITIVE_INFINITY;
            			}
            			else {
HXLINE( 406)				if ((this->diry < 0)) {
HXLINE( 407)					y1 = ::Math_obj::NEGATIVE_INFINITY;
            				}
            			}
            		}
            		else {
HXLINE( 411)			x1 = (x1 + (this->maxdist * this->dirx));
HXLINE( 412)			y1 = (y1 + (this->maxdist * this->diry));
            		}
HXLINE( 414)		if ((x1 < x0)) {
HXLINE( 415)			Float t = x0;
HXLINE( 416)			x0 = x1;
HXLINE( 417)			x1 = t;
            		}
HXLINE( 419)		if ((y1 < y0)) {
HXLINE( 420)			Float t1 = y0;
HXLINE( 421)			y0 = y1;
HXLINE( 422)			y1 = t1;
            		}
HXLINE( 424)		 ::zpp_nape::geom::ZPP_AABB ret;
HXDLIN( 424)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 424)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 424)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 424)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 424)			ret->next = null();
            		}
HXDLIN( 424)		{
HXLINE( 424)			ret->minx = x0;
HXDLIN( 424)			ret->miny = y0;
            		}
HXDLIN( 424)		{
HXLINE( 424)			ret->maxx = x1;
HXDLIN( 424)			ret->maxy = y1;
            		}
HXDLIN( 424)		 ::zpp_nape::geom::ZPP_AABB rayab = ret;
HXLINE( 425)		return rayab;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Ray_obj,rayAABB,return )

bool ZPP_Ray_obj::aabbtest( ::zpp_nape::geom::ZPP_AABB a){
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_427_aabbtest)
HXLINE( 428)		Float dot1 = ((this->normalx * (this->originx - (((Float)0.5) * (a->minx + a->maxx)))) + (this->normaly * (this->originy - (((Float)0.5) * (a->miny + a->maxy)))));
HXLINE( 429)		Float dot2 = (((this->absnormalx * ((Float)0.5)) * (a->maxx - a->minx)) + ((this->absnormaly * ((Float)0.5)) * (a->maxy - a->miny)));
HXLINE( 431)		Float x = dot1;
HXLINE( 430)		Float _hx_tmp;
HXLINE( 432)		if ((x < 0)) {
HXLINE( 430)			_hx_tmp = -(x);
            		}
            		else {
HXLINE( 430)			_hx_tmp = x;
            		}
HXDLIN( 430)		return (_hx_tmp < dot2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Ray_obj,aabbtest,return )

Float ZPP_Ray_obj::aabbsect( ::zpp_nape::geom::ZPP_AABB a){
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_435_aabbsect)
HXLINE( 436)		bool cx;
HXDLIN( 436)		if ((this->originx >= a->minx)) {
HXLINE( 436)			cx = (this->originx <= a->maxx);
            		}
            		else {
HXLINE( 436)			cx = false;
            		}
HXLINE( 437)		bool cy;
HXDLIN( 437)		if ((this->originy >= a->miny)) {
HXLINE( 437)			cy = (this->originy <= a->maxy);
            		}
            		else {
HXLINE( 437)			cy = false;
            		}
HXLINE( 438)		bool _hx_tmp;
HXDLIN( 438)		if (cx) {
HXLINE( 438)			_hx_tmp = cy;
            		}
            		else {
HXLINE( 438)			_hx_tmp = false;
            		}
HXDLIN( 438)		if (_hx_tmp) {
HXLINE( 438)			return ((Float)0.0);
            		}
            		else {
HXLINE( 440)			Float ret = ((Float)-1.0);
HXLINE( 441)			while(true){
HXLINE( 442)				bool _hx_tmp1;
HXDLIN( 442)				if ((this->dirx >= 0)) {
HXLINE( 442)					_hx_tmp1 = (this->originx >= a->maxx);
            				}
            				else {
HXLINE( 442)					_hx_tmp1 = false;
            				}
HXDLIN( 442)				if (_hx_tmp1) {
HXLINE( 442)					goto _hx_goto_7;
            				}
HXLINE( 443)				bool _hx_tmp2;
HXDLIN( 443)				if ((this->dirx <= 0)) {
HXLINE( 443)					_hx_tmp2 = (this->originx <= a->minx);
            				}
            				else {
HXLINE( 443)					_hx_tmp2 = false;
            				}
HXDLIN( 443)				if (_hx_tmp2) {
HXLINE( 443)					goto _hx_goto_7;
            				}
HXLINE( 444)				bool _hx_tmp3;
HXDLIN( 444)				if ((this->diry >= 0)) {
HXLINE( 444)					_hx_tmp3 = (this->originy >= a->maxy);
            				}
            				else {
HXLINE( 444)					_hx_tmp3 = false;
            				}
HXDLIN( 444)				if (_hx_tmp3) {
HXLINE( 444)					goto _hx_goto_7;
            				}
HXLINE( 445)				bool _hx_tmp4;
HXDLIN( 445)				if ((this->diry <= 0)) {
HXLINE( 445)					_hx_tmp4 = (this->originy <= a->miny);
            				}
            				else {
HXLINE( 445)					_hx_tmp4 = false;
            				}
HXDLIN( 445)				if (_hx_tmp4) {
HXLINE( 445)					goto _hx_goto_7;
            				}
HXLINE( 446)				if ((this->dirx > 0)) {
HXLINE( 447)					Float t = ((a->minx - this->originx) * this->idirx);
HXLINE( 448)					bool _hx_tmp5;
HXDLIN( 448)					if ((t >= 0)) {
HXLINE( 448)						_hx_tmp5 = (t <= this->maxdist);
            					}
            					else {
HXLINE( 448)						_hx_tmp5 = false;
            					}
HXDLIN( 448)					if (_hx_tmp5) {
HXLINE( 449)						Float y = (this->originy + (t * this->diry));
HXLINE( 450)						bool _hx_tmp6;
HXDLIN( 450)						if ((y >= a->miny)) {
HXLINE( 450)							_hx_tmp6 = (y <= a->maxy);
            						}
            						else {
HXLINE( 450)							_hx_tmp6 = false;
            						}
HXDLIN( 450)						if (_hx_tmp6) {
HXLINE( 451)							ret = t;
HXLINE( 452)							goto _hx_goto_7;
            						}
            					}
            				}
            				else {
HXLINE( 456)					if ((this->dirx < 0)) {
HXLINE( 457)						Float t1 = ((a->maxx - this->originx) * this->idirx);
HXLINE( 458)						bool _hx_tmp7;
HXDLIN( 458)						if ((t1 >= 0)) {
HXLINE( 458)							_hx_tmp7 = (t1 <= this->maxdist);
            						}
            						else {
HXLINE( 458)							_hx_tmp7 = false;
            						}
HXDLIN( 458)						if (_hx_tmp7) {
HXLINE( 459)							Float y1 = (this->originy + (t1 * this->diry));
HXLINE( 460)							bool _hx_tmp8;
HXDLIN( 460)							if ((y1 >= a->miny)) {
HXLINE( 460)								_hx_tmp8 = (y1 <= a->maxy);
            							}
            							else {
HXLINE( 460)								_hx_tmp8 = false;
            							}
HXDLIN( 460)							if (_hx_tmp8) {
HXLINE( 461)								ret = t1;
HXLINE( 462)								goto _hx_goto_7;
            							}
            						}
            					}
            				}
HXLINE( 466)				if ((this->diry > 0)) {
HXLINE( 467)					Float t2 = ((a->miny - this->originy) * this->idiry);
HXLINE( 468)					bool _hx_tmp9;
HXDLIN( 468)					if ((t2 >= 0)) {
HXLINE( 468)						_hx_tmp9 = (t2 <= this->maxdist);
            					}
            					else {
HXLINE( 468)						_hx_tmp9 = false;
            					}
HXDLIN( 468)					if (_hx_tmp9) {
HXLINE( 469)						Float x = (this->originx + (t2 * this->dirx));
HXLINE( 470)						bool _hx_tmp10;
HXDLIN( 470)						if ((x >= a->minx)) {
HXLINE( 470)							_hx_tmp10 = (x <= a->maxx);
            						}
            						else {
HXLINE( 470)							_hx_tmp10 = false;
            						}
HXDLIN( 470)						if (_hx_tmp10) {
HXLINE( 471)							ret = t2;
HXLINE( 472)							goto _hx_goto_7;
            						}
            					}
            				}
            				else {
HXLINE( 476)					if ((this->diry < 0)) {
HXLINE( 477)						Float t3 = ((a->maxy - this->originy) * this->idiry);
HXLINE( 478)						bool _hx_tmp11;
HXDLIN( 478)						if ((t3 >= 0)) {
HXLINE( 478)							_hx_tmp11 = (t3 <= this->maxdist);
            						}
            						else {
HXLINE( 478)							_hx_tmp11 = false;
            						}
HXDLIN( 478)						if (_hx_tmp11) {
HXLINE( 479)							Float x1 = (this->originx + (t3 * this->dirx));
HXLINE( 480)							bool _hx_tmp12;
HXDLIN( 480)							if ((x1 >= a->minx)) {
HXLINE( 480)								_hx_tmp12 = (x1 <= a->maxx);
            							}
            							else {
HXLINE( 480)								_hx_tmp12 = false;
            							}
HXDLIN( 480)							if (_hx_tmp12) {
HXLINE( 481)								ret = t3;
HXLINE( 482)								goto _hx_goto_7;
            							}
            						}
            					}
            				}
HXLINE( 441)				if (!(false)) {
HXLINE( 441)					goto _hx_goto_7;
            				}
            			}
            			_hx_goto_7:;
HXLINE( 488)			return ret;
            		}
HXLINE( 438)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Ray_obj,aabbsect,return )

 ::nape::geom::RayResult ZPP_Ray_obj::circlesect( ::zpp_nape::shape::ZPP_Circle c,bool inner,Float mint){
            	HX_GC_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_491_circlesect)
HXLINE( 492)		if (c->zip_worldCOM) {
HXLINE( 492)			if (hx::IsNotNull( c->body )) {
HXLINE( 492)				c->zip_worldCOM = false;
HXDLIN( 492)				if (c->zip_localCOM) {
HXLINE( 492)					c->zip_localCOM = false;
HXDLIN( 492)					if ((c->type == 1)) {
HXLINE( 492)						 ::zpp_nape::shape::ZPP_Polygon _this = c->polygon;
HXDLIN( 492)						if (hx::IsNull( _this->lverts->next )) {
HXLINE( 492)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            						}
HXDLIN( 492)						if (hx::IsNull( _this->lverts->next->next )) {
HXLINE( 492)							_this->localCOMx = _this->lverts->next->x;
HXDLIN( 492)							_this->localCOMy = _this->lverts->next->y;
            						}
            						else {
HXLINE( 492)							if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE( 492)								{
HXLINE( 492)									_this->localCOMx = _this->lverts->next->x;
HXDLIN( 492)									_this->localCOMy = _this->lverts->next->y;
            								}
HXDLIN( 492)								{
HXLINE( 492)									Float t = ((Float)1.0);
HXDLIN( 492)									 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN( 492)									_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN( 492)									 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN( 492)									_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            								}
HXDLIN( 492)								{
HXLINE( 492)									Float t1 = ((Float)0.5);
HXDLIN( 492)									 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN( 492)									_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN( 492)									 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN( 492)									_this4->localCOMy = (_this4->localCOMy * t1);
            								}
            							}
            							else {
HXLINE( 492)								{
HXLINE( 492)									_this->localCOMx = ( (Float)(0) );
HXDLIN( 492)									_this->localCOMy = ( (Float)(0) );
            								}
HXDLIN( 492)								Float area = ((Float)0.0);
HXDLIN( 492)								{
HXLINE( 492)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN( 492)									 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 492)									cx_ite = cx_ite->next;
HXDLIN( 492)									 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 492)									cx_ite = cx_ite->next;
HXDLIN( 492)									while(hx::IsNotNull( cx_ite )){
HXLINE( 492)										 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 492)										{
HXLINE( 492)											area = (area + (v->x * (w->y - u->y)));
HXDLIN( 492)											Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 492)											 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN( 492)											_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 492)											 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN( 492)											_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            										}
HXDLIN( 492)										u = v;
HXDLIN( 492)										v = w;
HXDLIN( 492)										cx_ite = cx_ite->next;
            									}
HXDLIN( 492)									cx_ite = _this->lverts->next;
HXDLIN( 492)									 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 492)									{
HXLINE( 492)										area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 492)										Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 492)										 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN( 492)										_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 492)										 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN( 492)										_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            									}
HXDLIN( 492)									u = v;
HXDLIN( 492)									v = w1;
HXDLIN( 492)									cx_ite = cx_ite->next;
HXDLIN( 492)									 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 492)									{
HXLINE( 492)										area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 492)										Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 492)										 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN( 492)										_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 492)										 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN( 492)										_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            									}
            								}
HXDLIN( 492)								area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 492)								{
HXLINE( 492)									Float t2 = area;
HXDLIN( 492)									 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN( 492)									_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN( 492)									 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN( 492)									_this12->localCOMy = (_this12->localCOMy * t2);
            								}
            							}
            						}
            					}
HXDLIN( 492)					if (hx::IsNotNull( c->wrap_localCOM )) {
HXLINE( 492)						c->wrap_localCOM->zpp_inner->x = c->localCOMx;
HXDLIN( 492)						c->wrap_localCOM->zpp_inner->y = c->localCOMy;
            					}
            				}
HXDLIN( 492)				{
HXLINE( 492)					 ::zpp_nape::phys::ZPP_Body _this13 = c->body;
HXDLIN( 492)					if (_this13->zip_axis) {
HXLINE( 492)						_this13->zip_axis = false;
HXDLIN( 492)						{
HXLINE( 492)							_this13->axisx = ::Math_obj::sin(_this13->rot);
HXDLIN( 492)							_this13->axisy = ::Math_obj::cos(_this13->rot);
            						}
            					}
            				}
HXDLIN( 492)				{
HXLINE( 492)					c->worldCOMx = (c->body->posx + ((c->body->axisy * c->localCOMx) - (c->body->axisx * c->localCOMy)));
HXDLIN( 492)					c->worldCOMy = (c->body->posy + ((c->localCOMx * c->body->axisx) + (c->localCOMy * c->body->axisy)));
            				}
            			}
            		}
HXLINE( 493)		Float acx = ((Float)0.0);
HXLINE( 494)		Float acy = ((Float)0.0);
HXLINE( 495)		{
HXLINE( 496)			acx = (this->originx - c->worldCOMx);
HXLINE( 497)			acy = (this->originy - c->worldCOMy);
            		}
HXLINE( 499)		Float A = ((this->dirx * this->dirx) + (this->diry * this->diry));
HXLINE( 500)		Float B = (( (Float)(2) ) * ((acx * this->dirx) + (acy * this->diry)));
HXLINE( 501)		Float C = (((acx * acx) + (acy * acy)) - (c->radius * c->radius));
HXLINE( 502)		Float det = ((B * B) - ((( (Float)(4) ) * A) * C));
HXLINE( 503)		if ((det == 0)) {
HXLINE( 504)			Float t3 = ((-(B) / ( (Float)(2) )) * A);
HXLINE( 505)			bool _hx_tmp;
HXDLIN( 505)			bool _hx_tmp1;
HXDLIN( 505)			bool _hx_tmp2;
HXDLIN( 505)			bool _hx_tmp3;
HXDLIN( 505)			if (!(!(inner))) {
HXLINE( 505)				_hx_tmp3 = (C > 0);
            			}
            			else {
HXLINE( 505)				_hx_tmp3 = true;
            			}
HXDLIN( 505)			if (_hx_tmp3) {
HXLINE( 505)				_hx_tmp2 = (t3 > 0);
            			}
            			else {
HXLINE( 505)				_hx_tmp2 = false;
            			}
HXDLIN( 505)			if (_hx_tmp2) {
HXLINE( 505)				_hx_tmp1 = (t3 < mint);
            			}
            			else {
HXLINE( 505)				_hx_tmp1 = false;
            			}
HXDLIN( 505)			if (_hx_tmp1) {
HXLINE( 505)				_hx_tmp = (t3 <= this->maxdist);
            			}
            			else {
HXLINE( 505)				_hx_tmp = false;
            			}
HXDLIN( 505)			if (_hx_tmp) {
HXLINE( 506)				Float nx = ((Float)0.0);
HXLINE( 507)				Float ny = ((Float)0.0);
HXLINE( 508)				{
HXLINE( 509)					nx = this->originx;
HXLINE( 510)					ny = this->originy;
            				}
HXLINE( 528)				{
HXLINE( 529)					Float t4 = t3;
HXLINE( 538)					nx = (nx + (this->dirx * t4));
HXLINE( 539)					ny = (ny + (this->diry * t4));
            				}
HXLINE( 541)				{
HXLINE( 542)					Float t5 = ((Float)1.0);
HXLINE( 551)					nx = (nx - (c->worldCOMx * t5));
HXLINE( 552)					ny = (ny - (c->worldCOMy * t5));
            				}
HXLINE( 554)				{
HXLINE( 555)					Float d = ((nx * nx) + (ny * ny));
HXLINE( 564)					Float imag = (((Float)1.0) / ::Math_obj::sqrt(d));
HXLINE( 565)					{
HXLINE( 566)						Float t6 = imag;
HXLINE( 575)						nx = (nx * t6);
HXLINE( 576)						ny = (ny * t6);
            					}
            				}
HXLINE( 579)				if ((C <= 0)) {
HXLINE( 580)					nx = -(nx);
HXLINE( 581)					ny = -(ny);
            				}
HXLINE( 583)				bool _hx_tmp4;
HXDLIN( 583)				if ((nx == nx)) {
HXLINE( 583)					_hx_tmp4 = (ny != ny);
            				}
            				else {
HXLINE( 583)					_hx_tmp4 = true;
            				}
HXDLIN( 583)				if (_hx_tmp4) {
HXLINE( 583)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 583)				 ::nape::geom::Vec2 ret;
HXDLIN( 583)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 583)					ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 583)					ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 583)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 583)					ret->zpp_pool = null();
HXDLIN( 583)					ret->zpp_disp = false;
HXDLIN( 583)					if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 583)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            					}
            				}
HXDLIN( 583)				if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 583)					 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 583)					{
HXLINE( 583)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 583)							ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 583)							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 583)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 583)							ret1->next = null();
            						}
HXDLIN( 583)						ret1->weak = false;
            					}
HXDLIN( 583)					ret1->_immutable = false;
HXDLIN( 583)					{
HXLINE( 583)						ret1->x = nx;
HXDLIN( 583)						ret1->y = ny;
            					}
HXDLIN( 583)					ret->zpp_inner = ret1;
HXDLIN( 583)					ret->zpp_inner->outer = ret;
            				}
            				else {
HXLINE( 583)					bool _hx_tmp5;
HXDLIN( 583)					if (hx::IsNotNull( ret )) {
HXLINE( 583)						_hx_tmp5 = ret->zpp_disp;
            					}
            					else {
HXLINE( 583)						_hx_tmp5 = false;
            					}
HXDLIN( 583)					if (_hx_tmp5) {
HXLINE( 583)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 583)					{
HXLINE( 583)						 ::zpp_nape::geom::ZPP_Vec2 _this14 = ret->zpp_inner;
HXDLIN( 583)						if (_this14->_immutable) {
HXLINE( 583)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 583)						if (hx::IsNotNull( _this14->_isimmutable )) {
HXLINE( 583)							_this14->_isimmutable();
            						}
            					}
HXDLIN( 583)					bool _hx_tmp6;
HXDLIN( 583)					if ((nx == nx)) {
HXLINE( 583)						_hx_tmp6 = (ny != ny);
            					}
            					else {
HXLINE( 583)						_hx_tmp6 = true;
            					}
HXDLIN( 583)					if (_hx_tmp6) {
HXLINE( 583)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 583)					bool _hx_tmp7;
HXDLIN( 583)					bool _hx_tmp8;
HXDLIN( 583)					if (hx::IsNotNull( ret )) {
HXLINE( 583)						_hx_tmp8 = ret->zpp_disp;
            					}
            					else {
HXLINE( 583)						_hx_tmp8 = false;
            					}
HXDLIN( 583)					if (_hx_tmp8) {
HXLINE( 583)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 583)					{
HXLINE( 583)						 ::zpp_nape::geom::ZPP_Vec2 _this15 = ret->zpp_inner;
HXDLIN( 583)						if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 583)							_this15->_validate();
            						}
            					}
HXDLIN( 583)					if ((ret->zpp_inner->x == nx)) {
HXLINE( 583)						bool _hx_tmp9;
HXDLIN( 583)						if (hx::IsNotNull( ret )) {
HXLINE( 583)							_hx_tmp9 = ret->zpp_disp;
            						}
            						else {
HXLINE( 583)							_hx_tmp9 = false;
            						}
HXDLIN( 583)						if (_hx_tmp9) {
HXLINE( 583)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 583)						{
HXLINE( 583)							 ::zpp_nape::geom::ZPP_Vec2 _this16 = ret->zpp_inner;
HXDLIN( 583)							if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 583)								_this16->_validate();
            							}
            						}
HXDLIN( 583)						_hx_tmp7 = (ret->zpp_inner->y == ny);
            					}
            					else {
HXLINE( 583)						_hx_tmp7 = false;
            					}
HXDLIN( 583)					if (!(_hx_tmp7)) {
HXLINE( 583)						{
HXLINE( 583)							ret->zpp_inner->x = nx;
HXDLIN( 583)							ret->zpp_inner->y = ny;
            						}
HXDLIN( 583)						{
HXLINE( 583)							 ::zpp_nape::geom::ZPP_Vec2 _this17 = ret->zpp_inner;
HXDLIN( 583)							if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 583)								_this17->_invalidate(_this17);
            							}
            						}
            					}
            				}
HXDLIN( 583)				ret->zpp_inner->weak = false;
HXDLIN( 583)				return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret,t3,(C <= 0),c->outer);
            			}
            			else {
HXLINE( 585)				return null();
            			}
            		}
            		else {
HXLINE( 588)			det = ::Math_obj::sqrt(det);
HXLINE( 589)			A = (( (Float)(1) ) / (( (Float)(2) ) * A));
HXLINE( 590)			Float t0 = ((-(B) - det) * A);
HXLINE( 591)			Float t11 = ((-(B) + det) * A);
HXLINE( 592)			if ((t0 > 0)) {
HXLINE( 593)				bool _hx_tmp10;
HXDLIN( 593)				if ((t0 < mint)) {
HXLINE( 593)					_hx_tmp10 = (t0 <= this->maxdist);
            				}
            				else {
HXLINE( 593)					_hx_tmp10 = false;
            				}
HXDLIN( 593)				if (_hx_tmp10) {
HXLINE( 594)					Float nx1 = ((Float)0.0);
HXLINE( 595)					Float ny1 = ((Float)0.0);
HXLINE( 596)					{
HXLINE( 597)						nx1 = this->originx;
HXLINE( 598)						ny1 = this->originy;
            					}
HXLINE( 616)					{
HXLINE( 617)						Float t7 = t0;
HXLINE( 626)						nx1 = (nx1 + (this->dirx * t7));
HXLINE( 627)						ny1 = (ny1 + (this->diry * t7));
            					}
HXLINE( 629)					{
HXLINE( 630)						Float t8 = ((Float)1.0);
HXLINE( 639)						nx1 = (nx1 - (c->worldCOMx * t8));
HXLINE( 640)						ny1 = (ny1 - (c->worldCOMy * t8));
            					}
HXLINE( 642)					{
HXLINE( 643)						Float d1 = ((nx1 * nx1) + (ny1 * ny1));
HXLINE( 652)						Float imag1 = (((Float)1.0) / ::Math_obj::sqrt(d1));
HXLINE( 653)						{
HXLINE( 654)							Float t9 = imag1;
HXLINE( 663)							nx1 = (nx1 * t9);
HXLINE( 664)							ny1 = (ny1 * t9);
            						}
            					}
HXLINE( 671)					bool _hx_tmp11;
HXDLIN( 671)					if ((nx1 == nx1)) {
HXLINE( 671)						_hx_tmp11 = (ny1 != ny1);
            					}
            					else {
HXLINE( 671)						_hx_tmp11 = true;
            					}
HXDLIN( 671)					if (_hx_tmp11) {
HXLINE( 671)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 671)					 ::nape::geom::Vec2 ret2;
HXDLIN( 671)					if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 671)						ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            					}
            					else {
HXLINE( 671)						ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 671)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 671)						ret2->zpp_pool = null();
HXDLIN( 671)						ret2->zpp_disp = false;
HXDLIN( 671)						if (hx::IsEq( ret2,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 671)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            						}
            					}
HXDLIN( 671)					if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 671)						 ::zpp_nape::geom::ZPP_Vec2 ret3;
HXDLIN( 671)						{
HXLINE( 671)							if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 671)								ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 671)								ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 671)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 671)								ret3->next = null();
            							}
HXDLIN( 671)							ret3->weak = false;
            						}
HXDLIN( 671)						ret3->_immutable = false;
HXDLIN( 671)						{
HXLINE( 671)							ret3->x = nx1;
HXDLIN( 671)							ret3->y = ny1;
            						}
HXDLIN( 671)						ret2->zpp_inner = ret3;
HXDLIN( 671)						ret2->zpp_inner->outer = ret2;
            					}
            					else {
HXLINE( 671)						bool _hx_tmp12;
HXDLIN( 671)						if (hx::IsNotNull( ret2 )) {
HXLINE( 671)							_hx_tmp12 = ret2->zpp_disp;
            						}
            						else {
HXLINE( 671)							_hx_tmp12 = false;
            						}
HXDLIN( 671)						if (_hx_tmp12) {
HXLINE( 671)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 671)						{
HXLINE( 671)							 ::zpp_nape::geom::ZPP_Vec2 _this18 = ret2->zpp_inner;
HXDLIN( 671)							if (_this18->_immutable) {
HXLINE( 671)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 671)							if (hx::IsNotNull( _this18->_isimmutable )) {
HXLINE( 671)								_this18->_isimmutable();
            							}
            						}
HXDLIN( 671)						bool _hx_tmp13;
HXDLIN( 671)						if ((nx1 == nx1)) {
HXLINE( 671)							_hx_tmp13 = (ny1 != ny1);
            						}
            						else {
HXLINE( 671)							_hx_tmp13 = true;
            						}
HXDLIN( 671)						if (_hx_tmp13) {
HXLINE( 671)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN( 671)						bool _hx_tmp14;
HXDLIN( 671)						bool _hx_tmp15;
HXDLIN( 671)						if (hx::IsNotNull( ret2 )) {
HXLINE( 671)							_hx_tmp15 = ret2->zpp_disp;
            						}
            						else {
HXLINE( 671)							_hx_tmp15 = false;
            						}
HXDLIN( 671)						if (_hx_tmp15) {
HXLINE( 671)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 671)						{
HXLINE( 671)							 ::zpp_nape::geom::ZPP_Vec2 _this19 = ret2->zpp_inner;
HXDLIN( 671)							if (hx::IsNotNull( _this19->_validate )) {
HXLINE( 671)								_this19->_validate();
            							}
            						}
HXDLIN( 671)						if ((ret2->zpp_inner->x == nx1)) {
HXLINE( 671)							bool _hx_tmp16;
HXDLIN( 671)							if (hx::IsNotNull( ret2 )) {
HXLINE( 671)								_hx_tmp16 = ret2->zpp_disp;
            							}
            							else {
HXLINE( 671)								_hx_tmp16 = false;
            							}
HXDLIN( 671)							if (_hx_tmp16) {
HXLINE( 671)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 671)							{
HXLINE( 671)								 ::zpp_nape::geom::ZPP_Vec2 _this20 = ret2->zpp_inner;
HXDLIN( 671)								if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 671)									_this20->_validate();
            								}
            							}
HXDLIN( 671)							_hx_tmp14 = (ret2->zpp_inner->y == ny1);
            						}
            						else {
HXLINE( 671)							_hx_tmp14 = false;
            						}
HXDLIN( 671)						if (!(_hx_tmp14)) {
HXLINE( 671)							{
HXLINE( 671)								ret2->zpp_inner->x = nx1;
HXDLIN( 671)								ret2->zpp_inner->y = ny1;
            							}
HXDLIN( 671)							{
HXLINE( 671)								 ::zpp_nape::geom::ZPP_Vec2 _this21 = ret2->zpp_inner;
HXDLIN( 671)								if (hx::IsNotNull( _this21->_invalidate )) {
HXLINE( 671)									_this21->_invalidate(_this21);
            								}
            							}
            						}
            					}
HXDLIN( 671)					ret2->zpp_inner->weak = false;
HXDLIN( 671)					return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret2,t0,false,c->outer);
            				}
            				else {
HXLINE( 673)					return null();
            				}
            			}
            			else {
HXLINE( 675)				bool _hx_tmp17;
HXDLIN( 675)				if ((t11 > 0)) {
HXLINE( 675)					_hx_tmp17 = inner;
            				}
            				else {
HXLINE( 675)					_hx_tmp17 = false;
            				}
HXDLIN( 675)				if (_hx_tmp17) {
HXLINE( 676)					bool _hx_tmp18;
HXDLIN( 676)					if ((t11 < mint)) {
HXLINE( 676)						_hx_tmp18 = (t11 <= this->maxdist);
            					}
            					else {
HXLINE( 676)						_hx_tmp18 = false;
            					}
HXDLIN( 676)					if (_hx_tmp18) {
HXLINE( 677)						Float nx2 = ((Float)0.0);
HXLINE( 678)						Float ny2 = ((Float)0.0);
HXLINE( 679)						{
HXLINE( 680)							nx2 = this->originx;
HXLINE( 681)							ny2 = this->originy;
            						}
HXLINE( 699)						{
HXLINE( 700)							Float t10 = t11;
HXLINE( 709)							nx2 = (nx2 + (this->dirx * t10));
HXLINE( 710)							ny2 = (ny2 + (this->diry * t10));
            						}
HXLINE( 712)						{
HXLINE( 713)							Float t12 = ((Float)1.0);
HXLINE( 722)							nx2 = (nx2 - (c->worldCOMx * t12));
HXLINE( 723)							ny2 = (ny2 - (c->worldCOMy * t12));
            						}
HXLINE( 725)						{
HXLINE( 726)							Float d2 = ((nx2 * nx2) + (ny2 * ny2));
HXLINE( 735)							Float imag2 = (((Float)1.0) / ::Math_obj::sqrt(d2));
HXLINE( 736)							{
HXLINE( 737)								Float t13 = imag2;
HXLINE( 746)								nx2 = (nx2 * t13);
HXLINE( 747)								ny2 = (ny2 * t13);
            							}
            						}
HXLINE( 750)						{
HXLINE( 751)							nx2 = -(nx2);
HXLINE( 752)							ny2 = -(ny2);
            						}
HXLINE( 754)						bool _hx_tmp19;
HXDLIN( 754)						if ((nx2 == nx2)) {
HXLINE( 754)							_hx_tmp19 = (ny2 != ny2);
            						}
            						else {
HXLINE( 754)							_hx_tmp19 = true;
            						}
HXDLIN( 754)						if (_hx_tmp19) {
HXLINE( 754)							HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            						}
HXDLIN( 754)						 ::nape::geom::Vec2 ret4;
HXDLIN( 754)						if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 754)							ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            						}
            						else {
HXLINE( 754)							ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 754)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 754)							ret4->zpp_pool = null();
HXDLIN( 754)							ret4->zpp_disp = false;
HXDLIN( 754)							if (hx::IsEq( ret4,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 754)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            							}
            						}
HXDLIN( 754)						if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 754)							 ::zpp_nape::geom::ZPP_Vec2 ret5;
HXDLIN( 754)							{
HXLINE( 754)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 754)									ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 754)									ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 754)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 754)									ret5->next = null();
            								}
HXDLIN( 754)								ret5->weak = false;
            							}
HXDLIN( 754)							ret5->_immutable = false;
HXDLIN( 754)							{
HXLINE( 754)								ret5->x = nx2;
HXDLIN( 754)								ret5->y = ny2;
            							}
HXDLIN( 754)							ret4->zpp_inner = ret5;
HXDLIN( 754)							ret4->zpp_inner->outer = ret4;
            						}
            						else {
HXLINE( 754)							bool _hx_tmp20;
HXDLIN( 754)							if (hx::IsNotNull( ret4 )) {
HXLINE( 754)								_hx_tmp20 = ret4->zpp_disp;
            							}
            							else {
HXLINE( 754)								_hx_tmp20 = false;
            							}
HXDLIN( 754)							if (_hx_tmp20) {
HXLINE( 754)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 754)							{
HXLINE( 754)								 ::zpp_nape::geom::ZPP_Vec2 _this22 = ret4->zpp_inner;
HXDLIN( 754)								if (_this22->_immutable) {
HXLINE( 754)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 754)								if (hx::IsNotNull( _this22->_isimmutable )) {
HXLINE( 754)									_this22->_isimmutable();
            								}
            							}
HXDLIN( 754)							bool _hx_tmp21;
HXDLIN( 754)							if ((nx2 == nx2)) {
HXLINE( 754)								_hx_tmp21 = (ny2 != ny2);
            							}
            							else {
HXLINE( 754)								_hx_tmp21 = true;
            							}
HXDLIN( 754)							if (_hx_tmp21) {
HXLINE( 754)								HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            							}
HXDLIN( 754)							bool _hx_tmp22;
HXDLIN( 754)							bool _hx_tmp23;
HXDLIN( 754)							if (hx::IsNotNull( ret4 )) {
HXLINE( 754)								_hx_tmp23 = ret4->zpp_disp;
            							}
            							else {
HXLINE( 754)								_hx_tmp23 = false;
            							}
HXDLIN( 754)							if (_hx_tmp23) {
HXLINE( 754)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 754)							{
HXLINE( 754)								 ::zpp_nape::geom::ZPP_Vec2 _this23 = ret4->zpp_inner;
HXDLIN( 754)								if (hx::IsNotNull( _this23->_validate )) {
HXLINE( 754)									_this23->_validate();
            								}
            							}
HXDLIN( 754)							if ((ret4->zpp_inner->x == nx2)) {
HXLINE( 754)								bool _hx_tmp24;
HXDLIN( 754)								if (hx::IsNotNull( ret4 )) {
HXLINE( 754)									_hx_tmp24 = ret4->zpp_disp;
            								}
            								else {
HXLINE( 754)									_hx_tmp24 = false;
            								}
HXDLIN( 754)								if (_hx_tmp24) {
HXLINE( 754)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 754)								{
HXLINE( 754)									 ::zpp_nape::geom::ZPP_Vec2 _this24 = ret4->zpp_inner;
HXDLIN( 754)									if (hx::IsNotNull( _this24->_validate )) {
HXLINE( 754)										_this24->_validate();
            									}
            								}
HXDLIN( 754)								_hx_tmp22 = (ret4->zpp_inner->y == ny2);
            							}
            							else {
HXLINE( 754)								_hx_tmp22 = false;
            							}
HXDLIN( 754)							if (!(_hx_tmp22)) {
HXLINE( 754)								{
HXLINE( 754)									ret4->zpp_inner->x = nx2;
HXDLIN( 754)									ret4->zpp_inner->y = ny2;
            								}
HXDLIN( 754)								{
HXLINE( 754)									 ::zpp_nape::geom::ZPP_Vec2 _this25 = ret4->zpp_inner;
HXDLIN( 754)									if (hx::IsNotNull( _this25->_invalidate )) {
HXLINE( 754)										_this25->_invalidate(_this25);
            									}
            								}
            							}
            						}
HXDLIN( 754)						ret4->zpp_inner->weak = false;
HXDLIN( 754)						return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret4,t11,true,c->outer);
            					}
            					else {
HXLINE( 756)						return null();
            					}
            				}
            				else {
HXLINE( 758)					return null();
            				}
            			}
            		}
HXLINE( 503)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Ray_obj,circlesect,return )

void ZPP_Ray_obj::circlesect2( ::zpp_nape::shape::ZPP_Circle c,bool inner, ::nape::geom::RayResultList list){
            	HX_GC_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_761_circlesect2)
HXLINE( 762)		if (c->zip_worldCOM) {
HXLINE( 762)			if (hx::IsNotNull( c->body )) {
HXLINE( 762)				c->zip_worldCOM = false;
HXDLIN( 762)				if (c->zip_localCOM) {
HXLINE( 762)					c->zip_localCOM = false;
HXDLIN( 762)					if ((c->type == 1)) {
HXLINE( 762)						 ::zpp_nape::shape::ZPP_Polygon _this = c->polygon;
HXDLIN( 762)						if (hx::IsNull( _this->lverts->next )) {
HXLINE( 762)							HX_STACK_DO_THROW(HX_("Error: An empty polygon has no meaningful localCOM",3b,8d,96,f3));
            						}
HXDLIN( 762)						if (hx::IsNull( _this->lverts->next->next )) {
HXLINE( 762)							_this->localCOMx = _this->lverts->next->x;
HXDLIN( 762)							_this->localCOMy = _this->lverts->next->y;
            						}
            						else {
HXLINE( 762)							if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE( 762)								{
HXLINE( 762)									_this->localCOMx = _this->lverts->next->x;
HXDLIN( 762)									_this->localCOMy = _this->lverts->next->y;
            								}
HXDLIN( 762)								{
HXLINE( 762)									Float t = ((Float)1.0);
HXDLIN( 762)									 ::zpp_nape::shape::ZPP_Polygon _this1 = _this;
HXDLIN( 762)									_this1->localCOMx = (_this1->localCOMx + (_this->lverts->next->next->x * t));
HXDLIN( 762)									 ::zpp_nape::shape::ZPP_Polygon _this2 = _this;
HXDLIN( 762)									_this2->localCOMy = (_this2->localCOMy + (_this->lverts->next->next->y * t));
            								}
HXDLIN( 762)								{
HXLINE( 762)									Float t1 = ((Float)0.5);
HXDLIN( 762)									 ::zpp_nape::shape::ZPP_Polygon _this3 = _this;
HXDLIN( 762)									_this3->localCOMx = (_this3->localCOMx * t1);
HXDLIN( 762)									 ::zpp_nape::shape::ZPP_Polygon _this4 = _this;
HXDLIN( 762)									_this4->localCOMy = (_this4->localCOMy * t1);
            								}
            							}
            							else {
HXLINE( 762)								{
HXLINE( 762)									_this->localCOMx = ( (Float)(0) );
HXDLIN( 762)									_this->localCOMy = ( (Float)(0) );
            								}
HXDLIN( 762)								Float area = ((Float)0.0);
HXDLIN( 762)								{
HXLINE( 762)									 ::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->lverts->next;
HXDLIN( 762)									 ::zpp_nape::geom::ZPP_Vec2 u = cx_ite;
HXDLIN( 762)									cx_ite = cx_ite->next;
HXDLIN( 762)									 ::zpp_nape::geom::ZPP_Vec2 v = cx_ite;
HXDLIN( 762)									cx_ite = cx_ite->next;
HXDLIN( 762)									while(hx::IsNotNull( cx_ite )){
HXLINE( 762)										 ::zpp_nape::geom::ZPP_Vec2 w = cx_ite;
HXDLIN( 762)										{
HXLINE( 762)											area = (area + (v->x * (w->y - u->y)));
HXDLIN( 762)											Float cf = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 762)											 ::zpp_nape::shape::ZPP_Polygon _this5 = _this;
HXDLIN( 762)											_this5->localCOMx = (_this5->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 762)											 ::zpp_nape::shape::ZPP_Polygon _this6 = _this;
HXDLIN( 762)											_this6->localCOMy = (_this6->localCOMy + ((v->y + w->y) * cf));
            										}
HXDLIN( 762)										u = v;
HXDLIN( 762)										v = w;
HXDLIN( 762)										cx_ite = cx_ite->next;
            									}
HXDLIN( 762)									cx_ite = _this->lverts->next;
HXDLIN( 762)									 ::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;
HXDLIN( 762)									{
HXLINE( 762)										area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 762)										Float cf1 = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 762)										 ::zpp_nape::shape::ZPP_Polygon _this7 = _this;
HXDLIN( 762)										_this7->localCOMx = (_this7->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 762)										 ::zpp_nape::shape::ZPP_Polygon _this8 = _this;
HXDLIN( 762)										_this8->localCOMy = (_this8->localCOMy + ((v->y + w1->y) * cf1));
            									}
HXDLIN( 762)									u = v;
HXDLIN( 762)									v = w1;
HXDLIN( 762)									cx_ite = cx_ite->next;
HXDLIN( 762)									 ::zpp_nape::geom::ZPP_Vec2 w2 = cx_ite;
HXDLIN( 762)									{
HXLINE( 762)										area = (area + (v->x * (w2->y - u->y)));
HXDLIN( 762)										Float cf2 = ((w2->y * v->x) - (w2->x * v->y));
HXDLIN( 762)										 ::zpp_nape::shape::ZPP_Polygon _this9 = _this;
HXDLIN( 762)										_this9->localCOMx = (_this9->localCOMx + ((v->x + w2->x) * cf2));
HXDLIN( 762)										 ::zpp_nape::shape::ZPP_Polygon _this10 = _this;
HXDLIN( 762)										_this10->localCOMy = (_this10->localCOMy + ((v->y + w2->y) * cf2));
            									}
            								}
HXDLIN( 762)								area = (( (Float)(1) ) / (( (Float)(3) ) * area));
HXDLIN( 762)								{
HXLINE( 762)									Float t2 = area;
HXDLIN( 762)									 ::zpp_nape::shape::ZPP_Polygon _this11 = _this;
HXDLIN( 762)									_this11->localCOMx = (_this11->localCOMx * t2);
HXDLIN( 762)									 ::zpp_nape::shape::ZPP_Polygon _this12 = _this;
HXDLIN( 762)									_this12->localCOMy = (_this12->localCOMy * t2);
            								}
            							}
            						}
            					}
HXDLIN( 762)					if (hx::IsNotNull( c->wrap_localCOM )) {
HXLINE( 762)						c->wrap_localCOM->zpp_inner->x = c->localCOMx;
HXDLIN( 762)						c->wrap_localCOM->zpp_inner->y = c->localCOMy;
            					}
            				}
HXDLIN( 762)				{
HXLINE( 762)					 ::zpp_nape::phys::ZPP_Body _this13 = c->body;
HXDLIN( 762)					if (_this13->zip_axis) {
HXLINE( 762)						_this13->zip_axis = false;
HXDLIN( 762)						{
HXLINE( 762)							_this13->axisx = ::Math_obj::sin(_this13->rot);
HXDLIN( 762)							_this13->axisy = ::Math_obj::cos(_this13->rot);
            						}
            					}
            				}
HXDLIN( 762)				{
HXLINE( 762)					c->worldCOMx = (c->body->posx + ((c->body->axisy * c->localCOMx) - (c->body->axisx * c->localCOMy)));
HXDLIN( 762)					c->worldCOMy = (c->body->posy + ((c->localCOMx * c->body->axisx) + (c->localCOMy * c->body->axisy)));
            				}
            			}
            		}
HXLINE( 763)		Float acx = ((Float)0.0);
HXLINE( 764)		Float acy = ((Float)0.0);
HXLINE( 765)		{
HXLINE( 766)			acx = (this->originx - c->worldCOMx);
HXLINE( 767)			acy = (this->originy - c->worldCOMy);
            		}
HXLINE( 769)		Float A = ((this->dirx * this->dirx) + (this->diry * this->diry));
HXLINE( 770)		Float B = (( (Float)(2) ) * ((acx * this->dirx) + (acy * this->diry)));
HXLINE( 771)		Float C = (((acx * acx) + (acy * acy)) - (c->radius * c->radius));
HXLINE( 772)		Float det = ((B * B) - ((( (Float)(4) ) * A) * C));
HXLINE( 773)		if ((det == 0)) {
HXLINE( 774)			Float t3 = ((-(B) / ( (Float)(2) )) * A);
HXLINE( 775)			bool _hx_tmp;
HXDLIN( 775)			bool _hx_tmp1;
HXDLIN( 775)			bool _hx_tmp2;
HXDLIN( 775)			if (!(!(inner))) {
HXLINE( 775)				_hx_tmp2 = (C > 0);
            			}
            			else {
HXLINE( 775)				_hx_tmp2 = true;
            			}
HXDLIN( 775)			if (_hx_tmp2) {
HXLINE( 775)				_hx_tmp1 = (t3 > 0);
            			}
            			else {
HXLINE( 775)				_hx_tmp1 = false;
            			}
HXDLIN( 775)			if (_hx_tmp1) {
HXLINE( 775)				_hx_tmp = (t3 <= this->maxdist);
            			}
            			else {
HXLINE( 775)				_hx_tmp = false;
            			}
HXDLIN( 775)			if (_hx_tmp) {
HXLINE( 776)				Float nx = ((Float)0.0);
HXLINE( 777)				Float ny = ((Float)0.0);
HXLINE( 778)				{
HXLINE( 779)					nx = this->originx;
HXLINE( 780)					ny = this->originy;
            				}
HXLINE( 798)				{
HXLINE( 799)					Float t4 = t3;
HXLINE( 808)					nx = (nx + (this->dirx * t4));
HXLINE( 809)					ny = (ny + (this->diry * t4));
            				}
HXLINE( 811)				{
HXLINE( 812)					Float t5 = ((Float)1.0);
HXLINE( 821)					nx = (nx - (c->worldCOMx * t5));
HXLINE( 822)					ny = (ny - (c->worldCOMy * t5));
            				}
HXLINE( 824)				{
HXLINE( 825)					Float d = ((nx * nx) + (ny * ny));
HXLINE( 834)					Float imag = (((Float)1.0) / ::Math_obj::sqrt(d));
HXLINE( 835)					{
HXLINE( 836)						Float t6 = imag;
HXLINE( 845)						nx = (nx * t6);
HXLINE( 846)						ny = (ny * t6);
            					}
            				}
HXLINE( 849)				if ((C <= 0)) {
HXLINE( 850)					nx = -(nx);
HXLINE( 851)					ny = -(ny);
            				}
HXLINE( 853)				bool res;
HXDLIN( 853)				if ((nx == nx)) {
HXLINE( 853)					res = (ny != ny);
            				}
            				else {
HXLINE( 853)					res = true;
            				}
HXDLIN( 853)				if (res) {
HXLINE( 853)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 853)				 ::nape::geom::Vec2 ret;
HXDLIN( 853)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 853)					ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 853)					ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 853)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 853)					ret->zpp_pool = null();
HXDLIN( 853)					ret->zpp_disp = false;
HXDLIN( 853)					if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 853)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            					}
            				}
HXDLIN( 853)				if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 853)					 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN( 853)					{
HXLINE( 853)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 853)							ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 853)							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 853)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 853)							ret1->next = null();
            						}
HXDLIN( 853)						ret1->weak = false;
            					}
HXDLIN( 853)					ret1->_immutable = false;
HXDLIN( 853)					{
HXLINE( 853)						ret1->x = nx;
HXDLIN( 853)						ret1->y = ny;
            					}
HXDLIN( 853)					ret->zpp_inner = ret1;
HXDLIN( 853)					ret->zpp_inner->outer = ret;
            				}
            				else {
HXLINE( 853)					bool res1;
HXDLIN( 853)					if (hx::IsNotNull( ret )) {
HXLINE( 853)						res1 = ret->zpp_disp;
            					}
            					else {
HXLINE( 853)						res1 = false;
            					}
HXDLIN( 853)					if (res1) {
HXLINE( 853)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 853)					{
HXLINE( 853)						 ::zpp_nape::geom::ZPP_Vec2 _this14 = ret->zpp_inner;
HXDLIN( 853)						if (_this14->_immutable) {
HXLINE( 853)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 853)						if (hx::IsNotNull( _this14->_isimmutable )) {
HXLINE( 853)							_this14->_isimmutable();
            						}
            					}
HXDLIN( 853)					bool res2;
HXDLIN( 853)					if ((nx == nx)) {
HXLINE( 853)						res2 = (ny != ny);
            					}
            					else {
HXLINE( 853)						res2 = true;
            					}
HXDLIN( 853)					if (res2) {
HXLINE( 853)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 853)					bool res3;
HXDLIN( 853)					bool res4;
HXDLIN( 853)					if (hx::IsNotNull( ret )) {
HXLINE( 853)						res4 = ret->zpp_disp;
            					}
            					else {
HXLINE( 853)						res4 = false;
            					}
HXDLIN( 853)					if (res4) {
HXLINE( 853)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 853)					{
HXLINE( 853)						 ::zpp_nape::geom::ZPP_Vec2 _this15 = ret->zpp_inner;
HXDLIN( 853)						if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 853)							_this15->_validate();
            						}
            					}
HXDLIN( 853)					if ((ret->zpp_inner->x == nx)) {
HXLINE( 853)						bool res5;
HXDLIN( 853)						if (hx::IsNotNull( ret )) {
HXLINE( 853)							res5 = ret->zpp_disp;
            						}
            						else {
HXLINE( 853)							res5 = false;
            						}
HXDLIN( 853)						if (res5) {
HXLINE( 853)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 853)						{
HXLINE( 853)							 ::zpp_nape::geom::ZPP_Vec2 _this16 = ret->zpp_inner;
HXDLIN( 853)							if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 853)								_this16->_validate();
            							}
            						}
HXDLIN( 853)						res3 = (ret->zpp_inner->y == ny);
            					}
            					else {
HXLINE( 853)						res3 = false;
            					}
HXDLIN( 853)					if (!(res3)) {
HXLINE( 853)						{
HXLINE( 853)							ret->zpp_inner->x = nx;
HXDLIN( 853)							ret->zpp_inner->y = ny;
            						}
HXDLIN( 853)						{
HXLINE( 853)							 ::zpp_nape::geom::ZPP_Vec2 _this17 = ret->zpp_inner;
HXDLIN( 853)							if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 853)								_this17->_invalidate(_this17);
            							}
            						}
            					}
            				}
HXDLIN( 853)				ret->zpp_inner->weak = false;
HXDLIN( 853)				 ::nape::geom::RayResult res6 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret,t3,(C <= 0),c->outer);
HXLINE( 854)				{
HXLINE( 855)					 ::zpp_nape::util::ZNPNode_RayResult pre = null();
HXLINE( 856)					{
HXLINE( 857)						 ::zpp_nape::util::ZNPNode_RayResult cx_ite1 = list->zpp_inner->inner->head;
HXLINE( 858)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 859)							 ::nape::geom::RayResult j = cx_ite1->elt;
HXLINE( 860)							{
HXLINE( 861)								if (hx::IsNotNull( res6->zpp_inner->next )) {
HXLINE( 861)									HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            								}
HXDLIN( 861)								if (hx::IsNotNull( j->zpp_inner->next )) {
HXLINE( 861)									HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            								}
HXDLIN( 861)								if ((res6->zpp_inner->toiDistance < j->zpp_inner->toiDistance)) {
HXLINE( 861)									goto _hx_goto_12;
            								}
HXLINE( 862)								pre = cx_ite1;
            							}
HXLINE( 864)							cx_ite1 = cx_ite1->next;
            						}
            						_hx_goto_12:;
            					}
HXLINE( 867)					{
HXLINE( 867)						 ::zpp_nape::util::ZNPList_RayResult _this18 = list->zpp_inner->inner;
HXDLIN( 867)						 ::zpp_nape::util::ZNPNode_RayResult ret2;
HXDLIN( 867)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE( 867)							ret2 =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 867)							ret2 = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN( 867)							::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret2->next;
HXDLIN( 867)							ret2->next = null();
            						}
HXDLIN( 867)						ret2->elt = res6;
HXDLIN( 867)						 ::zpp_nape::util::ZNPNode_RayResult temp = ret2;
HXDLIN( 867)						if (hx::IsNull( pre )) {
HXLINE( 867)							temp->next = _this18->head;
HXDLIN( 867)							_this18->head = temp;
            						}
            						else {
HXLINE( 867)							temp->next = pre->next;
HXDLIN( 867)							pre->next = temp;
            						}
HXDLIN( 867)						_this18->pushmod = (_this18->modified = true);
HXDLIN( 867)						_this18->length++;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 872)			det = ::Math_obj::sqrt(det);
HXLINE( 873)			A = (( (Float)(1) ) / (( (Float)(2) ) * A));
HXLINE( 874)			Float t0 = ((-(B) - det) * A);
HXLINE( 875)			Float t11 = ((-(B) + det) * A);
HXLINE( 876)			bool _hx_tmp3;
HXDLIN( 876)			if ((t0 > 0)) {
HXLINE( 876)				_hx_tmp3 = (t0 <= this->maxdist);
            			}
            			else {
HXLINE( 876)				_hx_tmp3 = false;
            			}
HXDLIN( 876)			if (_hx_tmp3) {
HXLINE( 877)				Float nx1 = ((Float)0.0);
HXLINE( 878)				Float ny1 = ((Float)0.0);
HXLINE( 879)				{
HXLINE( 880)					nx1 = this->originx;
HXLINE( 881)					ny1 = this->originy;
            				}
HXLINE( 899)				{
HXLINE( 900)					Float t7 = t0;
HXLINE( 909)					nx1 = (nx1 + (this->dirx * t7));
HXLINE( 910)					ny1 = (ny1 + (this->diry * t7));
            				}
HXLINE( 912)				{
HXLINE( 913)					Float t8 = ((Float)1.0);
HXLINE( 922)					nx1 = (nx1 - (c->worldCOMx * t8));
HXLINE( 923)					ny1 = (ny1 - (c->worldCOMy * t8));
            				}
HXLINE( 925)				{
HXLINE( 926)					Float d1 = ((nx1 * nx1) + (ny1 * ny1));
HXLINE( 935)					Float imag1 = (((Float)1.0) / ::Math_obj::sqrt(d1));
HXLINE( 936)					{
HXLINE( 937)						Float t9 = imag1;
HXLINE( 946)						nx1 = (nx1 * t9);
HXLINE( 947)						ny1 = (ny1 * t9);
            					}
            				}
HXLINE( 954)				bool res7;
HXDLIN( 954)				if ((nx1 == nx1)) {
HXLINE( 954)					res7 = (ny1 != ny1);
            				}
            				else {
HXLINE( 954)					res7 = true;
            				}
HXDLIN( 954)				if (res7) {
HXLINE( 954)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN( 954)				 ::nape::geom::Vec2 ret3;
HXDLIN( 954)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 954)					ret3 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 954)					ret3 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 954)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret3->zpp_pool;
HXDLIN( 954)					ret3->zpp_pool = null();
HXDLIN( 954)					ret3->zpp_disp = false;
HXDLIN( 954)					if (hx::IsEq( ret3,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 954)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            					}
            				}
HXDLIN( 954)				if (hx::IsNull( ret3->zpp_inner )) {
HXLINE( 954)					 ::zpp_nape::geom::ZPP_Vec2 ret4;
HXDLIN( 954)					{
HXLINE( 954)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 954)							ret4 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 954)							ret4 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 954)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret4->next;
HXDLIN( 954)							ret4->next = null();
            						}
HXDLIN( 954)						ret4->weak = false;
            					}
HXDLIN( 954)					ret4->_immutable = false;
HXDLIN( 954)					{
HXLINE( 954)						ret4->x = nx1;
HXDLIN( 954)						ret4->y = ny1;
            					}
HXDLIN( 954)					ret3->zpp_inner = ret4;
HXDLIN( 954)					ret3->zpp_inner->outer = ret3;
            				}
            				else {
HXLINE( 954)					bool res8;
HXDLIN( 954)					if (hx::IsNotNull( ret3 )) {
HXLINE( 954)						res8 = ret3->zpp_disp;
            					}
            					else {
HXLINE( 954)						res8 = false;
            					}
HXDLIN( 954)					if (res8) {
HXLINE( 954)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 954)					{
HXLINE( 954)						 ::zpp_nape::geom::ZPP_Vec2 _this19 = ret3->zpp_inner;
HXDLIN( 954)						if (_this19->_immutable) {
HXLINE( 954)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN( 954)						if (hx::IsNotNull( _this19->_isimmutable )) {
HXLINE( 954)							_this19->_isimmutable();
            						}
            					}
HXDLIN( 954)					bool res9;
HXDLIN( 954)					if ((nx1 == nx1)) {
HXLINE( 954)						res9 = (ny1 != ny1);
            					}
            					else {
HXLINE( 954)						res9 = true;
            					}
HXDLIN( 954)					if (res9) {
HXLINE( 954)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN( 954)					bool res10;
HXDLIN( 954)					bool res11;
HXDLIN( 954)					if (hx::IsNotNull( ret3 )) {
HXLINE( 954)						res11 = ret3->zpp_disp;
            					}
            					else {
HXLINE( 954)						res11 = false;
            					}
HXDLIN( 954)					if (res11) {
HXLINE( 954)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 954)					{
HXLINE( 954)						 ::zpp_nape::geom::ZPP_Vec2 _this20 = ret3->zpp_inner;
HXDLIN( 954)						if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 954)							_this20->_validate();
            						}
            					}
HXDLIN( 954)					if ((ret3->zpp_inner->x == nx1)) {
HXLINE( 954)						bool res12;
HXDLIN( 954)						if (hx::IsNotNull( ret3 )) {
HXLINE( 954)							res12 = ret3->zpp_disp;
            						}
            						else {
HXLINE( 954)							res12 = false;
            						}
HXDLIN( 954)						if (res12) {
HXLINE( 954)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 954)						{
HXLINE( 954)							 ::zpp_nape::geom::ZPP_Vec2 _this21 = ret3->zpp_inner;
HXDLIN( 954)							if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 954)								_this21->_validate();
            							}
            						}
HXDLIN( 954)						res10 = (ret3->zpp_inner->y == ny1);
            					}
            					else {
HXLINE( 954)						res10 = false;
            					}
HXDLIN( 954)					if (!(res10)) {
HXLINE( 954)						{
HXLINE( 954)							ret3->zpp_inner->x = nx1;
HXDLIN( 954)							ret3->zpp_inner->y = ny1;
            						}
HXDLIN( 954)						{
HXLINE( 954)							 ::zpp_nape::geom::ZPP_Vec2 _this22 = ret3->zpp_inner;
HXDLIN( 954)							if (hx::IsNotNull( _this22->_invalidate )) {
HXLINE( 954)								_this22->_invalidate(_this22);
            							}
            						}
            					}
            				}
HXDLIN( 954)				ret3->zpp_inner->weak = false;
HXDLIN( 954)				 ::nape::geom::RayResult res13 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret3,t0,false,c->outer);
HXLINE( 955)				{
HXLINE( 956)					 ::zpp_nape::util::ZNPNode_RayResult pre1 = null();
HXLINE( 957)					{
HXLINE( 958)						 ::zpp_nape::util::ZNPNode_RayResult cx_ite2 = list->zpp_inner->inner->head;
HXLINE( 959)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 960)							 ::nape::geom::RayResult j1 = cx_ite2->elt;
HXLINE( 961)							{
HXLINE( 962)								if (hx::IsNotNull( res13->zpp_inner->next )) {
HXLINE( 962)									HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            								}
HXDLIN( 962)								if (hx::IsNotNull( j1->zpp_inner->next )) {
HXLINE( 962)									HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            								}
HXDLIN( 962)								if ((res13->zpp_inner->toiDistance < j1->zpp_inner->toiDistance)) {
HXLINE( 962)									goto _hx_goto_13;
            								}
HXLINE( 963)								pre1 = cx_ite2;
            							}
HXLINE( 965)							cx_ite2 = cx_ite2->next;
            						}
            						_hx_goto_13:;
            					}
HXLINE( 968)					{
HXLINE( 968)						 ::zpp_nape::util::ZNPList_RayResult _this23 = list->zpp_inner->inner;
HXDLIN( 968)						 ::zpp_nape::util::ZNPNode_RayResult ret5;
HXDLIN( 968)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE( 968)							ret5 =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 968)							ret5 = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN( 968)							::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret5->next;
HXDLIN( 968)							ret5->next = null();
            						}
HXDLIN( 968)						ret5->elt = res13;
HXDLIN( 968)						 ::zpp_nape::util::ZNPNode_RayResult temp1 = ret5;
HXDLIN( 968)						if (hx::IsNull( pre1 )) {
HXLINE( 968)							temp1->next = _this23->head;
HXDLIN( 968)							_this23->head = temp1;
            						}
            						else {
HXLINE( 968)							temp1->next = pre1->next;
HXDLIN( 968)							pre1->next = temp1;
            						}
HXDLIN( 968)						_this23->pushmod = (_this23->modified = true);
HXDLIN( 968)						_this23->length++;
            					}
            				}
            			}
HXLINE( 971)			bool _hx_tmp4;
HXDLIN( 971)			bool _hx_tmp5;
HXDLIN( 971)			if ((t11 > 0)) {
HXLINE( 971)				_hx_tmp5 = (t11 <= this->maxdist);
            			}
            			else {
HXLINE( 971)				_hx_tmp5 = false;
            			}
HXDLIN( 971)			if (_hx_tmp5) {
HXLINE( 971)				_hx_tmp4 = inner;
            			}
            			else {
HXLINE( 971)				_hx_tmp4 = false;
            			}
HXDLIN( 971)			if (_hx_tmp4) {
HXLINE( 972)				Float nx2 = ((Float)0.0);
HXLINE( 973)				Float ny2 = ((Float)0.0);
HXLINE( 974)				{
HXLINE( 975)					nx2 = this->originx;
HXLINE( 976)					ny2 = this->originy;
            				}
HXLINE( 994)				{
HXLINE( 995)					Float t10 = t11;
HXLINE(1004)					nx2 = (nx2 + (this->dirx * t10));
HXLINE(1005)					ny2 = (ny2 + (this->diry * t10));
            				}
HXLINE(1007)				{
HXLINE(1008)					Float t12 = ((Float)1.0);
HXLINE(1017)					nx2 = (nx2 - (c->worldCOMx * t12));
HXLINE(1018)					ny2 = (ny2 - (c->worldCOMy * t12));
            				}
HXLINE(1020)				{
HXLINE(1021)					Float d2 = ((nx2 * nx2) + (ny2 * ny2));
HXLINE(1030)					Float imag2 = (((Float)1.0) / ::Math_obj::sqrt(d2));
HXLINE(1031)					{
HXLINE(1032)						Float t13 = imag2;
HXLINE(1041)						nx2 = (nx2 * t13);
HXLINE(1042)						ny2 = (ny2 * t13);
            					}
            				}
HXLINE(1045)				{
HXLINE(1046)					nx2 = -(nx2);
HXLINE(1047)					ny2 = -(ny2);
            				}
HXLINE(1049)				bool res14;
HXDLIN(1049)				if ((nx2 == nx2)) {
HXLINE(1049)					res14 = (ny2 != ny2);
            				}
            				else {
HXLINE(1049)					res14 = true;
            				}
HXDLIN(1049)				if (res14) {
HXLINE(1049)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(1049)				 ::nape::geom::Vec2 ret6;
HXDLIN(1049)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1049)					ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE(1049)					ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1049)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN(1049)					ret6->zpp_pool = null();
HXDLIN(1049)					ret6->zpp_disp = false;
HXDLIN(1049)					if (hx::IsEq( ret6,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1049)						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            					}
            				}
HXDLIN(1049)				if (hx::IsNull( ret6->zpp_inner )) {
HXLINE(1049)					 ::zpp_nape::geom::ZPP_Vec2 ret7;
HXDLIN(1049)					{
HXLINE(1049)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1049)							ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(1049)							ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1049)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN(1049)							ret7->next = null();
            						}
HXDLIN(1049)						ret7->weak = false;
            					}
HXDLIN(1049)					ret7->_immutable = false;
HXDLIN(1049)					{
HXLINE(1049)						ret7->x = nx2;
HXDLIN(1049)						ret7->y = ny2;
            					}
HXDLIN(1049)					ret6->zpp_inner = ret7;
HXDLIN(1049)					ret6->zpp_inner->outer = ret6;
            				}
            				else {
HXLINE(1049)					bool res15;
HXDLIN(1049)					if (hx::IsNotNull( ret6 )) {
HXLINE(1049)						res15 = ret6->zpp_disp;
            					}
            					else {
HXLINE(1049)						res15 = false;
            					}
HXDLIN(1049)					if (res15) {
HXLINE(1049)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(1049)					{
HXLINE(1049)						 ::zpp_nape::geom::ZPP_Vec2 _this24 = ret6->zpp_inner;
HXDLIN(1049)						if (_this24->_immutable) {
HXLINE(1049)							HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            						}
HXDLIN(1049)						if (hx::IsNotNull( _this24->_isimmutable )) {
HXLINE(1049)							_this24->_isimmutable();
            						}
            					}
HXDLIN(1049)					bool res16;
HXDLIN(1049)					if ((nx2 == nx2)) {
HXLINE(1049)						res16 = (ny2 != ny2);
            					}
            					else {
HXLINE(1049)						res16 = true;
            					}
HXDLIN(1049)					if (res16) {
HXLINE(1049)						HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            					}
HXDLIN(1049)					bool res17;
HXDLIN(1049)					bool res18;
HXDLIN(1049)					if (hx::IsNotNull( ret6 )) {
HXLINE(1049)						res18 = ret6->zpp_disp;
            					}
            					else {
HXLINE(1049)						res18 = false;
            					}
HXDLIN(1049)					if (res18) {
HXLINE(1049)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(1049)					{
HXLINE(1049)						 ::zpp_nape::geom::ZPP_Vec2 _this25 = ret6->zpp_inner;
HXDLIN(1049)						if (hx::IsNotNull( _this25->_validate )) {
HXLINE(1049)							_this25->_validate();
            						}
            					}
HXDLIN(1049)					if ((ret6->zpp_inner->x == nx2)) {
HXLINE(1049)						bool res19;
HXDLIN(1049)						if (hx::IsNotNull( ret6 )) {
HXLINE(1049)							res19 = ret6->zpp_disp;
            						}
            						else {
HXLINE(1049)							res19 = false;
            						}
HXDLIN(1049)						if (res19) {
HXLINE(1049)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN(1049)						{
HXLINE(1049)							 ::zpp_nape::geom::ZPP_Vec2 _this26 = ret6->zpp_inner;
HXDLIN(1049)							if (hx::IsNotNull( _this26->_validate )) {
HXLINE(1049)								_this26->_validate();
            							}
            						}
HXDLIN(1049)						res17 = (ret6->zpp_inner->y == ny2);
            					}
            					else {
HXLINE(1049)						res17 = false;
            					}
HXDLIN(1049)					if (!(res17)) {
HXLINE(1049)						{
HXLINE(1049)							ret6->zpp_inner->x = nx2;
HXDLIN(1049)							ret6->zpp_inner->y = ny2;
            						}
HXDLIN(1049)						{
HXLINE(1049)							 ::zpp_nape::geom::ZPP_Vec2 _this27 = ret6->zpp_inner;
HXDLIN(1049)							if (hx::IsNotNull( _this27->_invalidate )) {
HXLINE(1049)								_this27->_invalidate(_this27);
            							}
            						}
            					}
            				}
HXDLIN(1049)				ret6->zpp_inner->weak = false;
HXDLIN(1049)				 ::nape::geom::RayResult res20 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret6,t11,true,c->outer);
HXLINE(1050)				{
HXLINE(1051)					 ::zpp_nape::util::ZNPNode_RayResult pre2 = null();
HXLINE(1052)					{
HXLINE(1053)						 ::zpp_nape::util::ZNPNode_RayResult cx_ite3 = list->zpp_inner->inner->head;
HXLINE(1054)						while(hx::IsNotNull( cx_ite3 )){
HXLINE(1055)							 ::nape::geom::RayResult j2 = cx_ite3->elt;
HXLINE(1056)							{
HXLINE(1057)								if (hx::IsNotNull( res20->zpp_inner->next )) {
HXLINE(1057)									HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            								}
HXDLIN(1057)								if (hx::IsNotNull( j2->zpp_inner->next )) {
HXLINE(1057)									HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            								}
HXDLIN(1057)								if ((res20->zpp_inner->toiDistance < j2->zpp_inner->toiDistance)) {
HXLINE(1057)									goto _hx_goto_14;
            								}
HXLINE(1058)								pre2 = cx_ite3;
            							}
HXLINE(1060)							cx_ite3 = cx_ite3->next;
            						}
            						_hx_goto_14:;
            					}
HXLINE(1063)					{
HXLINE(1063)						 ::zpp_nape::util::ZNPList_RayResult _this28 = list->zpp_inner->inner;
HXDLIN(1063)						 ::zpp_nape::util::ZNPNode_RayResult ret8;
HXDLIN(1063)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(1063)							ret8 =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(1063)							ret8 = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(1063)							::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret8->next;
HXDLIN(1063)							ret8->next = null();
            						}
HXDLIN(1063)						ret8->elt = res20;
HXDLIN(1063)						 ::zpp_nape::util::ZNPNode_RayResult temp2 = ret8;
HXDLIN(1063)						if (hx::IsNull( pre2 )) {
HXLINE(1063)							temp2->next = _this28->head;
HXDLIN(1063)							_this28->head = temp2;
            						}
            						else {
HXLINE(1063)							temp2->next = pre2->next;
HXDLIN(1063)							pre2->next = temp2;
            						}
HXDLIN(1063)						_this28->pushmod = (_this28->modified = true);
HXDLIN(1063)						_this28->length++;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Ray_obj,circlesect2,(void))

 ::nape::geom::RayResult ZPP_Ray_obj::polysect( ::zpp_nape::shape::ZPP_Polygon p,bool inner,Float mint){
            	HX_GC_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_1068_polysect)
HXLINE(1069)		Float min = mint;
HXLINE(1070)		 ::zpp_nape::shape::ZPP_Edge edge = null();
HXLINE(1071)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ei = p->edges->head;
HXLINE(1072)		{
HXLINE(1073)			bool cx_cont = true;
HXLINE(1074)			 ::zpp_nape::geom::ZPP_Vec2 cx_itei = p->gverts->next;
HXLINE(1075)			 ::zpp_nape::geom::ZPP_Vec2 u = cx_itei;
HXLINE(1076)			 ::zpp_nape::geom::ZPP_Vec2 cx_itej = cx_itei->next;
HXLINE(1077)			while(hx::IsNotNull( cx_itej )){
HXLINE(1078)				 ::zpp_nape::geom::ZPP_Vec2 v = cx_itej;
HXLINE(1079)				{
HXLINE(1080)					 ::zpp_nape::shape::ZPP_Edge e = ei->elt;
HXLINE(1081)					bool _hx_tmp;
HXDLIN(1081)					if (!(inner)) {
HXLINE(1081)						_hx_tmp = (((e->gnormx * this->dirx) + (e->gnormy * this->diry)) < 0);
            					}
            					else {
HXLINE(1081)						_hx_tmp = true;
            					}
HXDLIN(1081)					if (_hx_tmp) {
HXLINE(1082)						Float _vx = ((Float)0.0);
HXLINE(1083)						Float _vy = ((Float)0.0);
HXLINE(1084)						{
HXLINE(1085)							_vx = (v->x - u->x);
HXLINE(1086)							_vy = (v->y - u->y);
            						}
HXLINE(1088)						Float _sx = ((Float)0.0);
HXLINE(1089)						Float _sy = ((Float)0.0);
HXLINE(1090)						{
HXLINE(1091)							_sx = (u->x - this->originx);
HXLINE(1092)							_sy = (u->y - this->originy);
            						}
HXLINE(1094)						Float den = ((_vy * this->dirx) - (_vx * this->diry));
HXLINE(1095)						if (((den * den) > ::nape::Config_obj::epsilon)) {
HXLINE(1096)							den = (( (Float)(1) ) / den);
HXLINE(1097)							Float sxx = (((_vy * _sx) - (_vx * _sy)) * den);
HXLINE(1098)							bool _hx_tmp1;
HXDLIN(1098)							bool _hx_tmp2;
HXDLIN(1098)							if ((sxx > 0)) {
HXLINE(1098)								_hx_tmp2 = (sxx < min);
            							}
            							else {
HXLINE(1098)								_hx_tmp2 = false;
            							}
HXDLIN(1098)							if (_hx_tmp2) {
HXLINE(1098)								_hx_tmp1 = (sxx <= this->maxdist);
            							}
            							else {
HXLINE(1098)								_hx_tmp1 = false;
            							}
HXDLIN(1098)							if (_hx_tmp1) {
HXLINE(1099)								Float txx = (((this->diry * _sx) - (this->dirx * _sy)) * den);
HXLINE(1100)								bool _hx_tmp3;
HXDLIN(1100)								if ((txx > -(::nape::Config_obj::epsilon))) {
HXLINE(1100)									_hx_tmp3 = (txx < (1 + ::nape::Config_obj::epsilon));
            								}
            								else {
HXLINE(1100)									_hx_tmp3 = false;
            								}
HXDLIN(1100)								if (_hx_tmp3) {
HXLINE(1101)									min = sxx;
HXLINE(1102)									edge = ei->elt;
            								}
            							}
            						}
            					}
HXLINE(1107)					ei = ei->next;
            				}
HXLINE(1109)				{
HXLINE(1110)					cx_itei = cx_itej;
HXLINE(1111)					u = v;
HXLINE(1112)					cx_itej = cx_itej->next;
            				}
            			}
HXLINE(1115)			if (cx_cont) {
HXLINE(1116)				while(true){
HXLINE(1117)					cx_itej = p->gverts->next;
HXLINE(1118)					 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_itej;
HXLINE(1119)					{
HXLINE(1120)						 ::zpp_nape::shape::ZPP_Edge e1 = ei->elt;
HXLINE(1121)						bool _hx_tmp4;
HXDLIN(1121)						if (!(inner)) {
HXLINE(1121)							_hx_tmp4 = (((e1->gnormx * this->dirx) + (e1->gnormy * this->diry)) < 0);
            						}
            						else {
HXLINE(1121)							_hx_tmp4 = true;
            						}
HXDLIN(1121)						if (_hx_tmp4) {
HXLINE(1122)							Float _vx1 = ((Float)0.0);
HXLINE(1123)							Float _vy1 = ((Float)0.0);
HXLINE(1124)							{
HXLINE(1125)								_vx1 = (v1->x - u->x);
HXLINE(1126)								_vy1 = (v1->y - u->y);
            							}
HXLINE(1128)							Float _sx1 = ((Float)0.0);
HXLINE(1129)							Float _sy1 = ((Float)0.0);
HXLINE(1130)							{
HXLINE(1131)								_sx1 = (u->x - this->originx);
HXLINE(1132)								_sy1 = (u->y - this->originy);
            							}
HXLINE(1134)							Float den1 = ((_vy1 * this->dirx) - (_vx1 * this->diry));
HXLINE(1135)							if (((den1 * den1) > ::nape::Config_obj::epsilon)) {
HXLINE(1136)								den1 = (( (Float)(1) ) / den1);
HXLINE(1137)								Float sxx1 = (((_vy1 * _sx1) - (_vx1 * _sy1)) * den1);
HXLINE(1138)								bool _hx_tmp5;
HXDLIN(1138)								bool _hx_tmp6;
HXDLIN(1138)								if ((sxx1 > 0)) {
HXLINE(1138)									_hx_tmp6 = (sxx1 < min);
            								}
            								else {
HXLINE(1138)									_hx_tmp6 = false;
            								}
HXDLIN(1138)								if (_hx_tmp6) {
HXLINE(1138)									_hx_tmp5 = (sxx1 <= this->maxdist);
            								}
            								else {
HXLINE(1138)									_hx_tmp5 = false;
            								}
HXDLIN(1138)								if (_hx_tmp5) {
HXLINE(1139)									Float txx1 = (((this->diry * _sx1) - (this->dirx * _sy1)) * den1);
HXLINE(1140)									bool _hx_tmp7;
HXDLIN(1140)									if ((txx1 > -(::nape::Config_obj::epsilon))) {
HXLINE(1140)										_hx_tmp7 = (txx1 < (1 + ::nape::Config_obj::epsilon));
            									}
            									else {
HXLINE(1140)										_hx_tmp7 = false;
            									}
HXDLIN(1140)									if (_hx_tmp7) {
HXLINE(1141)										min = sxx1;
HXLINE(1142)										edge = ei->elt;
            									}
            								}
            							}
            						}
HXLINE(1147)						ei = ei->next;
            					}
HXLINE(1116)					if (!(false)) {
HXLINE(1116)						goto _hx_goto_17;
            					}
            				}
            				_hx_goto_17:;
            			}
            		}
HXLINE(1153)		if (hx::IsNotNull( edge )) {
HXLINE(1154)			Float nx = ((Float)0.0);
HXLINE(1155)			Float ny = ((Float)0.0);
HXLINE(1156)			{
HXLINE(1157)				nx = edge->gnormx;
HXLINE(1158)				ny = edge->gnormy;
            			}
HXLINE(1176)			bool inner1 = (((nx * this->dirx) + (ny * this->diry)) > 0);
HXLINE(1177)			if (inner1) {
HXLINE(1178)				nx = -(nx);
HXLINE(1179)				ny = -(ny);
            			}
HXLINE(1181)			bool _hx_tmp8;
HXDLIN(1181)			if ((nx == nx)) {
HXLINE(1181)				_hx_tmp8 = (ny != ny);
            			}
            			else {
HXLINE(1181)				_hx_tmp8 = true;
            			}
HXDLIN(1181)			if (_hx_tmp8) {
HXLINE(1181)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1181)			 ::nape::geom::Vec2 ret;
HXDLIN(1181)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1181)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(1181)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1181)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1181)				ret->zpp_pool = null();
HXDLIN(1181)				ret->zpp_disp = false;
HXDLIN(1181)				if (hx::IsEq( ret,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1181)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(1181)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1181)				 ::zpp_nape::geom::ZPP_Vec2 ret1;
HXDLIN(1181)				{
HXLINE(1181)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1181)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1181)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1181)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1181)						ret1->next = null();
            					}
HXDLIN(1181)					ret1->weak = false;
            				}
HXDLIN(1181)				ret1->_immutable = false;
HXDLIN(1181)				{
HXLINE(1181)					ret1->x = nx;
HXDLIN(1181)					ret1->y = ny;
            				}
HXDLIN(1181)				ret->zpp_inner = ret1;
HXDLIN(1181)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(1181)				bool _hx_tmp9;
HXDLIN(1181)				if (hx::IsNotNull( ret )) {
HXLINE(1181)					_hx_tmp9 = ret->zpp_disp;
            				}
            				else {
HXLINE(1181)					_hx_tmp9 = false;
            				}
HXDLIN(1181)				if (_hx_tmp9) {
HXLINE(1181)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1181)				{
HXLINE(1181)					 ::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;
HXDLIN(1181)					if (_this->_immutable) {
HXLINE(1181)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(1181)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1181)						_this->_isimmutable();
            					}
            				}
HXDLIN(1181)				bool _hx_tmp10;
HXDLIN(1181)				if ((nx == nx)) {
HXLINE(1181)					_hx_tmp10 = (ny != ny);
            				}
            				else {
HXLINE(1181)					_hx_tmp10 = true;
            				}
HXDLIN(1181)				if (_hx_tmp10) {
HXLINE(1181)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(1181)				bool _hx_tmp11;
HXDLIN(1181)				bool _hx_tmp12;
HXDLIN(1181)				if (hx::IsNotNull( ret )) {
HXLINE(1181)					_hx_tmp12 = ret->zpp_disp;
            				}
            				else {
HXLINE(1181)					_hx_tmp12 = false;
            				}
HXDLIN(1181)				if (_hx_tmp12) {
HXLINE(1181)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1181)				{
HXLINE(1181)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;
HXDLIN(1181)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1181)						_this1->_validate();
            					}
            				}
HXDLIN(1181)				if ((ret->zpp_inner->x == nx)) {
HXLINE(1181)					bool _hx_tmp13;
HXDLIN(1181)					if (hx::IsNotNull( ret )) {
HXLINE(1181)						_hx_tmp13 = ret->zpp_disp;
            					}
            					else {
HXLINE(1181)						_hx_tmp13 = false;
            					}
HXDLIN(1181)					if (_hx_tmp13) {
HXLINE(1181)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(1181)					{
HXLINE(1181)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret->zpp_inner;
HXDLIN(1181)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1181)							_this2->_validate();
            						}
            					}
HXDLIN(1181)					_hx_tmp11 = (ret->zpp_inner->y == ny);
            				}
            				else {
HXLINE(1181)					_hx_tmp11 = false;
            				}
HXDLIN(1181)				if (!(_hx_tmp11)) {
HXLINE(1181)					{
HXLINE(1181)						ret->zpp_inner->x = nx;
HXDLIN(1181)						ret->zpp_inner->y = ny;
            					}
HXDLIN(1181)					{
HXLINE(1181)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret->zpp_inner;
HXDLIN(1181)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(1181)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN(1181)			ret->zpp_inner->weak = false;
HXDLIN(1181)			return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret,min,inner1,p->outer);
            		}
            		else {
HXLINE(1183)			return null();
            		}
HXLINE(1153)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Ray_obj,polysect,return )

void ZPP_Ray_obj::polysect2( ::zpp_nape::shape::ZPP_Polygon p,bool inner, ::nape::geom::RayResultList list){
            	HX_GC_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_1185_polysect2)
HXLINE(1186)		Float min = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1187)		Float max = ((Float)-1.0);
HXLINE(1188)		 ::zpp_nape::shape::ZPP_Edge edge = null();
HXLINE(1189)		 ::zpp_nape::shape::ZPP_Edge edgemax = null();
HXLINE(1190)		 ::zpp_nape::util::ZNPNode_ZPP_Edge ei = p->edges->head;
HXLINE(1191)		{
HXLINE(1192)			bool cx_cont = true;
HXLINE(1193)			 ::zpp_nape::geom::ZPP_Vec2 cx_itei = p->gverts->next;
HXLINE(1194)			 ::zpp_nape::geom::ZPP_Vec2 u = cx_itei;
HXLINE(1195)			 ::zpp_nape::geom::ZPP_Vec2 cx_itej = cx_itei->next;
HXLINE(1196)			while(hx::IsNotNull( cx_itej )){
HXLINE(1197)				 ::zpp_nape::geom::ZPP_Vec2 v = cx_itej;
HXLINE(1198)				{
HXLINE(1199)					 ::zpp_nape::shape::ZPP_Edge e = ei->elt;
HXLINE(1200)					bool _hx_tmp;
HXDLIN(1200)					if (!(inner)) {
HXLINE(1200)						_hx_tmp = (((e->gnormx * this->dirx) + (e->gnormy * this->diry)) < 0);
            					}
            					else {
HXLINE(1200)						_hx_tmp = true;
            					}
HXDLIN(1200)					if (_hx_tmp) {
HXLINE(1201)						Float _vx = ((Float)0.0);
HXLINE(1202)						Float _vy = ((Float)0.0);
HXLINE(1203)						{
HXLINE(1204)							_vx = (v->x - u->x);
HXLINE(1205)							_vy = (v->y - u->y);
            						}
HXLINE(1207)						Float _sx = ((Float)0.0);
HXLINE(1208)						Float _sy = ((Float)0.0);
HXLINE(1209)						{
HXLINE(1210)							_sx = (u->x - this->originx);
HXLINE(1211)							_sy = (u->y - this->originy);
            						}
HXLINE(1213)						Float den = ((_vy * this->dirx) - (_vx * this->diry));
HXLINE(1214)						if (((den * den) > ::nape::Config_obj::epsilon)) {
HXLINE(1215)							den = (( (Float)(1) ) / den);
HXLINE(1216)							Float sxx = (((_vy * _sx) - (_vx * _sy)) * den);
HXLINE(1217)							bool _hx_tmp1;
HXDLIN(1217)							bool _hx_tmp2;
HXDLIN(1217)							if ((sxx > 0)) {
HXLINE(1217)								_hx_tmp2 = (sxx <= this->maxdist);
            							}
            							else {
HXLINE(1217)								_hx_tmp2 = false;
            							}
HXDLIN(1217)							if (_hx_tmp2) {
HXLINE(1217)								if (!((sxx < min))) {
HXLINE(1217)									_hx_tmp1 = (sxx > max);
            								}
            								else {
HXLINE(1217)									_hx_tmp1 = true;
            								}
            							}
            							else {
HXLINE(1217)								_hx_tmp1 = false;
            							}
HXDLIN(1217)							if (_hx_tmp1) {
HXLINE(1218)								Float txx = (((this->diry * _sx) - (this->dirx * _sy)) * den);
HXLINE(1219)								bool _hx_tmp3;
HXDLIN(1219)								if ((txx > -(::nape::Config_obj::epsilon))) {
HXLINE(1219)									_hx_tmp3 = (txx < (1 + ::nape::Config_obj::epsilon));
            								}
            								else {
HXLINE(1219)									_hx_tmp3 = false;
            								}
HXDLIN(1219)								if (_hx_tmp3) {
HXLINE(1220)									if ((sxx < min)) {
HXLINE(1221)										min = sxx;
HXLINE(1222)										edge = ei->elt;
            									}
HXLINE(1224)									if ((sxx > max)) {
HXLINE(1225)										max = sxx;
HXLINE(1226)										edgemax = ei->elt;
            									}
            								}
            							}
            						}
            					}
HXLINE(1232)					ei = ei->next;
            				}
HXLINE(1234)				{
HXLINE(1235)					cx_itei = cx_itej;
HXLINE(1236)					u = v;
HXLINE(1237)					cx_itej = cx_itej->next;
            				}
            			}
HXLINE(1240)			if (cx_cont) {
HXLINE(1241)				while(true){
HXLINE(1242)					cx_itej = p->gverts->next;
HXLINE(1243)					 ::zpp_nape::geom::ZPP_Vec2 v1 = cx_itej;
HXLINE(1244)					{
HXLINE(1245)						 ::zpp_nape::shape::ZPP_Edge e1 = ei->elt;
HXLINE(1246)						bool _hx_tmp4;
HXDLIN(1246)						if (!(inner)) {
HXLINE(1246)							_hx_tmp4 = (((e1->gnormx * this->dirx) + (e1->gnormy * this->diry)) < 0);
            						}
            						else {
HXLINE(1246)							_hx_tmp4 = true;
            						}
HXDLIN(1246)						if (_hx_tmp4) {
HXLINE(1247)							Float _vx1 = ((Float)0.0);
HXLINE(1248)							Float _vy1 = ((Float)0.0);
HXLINE(1249)							{
HXLINE(1250)								_vx1 = (v1->x - u->x);
HXLINE(1251)								_vy1 = (v1->y - u->y);
            							}
HXLINE(1253)							Float _sx1 = ((Float)0.0);
HXLINE(1254)							Float _sy1 = ((Float)0.0);
HXLINE(1255)							{
HXLINE(1256)								_sx1 = (u->x - this->originx);
HXLINE(1257)								_sy1 = (u->y - this->originy);
            							}
HXLINE(1259)							Float den1 = ((_vy1 * this->dirx) - (_vx1 * this->diry));
HXLINE(1260)							if (((den1 * den1) > ::nape::Config_obj::epsilon)) {
HXLINE(1261)								den1 = (( (Float)(1) ) / den1);
HXLINE(1262)								Float sxx1 = (((_vy1 * _sx1) - (_vx1 * _sy1)) * den1);
HXLINE(1263)								bool _hx_tmp5;
HXDLIN(1263)								bool _hx_tmp6;
HXDLIN(1263)								if ((sxx1 > 0)) {
HXLINE(1263)									_hx_tmp6 = (sxx1 <= this->maxdist);
            								}
            								else {
HXLINE(1263)									_hx_tmp6 = false;
            								}
HXDLIN(1263)								if (_hx_tmp6) {
HXLINE(1263)									if (!((sxx1 < min))) {
HXLINE(1263)										_hx_tmp5 = (sxx1 > max);
            									}
            									else {
HXLINE(1263)										_hx_tmp5 = true;
            									}
            								}
            								else {
HXLINE(1263)									_hx_tmp5 = false;
            								}
HXDLIN(1263)								if (_hx_tmp5) {
HXLINE(1264)									Float txx1 = (((this->diry * _sx1) - (this->dirx * _sy1)) * den1);
HXLINE(1265)									bool _hx_tmp7;
HXDLIN(1265)									if ((txx1 > -(::nape::Config_obj::epsilon))) {
HXLINE(1265)										_hx_tmp7 = (txx1 < (1 + ::nape::Config_obj::epsilon));
            									}
            									else {
HXLINE(1265)										_hx_tmp7 = false;
            									}
HXDLIN(1265)									if (_hx_tmp7) {
HXLINE(1266)										if ((sxx1 < min)) {
HXLINE(1267)											min = sxx1;
HXLINE(1268)											edge = ei->elt;
            										}
HXLINE(1270)										if ((sxx1 > max)) {
HXLINE(1271)											max = sxx1;
HXLINE(1272)											edgemax = ei->elt;
            										}
            									}
            								}
            							}
            						}
HXLINE(1278)						ei = ei->next;
            					}
HXLINE(1241)					if (!(false)) {
HXLINE(1241)						goto _hx_goto_20;
            					}
            				}
            				_hx_goto_20:;
            			}
            		}
HXLINE(1284)		if (hx::IsNotNull( edge )) {
HXLINE(1285)			Float nx = ((Float)0.0);
HXLINE(1286)			Float ny = ((Float)0.0);
HXLINE(1287)			{
HXLINE(1288)				nx = edge->gnormx;
HXLINE(1289)				ny = edge->gnormy;
            			}
HXLINE(1307)			bool inner1 = (((nx * this->dirx) + (ny * this->diry)) > 0);
HXLINE(1308)			if (inner1) {
HXLINE(1309)				nx = -(nx);
HXLINE(1310)				ny = -(ny);
            			}
HXLINE(1312)			bool ret;
HXDLIN(1312)			if ((nx == nx)) {
HXLINE(1312)				ret = (ny != ny);
            			}
            			else {
HXLINE(1312)				ret = true;
            			}
HXDLIN(1312)			if (ret) {
HXLINE(1312)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1312)			 ::nape::geom::Vec2 ret1;
HXDLIN(1312)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1312)				ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(1312)				ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1312)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN(1312)				ret1->zpp_pool = null();
HXDLIN(1312)				ret1->zpp_disp = false;
HXDLIN(1312)				if (hx::IsEq( ret1,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1312)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(1312)			if (hx::IsNull( ret1->zpp_inner )) {
HXLINE(1312)				 ::zpp_nape::geom::ZPP_Vec2 ret2;
HXDLIN(1312)				{
HXLINE(1312)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1312)						ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1312)						ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1312)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN(1312)						ret2->next = null();
            					}
HXDLIN(1312)					ret2->weak = false;
            				}
HXDLIN(1312)				ret2->_immutable = false;
HXDLIN(1312)				{
HXLINE(1312)					ret2->x = nx;
HXDLIN(1312)					ret2->y = ny;
            				}
HXDLIN(1312)				ret1->zpp_inner = ret2;
HXDLIN(1312)				ret1->zpp_inner->outer = ret1;
            			}
            			else {
HXLINE(1312)				bool ret3;
HXDLIN(1312)				if (hx::IsNotNull( ret1 )) {
HXLINE(1312)					ret3 = ret1->zpp_disp;
            				}
            				else {
HXLINE(1312)					ret3 = false;
            				}
HXDLIN(1312)				if (ret3) {
HXLINE(1312)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1312)				{
HXLINE(1312)					 ::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;
HXDLIN(1312)					if (_this->_immutable) {
HXLINE(1312)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(1312)					if (hx::IsNotNull( _this->_isimmutable )) {
HXLINE(1312)						_this->_isimmutable();
            					}
            				}
HXDLIN(1312)				bool ret4;
HXDLIN(1312)				if ((nx == nx)) {
HXLINE(1312)					ret4 = (ny != ny);
            				}
            				else {
HXLINE(1312)					ret4 = true;
            				}
HXDLIN(1312)				if (ret4) {
HXLINE(1312)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(1312)				bool ret5;
HXDLIN(1312)				bool ret6;
HXDLIN(1312)				if (hx::IsNotNull( ret1 )) {
HXLINE(1312)					ret6 = ret1->zpp_disp;
            				}
            				else {
HXLINE(1312)					ret6 = false;
            				}
HXDLIN(1312)				if (ret6) {
HXLINE(1312)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1312)				{
HXLINE(1312)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = ret1->zpp_inner;
HXDLIN(1312)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1312)						_this1->_validate();
            					}
            				}
HXDLIN(1312)				if ((ret1->zpp_inner->x == nx)) {
HXLINE(1312)					bool ret7;
HXDLIN(1312)					if (hx::IsNotNull( ret1 )) {
HXLINE(1312)						ret7 = ret1->zpp_disp;
            					}
            					else {
HXLINE(1312)						ret7 = false;
            					}
HXDLIN(1312)					if (ret7) {
HXLINE(1312)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(1312)					{
HXLINE(1312)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = ret1->zpp_inner;
HXDLIN(1312)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1312)							_this2->_validate();
            						}
            					}
HXDLIN(1312)					ret5 = (ret1->zpp_inner->y == ny);
            				}
            				else {
HXLINE(1312)					ret5 = false;
            				}
HXDLIN(1312)				if (!(ret5)) {
HXLINE(1312)					{
HXLINE(1312)						ret1->zpp_inner->x = nx;
HXDLIN(1312)						ret1->zpp_inner->y = ny;
            					}
HXDLIN(1312)					{
HXLINE(1312)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = ret1->zpp_inner;
HXDLIN(1312)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE(1312)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN(1312)			ret1->zpp_inner->weak = false;
HXDLIN(1312)			 ::nape::geom::RayResult ret8 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret1,min,inner1,p->outer);
HXLINE(1313)			{
HXLINE(1314)				 ::zpp_nape::util::ZNPNode_RayResult pre = null();
HXLINE(1315)				{
HXLINE(1316)					 ::zpp_nape::util::ZNPNode_RayResult cx_ite = list->zpp_inner->inner->head;
HXLINE(1317)					while(hx::IsNotNull( cx_ite )){
HXLINE(1318)						 ::nape::geom::RayResult j = cx_ite->elt;
HXLINE(1319)						{
HXLINE(1320)							if (hx::IsNotNull( ret8->zpp_inner->next )) {
HXLINE(1320)								HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            							}
HXDLIN(1320)							if (hx::IsNotNull( j->zpp_inner->next )) {
HXLINE(1320)								HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            							}
HXDLIN(1320)							if ((ret8->zpp_inner->toiDistance < j->zpp_inner->toiDistance)) {
HXLINE(1320)								goto _hx_goto_21;
            							}
HXLINE(1321)							pre = cx_ite;
            						}
HXLINE(1323)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_21:;
            				}
HXLINE(1326)				{
HXLINE(1326)					 ::zpp_nape::util::ZNPList_RayResult _this4 = list->zpp_inner->inner;
HXDLIN(1326)					 ::zpp_nape::util::ZNPNode_RayResult ret9;
HXDLIN(1326)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(1326)						ret9 =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1326)						ret9 = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(1326)						::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret9->next;
HXDLIN(1326)						ret9->next = null();
            					}
HXDLIN(1326)					ret9->elt = ret8;
HXDLIN(1326)					 ::zpp_nape::util::ZNPNode_RayResult temp = ret9;
HXDLIN(1326)					if (hx::IsNull( pre )) {
HXLINE(1326)						temp->next = _this4->head;
HXDLIN(1326)						_this4->head = temp;
            					}
            					else {
HXLINE(1326)						temp->next = pre->next;
HXDLIN(1326)						pre->next = temp;
            					}
HXDLIN(1326)					_this4->pushmod = (_this4->modified = true);
HXDLIN(1326)					_this4->length++;
            				}
            			}
            		}
HXLINE(1329)		bool _hx_tmp8;
HXDLIN(1329)		if (hx::IsNotNull( edgemax )) {
HXLINE(1329)			_hx_tmp8 = hx::IsNotEq( edge,edgemax );
            		}
            		else {
HXLINE(1329)			_hx_tmp8 = false;
            		}
HXDLIN(1329)		if (_hx_tmp8) {
HXLINE(1330)			Float nx1 = ((Float)0.0);
HXLINE(1331)			Float ny1 = ((Float)0.0);
HXLINE(1332)			{
HXLINE(1333)				nx1 = edgemax->gnormx;
HXLINE(1334)				ny1 = edgemax->gnormy;
            			}
HXLINE(1352)			bool inner2 = (((nx1 * this->dirx) + (ny1 * this->diry)) > 0);
HXLINE(1353)			if (inner2) {
HXLINE(1354)				nx1 = -(nx1);
HXLINE(1355)				ny1 = -(ny1);
            			}
HXLINE(1357)			bool ret10;
HXDLIN(1357)			if ((nx1 == nx1)) {
HXLINE(1357)				ret10 = (ny1 != ny1);
            			}
            			else {
HXLINE(1357)				ret10 = true;
            			}
HXDLIN(1357)			if (ret10) {
HXLINE(1357)				HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            			}
HXDLIN(1357)			 ::nape::geom::Vec2 ret11;
HXDLIN(1357)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1357)				ret11 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(1357)				ret11 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1357)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret11->zpp_pool;
HXDLIN(1357)				ret11->zpp_pool = null();
HXDLIN(1357)				ret11->zpp_disp = false;
HXDLIN(1357)				if (hx::IsEq( ret11,::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE(1357)					::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
            				}
            			}
HXDLIN(1357)			if (hx::IsNull( ret11->zpp_inner )) {
HXLINE(1357)				 ::zpp_nape::geom::ZPP_Vec2 ret12;
HXDLIN(1357)				{
HXLINE(1357)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1357)						ret12 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1357)						ret12 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1357)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret12->next;
HXDLIN(1357)						ret12->next = null();
            					}
HXDLIN(1357)					ret12->weak = false;
            				}
HXDLIN(1357)				ret12->_immutable = false;
HXDLIN(1357)				{
HXLINE(1357)					ret12->x = nx1;
HXDLIN(1357)					ret12->y = ny1;
            				}
HXDLIN(1357)				ret11->zpp_inner = ret12;
HXDLIN(1357)				ret11->zpp_inner->outer = ret11;
            			}
            			else {
HXLINE(1357)				bool ret13;
HXDLIN(1357)				if (hx::IsNotNull( ret11 )) {
HXLINE(1357)					ret13 = ret11->zpp_disp;
            				}
            				else {
HXLINE(1357)					ret13 = false;
            				}
HXDLIN(1357)				if (ret13) {
HXLINE(1357)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1357)				{
HXLINE(1357)					 ::zpp_nape::geom::ZPP_Vec2 _this5 = ret11->zpp_inner;
HXDLIN(1357)					if (_this5->_immutable) {
HXLINE(1357)						HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            					}
HXDLIN(1357)					if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE(1357)						_this5->_isimmutable();
            					}
            				}
HXDLIN(1357)				bool ret14;
HXDLIN(1357)				if ((nx1 == nx1)) {
HXLINE(1357)					ret14 = (ny1 != ny1);
            				}
            				else {
HXLINE(1357)					ret14 = true;
            				}
HXDLIN(1357)				if (ret14) {
HXLINE(1357)					HX_STACK_DO_THROW(HX_("Error: Vec2 components cannot be NaN",85,ba,d8,c1));
            				}
HXDLIN(1357)				bool ret15;
HXDLIN(1357)				bool ret16;
HXDLIN(1357)				if (hx::IsNotNull( ret11 )) {
HXLINE(1357)					ret16 = ret11->zpp_disp;
            				}
            				else {
HXLINE(1357)					ret16 = false;
            				}
HXDLIN(1357)				if (ret16) {
HXLINE(1357)					HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            				}
HXDLIN(1357)				{
HXLINE(1357)					 ::zpp_nape::geom::ZPP_Vec2 _this6 = ret11->zpp_inner;
HXDLIN(1357)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1357)						_this6->_validate();
            					}
            				}
HXDLIN(1357)				if ((ret11->zpp_inner->x == nx1)) {
HXLINE(1357)					bool ret17;
HXDLIN(1357)					if (hx::IsNotNull( ret11 )) {
HXLINE(1357)						ret17 = ret11->zpp_disp;
            					}
            					else {
HXLINE(1357)						ret17 = false;
            					}
HXDLIN(1357)					if (ret17) {
HXLINE(1357)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN(1357)					{
HXLINE(1357)						 ::zpp_nape::geom::ZPP_Vec2 _this7 = ret11->zpp_inner;
HXDLIN(1357)						if (hx::IsNotNull( _this7->_validate )) {
HXLINE(1357)							_this7->_validate();
            						}
            					}
HXDLIN(1357)					ret15 = (ret11->zpp_inner->y == ny1);
            				}
            				else {
HXLINE(1357)					ret15 = false;
            				}
HXDLIN(1357)				if (!(ret15)) {
HXLINE(1357)					{
HXLINE(1357)						ret11->zpp_inner->x = nx1;
HXDLIN(1357)						ret11->zpp_inner->y = ny1;
            					}
HXDLIN(1357)					{
HXLINE(1357)						 ::zpp_nape::geom::ZPP_Vec2 _this8 = ret11->zpp_inner;
HXDLIN(1357)						if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE(1357)							_this8->_invalidate(_this8);
            						}
            					}
            				}
            			}
HXDLIN(1357)			ret11->zpp_inner->weak = false;
HXDLIN(1357)			 ::nape::geom::RayResult ret18 = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getRay(ret11,max,inner2,p->outer);
HXLINE(1358)			{
HXLINE(1359)				 ::zpp_nape::util::ZNPNode_RayResult pre1 = null();
HXLINE(1360)				{
HXLINE(1361)					 ::zpp_nape::util::ZNPNode_RayResult cx_ite1 = list->zpp_inner->inner->head;
HXLINE(1362)					while(hx::IsNotNull( cx_ite1 )){
HXLINE(1363)						 ::nape::geom::RayResult j1 = cx_ite1->elt;
HXLINE(1364)						{
HXLINE(1365)							if (hx::IsNotNull( ret18->zpp_inner->next )) {
HXLINE(1365)								HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            							}
HXDLIN(1365)							if (hx::IsNotNull( j1->zpp_inner->next )) {
HXLINE(1365)								HX_STACK_DO_THROW(HX_("Error: This object has been disposed of and cannot be used",15,39,6c,f1));
            							}
HXDLIN(1365)							if ((ret18->zpp_inner->toiDistance < j1->zpp_inner->toiDistance)) {
HXLINE(1365)								goto _hx_goto_22;
            							}
HXLINE(1366)							pre1 = cx_ite1;
            						}
HXLINE(1368)						cx_ite1 = cx_ite1->next;
            					}
            					_hx_goto_22:;
            				}
HXLINE(1371)				{
HXLINE(1371)					 ::zpp_nape::util::ZNPList_RayResult _this9 = list->zpp_inner->inner;
HXDLIN(1371)					 ::zpp_nape::util::ZNPNode_RayResult ret19;
HXDLIN(1371)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(1371)						ret19 =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1371)						ret19 = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(1371)						::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret19->next;
HXDLIN(1371)						ret19->next = null();
            					}
HXDLIN(1371)					ret19->elt = ret18;
HXDLIN(1371)					 ::zpp_nape::util::ZNPNode_RayResult temp1 = ret19;
HXDLIN(1371)					if (hx::IsNull( pre1 )) {
HXLINE(1371)						temp1->next = _this9->head;
HXDLIN(1371)						_this9->head = temp1;
            					}
            					else {
HXLINE(1371)						temp1->next = pre1->next;
HXDLIN(1371)						pre1->next = temp1;
            					}
HXDLIN(1371)					_this9->pushmod = (_this9->modified = true);
HXDLIN(1371)					_this9->length++;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Ray_obj,polysect2,(void))

bool ZPP_Ray_obj::internal;


hx::ObjectPtr< ZPP_Ray_obj > ZPP_Ray_obj::__new() {
	hx::ObjectPtr< ZPP_Ray_obj > __this = new ZPP_Ray_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Ray_obj > ZPP_Ray_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Ray_obj *__this = (ZPP_Ray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Ray_obj), true, "zpp_nape.geom.ZPP_Ray"));
	*(void **)__this = ZPP_Ray_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Ray_obj::ZPP_Ray_obj()
{
}

void ZPP_Ray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Ray);
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_MEMBER_NAME(maxdist,"maxdist");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(originx,"originx");
	HX_MARK_MEMBER_NAME(originy,"originy");
	HX_MARK_MEMBER_NAME(dirx,"dirx");
	HX_MARK_MEMBER_NAME(diry,"diry");
	HX_MARK_MEMBER_NAME(idirx,"idirx");
	HX_MARK_MEMBER_NAME(idiry,"idiry");
	HX_MARK_MEMBER_NAME(normalx,"normalx");
	HX_MARK_MEMBER_NAME(normaly,"normaly");
	HX_MARK_MEMBER_NAME(absnormalx,"absnormalx");
	HX_MARK_MEMBER_NAME(absnormaly,"absnormaly");
	HX_MARK_MEMBER_NAME(zip_dir,"zip_dir");
	HX_MARK_END_CLASS();
}

void ZPP_Ray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(direction,"direction");
	HX_VISIT_MEMBER_NAME(maxdist,"maxdist");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(originx,"originx");
	HX_VISIT_MEMBER_NAME(originy,"originy");
	HX_VISIT_MEMBER_NAME(dirx,"dirx");
	HX_VISIT_MEMBER_NAME(diry,"diry");
	HX_VISIT_MEMBER_NAME(idirx,"idirx");
	HX_VISIT_MEMBER_NAME(idiry,"idiry");
	HX_VISIT_MEMBER_NAME(normalx,"normalx");
	HX_VISIT_MEMBER_NAME(normaly,"normaly");
	HX_VISIT_MEMBER_NAME(absnormalx,"absnormalx");
	HX_VISIT_MEMBER_NAME(absnormaly,"absnormaly");
	HX_VISIT_MEMBER_NAME(zip_dir,"zip_dir");
}

hx::Val ZPP_Ray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"dirx") ) { return hx::Val( dirx ); }
		if (HX_FIELD_EQ(inName,"diry") ) { return hx::Val( diry ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"idirx") ) { return hx::Val( idirx ); }
		if (HX_FIELD_EQ(inName,"idiry") ) { return hx::Val( idiry ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"maxdist") ) { return hx::Val( maxdist ); }
		if (HX_FIELD_EQ(inName,"originx") ) { return hx::Val( originx ); }
		if (HX_FIELD_EQ(inName,"originy") ) { return hx::Val( originy ); }
		if (HX_FIELD_EQ(inName,"normalx") ) { return hx::Val( normalx ); }
		if (HX_FIELD_EQ(inName,"normaly") ) { return hx::Val( normaly ); }
		if (HX_FIELD_EQ(inName,"zip_dir") ) { return hx::Val( zip_dir ); }
		if (HX_FIELD_EQ(inName,"rayAABB") ) { return hx::Val( rayAABB_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData ); }
		if (HX_FIELD_EQ(inName,"aabbtest") ) { return hx::Val( aabbtest_dyn() ); }
		if (HX_FIELD_EQ(inName,"aabbsect") ) { return hx::Val( aabbsect_dyn() ); }
		if (HX_FIELD_EQ(inName,"polysect") ) { return hx::Val( polysect_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return hx::Val( direction ); }
		if (HX_FIELD_EQ(inName,"polysect2") ) { return hx::Val( polysect2_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"absnormalx") ) { return hx::Val( absnormalx ); }
		if (HX_FIELD_EQ(inName,"absnormaly") ) { return hx::Val( absnormaly ); }
		if (HX_FIELD_EQ(inName,"circlesect") ) { return hx::Val( circlesect_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"circlesect2") ) { return hx::Val( circlesect2_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"validate_dir") ) { return hx::Val( validate_dir_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"invalidate_dir") ) { return hx::Val( invalidate_dir_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"origin_invalidate") ) { return hx::Val( origin_invalidate_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"direction_invalidate") ) { return hx::Val( direction_invalidate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Ray_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = ( internal ); return true; }
	}
	return false;
}

hx::Val ZPP_Ray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"dirx") ) { dirx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diry") ) { diry=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"idirx") ) { idirx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idiry") ) { idiry=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"maxdist") ) { maxdist=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originx") ) { originx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originy") ) { originy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normalx") ) { normalx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normaly") ) { normaly=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_dir") ) { zip_dir=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"absnormalx") ) { absnormalx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"absnormaly") ) { absnormaly=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Ray_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ZPP_Ray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("direction",3f,62,40,10));
	outFields->push(HX_("maxdist",0a,94,c0,d7));
	outFields->push(HX_("userData",15,96,28,05));
	outFields->push(HX_("originx",d2,8f,f5,55));
	outFields->push(HX_("originy",d3,8f,f5,55));
	outFields->push(HX_("dirx",8b,66,69,42));
	outFields->push(HX_("diry",8c,66,69,42));
	outFields->push(HX_("idirx",74,4f,7c,b7));
	outFields->push(HX_("idiry",75,4f,7c,b7));
	outFields->push(HX_("normalx",71,70,da,2b));
	outFields->push(HX_("normaly",72,70,da,2b));
	outFields->push(HX_("absnormalx",3f,52,25,7a));
	outFields->push(HX_("absnormaly",40,52,25,7a));
	outFields->push(HX_("zip_dir",af,f5,ab,88));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Ray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_Ray_obj,origin),HX_("origin",e6,19,01,4b)},
	{hx::fsObject /*  ::nape::geom::Vec2 */ ,(int)offsetof(ZPP_Ray_obj,direction),HX_("direction",3f,62,40,10)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,maxdist),HX_("maxdist",0a,94,c0,d7)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ZPP_Ray_obj,userData),HX_("userData",15,96,28,05)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,originx),HX_("originx",d2,8f,f5,55)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,originy),HX_("originy",d3,8f,f5,55)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,dirx),HX_("dirx",8b,66,69,42)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,diry),HX_("diry",8c,66,69,42)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,idirx),HX_("idirx",74,4f,7c,b7)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,idiry),HX_("idiry",75,4f,7c,b7)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,normalx),HX_("normalx",71,70,da,2b)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,normaly),HX_("normaly",72,70,da,2b)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,absnormalx),HX_("absnormalx",3f,52,25,7a)},
	{hx::fsFloat,(int)offsetof(ZPP_Ray_obj,absnormaly),HX_("absnormaly",40,52,25,7a)},
	{hx::fsBool,(int)offsetof(ZPP_Ray_obj,zip_dir),HX_("zip_dir",af,f5,ab,88)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Ray_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ZPP_Ray_obj::internal,HX_("internal",3d,67,76,28)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Ray_obj_sMemberFields[] = {
	HX_("origin",e6,19,01,4b),
	HX_("direction",3f,62,40,10),
	HX_("maxdist",0a,94,c0,d7),
	HX_("userData",15,96,28,05),
	HX_("originx",d2,8f,f5,55),
	HX_("originy",d3,8f,f5,55),
	HX_("dirx",8b,66,69,42),
	HX_("diry",8c,66,69,42),
	HX_("idirx",74,4f,7c,b7),
	HX_("idiry",75,4f,7c,b7),
	HX_("normalx",71,70,da,2b),
	HX_("normaly",72,70,da,2b),
	HX_("absnormalx",3f,52,25,7a),
	HX_("absnormaly",40,52,25,7a),
	HX_("origin_invalidate",74,ea,03,20),
	HX_("direction_invalidate",bb,be,86,27),
	HX_("zip_dir",af,f5,ab,88),
	HX_("invalidate_dir",49,75,0b,7a),
	HX_("validate_dir",e4,55,3e,a8),
	HX_("rayAABB",8a,7d,d1,23),
	HX_("aabbtest",f2,3a,f7,56),
	HX_("aabbsect",63,f6,4d,56),
	HX_("circlesect",d3,3d,68,11),
	HX_("circlesect2",ff,da,cd,29),
	HX_("polysect",0f,18,38,34),
	HX_("polysect2",43,f5,dc,7c),
	::String(null()) };

static void ZPP_Ray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Ray_obj::internal,"internal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Ray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Ray_obj::internal,"internal");
};

#endif

hx::Class ZPP_Ray_obj::__mClass;

static ::String ZPP_Ray_obj_sStaticFields[] = {
	HX_("internal",3d,67,76,28),
	::String(null())
};

void ZPP_Ray_obj::__register()
{
	ZPP_Ray_obj _hx_dummy;
	ZPP_Ray_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_Ray",74,fc,b1,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Ray_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Ray_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Ray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Ray_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Ray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Ray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Ray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Ray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Ray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Ray_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f0f2732ef9260e4c_176_boot)
HXDLIN( 176)		internal = false;
            	}
}

} // end namespace zpp_nape
} // end namespace geom
