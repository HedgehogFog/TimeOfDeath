// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_MatMN
#include <hxinc/nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <hxinc/zpp_nape/geom/ZPP_MatMN.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cde1b96b742265f9_174_new,"zpp_nape.geom.ZPP_MatMN","new",0x27e6157d,"zpp_nape.geom.ZPP_MatMN.new","zpp_nape/geom/MatMN.hx",174,0x7fddad2e)
namespace zpp_nape{
namespace geom{

void ZPP_MatMN_obj::__construct(int m,int n){
            	HX_STACKFRAME(&_hx_pos_cde1b96b742265f9_174_new)
HXLINE( 178)		this->x = null();
HXLINE( 177)		this->n = 0;
HXLINE( 176)		this->m = 0;
HXLINE( 175)		this->outer = null();
HXLINE( 180)		this->m = m;
HXLINE( 181)		this->n = n;
HXLINE( 183)		this->x = ::Array_obj< Float >::__new();
HXLINE( 184)		{
HXLINE( 184)			int _g = 0;
HXDLIN( 184)			int _g1 = (m * n);
HXDLIN( 184)			while((_g < _g1)){
HXLINE( 184)				_g = (_g + 1);
HXDLIN( 184)				int i = (_g - 1);
HXLINE( 185)				this->x->push(((Float)0.0));
            			}
            		}
            	}

Dynamic ZPP_MatMN_obj::__CreateEmpty() { return new ZPP_MatMN_obj; }

void *ZPP_MatMN_obj::_hx_vtable = 0;

Dynamic ZPP_MatMN_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_MatMN_obj > _hx_result = new ZPP_MatMN_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ZPP_MatMN_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x49b125af;
}


hx::ObjectPtr< ZPP_MatMN_obj > ZPP_MatMN_obj::__new(int m,int n) {
	hx::ObjectPtr< ZPP_MatMN_obj > __this = new ZPP_MatMN_obj();
	__this->__construct(m,n);
	return __this;
}

hx::ObjectPtr< ZPP_MatMN_obj > ZPP_MatMN_obj::__alloc(hx::Ctx *_hx_ctx,int m,int n) {
	ZPP_MatMN_obj *__this = (ZPP_MatMN_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_MatMN_obj), true, "zpp_nape.geom.ZPP_MatMN"));
	*(void **)__this = ZPP_MatMN_obj::_hx_vtable;
	__this->__construct(m,n);
	return __this;
}

ZPP_MatMN_obj::ZPP_MatMN_obj()
{
}

void ZPP_MatMN_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_MatMN);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(m,"m");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_END_CLASS();
}

void ZPP_MatMN_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(m,"m");
	HX_VISIT_MEMBER_NAME(n,"n");
	HX_VISIT_MEMBER_NAME(x,"x");
}

hx::Val ZPP_MatMN_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { return hx::Val( m ); }
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n ); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_MatMN_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::geom::MatMN >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_MatMN_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer",7b,b8,28,37));
	outFields->push(HX_("m",6d,00,00,00));
	outFields->push(HX_("n",6e,00,00,00));
	outFields->push(HX_("x",78,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_MatMN_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::geom::MatMN */ ,(int)offsetof(ZPP_MatMN_obj,outer),HX_("outer",7b,b8,28,37)},
	{hx::fsInt,(int)offsetof(ZPP_MatMN_obj,m),HX_("m",6d,00,00,00)},
	{hx::fsInt,(int)offsetof(ZPP_MatMN_obj,n),HX_("n",6e,00,00,00)},
	{hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ZPP_MatMN_obj,x),HX_("x",78,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_MatMN_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_MatMN_obj_sMemberFields[] = {
	HX_("outer",7b,b8,28,37),
	HX_("m",6d,00,00,00),
	HX_("n",6e,00,00,00),
	HX_("x",78,00,00,00),
	::String(null()) };

hx::Class ZPP_MatMN_obj::__mClass;

void ZPP_MatMN_obj::__register()
{
	ZPP_MatMN_obj _hx_dummy;
	ZPP_MatMN_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_MatMN",0b,93,7c,de);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_MatMN_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_MatMN_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_MatMN_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_MatMN_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
