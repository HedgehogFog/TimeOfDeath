// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_nape_Config
#include <hxinc/nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPoly
#include <hxinc/nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPolyList
#include <hxinc/nape/geom/GeomPolyList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <hxinc/zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <hxinc/zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchPair
#include <hxinc/zpp_nape/geom/ZPP_MarchPair.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchSpan
#include <hxinc/zpp_nape/geom/ZPP_MarchSpan.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchingSquares
#include <hxinc/zpp_nape/geom/ZPP_MarchingSquares.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <hxinc/zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPArray2_Float
#include <hxinc/zpp_nape/util/ZNPArray2_Float.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPArray2_ZPP_GeomVert
#include <hxinc/zpp_nape/util/ZNPArray2_ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPArray2_ZPP_MarchPair
#include <hxinc/zpp_nape/util/ZNPArray2_ZPP_MarchPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_GeomPolyList
#include <hxinc/zpp_nape/util/ZPP_GeomPolyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <hxinc/zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9331f34ff3f6620_272_new,"zpp_nape.geom.ZPP_MarchingSquares","new",0x1c7c9df3,"zpp_nape.geom.ZPP_MarchingSquares.new","zpp_nape/geom/MarchingSquares.hx",272,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_662_output,"zpp_nape.geom.ZPP_MarchingSquares","output",0xdb40bf4e,"zpp_nape.geom.ZPP_MarchingSquares.output","zpp_nape/geom/MarchingSquares.hx",662,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_750_linkright,"zpp_nape.geom.ZPP_MarchingSquares","linkright",0x3e698775,"zpp_nape.geom.ZPP_MarchingSquares.linkright","zpp_nape/geom/MarchingSquares.hx",750,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_759_linkleft,"zpp_nape.geom.ZPP_MarchingSquares","linkleft",0xd0adc28e,"zpp_nape.geom.ZPP_MarchingSquares.linkleft","zpp_nape/geom/MarchingSquares.hx",759,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_764_linkdown,"zpp_nape.geom.ZPP_MarchingSquares","linkdown",0xcb6bb2e9,"zpp_nape.geom.ZPP_MarchingSquares.linkdown","zpp_nape/geom/MarchingSquares.hx",764,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_769_linkup,"zpp_nape.geom.ZPP_MarchingSquares","linkup",0xbb64a122,"zpp_nape.geom.ZPP_MarchingSquares.linkup","zpp_nape/geom/MarchingSquares.hx",769,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_771_combLR,"zpp_nape.geom.ZPP_MarchingSquares","combLR",0x95e5ae14,"zpp_nape.geom.ZPP_MarchingSquares.combLR","zpp_nape/geom/MarchingSquares.hx",771,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_864_combUD,"zpp_nape.geom.ZPP_MarchingSquares","combUD",0x95e5b5dd,"zpp_nape.geom.ZPP_MarchingSquares.combUD","zpp_nape/geom/MarchingSquares.hx",864,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_911_combUD_virtual,"zpp_nape.geom.ZPP_MarchingSquares","combUD_virtual",0x9d545269,"zpp_nape.geom.ZPP_MarchingSquares.combUD_virtual","zpp_nape/geom/MarchingSquares.hx",911,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_922_combLeft,"zpp_nape.geom.ZPP_MarchingSquares","combLeft",0x1d4b1f35,"zpp_nape.geom.ZPP_MarchingSquares.combLeft","zpp_nape/geom/MarchingSquares.hx",922,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_928_combRight,"zpp_nape.geom.ZPP_MarchingSquares","combRight",0xfb7d3cee,"zpp_nape.geom.ZPP_MarchingSquares.combRight","zpp_nape/geom/MarchingSquares.hx",928,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_934_combUp,"zpp_nape.geom.ZPP_MarchingSquares","combUp",0x95e5b609,"zpp_nape.geom.ZPP_MarchingSquares.combUp","zpp_nape/geom/MarchingSquares.hx",934,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_940_combDown,"zpp_nape.geom.ZPP_MarchingSquares","combDown",0x18090f90,"zpp_nape.geom.ZPP_MarchingSquares.combDown","zpp_nape/geom/MarchingSquares.hx",940,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_946_comb,"zpp_nape.geom.ZPP_MarchingSquares","comb",0xc94fcc0e,"zpp_nape.geom.ZPP_MarchingSquares.comb","zpp_nape/geom/MarchingSquares.hx",946,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_954_marchSquare,"zpp_nape.geom.ZPP_MarchingSquares","marchSquare",0x3109c653,"zpp_nape.geom.ZPP_MarchingSquares.marchSquare","zpp_nape/geom/MarchingSquares.hx",954,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_1883_lerp,"zpp_nape.geom.ZPP_MarchingSquares","lerp",0xcf3b2584,"zpp_nape.geom.ZPP_MarchingSquares.lerp","zpp_nape/geom/MarchingSquares.hx",1883,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_1893_xlerp,"zpp_nape.geom.ZPP_MarchingSquares","xlerp",0x71eb4742,"zpp_nape.geom.ZPP_MarchingSquares.xlerp","zpp_nape/geom/MarchingSquares.hx",1893,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_1910_ylerp,"zpp_nape.geom.ZPP_MarchingSquares","ylerp",0x0551dbc3,"zpp_nape.geom.ZPP_MarchingSquares.ylerp","zpp_nape/geom/MarchingSquares.hx",1910,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_276_run,"zpp_nape.geom.ZPP_MarchingSquares","run",0x1c7fb4de,"zpp_nape.geom.ZPP_MarchingSquares.run","zpp_nape/geom/MarchingSquares.hx",276,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_1929_ISO,"zpp_nape.geom.ZPP_MarchingSquares","ISO",0x1c607ab8,"zpp_nape.geom.ZPP_MarchingSquares.ISO","zpp_nape/geom/MarchingSquares.hx",1929,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_271_boot,"zpp_nape.geom.ZPP_MarchingSquares","boot",0xc8a6973f,"zpp_nape.geom.ZPP_MarchingSquares.boot","zpp_nape/geom/MarchingSquares.hx",271,0xc3305538)
HX_LOCAL_STACK_FRAME(_hx_pos_d9331f34ff3f6620_953_boot,"zpp_nape.geom.ZPP_MarchingSquares","boot",0xc8a6973f,"zpp_nape.geom.ZPP_MarchingSquares.boot","zpp_nape/geom/MarchingSquares.hx",953,0xc3305538)
static const int _hx_array_data_91dc2881_56[] = {
	(int)-1,(int)224,(int)56,(int)216,(int)14,(int)-1,(int)54,(int)214,(int)131,(int)99,(int)-1,(int)91,(int)141,(int)109,(int)181,(int)85,
};
namespace zpp_nape{
namespace geom{

void ZPP_MarchingSquares_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_272_new)
            	}

Dynamic ZPP_MarchingSquares_obj::__CreateEmpty() { return new ZPP_MarchingSquares_obj; }

void *ZPP_MarchingSquares_obj::_hx_vtable = 0;

Dynamic ZPP_MarchingSquares_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_MarchingSquares_obj > _hx_result = new ZPP_MarchingSquares_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_MarchingSquares_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x29af3641;
}

void ZPP_MarchingSquares_obj::output( ::nape::geom::GeomPolyList ret, ::zpp_nape::geom::ZPP_GeomVert poly){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_662_output)
HXLINE( 663)		bool _hx_tmp;
HXLINE( 664)		bool _hx_tmp1;
HXDLIN( 664)		bool _hx_tmp2;
HXDLIN( 664)		if (hx::IsNotNull( poly )) {
HXLINE( 664)			_hx_tmp2 = hx::IsEq( poly->next,poly );
            		}
            		else {
HXLINE( 664)			_hx_tmp2 = true;
            		}
HXDLIN( 664)		if (!(_hx_tmp2)) {
HXLINE( 664)			_hx_tmp1 = hx::IsEq( poly->next,poly->prev );
            		}
            		else {
HXLINE( 664)			_hx_tmp1 = true;
            		}
HXLINE( 663)		if (_hx_tmp1) {
HXLINE( 663)			_hx_tmp = true;
            		}
            		else {
HXLINE( 693)			Float area = ((Float)0.0);
HXLINE( 694)			{
HXLINE( 695)				 ::zpp_nape::geom::ZPP_GeomVert F = poly;
HXLINE( 696)				 ::zpp_nape::geom::ZPP_GeomVert L = poly;
HXLINE( 697)				if (hx::IsNotNull( F )) {
HXLINE( 698)					 ::zpp_nape::geom::ZPP_GeomVert nite = F;
HXLINE( 699)					while(true){
HXLINE( 700)						 ::zpp_nape::geom::ZPP_GeomVert v = nite;
HXLINE( 703)						area = (area + (v->x * (v->next->y - v->prev->y)));
HXLINE( 706)						nite = nite->next;
HXLINE( 699)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 699)							goto _hx_goto_1;
            						}
            					}
            					_hx_goto_1:;
            				}
            			}
HXLINE( 668)			Float a = (area * ((Float)0.5));
HXLINE( 663)			_hx_tmp = ((a * a) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon));
            		}
HXDLIN( 663)		if (_hx_tmp) {
HXLINE( 717)			while(hx::IsNotNull( poly )){
HXLINE( 726)				bool poly1;
HXDLIN( 726)				if (hx::IsNotNull( poly )) {
HXLINE( 726)					poly1 = hx::IsEq( poly->prev,poly );
            				}
            				else {
HXLINE( 726)					poly1 = false;
            				}
HXDLIN( 726)				if (poly1) {
HXLINE( 727)					poly->next = (poly->prev = null());
HXLINE( 729)					poly = null();
HXDLIN( 729)					poly = poly;
            				}
            				else {
HXLINE( 732)					 ::zpp_nape::geom::ZPP_GeomVert retnodes = poly->next;
HXLINE( 733)					poly->prev->next = poly->next;
HXLINE( 734)					poly->next->prev = poly->prev;
HXLINE( 735)					poly->next = (poly->prev = null());
HXLINE( 737)					poly = null();
HXLINE( 738)					poly = retnodes;
            				}
            			}
HXLINE( 742)			return;
            		}
HXLINE( 744)		 ::nape::geom::GeomPoly gp = ::nape::geom::GeomPoly_obj::get(null());
HXLINE( 745)		gp->zpp_inner->vertices = poly;
HXLINE( 746)		if (ret->zpp_inner->reverse_flag) {
HXLINE( 746)			ret->push(gp);
            		}
            		else {
HXLINE( 746)			ret->unshift(gp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,output,(void))

 ::zpp_nape::geom::ZPP_GeomVert ZPP_MarchingSquares_obj::linkright( ::zpp_nape::geom::ZPP_GeomVert poly,int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_750_linkright)
HXLINE( 751)		int kind = (key & 7);
HXLINE( 752)		if ((kind == 0)) {
HXLINE( 752)			return poly;
            		}
            		else {
HXLINE( 753)			if ((kind == 3)) {
HXLINE( 753)				return poly->next->next;
            			}
            			else {
HXLINE( 754)				return poly->next;
            			}
            		}
HXLINE( 752)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,linkright,return )

 ::zpp_nape::geom::ZPP_GeomVert ZPP_MarchingSquares_obj::linkleft( ::zpp_nape::geom::ZPP_GeomVert poly,int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_759_linkleft)
HXDLIN( 759)		if (((key & 1) == 0)) {
HXDLIN( 759)			return poly->prev;
            		}
            		else {
HXDLIN( 759)			return poly;
            		}
HXDLIN( 759)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,linkleft,return )

 ::zpp_nape::geom::ZPP_GeomVert ZPP_MarchingSquares_obj::linkdown( ::zpp_nape::geom::ZPP_GeomVert poly,int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_764_linkdown)
HXDLIN( 764)		if (((key & 128) == 0)) {
HXDLIN( 764)			return poly->prev;
            		}
            		else {
HXDLIN( 764)			return poly->prev->prev;
            		}
HXDLIN( 764)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,linkdown,return )

 ::zpp_nape::geom::ZPP_GeomVert ZPP_MarchingSquares_obj::linkup( ::zpp_nape::geom::ZPP_GeomVert poly,int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_769_linkup)
HXDLIN( 769)		return poly;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,linkup,return )

void ZPP_MarchingSquares_obj::combLR( ::zpp_nape::geom::ZPP_MarchPair a, ::zpp_nape::geom::ZPP_MarchPair b){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_771_combLR)
HXLINE( 772)		 ::zpp_nape::geom::ZPP_GeomVert poly = a->pr;
HXDLIN( 772)		int kind = (a->okeyr & 7);
HXDLIN( 772)		 ::zpp_nape::geom::ZPP_GeomVert ap;
HXDLIN( 772)		if ((kind == 0)) {
HXLINE( 772)			ap = poly;
            		}
            		else {
HXLINE( 772)			if ((kind == 3)) {
HXLINE( 772)				ap = poly->next->next;
            			}
            			else {
HXLINE( 772)				ap = poly->next;
            			}
            		}
HXLINE( 773)		 ::zpp_nape::geom::ZPP_GeomVert poly1 = b->p1;
HXDLIN( 773)		 ::zpp_nape::geom::ZPP_GeomVert bp;
HXDLIN( 773)		if (((b->okey1 & 1) == 0)) {
HXLINE( 773)			bp = poly1->prev;
            		}
            		else {
HXLINE( 773)			bp = poly1;
            		}
HXLINE( 774)		 ::zpp_nape::geom::ZPP_GeomVert ap2 = ap->next;
HXLINE( 775)		 ::zpp_nape::geom::ZPP_GeomVert bp2 = bp->prev;
HXLINE( 776)		if (((a->keyr & 4) != 0)) {
HXLINE( 777)			if (hx::IsEq( b->pr,b->p1 )) {
HXLINE( 777)				b->pr = ap->prev;
            			}
HXLINE( 778)			b->p1 = ap->prev;
HXLINE( 779)			ap->prev->next = bp->next;
HXLINE( 780)			bp->next->prev = ap->prev;
HXLINE( 781)			{
HXLINE( 782)				 ::zpp_nape::geom::ZPP_GeomVert o = ap;
HXLINE( 791)				{
HXLINE( 791)					if (hx::IsNotNull( o->wrap )) {
HXLINE( 791)						o->wrap->zpp_inner->_inuse = false;
HXDLIN( 791)						{
HXLINE( 791)							 ::nape::geom::Vec2 _this = o->wrap;
HXDLIN( 791)							bool _hx_tmp;
HXDLIN( 791)							if (hx::IsNotNull( _this )) {
HXLINE( 791)								_hx_tmp = _this->zpp_disp;
            							}
            							else {
HXLINE( 791)								_hx_tmp = false;
            							}
HXDLIN( 791)							if (_hx_tmp) {
HXLINE( 791)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 791)							{
HXLINE( 791)								 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 791)								if (_this1->_immutable) {
HXLINE( 791)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 791)								if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 791)									_this1->_isimmutable();
            								}
            							}
HXDLIN( 791)							if (_this->zpp_inner->_inuse) {
HXLINE( 791)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN( 791)							 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 791)							_this->zpp_inner->outer = null();
HXDLIN( 791)							_this->zpp_inner = null();
HXDLIN( 791)							{
HXLINE( 791)								 ::nape::geom::Vec2 o1 = _this;
HXDLIN( 791)								o1->zpp_pool = null();
HXDLIN( 791)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 791)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o1;
            								}
            								else {
HXLINE( 791)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            								}
HXDLIN( 791)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o1;
HXDLIN( 791)								o1->zpp_disp = true;
            							}
HXDLIN( 791)							{
HXLINE( 791)								 ::zpp_nape::geom::ZPP_Vec2 o2 = inner;
HXDLIN( 791)								{
HXLINE( 791)									if (hx::IsNotNull( o2->outer )) {
HXLINE( 791)										o2->outer->zpp_inner = null();
HXDLIN( 791)										o2->outer = null();
            									}
HXDLIN( 791)									o2->_isimmutable = null();
HXDLIN( 791)									o2->_validate = null();
HXDLIN( 791)									o2->_invalidate = null();
            								}
HXDLIN( 791)								o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 791)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            							}
            						}
HXDLIN( 791)						o->wrap = null();
            					}
HXDLIN( 791)					o->prev = (o->next = null());
            				}
HXLINE( 792)				o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 793)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            			}
            		}
            		else {
HXLINE( 800)			ap->next = bp->next;
HXLINE( 801)			bp->next->prev = ap;
            		}
HXLINE( 803)		{
HXLINE( 804)			 ::zpp_nape::geom::ZPP_GeomVert o3 = bp;
HXLINE( 813)			{
HXLINE( 813)				if (hx::IsNotNull( o3->wrap )) {
HXLINE( 813)					o3->wrap->zpp_inner->_inuse = false;
HXDLIN( 813)					{
HXLINE( 813)						 ::nape::geom::Vec2 _this2 = o3->wrap;
HXDLIN( 813)						bool _hx_tmp1;
HXDLIN( 813)						if (hx::IsNotNull( _this2 )) {
HXLINE( 813)							_hx_tmp1 = _this2->zpp_disp;
            						}
            						else {
HXLINE( 813)							_hx_tmp1 = false;
            						}
HXDLIN( 813)						if (_hx_tmp1) {
HXLINE( 813)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 813)						{
HXLINE( 813)							 ::zpp_nape::geom::ZPP_Vec2 _this3 = _this2->zpp_inner;
HXDLIN( 813)							if (_this3->_immutable) {
HXLINE( 813)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 813)							if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE( 813)								_this3->_isimmutable();
            							}
            						}
HXDLIN( 813)						if (_this2->zpp_inner->_inuse) {
HXLINE( 813)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 813)						 ::zpp_nape::geom::ZPP_Vec2 inner1 = _this2->zpp_inner;
HXDLIN( 813)						_this2->zpp_inner->outer = null();
HXDLIN( 813)						_this2->zpp_inner = null();
HXDLIN( 813)						{
HXLINE( 813)							 ::nape::geom::Vec2 o4 = _this2;
HXDLIN( 813)							o4->zpp_pool = null();
HXDLIN( 813)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 813)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o4;
            							}
            							else {
HXLINE( 813)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o4;
            							}
HXDLIN( 813)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o4;
HXDLIN( 813)							o4->zpp_disp = true;
            						}
HXDLIN( 813)						{
HXLINE( 813)							 ::zpp_nape::geom::ZPP_Vec2 o5 = inner1;
HXDLIN( 813)							{
HXLINE( 813)								if (hx::IsNotNull( o5->outer )) {
HXLINE( 813)									o5->outer->zpp_inner = null();
HXDLIN( 813)									o5->outer = null();
            								}
HXDLIN( 813)								o5->_isimmutable = null();
HXDLIN( 813)								o5->_validate = null();
HXDLIN( 813)								o5->_invalidate = null();
            							}
HXDLIN( 813)							o5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 813)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o5;
            						}
            					}
HXDLIN( 813)					o3->wrap = null();
            				}
HXDLIN( 813)				o3->prev = (o3->next = null());
            			}
HXLINE( 814)			o3->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 815)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o3;
            		}
HXLINE( 820)		if (((a->keyr & 16) != 0)) {
HXLINE( 821)			b->pd = ap2->next;
HXLINE( 822)			ap2->next->prev = bp2->prev;
HXLINE( 823)			bp2->prev->next = ap2->next;
HXLINE( 824)			{
HXLINE( 825)				 ::zpp_nape::geom::ZPP_GeomVert o6 = ap2;
HXLINE( 834)				{
HXLINE( 834)					if (hx::IsNotNull( o6->wrap )) {
HXLINE( 834)						o6->wrap->zpp_inner->_inuse = false;
HXDLIN( 834)						{
HXLINE( 834)							 ::nape::geom::Vec2 _this4 = o6->wrap;
HXDLIN( 834)							bool _hx_tmp2;
HXDLIN( 834)							if (hx::IsNotNull( _this4 )) {
HXLINE( 834)								_hx_tmp2 = _this4->zpp_disp;
            							}
            							else {
HXLINE( 834)								_hx_tmp2 = false;
            							}
HXDLIN( 834)							if (_hx_tmp2) {
HXLINE( 834)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 834)							{
HXLINE( 834)								 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this4->zpp_inner;
HXDLIN( 834)								if (_this5->_immutable) {
HXLINE( 834)									HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            								}
HXDLIN( 834)								if (hx::IsNotNull( _this5->_isimmutable )) {
HXLINE( 834)									_this5->_isimmutable();
            								}
            							}
HXDLIN( 834)							if (_this4->zpp_inner->_inuse) {
HXLINE( 834)								HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            							}
HXDLIN( 834)							 ::zpp_nape::geom::ZPP_Vec2 inner2 = _this4->zpp_inner;
HXDLIN( 834)							_this4->zpp_inner->outer = null();
HXDLIN( 834)							_this4->zpp_inner = null();
HXDLIN( 834)							{
HXLINE( 834)								 ::nape::geom::Vec2 o7 = _this4;
HXDLIN( 834)								o7->zpp_pool = null();
HXDLIN( 834)								if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 834)									::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o7;
            								}
            								else {
HXLINE( 834)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o7;
            								}
HXDLIN( 834)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o7;
HXDLIN( 834)								o7->zpp_disp = true;
            							}
HXDLIN( 834)							{
HXLINE( 834)								 ::zpp_nape::geom::ZPP_Vec2 o8 = inner2;
HXDLIN( 834)								{
HXLINE( 834)									if (hx::IsNotNull( o8->outer )) {
HXLINE( 834)										o8->outer->zpp_inner = null();
HXDLIN( 834)										o8->outer = null();
            									}
HXDLIN( 834)									o8->_isimmutable = null();
HXDLIN( 834)									o8->_validate = null();
HXDLIN( 834)									o8->_invalidate = null();
            								}
HXDLIN( 834)								o8->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 834)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o8;
            							}
            						}
HXDLIN( 834)						o6->wrap = null();
            					}
HXDLIN( 834)					o6->prev = (o6->next = null());
            				}
HXLINE( 835)				o6->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 836)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o6;
            			}
            		}
            		else {
HXLINE( 843)			ap2->prev = bp2->prev;
HXLINE( 844)			bp2->prev->next = ap2;
            		}
HXLINE( 846)		{
HXLINE( 847)			 ::zpp_nape::geom::ZPP_GeomVert o9 = bp2;
HXLINE( 856)			{
HXLINE( 856)				if (hx::IsNotNull( o9->wrap )) {
HXLINE( 856)					o9->wrap->zpp_inner->_inuse = false;
HXDLIN( 856)					{
HXLINE( 856)						 ::nape::geom::Vec2 _this6 = o9->wrap;
HXDLIN( 856)						bool _hx_tmp3;
HXDLIN( 856)						if (hx::IsNotNull( _this6 )) {
HXLINE( 856)							_hx_tmp3 = _this6->zpp_disp;
            						}
            						else {
HXLINE( 856)							_hx_tmp3 = false;
            						}
HXDLIN( 856)						if (_hx_tmp3) {
HXLINE( 856)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 856)						{
HXLINE( 856)							 ::zpp_nape::geom::ZPP_Vec2 _this7 = _this6->zpp_inner;
HXDLIN( 856)							if (_this7->_immutable) {
HXLINE( 856)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 856)							if (hx::IsNotNull( _this7->_isimmutable )) {
HXLINE( 856)								_this7->_isimmutable();
            							}
            						}
HXDLIN( 856)						if (_this6->zpp_inner->_inuse) {
HXLINE( 856)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 856)						 ::zpp_nape::geom::ZPP_Vec2 inner3 = _this6->zpp_inner;
HXDLIN( 856)						_this6->zpp_inner->outer = null();
HXDLIN( 856)						_this6->zpp_inner = null();
HXDLIN( 856)						{
HXLINE( 856)							 ::nape::geom::Vec2 o10 = _this6;
HXDLIN( 856)							o10->zpp_pool = null();
HXDLIN( 856)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 856)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o10;
            							}
            							else {
HXLINE( 856)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o10;
            							}
HXDLIN( 856)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o10;
HXDLIN( 856)							o10->zpp_disp = true;
            						}
HXDLIN( 856)						{
HXLINE( 856)							 ::zpp_nape::geom::ZPP_Vec2 o11 = inner3;
HXDLIN( 856)							{
HXLINE( 856)								if (hx::IsNotNull( o11->outer )) {
HXLINE( 856)									o11->outer->zpp_inner = null();
HXDLIN( 856)									o11->outer = null();
            								}
HXDLIN( 856)								o11->_isimmutable = null();
HXDLIN( 856)								o11->_validate = null();
HXDLIN( 856)								o11->_invalidate = null();
            							}
HXDLIN( 856)							o11->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 856)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o11;
            						}
            					}
HXDLIN( 856)					o9->wrap = null();
            				}
HXDLIN( 856)				o9->prev = (o9->next = null());
            			}
HXLINE( 857)			o9->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 858)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o9;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,combLR,(void))

void ZPP_MarchingSquares_obj::combUD( ::zpp_nape::geom::ZPP_MarchPair a, ::zpp_nape::geom::ZPP_MarchPair b){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_864_combUD)
HXLINE( 865)		 ::zpp_nape::geom::ZPP_GeomVert ad;
HXDLIN( 865)		bool ad1;
HXDLIN( 865)		if (hx::IsNotNull( a->p2 )) {
HXLINE( 865)			ad1 = (a->key2 == 56);
            		}
            		else {
HXLINE( 865)			ad1 = false;
            		}
HXDLIN( 865)		if (ad1) {
HXLINE( 865)			ad = a->p2;
            		}
            		else {
HXLINE( 865)			ad = a->p1;
            		}
HXLINE( 866)		 ::zpp_nape::geom::ZPP_GeomVert bu;
HXDLIN( 866)		bool bu1;
HXDLIN( 866)		if (hx::IsNotNull( b->p2 )) {
HXLINE( 866)			bu1 = (b->key2 == 14);
            		}
            		else {
HXLINE( 866)			bu1 = false;
            		}
HXDLIN( 866)		if (bu1) {
HXLINE( 866)			bu = b->p2;
            		}
            		else {
HXLINE( 866)			bu = b->p1;
            		}
HXLINE( 867)		 ::zpp_nape::geom::ZPP_GeomVert ap = a->pd;
HXLINE( 868)		 ::zpp_nape::geom::ZPP_GeomVert bp = bu;
HXLINE( 869)		 ::zpp_nape::geom::ZPP_GeomVert ap2 = ap->prev;
HXLINE( 870)		 ::zpp_nape::geom::ZPP_GeomVert bp2 = bp->next;
HXLINE( 871)		bp->next = ap->next;
HXLINE( 872)		ap->next->prev = bp;
HXLINE( 873)		{
HXLINE( 874)			 ::zpp_nape::geom::ZPP_GeomVert o = ap;
HXLINE( 883)			{
HXLINE( 883)				if (hx::IsNotNull( o->wrap )) {
HXLINE( 883)					o->wrap->zpp_inner->_inuse = false;
HXDLIN( 883)					{
HXLINE( 883)						 ::nape::geom::Vec2 _this = o->wrap;
HXDLIN( 883)						bool _hx_tmp;
HXDLIN( 883)						if (hx::IsNotNull( _this )) {
HXLINE( 883)							_hx_tmp = _this->zpp_disp;
            						}
            						else {
HXLINE( 883)							_hx_tmp = false;
            						}
HXDLIN( 883)						if (_hx_tmp) {
HXLINE( 883)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 883)						{
HXLINE( 883)							 ::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;
HXDLIN( 883)							if (_this1->_immutable) {
HXLINE( 883)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 883)							if (hx::IsNotNull( _this1->_isimmutable )) {
HXLINE( 883)								_this1->_isimmutable();
            							}
            						}
HXDLIN( 883)						if (_this->zpp_inner->_inuse) {
HXLINE( 883)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 883)						 ::zpp_nape::geom::ZPP_Vec2 inner = _this->zpp_inner;
HXDLIN( 883)						_this->zpp_inner->outer = null();
HXDLIN( 883)						_this->zpp_inner = null();
HXDLIN( 883)						{
HXLINE( 883)							 ::nape::geom::Vec2 o1 = _this;
HXDLIN( 883)							o1->zpp_pool = null();
HXDLIN( 883)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 883)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o1;
            							}
            							else {
HXLINE( 883)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            							}
HXDLIN( 883)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o1;
HXDLIN( 883)							o1->zpp_disp = true;
            						}
HXDLIN( 883)						{
HXLINE( 883)							 ::zpp_nape::geom::ZPP_Vec2 o2 = inner;
HXDLIN( 883)							{
HXLINE( 883)								if (hx::IsNotNull( o2->outer )) {
HXLINE( 883)									o2->outer->zpp_inner = null();
HXDLIN( 883)									o2->outer = null();
            								}
HXDLIN( 883)								o2->_isimmutable = null();
HXDLIN( 883)								o2->_validate = null();
HXDLIN( 883)								o2->_invalidate = null();
            							}
HXDLIN( 883)							o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 883)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            						}
            					}
HXDLIN( 883)					o->wrap = null();
            				}
HXDLIN( 883)				o->prev = (o->next = null());
            			}
HXLINE( 884)			o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 885)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            		}
HXLINE( 890)		bp2->prev = ap2->prev;
HXLINE( 891)		ap2->prev->next = bp2;
HXLINE( 892)		if (hx::IsEq( ap2,a->p1 )) {
HXLINE( 892)			a->p1 = bp2;
            		}
HXLINE( 893)		{
HXLINE( 894)			 ::zpp_nape::geom::ZPP_GeomVert o3 = ap2;
HXLINE( 903)			{
HXLINE( 903)				if (hx::IsNotNull( o3->wrap )) {
HXLINE( 903)					o3->wrap->zpp_inner->_inuse = false;
HXDLIN( 903)					{
HXLINE( 903)						 ::nape::geom::Vec2 _this2 = o3->wrap;
HXDLIN( 903)						bool _hx_tmp1;
HXDLIN( 903)						if (hx::IsNotNull( _this2 )) {
HXLINE( 903)							_hx_tmp1 = _this2->zpp_disp;
            						}
            						else {
HXLINE( 903)							_hx_tmp1 = false;
            						}
HXDLIN( 903)						if (_hx_tmp1) {
HXLINE( 903)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 903)						{
HXLINE( 903)							 ::zpp_nape::geom::ZPP_Vec2 _this3 = _this2->zpp_inner;
HXDLIN( 903)							if (_this3->_immutable) {
HXLINE( 903)								HX_STACK_DO_THROW(HX_("Error: Vec2 is immutable",60,ee,1f,bc));
            							}
HXDLIN( 903)							if (hx::IsNotNull( _this3->_isimmutable )) {
HXLINE( 903)								_this3->_isimmutable();
            							}
            						}
HXDLIN( 903)						if (_this2->zpp_inner->_inuse) {
HXLINE( 903)							HX_STACK_DO_THROW(HX_("Error: This Vec2 is not disposable",b5,d1,d1,d8));
            						}
HXDLIN( 903)						 ::zpp_nape::geom::ZPP_Vec2 inner1 = _this2->zpp_inner;
HXDLIN( 903)						_this2->zpp_inner->outer = null();
HXDLIN( 903)						_this2->zpp_inner = null();
HXDLIN( 903)						{
HXLINE( 903)							 ::nape::geom::Vec2 o4 = _this2;
HXDLIN( 903)							o4->zpp_pool = null();
HXDLIN( 903)							if (hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::nextVec2 )) {
HXLINE( 903)								::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o4;
            							}
            							else {
HXLINE( 903)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o4;
            							}
HXDLIN( 903)							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o4;
HXDLIN( 903)							o4->zpp_disp = true;
            						}
HXDLIN( 903)						{
HXLINE( 903)							 ::zpp_nape::geom::ZPP_Vec2 o5 = inner1;
HXDLIN( 903)							{
HXLINE( 903)								if (hx::IsNotNull( o5->outer )) {
HXLINE( 903)									o5->outer->zpp_inner = null();
HXDLIN( 903)									o5->outer = null();
            								}
HXDLIN( 903)								o5->_isimmutable = null();
HXDLIN( 903)								o5->_validate = null();
HXDLIN( 903)								o5->_invalidate = null();
            							}
HXDLIN( 903)							o5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 903)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o5;
            						}
            					}
HXDLIN( 903)					o3->wrap = null();
            				}
HXDLIN( 903)				o3->prev = (o3->next = null());
            			}
HXLINE( 904)			o3->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 905)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o3;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,combUD,(void))

void ZPP_MarchingSquares_obj::combUD_virtual( ::zpp_nape::geom::ZPP_MarchPair a, ::zpp_nape::geom::ZPP_MarchPair b){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_911_combUD_virtual)
HXLINE( 912)		 ::zpp_nape::geom::ZPP_GeomVert ad;
HXDLIN( 912)		bool ad1;
HXDLIN( 912)		if (hx::IsNotNull( a->p2 )) {
HXLINE( 912)			ad1 = (a->key2 == 56);
            		}
            		else {
HXLINE( 912)			ad1 = false;
            		}
HXDLIN( 912)		if (ad1) {
HXLINE( 912)			ad = a->p2;
            		}
            		else {
HXLINE( 912)			ad = a->p1;
            		}
HXLINE( 913)		 ::zpp_nape::geom::ZPP_GeomVert bu;
HXDLIN( 913)		bool bu1;
HXDLIN( 913)		if (hx::IsNotNull( b->p2 )) {
HXLINE( 913)			bu1 = (b->key2 == 14);
            		}
            		else {
HXLINE( 913)			bu1 = false;
            		}
HXDLIN( 913)		if (bu1) {
HXLINE( 913)			bu = b->p2;
            		}
            		else {
HXLINE( 913)			bu = b->p1;
            		}
HXLINE( 914)		 ::zpp_nape::geom::ZPP_GeomVert ap = a->pd;
HXLINE( 915)		 ::zpp_nape::geom::ZPP_GeomVert bp = bu;
HXLINE( 916)		 ::zpp_nape::geom::ZPP_GeomVert ap2 = ap->prev;
HXLINE( 917)		 ::zpp_nape::geom::ZPP_GeomVert bp2 = bp->next;
HXLINE( 918)		ap->forced = (bp->forced = (ap2->forced = (bp2->forced = true)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_MarchingSquares_obj,combUD_virtual,(void))

bool ZPP_MarchingSquares_obj::combLeft(int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_922_combLeft)
HXLINE( 923)		int flag = ((key & 1) | ((key & 192) >> 5));
HXLINE( 924)		int cnt = 0;
HXDLIN( 924)		if (((flag & 1) != 0)) {
HXLINE( 924)			cnt = (cnt + 1);
            		}
HXDLIN( 924)		if (((flag & 2) != 0)) {
HXLINE( 924)			cnt = (cnt + 1);
            		}
HXDLIN( 924)		if (((flag & 4) != 0)) {
HXLINE( 924)			cnt = (cnt + 1);
            		}
HXDLIN( 924)		return (cnt >= 2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_MarchingSquares_obj,combLeft,return )

bool ZPP_MarchingSquares_obj::combRight(int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_928_combRight)
HXLINE( 929)		int flag = ((key & 28) >> 2);
HXLINE( 930)		int cnt = 0;
HXDLIN( 930)		if (((flag & 1) != 0)) {
HXLINE( 930)			cnt = (cnt + 1);
            		}
HXDLIN( 930)		if (((flag & 2) != 0)) {
HXLINE( 930)			cnt = (cnt + 1);
            		}
HXDLIN( 930)		if (((flag & 4) != 0)) {
HXLINE( 930)			cnt = (cnt + 1);
            		}
HXDLIN( 930)		return (cnt >= 2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_MarchingSquares_obj,combRight,return )

bool ZPP_MarchingSquares_obj::combUp(int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_934_combUp)
HXLINE( 935)		int flag = (key & 7);
HXLINE( 936)		int cnt = 0;
HXDLIN( 936)		if (((flag & 1) != 0)) {
HXLINE( 936)			cnt = (cnt + 1);
            		}
HXDLIN( 936)		if (((flag & 2) != 0)) {
HXLINE( 936)			cnt = (cnt + 1);
            		}
HXDLIN( 936)		if (((flag & 4) != 0)) {
HXLINE( 936)			cnt = (cnt + 1);
            		}
HXDLIN( 936)		return (cnt >= 2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_MarchingSquares_obj,combUp,return )

bool ZPP_MarchingSquares_obj::combDown(int key){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_940_combDown)
HXLINE( 941)		int flag = ((key & 112) >> 4);
HXLINE( 942)		int cnt = 0;
HXDLIN( 942)		if (((flag & 1) != 0)) {
HXLINE( 942)			cnt = (cnt + 1);
            		}
HXDLIN( 942)		if (((flag & 2) != 0)) {
HXLINE( 942)			cnt = (cnt + 1);
            		}
HXDLIN( 942)		if (((flag & 4) != 0)) {
HXLINE( 942)			cnt = (cnt + 1);
            		}
HXDLIN( 942)		return (cnt >= 2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_MarchingSquares_obj,combDown,return )

bool ZPP_MarchingSquares_obj::comb(int flag){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_946_comb)
HXLINE( 947)		int cnt = 0;
HXLINE( 948)		if (((flag & 1) != 0)) {
HXLINE( 948)			cnt = (cnt + 1);
            		}
HXLINE( 949)		if (((flag & 2) != 0)) {
HXLINE( 949)			cnt = (cnt + 1);
            		}
HXLINE( 950)		if (((flag & 4) != 0)) {
HXLINE( 950)			cnt = (cnt + 1);
            		}
HXLINE( 951)		return (cnt >= 2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_MarchingSquares_obj,comb,return )

 ::zpp_nape::geom::ZPP_MarchPair ZPP_MarchingSquares_obj::marchSquare( ::Dynamic iso, ::zpp_nape::util::ZNPArray2_Float isos, ::zpp_nape::util::ZNPArray2_ZPP_GeomVert ints,Float x0,Float y0,Float x1,Float y1,int xn,int yn,bool fstx,bool fsty,bool sndx,bool sndy,int quality){
            	HX_GC_STACKFRAME(&_hx_pos_d9331f34ff3f6620_954_marchSquare)
HXLINE( 955)		int key = 0;
HXLINE( 956)		Float v0 = isos->list->__get(((yn * isos->width) + xn));
HXLINE( 957)		if ((v0 < 0)) {
HXLINE( 957)			key = (key | 8);
            		}
HXLINE( 958)		Float v1 = isos->list->__get(((yn * isos->width) + (xn + 1)));
HXLINE( 959)		if ((v1 < 0)) {
HXLINE( 959)			key = (key | 4);
            		}
HXLINE( 960)		Float v2 = isos->list->__get((((yn + 1) * isos->width) + (xn + 1)));
HXLINE( 961)		if ((v2 < 0)) {
HXLINE( 961)			key = (key | 2);
            		}
HXLINE( 962)		Float v3 = isos->list->__get((((yn + 1) * isos->width) + xn));
HXLINE( 963)		if ((v3 < 0)) {
HXLINE( 963)			key = (key | 1);
            		}
HXLINE( 964)		if ((key == 0)) {
HXLINE( 964)			return null();
            		}
            		else {
HXLINE( 966)			 ::zpp_nape::geom::ZPP_MarchPair ret;
HXLINE( 968)			if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool )) {
HXLINE( 969)				ret =  ::zpp_nape::geom::ZPP_MarchPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 975)				ret = ::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool;
HXLINE( 976)				::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool = ret->next;
HXLINE( 977)				ret->next = null();
            			}
HXLINE( 984)			bool _hx_tmp;
HXDLIN( 984)			if ((key != 10)) {
HXLINE( 984)				_hx_tmp = (key != 5);
            			}
            			else {
HXLINE( 984)				_hx_tmp = false;
            			}
HXDLIN( 984)			if (_hx_tmp) {
HXLINE( 985)				int val = ::zpp_nape::geom::ZPP_MarchingSquares_obj::look_march->__get(key);
HXLINE( 986)				{
HXLINE( 987)					ret->okey1 = val;
HXLINE( 988)					{
HXLINE( 988)						int _g = 0;
HXDLIN( 988)						while((_g < 8)){
HXLINE( 988)							_g = (_g + 1);
HXDLIN( 988)							int i = (_g - 1);
HXLINE( 989)							if (((val & (1 << i)) != 0)) {
HXLINE( 990)								 ::zpp_nape::geom::ZPP_GeomVert p = null();
HXLINE( 991)								if ((i == 0)) {
HXLINE( 992)									 ::zpp_nape::geom::ZPP_GeomVert ret1;
HXDLIN( 992)									{
HXLINE( 992)										if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 992)											ret1 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 992)											ret1 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 992)											::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret1->next;
HXDLIN( 992)											ret1->next = null();
            										}
HXDLIN( 992)										ret1->forced = false;
            									}
HXDLIN( 992)									{
HXLINE( 992)										ret1->x = x0;
HXDLIN( 992)										ret1->y = y0;
            									}
HXDLIN( 992)									p = ret1;
HXLINE( 993)									bool _hx_tmp1;
HXDLIN( 993)									if (!(fstx)) {
HXLINE( 993)										_hx_tmp1 = fsty;
            									}
            									else {
HXLINE( 993)										_hx_tmp1 = true;
            									}
HXDLIN( 993)									if (_hx_tmp1) {
HXLINE( 993)										p->forced = true;
            									}
            								}
            								else {
HXLINE( 995)									if ((i == 2)) {
HXLINE( 996)										 ::zpp_nape::geom::ZPP_GeomVert ret2;
HXDLIN( 996)										{
HXLINE( 996)											if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 996)												ret2 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 996)												ret2 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 996)												::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret2->next;
HXDLIN( 996)												ret2->next = null();
            											}
HXDLIN( 996)											ret2->forced = false;
            										}
HXDLIN( 996)										{
HXLINE( 996)											ret2->x = x1;
HXDLIN( 996)											ret2->y = y0;
            										}
HXDLIN( 996)										p = ret2;
HXLINE( 997)										bool _hx_tmp2;
HXDLIN( 997)										if (!(sndx)) {
HXLINE( 997)											_hx_tmp2 = fsty;
            										}
            										else {
HXLINE( 997)											_hx_tmp2 = true;
            										}
HXDLIN( 997)										if (_hx_tmp2) {
HXLINE( 997)											p->forced = true;
            										}
            									}
            									else {
HXLINE( 999)										if ((i == 4)) {
HXLINE(1000)											 ::zpp_nape::geom::ZPP_GeomVert ret3;
HXDLIN(1000)											{
HXLINE(1000)												if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1000)													ret3 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1000)													ret3 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1000)													::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret3->next;
HXDLIN(1000)													ret3->next = null();
            												}
HXDLIN(1000)												ret3->forced = false;
            											}
HXDLIN(1000)											{
HXLINE(1000)												ret3->x = x1;
HXDLIN(1000)												ret3->y = y1;
            											}
HXDLIN(1000)											p = ret3;
HXLINE(1001)											bool _hx_tmp3;
HXDLIN(1001)											if (!(sndx)) {
HXLINE(1001)												_hx_tmp3 = sndy;
            											}
            											else {
HXLINE(1001)												_hx_tmp3 = true;
            											}
HXDLIN(1001)											if (_hx_tmp3) {
HXLINE(1001)												p->forced = true;
            											}
            										}
            										else {
HXLINE(1003)											if ((i == 6)) {
HXLINE(1004)												 ::zpp_nape::geom::ZPP_GeomVert ret4;
HXDLIN(1004)												{
HXLINE(1004)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1004)														ret4 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1004)														ret4 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1004)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret4->next;
HXDLIN(1004)														ret4->next = null();
            													}
HXDLIN(1004)													ret4->forced = false;
            												}
HXDLIN(1004)												{
HXLINE(1004)													ret4->x = x0;
HXDLIN(1004)													ret4->y = y1;
            												}
HXDLIN(1004)												p = ret4;
HXLINE(1005)												bool _hx_tmp4;
HXDLIN(1005)												if (!(fstx)) {
HXLINE(1005)													_hx_tmp4 = sndy;
            												}
            												else {
HXLINE(1005)													_hx_tmp4 = true;
            												}
HXDLIN(1005)												if (_hx_tmp4) {
HXLINE(1005)													p->forced = true;
            												}
            											}
            											else {
HXLINE(1007)												if ((i == 1)) {
HXLINE(1008)													p = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1009)													if (hx::IsNull( p )) {
HXLINE(1010)														Float x = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1010)														 ::zpp_nape::geom::ZPP_GeomVert ret5;
HXDLIN(1010)														{
HXLINE(1010)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1010)																ret5 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1010)																ret5 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1010)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret5->next;
HXDLIN(1010)																ret5->next = null();
            															}
HXDLIN(1010)															ret5->forced = false;
            														}
HXDLIN(1010)														{
HXLINE(1010)															ret5->x = x;
HXDLIN(1010)															ret5->y = y0;
            														}
HXDLIN(1010)														p = ret5;
HXLINE(1011)														ints->list[(((yn << 1) * ints->width) + xn)] = p;
            													}
            													else {
HXLINE(1013)														Float x2 = p->x;
HXDLIN(1013)														Float y = p->y;
HXDLIN(1013)														 ::zpp_nape::geom::ZPP_GeomVert ret6;
HXDLIN(1013)														{
HXLINE(1013)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1013)																ret6 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1013)																ret6 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1013)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret6->next;
HXDLIN(1013)																ret6->next = null();
            															}
HXDLIN(1013)															ret6->forced = false;
            														}
HXDLIN(1013)														{
HXLINE(1013)															ret6->x = x2;
HXDLIN(1013)															ret6->y = y;
            														}
HXDLIN(1013)														p = ret6;
            													}
HXLINE(1014)													if (fsty) {
HXLINE(1014)														p->forced = true;
            													}
HXLINE(1015)													bool _hx_tmp5;
HXDLIN(1015)													if ((p->x != x0)) {
HXLINE(1015)														_hx_tmp5 = (p->x == x1);
            													}
            													else {
HXLINE(1015)														_hx_tmp5 = true;
            													}
HXDLIN(1015)													if (_hx_tmp5) {
HXLINE(1016)														bool _hx_tmp6;
HXDLIN(1016)														bool _hx_tmp7;
HXDLIN(1016)														if ((p->x == x0)) {
HXLINE(1016)															_hx_tmp7 = ((val & 1) != 0);
            														}
            														else {
HXLINE(1016)															_hx_tmp7 = false;
            														}
HXDLIN(1016)														if (!(_hx_tmp7)) {
HXLINE(1016)															if ((p->x == x1)) {
HXLINE(1016)																_hx_tmp6 = ((val & 4) != 0);
            															}
            															else {
HXLINE(1016)																_hx_tmp6 = false;
            															}
            														}
            														else {
HXLINE(1016)															_hx_tmp6 = true;
            														}
HXDLIN(1016)														if (_hx_tmp6) {
HXLINE(1016)															val = (val ^ 2);
            														}
            													}
            												}
            												else {
HXLINE(1019)													if ((i == 5)) {
HXLINE(1020)														p = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1021)														if (hx::IsNull( p )) {
HXLINE(1022)															Float x3 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1022)															 ::zpp_nape::geom::ZPP_GeomVert ret7;
HXDLIN(1022)															{
HXLINE(1022)																if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1022)																	ret7 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(1022)																	ret7 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1022)																	::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret7->next;
HXDLIN(1022)																	ret7->next = null();
            																}
HXDLIN(1022)																ret7->forced = false;
            															}
HXDLIN(1022)															{
HXLINE(1022)																ret7->x = x3;
HXDLIN(1022)																ret7->y = y1;
            															}
HXDLIN(1022)															p = ret7;
HXLINE(1023)															ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p;
            														}
            														else {
HXLINE(1025)															Float x4 = p->x;
HXDLIN(1025)															Float y2 = p->y;
HXDLIN(1025)															 ::zpp_nape::geom::ZPP_GeomVert ret8;
HXDLIN(1025)															{
HXLINE(1025)																if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1025)																	ret8 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(1025)																	ret8 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1025)																	::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret8->next;
HXDLIN(1025)																	ret8->next = null();
            																}
HXDLIN(1025)																ret8->forced = false;
            															}
HXDLIN(1025)															{
HXLINE(1025)																ret8->x = x4;
HXDLIN(1025)																ret8->y = y2;
            															}
HXDLIN(1025)															p = ret8;
            														}
HXLINE(1026)														if (sndy) {
HXLINE(1026)															p->forced = true;
            														}
HXLINE(1027)														bool _hx_tmp8;
HXDLIN(1027)														if ((p->x != x0)) {
HXLINE(1027)															_hx_tmp8 = (p->x == x1);
            														}
            														else {
HXLINE(1027)															_hx_tmp8 = true;
            														}
HXDLIN(1027)														if (_hx_tmp8) {
HXLINE(1028)															bool _hx_tmp9;
HXDLIN(1028)															bool _hx_tmp10;
HXDLIN(1028)															if ((p->x == x0)) {
HXLINE(1028)																_hx_tmp10 = ((val & 64) != 0);
            															}
            															else {
HXLINE(1028)																_hx_tmp10 = false;
            															}
HXDLIN(1028)															if (!(_hx_tmp10)) {
HXLINE(1028)																if ((p->x == x1)) {
HXLINE(1028)																	_hx_tmp9 = ((val & 16) != 0);
            																}
            																else {
HXLINE(1028)																	_hx_tmp9 = false;
            																}
            															}
            															else {
HXLINE(1028)																_hx_tmp9 = true;
            															}
HXDLIN(1028)															if (_hx_tmp9) {
HXLINE(1028)																val = (val ^ 32);
            															}
            														}
            													}
            													else {
HXLINE(1031)														if ((i == 3)) {
HXLINE(1032)															p = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1033)															if (hx::IsNull( p )) {
HXLINE(1034)																Float y3 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1034)																 ::zpp_nape::geom::ZPP_GeomVert ret9;
HXDLIN(1034)																{
HXLINE(1034)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1034)																		ret9 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1034)																		ret9 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1034)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret9->next;
HXDLIN(1034)																		ret9->next = null();
            																	}
HXDLIN(1034)																	ret9->forced = false;
            																}
HXDLIN(1034)																{
HXLINE(1034)																	ret9->x = x1;
HXDLIN(1034)																	ret9->y = y3;
            																}
HXDLIN(1034)																p = ret9;
HXLINE(1035)																ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p;
            															}
            															else {
HXLINE(1037)																Float x5 = p->x;
HXDLIN(1037)																Float y4 = p->y;
HXDLIN(1037)																 ::zpp_nape::geom::ZPP_GeomVert ret10;
HXDLIN(1037)																{
HXLINE(1037)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1037)																		ret10 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1037)																		ret10 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1037)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret10->next;
HXDLIN(1037)																		ret10->next = null();
            																	}
HXDLIN(1037)																	ret10->forced = false;
            																}
HXDLIN(1037)																{
HXLINE(1037)																	ret10->x = x5;
HXDLIN(1037)																	ret10->y = y4;
            																}
HXDLIN(1037)																p = ret10;
            															}
HXLINE(1038)															if (sndx) {
HXLINE(1038)																p->forced = true;
            															}
HXLINE(1039)															bool _hx_tmp11;
HXDLIN(1039)															if ((p->y != y0)) {
HXLINE(1039)																_hx_tmp11 = (p->y == y1);
            															}
            															else {
HXLINE(1039)																_hx_tmp11 = true;
            															}
HXDLIN(1039)															if (_hx_tmp11) {
HXLINE(1040)																bool _hx_tmp12;
HXDLIN(1040)																bool _hx_tmp13;
HXDLIN(1040)																if ((p->y == y0)) {
HXLINE(1040)																	_hx_tmp13 = ((val & 4) != 0);
            																}
            																else {
HXLINE(1040)																	_hx_tmp13 = false;
            																}
HXDLIN(1040)																if (!(_hx_tmp13)) {
HXLINE(1040)																	if ((p->y == y1)) {
HXLINE(1040)																		_hx_tmp12 = ((val & 16) != 0);
            																	}
            																	else {
HXLINE(1040)																		_hx_tmp12 = false;
            																	}
            																}
            																else {
HXLINE(1040)																	_hx_tmp12 = true;
            																}
HXDLIN(1040)																if (_hx_tmp12) {
HXLINE(1040)																	val = (val ^ 8);
            																}
            															}
            														}
            														else {
HXLINE(1044)															p = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1045)															if (hx::IsNull( p )) {
HXLINE(1046)																Float y5 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1046)																 ::zpp_nape::geom::ZPP_GeomVert ret11;
HXDLIN(1046)																{
HXLINE(1046)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1046)																		ret11 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1046)																		ret11 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1046)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret11->next;
HXDLIN(1046)																		ret11->next = null();
            																	}
HXDLIN(1046)																	ret11->forced = false;
            																}
HXDLIN(1046)																{
HXLINE(1046)																	ret11->x = x0;
HXDLIN(1046)																	ret11->y = y5;
            																}
HXDLIN(1046)																p = ret11;
HXLINE(1047)																ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p;
            															}
            															else {
HXLINE(1049)																Float x6 = p->x;
HXDLIN(1049)																Float y6 = p->y;
HXDLIN(1049)																 ::zpp_nape::geom::ZPP_GeomVert ret12;
HXDLIN(1049)																{
HXLINE(1049)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1049)																		ret12 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1049)																		ret12 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1049)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret12->next;
HXDLIN(1049)																		ret12->next = null();
            																	}
HXDLIN(1049)																	ret12->forced = false;
            																}
HXDLIN(1049)																{
HXLINE(1049)																	ret12->x = x6;
HXDLIN(1049)																	ret12->y = y6;
            																}
HXDLIN(1049)																p = ret12;
            															}
HXLINE(1050)															if (fstx) {
HXLINE(1050)																p->forced = true;
            															}
HXLINE(1051)															bool _hx_tmp14;
HXDLIN(1051)															if ((p->y != y0)) {
HXLINE(1051)																_hx_tmp14 = (p->y == y1);
            															}
            															else {
HXLINE(1051)																_hx_tmp14 = true;
            															}
HXDLIN(1051)															if (_hx_tmp14) {
HXLINE(1052)																bool _hx_tmp15;
HXDLIN(1052)																bool _hx_tmp16;
HXDLIN(1052)																if ((p->y == y0)) {
HXLINE(1052)																	_hx_tmp16 = ((val & 1) != 0);
            																}
            																else {
HXLINE(1052)																	_hx_tmp16 = false;
            																}
HXDLIN(1052)																if (!(_hx_tmp16)) {
HXLINE(1052)																	if ((p->y == y1)) {
HXLINE(1052)																		_hx_tmp15 = ((val & 64) != 0);
            																	}
            																	else {
HXLINE(1052)																		_hx_tmp15 = false;
            																	}
            																}
            																else {
HXLINE(1052)																	_hx_tmp15 = true;
            																}
HXDLIN(1052)																if (_hx_tmp15) {
HXLINE(1052)																	val = (val ^ 128);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXLINE(1056)								 ::zpp_nape::geom::ZPP_GeomVert obj = p;
HXLINE(1057)								if (hx::IsNull( ret->p1 )) {
HXLINE(1057)									ret->p1 = (obj->prev = (obj->next = obj));
            								}
            								else {
HXLINE(1059)									obj->prev = ret->p1;
HXLINE(1060)									obj->next = ret->p1->next;
HXLINE(1061)									ret->p1->next->prev = obj;
HXLINE(1062)									ret->p1->next = obj;
            								}
HXLINE(1055)								ret->p1 = obj;
            							}
            						}
            					}
HXLINE(1068)					ret->p1 = ret->p1->next;
HXLINE(1069)					ret->key1 = val;
HXLINE(1070)					bool _hx_tmp17;
HXDLIN(1070)					bool _hx_tmp18;
HXDLIN(1070)					bool _hx_tmp19;
HXDLIN(1070)					bool _hx_tmp20;
HXDLIN(1070)					bool _hx_tmp21;
HXDLIN(1070)					bool _hx_tmp22;
HXDLIN(1070)					bool _hx_tmp23;
HXDLIN(1070)					bool _hx_tmp24;
HXDLIN(1070)					bool _hx_tmp25;
HXDLIN(1070)					bool _hx_tmp26;
HXDLIN(1070)					bool _hx_tmp27;
HXDLIN(1070)					bool _hx_tmp28;
HXDLIN(1070)					bool _hx_tmp29;
HXDLIN(1070)					bool _hx_tmp30;
HXDLIN(1070)					bool _hx_tmp31;
HXDLIN(1070)					bool _hx_tmp32;
HXDLIN(1070)					bool _hx_tmp33;
HXDLIN(1070)					if ((val != 1)) {
HXLINE(1070)						_hx_tmp33 = (val == 4);
            					}
            					else {
HXLINE(1070)						_hx_tmp33 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp33)) {
HXLINE(1070)						_hx_tmp32 = (val == 16);
            					}
            					else {
HXLINE(1070)						_hx_tmp32 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp32)) {
HXLINE(1070)						_hx_tmp31 = (val == 64);
            					}
            					else {
HXLINE(1070)						_hx_tmp31 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp31)) {
HXLINE(1070)						_hx_tmp30 = (val == 3);
            					}
            					else {
HXLINE(1070)						_hx_tmp30 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp30)) {
HXLINE(1070)						_hx_tmp29 = (val == 12);
            					}
            					else {
HXLINE(1070)						_hx_tmp29 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp29)) {
HXLINE(1070)						_hx_tmp28 = (val == 48);
            					}
            					else {
HXLINE(1070)						_hx_tmp28 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp28)) {
HXLINE(1070)						_hx_tmp27 = (val == 192);
            					}
            					else {
HXLINE(1070)						_hx_tmp27 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp27)) {
HXLINE(1070)						_hx_tmp26 = (val == 129);
            					}
            					else {
HXLINE(1070)						_hx_tmp26 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp26)) {
HXLINE(1070)						_hx_tmp25 = (val == 6);
            					}
            					else {
HXLINE(1070)						_hx_tmp25 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp25)) {
HXLINE(1070)						_hx_tmp24 = (val == 24);
            					}
            					else {
HXLINE(1070)						_hx_tmp24 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp24)) {
HXLINE(1070)						_hx_tmp23 = (val == 96);
            					}
            					else {
HXLINE(1070)						_hx_tmp23 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp23)) {
HXLINE(1070)						_hx_tmp22 = (val == 5);
            					}
            					else {
HXLINE(1070)						_hx_tmp22 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp22)) {
HXLINE(1070)						_hx_tmp21 = (val == 20);
            					}
            					else {
HXLINE(1070)						_hx_tmp21 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp21)) {
HXLINE(1070)						_hx_tmp20 = (val == 80);
            					}
            					else {
HXLINE(1070)						_hx_tmp20 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp20)) {
HXLINE(1070)						_hx_tmp19 = (val == 65);
            					}
            					else {
HXLINE(1070)						_hx_tmp19 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp19)) {
HXLINE(1070)						_hx_tmp18 = (val == 17);
            					}
            					else {
HXLINE(1070)						_hx_tmp18 = true;
            					}
HXDLIN(1070)					if (!(_hx_tmp18)) {
HXLINE(1070)						_hx_tmp17 = (val == 68);
            					}
            					else {
HXLINE(1070)						_hx_tmp17 = true;
            					}
HXDLIN(1070)					if (_hx_tmp17) {
HXLINE(1071)						val = 0;
HXLINE(1072)						ret->key1 = 0;
HXLINE(1073)						ret->p1 = null();
            					}
            				}
HXLINE(1076)				if ((val == 0)) {
HXLINE(1076)					ret = null();
            				}
            				else {
HXLINE(1078)					ret->pr = ret->p1;
HXLINE(1079)					ret->okeyr = ret->okey1;
HXLINE(1080)					ret->keyr = ret->key1;
            				}
            			}
            			else {
HXLINE(1084)				bool mid = hx::IsLess( iso((((Float)0.5) * (x0 + x1)),(((Float)0.5) * (y0 + y1))),0 );
HXLINE(1085)				if ((key == 10)) {
HXLINE(1086)					if (mid) {
HXLINE(1087)						int val1 = 187;
HXLINE(1088)						{
HXLINE(1089)							ret->okey1 = val1;
HXLINE(1090)							{
HXLINE(1090)								int _g1 = 0;
HXDLIN(1090)								while((_g1 < 8)){
HXLINE(1090)									_g1 = (_g1 + 1);
HXDLIN(1090)									int i1 = (_g1 - 1);
HXLINE(1091)									if (((val1 & (1 << i1)) != 0)) {
HXLINE(1092)										 ::zpp_nape::geom::ZPP_GeomVert p1 = null();
HXLINE(1093)										if ((i1 == 0)) {
HXLINE(1094)											 ::zpp_nape::geom::ZPP_GeomVert ret13;
HXDLIN(1094)											{
HXLINE(1094)												if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1094)													ret13 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1094)													ret13 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1094)													::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret13->next;
HXDLIN(1094)													ret13->next = null();
            												}
HXDLIN(1094)												ret13->forced = false;
            											}
HXDLIN(1094)											{
HXLINE(1094)												ret13->x = x0;
HXDLIN(1094)												ret13->y = y0;
            											}
HXDLIN(1094)											p1 = ret13;
HXLINE(1095)											bool _hx_tmp34;
HXDLIN(1095)											if (!(fstx)) {
HXLINE(1095)												_hx_tmp34 = fsty;
            											}
            											else {
HXLINE(1095)												_hx_tmp34 = true;
            											}
HXDLIN(1095)											if (_hx_tmp34) {
HXLINE(1095)												p1->forced = true;
            											}
            										}
            										else {
HXLINE(1097)											if ((i1 == 2)) {
HXLINE(1098)												 ::zpp_nape::geom::ZPP_GeomVert ret14;
HXDLIN(1098)												{
HXLINE(1098)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1098)														ret14 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1098)														ret14 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1098)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret14->next;
HXDLIN(1098)														ret14->next = null();
            													}
HXDLIN(1098)													ret14->forced = false;
            												}
HXDLIN(1098)												{
HXLINE(1098)													ret14->x = x1;
HXDLIN(1098)													ret14->y = y0;
            												}
HXDLIN(1098)												p1 = ret14;
HXLINE(1099)												bool _hx_tmp35;
HXDLIN(1099)												if (!(sndx)) {
HXLINE(1099)													_hx_tmp35 = fsty;
            												}
            												else {
HXLINE(1099)													_hx_tmp35 = true;
            												}
HXDLIN(1099)												if (_hx_tmp35) {
HXLINE(1099)													p1->forced = true;
            												}
            											}
            											else {
HXLINE(1101)												if ((i1 == 4)) {
HXLINE(1102)													 ::zpp_nape::geom::ZPP_GeomVert ret15;
HXDLIN(1102)													{
HXLINE(1102)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1102)															ret15 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1102)															ret15 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1102)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret15->next;
HXDLIN(1102)															ret15->next = null();
            														}
HXDLIN(1102)														ret15->forced = false;
            													}
HXDLIN(1102)													{
HXLINE(1102)														ret15->x = x1;
HXDLIN(1102)														ret15->y = y1;
            													}
HXDLIN(1102)													p1 = ret15;
HXLINE(1103)													bool _hx_tmp36;
HXDLIN(1103)													if (!(sndx)) {
HXLINE(1103)														_hx_tmp36 = sndy;
            													}
            													else {
HXLINE(1103)														_hx_tmp36 = true;
            													}
HXDLIN(1103)													if (_hx_tmp36) {
HXLINE(1103)														p1->forced = true;
            													}
            												}
            												else {
HXLINE(1105)													if ((i1 == 6)) {
HXLINE(1106)														 ::zpp_nape::geom::ZPP_GeomVert ret16;
HXDLIN(1106)														{
HXLINE(1106)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1106)																ret16 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1106)																ret16 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1106)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret16->next;
HXDLIN(1106)																ret16->next = null();
            															}
HXDLIN(1106)															ret16->forced = false;
            														}
HXDLIN(1106)														{
HXLINE(1106)															ret16->x = x0;
HXDLIN(1106)															ret16->y = y1;
            														}
HXDLIN(1106)														p1 = ret16;
HXLINE(1107)														bool _hx_tmp37;
HXDLIN(1107)														if (!(fstx)) {
HXLINE(1107)															_hx_tmp37 = sndy;
            														}
            														else {
HXLINE(1107)															_hx_tmp37 = true;
            														}
HXDLIN(1107)														if (_hx_tmp37) {
HXLINE(1107)															p1->forced = true;
            														}
            													}
            													else {
HXLINE(1109)														if ((i1 == 1)) {
HXLINE(1110)															p1 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1111)															if (hx::IsNull( p1 )) {
HXLINE(1112)																Float x7 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1112)																 ::zpp_nape::geom::ZPP_GeomVert ret17;
HXDLIN(1112)																{
HXLINE(1112)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1112)																		ret17 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1112)																		ret17 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1112)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret17->next;
HXDLIN(1112)																		ret17->next = null();
            																	}
HXDLIN(1112)																	ret17->forced = false;
            																}
HXDLIN(1112)																{
HXLINE(1112)																	ret17->x = x7;
HXDLIN(1112)																	ret17->y = y0;
            																}
HXDLIN(1112)																p1 = ret17;
HXLINE(1113)																ints->list[(((yn << 1) * ints->width) + xn)] = p1;
            															}
            															else {
HXLINE(1115)																Float x8 = p1->x;
HXDLIN(1115)																Float y7 = p1->y;
HXDLIN(1115)																 ::zpp_nape::geom::ZPP_GeomVert ret18;
HXDLIN(1115)																{
HXLINE(1115)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1115)																		ret18 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1115)																		ret18 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1115)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret18->next;
HXDLIN(1115)																		ret18->next = null();
            																	}
HXDLIN(1115)																	ret18->forced = false;
            																}
HXDLIN(1115)																{
HXLINE(1115)																	ret18->x = x8;
HXDLIN(1115)																	ret18->y = y7;
            																}
HXDLIN(1115)																p1 = ret18;
            															}
HXLINE(1116)															if (fsty) {
HXLINE(1116)																p1->forced = true;
            															}
HXLINE(1117)															bool _hx_tmp38;
HXDLIN(1117)															if ((p1->x != x0)) {
HXLINE(1117)																_hx_tmp38 = (p1->x == x1);
            															}
            															else {
HXLINE(1117)																_hx_tmp38 = true;
            															}
HXDLIN(1117)															if (_hx_tmp38) {
HXLINE(1118)																bool _hx_tmp39;
HXDLIN(1118)																bool _hx_tmp40;
HXDLIN(1118)																if ((p1->x == x0)) {
HXLINE(1118)																	_hx_tmp40 = ((val1 & 1) != 0);
            																}
            																else {
HXLINE(1118)																	_hx_tmp40 = false;
            																}
HXDLIN(1118)																if (!(_hx_tmp40)) {
HXLINE(1118)																	if ((p1->x == x1)) {
HXLINE(1118)																		_hx_tmp39 = ((val1 & 4) != 0);
            																	}
            																	else {
HXLINE(1118)																		_hx_tmp39 = false;
            																	}
            																}
            																else {
HXLINE(1118)																	_hx_tmp39 = true;
            																}
HXDLIN(1118)																if (_hx_tmp39) {
HXLINE(1118)																	val1 = (val1 ^ 2);
            																}
            															}
            														}
            														else {
HXLINE(1121)															if ((i1 == 5)) {
HXLINE(1122)																p1 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1123)																if (hx::IsNull( p1 )) {
HXLINE(1124)																	Float x9 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1124)																	 ::zpp_nape::geom::ZPP_GeomVert ret19;
HXDLIN(1124)																	{
HXLINE(1124)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1124)																			ret19 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1124)																			ret19 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1124)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret19->next;
HXDLIN(1124)																			ret19->next = null();
            																		}
HXDLIN(1124)																		ret19->forced = false;
            																	}
HXDLIN(1124)																	{
HXLINE(1124)																		ret19->x = x9;
HXDLIN(1124)																		ret19->y = y1;
            																	}
HXDLIN(1124)																	p1 = ret19;
HXLINE(1125)																	ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p1;
            																}
            																else {
HXLINE(1127)																	Float x10 = p1->x;
HXDLIN(1127)																	Float y8 = p1->y;
HXDLIN(1127)																	 ::zpp_nape::geom::ZPP_GeomVert ret20;
HXDLIN(1127)																	{
HXLINE(1127)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1127)																			ret20 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1127)																			ret20 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1127)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret20->next;
HXDLIN(1127)																			ret20->next = null();
            																		}
HXDLIN(1127)																		ret20->forced = false;
            																	}
HXDLIN(1127)																	{
HXLINE(1127)																		ret20->x = x10;
HXDLIN(1127)																		ret20->y = y8;
            																	}
HXDLIN(1127)																	p1 = ret20;
            																}
HXLINE(1128)																if (sndy) {
HXLINE(1128)																	p1->forced = true;
            																}
HXLINE(1129)																bool _hx_tmp41;
HXDLIN(1129)																if ((p1->x != x0)) {
HXLINE(1129)																	_hx_tmp41 = (p1->x == x1);
            																}
            																else {
HXLINE(1129)																	_hx_tmp41 = true;
            																}
HXDLIN(1129)																if (_hx_tmp41) {
HXLINE(1130)																	bool _hx_tmp42;
HXDLIN(1130)																	bool _hx_tmp43;
HXDLIN(1130)																	if ((p1->x == x0)) {
HXLINE(1130)																		_hx_tmp43 = ((val1 & 64) != 0);
            																	}
            																	else {
HXLINE(1130)																		_hx_tmp43 = false;
            																	}
HXDLIN(1130)																	if (!(_hx_tmp43)) {
HXLINE(1130)																		if ((p1->x == x1)) {
HXLINE(1130)																			_hx_tmp42 = ((val1 & 16) != 0);
            																		}
            																		else {
HXLINE(1130)																			_hx_tmp42 = false;
            																		}
            																	}
            																	else {
HXLINE(1130)																		_hx_tmp42 = true;
            																	}
HXDLIN(1130)																	if (_hx_tmp42) {
HXLINE(1130)																		val1 = (val1 ^ 32);
            																	}
            																}
            															}
            															else {
HXLINE(1133)																if ((i1 == 3)) {
HXLINE(1134)																	p1 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1135)																	if (hx::IsNull( p1 )) {
HXLINE(1136)																		Float y9 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1136)																		 ::zpp_nape::geom::ZPP_GeomVert ret21;
HXDLIN(1136)																		{
HXLINE(1136)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1136)																				ret21 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1136)																				ret21 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1136)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret21->next;
HXDLIN(1136)																				ret21->next = null();
            																			}
HXDLIN(1136)																			ret21->forced = false;
            																		}
HXDLIN(1136)																		{
HXLINE(1136)																			ret21->x = x1;
HXDLIN(1136)																			ret21->y = y9;
            																		}
HXDLIN(1136)																		p1 = ret21;
HXLINE(1137)																		ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p1;
            																	}
            																	else {
HXLINE(1139)																		Float x11 = p1->x;
HXDLIN(1139)																		Float y10 = p1->y;
HXDLIN(1139)																		 ::zpp_nape::geom::ZPP_GeomVert ret22;
HXDLIN(1139)																		{
HXLINE(1139)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1139)																				ret22 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1139)																				ret22 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1139)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret22->next;
HXDLIN(1139)																				ret22->next = null();
            																			}
HXDLIN(1139)																			ret22->forced = false;
            																		}
HXDLIN(1139)																		{
HXLINE(1139)																			ret22->x = x11;
HXDLIN(1139)																			ret22->y = y10;
            																		}
HXDLIN(1139)																		p1 = ret22;
            																	}
HXLINE(1140)																	if (sndx) {
HXLINE(1140)																		p1->forced = true;
            																	}
HXLINE(1141)																	bool _hx_tmp44;
HXDLIN(1141)																	if ((p1->y != y0)) {
HXLINE(1141)																		_hx_tmp44 = (p1->y == y1);
            																	}
            																	else {
HXLINE(1141)																		_hx_tmp44 = true;
            																	}
HXDLIN(1141)																	if (_hx_tmp44) {
HXLINE(1142)																		bool _hx_tmp45;
HXDLIN(1142)																		bool _hx_tmp46;
HXDLIN(1142)																		if ((p1->y == y0)) {
HXLINE(1142)																			_hx_tmp46 = ((val1 & 4) != 0);
            																		}
            																		else {
HXLINE(1142)																			_hx_tmp46 = false;
            																		}
HXDLIN(1142)																		if (!(_hx_tmp46)) {
HXLINE(1142)																			if ((p1->y == y1)) {
HXLINE(1142)																				_hx_tmp45 = ((val1 & 16) != 0);
            																			}
            																			else {
HXLINE(1142)																				_hx_tmp45 = false;
            																			}
            																		}
            																		else {
HXLINE(1142)																			_hx_tmp45 = true;
            																		}
HXDLIN(1142)																		if (_hx_tmp45) {
HXLINE(1142)																			val1 = (val1 ^ 8);
            																		}
            																	}
            																}
            																else {
HXLINE(1146)																	p1 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1147)																	if (hx::IsNull( p1 )) {
HXLINE(1148)																		Float y11 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1148)																		 ::zpp_nape::geom::ZPP_GeomVert ret23;
HXDLIN(1148)																		{
HXLINE(1148)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1148)																				ret23 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1148)																				ret23 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1148)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret23->next;
HXDLIN(1148)																				ret23->next = null();
            																			}
HXDLIN(1148)																			ret23->forced = false;
            																		}
HXDLIN(1148)																		{
HXLINE(1148)																			ret23->x = x0;
HXDLIN(1148)																			ret23->y = y11;
            																		}
HXDLIN(1148)																		p1 = ret23;
HXLINE(1149)																		ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p1;
            																	}
            																	else {
HXLINE(1151)																		Float x12 = p1->x;
HXDLIN(1151)																		Float y12 = p1->y;
HXDLIN(1151)																		 ::zpp_nape::geom::ZPP_GeomVert ret24;
HXDLIN(1151)																		{
HXLINE(1151)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1151)																				ret24 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1151)																				ret24 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1151)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret24->next;
HXDLIN(1151)																				ret24->next = null();
            																			}
HXDLIN(1151)																			ret24->forced = false;
            																		}
HXDLIN(1151)																		{
HXLINE(1151)																			ret24->x = x12;
HXDLIN(1151)																			ret24->y = y12;
            																		}
HXDLIN(1151)																		p1 = ret24;
            																	}
HXLINE(1152)																	if (fstx) {
HXLINE(1152)																		p1->forced = true;
            																	}
HXLINE(1153)																	bool _hx_tmp47;
HXDLIN(1153)																	if ((p1->y != y0)) {
HXLINE(1153)																		_hx_tmp47 = (p1->y == y1);
            																	}
            																	else {
HXLINE(1153)																		_hx_tmp47 = true;
            																	}
HXDLIN(1153)																	if (_hx_tmp47) {
HXLINE(1154)																		bool _hx_tmp48;
HXDLIN(1154)																		bool _hx_tmp49;
HXDLIN(1154)																		if ((p1->y == y0)) {
HXLINE(1154)																			_hx_tmp49 = ((val1 & 1) != 0);
            																		}
            																		else {
HXLINE(1154)																			_hx_tmp49 = false;
            																		}
HXDLIN(1154)																		if (!(_hx_tmp49)) {
HXLINE(1154)																			if ((p1->y == y1)) {
HXLINE(1154)																				_hx_tmp48 = ((val1 & 64) != 0);
            																			}
            																			else {
HXLINE(1154)																				_hx_tmp48 = false;
            																			}
            																		}
            																		else {
HXLINE(1154)																			_hx_tmp48 = true;
            																		}
HXDLIN(1154)																		if (_hx_tmp48) {
HXLINE(1154)																			val1 = (val1 ^ 128);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXLINE(1158)										 ::zpp_nape::geom::ZPP_GeomVert obj1 = p1;
HXLINE(1159)										if (hx::IsNull( ret->p1 )) {
HXLINE(1159)											ret->p1 = (obj1->prev = (obj1->next = obj1));
            										}
            										else {
HXLINE(1161)											obj1->prev = ret->p1;
HXLINE(1162)											obj1->next = ret->p1->next;
HXLINE(1163)											ret->p1->next->prev = obj1;
HXLINE(1164)											ret->p1->next = obj1;
            										}
HXLINE(1157)										ret->p1 = obj1;
            									}
            								}
            							}
HXLINE(1170)							ret->p1 = ret->p1->next;
HXLINE(1171)							ret->key1 = val1;
HXLINE(1172)							bool _hx_tmp50;
HXDLIN(1172)							bool _hx_tmp51;
HXDLIN(1172)							bool _hx_tmp52;
HXDLIN(1172)							bool _hx_tmp53;
HXDLIN(1172)							bool _hx_tmp54;
HXDLIN(1172)							bool _hx_tmp55;
HXDLIN(1172)							bool _hx_tmp56;
HXDLIN(1172)							bool _hx_tmp57;
HXDLIN(1172)							bool _hx_tmp58;
HXDLIN(1172)							bool _hx_tmp59;
HXDLIN(1172)							bool _hx_tmp60;
HXDLIN(1172)							bool _hx_tmp61;
HXDLIN(1172)							bool _hx_tmp62;
HXDLIN(1172)							bool _hx_tmp63;
HXDLIN(1172)							bool _hx_tmp64;
HXDLIN(1172)							bool _hx_tmp65;
HXDLIN(1172)							bool _hx_tmp66;
HXDLIN(1172)							if ((val1 != 1)) {
HXLINE(1172)								_hx_tmp66 = (val1 == 4);
            							}
            							else {
HXLINE(1172)								_hx_tmp66 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp66)) {
HXLINE(1172)								_hx_tmp65 = (val1 == 16);
            							}
            							else {
HXLINE(1172)								_hx_tmp65 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp65)) {
HXLINE(1172)								_hx_tmp64 = (val1 == 64);
            							}
            							else {
HXLINE(1172)								_hx_tmp64 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp64)) {
HXLINE(1172)								_hx_tmp63 = (val1 == 3);
            							}
            							else {
HXLINE(1172)								_hx_tmp63 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp63)) {
HXLINE(1172)								_hx_tmp62 = (val1 == 12);
            							}
            							else {
HXLINE(1172)								_hx_tmp62 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp62)) {
HXLINE(1172)								_hx_tmp61 = (val1 == 48);
            							}
            							else {
HXLINE(1172)								_hx_tmp61 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp61)) {
HXLINE(1172)								_hx_tmp60 = (val1 == 192);
            							}
            							else {
HXLINE(1172)								_hx_tmp60 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp60)) {
HXLINE(1172)								_hx_tmp59 = (val1 == 129);
            							}
            							else {
HXLINE(1172)								_hx_tmp59 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp59)) {
HXLINE(1172)								_hx_tmp58 = (val1 == 6);
            							}
            							else {
HXLINE(1172)								_hx_tmp58 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp58)) {
HXLINE(1172)								_hx_tmp57 = (val1 == 24);
            							}
            							else {
HXLINE(1172)								_hx_tmp57 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp57)) {
HXLINE(1172)								_hx_tmp56 = (val1 == 96);
            							}
            							else {
HXLINE(1172)								_hx_tmp56 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp56)) {
HXLINE(1172)								_hx_tmp55 = (val1 == 5);
            							}
            							else {
HXLINE(1172)								_hx_tmp55 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp55)) {
HXLINE(1172)								_hx_tmp54 = (val1 == 20);
            							}
            							else {
HXLINE(1172)								_hx_tmp54 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp54)) {
HXLINE(1172)								_hx_tmp53 = (val1 == 80);
            							}
            							else {
HXLINE(1172)								_hx_tmp53 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp53)) {
HXLINE(1172)								_hx_tmp52 = (val1 == 65);
            							}
            							else {
HXLINE(1172)								_hx_tmp52 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp52)) {
HXLINE(1172)								_hx_tmp51 = (val1 == 17);
            							}
            							else {
HXLINE(1172)								_hx_tmp51 = true;
            							}
HXDLIN(1172)							if (!(_hx_tmp51)) {
HXLINE(1172)								_hx_tmp50 = (val1 == 68);
            							}
            							else {
HXLINE(1172)								_hx_tmp50 = true;
            							}
HXDLIN(1172)							if (_hx_tmp50) {
HXLINE(1173)								val1 = 0;
HXLINE(1174)								ret->key1 = 0;
HXLINE(1175)								ret->p1 = null();
            							}
            						}
HXLINE(1178)						if ((val1 == 0)) {
HXLINE(1178)							ret = null();
            						}
            						else {
HXLINE(1180)							ret->pr = ret->p1;
HXLINE(1181)							ret->okeyr = ret->okey1;
HXLINE(1182)							ret->keyr = ret->key1;
            						}
            					}
            					else {
HXLINE(1186)						int val2 = 131;
HXLINE(1187)						{
HXLINE(1188)							ret->okey1 = val2;
HXLINE(1189)							{
HXLINE(1189)								int _g2 = 0;
HXDLIN(1189)								while((_g2 < 8)){
HXLINE(1189)									_g2 = (_g2 + 1);
HXDLIN(1189)									int i2 = (_g2 - 1);
HXLINE(1190)									if (((val2 & (1 << i2)) != 0)) {
HXLINE(1191)										 ::zpp_nape::geom::ZPP_GeomVert p2 = null();
HXLINE(1192)										if ((i2 == 0)) {
HXLINE(1193)											 ::zpp_nape::geom::ZPP_GeomVert ret25;
HXDLIN(1193)											{
HXLINE(1193)												if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1193)													ret25 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1193)													ret25 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1193)													::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret25->next;
HXDLIN(1193)													ret25->next = null();
            												}
HXDLIN(1193)												ret25->forced = false;
            											}
HXDLIN(1193)											{
HXLINE(1193)												ret25->x = x0;
HXDLIN(1193)												ret25->y = y0;
            											}
HXDLIN(1193)											p2 = ret25;
HXLINE(1194)											bool _hx_tmp67;
HXDLIN(1194)											if (!(fstx)) {
HXLINE(1194)												_hx_tmp67 = fsty;
            											}
            											else {
HXLINE(1194)												_hx_tmp67 = true;
            											}
HXDLIN(1194)											if (_hx_tmp67) {
HXLINE(1194)												p2->forced = true;
            											}
            										}
            										else {
HXLINE(1196)											if ((i2 == 2)) {
HXLINE(1197)												 ::zpp_nape::geom::ZPP_GeomVert ret26;
HXDLIN(1197)												{
HXLINE(1197)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1197)														ret26 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1197)														ret26 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1197)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret26->next;
HXDLIN(1197)														ret26->next = null();
            													}
HXDLIN(1197)													ret26->forced = false;
            												}
HXDLIN(1197)												{
HXLINE(1197)													ret26->x = x1;
HXDLIN(1197)													ret26->y = y0;
            												}
HXDLIN(1197)												p2 = ret26;
HXLINE(1198)												bool _hx_tmp68;
HXDLIN(1198)												if (!(sndx)) {
HXLINE(1198)													_hx_tmp68 = fsty;
            												}
            												else {
HXLINE(1198)													_hx_tmp68 = true;
            												}
HXDLIN(1198)												if (_hx_tmp68) {
HXLINE(1198)													p2->forced = true;
            												}
            											}
            											else {
HXLINE(1200)												if ((i2 == 4)) {
HXLINE(1201)													 ::zpp_nape::geom::ZPP_GeomVert ret27;
HXDLIN(1201)													{
HXLINE(1201)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1201)															ret27 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1201)															ret27 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1201)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret27->next;
HXDLIN(1201)															ret27->next = null();
            														}
HXDLIN(1201)														ret27->forced = false;
            													}
HXDLIN(1201)													{
HXLINE(1201)														ret27->x = x1;
HXDLIN(1201)														ret27->y = y1;
            													}
HXDLIN(1201)													p2 = ret27;
HXLINE(1202)													bool _hx_tmp69;
HXDLIN(1202)													if (!(sndx)) {
HXLINE(1202)														_hx_tmp69 = sndy;
            													}
            													else {
HXLINE(1202)														_hx_tmp69 = true;
            													}
HXDLIN(1202)													if (_hx_tmp69) {
HXLINE(1202)														p2->forced = true;
            													}
            												}
            												else {
HXLINE(1204)													if ((i2 == 6)) {
HXLINE(1205)														 ::zpp_nape::geom::ZPP_GeomVert ret28;
HXDLIN(1205)														{
HXLINE(1205)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1205)																ret28 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1205)																ret28 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1205)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret28->next;
HXDLIN(1205)																ret28->next = null();
            															}
HXDLIN(1205)															ret28->forced = false;
            														}
HXDLIN(1205)														{
HXLINE(1205)															ret28->x = x0;
HXDLIN(1205)															ret28->y = y1;
            														}
HXDLIN(1205)														p2 = ret28;
HXLINE(1206)														bool _hx_tmp70;
HXDLIN(1206)														if (!(fstx)) {
HXLINE(1206)															_hx_tmp70 = sndy;
            														}
            														else {
HXLINE(1206)															_hx_tmp70 = true;
            														}
HXDLIN(1206)														if (_hx_tmp70) {
HXLINE(1206)															p2->forced = true;
            														}
            													}
            													else {
HXLINE(1208)														if ((i2 == 1)) {
HXLINE(1209)															p2 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1210)															if (hx::IsNull( p2 )) {
HXLINE(1211)																Float x13 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1211)																 ::zpp_nape::geom::ZPP_GeomVert ret29;
HXDLIN(1211)																{
HXLINE(1211)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1211)																		ret29 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1211)																		ret29 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1211)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret29->next;
HXDLIN(1211)																		ret29->next = null();
            																	}
HXDLIN(1211)																	ret29->forced = false;
            																}
HXDLIN(1211)																{
HXLINE(1211)																	ret29->x = x13;
HXDLIN(1211)																	ret29->y = y0;
            																}
HXDLIN(1211)																p2 = ret29;
HXLINE(1212)																ints->list[(((yn << 1) * ints->width) + xn)] = p2;
            															}
            															else {
HXLINE(1214)																Float x14 = p2->x;
HXDLIN(1214)																Float y13 = p2->y;
HXDLIN(1214)																 ::zpp_nape::geom::ZPP_GeomVert ret30;
HXDLIN(1214)																{
HXLINE(1214)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1214)																		ret30 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1214)																		ret30 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1214)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret30->next;
HXDLIN(1214)																		ret30->next = null();
            																	}
HXDLIN(1214)																	ret30->forced = false;
            																}
HXDLIN(1214)																{
HXLINE(1214)																	ret30->x = x14;
HXDLIN(1214)																	ret30->y = y13;
            																}
HXDLIN(1214)																p2 = ret30;
            															}
HXLINE(1215)															if (fsty) {
HXLINE(1215)																p2->forced = true;
            															}
HXLINE(1216)															bool _hx_tmp71;
HXDLIN(1216)															if ((p2->x != x0)) {
HXLINE(1216)																_hx_tmp71 = (p2->x == x1);
            															}
            															else {
HXLINE(1216)																_hx_tmp71 = true;
            															}
HXDLIN(1216)															if (_hx_tmp71) {
HXLINE(1217)																bool _hx_tmp72;
HXDLIN(1217)																bool _hx_tmp73;
HXDLIN(1217)																if ((p2->x == x0)) {
HXLINE(1217)																	_hx_tmp73 = ((val2 & 1) != 0);
            																}
            																else {
HXLINE(1217)																	_hx_tmp73 = false;
            																}
HXDLIN(1217)																if (!(_hx_tmp73)) {
HXLINE(1217)																	if ((p2->x == x1)) {
HXLINE(1217)																		_hx_tmp72 = ((val2 & 4) != 0);
            																	}
            																	else {
HXLINE(1217)																		_hx_tmp72 = false;
            																	}
            																}
            																else {
HXLINE(1217)																	_hx_tmp72 = true;
            																}
HXDLIN(1217)																if (_hx_tmp72) {
HXLINE(1217)																	val2 = (val2 ^ 2);
            																}
            															}
            														}
            														else {
HXLINE(1220)															if ((i2 == 5)) {
HXLINE(1221)																p2 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1222)																if (hx::IsNull( p2 )) {
HXLINE(1223)																	Float x15 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1223)																	 ::zpp_nape::geom::ZPP_GeomVert ret31;
HXDLIN(1223)																	{
HXLINE(1223)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1223)																			ret31 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1223)																			ret31 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1223)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret31->next;
HXDLIN(1223)																			ret31->next = null();
            																		}
HXDLIN(1223)																		ret31->forced = false;
            																	}
HXDLIN(1223)																	{
HXLINE(1223)																		ret31->x = x15;
HXDLIN(1223)																		ret31->y = y1;
            																	}
HXDLIN(1223)																	p2 = ret31;
HXLINE(1224)																	ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p2;
            																}
            																else {
HXLINE(1226)																	Float x16 = p2->x;
HXDLIN(1226)																	Float y14 = p2->y;
HXDLIN(1226)																	 ::zpp_nape::geom::ZPP_GeomVert ret32;
HXDLIN(1226)																	{
HXLINE(1226)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1226)																			ret32 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1226)																			ret32 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1226)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret32->next;
HXDLIN(1226)																			ret32->next = null();
            																		}
HXDLIN(1226)																		ret32->forced = false;
            																	}
HXDLIN(1226)																	{
HXLINE(1226)																		ret32->x = x16;
HXDLIN(1226)																		ret32->y = y14;
            																	}
HXDLIN(1226)																	p2 = ret32;
            																}
HXLINE(1227)																if (sndy) {
HXLINE(1227)																	p2->forced = true;
            																}
HXLINE(1228)																bool _hx_tmp74;
HXDLIN(1228)																if ((p2->x != x0)) {
HXLINE(1228)																	_hx_tmp74 = (p2->x == x1);
            																}
            																else {
HXLINE(1228)																	_hx_tmp74 = true;
            																}
HXDLIN(1228)																if (_hx_tmp74) {
HXLINE(1229)																	bool _hx_tmp75;
HXDLIN(1229)																	bool _hx_tmp76;
HXDLIN(1229)																	if ((p2->x == x0)) {
HXLINE(1229)																		_hx_tmp76 = ((val2 & 64) != 0);
            																	}
            																	else {
HXLINE(1229)																		_hx_tmp76 = false;
            																	}
HXDLIN(1229)																	if (!(_hx_tmp76)) {
HXLINE(1229)																		if ((p2->x == x1)) {
HXLINE(1229)																			_hx_tmp75 = ((val2 & 16) != 0);
            																		}
            																		else {
HXLINE(1229)																			_hx_tmp75 = false;
            																		}
            																	}
            																	else {
HXLINE(1229)																		_hx_tmp75 = true;
            																	}
HXDLIN(1229)																	if (_hx_tmp75) {
HXLINE(1229)																		val2 = (val2 ^ 32);
            																	}
            																}
            															}
            															else {
HXLINE(1232)																if ((i2 == 3)) {
HXLINE(1233)																	p2 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1234)																	if (hx::IsNull( p2 )) {
HXLINE(1235)																		Float y15 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1235)																		 ::zpp_nape::geom::ZPP_GeomVert ret33;
HXDLIN(1235)																		{
HXLINE(1235)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1235)																				ret33 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1235)																				ret33 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1235)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret33->next;
HXDLIN(1235)																				ret33->next = null();
            																			}
HXDLIN(1235)																			ret33->forced = false;
            																		}
HXDLIN(1235)																		{
HXLINE(1235)																			ret33->x = x1;
HXDLIN(1235)																			ret33->y = y15;
            																		}
HXDLIN(1235)																		p2 = ret33;
HXLINE(1236)																		ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p2;
            																	}
            																	else {
HXLINE(1238)																		Float x17 = p2->x;
HXDLIN(1238)																		Float y16 = p2->y;
HXDLIN(1238)																		 ::zpp_nape::geom::ZPP_GeomVert ret34;
HXDLIN(1238)																		{
HXLINE(1238)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1238)																				ret34 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1238)																				ret34 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1238)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret34->next;
HXDLIN(1238)																				ret34->next = null();
            																			}
HXDLIN(1238)																			ret34->forced = false;
            																		}
HXDLIN(1238)																		{
HXLINE(1238)																			ret34->x = x17;
HXDLIN(1238)																			ret34->y = y16;
            																		}
HXDLIN(1238)																		p2 = ret34;
            																	}
HXLINE(1239)																	if (sndx) {
HXLINE(1239)																		p2->forced = true;
            																	}
HXLINE(1240)																	bool _hx_tmp77;
HXDLIN(1240)																	if ((p2->y != y0)) {
HXLINE(1240)																		_hx_tmp77 = (p2->y == y1);
            																	}
            																	else {
HXLINE(1240)																		_hx_tmp77 = true;
            																	}
HXDLIN(1240)																	if (_hx_tmp77) {
HXLINE(1241)																		bool _hx_tmp78;
HXDLIN(1241)																		bool _hx_tmp79;
HXDLIN(1241)																		if ((p2->y == y0)) {
HXLINE(1241)																			_hx_tmp79 = ((val2 & 4) != 0);
            																		}
            																		else {
HXLINE(1241)																			_hx_tmp79 = false;
            																		}
HXDLIN(1241)																		if (!(_hx_tmp79)) {
HXLINE(1241)																			if ((p2->y == y1)) {
HXLINE(1241)																				_hx_tmp78 = ((val2 & 16) != 0);
            																			}
            																			else {
HXLINE(1241)																				_hx_tmp78 = false;
            																			}
            																		}
            																		else {
HXLINE(1241)																			_hx_tmp78 = true;
            																		}
HXDLIN(1241)																		if (_hx_tmp78) {
HXLINE(1241)																			val2 = (val2 ^ 8);
            																		}
            																	}
            																}
            																else {
HXLINE(1245)																	p2 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1246)																	if (hx::IsNull( p2 )) {
HXLINE(1247)																		Float y17 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1247)																		 ::zpp_nape::geom::ZPP_GeomVert ret35;
HXDLIN(1247)																		{
HXLINE(1247)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1247)																				ret35 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1247)																				ret35 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1247)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret35->next;
HXDLIN(1247)																				ret35->next = null();
            																			}
HXDLIN(1247)																			ret35->forced = false;
            																		}
HXDLIN(1247)																		{
HXLINE(1247)																			ret35->x = x0;
HXDLIN(1247)																			ret35->y = y17;
            																		}
HXDLIN(1247)																		p2 = ret35;
HXLINE(1248)																		ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p2;
            																	}
            																	else {
HXLINE(1250)																		Float x18 = p2->x;
HXDLIN(1250)																		Float y18 = p2->y;
HXDLIN(1250)																		 ::zpp_nape::geom::ZPP_GeomVert ret36;
HXDLIN(1250)																		{
HXLINE(1250)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1250)																				ret36 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1250)																				ret36 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1250)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret36->next;
HXDLIN(1250)																				ret36->next = null();
            																			}
HXDLIN(1250)																			ret36->forced = false;
            																		}
HXDLIN(1250)																		{
HXLINE(1250)																			ret36->x = x18;
HXDLIN(1250)																			ret36->y = y18;
            																		}
HXDLIN(1250)																		p2 = ret36;
            																	}
HXLINE(1251)																	if (fstx) {
HXLINE(1251)																		p2->forced = true;
            																	}
HXLINE(1252)																	bool _hx_tmp80;
HXDLIN(1252)																	if ((p2->y != y0)) {
HXLINE(1252)																		_hx_tmp80 = (p2->y == y1);
            																	}
            																	else {
HXLINE(1252)																		_hx_tmp80 = true;
            																	}
HXDLIN(1252)																	if (_hx_tmp80) {
HXLINE(1253)																		bool _hx_tmp81;
HXDLIN(1253)																		bool _hx_tmp82;
HXDLIN(1253)																		if ((p2->y == y0)) {
HXLINE(1253)																			_hx_tmp82 = ((val2 & 1) != 0);
            																		}
            																		else {
HXLINE(1253)																			_hx_tmp82 = false;
            																		}
HXDLIN(1253)																		if (!(_hx_tmp82)) {
HXLINE(1253)																			if ((p2->y == y1)) {
HXLINE(1253)																				_hx_tmp81 = ((val2 & 64) != 0);
            																			}
            																			else {
HXLINE(1253)																				_hx_tmp81 = false;
            																			}
            																		}
            																		else {
HXLINE(1253)																			_hx_tmp81 = true;
            																		}
HXDLIN(1253)																		if (_hx_tmp81) {
HXLINE(1253)																			val2 = (val2 ^ 128);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXLINE(1257)										 ::zpp_nape::geom::ZPP_GeomVert obj2 = p2;
HXLINE(1258)										if (hx::IsNull( ret->p1 )) {
HXLINE(1258)											ret->p1 = (obj2->prev = (obj2->next = obj2));
            										}
            										else {
HXLINE(1260)											obj2->prev = ret->p1;
HXLINE(1261)											obj2->next = ret->p1->next;
HXLINE(1262)											ret->p1->next->prev = obj2;
HXLINE(1263)											ret->p1->next = obj2;
            										}
HXLINE(1256)										ret->p1 = obj2;
            									}
            								}
            							}
HXLINE(1269)							ret->p1 = ret->p1->next;
HXLINE(1270)							ret->key1 = val2;
HXLINE(1271)							bool _hx_tmp83;
HXDLIN(1271)							bool _hx_tmp84;
HXDLIN(1271)							bool _hx_tmp85;
HXDLIN(1271)							bool _hx_tmp86;
HXDLIN(1271)							bool _hx_tmp87;
HXDLIN(1271)							bool _hx_tmp88;
HXDLIN(1271)							bool _hx_tmp89;
HXDLIN(1271)							bool _hx_tmp90;
HXDLIN(1271)							bool _hx_tmp91;
HXDLIN(1271)							bool _hx_tmp92;
HXDLIN(1271)							bool _hx_tmp93;
HXDLIN(1271)							bool _hx_tmp94;
HXDLIN(1271)							bool _hx_tmp95;
HXDLIN(1271)							bool _hx_tmp96;
HXDLIN(1271)							bool _hx_tmp97;
HXDLIN(1271)							bool _hx_tmp98;
HXDLIN(1271)							bool _hx_tmp99;
HXDLIN(1271)							if ((val2 != 1)) {
HXLINE(1271)								_hx_tmp99 = (val2 == 4);
            							}
            							else {
HXLINE(1271)								_hx_tmp99 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp99)) {
HXLINE(1271)								_hx_tmp98 = (val2 == 16);
            							}
            							else {
HXLINE(1271)								_hx_tmp98 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp98)) {
HXLINE(1271)								_hx_tmp97 = (val2 == 64);
            							}
            							else {
HXLINE(1271)								_hx_tmp97 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp97)) {
HXLINE(1271)								_hx_tmp96 = (val2 == 3);
            							}
            							else {
HXLINE(1271)								_hx_tmp96 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp96)) {
HXLINE(1271)								_hx_tmp95 = (val2 == 12);
            							}
            							else {
HXLINE(1271)								_hx_tmp95 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp95)) {
HXLINE(1271)								_hx_tmp94 = (val2 == 48);
            							}
            							else {
HXLINE(1271)								_hx_tmp94 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp94)) {
HXLINE(1271)								_hx_tmp93 = (val2 == 192);
            							}
            							else {
HXLINE(1271)								_hx_tmp93 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp93)) {
HXLINE(1271)								_hx_tmp92 = (val2 == 129);
            							}
            							else {
HXLINE(1271)								_hx_tmp92 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp92)) {
HXLINE(1271)								_hx_tmp91 = (val2 == 6);
            							}
            							else {
HXLINE(1271)								_hx_tmp91 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp91)) {
HXLINE(1271)								_hx_tmp90 = (val2 == 24);
            							}
            							else {
HXLINE(1271)								_hx_tmp90 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp90)) {
HXLINE(1271)								_hx_tmp89 = (val2 == 96);
            							}
            							else {
HXLINE(1271)								_hx_tmp89 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp89)) {
HXLINE(1271)								_hx_tmp88 = (val2 == 5);
            							}
            							else {
HXLINE(1271)								_hx_tmp88 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp88)) {
HXLINE(1271)								_hx_tmp87 = (val2 == 20);
            							}
            							else {
HXLINE(1271)								_hx_tmp87 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp87)) {
HXLINE(1271)								_hx_tmp86 = (val2 == 80);
            							}
            							else {
HXLINE(1271)								_hx_tmp86 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp86)) {
HXLINE(1271)								_hx_tmp85 = (val2 == 65);
            							}
            							else {
HXLINE(1271)								_hx_tmp85 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp85)) {
HXLINE(1271)								_hx_tmp84 = (val2 == 17);
            							}
            							else {
HXLINE(1271)								_hx_tmp84 = true;
            							}
HXDLIN(1271)							if (!(_hx_tmp84)) {
HXLINE(1271)								_hx_tmp83 = (val2 == 68);
            							}
            							else {
HXLINE(1271)								_hx_tmp83 = true;
            							}
HXDLIN(1271)							if (_hx_tmp83) {
HXLINE(1272)								val2 = 0;
HXLINE(1273)								ret->key1 = 0;
HXLINE(1274)								ret->p1 = null();
            							}
            						}
HXLINE(1277)						if ((val2 != 0)) {
HXLINE(1278)							int val3 = 56;
HXLINE(1279)							{
HXLINE(1280)								ret->okey2 = val3;
HXLINE(1281)								{
HXLINE(1281)									int _g3 = 0;
HXDLIN(1281)									while((_g3 < 8)){
HXLINE(1281)										_g3 = (_g3 + 1);
HXDLIN(1281)										int i3 = (_g3 - 1);
HXLINE(1282)										if (((val3 & (1 << i3)) != 0)) {
HXLINE(1283)											 ::zpp_nape::geom::ZPP_GeomVert p3 = null();
HXLINE(1284)											if ((i3 == 0)) {
HXLINE(1285)												 ::zpp_nape::geom::ZPP_GeomVert ret37;
HXDLIN(1285)												{
HXLINE(1285)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1285)														ret37 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1285)														ret37 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1285)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret37->next;
HXDLIN(1285)														ret37->next = null();
            													}
HXDLIN(1285)													ret37->forced = false;
            												}
HXDLIN(1285)												{
HXLINE(1285)													ret37->x = x0;
HXDLIN(1285)													ret37->y = y0;
            												}
HXDLIN(1285)												p3 = ret37;
HXLINE(1286)												bool _hx_tmp100;
HXDLIN(1286)												if (!(fstx)) {
HXLINE(1286)													_hx_tmp100 = fsty;
            												}
            												else {
HXLINE(1286)													_hx_tmp100 = true;
            												}
HXDLIN(1286)												if (_hx_tmp100) {
HXLINE(1286)													p3->forced = true;
            												}
            											}
            											else {
HXLINE(1288)												if ((i3 == 2)) {
HXLINE(1289)													 ::zpp_nape::geom::ZPP_GeomVert ret38;
HXDLIN(1289)													{
HXLINE(1289)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1289)															ret38 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1289)															ret38 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1289)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret38->next;
HXDLIN(1289)															ret38->next = null();
            														}
HXDLIN(1289)														ret38->forced = false;
            													}
HXDLIN(1289)													{
HXLINE(1289)														ret38->x = x1;
HXDLIN(1289)														ret38->y = y0;
            													}
HXDLIN(1289)													p3 = ret38;
HXLINE(1290)													bool _hx_tmp101;
HXDLIN(1290)													if (!(sndx)) {
HXLINE(1290)														_hx_tmp101 = fsty;
            													}
            													else {
HXLINE(1290)														_hx_tmp101 = true;
            													}
HXDLIN(1290)													if (_hx_tmp101) {
HXLINE(1290)														p3->forced = true;
            													}
            												}
            												else {
HXLINE(1292)													if ((i3 == 4)) {
HXLINE(1293)														 ::zpp_nape::geom::ZPP_GeomVert ret39;
HXDLIN(1293)														{
HXLINE(1293)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1293)																ret39 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1293)																ret39 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1293)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret39->next;
HXDLIN(1293)																ret39->next = null();
            															}
HXDLIN(1293)															ret39->forced = false;
            														}
HXDLIN(1293)														{
HXLINE(1293)															ret39->x = x1;
HXDLIN(1293)															ret39->y = y1;
            														}
HXDLIN(1293)														p3 = ret39;
HXLINE(1294)														bool _hx_tmp102;
HXDLIN(1294)														if (!(sndx)) {
HXLINE(1294)															_hx_tmp102 = sndy;
            														}
            														else {
HXLINE(1294)															_hx_tmp102 = true;
            														}
HXDLIN(1294)														if (_hx_tmp102) {
HXLINE(1294)															p3->forced = true;
            														}
            													}
            													else {
HXLINE(1296)														if ((i3 == 6)) {
HXLINE(1297)															 ::zpp_nape::geom::ZPP_GeomVert ret40;
HXDLIN(1297)															{
HXLINE(1297)																if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1297)																	ret40 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(1297)																	ret40 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1297)																	::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret40->next;
HXDLIN(1297)																	ret40->next = null();
            																}
HXDLIN(1297)																ret40->forced = false;
            															}
HXDLIN(1297)															{
HXLINE(1297)																ret40->x = x0;
HXDLIN(1297)																ret40->y = y1;
            															}
HXDLIN(1297)															p3 = ret40;
HXLINE(1298)															bool _hx_tmp103;
HXDLIN(1298)															if (!(fstx)) {
HXLINE(1298)																_hx_tmp103 = sndy;
            															}
            															else {
HXLINE(1298)																_hx_tmp103 = true;
            															}
HXDLIN(1298)															if (_hx_tmp103) {
HXLINE(1298)																p3->forced = true;
            															}
            														}
            														else {
HXLINE(1300)															if ((i3 == 1)) {
HXLINE(1301)																p3 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1302)																if (hx::IsNull( p3 )) {
HXLINE(1303)																	Float x19 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1303)																	 ::zpp_nape::geom::ZPP_GeomVert ret41;
HXDLIN(1303)																	{
HXLINE(1303)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1303)																			ret41 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1303)																			ret41 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1303)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret41->next;
HXDLIN(1303)																			ret41->next = null();
            																		}
HXDLIN(1303)																		ret41->forced = false;
            																	}
HXDLIN(1303)																	{
HXLINE(1303)																		ret41->x = x19;
HXDLIN(1303)																		ret41->y = y0;
            																	}
HXDLIN(1303)																	p3 = ret41;
HXLINE(1304)																	ints->list[(((yn << 1) * ints->width) + xn)] = p3;
            																}
            																else {
HXLINE(1306)																	Float x20 = p3->x;
HXDLIN(1306)																	Float y19 = p3->y;
HXDLIN(1306)																	 ::zpp_nape::geom::ZPP_GeomVert ret42;
HXDLIN(1306)																	{
HXLINE(1306)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1306)																			ret42 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1306)																			ret42 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1306)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret42->next;
HXDLIN(1306)																			ret42->next = null();
            																		}
HXDLIN(1306)																		ret42->forced = false;
            																	}
HXDLIN(1306)																	{
HXLINE(1306)																		ret42->x = x20;
HXDLIN(1306)																		ret42->y = y19;
            																	}
HXDLIN(1306)																	p3 = ret42;
            																}
HXLINE(1307)																if (fsty) {
HXLINE(1307)																	p3->forced = true;
            																}
HXLINE(1308)																bool _hx_tmp104;
HXDLIN(1308)																if ((p3->x != x0)) {
HXLINE(1308)																	_hx_tmp104 = (p3->x == x1);
            																}
            																else {
HXLINE(1308)																	_hx_tmp104 = true;
            																}
HXDLIN(1308)																if (_hx_tmp104) {
HXLINE(1309)																	bool _hx_tmp105;
HXDLIN(1309)																	bool _hx_tmp106;
HXDLIN(1309)																	if ((p3->x == x0)) {
HXLINE(1309)																		_hx_tmp106 = ((val3 & 1) != 0);
            																	}
            																	else {
HXLINE(1309)																		_hx_tmp106 = false;
            																	}
HXDLIN(1309)																	if (!(_hx_tmp106)) {
HXLINE(1309)																		if ((p3->x == x1)) {
HXLINE(1309)																			_hx_tmp105 = ((val3 & 4) != 0);
            																		}
            																		else {
HXLINE(1309)																			_hx_tmp105 = false;
            																		}
            																	}
            																	else {
HXLINE(1309)																		_hx_tmp105 = true;
            																	}
HXDLIN(1309)																	if (_hx_tmp105) {
HXLINE(1309)																		val3 = (val3 ^ 2);
            																	}
            																}
            															}
            															else {
HXLINE(1312)																if ((i3 == 5)) {
HXLINE(1313)																	p3 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1314)																	if (hx::IsNull( p3 )) {
HXLINE(1315)																		Float x21 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1315)																		 ::zpp_nape::geom::ZPP_GeomVert ret43;
HXDLIN(1315)																		{
HXLINE(1315)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1315)																				ret43 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1315)																				ret43 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1315)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret43->next;
HXDLIN(1315)																				ret43->next = null();
            																			}
HXDLIN(1315)																			ret43->forced = false;
            																		}
HXDLIN(1315)																		{
HXLINE(1315)																			ret43->x = x21;
HXDLIN(1315)																			ret43->y = y1;
            																		}
HXDLIN(1315)																		p3 = ret43;
HXLINE(1316)																		ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p3;
            																	}
            																	else {
HXLINE(1318)																		Float x22 = p3->x;
HXDLIN(1318)																		Float y20 = p3->y;
HXDLIN(1318)																		 ::zpp_nape::geom::ZPP_GeomVert ret44;
HXDLIN(1318)																		{
HXLINE(1318)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1318)																				ret44 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1318)																				ret44 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1318)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret44->next;
HXDLIN(1318)																				ret44->next = null();
            																			}
HXDLIN(1318)																			ret44->forced = false;
            																		}
HXDLIN(1318)																		{
HXLINE(1318)																			ret44->x = x22;
HXDLIN(1318)																			ret44->y = y20;
            																		}
HXDLIN(1318)																		p3 = ret44;
            																	}
HXLINE(1319)																	if (sndy) {
HXLINE(1319)																		p3->forced = true;
            																	}
HXLINE(1320)																	bool _hx_tmp107;
HXDLIN(1320)																	if ((p3->x != x0)) {
HXLINE(1320)																		_hx_tmp107 = (p3->x == x1);
            																	}
            																	else {
HXLINE(1320)																		_hx_tmp107 = true;
            																	}
HXDLIN(1320)																	if (_hx_tmp107) {
HXLINE(1321)																		bool _hx_tmp108;
HXDLIN(1321)																		bool _hx_tmp109;
HXDLIN(1321)																		if ((p3->x == x0)) {
HXLINE(1321)																			_hx_tmp109 = ((val3 & 64) != 0);
            																		}
            																		else {
HXLINE(1321)																			_hx_tmp109 = false;
            																		}
HXDLIN(1321)																		if (!(_hx_tmp109)) {
HXLINE(1321)																			if ((p3->x == x1)) {
HXLINE(1321)																				_hx_tmp108 = ((val3 & 16) != 0);
            																			}
            																			else {
HXLINE(1321)																				_hx_tmp108 = false;
            																			}
            																		}
            																		else {
HXLINE(1321)																			_hx_tmp108 = true;
            																		}
HXDLIN(1321)																		if (_hx_tmp108) {
HXLINE(1321)																			val3 = (val3 ^ 32);
            																		}
            																	}
            																}
            																else {
HXLINE(1324)																	if ((i3 == 3)) {
HXLINE(1325)																		p3 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1326)																		if (hx::IsNull( p3 )) {
HXLINE(1327)																			Float y21 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1327)																			 ::zpp_nape::geom::ZPP_GeomVert ret45;
HXDLIN(1327)																			{
HXLINE(1327)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1327)																					ret45 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1327)																					ret45 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1327)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret45->next;
HXDLIN(1327)																					ret45->next = null();
            																				}
HXDLIN(1327)																				ret45->forced = false;
            																			}
HXDLIN(1327)																			{
HXLINE(1327)																				ret45->x = x1;
HXDLIN(1327)																				ret45->y = y21;
            																			}
HXDLIN(1327)																			p3 = ret45;
HXLINE(1328)																			ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p3;
            																		}
            																		else {
HXLINE(1330)																			Float x23 = p3->x;
HXDLIN(1330)																			Float y22 = p3->y;
HXDLIN(1330)																			 ::zpp_nape::geom::ZPP_GeomVert ret46;
HXDLIN(1330)																			{
HXLINE(1330)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1330)																					ret46 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1330)																					ret46 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1330)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret46->next;
HXDLIN(1330)																					ret46->next = null();
            																				}
HXDLIN(1330)																				ret46->forced = false;
            																			}
HXDLIN(1330)																			{
HXLINE(1330)																				ret46->x = x23;
HXDLIN(1330)																				ret46->y = y22;
            																			}
HXDLIN(1330)																			p3 = ret46;
            																		}
HXLINE(1331)																		if (sndx) {
HXLINE(1331)																			p3->forced = true;
            																		}
HXLINE(1332)																		bool _hx_tmp110;
HXDLIN(1332)																		if ((p3->y != y0)) {
HXLINE(1332)																			_hx_tmp110 = (p3->y == y1);
            																		}
            																		else {
HXLINE(1332)																			_hx_tmp110 = true;
            																		}
HXDLIN(1332)																		if (_hx_tmp110) {
HXLINE(1333)																			bool _hx_tmp111;
HXDLIN(1333)																			bool _hx_tmp112;
HXDLIN(1333)																			if ((p3->y == y0)) {
HXLINE(1333)																				_hx_tmp112 = ((val3 & 4) != 0);
            																			}
            																			else {
HXLINE(1333)																				_hx_tmp112 = false;
            																			}
HXDLIN(1333)																			if (!(_hx_tmp112)) {
HXLINE(1333)																				if ((p3->y == y1)) {
HXLINE(1333)																					_hx_tmp111 = ((val3 & 16) != 0);
            																				}
            																				else {
HXLINE(1333)																					_hx_tmp111 = false;
            																				}
            																			}
            																			else {
HXLINE(1333)																				_hx_tmp111 = true;
            																			}
HXDLIN(1333)																			if (_hx_tmp111) {
HXLINE(1333)																				val3 = (val3 ^ 8);
            																			}
            																		}
            																	}
            																	else {
HXLINE(1337)																		p3 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1338)																		if (hx::IsNull( p3 )) {
HXLINE(1339)																			Float y23 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1339)																			 ::zpp_nape::geom::ZPP_GeomVert ret47;
HXDLIN(1339)																			{
HXLINE(1339)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1339)																					ret47 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1339)																					ret47 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1339)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret47->next;
HXDLIN(1339)																					ret47->next = null();
            																				}
HXDLIN(1339)																				ret47->forced = false;
            																			}
HXDLIN(1339)																			{
HXLINE(1339)																				ret47->x = x0;
HXDLIN(1339)																				ret47->y = y23;
            																			}
HXDLIN(1339)																			p3 = ret47;
HXLINE(1340)																			ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p3;
            																		}
            																		else {
HXLINE(1342)																			Float x24 = p3->x;
HXDLIN(1342)																			Float y24 = p3->y;
HXDLIN(1342)																			 ::zpp_nape::geom::ZPP_GeomVert ret48;
HXDLIN(1342)																			{
HXLINE(1342)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1342)																					ret48 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1342)																					ret48 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1342)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret48->next;
HXDLIN(1342)																					ret48->next = null();
            																				}
HXDLIN(1342)																				ret48->forced = false;
            																			}
HXDLIN(1342)																			{
HXLINE(1342)																				ret48->x = x24;
HXDLIN(1342)																				ret48->y = y24;
            																			}
HXDLIN(1342)																			p3 = ret48;
            																		}
HXLINE(1343)																		if (fstx) {
HXLINE(1343)																			p3->forced = true;
            																		}
HXLINE(1344)																		bool _hx_tmp113;
HXDLIN(1344)																		if ((p3->y != y0)) {
HXLINE(1344)																			_hx_tmp113 = (p3->y == y1);
            																		}
            																		else {
HXLINE(1344)																			_hx_tmp113 = true;
            																		}
HXDLIN(1344)																		if (_hx_tmp113) {
HXLINE(1345)																			bool _hx_tmp114;
HXDLIN(1345)																			bool _hx_tmp115;
HXDLIN(1345)																			if ((p3->y == y0)) {
HXLINE(1345)																				_hx_tmp115 = ((val3 & 1) != 0);
            																			}
            																			else {
HXLINE(1345)																				_hx_tmp115 = false;
            																			}
HXDLIN(1345)																			if (!(_hx_tmp115)) {
HXLINE(1345)																				if ((p3->y == y1)) {
HXLINE(1345)																					_hx_tmp114 = ((val3 & 64) != 0);
            																				}
            																				else {
HXLINE(1345)																					_hx_tmp114 = false;
            																				}
            																			}
            																			else {
HXLINE(1345)																				_hx_tmp114 = true;
            																			}
HXDLIN(1345)																			if (_hx_tmp114) {
HXLINE(1345)																				val3 = (val3 ^ 128);
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXLINE(1349)											 ::zpp_nape::geom::ZPP_GeomVert obj3 = p3;
HXLINE(1350)											if (hx::IsNull( ret->p2 )) {
HXLINE(1350)												ret->p2 = (obj3->prev = (obj3->next = obj3));
            											}
            											else {
HXLINE(1352)												obj3->prev = ret->p2;
HXLINE(1353)												obj3->next = ret->p2->next;
HXLINE(1354)												ret->p2->next->prev = obj3;
HXLINE(1355)												ret->p2->next = obj3;
            											}
HXLINE(1348)											ret->p2 = obj3;
            										}
            									}
            								}
HXLINE(1361)								ret->p2 = ret->p2->next;
HXLINE(1362)								ret->key2 = val3;
HXLINE(1363)								bool _hx_tmp116;
HXDLIN(1363)								bool _hx_tmp117;
HXDLIN(1363)								bool _hx_tmp118;
HXDLIN(1363)								bool _hx_tmp119;
HXDLIN(1363)								bool _hx_tmp120;
HXDLIN(1363)								bool _hx_tmp121;
HXDLIN(1363)								bool _hx_tmp122;
HXDLIN(1363)								bool _hx_tmp123;
HXDLIN(1363)								bool _hx_tmp124;
HXDLIN(1363)								bool _hx_tmp125;
HXDLIN(1363)								bool _hx_tmp126;
HXDLIN(1363)								bool _hx_tmp127;
HXDLIN(1363)								bool _hx_tmp128;
HXDLIN(1363)								bool _hx_tmp129;
HXDLIN(1363)								bool _hx_tmp130;
HXDLIN(1363)								bool _hx_tmp131;
HXDLIN(1363)								bool _hx_tmp132;
HXDLIN(1363)								if ((val3 != 1)) {
HXLINE(1363)									_hx_tmp132 = (val3 == 4);
            								}
            								else {
HXLINE(1363)									_hx_tmp132 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp132)) {
HXLINE(1363)									_hx_tmp131 = (val3 == 16);
            								}
            								else {
HXLINE(1363)									_hx_tmp131 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp131)) {
HXLINE(1363)									_hx_tmp130 = (val3 == 64);
            								}
            								else {
HXLINE(1363)									_hx_tmp130 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp130)) {
HXLINE(1363)									_hx_tmp129 = (val3 == 3);
            								}
            								else {
HXLINE(1363)									_hx_tmp129 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp129)) {
HXLINE(1363)									_hx_tmp128 = (val3 == 12);
            								}
            								else {
HXLINE(1363)									_hx_tmp128 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp128)) {
HXLINE(1363)									_hx_tmp127 = (val3 == 48);
            								}
            								else {
HXLINE(1363)									_hx_tmp127 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp127)) {
HXLINE(1363)									_hx_tmp126 = (val3 == 192);
            								}
            								else {
HXLINE(1363)									_hx_tmp126 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp126)) {
HXLINE(1363)									_hx_tmp125 = (val3 == 129);
            								}
            								else {
HXLINE(1363)									_hx_tmp125 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp125)) {
HXLINE(1363)									_hx_tmp124 = (val3 == 6);
            								}
            								else {
HXLINE(1363)									_hx_tmp124 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp124)) {
HXLINE(1363)									_hx_tmp123 = (val3 == 24);
            								}
            								else {
HXLINE(1363)									_hx_tmp123 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp123)) {
HXLINE(1363)									_hx_tmp122 = (val3 == 96);
            								}
            								else {
HXLINE(1363)									_hx_tmp122 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp122)) {
HXLINE(1363)									_hx_tmp121 = (val3 == 5);
            								}
            								else {
HXLINE(1363)									_hx_tmp121 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp121)) {
HXLINE(1363)									_hx_tmp120 = (val3 == 20);
            								}
            								else {
HXLINE(1363)									_hx_tmp120 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp120)) {
HXLINE(1363)									_hx_tmp119 = (val3 == 80);
            								}
            								else {
HXLINE(1363)									_hx_tmp119 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp119)) {
HXLINE(1363)									_hx_tmp118 = (val3 == 65);
            								}
            								else {
HXLINE(1363)									_hx_tmp118 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp118)) {
HXLINE(1363)									_hx_tmp117 = (val3 == 17);
            								}
            								else {
HXLINE(1363)									_hx_tmp117 = true;
            								}
HXDLIN(1363)								if (!(_hx_tmp117)) {
HXLINE(1363)									_hx_tmp116 = (val3 == 68);
            								}
            								else {
HXLINE(1363)									_hx_tmp116 = true;
            								}
HXDLIN(1363)								if (_hx_tmp116) {
HXLINE(1364)									val3 = 0;
HXLINE(1365)									ret->key2 = 0;
HXLINE(1366)									ret->p2 = null();
            								}
            							}
HXLINE(1369)							if ((val3 == 0)) {
HXLINE(1370)								ret->pr = ret->p1;
HXLINE(1371)								ret->okeyr = ret->okey1;
HXLINE(1372)								ret->keyr = ret->key1;
            							}
            							else {
HXLINE(1375)								ret->pr = ret->p2;
HXLINE(1376)								ret->okeyr = ret->okey2;
HXLINE(1377)								ret->keyr = ret->key2;
            							}
            						}
            						else {
HXLINE(1381)							int val4 = 56;
HXLINE(1382)							{
HXLINE(1383)								ret->okey1 = val4;
HXLINE(1384)								{
HXLINE(1384)									int _g4 = 0;
HXDLIN(1384)									while((_g4 < 8)){
HXLINE(1384)										_g4 = (_g4 + 1);
HXDLIN(1384)										int i4 = (_g4 - 1);
HXLINE(1385)										if (((val4 & (1 << i4)) != 0)) {
HXLINE(1386)											 ::zpp_nape::geom::ZPP_GeomVert p4 = null();
HXLINE(1387)											if ((i4 == 0)) {
HXLINE(1388)												 ::zpp_nape::geom::ZPP_GeomVert ret49;
HXDLIN(1388)												{
HXLINE(1388)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1388)														ret49 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1388)														ret49 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1388)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret49->next;
HXDLIN(1388)														ret49->next = null();
            													}
HXDLIN(1388)													ret49->forced = false;
            												}
HXDLIN(1388)												{
HXLINE(1388)													ret49->x = x0;
HXDLIN(1388)													ret49->y = y0;
            												}
HXDLIN(1388)												p4 = ret49;
HXLINE(1389)												bool _hx_tmp133;
HXDLIN(1389)												if (!(fstx)) {
HXLINE(1389)													_hx_tmp133 = fsty;
            												}
            												else {
HXLINE(1389)													_hx_tmp133 = true;
            												}
HXDLIN(1389)												if (_hx_tmp133) {
HXLINE(1389)													p4->forced = true;
            												}
            											}
            											else {
HXLINE(1391)												if ((i4 == 2)) {
HXLINE(1392)													 ::zpp_nape::geom::ZPP_GeomVert ret50;
HXDLIN(1392)													{
HXLINE(1392)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1392)															ret50 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1392)															ret50 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1392)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret50->next;
HXDLIN(1392)															ret50->next = null();
            														}
HXDLIN(1392)														ret50->forced = false;
            													}
HXDLIN(1392)													{
HXLINE(1392)														ret50->x = x1;
HXDLIN(1392)														ret50->y = y0;
            													}
HXDLIN(1392)													p4 = ret50;
HXLINE(1393)													bool _hx_tmp134;
HXDLIN(1393)													if (!(sndx)) {
HXLINE(1393)														_hx_tmp134 = fsty;
            													}
            													else {
HXLINE(1393)														_hx_tmp134 = true;
            													}
HXDLIN(1393)													if (_hx_tmp134) {
HXLINE(1393)														p4->forced = true;
            													}
            												}
            												else {
HXLINE(1395)													if ((i4 == 4)) {
HXLINE(1396)														 ::zpp_nape::geom::ZPP_GeomVert ret51;
HXDLIN(1396)														{
HXLINE(1396)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1396)																ret51 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1396)																ret51 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1396)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret51->next;
HXDLIN(1396)																ret51->next = null();
            															}
HXDLIN(1396)															ret51->forced = false;
            														}
HXDLIN(1396)														{
HXLINE(1396)															ret51->x = x1;
HXDLIN(1396)															ret51->y = y1;
            														}
HXDLIN(1396)														p4 = ret51;
HXLINE(1397)														bool _hx_tmp135;
HXDLIN(1397)														if (!(sndx)) {
HXLINE(1397)															_hx_tmp135 = sndy;
            														}
            														else {
HXLINE(1397)															_hx_tmp135 = true;
            														}
HXDLIN(1397)														if (_hx_tmp135) {
HXLINE(1397)															p4->forced = true;
            														}
            													}
            													else {
HXLINE(1399)														if ((i4 == 6)) {
HXLINE(1400)															 ::zpp_nape::geom::ZPP_GeomVert ret52;
HXDLIN(1400)															{
HXLINE(1400)																if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1400)																	ret52 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(1400)																	ret52 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1400)																	::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret52->next;
HXDLIN(1400)																	ret52->next = null();
            																}
HXDLIN(1400)																ret52->forced = false;
            															}
HXDLIN(1400)															{
HXLINE(1400)																ret52->x = x0;
HXDLIN(1400)																ret52->y = y1;
            															}
HXDLIN(1400)															p4 = ret52;
HXLINE(1401)															bool _hx_tmp136;
HXDLIN(1401)															if (!(fstx)) {
HXLINE(1401)																_hx_tmp136 = sndy;
            															}
            															else {
HXLINE(1401)																_hx_tmp136 = true;
            															}
HXDLIN(1401)															if (_hx_tmp136) {
HXLINE(1401)																p4->forced = true;
            															}
            														}
            														else {
HXLINE(1403)															if ((i4 == 1)) {
HXLINE(1404)																p4 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1405)																if (hx::IsNull( p4 )) {
HXLINE(1406)																	Float x25 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1406)																	 ::zpp_nape::geom::ZPP_GeomVert ret53;
HXDLIN(1406)																	{
HXLINE(1406)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1406)																			ret53 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1406)																			ret53 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1406)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret53->next;
HXDLIN(1406)																			ret53->next = null();
            																		}
HXDLIN(1406)																		ret53->forced = false;
            																	}
HXDLIN(1406)																	{
HXLINE(1406)																		ret53->x = x25;
HXDLIN(1406)																		ret53->y = y0;
            																	}
HXDLIN(1406)																	p4 = ret53;
HXLINE(1407)																	ints->list[(((yn << 1) * ints->width) + xn)] = p4;
            																}
            																else {
HXLINE(1409)																	Float x26 = p4->x;
HXDLIN(1409)																	Float y25 = p4->y;
HXDLIN(1409)																	 ::zpp_nape::geom::ZPP_GeomVert ret54;
HXDLIN(1409)																	{
HXLINE(1409)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1409)																			ret54 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1409)																			ret54 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1409)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret54->next;
HXDLIN(1409)																			ret54->next = null();
            																		}
HXDLIN(1409)																		ret54->forced = false;
            																	}
HXDLIN(1409)																	{
HXLINE(1409)																		ret54->x = x26;
HXDLIN(1409)																		ret54->y = y25;
            																	}
HXDLIN(1409)																	p4 = ret54;
            																}
HXLINE(1410)																if (fsty) {
HXLINE(1410)																	p4->forced = true;
            																}
HXLINE(1411)																bool _hx_tmp137;
HXDLIN(1411)																if ((p4->x != x0)) {
HXLINE(1411)																	_hx_tmp137 = (p4->x == x1);
            																}
            																else {
HXLINE(1411)																	_hx_tmp137 = true;
            																}
HXDLIN(1411)																if (_hx_tmp137) {
HXLINE(1412)																	bool _hx_tmp138;
HXDLIN(1412)																	bool _hx_tmp139;
HXDLIN(1412)																	if ((p4->x == x0)) {
HXLINE(1412)																		_hx_tmp139 = ((val4 & 1) != 0);
            																	}
            																	else {
HXLINE(1412)																		_hx_tmp139 = false;
            																	}
HXDLIN(1412)																	if (!(_hx_tmp139)) {
HXLINE(1412)																		if ((p4->x == x1)) {
HXLINE(1412)																			_hx_tmp138 = ((val4 & 4) != 0);
            																		}
            																		else {
HXLINE(1412)																			_hx_tmp138 = false;
            																		}
            																	}
            																	else {
HXLINE(1412)																		_hx_tmp138 = true;
            																	}
HXDLIN(1412)																	if (_hx_tmp138) {
HXLINE(1412)																		val4 = (val4 ^ 2);
            																	}
            																}
            															}
            															else {
HXLINE(1415)																if ((i4 == 5)) {
HXLINE(1416)																	p4 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1417)																	if (hx::IsNull( p4 )) {
HXLINE(1418)																		Float x27 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1418)																		 ::zpp_nape::geom::ZPP_GeomVert ret55;
HXDLIN(1418)																		{
HXLINE(1418)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1418)																				ret55 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1418)																				ret55 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1418)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret55->next;
HXDLIN(1418)																				ret55->next = null();
            																			}
HXDLIN(1418)																			ret55->forced = false;
            																		}
HXDLIN(1418)																		{
HXLINE(1418)																			ret55->x = x27;
HXDLIN(1418)																			ret55->y = y1;
            																		}
HXDLIN(1418)																		p4 = ret55;
HXLINE(1419)																		ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p4;
            																	}
            																	else {
HXLINE(1421)																		Float x28 = p4->x;
HXDLIN(1421)																		Float y26 = p4->y;
HXDLIN(1421)																		 ::zpp_nape::geom::ZPP_GeomVert ret56;
HXDLIN(1421)																		{
HXLINE(1421)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1421)																				ret56 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1421)																				ret56 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1421)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret56->next;
HXDLIN(1421)																				ret56->next = null();
            																			}
HXDLIN(1421)																			ret56->forced = false;
            																		}
HXDLIN(1421)																		{
HXLINE(1421)																			ret56->x = x28;
HXDLIN(1421)																			ret56->y = y26;
            																		}
HXDLIN(1421)																		p4 = ret56;
            																	}
HXLINE(1422)																	if (sndy) {
HXLINE(1422)																		p4->forced = true;
            																	}
HXLINE(1423)																	bool _hx_tmp140;
HXDLIN(1423)																	if ((p4->x != x0)) {
HXLINE(1423)																		_hx_tmp140 = (p4->x == x1);
            																	}
            																	else {
HXLINE(1423)																		_hx_tmp140 = true;
            																	}
HXDLIN(1423)																	if (_hx_tmp140) {
HXLINE(1424)																		bool _hx_tmp141;
HXDLIN(1424)																		bool _hx_tmp142;
HXDLIN(1424)																		if ((p4->x == x0)) {
HXLINE(1424)																			_hx_tmp142 = ((val4 & 64) != 0);
            																		}
            																		else {
HXLINE(1424)																			_hx_tmp142 = false;
            																		}
HXDLIN(1424)																		if (!(_hx_tmp142)) {
HXLINE(1424)																			if ((p4->x == x1)) {
HXLINE(1424)																				_hx_tmp141 = ((val4 & 16) != 0);
            																			}
            																			else {
HXLINE(1424)																				_hx_tmp141 = false;
            																			}
            																		}
            																		else {
HXLINE(1424)																			_hx_tmp141 = true;
            																		}
HXDLIN(1424)																		if (_hx_tmp141) {
HXLINE(1424)																			val4 = (val4 ^ 32);
            																		}
            																	}
            																}
            																else {
HXLINE(1427)																	if ((i4 == 3)) {
HXLINE(1428)																		p4 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1429)																		if (hx::IsNull( p4 )) {
HXLINE(1430)																			Float y27 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1430)																			 ::zpp_nape::geom::ZPP_GeomVert ret57;
HXDLIN(1430)																			{
HXLINE(1430)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1430)																					ret57 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1430)																					ret57 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1430)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret57->next;
HXDLIN(1430)																					ret57->next = null();
            																				}
HXDLIN(1430)																				ret57->forced = false;
            																			}
HXDLIN(1430)																			{
HXLINE(1430)																				ret57->x = x1;
HXDLIN(1430)																				ret57->y = y27;
            																			}
HXDLIN(1430)																			p4 = ret57;
HXLINE(1431)																			ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p4;
            																		}
            																		else {
HXLINE(1433)																			Float x29 = p4->x;
HXDLIN(1433)																			Float y28 = p4->y;
HXDLIN(1433)																			 ::zpp_nape::geom::ZPP_GeomVert ret58;
HXDLIN(1433)																			{
HXLINE(1433)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1433)																					ret58 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1433)																					ret58 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1433)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret58->next;
HXDLIN(1433)																					ret58->next = null();
            																				}
HXDLIN(1433)																				ret58->forced = false;
            																			}
HXDLIN(1433)																			{
HXLINE(1433)																				ret58->x = x29;
HXDLIN(1433)																				ret58->y = y28;
            																			}
HXDLIN(1433)																			p4 = ret58;
            																		}
HXLINE(1434)																		if (sndx) {
HXLINE(1434)																			p4->forced = true;
            																		}
HXLINE(1435)																		bool _hx_tmp143;
HXDLIN(1435)																		if ((p4->y != y0)) {
HXLINE(1435)																			_hx_tmp143 = (p4->y == y1);
            																		}
            																		else {
HXLINE(1435)																			_hx_tmp143 = true;
            																		}
HXDLIN(1435)																		if (_hx_tmp143) {
HXLINE(1436)																			bool _hx_tmp144;
HXDLIN(1436)																			bool _hx_tmp145;
HXDLIN(1436)																			if ((p4->y == y0)) {
HXLINE(1436)																				_hx_tmp145 = ((val4 & 4) != 0);
            																			}
            																			else {
HXLINE(1436)																				_hx_tmp145 = false;
            																			}
HXDLIN(1436)																			if (!(_hx_tmp145)) {
HXLINE(1436)																				if ((p4->y == y1)) {
HXLINE(1436)																					_hx_tmp144 = ((val4 & 16) != 0);
            																				}
            																				else {
HXLINE(1436)																					_hx_tmp144 = false;
            																				}
            																			}
            																			else {
HXLINE(1436)																				_hx_tmp144 = true;
            																			}
HXDLIN(1436)																			if (_hx_tmp144) {
HXLINE(1436)																				val4 = (val4 ^ 8);
            																			}
            																		}
            																	}
            																	else {
HXLINE(1440)																		p4 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1441)																		if (hx::IsNull( p4 )) {
HXLINE(1442)																			Float y29 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1442)																			 ::zpp_nape::geom::ZPP_GeomVert ret59;
HXDLIN(1442)																			{
HXLINE(1442)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1442)																					ret59 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1442)																					ret59 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1442)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret59->next;
HXDLIN(1442)																					ret59->next = null();
            																				}
HXDLIN(1442)																				ret59->forced = false;
            																			}
HXDLIN(1442)																			{
HXLINE(1442)																				ret59->x = x0;
HXDLIN(1442)																				ret59->y = y29;
            																			}
HXDLIN(1442)																			p4 = ret59;
HXLINE(1443)																			ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p4;
            																		}
            																		else {
HXLINE(1445)																			Float x30 = p4->x;
HXDLIN(1445)																			Float y30 = p4->y;
HXDLIN(1445)																			 ::zpp_nape::geom::ZPP_GeomVert ret60;
HXDLIN(1445)																			{
HXLINE(1445)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1445)																					ret60 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1445)																					ret60 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1445)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret60->next;
HXDLIN(1445)																					ret60->next = null();
            																				}
HXDLIN(1445)																				ret60->forced = false;
            																			}
HXDLIN(1445)																			{
HXLINE(1445)																				ret60->x = x30;
HXDLIN(1445)																				ret60->y = y30;
            																			}
HXDLIN(1445)																			p4 = ret60;
            																		}
HXLINE(1446)																		if (fstx) {
HXLINE(1446)																			p4->forced = true;
            																		}
HXLINE(1447)																		bool _hx_tmp146;
HXDLIN(1447)																		if ((p4->y != y0)) {
HXLINE(1447)																			_hx_tmp146 = (p4->y == y1);
            																		}
            																		else {
HXLINE(1447)																			_hx_tmp146 = true;
            																		}
HXDLIN(1447)																		if (_hx_tmp146) {
HXLINE(1448)																			bool _hx_tmp147;
HXDLIN(1448)																			bool _hx_tmp148;
HXDLIN(1448)																			if ((p4->y == y0)) {
HXLINE(1448)																				_hx_tmp148 = ((val4 & 1) != 0);
            																			}
            																			else {
HXLINE(1448)																				_hx_tmp148 = false;
            																			}
HXDLIN(1448)																			if (!(_hx_tmp148)) {
HXLINE(1448)																				if ((p4->y == y1)) {
HXLINE(1448)																					_hx_tmp147 = ((val4 & 64) != 0);
            																				}
            																				else {
HXLINE(1448)																					_hx_tmp147 = false;
            																				}
            																			}
            																			else {
HXLINE(1448)																				_hx_tmp147 = true;
            																			}
HXDLIN(1448)																			if (_hx_tmp147) {
HXLINE(1448)																				val4 = (val4 ^ 128);
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXLINE(1452)											 ::zpp_nape::geom::ZPP_GeomVert obj4 = p4;
HXLINE(1453)											if (hx::IsNull( ret->p1 )) {
HXLINE(1453)												ret->p1 = (obj4->prev = (obj4->next = obj4));
            											}
            											else {
HXLINE(1455)												obj4->prev = ret->p1;
HXLINE(1456)												obj4->next = ret->p1->next;
HXLINE(1457)												ret->p1->next->prev = obj4;
HXLINE(1458)												ret->p1->next = obj4;
            											}
HXLINE(1451)											ret->p1 = obj4;
            										}
            									}
            								}
HXLINE(1464)								ret->p1 = ret->p1->next;
HXLINE(1465)								ret->key1 = val4;
HXLINE(1466)								bool _hx_tmp149;
HXDLIN(1466)								bool _hx_tmp150;
HXDLIN(1466)								bool _hx_tmp151;
HXDLIN(1466)								bool _hx_tmp152;
HXDLIN(1466)								bool _hx_tmp153;
HXDLIN(1466)								bool _hx_tmp154;
HXDLIN(1466)								bool _hx_tmp155;
HXDLIN(1466)								bool _hx_tmp156;
HXDLIN(1466)								bool _hx_tmp157;
HXDLIN(1466)								bool _hx_tmp158;
HXDLIN(1466)								bool _hx_tmp159;
HXDLIN(1466)								bool _hx_tmp160;
HXDLIN(1466)								bool _hx_tmp161;
HXDLIN(1466)								bool _hx_tmp162;
HXDLIN(1466)								bool _hx_tmp163;
HXDLIN(1466)								bool _hx_tmp164;
HXDLIN(1466)								bool _hx_tmp165;
HXDLIN(1466)								if ((val4 != 1)) {
HXLINE(1466)									_hx_tmp165 = (val4 == 4);
            								}
            								else {
HXLINE(1466)									_hx_tmp165 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp165)) {
HXLINE(1466)									_hx_tmp164 = (val4 == 16);
            								}
            								else {
HXLINE(1466)									_hx_tmp164 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp164)) {
HXLINE(1466)									_hx_tmp163 = (val4 == 64);
            								}
            								else {
HXLINE(1466)									_hx_tmp163 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp163)) {
HXLINE(1466)									_hx_tmp162 = (val4 == 3);
            								}
            								else {
HXLINE(1466)									_hx_tmp162 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp162)) {
HXLINE(1466)									_hx_tmp161 = (val4 == 12);
            								}
            								else {
HXLINE(1466)									_hx_tmp161 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp161)) {
HXLINE(1466)									_hx_tmp160 = (val4 == 48);
            								}
            								else {
HXLINE(1466)									_hx_tmp160 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp160)) {
HXLINE(1466)									_hx_tmp159 = (val4 == 192);
            								}
            								else {
HXLINE(1466)									_hx_tmp159 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp159)) {
HXLINE(1466)									_hx_tmp158 = (val4 == 129);
            								}
            								else {
HXLINE(1466)									_hx_tmp158 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp158)) {
HXLINE(1466)									_hx_tmp157 = (val4 == 6);
            								}
            								else {
HXLINE(1466)									_hx_tmp157 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp157)) {
HXLINE(1466)									_hx_tmp156 = (val4 == 24);
            								}
            								else {
HXLINE(1466)									_hx_tmp156 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp156)) {
HXLINE(1466)									_hx_tmp155 = (val4 == 96);
            								}
            								else {
HXLINE(1466)									_hx_tmp155 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp155)) {
HXLINE(1466)									_hx_tmp154 = (val4 == 5);
            								}
            								else {
HXLINE(1466)									_hx_tmp154 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp154)) {
HXLINE(1466)									_hx_tmp153 = (val4 == 20);
            								}
            								else {
HXLINE(1466)									_hx_tmp153 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp153)) {
HXLINE(1466)									_hx_tmp152 = (val4 == 80);
            								}
            								else {
HXLINE(1466)									_hx_tmp152 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp152)) {
HXLINE(1466)									_hx_tmp151 = (val4 == 65);
            								}
            								else {
HXLINE(1466)									_hx_tmp151 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp151)) {
HXLINE(1466)									_hx_tmp150 = (val4 == 17);
            								}
            								else {
HXLINE(1466)									_hx_tmp150 = true;
            								}
HXDLIN(1466)								if (!(_hx_tmp150)) {
HXLINE(1466)									_hx_tmp149 = (val4 == 68);
            								}
            								else {
HXLINE(1466)									_hx_tmp149 = true;
            								}
HXDLIN(1466)								if (_hx_tmp149) {
HXLINE(1467)									val4 = 0;
HXLINE(1468)									ret->key1 = 0;
HXLINE(1469)									ret->p1 = null();
            								}
            							}
HXLINE(1472)							if ((val4 == 0)) {
HXLINE(1472)								ret = null();
            							}
            							else {
HXLINE(1474)								ret->pr = ret->p1;
HXLINE(1475)								ret->okeyr = ret->okey1;
HXLINE(1476)								ret->keyr = ret->key1;
            							}
            						}
            					}
            				}
            				else {
HXLINE(1482)					if (mid) {
HXLINE(1483)						int val5 = 238;
HXLINE(1484)						{
HXLINE(1485)							ret->okey1 = val5;
HXLINE(1486)							{
HXLINE(1486)								int _g5 = 0;
HXDLIN(1486)								while((_g5 < 8)){
HXLINE(1486)									_g5 = (_g5 + 1);
HXDLIN(1486)									int i5 = (_g5 - 1);
HXLINE(1487)									if (((val5 & (1 << i5)) != 0)) {
HXLINE(1488)										 ::zpp_nape::geom::ZPP_GeomVert p5 = null();
HXLINE(1489)										if ((i5 == 0)) {
HXLINE(1490)											 ::zpp_nape::geom::ZPP_GeomVert ret61;
HXDLIN(1490)											{
HXLINE(1490)												if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1490)													ret61 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1490)													ret61 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1490)													::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret61->next;
HXDLIN(1490)													ret61->next = null();
            												}
HXDLIN(1490)												ret61->forced = false;
            											}
HXDLIN(1490)											{
HXLINE(1490)												ret61->x = x0;
HXDLIN(1490)												ret61->y = y0;
            											}
HXDLIN(1490)											p5 = ret61;
HXLINE(1491)											bool _hx_tmp166;
HXDLIN(1491)											if (!(fstx)) {
HXLINE(1491)												_hx_tmp166 = fsty;
            											}
            											else {
HXLINE(1491)												_hx_tmp166 = true;
            											}
HXDLIN(1491)											if (_hx_tmp166) {
HXLINE(1491)												p5->forced = true;
            											}
            										}
            										else {
HXLINE(1493)											if ((i5 == 2)) {
HXLINE(1494)												 ::zpp_nape::geom::ZPP_GeomVert ret62;
HXDLIN(1494)												{
HXLINE(1494)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1494)														ret62 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1494)														ret62 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1494)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret62->next;
HXDLIN(1494)														ret62->next = null();
            													}
HXDLIN(1494)													ret62->forced = false;
            												}
HXDLIN(1494)												{
HXLINE(1494)													ret62->x = x1;
HXDLIN(1494)													ret62->y = y0;
            												}
HXDLIN(1494)												p5 = ret62;
HXLINE(1495)												bool _hx_tmp167;
HXDLIN(1495)												if (!(sndx)) {
HXLINE(1495)													_hx_tmp167 = fsty;
            												}
            												else {
HXLINE(1495)													_hx_tmp167 = true;
            												}
HXDLIN(1495)												if (_hx_tmp167) {
HXLINE(1495)													p5->forced = true;
            												}
            											}
            											else {
HXLINE(1497)												if ((i5 == 4)) {
HXLINE(1498)													 ::zpp_nape::geom::ZPP_GeomVert ret63;
HXDLIN(1498)													{
HXLINE(1498)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1498)															ret63 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1498)															ret63 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1498)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret63->next;
HXDLIN(1498)															ret63->next = null();
            														}
HXDLIN(1498)														ret63->forced = false;
            													}
HXDLIN(1498)													{
HXLINE(1498)														ret63->x = x1;
HXDLIN(1498)														ret63->y = y1;
            													}
HXDLIN(1498)													p5 = ret63;
HXLINE(1499)													bool _hx_tmp168;
HXDLIN(1499)													if (!(sndx)) {
HXLINE(1499)														_hx_tmp168 = sndy;
            													}
            													else {
HXLINE(1499)														_hx_tmp168 = true;
            													}
HXDLIN(1499)													if (_hx_tmp168) {
HXLINE(1499)														p5->forced = true;
            													}
            												}
            												else {
HXLINE(1501)													if ((i5 == 6)) {
HXLINE(1502)														 ::zpp_nape::geom::ZPP_GeomVert ret64;
HXDLIN(1502)														{
HXLINE(1502)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1502)																ret64 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1502)																ret64 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1502)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret64->next;
HXDLIN(1502)																ret64->next = null();
            															}
HXDLIN(1502)															ret64->forced = false;
            														}
HXDLIN(1502)														{
HXLINE(1502)															ret64->x = x0;
HXDLIN(1502)															ret64->y = y1;
            														}
HXDLIN(1502)														p5 = ret64;
HXLINE(1503)														bool _hx_tmp169;
HXDLIN(1503)														if (!(fstx)) {
HXLINE(1503)															_hx_tmp169 = sndy;
            														}
            														else {
HXLINE(1503)															_hx_tmp169 = true;
            														}
HXDLIN(1503)														if (_hx_tmp169) {
HXLINE(1503)															p5->forced = true;
            														}
            													}
            													else {
HXLINE(1505)														if ((i5 == 1)) {
HXLINE(1506)															p5 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1507)															if (hx::IsNull( p5 )) {
HXLINE(1508)																Float x31 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1508)																 ::zpp_nape::geom::ZPP_GeomVert ret65;
HXDLIN(1508)																{
HXLINE(1508)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1508)																		ret65 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1508)																		ret65 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1508)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret65->next;
HXDLIN(1508)																		ret65->next = null();
            																	}
HXDLIN(1508)																	ret65->forced = false;
            																}
HXDLIN(1508)																{
HXLINE(1508)																	ret65->x = x31;
HXDLIN(1508)																	ret65->y = y0;
            																}
HXDLIN(1508)																p5 = ret65;
HXLINE(1509)																ints->list[(((yn << 1) * ints->width) + xn)] = p5;
            															}
            															else {
HXLINE(1511)																Float x32 = p5->x;
HXDLIN(1511)																Float y31 = p5->y;
HXDLIN(1511)																 ::zpp_nape::geom::ZPP_GeomVert ret66;
HXDLIN(1511)																{
HXLINE(1511)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1511)																		ret66 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1511)																		ret66 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1511)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret66->next;
HXDLIN(1511)																		ret66->next = null();
            																	}
HXDLIN(1511)																	ret66->forced = false;
            																}
HXDLIN(1511)																{
HXLINE(1511)																	ret66->x = x32;
HXDLIN(1511)																	ret66->y = y31;
            																}
HXDLIN(1511)																p5 = ret66;
            															}
HXLINE(1512)															if (fsty) {
HXLINE(1512)																p5->forced = true;
            															}
HXLINE(1513)															bool _hx_tmp170;
HXDLIN(1513)															if ((p5->x != x0)) {
HXLINE(1513)																_hx_tmp170 = (p5->x == x1);
            															}
            															else {
HXLINE(1513)																_hx_tmp170 = true;
            															}
HXDLIN(1513)															if (_hx_tmp170) {
HXLINE(1514)																bool _hx_tmp171;
HXDLIN(1514)																bool _hx_tmp172;
HXDLIN(1514)																if ((p5->x == x0)) {
HXLINE(1514)																	_hx_tmp172 = ((val5 & 1) != 0);
            																}
            																else {
HXLINE(1514)																	_hx_tmp172 = false;
            																}
HXDLIN(1514)																if (!(_hx_tmp172)) {
HXLINE(1514)																	if ((p5->x == x1)) {
HXLINE(1514)																		_hx_tmp171 = ((val5 & 4) != 0);
            																	}
            																	else {
HXLINE(1514)																		_hx_tmp171 = false;
            																	}
            																}
            																else {
HXLINE(1514)																	_hx_tmp171 = true;
            																}
HXDLIN(1514)																if (_hx_tmp171) {
HXLINE(1514)																	val5 = (val5 ^ 2);
            																}
            															}
            														}
            														else {
HXLINE(1517)															if ((i5 == 5)) {
HXLINE(1518)																p5 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1519)																if (hx::IsNull( p5 )) {
HXLINE(1520)																	Float x33 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1520)																	 ::zpp_nape::geom::ZPP_GeomVert ret67;
HXDLIN(1520)																	{
HXLINE(1520)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1520)																			ret67 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1520)																			ret67 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1520)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret67->next;
HXDLIN(1520)																			ret67->next = null();
            																		}
HXDLIN(1520)																		ret67->forced = false;
            																	}
HXDLIN(1520)																	{
HXLINE(1520)																		ret67->x = x33;
HXDLIN(1520)																		ret67->y = y1;
            																	}
HXDLIN(1520)																	p5 = ret67;
HXLINE(1521)																	ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p5;
            																}
            																else {
HXLINE(1523)																	Float x34 = p5->x;
HXDLIN(1523)																	Float y32 = p5->y;
HXDLIN(1523)																	 ::zpp_nape::geom::ZPP_GeomVert ret68;
HXDLIN(1523)																	{
HXLINE(1523)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1523)																			ret68 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1523)																			ret68 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1523)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret68->next;
HXDLIN(1523)																			ret68->next = null();
            																		}
HXDLIN(1523)																		ret68->forced = false;
            																	}
HXDLIN(1523)																	{
HXLINE(1523)																		ret68->x = x34;
HXDLIN(1523)																		ret68->y = y32;
            																	}
HXDLIN(1523)																	p5 = ret68;
            																}
HXLINE(1524)																if (sndy) {
HXLINE(1524)																	p5->forced = true;
            																}
HXLINE(1525)																bool _hx_tmp173;
HXDLIN(1525)																if ((p5->x != x0)) {
HXLINE(1525)																	_hx_tmp173 = (p5->x == x1);
            																}
            																else {
HXLINE(1525)																	_hx_tmp173 = true;
            																}
HXDLIN(1525)																if (_hx_tmp173) {
HXLINE(1526)																	bool _hx_tmp174;
HXDLIN(1526)																	bool _hx_tmp175;
HXDLIN(1526)																	if ((p5->x == x0)) {
HXLINE(1526)																		_hx_tmp175 = ((val5 & 64) != 0);
            																	}
            																	else {
HXLINE(1526)																		_hx_tmp175 = false;
            																	}
HXDLIN(1526)																	if (!(_hx_tmp175)) {
HXLINE(1526)																		if ((p5->x == x1)) {
HXLINE(1526)																			_hx_tmp174 = ((val5 & 16) != 0);
            																		}
            																		else {
HXLINE(1526)																			_hx_tmp174 = false;
            																		}
            																	}
            																	else {
HXLINE(1526)																		_hx_tmp174 = true;
            																	}
HXDLIN(1526)																	if (_hx_tmp174) {
HXLINE(1526)																		val5 = (val5 ^ 32);
            																	}
            																}
            															}
            															else {
HXLINE(1529)																if ((i5 == 3)) {
HXLINE(1530)																	p5 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1531)																	if (hx::IsNull( p5 )) {
HXLINE(1532)																		Float y33 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1532)																		 ::zpp_nape::geom::ZPP_GeomVert ret69;
HXDLIN(1532)																		{
HXLINE(1532)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1532)																				ret69 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1532)																				ret69 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1532)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret69->next;
HXDLIN(1532)																				ret69->next = null();
            																			}
HXDLIN(1532)																			ret69->forced = false;
            																		}
HXDLIN(1532)																		{
HXLINE(1532)																			ret69->x = x1;
HXDLIN(1532)																			ret69->y = y33;
            																		}
HXDLIN(1532)																		p5 = ret69;
HXLINE(1533)																		ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p5;
            																	}
            																	else {
HXLINE(1535)																		Float x35 = p5->x;
HXDLIN(1535)																		Float y34 = p5->y;
HXDLIN(1535)																		 ::zpp_nape::geom::ZPP_GeomVert ret70;
HXDLIN(1535)																		{
HXLINE(1535)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1535)																				ret70 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1535)																				ret70 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1535)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret70->next;
HXDLIN(1535)																				ret70->next = null();
            																			}
HXDLIN(1535)																			ret70->forced = false;
            																		}
HXDLIN(1535)																		{
HXLINE(1535)																			ret70->x = x35;
HXDLIN(1535)																			ret70->y = y34;
            																		}
HXDLIN(1535)																		p5 = ret70;
            																	}
HXLINE(1536)																	if (sndx) {
HXLINE(1536)																		p5->forced = true;
            																	}
HXLINE(1537)																	bool _hx_tmp176;
HXDLIN(1537)																	if ((p5->y != y0)) {
HXLINE(1537)																		_hx_tmp176 = (p5->y == y1);
            																	}
            																	else {
HXLINE(1537)																		_hx_tmp176 = true;
            																	}
HXDLIN(1537)																	if (_hx_tmp176) {
HXLINE(1538)																		bool _hx_tmp177;
HXDLIN(1538)																		bool _hx_tmp178;
HXDLIN(1538)																		if ((p5->y == y0)) {
HXLINE(1538)																			_hx_tmp178 = ((val5 & 4) != 0);
            																		}
            																		else {
HXLINE(1538)																			_hx_tmp178 = false;
            																		}
HXDLIN(1538)																		if (!(_hx_tmp178)) {
HXLINE(1538)																			if ((p5->y == y1)) {
HXLINE(1538)																				_hx_tmp177 = ((val5 & 16) != 0);
            																			}
            																			else {
HXLINE(1538)																				_hx_tmp177 = false;
            																			}
            																		}
            																		else {
HXLINE(1538)																			_hx_tmp177 = true;
            																		}
HXDLIN(1538)																		if (_hx_tmp177) {
HXLINE(1538)																			val5 = (val5 ^ 8);
            																		}
            																	}
            																}
            																else {
HXLINE(1542)																	p5 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1543)																	if (hx::IsNull( p5 )) {
HXLINE(1544)																		Float y35 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1544)																		 ::zpp_nape::geom::ZPP_GeomVert ret71;
HXDLIN(1544)																		{
HXLINE(1544)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1544)																				ret71 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1544)																				ret71 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1544)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret71->next;
HXDLIN(1544)																				ret71->next = null();
            																			}
HXDLIN(1544)																			ret71->forced = false;
            																		}
HXDLIN(1544)																		{
HXLINE(1544)																			ret71->x = x0;
HXDLIN(1544)																			ret71->y = y35;
            																		}
HXDLIN(1544)																		p5 = ret71;
HXLINE(1545)																		ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p5;
            																	}
            																	else {
HXLINE(1547)																		Float x36 = p5->x;
HXDLIN(1547)																		Float y36 = p5->y;
HXDLIN(1547)																		 ::zpp_nape::geom::ZPP_GeomVert ret72;
HXDLIN(1547)																		{
HXLINE(1547)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1547)																				ret72 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1547)																				ret72 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1547)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret72->next;
HXDLIN(1547)																				ret72->next = null();
            																			}
HXDLIN(1547)																			ret72->forced = false;
            																		}
HXDLIN(1547)																		{
HXLINE(1547)																			ret72->x = x36;
HXDLIN(1547)																			ret72->y = y36;
            																		}
HXDLIN(1547)																		p5 = ret72;
            																	}
HXLINE(1548)																	if (fstx) {
HXLINE(1548)																		p5->forced = true;
            																	}
HXLINE(1549)																	bool _hx_tmp179;
HXDLIN(1549)																	if ((p5->y != y0)) {
HXLINE(1549)																		_hx_tmp179 = (p5->y == y1);
            																	}
            																	else {
HXLINE(1549)																		_hx_tmp179 = true;
            																	}
HXDLIN(1549)																	if (_hx_tmp179) {
HXLINE(1550)																		bool _hx_tmp180;
HXDLIN(1550)																		bool _hx_tmp181;
HXDLIN(1550)																		if ((p5->y == y0)) {
HXLINE(1550)																			_hx_tmp181 = ((val5 & 1) != 0);
            																		}
            																		else {
HXLINE(1550)																			_hx_tmp181 = false;
            																		}
HXDLIN(1550)																		if (!(_hx_tmp181)) {
HXLINE(1550)																			if ((p5->y == y1)) {
HXLINE(1550)																				_hx_tmp180 = ((val5 & 64) != 0);
            																			}
            																			else {
HXLINE(1550)																				_hx_tmp180 = false;
            																			}
            																		}
            																		else {
HXLINE(1550)																			_hx_tmp180 = true;
            																		}
HXDLIN(1550)																		if (_hx_tmp180) {
HXLINE(1550)																			val5 = (val5 ^ 128);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXLINE(1554)										 ::zpp_nape::geom::ZPP_GeomVert obj5 = p5;
HXLINE(1555)										if (hx::IsNull( ret->p1 )) {
HXLINE(1555)											ret->p1 = (obj5->prev = (obj5->next = obj5));
            										}
            										else {
HXLINE(1557)											obj5->prev = ret->p1;
HXLINE(1558)											obj5->next = ret->p1->next;
HXLINE(1559)											ret->p1->next->prev = obj5;
HXLINE(1560)											ret->p1->next = obj5;
            										}
HXLINE(1553)										ret->p1 = obj5;
            									}
            								}
            							}
HXLINE(1566)							ret->p1 = ret->p1->next;
HXLINE(1567)							ret->key1 = val5;
HXLINE(1568)							bool _hx_tmp182;
HXDLIN(1568)							bool _hx_tmp183;
HXDLIN(1568)							bool _hx_tmp184;
HXDLIN(1568)							bool _hx_tmp185;
HXDLIN(1568)							bool _hx_tmp186;
HXDLIN(1568)							bool _hx_tmp187;
HXDLIN(1568)							bool _hx_tmp188;
HXDLIN(1568)							bool _hx_tmp189;
HXDLIN(1568)							bool _hx_tmp190;
HXDLIN(1568)							bool _hx_tmp191;
HXDLIN(1568)							bool _hx_tmp192;
HXDLIN(1568)							bool _hx_tmp193;
HXDLIN(1568)							bool _hx_tmp194;
HXDLIN(1568)							bool _hx_tmp195;
HXDLIN(1568)							bool _hx_tmp196;
HXDLIN(1568)							bool _hx_tmp197;
HXDLIN(1568)							bool _hx_tmp198;
HXDLIN(1568)							if ((val5 != 1)) {
HXLINE(1568)								_hx_tmp198 = (val5 == 4);
            							}
            							else {
HXLINE(1568)								_hx_tmp198 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp198)) {
HXLINE(1568)								_hx_tmp197 = (val5 == 16);
            							}
            							else {
HXLINE(1568)								_hx_tmp197 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp197)) {
HXLINE(1568)								_hx_tmp196 = (val5 == 64);
            							}
            							else {
HXLINE(1568)								_hx_tmp196 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp196)) {
HXLINE(1568)								_hx_tmp195 = (val5 == 3);
            							}
            							else {
HXLINE(1568)								_hx_tmp195 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp195)) {
HXLINE(1568)								_hx_tmp194 = (val5 == 12);
            							}
            							else {
HXLINE(1568)								_hx_tmp194 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp194)) {
HXLINE(1568)								_hx_tmp193 = (val5 == 48);
            							}
            							else {
HXLINE(1568)								_hx_tmp193 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp193)) {
HXLINE(1568)								_hx_tmp192 = (val5 == 192);
            							}
            							else {
HXLINE(1568)								_hx_tmp192 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp192)) {
HXLINE(1568)								_hx_tmp191 = (val5 == 129);
            							}
            							else {
HXLINE(1568)								_hx_tmp191 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp191)) {
HXLINE(1568)								_hx_tmp190 = (val5 == 6);
            							}
            							else {
HXLINE(1568)								_hx_tmp190 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp190)) {
HXLINE(1568)								_hx_tmp189 = (val5 == 24);
            							}
            							else {
HXLINE(1568)								_hx_tmp189 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp189)) {
HXLINE(1568)								_hx_tmp188 = (val5 == 96);
            							}
            							else {
HXLINE(1568)								_hx_tmp188 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp188)) {
HXLINE(1568)								_hx_tmp187 = (val5 == 5);
            							}
            							else {
HXLINE(1568)								_hx_tmp187 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp187)) {
HXLINE(1568)								_hx_tmp186 = (val5 == 20);
            							}
            							else {
HXLINE(1568)								_hx_tmp186 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp186)) {
HXLINE(1568)								_hx_tmp185 = (val5 == 80);
            							}
            							else {
HXLINE(1568)								_hx_tmp185 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp185)) {
HXLINE(1568)								_hx_tmp184 = (val5 == 65);
            							}
            							else {
HXLINE(1568)								_hx_tmp184 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp184)) {
HXLINE(1568)								_hx_tmp183 = (val5 == 17);
            							}
            							else {
HXLINE(1568)								_hx_tmp183 = true;
            							}
HXDLIN(1568)							if (!(_hx_tmp183)) {
HXLINE(1568)								_hx_tmp182 = (val5 == 68);
            							}
            							else {
HXLINE(1568)								_hx_tmp182 = true;
            							}
HXDLIN(1568)							if (_hx_tmp182) {
HXLINE(1569)								val5 = 0;
HXLINE(1570)								ret->key1 = 0;
HXLINE(1571)								ret->p1 = null();
            							}
            						}
HXLINE(1574)						if ((val5 == 0)) {
HXLINE(1574)							ret = null();
            						}
            						else {
HXLINE(1576)							ret->pr = ret->p1;
HXLINE(1577)							ret->okeyr = ret->okey1;
HXLINE(1578)							ret->keyr = ret->key1;
            						}
            					}
            					else {
HXLINE(1582)						int val6 = 224;
HXLINE(1583)						{
HXLINE(1584)							ret->okey1 = val6;
HXLINE(1585)							{
HXLINE(1585)								int _g6 = 0;
HXDLIN(1585)								while((_g6 < 8)){
HXLINE(1585)									_g6 = (_g6 + 1);
HXDLIN(1585)									int i6 = (_g6 - 1);
HXLINE(1586)									if (((val6 & (1 << i6)) != 0)) {
HXLINE(1587)										 ::zpp_nape::geom::ZPP_GeomVert p6 = null();
HXLINE(1588)										if ((i6 == 0)) {
HXLINE(1589)											 ::zpp_nape::geom::ZPP_GeomVert ret73;
HXDLIN(1589)											{
HXLINE(1589)												if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1589)													ret73 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1589)													ret73 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1589)													::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret73->next;
HXDLIN(1589)													ret73->next = null();
            												}
HXDLIN(1589)												ret73->forced = false;
            											}
HXDLIN(1589)											{
HXLINE(1589)												ret73->x = x0;
HXDLIN(1589)												ret73->y = y0;
            											}
HXDLIN(1589)											p6 = ret73;
HXLINE(1590)											bool _hx_tmp199;
HXDLIN(1590)											if (!(fstx)) {
HXLINE(1590)												_hx_tmp199 = fsty;
            											}
            											else {
HXLINE(1590)												_hx_tmp199 = true;
            											}
HXDLIN(1590)											if (_hx_tmp199) {
HXLINE(1590)												p6->forced = true;
            											}
            										}
            										else {
HXLINE(1592)											if ((i6 == 2)) {
HXLINE(1593)												 ::zpp_nape::geom::ZPP_GeomVert ret74;
HXDLIN(1593)												{
HXLINE(1593)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1593)														ret74 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1593)														ret74 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1593)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret74->next;
HXDLIN(1593)														ret74->next = null();
            													}
HXDLIN(1593)													ret74->forced = false;
            												}
HXDLIN(1593)												{
HXLINE(1593)													ret74->x = x1;
HXDLIN(1593)													ret74->y = y0;
            												}
HXDLIN(1593)												p6 = ret74;
HXLINE(1594)												bool _hx_tmp200;
HXDLIN(1594)												if (!(sndx)) {
HXLINE(1594)													_hx_tmp200 = fsty;
            												}
            												else {
HXLINE(1594)													_hx_tmp200 = true;
            												}
HXDLIN(1594)												if (_hx_tmp200) {
HXLINE(1594)													p6->forced = true;
            												}
            											}
            											else {
HXLINE(1596)												if ((i6 == 4)) {
HXLINE(1597)													 ::zpp_nape::geom::ZPP_GeomVert ret75;
HXDLIN(1597)													{
HXLINE(1597)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1597)															ret75 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1597)															ret75 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1597)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret75->next;
HXDLIN(1597)															ret75->next = null();
            														}
HXDLIN(1597)														ret75->forced = false;
            													}
HXDLIN(1597)													{
HXLINE(1597)														ret75->x = x1;
HXDLIN(1597)														ret75->y = y1;
            													}
HXDLIN(1597)													p6 = ret75;
HXLINE(1598)													bool _hx_tmp201;
HXDLIN(1598)													if (!(sndx)) {
HXLINE(1598)														_hx_tmp201 = sndy;
            													}
            													else {
HXLINE(1598)														_hx_tmp201 = true;
            													}
HXDLIN(1598)													if (_hx_tmp201) {
HXLINE(1598)														p6->forced = true;
            													}
            												}
            												else {
HXLINE(1600)													if ((i6 == 6)) {
HXLINE(1601)														 ::zpp_nape::geom::ZPP_GeomVert ret76;
HXDLIN(1601)														{
HXLINE(1601)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1601)																ret76 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1601)																ret76 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1601)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret76->next;
HXDLIN(1601)																ret76->next = null();
            															}
HXDLIN(1601)															ret76->forced = false;
            														}
HXDLIN(1601)														{
HXLINE(1601)															ret76->x = x0;
HXDLIN(1601)															ret76->y = y1;
            														}
HXDLIN(1601)														p6 = ret76;
HXLINE(1602)														bool _hx_tmp202;
HXDLIN(1602)														if (!(fstx)) {
HXLINE(1602)															_hx_tmp202 = sndy;
            														}
            														else {
HXLINE(1602)															_hx_tmp202 = true;
            														}
HXDLIN(1602)														if (_hx_tmp202) {
HXLINE(1602)															p6->forced = true;
            														}
            													}
            													else {
HXLINE(1604)														if ((i6 == 1)) {
HXLINE(1605)															p6 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1606)															if (hx::IsNull( p6 )) {
HXLINE(1607)																Float x37 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1607)																 ::zpp_nape::geom::ZPP_GeomVert ret77;
HXDLIN(1607)																{
HXLINE(1607)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1607)																		ret77 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1607)																		ret77 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1607)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret77->next;
HXDLIN(1607)																		ret77->next = null();
            																	}
HXDLIN(1607)																	ret77->forced = false;
            																}
HXDLIN(1607)																{
HXLINE(1607)																	ret77->x = x37;
HXDLIN(1607)																	ret77->y = y0;
            																}
HXDLIN(1607)																p6 = ret77;
HXLINE(1608)																ints->list[(((yn << 1) * ints->width) + xn)] = p6;
            															}
            															else {
HXLINE(1610)																Float x38 = p6->x;
HXDLIN(1610)																Float y37 = p6->y;
HXDLIN(1610)																 ::zpp_nape::geom::ZPP_GeomVert ret78;
HXDLIN(1610)																{
HXLINE(1610)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1610)																		ret78 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(1610)																		ret78 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1610)																		::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret78->next;
HXDLIN(1610)																		ret78->next = null();
            																	}
HXDLIN(1610)																	ret78->forced = false;
            																}
HXDLIN(1610)																{
HXLINE(1610)																	ret78->x = x38;
HXDLIN(1610)																	ret78->y = y37;
            																}
HXDLIN(1610)																p6 = ret78;
            															}
HXLINE(1611)															if (fsty) {
HXLINE(1611)																p6->forced = true;
            															}
HXLINE(1612)															bool _hx_tmp203;
HXDLIN(1612)															if ((p6->x != x0)) {
HXLINE(1612)																_hx_tmp203 = (p6->x == x1);
            															}
            															else {
HXLINE(1612)																_hx_tmp203 = true;
            															}
HXDLIN(1612)															if (_hx_tmp203) {
HXLINE(1613)																bool _hx_tmp204;
HXDLIN(1613)																bool _hx_tmp205;
HXDLIN(1613)																if ((p6->x == x0)) {
HXLINE(1613)																	_hx_tmp205 = ((val6 & 1) != 0);
            																}
            																else {
HXLINE(1613)																	_hx_tmp205 = false;
            																}
HXDLIN(1613)																if (!(_hx_tmp205)) {
HXLINE(1613)																	if ((p6->x == x1)) {
HXLINE(1613)																		_hx_tmp204 = ((val6 & 4) != 0);
            																	}
            																	else {
HXLINE(1613)																		_hx_tmp204 = false;
            																	}
            																}
            																else {
HXLINE(1613)																	_hx_tmp204 = true;
            																}
HXDLIN(1613)																if (_hx_tmp204) {
HXLINE(1613)																	val6 = (val6 ^ 2);
            																}
            															}
            														}
            														else {
HXLINE(1616)															if ((i6 == 5)) {
HXLINE(1617)																p6 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1618)																if (hx::IsNull( p6 )) {
HXLINE(1619)																	Float x39 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1619)																	 ::zpp_nape::geom::ZPP_GeomVert ret79;
HXDLIN(1619)																	{
HXLINE(1619)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1619)																			ret79 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1619)																			ret79 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1619)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret79->next;
HXDLIN(1619)																			ret79->next = null();
            																		}
HXDLIN(1619)																		ret79->forced = false;
            																	}
HXDLIN(1619)																	{
HXLINE(1619)																		ret79->x = x39;
HXDLIN(1619)																		ret79->y = y1;
            																	}
HXDLIN(1619)																	p6 = ret79;
HXLINE(1620)																	ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p6;
            																}
            																else {
HXLINE(1622)																	Float x40 = p6->x;
HXDLIN(1622)																	Float y38 = p6->y;
HXDLIN(1622)																	 ::zpp_nape::geom::ZPP_GeomVert ret80;
HXDLIN(1622)																	{
HXLINE(1622)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1622)																			ret80 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1622)																			ret80 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1622)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret80->next;
HXDLIN(1622)																			ret80->next = null();
            																		}
HXDLIN(1622)																		ret80->forced = false;
            																	}
HXDLIN(1622)																	{
HXLINE(1622)																		ret80->x = x40;
HXDLIN(1622)																		ret80->y = y38;
            																	}
HXDLIN(1622)																	p6 = ret80;
            																}
HXLINE(1623)																if (sndy) {
HXLINE(1623)																	p6->forced = true;
            																}
HXLINE(1624)																bool _hx_tmp206;
HXDLIN(1624)																if ((p6->x != x0)) {
HXLINE(1624)																	_hx_tmp206 = (p6->x == x1);
            																}
            																else {
HXLINE(1624)																	_hx_tmp206 = true;
            																}
HXDLIN(1624)																if (_hx_tmp206) {
HXLINE(1625)																	bool _hx_tmp207;
HXDLIN(1625)																	bool _hx_tmp208;
HXDLIN(1625)																	if ((p6->x == x0)) {
HXLINE(1625)																		_hx_tmp208 = ((val6 & 64) != 0);
            																	}
            																	else {
HXLINE(1625)																		_hx_tmp208 = false;
            																	}
HXDLIN(1625)																	if (!(_hx_tmp208)) {
HXLINE(1625)																		if ((p6->x == x1)) {
HXLINE(1625)																			_hx_tmp207 = ((val6 & 16) != 0);
            																		}
            																		else {
HXLINE(1625)																			_hx_tmp207 = false;
            																		}
            																	}
            																	else {
HXLINE(1625)																		_hx_tmp207 = true;
            																	}
HXDLIN(1625)																	if (_hx_tmp207) {
HXLINE(1625)																		val6 = (val6 ^ 32);
            																	}
            																}
            															}
            															else {
HXLINE(1628)																if ((i6 == 3)) {
HXLINE(1629)																	p6 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1630)																	if (hx::IsNull( p6 )) {
HXLINE(1631)																		Float y39 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1631)																		 ::zpp_nape::geom::ZPP_GeomVert ret81;
HXDLIN(1631)																		{
HXLINE(1631)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1631)																				ret81 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1631)																				ret81 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1631)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret81->next;
HXDLIN(1631)																				ret81->next = null();
            																			}
HXDLIN(1631)																			ret81->forced = false;
            																		}
HXDLIN(1631)																		{
HXLINE(1631)																			ret81->x = x1;
HXDLIN(1631)																			ret81->y = y39;
            																		}
HXDLIN(1631)																		p6 = ret81;
HXLINE(1632)																		ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p6;
            																	}
            																	else {
HXLINE(1634)																		Float x41 = p6->x;
HXDLIN(1634)																		Float y40 = p6->y;
HXDLIN(1634)																		 ::zpp_nape::geom::ZPP_GeomVert ret82;
HXDLIN(1634)																		{
HXLINE(1634)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1634)																				ret82 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1634)																				ret82 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1634)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret82->next;
HXDLIN(1634)																				ret82->next = null();
            																			}
HXDLIN(1634)																			ret82->forced = false;
            																		}
HXDLIN(1634)																		{
HXLINE(1634)																			ret82->x = x41;
HXDLIN(1634)																			ret82->y = y40;
            																		}
HXDLIN(1634)																		p6 = ret82;
            																	}
HXLINE(1635)																	if (sndx) {
HXLINE(1635)																		p6->forced = true;
            																	}
HXLINE(1636)																	bool _hx_tmp209;
HXDLIN(1636)																	if ((p6->y != y0)) {
HXLINE(1636)																		_hx_tmp209 = (p6->y == y1);
            																	}
            																	else {
HXLINE(1636)																		_hx_tmp209 = true;
            																	}
HXDLIN(1636)																	if (_hx_tmp209) {
HXLINE(1637)																		bool _hx_tmp210;
HXDLIN(1637)																		bool _hx_tmp211;
HXDLIN(1637)																		if ((p6->y == y0)) {
HXLINE(1637)																			_hx_tmp211 = ((val6 & 4) != 0);
            																		}
            																		else {
HXLINE(1637)																			_hx_tmp211 = false;
            																		}
HXDLIN(1637)																		if (!(_hx_tmp211)) {
HXLINE(1637)																			if ((p6->y == y1)) {
HXLINE(1637)																				_hx_tmp210 = ((val6 & 16) != 0);
            																			}
            																			else {
HXLINE(1637)																				_hx_tmp210 = false;
            																			}
            																		}
            																		else {
HXLINE(1637)																			_hx_tmp210 = true;
            																		}
HXDLIN(1637)																		if (_hx_tmp210) {
HXLINE(1637)																			val6 = (val6 ^ 8);
            																		}
            																	}
            																}
            																else {
HXLINE(1641)																	p6 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1642)																	if (hx::IsNull( p6 )) {
HXLINE(1643)																		Float y41 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1643)																		 ::zpp_nape::geom::ZPP_GeomVert ret83;
HXDLIN(1643)																		{
HXLINE(1643)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1643)																				ret83 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1643)																				ret83 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1643)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret83->next;
HXDLIN(1643)																				ret83->next = null();
            																			}
HXDLIN(1643)																			ret83->forced = false;
            																		}
HXDLIN(1643)																		{
HXLINE(1643)																			ret83->x = x0;
HXDLIN(1643)																			ret83->y = y41;
            																		}
HXDLIN(1643)																		p6 = ret83;
HXLINE(1644)																		ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p6;
            																	}
            																	else {
HXLINE(1646)																		Float x42 = p6->x;
HXDLIN(1646)																		Float y42 = p6->y;
HXDLIN(1646)																		 ::zpp_nape::geom::ZPP_GeomVert ret84;
HXDLIN(1646)																		{
HXLINE(1646)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1646)																				ret84 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1646)																				ret84 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1646)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret84->next;
HXDLIN(1646)																				ret84->next = null();
            																			}
HXDLIN(1646)																			ret84->forced = false;
            																		}
HXDLIN(1646)																		{
HXLINE(1646)																			ret84->x = x42;
HXDLIN(1646)																			ret84->y = y42;
            																		}
HXDLIN(1646)																		p6 = ret84;
            																	}
HXLINE(1647)																	if (fstx) {
HXLINE(1647)																		p6->forced = true;
            																	}
HXLINE(1648)																	bool _hx_tmp212;
HXDLIN(1648)																	if ((p6->y != y0)) {
HXLINE(1648)																		_hx_tmp212 = (p6->y == y1);
            																	}
            																	else {
HXLINE(1648)																		_hx_tmp212 = true;
            																	}
HXDLIN(1648)																	if (_hx_tmp212) {
HXLINE(1649)																		bool _hx_tmp213;
HXDLIN(1649)																		bool _hx_tmp214;
HXDLIN(1649)																		if ((p6->y == y0)) {
HXLINE(1649)																			_hx_tmp214 = ((val6 & 1) != 0);
            																		}
            																		else {
HXLINE(1649)																			_hx_tmp214 = false;
            																		}
HXDLIN(1649)																		if (!(_hx_tmp214)) {
HXLINE(1649)																			if ((p6->y == y1)) {
HXLINE(1649)																				_hx_tmp213 = ((val6 & 64) != 0);
            																			}
            																			else {
HXLINE(1649)																				_hx_tmp213 = false;
            																			}
            																		}
            																		else {
HXLINE(1649)																			_hx_tmp213 = true;
            																		}
HXDLIN(1649)																		if (_hx_tmp213) {
HXLINE(1649)																			val6 = (val6 ^ 128);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXLINE(1653)										 ::zpp_nape::geom::ZPP_GeomVert obj6 = p6;
HXLINE(1654)										if (hx::IsNull( ret->p1 )) {
HXLINE(1654)											ret->p1 = (obj6->prev = (obj6->next = obj6));
            										}
            										else {
HXLINE(1656)											obj6->prev = ret->p1;
HXLINE(1657)											obj6->next = ret->p1->next;
HXLINE(1658)											ret->p1->next->prev = obj6;
HXLINE(1659)											ret->p1->next = obj6;
            										}
HXLINE(1652)										ret->p1 = obj6;
            									}
            								}
            							}
HXLINE(1665)							ret->p1 = ret->p1->next;
HXLINE(1666)							ret->key1 = val6;
HXLINE(1667)							bool _hx_tmp215;
HXDLIN(1667)							bool _hx_tmp216;
HXDLIN(1667)							bool _hx_tmp217;
HXDLIN(1667)							bool _hx_tmp218;
HXDLIN(1667)							bool _hx_tmp219;
HXDLIN(1667)							bool _hx_tmp220;
HXDLIN(1667)							bool _hx_tmp221;
HXDLIN(1667)							bool _hx_tmp222;
HXDLIN(1667)							bool _hx_tmp223;
HXDLIN(1667)							bool _hx_tmp224;
HXDLIN(1667)							bool _hx_tmp225;
HXDLIN(1667)							bool _hx_tmp226;
HXDLIN(1667)							bool _hx_tmp227;
HXDLIN(1667)							bool _hx_tmp228;
HXDLIN(1667)							bool _hx_tmp229;
HXDLIN(1667)							bool _hx_tmp230;
HXDLIN(1667)							bool _hx_tmp231;
HXDLIN(1667)							if ((val6 != 1)) {
HXLINE(1667)								_hx_tmp231 = (val6 == 4);
            							}
            							else {
HXLINE(1667)								_hx_tmp231 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp231)) {
HXLINE(1667)								_hx_tmp230 = (val6 == 16);
            							}
            							else {
HXLINE(1667)								_hx_tmp230 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp230)) {
HXLINE(1667)								_hx_tmp229 = (val6 == 64);
            							}
            							else {
HXLINE(1667)								_hx_tmp229 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp229)) {
HXLINE(1667)								_hx_tmp228 = (val6 == 3);
            							}
            							else {
HXLINE(1667)								_hx_tmp228 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp228)) {
HXLINE(1667)								_hx_tmp227 = (val6 == 12);
            							}
            							else {
HXLINE(1667)								_hx_tmp227 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp227)) {
HXLINE(1667)								_hx_tmp226 = (val6 == 48);
            							}
            							else {
HXLINE(1667)								_hx_tmp226 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp226)) {
HXLINE(1667)								_hx_tmp225 = (val6 == 192);
            							}
            							else {
HXLINE(1667)								_hx_tmp225 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp225)) {
HXLINE(1667)								_hx_tmp224 = (val6 == 129);
            							}
            							else {
HXLINE(1667)								_hx_tmp224 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp224)) {
HXLINE(1667)								_hx_tmp223 = (val6 == 6);
            							}
            							else {
HXLINE(1667)								_hx_tmp223 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp223)) {
HXLINE(1667)								_hx_tmp222 = (val6 == 24);
            							}
            							else {
HXLINE(1667)								_hx_tmp222 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp222)) {
HXLINE(1667)								_hx_tmp221 = (val6 == 96);
            							}
            							else {
HXLINE(1667)								_hx_tmp221 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp221)) {
HXLINE(1667)								_hx_tmp220 = (val6 == 5);
            							}
            							else {
HXLINE(1667)								_hx_tmp220 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp220)) {
HXLINE(1667)								_hx_tmp219 = (val6 == 20);
            							}
            							else {
HXLINE(1667)								_hx_tmp219 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp219)) {
HXLINE(1667)								_hx_tmp218 = (val6 == 80);
            							}
            							else {
HXLINE(1667)								_hx_tmp218 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp218)) {
HXLINE(1667)								_hx_tmp217 = (val6 == 65);
            							}
            							else {
HXLINE(1667)								_hx_tmp217 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp217)) {
HXLINE(1667)								_hx_tmp216 = (val6 == 17);
            							}
            							else {
HXLINE(1667)								_hx_tmp216 = true;
            							}
HXDLIN(1667)							if (!(_hx_tmp216)) {
HXLINE(1667)								_hx_tmp215 = (val6 == 68);
            							}
            							else {
HXLINE(1667)								_hx_tmp215 = true;
            							}
HXDLIN(1667)							if (_hx_tmp215) {
HXLINE(1668)								val6 = 0;
HXLINE(1669)								ret->key1 = 0;
HXLINE(1670)								ret->p1 = null();
            							}
            						}
HXLINE(1673)						if ((val6 != 0)) {
HXLINE(1674)							int val7 = 14;
HXLINE(1675)							{
HXLINE(1676)								ret->okey2 = val7;
HXLINE(1677)								{
HXLINE(1677)									int _g7 = 0;
HXDLIN(1677)									while((_g7 < 8)){
HXLINE(1677)										_g7 = (_g7 + 1);
HXDLIN(1677)										int i7 = (_g7 - 1);
HXLINE(1678)										if (((val7 & (1 << i7)) != 0)) {
HXLINE(1679)											 ::zpp_nape::geom::ZPP_GeomVert p7 = null();
HXLINE(1680)											if ((i7 == 0)) {
HXLINE(1681)												 ::zpp_nape::geom::ZPP_GeomVert ret85;
HXDLIN(1681)												{
HXLINE(1681)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1681)														ret85 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1681)														ret85 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1681)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret85->next;
HXDLIN(1681)														ret85->next = null();
            													}
HXDLIN(1681)													ret85->forced = false;
            												}
HXDLIN(1681)												{
HXLINE(1681)													ret85->x = x0;
HXDLIN(1681)													ret85->y = y0;
            												}
HXDLIN(1681)												p7 = ret85;
HXLINE(1682)												bool _hx_tmp232;
HXDLIN(1682)												if (!(fstx)) {
HXLINE(1682)													_hx_tmp232 = fsty;
            												}
            												else {
HXLINE(1682)													_hx_tmp232 = true;
            												}
HXDLIN(1682)												if (_hx_tmp232) {
HXLINE(1682)													p7->forced = true;
            												}
            											}
            											else {
HXLINE(1684)												if ((i7 == 2)) {
HXLINE(1685)													 ::zpp_nape::geom::ZPP_GeomVert ret86;
HXDLIN(1685)													{
HXLINE(1685)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1685)															ret86 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1685)															ret86 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1685)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret86->next;
HXDLIN(1685)															ret86->next = null();
            														}
HXDLIN(1685)														ret86->forced = false;
            													}
HXDLIN(1685)													{
HXLINE(1685)														ret86->x = x1;
HXDLIN(1685)														ret86->y = y0;
            													}
HXDLIN(1685)													p7 = ret86;
HXLINE(1686)													bool _hx_tmp233;
HXDLIN(1686)													if (!(sndx)) {
HXLINE(1686)														_hx_tmp233 = fsty;
            													}
            													else {
HXLINE(1686)														_hx_tmp233 = true;
            													}
HXDLIN(1686)													if (_hx_tmp233) {
HXLINE(1686)														p7->forced = true;
            													}
            												}
            												else {
HXLINE(1688)													if ((i7 == 4)) {
HXLINE(1689)														 ::zpp_nape::geom::ZPP_GeomVert ret87;
HXDLIN(1689)														{
HXLINE(1689)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1689)																ret87 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1689)																ret87 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1689)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret87->next;
HXDLIN(1689)																ret87->next = null();
            															}
HXDLIN(1689)															ret87->forced = false;
            														}
HXDLIN(1689)														{
HXLINE(1689)															ret87->x = x1;
HXDLIN(1689)															ret87->y = y1;
            														}
HXDLIN(1689)														p7 = ret87;
HXLINE(1690)														bool _hx_tmp234;
HXDLIN(1690)														if (!(sndx)) {
HXLINE(1690)															_hx_tmp234 = sndy;
            														}
            														else {
HXLINE(1690)															_hx_tmp234 = true;
            														}
HXDLIN(1690)														if (_hx_tmp234) {
HXLINE(1690)															p7->forced = true;
            														}
            													}
            													else {
HXLINE(1692)														if ((i7 == 6)) {
HXLINE(1693)															 ::zpp_nape::geom::ZPP_GeomVert ret88;
HXDLIN(1693)															{
HXLINE(1693)																if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1693)																	ret88 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(1693)																	ret88 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1693)																	::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret88->next;
HXDLIN(1693)																	ret88->next = null();
            																}
HXDLIN(1693)																ret88->forced = false;
            															}
HXDLIN(1693)															{
HXLINE(1693)																ret88->x = x0;
HXDLIN(1693)																ret88->y = y1;
            															}
HXDLIN(1693)															p7 = ret88;
HXLINE(1694)															bool _hx_tmp235;
HXDLIN(1694)															if (!(fstx)) {
HXLINE(1694)																_hx_tmp235 = sndy;
            															}
            															else {
HXLINE(1694)																_hx_tmp235 = true;
            															}
HXDLIN(1694)															if (_hx_tmp235) {
HXLINE(1694)																p7->forced = true;
            															}
            														}
            														else {
HXLINE(1696)															if ((i7 == 1)) {
HXLINE(1697)																p7 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1698)																if (hx::IsNull( p7 )) {
HXLINE(1699)																	Float x43 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1699)																	 ::zpp_nape::geom::ZPP_GeomVert ret89;
HXDLIN(1699)																	{
HXLINE(1699)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1699)																			ret89 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1699)																			ret89 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1699)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret89->next;
HXDLIN(1699)																			ret89->next = null();
            																		}
HXDLIN(1699)																		ret89->forced = false;
            																	}
HXDLIN(1699)																	{
HXLINE(1699)																		ret89->x = x43;
HXDLIN(1699)																		ret89->y = y0;
            																	}
HXDLIN(1699)																	p7 = ret89;
HXLINE(1700)																	ints->list[(((yn << 1) * ints->width) + xn)] = p7;
            																}
            																else {
HXLINE(1702)																	Float x44 = p7->x;
HXDLIN(1702)																	Float y43 = p7->y;
HXDLIN(1702)																	 ::zpp_nape::geom::ZPP_GeomVert ret90;
HXDLIN(1702)																	{
HXLINE(1702)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1702)																			ret90 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1702)																			ret90 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1702)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret90->next;
HXDLIN(1702)																			ret90->next = null();
            																		}
HXDLIN(1702)																		ret90->forced = false;
            																	}
HXDLIN(1702)																	{
HXLINE(1702)																		ret90->x = x44;
HXDLIN(1702)																		ret90->y = y43;
            																	}
HXDLIN(1702)																	p7 = ret90;
            																}
HXLINE(1703)																if (fsty) {
HXLINE(1703)																	p7->forced = true;
            																}
HXLINE(1704)																bool _hx_tmp236;
HXDLIN(1704)																if ((p7->x != x0)) {
HXLINE(1704)																	_hx_tmp236 = (p7->x == x1);
            																}
            																else {
HXLINE(1704)																	_hx_tmp236 = true;
            																}
HXDLIN(1704)																if (_hx_tmp236) {
HXLINE(1705)																	bool _hx_tmp237;
HXDLIN(1705)																	bool _hx_tmp238;
HXDLIN(1705)																	if ((p7->x == x0)) {
HXLINE(1705)																		_hx_tmp238 = ((val7 & 1) != 0);
            																	}
            																	else {
HXLINE(1705)																		_hx_tmp238 = false;
            																	}
HXDLIN(1705)																	if (!(_hx_tmp238)) {
HXLINE(1705)																		if ((p7->x == x1)) {
HXLINE(1705)																			_hx_tmp237 = ((val7 & 4) != 0);
            																		}
            																		else {
HXLINE(1705)																			_hx_tmp237 = false;
            																		}
            																	}
            																	else {
HXLINE(1705)																		_hx_tmp237 = true;
            																	}
HXDLIN(1705)																	if (_hx_tmp237) {
HXLINE(1705)																		val7 = (val7 ^ 2);
            																	}
            																}
            															}
            															else {
HXLINE(1708)																if ((i7 == 5)) {
HXLINE(1709)																	p7 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1710)																	if (hx::IsNull( p7 )) {
HXLINE(1711)																		Float x45 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1711)																		 ::zpp_nape::geom::ZPP_GeomVert ret91;
HXDLIN(1711)																		{
HXLINE(1711)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1711)																				ret91 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1711)																				ret91 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1711)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret91->next;
HXDLIN(1711)																				ret91->next = null();
            																			}
HXDLIN(1711)																			ret91->forced = false;
            																		}
HXDLIN(1711)																		{
HXLINE(1711)																			ret91->x = x45;
HXDLIN(1711)																			ret91->y = y1;
            																		}
HXDLIN(1711)																		p7 = ret91;
HXLINE(1712)																		ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p7;
            																	}
            																	else {
HXLINE(1714)																		Float x46 = p7->x;
HXDLIN(1714)																		Float y44 = p7->y;
HXDLIN(1714)																		 ::zpp_nape::geom::ZPP_GeomVert ret92;
HXDLIN(1714)																		{
HXLINE(1714)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1714)																				ret92 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1714)																				ret92 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1714)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret92->next;
HXDLIN(1714)																				ret92->next = null();
            																			}
HXDLIN(1714)																			ret92->forced = false;
            																		}
HXDLIN(1714)																		{
HXLINE(1714)																			ret92->x = x46;
HXDLIN(1714)																			ret92->y = y44;
            																		}
HXDLIN(1714)																		p7 = ret92;
            																	}
HXLINE(1715)																	if (sndy) {
HXLINE(1715)																		p7->forced = true;
            																	}
HXLINE(1716)																	bool _hx_tmp239;
HXDLIN(1716)																	if ((p7->x != x0)) {
HXLINE(1716)																		_hx_tmp239 = (p7->x == x1);
            																	}
            																	else {
HXLINE(1716)																		_hx_tmp239 = true;
            																	}
HXDLIN(1716)																	if (_hx_tmp239) {
HXLINE(1717)																		bool _hx_tmp240;
HXDLIN(1717)																		bool _hx_tmp241;
HXDLIN(1717)																		if ((p7->x == x0)) {
HXLINE(1717)																			_hx_tmp241 = ((val7 & 64) != 0);
            																		}
            																		else {
HXLINE(1717)																			_hx_tmp241 = false;
            																		}
HXDLIN(1717)																		if (!(_hx_tmp241)) {
HXLINE(1717)																			if ((p7->x == x1)) {
HXLINE(1717)																				_hx_tmp240 = ((val7 & 16) != 0);
            																			}
            																			else {
HXLINE(1717)																				_hx_tmp240 = false;
            																			}
            																		}
            																		else {
HXLINE(1717)																			_hx_tmp240 = true;
            																		}
HXDLIN(1717)																		if (_hx_tmp240) {
HXLINE(1717)																			val7 = (val7 ^ 32);
            																		}
            																	}
            																}
            																else {
HXLINE(1720)																	if ((i7 == 3)) {
HXLINE(1721)																		p7 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1722)																		if (hx::IsNull( p7 )) {
HXLINE(1723)																			Float y45 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1723)																			 ::zpp_nape::geom::ZPP_GeomVert ret93;
HXDLIN(1723)																			{
HXLINE(1723)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1723)																					ret93 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1723)																					ret93 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1723)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret93->next;
HXDLIN(1723)																					ret93->next = null();
            																				}
HXDLIN(1723)																				ret93->forced = false;
            																			}
HXDLIN(1723)																			{
HXLINE(1723)																				ret93->x = x1;
HXDLIN(1723)																				ret93->y = y45;
            																			}
HXDLIN(1723)																			p7 = ret93;
HXLINE(1724)																			ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p7;
            																		}
            																		else {
HXLINE(1726)																			Float x47 = p7->x;
HXDLIN(1726)																			Float y46 = p7->y;
HXDLIN(1726)																			 ::zpp_nape::geom::ZPP_GeomVert ret94;
HXDLIN(1726)																			{
HXLINE(1726)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1726)																					ret94 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1726)																					ret94 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1726)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret94->next;
HXDLIN(1726)																					ret94->next = null();
            																				}
HXDLIN(1726)																				ret94->forced = false;
            																			}
HXDLIN(1726)																			{
HXLINE(1726)																				ret94->x = x47;
HXDLIN(1726)																				ret94->y = y46;
            																			}
HXDLIN(1726)																			p7 = ret94;
            																		}
HXLINE(1727)																		if (sndx) {
HXLINE(1727)																			p7->forced = true;
            																		}
HXLINE(1728)																		bool _hx_tmp242;
HXDLIN(1728)																		if ((p7->y != y0)) {
HXLINE(1728)																			_hx_tmp242 = (p7->y == y1);
            																		}
            																		else {
HXLINE(1728)																			_hx_tmp242 = true;
            																		}
HXDLIN(1728)																		if (_hx_tmp242) {
HXLINE(1729)																			bool _hx_tmp243;
HXDLIN(1729)																			bool _hx_tmp244;
HXDLIN(1729)																			if ((p7->y == y0)) {
HXLINE(1729)																				_hx_tmp244 = ((val7 & 4) != 0);
            																			}
            																			else {
HXLINE(1729)																				_hx_tmp244 = false;
            																			}
HXDLIN(1729)																			if (!(_hx_tmp244)) {
HXLINE(1729)																				if ((p7->y == y1)) {
HXLINE(1729)																					_hx_tmp243 = ((val7 & 16) != 0);
            																				}
            																				else {
HXLINE(1729)																					_hx_tmp243 = false;
            																				}
            																			}
            																			else {
HXLINE(1729)																				_hx_tmp243 = true;
            																			}
HXDLIN(1729)																			if (_hx_tmp243) {
HXLINE(1729)																				val7 = (val7 ^ 8);
            																			}
            																		}
            																	}
            																	else {
HXLINE(1733)																		p7 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1734)																		if (hx::IsNull( p7 )) {
HXLINE(1735)																			Float y47 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1735)																			 ::zpp_nape::geom::ZPP_GeomVert ret95;
HXDLIN(1735)																			{
HXLINE(1735)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1735)																					ret95 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1735)																					ret95 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1735)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret95->next;
HXDLIN(1735)																					ret95->next = null();
            																				}
HXDLIN(1735)																				ret95->forced = false;
            																			}
HXDLIN(1735)																			{
HXLINE(1735)																				ret95->x = x0;
HXDLIN(1735)																				ret95->y = y47;
            																			}
HXDLIN(1735)																			p7 = ret95;
HXLINE(1736)																			ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p7;
            																		}
            																		else {
HXLINE(1738)																			Float x48 = p7->x;
HXDLIN(1738)																			Float y48 = p7->y;
HXDLIN(1738)																			 ::zpp_nape::geom::ZPP_GeomVert ret96;
HXDLIN(1738)																			{
HXLINE(1738)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1738)																					ret96 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1738)																					ret96 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1738)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret96->next;
HXDLIN(1738)																					ret96->next = null();
            																				}
HXDLIN(1738)																				ret96->forced = false;
            																			}
HXDLIN(1738)																			{
HXLINE(1738)																				ret96->x = x48;
HXDLIN(1738)																				ret96->y = y48;
            																			}
HXDLIN(1738)																			p7 = ret96;
            																		}
HXLINE(1739)																		if (fstx) {
HXLINE(1739)																			p7->forced = true;
            																		}
HXLINE(1740)																		bool _hx_tmp245;
HXDLIN(1740)																		if ((p7->y != y0)) {
HXLINE(1740)																			_hx_tmp245 = (p7->y == y1);
            																		}
            																		else {
HXLINE(1740)																			_hx_tmp245 = true;
            																		}
HXDLIN(1740)																		if (_hx_tmp245) {
HXLINE(1741)																			bool _hx_tmp246;
HXDLIN(1741)																			bool _hx_tmp247;
HXDLIN(1741)																			if ((p7->y == y0)) {
HXLINE(1741)																				_hx_tmp247 = ((val7 & 1) != 0);
            																			}
            																			else {
HXLINE(1741)																				_hx_tmp247 = false;
            																			}
HXDLIN(1741)																			if (!(_hx_tmp247)) {
HXLINE(1741)																				if ((p7->y == y1)) {
HXLINE(1741)																					_hx_tmp246 = ((val7 & 64) != 0);
            																				}
            																				else {
HXLINE(1741)																					_hx_tmp246 = false;
            																				}
            																			}
            																			else {
HXLINE(1741)																				_hx_tmp246 = true;
            																			}
HXDLIN(1741)																			if (_hx_tmp246) {
HXLINE(1741)																				val7 = (val7 ^ 128);
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXLINE(1745)											 ::zpp_nape::geom::ZPP_GeomVert obj7 = p7;
HXLINE(1746)											if (hx::IsNull( ret->p2 )) {
HXLINE(1746)												ret->p2 = (obj7->prev = (obj7->next = obj7));
            											}
            											else {
HXLINE(1748)												obj7->prev = ret->p2;
HXLINE(1749)												obj7->next = ret->p2->next;
HXLINE(1750)												ret->p2->next->prev = obj7;
HXLINE(1751)												ret->p2->next = obj7;
            											}
HXLINE(1744)											ret->p2 = obj7;
            										}
            									}
            								}
HXLINE(1757)								ret->p2 = ret->p2->next;
HXLINE(1758)								ret->key2 = val7;
HXLINE(1759)								bool _hx_tmp248;
HXDLIN(1759)								bool _hx_tmp249;
HXDLIN(1759)								bool _hx_tmp250;
HXDLIN(1759)								bool _hx_tmp251;
HXDLIN(1759)								bool _hx_tmp252;
HXDLIN(1759)								bool _hx_tmp253;
HXDLIN(1759)								bool _hx_tmp254;
HXDLIN(1759)								bool _hx_tmp255;
HXDLIN(1759)								bool _hx_tmp256;
HXDLIN(1759)								bool _hx_tmp257;
HXDLIN(1759)								bool _hx_tmp258;
HXDLIN(1759)								bool _hx_tmp259;
HXDLIN(1759)								bool _hx_tmp260;
HXDLIN(1759)								bool _hx_tmp261;
HXDLIN(1759)								bool _hx_tmp262;
HXDLIN(1759)								bool _hx_tmp263;
HXDLIN(1759)								bool _hx_tmp264;
HXDLIN(1759)								if ((val7 != 1)) {
HXLINE(1759)									_hx_tmp264 = (val7 == 4);
            								}
            								else {
HXLINE(1759)									_hx_tmp264 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp264)) {
HXLINE(1759)									_hx_tmp263 = (val7 == 16);
            								}
            								else {
HXLINE(1759)									_hx_tmp263 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp263)) {
HXLINE(1759)									_hx_tmp262 = (val7 == 64);
            								}
            								else {
HXLINE(1759)									_hx_tmp262 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp262)) {
HXLINE(1759)									_hx_tmp261 = (val7 == 3);
            								}
            								else {
HXLINE(1759)									_hx_tmp261 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp261)) {
HXLINE(1759)									_hx_tmp260 = (val7 == 12);
            								}
            								else {
HXLINE(1759)									_hx_tmp260 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp260)) {
HXLINE(1759)									_hx_tmp259 = (val7 == 48);
            								}
            								else {
HXLINE(1759)									_hx_tmp259 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp259)) {
HXLINE(1759)									_hx_tmp258 = (val7 == 192);
            								}
            								else {
HXLINE(1759)									_hx_tmp258 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp258)) {
HXLINE(1759)									_hx_tmp257 = (val7 == 129);
            								}
            								else {
HXLINE(1759)									_hx_tmp257 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp257)) {
HXLINE(1759)									_hx_tmp256 = (val7 == 6);
            								}
            								else {
HXLINE(1759)									_hx_tmp256 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp256)) {
HXLINE(1759)									_hx_tmp255 = (val7 == 24);
            								}
            								else {
HXLINE(1759)									_hx_tmp255 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp255)) {
HXLINE(1759)									_hx_tmp254 = (val7 == 96);
            								}
            								else {
HXLINE(1759)									_hx_tmp254 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp254)) {
HXLINE(1759)									_hx_tmp253 = (val7 == 5);
            								}
            								else {
HXLINE(1759)									_hx_tmp253 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp253)) {
HXLINE(1759)									_hx_tmp252 = (val7 == 20);
            								}
            								else {
HXLINE(1759)									_hx_tmp252 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp252)) {
HXLINE(1759)									_hx_tmp251 = (val7 == 80);
            								}
            								else {
HXLINE(1759)									_hx_tmp251 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp251)) {
HXLINE(1759)									_hx_tmp250 = (val7 == 65);
            								}
            								else {
HXLINE(1759)									_hx_tmp250 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp250)) {
HXLINE(1759)									_hx_tmp249 = (val7 == 17);
            								}
            								else {
HXLINE(1759)									_hx_tmp249 = true;
            								}
HXDLIN(1759)								if (!(_hx_tmp249)) {
HXLINE(1759)									_hx_tmp248 = (val7 == 68);
            								}
            								else {
HXLINE(1759)									_hx_tmp248 = true;
            								}
HXDLIN(1759)								if (_hx_tmp248) {
HXLINE(1760)									val7 = 0;
HXLINE(1761)									ret->key2 = 0;
HXLINE(1762)									ret->p2 = null();
            								}
            							}
HXLINE(1765)							if ((val7 == 0)) {
HXLINE(1766)								ret->pr = ret->p1;
HXLINE(1767)								ret->okeyr = ret->okey1;
HXLINE(1768)								ret->keyr = ret->key1;
            							}
            							else {
HXLINE(1771)								ret->pr = ret->p2;
HXLINE(1772)								ret->okeyr = ret->okey2;
HXLINE(1773)								ret->keyr = ret->key2;
            							}
            						}
            						else {
HXLINE(1777)							int val8 = 14;
HXLINE(1778)							{
HXLINE(1779)								ret->okey1 = val8;
HXLINE(1780)								{
HXLINE(1780)									int _g8 = 0;
HXDLIN(1780)									while((_g8 < 8)){
HXLINE(1780)										_g8 = (_g8 + 1);
HXDLIN(1780)										int i8 = (_g8 - 1);
HXLINE(1781)										if (((val8 & (1 << i8)) != 0)) {
HXLINE(1782)											 ::zpp_nape::geom::ZPP_GeomVert p8 = null();
HXLINE(1783)											if ((i8 == 0)) {
HXLINE(1784)												 ::zpp_nape::geom::ZPP_GeomVert ret97;
HXDLIN(1784)												{
HXLINE(1784)													if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1784)														ret97 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE(1784)														ret97 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1784)														::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret97->next;
HXDLIN(1784)														ret97->next = null();
            													}
HXDLIN(1784)													ret97->forced = false;
            												}
HXDLIN(1784)												{
HXLINE(1784)													ret97->x = x0;
HXDLIN(1784)													ret97->y = y0;
            												}
HXDLIN(1784)												p8 = ret97;
HXLINE(1785)												bool _hx_tmp265;
HXDLIN(1785)												if (!(fstx)) {
HXLINE(1785)													_hx_tmp265 = fsty;
            												}
            												else {
HXLINE(1785)													_hx_tmp265 = true;
            												}
HXDLIN(1785)												if (_hx_tmp265) {
HXLINE(1785)													p8->forced = true;
            												}
            											}
            											else {
HXLINE(1787)												if ((i8 == 2)) {
HXLINE(1788)													 ::zpp_nape::geom::ZPP_GeomVert ret98;
HXDLIN(1788)													{
HXLINE(1788)														if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1788)															ret98 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1788)															ret98 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1788)															::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret98->next;
HXDLIN(1788)															ret98->next = null();
            														}
HXDLIN(1788)														ret98->forced = false;
            													}
HXDLIN(1788)													{
HXLINE(1788)														ret98->x = x1;
HXDLIN(1788)														ret98->y = y0;
            													}
HXDLIN(1788)													p8 = ret98;
HXLINE(1789)													bool _hx_tmp266;
HXDLIN(1789)													if (!(sndx)) {
HXLINE(1789)														_hx_tmp266 = fsty;
            													}
            													else {
HXLINE(1789)														_hx_tmp266 = true;
            													}
HXDLIN(1789)													if (_hx_tmp266) {
HXLINE(1789)														p8->forced = true;
            													}
            												}
            												else {
HXLINE(1791)													if ((i8 == 4)) {
HXLINE(1792)														 ::zpp_nape::geom::ZPP_GeomVert ret99;
HXDLIN(1792)														{
HXLINE(1792)															if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1792)																ret99 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1792)																ret99 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1792)																::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret99->next;
HXDLIN(1792)																ret99->next = null();
            															}
HXDLIN(1792)															ret99->forced = false;
            														}
HXDLIN(1792)														{
HXLINE(1792)															ret99->x = x1;
HXDLIN(1792)															ret99->y = y1;
            														}
HXDLIN(1792)														p8 = ret99;
HXLINE(1793)														bool _hx_tmp267;
HXDLIN(1793)														if (!(sndx)) {
HXLINE(1793)															_hx_tmp267 = sndy;
            														}
            														else {
HXLINE(1793)															_hx_tmp267 = true;
            														}
HXDLIN(1793)														if (_hx_tmp267) {
HXLINE(1793)															p8->forced = true;
            														}
            													}
            													else {
HXLINE(1795)														if ((i8 == 6)) {
HXLINE(1796)															 ::zpp_nape::geom::ZPP_GeomVert ret100;
HXDLIN(1796)															{
HXLINE(1796)																if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1796)																	ret100 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																}
            																else {
HXLINE(1796)																	ret100 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1796)																	::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret100->next;
HXDLIN(1796)																	ret100->next = null();
            																}
HXDLIN(1796)																ret100->forced = false;
            															}
HXDLIN(1796)															{
HXLINE(1796)																ret100->x = x0;
HXDLIN(1796)																ret100->y = y1;
            															}
HXDLIN(1796)															p8 = ret100;
HXLINE(1797)															bool _hx_tmp268;
HXDLIN(1797)															if (!(fstx)) {
HXLINE(1797)																_hx_tmp268 = sndy;
            															}
            															else {
HXLINE(1797)																_hx_tmp268 = true;
            															}
HXDLIN(1797)															if (_hx_tmp268) {
HXLINE(1797)																p8->forced = true;
            															}
            														}
            														else {
HXLINE(1799)															if ((i8 == 1)) {
HXLINE(1800)																p8 = ints->list->__get((((yn << 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1801)																if (hx::IsNull( p8 )) {
HXLINE(1802)																	Float x49 = this->xlerp(x0,x1,y0,v0,v1,iso,quality);
HXDLIN(1802)																	 ::zpp_nape::geom::ZPP_GeomVert ret101;
HXDLIN(1802)																	{
HXLINE(1802)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1802)																			ret101 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1802)																			ret101 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1802)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret101->next;
HXDLIN(1802)																			ret101->next = null();
            																		}
HXDLIN(1802)																		ret101->forced = false;
            																	}
HXDLIN(1802)																	{
HXLINE(1802)																		ret101->x = x49;
HXDLIN(1802)																		ret101->y = y0;
            																	}
HXDLIN(1802)																	p8 = ret101;
HXLINE(1803)																	ints->list[(((yn << 1) * ints->width) + xn)] = p8;
            																}
            																else {
HXLINE(1805)																	Float x50 = p8->x;
HXDLIN(1805)																	Float y49 = p8->y;
HXDLIN(1805)																	 ::zpp_nape::geom::ZPP_GeomVert ret102;
HXDLIN(1805)																	{
HXLINE(1805)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1805)																			ret102 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(1805)																			ret102 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1805)																			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret102->next;
HXDLIN(1805)																			ret102->next = null();
            																		}
HXDLIN(1805)																		ret102->forced = false;
            																	}
HXDLIN(1805)																	{
HXLINE(1805)																		ret102->x = x50;
HXDLIN(1805)																		ret102->y = y49;
            																	}
HXDLIN(1805)																	p8 = ret102;
            																}
HXLINE(1806)																if (fsty) {
HXLINE(1806)																	p8->forced = true;
            																}
HXLINE(1807)																bool _hx_tmp269;
HXDLIN(1807)																if ((p8->x != x0)) {
HXLINE(1807)																	_hx_tmp269 = (p8->x == x1);
            																}
            																else {
HXLINE(1807)																	_hx_tmp269 = true;
            																}
HXDLIN(1807)																if (_hx_tmp269) {
HXLINE(1808)																	bool _hx_tmp270;
HXDLIN(1808)																	bool _hx_tmp271;
HXDLIN(1808)																	if ((p8->x == x0)) {
HXLINE(1808)																		_hx_tmp271 = ((val8 & 1) != 0);
            																	}
            																	else {
HXLINE(1808)																		_hx_tmp271 = false;
            																	}
HXDLIN(1808)																	if (!(_hx_tmp271)) {
HXLINE(1808)																		if ((p8->x == x1)) {
HXLINE(1808)																			_hx_tmp270 = ((val8 & 4) != 0);
            																		}
            																		else {
HXLINE(1808)																			_hx_tmp270 = false;
            																		}
            																	}
            																	else {
HXLINE(1808)																		_hx_tmp270 = true;
            																	}
HXDLIN(1808)																	if (_hx_tmp270) {
HXLINE(1808)																		val8 = (val8 ^ 2);
            																	}
            																}
            															}
            															else {
HXLINE(1811)																if ((i8 == 5)) {
HXLINE(1812)																	p8 = ints->list->__get(((((yn << 1) + 2) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1813)																	if (hx::IsNull( p8 )) {
HXLINE(1814)																		Float x51 = this->xlerp(x0,x1,y1,v3,v2,iso,quality);
HXDLIN(1814)																		 ::zpp_nape::geom::ZPP_GeomVert ret103;
HXDLIN(1814)																		{
HXLINE(1814)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1814)																				ret103 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1814)																				ret103 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1814)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret103->next;
HXDLIN(1814)																				ret103->next = null();
            																			}
HXDLIN(1814)																			ret103->forced = false;
            																		}
HXDLIN(1814)																		{
HXLINE(1814)																			ret103->x = x51;
HXDLIN(1814)																			ret103->y = y1;
            																		}
HXDLIN(1814)																		p8 = ret103;
HXLINE(1815)																		ints->list[((((yn << 1) + 2) * ints->width) + xn)] = p8;
            																	}
            																	else {
HXLINE(1817)																		Float x52 = p8->x;
HXDLIN(1817)																		Float y50 = p8->y;
HXDLIN(1817)																		 ::zpp_nape::geom::ZPP_GeomVert ret104;
HXDLIN(1817)																		{
HXLINE(1817)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1817)																				ret104 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(1817)																				ret104 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1817)																				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret104->next;
HXDLIN(1817)																				ret104->next = null();
            																			}
HXDLIN(1817)																			ret104->forced = false;
            																		}
HXDLIN(1817)																		{
HXLINE(1817)																			ret104->x = x52;
HXDLIN(1817)																			ret104->y = y50;
            																		}
HXDLIN(1817)																		p8 = ret104;
            																	}
HXLINE(1818)																	if (sndy) {
HXLINE(1818)																		p8->forced = true;
            																	}
HXLINE(1819)																	bool _hx_tmp272;
HXDLIN(1819)																	if ((p8->x != x0)) {
HXLINE(1819)																		_hx_tmp272 = (p8->x == x1);
            																	}
            																	else {
HXLINE(1819)																		_hx_tmp272 = true;
            																	}
HXDLIN(1819)																	if (_hx_tmp272) {
HXLINE(1820)																		bool _hx_tmp273;
HXDLIN(1820)																		bool _hx_tmp274;
HXDLIN(1820)																		if ((p8->x == x0)) {
HXLINE(1820)																			_hx_tmp274 = ((val8 & 64) != 0);
            																		}
            																		else {
HXLINE(1820)																			_hx_tmp274 = false;
            																		}
HXDLIN(1820)																		if (!(_hx_tmp274)) {
HXLINE(1820)																			if ((p8->x == x1)) {
HXLINE(1820)																				_hx_tmp273 = ((val8 & 16) != 0);
            																			}
            																			else {
HXLINE(1820)																				_hx_tmp273 = false;
            																			}
            																		}
            																		else {
HXLINE(1820)																			_hx_tmp273 = true;
            																		}
HXDLIN(1820)																		if (_hx_tmp273) {
HXLINE(1820)																			val8 = (val8 ^ 32);
            																		}
            																	}
            																}
            																else {
HXLINE(1823)																	if ((i8 == 3)) {
HXLINE(1824)																		p8 = ints->list->__get(((((yn << 1) + 1) * ints->width) + (xn + 1))).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1825)																		if (hx::IsNull( p8 )) {
HXLINE(1826)																			Float y51 = this->ylerp(y0,y1,x1,v1,v2,iso,quality);
HXDLIN(1826)																			 ::zpp_nape::geom::ZPP_GeomVert ret105;
HXDLIN(1826)																			{
HXLINE(1826)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1826)																					ret105 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1826)																					ret105 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1826)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret105->next;
HXDLIN(1826)																					ret105->next = null();
            																				}
HXDLIN(1826)																				ret105->forced = false;
            																			}
HXDLIN(1826)																			{
HXLINE(1826)																				ret105->x = x1;
HXDLIN(1826)																				ret105->y = y51;
            																			}
HXDLIN(1826)																			p8 = ret105;
HXLINE(1827)																			ints->list[((((yn << 1) + 1) * ints->width) + (xn + 1))] = p8;
            																		}
            																		else {
HXLINE(1829)																			Float x53 = p8->x;
HXDLIN(1829)																			Float y52 = p8->y;
HXDLIN(1829)																			 ::zpp_nape::geom::ZPP_GeomVert ret106;
HXDLIN(1829)																			{
HXLINE(1829)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1829)																					ret106 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1829)																					ret106 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1829)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret106->next;
HXDLIN(1829)																					ret106->next = null();
            																				}
HXDLIN(1829)																				ret106->forced = false;
            																			}
HXDLIN(1829)																			{
HXLINE(1829)																				ret106->x = x53;
HXDLIN(1829)																				ret106->y = y52;
            																			}
HXDLIN(1829)																			p8 = ret106;
            																		}
HXLINE(1830)																		if (sndx) {
HXLINE(1830)																			p8->forced = true;
            																		}
HXLINE(1831)																		bool _hx_tmp275;
HXDLIN(1831)																		if ((p8->y != y0)) {
HXLINE(1831)																			_hx_tmp275 = (p8->y == y1);
            																		}
            																		else {
HXLINE(1831)																			_hx_tmp275 = true;
            																		}
HXDLIN(1831)																		if (_hx_tmp275) {
HXLINE(1832)																			bool _hx_tmp276;
HXDLIN(1832)																			bool _hx_tmp277;
HXDLIN(1832)																			if ((p8->y == y0)) {
HXLINE(1832)																				_hx_tmp277 = ((val8 & 4) != 0);
            																			}
            																			else {
HXLINE(1832)																				_hx_tmp277 = false;
            																			}
HXDLIN(1832)																			if (!(_hx_tmp277)) {
HXLINE(1832)																				if ((p8->y == y1)) {
HXLINE(1832)																					_hx_tmp276 = ((val8 & 16) != 0);
            																				}
            																				else {
HXLINE(1832)																					_hx_tmp276 = false;
            																				}
            																			}
            																			else {
HXLINE(1832)																				_hx_tmp276 = true;
            																			}
HXDLIN(1832)																			if (_hx_tmp276) {
HXLINE(1832)																				val8 = (val8 ^ 8);
            																			}
            																		}
            																	}
            																	else {
HXLINE(1836)																		p8 = ints->list->__get(((((yn << 1) + 1) * ints->width) + xn)).StaticCast<  ::zpp_nape::geom::ZPP_GeomVert >();
HXLINE(1837)																		if (hx::IsNull( p8 )) {
HXLINE(1838)																			Float y53 = this->ylerp(y0,y1,x0,v0,v3,iso,quality);
HXDLIN(1838)																			 ::zpp_nape::geom::ZPP_GeomVert ret107;
HXDLIN(1838)																			{
HXLINE(1838)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1838)																					ret107 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1838)																					ret107 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1838)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret107->next;
HXDLIN(1838)																					ret107->next = null();
            																				}
HXDLIN(1838)																				ret107->forced = false;
            																			}
HXDLIN(1838)																			{
HXLINE(1838)																				ret107->x = x0;
HXDLIN(1838)																				ret107->y = y53;
            																			}
HXDLIN(1838)																			p8 = ret107;
HXLINE(1839)																			ints->list[((((yn << 1) + 1) * ints->width) + xn)] = p8;
            																		}
            																		else {
HXLINE(1841)																			Float x54 = p8->x;
HXDLIN(1841)																			Float y54 = p8->y;
HXDLIN(1841)																			 ::zpp_nape::geom::ZPP_GeomVert ret108;
HXDLIN(1841)																			{
HXLINE(1841)																				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1841)																					ret108 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            																				}
            																				else {
HXLINE(1841)																					ret108 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1841)																					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret108->next;
HXDLIN(1841)																					ret108->next = null();
            																				}
HXDLIN(1841)																				ret108->forced = false;
            																			}
HXDLIN(1841)																			{
HXLINE(1841)																				ret108->x = x54;
HXDLIN(1841)																				ret108->y = y54;
            																			}
HXDLIN(1841)																			p8 = ret108;
            																		}
HXLINE(1842)																		if (fstx) {
HXLINE(1842)																			p8->forced = true;
            																		}
HXLINE(1843)																		bool _hx_tmp278;
HXDLIN(1843)																		if ((p8->y != y0)) {
HXLINE(1843)																			_hx_tmp278 = (p8->y == y1);
            																		}
            																		else {
HXLINE(1843)																			_hx_tmp278 = true;
            																		}
HXDLIN(1843)																		if (_hx_tmp278) {
HXLINE(1844)																			bool _hx_tmp279;
HXDLIN(1844)																			bool _hx_tmp280;
HXDLIN(1844)																			if ((p8->y == y0)) {
HXLINE(1844)																				_hx_tmp280 = ((val8 & 1) != 0);
            																			}
            																			else {
HXLINE(1844)																				_hx_tmp280 = false;
            																			}
HXDLIN(1844)																			if (!(_hx_tmp280)) {
HXLINE(1844)																				if ((p8->y == y1)) {
HXLINE(1844)																					_hx_tmp279 = ((val8 & 64) != 0);
            																				}
            																				else {
HXLINE(1844)																					_hx_tmp279 = false;
            																				}
            																			}
            																			else {
HXLINE(1844)																				_hx_tmp279 = true;
            																			}
HXDLIN(1844)																			if (_hx_tmp279) {
HXLINE(1844)																				val8 = (val8 ^ 128);
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXLINE(1848)											 ::zpp_nape::geom::ZPP_GeomVert obj8 = p8;
HXLINE(1849)											if (hx::IsNull( ret->p1 )) {
HXLINE(1849)												ret->p1 = (obj8->prev = (obj8->next = obj8));
            											}
            											else {
HXLINE(1851)												obj8->prev = ret->p1;
HXLINE(1852)												obj8->next = ret->p1->next;
HXLINE(1853)												ret->p1->next->prev = obj8;
HXLINE(1854)												ret->p1->next = obj8;
            											}
HXLINE(1847)											ret->p1 = obj8;
            										}
            									}
            								}
HXLINE(1860)								ret->p1 = ret->p1->next;
HXLINE(1861)								ret->key1 = val8;
HXLINE(1862)								bool _hx_tmp281;
HXDLIN(1862)								bool _hx_tmp282;
HXDLIN(1862)								bool _hx_tmp283;
HXDLIN(1862)								bool _hx_tmp284;
HXDLIN(1862)								bool _hx_tmp285;
HXDLIN(1862)								bool _hx_tmp286;
HXDLIN(1862)								bool _hx_tmp287;
HXDLIN(1862)								bool _hx_tmp288;
HXDLIN(1862)								bool _hx_tmp289;
HXDLIN(1862)								bool _hx_tmp290;
HXDLIN(1862)								bool _hx_tmp291;
HXDLIN(1862)								bool _hx_tmp292;
HXDLIN(1862)								bool _hx_tmp293;
HXDLIN(1862)								bool _hx_tmp294;
HXDLIN(1862)								bool _hx_tmp295;
HXDLIN(1862)								bool _hx_tmp296;
HXDLIN(1862)								bool _hx_tmp297;
HXDLIN(1862)								if ((val8 != 1)) {
HXLINE(1862)									_hx_tmp297 = (val8 == 4);
            								}
            								else {
HXLINE(1862)									_hx_tmp297 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp297)) {
HXLINE(1862)									_hx_tmp296 = (val8 == 16);
            								}
            								else {
HXLINE(1862)									_hx_tmp296 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp296)) {
HXLINE(1862)									_hx_tmp295 = (val8 == 64);
            								}
            								else {
HXLINE(1862)									_hx_tmp295 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp295)) {
HXLINE(1862)									_hx_tmp294 = (val8 == 3);
            								}
            								else {
HXLINE(1862)									_hx_tmp294 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp294)) {
HXLINE(1862)									_hx_tmp293 = (val8 == 12);
            								}
            								else {
HXLINE(1862)									_hx_tmp293 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp293)) {
HXLINE(1862)									_hx_tmp292 = (val8 == 48);
            								}
            								else {
HXLINE(1862)									_hx_tmp292 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp292)) {
HXLINE(1862)									_hx_tmp291 = (val8 == 192);
            								}
            								else {
HXLINE(1862)									_hx_tmp291 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp291)) {
HXLINE(1862)									_hx_tmp290 = (val8 == 129);
            								}
            								else {
HXLINE(1862)									_hx_tmp290 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp290)) {
HXLINE(1862)									_hx_tmp289 = (val8 == 6);
            								}
            								else {
HXLINE(1862)									_hx_tmp289 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp289)) {
HXLINE(1862)									_hx_tmp288 = (val8 == 24);
            								}
            								else {
HXLINE(1862)									_hx_tmp288 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp288)) {
HXLINE(1862)									_hx_tmp287 = (val8 == 96);
            								}
            								else {
HXLINE(1862)									_hx_tmp287 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp287)) {
HXLINE(1862)									_hx_tmp286 = (val8 == 5);
            								}
            								else {
HXLINE(1862)									_hx_tmp286 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp286)) {
HXLINE(1862)									_hx_tmp285 = (val8 == 20);
            								}
            								else {
HXLINE(1862)									_hx_tmp285 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp285)) {
HXLINE(1862)									_hx_tmp284 = (val8 == 80);
            								}
            								else {
HXLINE(1862)									_hx_tmp284 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp284)) {
HXLINE(1862)									_hx_tmp283 = (val8 == 65);
            								}
            								else {
HXLINE(1862)									_hx_tmp283 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp283)) {
HXLINE(1862)									_hx_tmp282 = (val8 == 17);
            								}
            								else {
HXLINE(1862)									_hx_tmp282 = true;
            								}
HXDLIN(1862)								if (!(_hx_tmp282)) {
HXLINE(1862)									_hx_tmp281 = (val8 == 68);
            								}
            								else {
HXLINE(1862)									_hx_tmp281 = true;
            								}
HXDLIN(1862)								if (_hx_tmp281) {
HXLINE(1863)									val8 = 0;
HXLINE(1864)									ret->key1 = 0;
HXLINE(1865)									ret->p1 = null();
            								}
            							}
HXLINE(1868)							if ((val8 == 0)) {
HXLINE(1868)								ret = null();
            							}
            							else {
HXLINE(1870)								ret->pr = ret->p1;
HXLINE(1871)								ret->okeyr = ret->okey1;
HXLINE(1872)								ret->keyr = ret->key1;
            							}
            						}
            					}
            				}
            			}
HXLINE(1878)			return ret;
            		}
HXLINE( 964)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC14(ZPP_MarchingSquares_obj,marchSquare,return )

Float ZPP_MarchingSquares_obj::lerp(Float x0,Float x1,Float v0,Float v1){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_1883_lerp)
HXDLIN(1883)		if ((v0 == 0)) {
HXDLIN(1883)			return x0;
            		}
            		else {
HXLINE(1884)			if ((v1 == 0)) {
HXLINE(1884)				return x1;
            			}
            			else {
HXLINE(1886)				Float dv = (v0 - v1);
HXLINE(1887)				Float t;
HXDLIN(1887)				if (((dv * dv) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1887)					t = ((Float)0.5);
            				}
            				else {
HXLINE(1887)					t = (v0 / dv);
            				}
HXLINE(1888)				if ((t < 0)) {
HXLINE(1888)					t = ( (Float)(0) );
            				}
            				else {
HXLINE(1889)					if ((t > 1)) {
HXLINE(1889)						t = ( (Float)(1) );
            					}
            				}
HXLINE(1890)				return (x0 + (t * (x1 - x0)));
            			}
            		}
HXLINE(1883)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_MarchingSquares_obj,lerp,return )

Float ZPP_MarchingSquares_obj::xlerp(Float x0,Float x1,Float y,Float v0,Float v1, ::Dynamic iso,int quality){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_1893_xlerp)
HXLINE(1894)		Float xm;
HXDLIN(1894)		if ((v0 == 0)) {
HXLINE(1894)			xm = x0;
            		}
            		else {
HXLINE(1894)			if ((v1 == 0)) {
HXLINE(1894)				xm = x1;
            			}
            			else {
HXLINE(1894)				Float dv = (v0 - v1);
HXDLIN(1894)				Float t;
HXDLIN(1894)				if (((dv * dv) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1894)					t = ((Float)0.5);
            				}
            				else {
HXLINE(1894)					t = (v0 / dv);
            				}
HXDLIN(1894)				if ((t < 0)) {
HXLINE(1894)					t = ( (Float)(0) );
            				}
            				else {
HXLINE(1894)					if ((t > 1)) {
HXLINE(1894)						t = ( (Float)(1) );
            					}
            				}
HXDLIN(1894)				xm = (x0 + (t * (x1 - x0)));
            			}
            		}
HXLINE(1895)		while(true){
HXLINE(1895)			bool _hx_tmp;
HXDLIN(1895)			bool _hx_tmp1;
HXDLIN(1895)			quality = (quality - 1);
HXDLIN(1895)			if (((quality + 1) != 0)) {
HXLINE(1895)				_hx_tmp1 = (x0 < xm);
            			}
            			else {
HXLINE(1895)				_hx_tmp1 = false;
            			}
HXDLIN(1895)			if (_hx_tmp1) {
HXLINE(1895)				_hx_tmp = (xm < x1);
            			}
            			else {
HXLINE(1895)				_hx_tmp = false;
            			}
HXDLIN(1895)			if (!(_hx_tmp)) {
HXLINE(1895)				goto _hx_goto_27;
            			}
HXLINE(1896)			Float vm = ( (Float)(iso(xm,y)) );
HXLINE(1897)			if ((vm == 0)) {
HXLINE(1897)				goto _hx_goto_27;
            			}
HXLINE(1898)			if (((v0 * vm) < 0)) {
HXLINE(1899)				x1 = xm;
HXLINE(1900)				v1 = vm;
            			}
            			else {
HXLINE(1903)				x0 = xm;
HXLINE(1904)				v0 = vm;
            			}
HXLINE(1906)			if ((v0 == 0)) {
HXLINE(1906)				xm = x0;
            			}
            			else {
HXLINE(1906)				if ((v1 == 0)) {
HXLINE(1906)					xm = x1;
            				}
            				else {
HXLINE(1906)					Float dv1 = (v0 - v1);
HXDLIN(1906)					Float t1;
HXDLIN(1906)					if (((dv1 * dv1) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1906)						t1 = ((Float)0.5);
            					}
            					else {
HXLINE(1906)						t1 = (v0 / dv1);
            					}
HXDLIN(1906)					if ((t1 < 0)) {
HXLINE(1906)						t1 = ( (Float)(0) );
            					}
            					else {
HXLINE(1906)						if ((t1 > 1)) {
HXLINE(1906)							t1 = ( (Float)(1) );
            						}
            					}
HXDLIN(1906)					xm = (x0 + (t1 * (x1 - x0)));
            				}
            			}
            		}
            		_hx_goto_27:;
HXLINE(1908)		return xm;
            	}


HX_DEFINE_DYNAMIC_FUNC7(ZPP_MarchingSquares_obj,xlerp,return )

Float ZPP_MarchingSquares_obj::ylerp(Float y0,Float y1,Float x,Float v0,Float v1, ::Dynamic iso,int quality){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_1910_ylerp)
HXLINE(1911)		Float ym;
HXDLIN(1911)		if ((v0 == 0)) {
HXLINE(1911)			ym = y0;
            		}
            		else {
HXLINE(1911)			if ((v1 == 0)) {
HXLINE(1911)				ym = y1;
            			}
            			else {
HXLINE(1911)				Float dv = (v0 - v1);
HXDLIN(1911)				Float t;
HXDLIN(1911)				if (((dv * dv) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1911)					t = ((Float)0.5);
            				}
            				else {
HXLINE(1911)					t = (v0 / dv);
            				}
HXDLIN(1911)				if ((t < 0)) {
HXLINE(1911)					t = ( (Float)(0) );
            				}
            				else {
HXLINE(1911)					if ((t > 1)) {
HXLINE(1911)						t = ( (Float)(1) );
            					}
            				}
HXDLIN(1911)				ym = (y0 + (t * (y1 - y0)));
            			}
            		}
HXLINE(1912)		while(true){
HXLINE(1912)			bool _hx_tmp;
HXDLIN(1912)			bool _hx_tmp1;
HXDLIN(1912)			quality = (quality - 1);
HXDLIN(1912)			if (((quality + 1) != 0)) {
HXLINE(1912)				_hx_tmp1 = (y0 < ym);
            			}
            			else {
HXLINE(1912)				_hx_tmp1 = false;
            			}
HXDLIN(1912)			if (_hx_tmp1) {
HXLINE(1912)				_hx_tmp = (ym < y1);
            			}
            			else {
HXLINE(1912)				_hx_tmp = false;
            			}
HXDLIN(1912)			if (!(_hx_tmp)) {
HXLINE(1912)				goto _hx_goto_29;
            			}
HXLINE(1913)			Float vm = ( (Float)(iso(x,ym)) );
HXLINE(1914)			if ((vm == 0)) {
HXLINE(1914)				goto _hx_goto_29;
            			}
HXLINE(1915)			if (((v0 * vm) < 0)) {
HXLINE(1916)				y1 = ym;
HXLINE(1917)				v1 = vm;
            			}
            			else {
HXLINE(1920)				y0 = ym;
HXLINE(1921)				v0 = vm;
            			}
HXLINE(1923)			if ((v0 == 0)) {
HXLINE(1923)				ym = y0;
            			}
            			else {
HXLINE(1923)				if ((v1 == 0)) {
HXLINE(1923)					ym = y1;
            				}
            				else {
HXLINE(1923)					Float dv1 = (v0 - v1);
HXDLIN(1923)					Float t1;
HXDLIN(1923)					if (((dv1 * dv1) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1923)						t1 = ((Float)0.5);
            					}
            					else {
HXLINE(1923)						t1 = (v0 / dv1);
            					}
HXDLIN(1923)					if ((t1 < 0)) {
HXLINE(1923)						t1 = ( (Float)(0) );
            					}
            					else {
HXLINE(1923)						if ((t1 > 1)) {
HXLINE(1923)							t1 = ( (Float)(1) );
            						}
            					}
HXDLIN(1923)					ym = (y0 + (t1 * (y1 - y0)));
            				}
            			}
            		}
            		_hx_goto_29:;
HXLINE(1925)		return ym;
            	}


HX_DEFINE_DYNAMIC_FUNC7(ZPP_MarchingSquares_obj,ylerp,return )

 ::zpp_nape::geom::ZPP_MarchingSquares ZPP_MarchingSquares_obj::me;

 ::zpp_nape::util::ZNPArray2_Float ZPP_MarchingSquares_obj::isos;

 ::zpp_nape::util::ZNPArray2_ZPP_GeomVert ZPP_MarchingSquares_obj::ints;

 ::zpp_nape::util::ZNPArray2_ZPP_MarchPair ZPP_MarchingSquares_obj::map;

void ZPP_MarchingSquares_obj::run( ::Dynamic iso,Float bx0,Float by0,Float bx1,Float by1, ::nape::geom::Vec2 cell,int quality,bool combine, ::nape::geom::GeomPolyList ret){
            	HX_GC_STACKFRAME(&_hx_pos_d9331f34ff3f6620_276_run)
HXLINE( 277)		bool xp;
HXDLIN( 277)		if (hx::IsNotNull( cell )) {
HXLINE( 277)			xp = cell->zpp_disp;
            		}
            		else {
HXLINE( 277)			xp = false;
            		}
HXDLIN( 277)		if (xp) {
HXLINE( 277)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 277)		{
HXLINE( 277)			 ::zpp_nape::geom::ZPP_Vec2 _this = cell->zpp_inner;
HXDLIN( 277)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 277)				_this->_validate();
            			}
            		}
HXDLIN( 277)		Float xp1 = ((bx1 - bx0) / cell->zpp_inner->x);
HXLINE( 278)		int xn = ::Std_obj::_hx_int(xp1);
HXLINE( 279)		bool yp;
HXDLIN( 279)		if (hx::IsNotNull( cell )) {
HXLINE( 279)			yp = cell->zpp_disp;
            		}
            		else {
HXLINE( 279)			yp = false;
            		}
HXDLIN( 279)		if (yp) {
HXLINE( 279)			HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            		}
HXDLIN( 279)		{
HXLINE( 279)			 ::zpp_nape::geom::ZPP_Vec2 _this1 = cell->zpp_inner;
HXDLIN( 279)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 279)				_this1->_validate();
            			}
            		}
HXDLIN( 279)		Float yp1 = ((by1 - by0) / cell->zpp_inner->y);
HXLINE( 280)		int yn = ::Std_obj::_hx_int(yp1);
HXLINE( 281)		if ((xp1 != xn)) {
HXLINE( 281)			xn = (xn + 1);
            		}
HXLINE( 282)		if ((yp1 != yn)) {
HXLINE( 282)			yn = (yn + 1);
            		}
HXLINE( 283)		if (combine) {
HXLINE( 284)			if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchingSquares_obj::map )) {
HXLINE( 285)				::zpp_nape::geom::ZPP_MarchingSquares_obj::map =  ::zpp_nape::util::ZNPArray2_ZPP_MarchPair_obj::__alloc( HX_CTX ,xn,yn);
            			}
            			else {
HXLINE( 288)				::zpp_nape::geom::ZPP_MarchingSquares_obj::map->resize(xn,yn,null());
            			}
            		}
HXLINE( 291)		if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchingSquares_obj::isos )) {
HXLINE( 292)			::zpp_nape::geom::ZPP_MarchingSquares_obj::isos =  ::zpp_nape::util::ZNPArray2_Float_obj::__alloc( HX_CTX ,(xn + 1),(yn + 1));
            		}
            		else {
HXLINE( 295)			::zpp_nape::geom::ZPP_MarchingSquares_obj::isos->resize((xn + 1),(yn + 1),( (Float)(0) ));
            		}
HXLINE( 297)		{
HXLINE( 297)			int _g = 0;
HXDLIN( 297)			int _g1 = (yn + 1);
HXDLIN( 297)			while((_g < _g1)){
HXLINE( 297)				_g = (_g + 1);
HXDLIN( 297)				int y = (_g - 1);
HXLINE( 298)				Float yc;
HXDLIN( 298)				if ((y == 0)) {
HXLINE( 298)					yc = by0;
            				}
            				else {
HXLINE( 298)					if ((y <= yn)) {
HXLINE( 298)						bool yc1;
HXDLIN( 298)						if (hx::IsNotNull( cell )) {
HXLINE( 298)							yc1 = cell->zpp_disp;
            						}
            						else {
HXLINE( 298)							yc1 = false;
            						}
HXDLIN( 298)						if (yc1) {
HXLINE( 298)							HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            						}
HXDLIN( 298)						{
HXLINE( 298)							 ::zpp_nape::geom::ZPP_Vec2 _this2 = cell->zpp_inner;
HXDLIN( 298)							if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 298)								_this2->_validate();
            							}
            						}
HXDLIN( 298)						yc = (by0 + (cell->zpp_inner->y * ( (Float)(y) )));
            					}
            					else {
HXLINE( 298)						yc = by1;
            					}
            				}
HXLINE( 299)				{
HXLINE( 299)					int _g2 = 0;
HXDLIN( 299)					int _g11 = (xn + 1);
HXDLIN( 299)					while((_g2 < _g11)){
HXLINE( 299)						_g2 = (_g2 + 1);
HXDLIN( 299)						int x = (_g2 - 1);
HXLINE( 300)						Float xc;
HXDLIN( 300)						if ((x == 0)) {
HXLINE( 300)							xc = bx0;
            						}
            						else {
HXLINE( 300)							if ((x <= xn)) {
HXLINE( 300)								bool xc1;
HXDLIN( 300)								if (hx::IsNotNull( cell )) {
HXLINE( 300)									xc1 = cell->zpp_disp;
            								}
            								else {
HXLINE( 300)									xc1 = false;
            								}
HXDLIN( 300)								if (xc1) {
HXLINE( 300)									HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            								}
HXDLIN( 300)								{
HXLINE( 300)									 ::zpp_nape::geom::ZPP_Vec2 _this3 = cell->zpp_inner;
HXDLIN( 300)									if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 300)										_this3->_validate();
            									}
            								}
HXDLIN( 300)								xc = (bx0 + (cell->zpp_inner->x * ( (Float)(x) )));
            							}
            							else {
HXLINE( 300)								xc = bx1;
            							}
            						}
HXLINE( 301)						{
HXLINE( 301)							 ::zpp_nape::util::ZNPArray2_Float _this4 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::isos;
HXDLIN( 301)							Float obj = ( (Float)(iso(xc,yc)) );
HXDLIN( 301)							_this4->list[((y * _this4->width) + x)] = obj;
            						}
            					}
            				}
            			}
            		}
HXLINE( 304)		if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchingSquares_obj::ints )) {
HXLINE( 305)			::zpp_nape::geom::ZPP_MarchingSquares_obj::ints =  ::zpp_nape::util::ZNPArray2_ZPP_GeomVert_obj::__alloc( HX_CTX ,(xn + 1),((yn << 1) + 1));
            		}
            		else {
HXLINE( 308)			::zpp_nape::geom::ZPP_MarchingSquares_obj::ints->resize((xn + 1),((yn << 1) + 1),null());
            		}
HXLINE( 310)		 ::zpp_nape::geom::ZPP_MarchSpan spans = null();
HXLINE( 311)		if (combine) {
HXLINE( 313)			if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool )) {
HXLINE( 314)				spans =  ::zpp_nape::geom::ZPP_MarchSpan_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 320)				spans = ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool;
HXLINE( 321)				::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool = spans->next;
HXLINE( 322)				spans->next = null();
            			}
HXLINE( 327)			{
HXLINE( 327)				spans->out = false;
HXDLIN( 327)				spans->rank = 0;
            			}
            		}
HXLINE( 330)		Float py = by0;
HXLINE( 331)		{
HXLINE( 331)			int _g21 = 0;
HXDLIN( 331)			int _g3 = yn;
HXDLIN( 331)			while((_g21 < _g3)){
HXLINE( 331)				_g21 = (_g21 + 1);
HXDLIN( 331)				int y1 = (_g21 - 1);
HXLINE( 332)				Float y0 = py;
HXLINE( 333)				Float y11;
HXDLIN( 333)				if ((y1 == (yn - 1))) {
HXLINE( 333)					y11 = by1;
            				}
            				else {
HXLINE( 333)					bool y12;
HXDLIN( 333)					if (hx::IsNotNull( cell )) {
HXLINE( 333)						y12 = cell->zpp_disp;
            					}
            					else {
HXLINE( 333)						y12 = false;
            					}
HXDLIN( 333)					if (y12) {
HXLINE( 333)						HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            					}
HXDLIN( 333)					{
HXLINE( 333)						 ::zpp_nape::geom::ZPP_Vec2 _this5 = cell->zpp_inner;
HXDLIN( 333)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 333)							_this5->_validate();
            						}
            					}
HXDLIN( 333)					y11 = (by0 + (cell->zpp_inner->y * ( (Float)((y1 + 1)) )));
            				}
HXLINE( 334)				py = y11;
HXLINE( 335)				Float px = bx0;
HXLINE( 336)				 ::zpp_nape::geom::ZPP_MarchPair pre = null();
HXLINE( 337)				{
HXLINE( 337)					int _g22 = 0;
HXDLIN( 337)					int _g31 = xn;
HXDLIN( 337)					while((_g22 < _g31)){
HXLINE( 337)						_g22 = (_g22 + 1);
HXDLIN( 337)						int x1 = (_g22 - 1);
HXLINE( 338)						Float x0 = px;
HXLINE( 339)						Float x11;
HXDLIN( 339)						if ((x1 == (xn - 1))) {
HXLINE( 339)							x11 = bx1;
            						}
            						else {
HXLINE( 339)							bool x12;
HXDLIN( 339)							if (hx::IsNotNull( cell )) {
HXLINE( 339)								x12 = cell->zpp_disp;
            							}
            							else {
HXLINE( 339)								x12 = false;
            							}
HXDLIN( 339)							if (x12) {
HXLINE( 339)								HX_STACK_DO_THROW(((HX_("Error: ",4e,a8,5b,b7) + HX_("Vec2",7e,53,25,39)) + HX_(" has been disposed and cannot be used!",2e,07,ae,74)));
            							}
HXDLIN( 339)							{
HXLINE( 339)								 ::zpp_nape::geom::ZPP_Vec2 _this6 = cell->zpp_inner;
HXDLIN( 339)								if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 339)									_this6->_validate();
            								}
            							}
HXDLIN( 339)							x11 = (bx0 + (cell->zpp_inner->x * ( (Float)((x1 + 1)) )));
            						}
HXLINE( 340)						px = x11;
HXLINE( 341)						bool fstx;
HXDLIN( 341)						if ((x1 != 0)) {
HXLINE( 341)							fstx = !(combine);
            						}
            						else {
HXLINE( 341)							fstx = true;
            						}
HXLINE( 342)						bool fsty;
HXDLIN( 342)						if ((y1 != 0)) {
HXLINE( 342)							fsty = !(combine);
            						}
            						else {
HXLINE( 342)							fsty = true;
            						}
HXLINE( 343)						bool sndx;
HXDLIN( 343)						if ((x1 != (xn - 1))) {
HXLINE( 343)							sndx = !(combine);
            						}
            						else {
HXLINE( 343)							sndx = true;
            						}
HXLINE( 344)						bool sndy;
HXDLIN( 344)						if ((y1 != (yn - 1))) {
HXLINE( 344)							sndy = !(combine);
            						}
            						else {
HXLINE( 344)							sndy = true;
            						}
HXLINE( 345)						 ::zpp_nape::geom::ZPP_MarchPair pp = ::zpp_nape::geom::ZPP_MarchingSquares_obj::me->marchSquare(iso,::zpp_nape::geom::ZPP_MarchingSquares_obj::isos,::zpp_nape::geom::ZPP_MarchingSquares_obj::ints,x0,y0,x11,y11,x1,y1,fstx,fsty,sndx,sndy,quality);
HXLINE( 346)						if (hx::IsNull( pp )) {
HXLINE( 347)							pre = null();
HXLINE( 348)							continue;
            						}
HXLINE( 350)						if (combine) {
HXLINE( 351)							 ::zpp_nape::geom::ZPP_GeomVert pd;
HXDLIN( 351)							bool pd1;
HXDLIN( 351)							if (hx::IsNotNull( pp->p2 )) {
HXLINE( 351)								pd1 = (pp->okey2 != 14);
            							}
            							else {
HXLINE( 351)								pd1 = false;
            							}
HXDLIN( 351)							if (pd1) {
HXLINE( 351)								pd = pp->p2;
            							}
            							else {
HXLINE( 351)								pd = pp->p1;
            							}
HXLINE( 352)							 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp;
HXDLIN( 352)							int _hx_tmp1;
HXDLIN( 352)							if (hx::IsEq( pd,pp->p2 )) {
HXLINE( 352)								_hx_tmp1 = pp->okey2;
            							}
            							else {
HXLINE( 352)								_hx_tmp1 = pp->okey1;
            							}
HXDLIN( 352)							if (((_hx_tmp1 & 128) == 0)) {
HXLINE( 352)								_hx_tmp = pd->prev;
            							}
            							else {
HXLINE( 352)								_hx_tmp = pd->prev->prev;
            							}
HXDLIN( 352)							pp->pd = _hx_tmp;
HXLINE( 353)							{
HXLINE( 353)								 ::zpp_nape::util::ZNPArray2_ZPP_MarchPair _this7 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::map;
HXDLIN( 353)								_this7->list[((y1 * _this7->width) + x1)] = pp;
            							}
HXLINE( 354)							bool _hx_tmp2;
HXDLIN( 354)							if (hx::IsNotNull( pre )) {
HXLINE( 354)								 ::zpp_nape::geom::ZPP_MarchingSquares _this8 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::me;
HXDLIN( 354)								int key = pp->key1;
HXDLIN( 354)								int flag = ((key & 1) | ((key & 192) >> 5));
HXDLIN( 354)								int cnt = 0;
HXDLIN( 354)								if (((flag & 1) != 0)) {
HXLINE( 354)									cnt = (cnt + 1);
            								}
HXDLIN( 354)								if (((flag & 2) != 0)) {
HXLINE( 354)									cnt = (cnt + 1);
            								}
HXDLIN( 354)								if (((flag & 4) != 0)) {
HXLINE( 354)									cnt = (cnt + 1);
            								}
HXDLIN( 354)								_hx_tmp2 = (cnt >= 2);
            							}
            							else {
HXLINE( 354)								_hx_tmp2 = false;
            							}
HXDLIN( 354)							if (_hx_tmp2) {
HXLINE( 363)								::zpp_nape::geom::ZPP_MarchingSquares_obj::me->combLR(pre,pp);
HXLINE( 364)								pp->span1 = pre->spanr;
            							}
            							else {
HXLINE( 375)								{
HXLINE( 376)									if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool )) {
HXLINE( 377)										pp->span1 =  ::zpp_nape::geom::ZPP_MarchSpan_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 383)										pp->span1 = ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool;
HXLINE( 384)										::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool = pp->span1->next;
HXLINE( 385)										pp->span1->next = null();
            									}
HXLINE( 390)									{
HXLINE( 390)										 ::zpp_nape::geom::ZPP_MarchSpan _this9 = pp->span1;
HXDLIN( 390)										_this9->out = false;
HXDLIN( 390)										_this9->rank = 0;
            									}
            								}
HXLINE( 392)								pp->span1->next = spans;
HXLINE( 393)								spans = pp->span1;
            							}
HXLINE( 395)							if (hx::IsNotNull( pp->p2 )) {
HXLINE( 396)								{
HXLINE( 397)									if (hx::IsNull( ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool )) {
HXLINE( 398)										pp->span2 =  ::zpp_nape::geom::ZPP_MarchSpan_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 404)										pp->span2 = ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool;
HXLINE( 405)										::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool = pp->span2->next;
HXLINE( 406)										pp->span2->next = null();
            									}
HXLINE( 411)									{
HXLINE( 411)										 ::zpp_nape::geom::ZPP_MarchSpan _this10 = pp->span2;
HXDLIN( 411)										_this10->out = false;
HXDLIN( 411)										_this10->rank = 0;
            									}
            								}
HXLINE( 413)								pp->span2->next = spans;
HXLINE( 414)								spans = pp->span2;
HXLINE( 415)								pp->spanr = pp->span2;
            							}
            							else {
HXLINE( 417)								pp->spanr = pp->span1;
            							}
HXLINE( 418)							 ::zpp_nape::geom::ZPP_MarchingSquares _this11 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::me;
HXDLIN( 418)							int flag1 = ((pp->keyr & 28) >> 2);
HXDLIN( 418)							int cnt1 = 0;
HXDLIN( 418)							if (((flag1 & 1) != 0)) {
HXLINE( 418)								cnt1 = (cnt1 + 1);
            							}
HXDLIN( 418)							if (((flag1 & 2) != 0)) {
HXLINE( 418)								cnt1 = (cnt1 + 1);
            							}
HXDLIN( 418)							if (((flag1 & 4) != 0)) {
HXLINE( 418)								cnt1 = (cnt1 + 1);
            							}
HXDLIN( 418)							if ((cnt1 >= 2)) {
HXLINE( 418)								pre = pp;
            							}
            							else {
HXLINE( 419)								pre = null();
            							}
            						}
            						else {
HXLINE( 422)							::zpp_nape::geom::ZPP_MarchingSquares_obj::me->output(ret,pp->p1);
HXLINE( 423)							if (hx::IsNotNull( pp->p2 )) {
HXLINE( 423)								::zpp_nape::geom::ZPP_MarchingSquares_obj::me->output(ret,pp->p2);
            							}
HXLINE( 424)							{
HXLINE( 425)								 ::zpp_nape::geom::ZPP_MarchPair o = pp;
HXLINE( 434)								{
HXLINE( 434)									o->p1 = (o->p2 = (o->pr = (o->pd = null())));
HXDLIN( 434)									o->span1 = (o->span2 = (o->spanr = null()));
            								}
HXLINE( 435)								o->next = ::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool;
HXLINE( 436)								::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool = o;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 444)		if (!(combine)) {
HXLINE( 445)			return;
            		}
HXLINE( 447)		{
HXLINE( 447)			int _g4 = 1;
HXDLIN( 447)			int _g5 = yn;
HXDLIN( 447)			while((_g4 < _g5)){
HXLINE( 447)				_g4 = (_g4 + 1);
HXDLIN( 447)				int y2 = (_g4 - 1);
HXLINE( 448)				 ::zpp_nape::geom::ZPP_MarchSpan pre1 = null();
HXLINE( 449)				{
HXLINE( 449)					int _g41 = 0;
HXDLIN( 449)					int _g51 = xn;
HXDLIN( 449)					while((_g41 < _g51)){
HXLINE( 449)						_g41 = (_g41 + 1);
HXDLIN( 449)						int x2 = (_g41 - 1);
HXLINE( 450)						 ::zpp_nape::util::ZNPArray2_ZPP_MarchPair _this12 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::map;
HXDLIN( 450)						 ::zpp_nape::geom::ZPP_MarchPair b = _this12->list->__get(((y2 * _this12->width) + x2)).StaticCast<  ::zpp_nape::geom::ZPP_MarchPair >();
HXLINE( 451)						if (hx::IsNull( b )) {
HXLINE( 452)							pre1 = null();
HXLINE( 453)							continue;
            						}
HXLINE( 455)						int bkey;
HXDLIN( 455)						bool bkey1;
HXDLIN( 455)						if (hx::IsNotNull( b->p2 )) {
HXLINE( 455)							bkey1 = (b->okey2 == 14);
            						}
            						else {
HXLINE( 455)							bkey1 = false;
            						}
HXDLIN( 455)						if (bkey1) {
HXLINE( 455)							bkey = b->okey2;
            						}
            						else {
HXLINE( 455)							bkey = b->okey1;
            						}
HXLINE( 456)						 ::zpp_nape::geom::ZPP_MarchingSquares _this13 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::me;
HXDLIN( 456)						int flag2 = (bkey & 7);
HXDLIN( 456)						int cnt2 = 0;
HXDLIN( 456)						if (((flag2 & 1) != 0)) {
HXLINE( 456)							cnt2 = (cnt2 + 1);
            						}
HXDLIN( 456)						if (((flag2 & 2) != 0)) {
HXLINE( 456)							cnt2 = (cnt2 + 1);
            						}
HXDLIN( 456)						if (((flag2 & 4) != 0)) {
HXLINE( 456)							cnt2 = (cnt2 + 1);
            						}
HXDLIN( 456)						if ((cnt2 < 2)) {
HXLINE( 457)							pre1 = null();
HXLINE( 458)							continue;
            						}
HXLINE( 460)						 ::zpp_nape::util::ZNPArray2_ZPP_MarchPair _this14 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::map;
HXDLIN( 460)						 ::zpp_nape::geom::ZPP_MarchPair a = _this14->list->__get((((y2 - 1) * _this14->width) + x2)).StaticCast<  ::zpp_nape::geom::ZPP_MarchPair >();
HXLINE( 461)						if (hx::IsNull( a )) {
HXLINE( 462)							pre1 = null();
HXLINE( 463)							continue;
            						}
HXLINE( 465)						int akey;
HXDLIN( 465)						bool akey1;
HXDLIN( 465)						if (hx::IsNotNull( a->p2 )) {
HXLINE( 465)							akey1 = (a->okey2 == 56);
            						}
            						else {
HXLINE( 465)							akey1 = false;
            						}
HXDLIN( 465)						if (akey1) {
HXLINE( 465)							akey = a->okey2;
            						}
            						else {
HXLINE( 465)							akey = a->okey1;
            						}
HXLINE( 466)						 ::zpp_nape::geom::ZPP_MarchingSquares _this15 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::me;
HXDLIN( 466)						int flag3 = ((akey & 112) >> 4);
HXDLIN( 466)						int cnt3 = 0;
HXDLIN( 466)						if (((flag3 & 1) != 0)) {
HXLINE( 466)							cnt3 = (cnt3 + 1);
            						}
HXDLIN( 466)						if (((flag3 & 2) != 0)) {
HXLINE( 466)							cnt3 = (cnt3 + 1);
            						}
HXDLIN( 466)						if (((flag3 & 4) != 0)) {
HXLINE( 466)							cnt3 = (cnt3 + 1);
            						}
HXDLIN( 466)						if ((cnt3 < 2)) {
HXLINE( 467)							pre1 = null();
HXLINE( 468)							continue;
            						}
HXLINE( 470)						 ::zpp_nape::geom::ZPP_MarchSpan ad;
HXDLIN( 470)						bool ad1;
HXDLIN( 470)						if (hx::IsNotNull( a->p2 )) {
HXLINE( 470)							ad1 = (a->okey2 == 56);
            						}
            						else {
HXLINE( 470)							ad1 = false;
            						}
HXDLIN( 470)						if (ad1) {
HXLINE( 470)							ad = a->span2;
            						}
            						else {
HXLINE( 470)							ad = a->span1;
            						}
HXLINE( 471)						 ::zpp_nape::geom::ZPP_MarchSpan bu;
HXDLIN( 471)						bool bu1;
HXDLIN( 471)						if (hx::IsNotNull( b->p2 )) {
HXLINE( 471)							bu1 = (b->okey2 == 14);
            						}
            						else {
HXLINE( 471)							bu1 = false;
            						}
HXDLIN( 471)						if (bu1) {
HXLINE( 471)							bu = b->span2;
            						}
            						else {
HXLINE( 471)							bu = b->span1;
            						}
HXLINE( 472)						 ::zpp_nape::geom::ZPP_MarchSpan _hx_tmp3;
HXDLIN( 472)						if (hx::IsEq( ad,ad->parent )) {
HXLINE( 472)							_hx_tmp3 = ad;
            						}
            						else {
HXLINE( 475)							 ::zpp_nape::geom::ZPP_MarchSpan obj1 = ad;
HXLINE( 476)							 ::zpp_nape::geom::ZPP_MarchSpan stack = null();
HXLINE( 477)							while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 478)								 ::zpp_nape::geom::ZPP_MarchSpan nxt = obj1->parent;
HXLINE( 479)								obj1->parent = stack;
HXLINE( 480)								stack = obj1;
HXLINE( 481)								obj1 = nxt;
            							}
HXLINE( 483)							while(hx::IsNotNull( stack )){
HXLINE( 484)								 ::zpp_nape::geom::ZPP_MarchSpan nxt1 = stack->parent;
HXLINE( 485)								stack->parent = obj1;
HXLINE( 486)								stack = nxt1;
            							}
HXLINE( 472)							_hx_tmp3 = obj1;
            						}
HXLINE( 490)						 ::zpp_nape::geom::ZPP_MarchSpan _hx_tmp4;
HXDLIN( 490)						if (hx::IsEq( bu,bu->parent )) {
HXLINE( 490)							_hx_tmp4 = bu;
            						}
            						else {
HXLINE( 493)							 ::zpp_nape::geom::ZPP_MarchSpan obj2 = bu;
HXLINE( 494)							 ::zpp_nape::geom::ZPP_MarchSpan stack1 = null();
HXLINE( 495)							while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 496)								 ::zpp_nape::geom::ZPP_MarchSpan nxt2 = obj2->parent;
HXLINE( 497)								obj2->parent = stack1;
HXLINE( 498)								stack1 = obj2;
HXLINE( 499)								obj2 = nxt2;
            							}
HXLINE( 501)							while(hx::IsNotNull( stack1 )){
HXLINE( 502)								 ::zpp_nape::geom::ZPP_MarchSpan nxt3 = stack1->parent;
HXLINE( 503)								stack1->parent = obj2;
HXLINE( 504)								stack1 = nxt3;
            							}
HXLINE( 490)							_hx_tmp4 = obj2;
            						}
HXLINE( 472)						if (hx::IsEq( _hx_tmp3,_hx_tmp4 )) {
HXLINE( 509)							if (hx::IsNotEq( pre1,bu )) {
HXLINE( 510)								::zpp_nape::geom::ZPP_MarchingSquares_obj::me->combUD_virtual(a,b);
            							}
            						}
            						else {
HXLINE( 514)							{
HXLINE( 515)								 ::zpp_nape::geom::ZPP_MarchSpan xr;
HXDLIN( 515)								if (hx::IsEq( ad,ad->parent )) {
HXLINE( 515)									xr = ad;
            								}
            								else {
HXLINE( 518)									 ::zpp_nape::geom::ZPP_MarchSpan obj3 = ad;
HXLINE( 519)									 ::zpp_nape::geom::ZPP_MarchSpan stack2 = null();
HXLINE( 520)									while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 521)										 ::zpp_nape::geom::ZPP_MarchSpan nxt4 = obj3->parent;
HXLINE( 522)										obj3->parent = stack2;
HXLINE( 523)										stack2 = obj3;
HXLINE( 524)										obj3 = nxt4;
            									}
HXLINE( 526)									while(hx::IsNotNull( stack2 )){
HXLINE( 527)										 ::zpp_nape::geom::ZPP_MarchSpan nxt5 = stack2->parent;
HXLINE( 528)										stack2->parent = obj3;
HXLINE( 529)										stack2 = nxt5;
            									}
HXLINE( 515)									xr = obj3;
            								}
HXLINE( 534)								 ::zpp_nape::geom::ZPP_MarchSpan yr;
HXDLIN( 534)								if (hx::IsEq( bu,bu->parent )) {
HXLINE( 534)									yr = bu;
            								}
            								else {
HXLINE( 537)									 ::zpp_nape::geom::ZPP_MarchSpan obj4 = bu;
HXLINE( 538)									 ::zpp_nape::geom::ZPP_MarchSpan stack3 = null();
HXLINE( 539)									while(hx::IsNotEq( obj4,obj4->parent )){
HXLINE( 540)										 ::zpp_nape::geom::ZPP_MarchSpan nxt6 = obj4->parent;
HXLINE( 541)										obj4->parent = stack3;
HXLINE( 542)										stack3 = obj4;
HXLINE( 543)										obj4 = nxt6;
            									}
HXLINE( 545)									while(hx::IsNotNull( stack3 )){
HXLINE( 546)										 ::zpp_nape::geom::ZPP_MarchSpan nxt7 = stack3->parent;
HXLINE( 547)										stack3->parent = obj4;
HXLINE( 548)										stack3 = nxt7;
            									}
HXLINE( 534)									yr = obj4;
            								}
HXLINE( 553)								if (hx::IsNotEq( xr,yr )) {
HXLINE( 554)									if ((xr->rank < yr->rank)) {
HXLINE( 554)										xr->parent = yr;
            									}
            									else {
HXLINE( 555)										if ((xr->rank > yr->rank)) {
HXLINE( 555)											yr->parent = xr;
            										}
            										else {
HXLINE( 557)											yr->parent = xr;
HXLINE( 558)											xr->rank++;
            										}
            									}
            								}
            							}
HXLINE( 562)							::zpp_nape::geom::ZPP_MarchingSquares_obj::me->combUD(a,b);
            						}
HXLINE( 564)						int key1;
HXDLIN( 564)						if (hx::IsEq( bu,b->span2 )) {
HXLINE( 564)							key1 = b->okey2;
            						}
            						else {
HXLINE( 564)							key1 = b->okey1;
            						}
HXLINE( 565)						if (((key1 & 4) != 0)) {
HXLINE( 565)							pre1 = bu;
            						}
            						else {
HXLINE( 565)							pre1 = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 568)		{
HXLINE( 568)			int _g6 = 0;
HXDLIN( 568)			int _g7 = yn;
HXDLIN( 568)			while((_g6 < _g7)){
HXLINE( 568)				_g6 = (_g6 + 1);
HXDLIN( 568)				int y3 = (_g6 - 1);
HXLINE( 569)				{
HXLINE( 569)					int _g61 = 0;
HXDLIN( 569)					int _g71 = xn;
HXDLIN( 569)					while((_g61 < _g71)){
HXLINE( 569)						_g61 = (_g61 + 1);
HXDLIN( 569)						int x3 = (_g61 - 1);
HXLINE( 570)						 ::zpp_nape::util::ZNPArray2_ZPP_MarchPair _this16 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::map;
HXDLIN( 570)						 ::zpp_nape::geom::ZPP_MarchPair p = _this16->list->__get(((y3 * _this16->width) + x3)).StaticCast<  ::zpp_nape::geom::ZPP_MarchPair >();
HXLINE( 571)						if (hx::IsNull( p )) {
HXLINE( 571)							continue;
            						}
HXLINE( 572)						 ::zpp_nape::geom::ZPP_MarchSpan root;
HXDLIN( 572)						if (hx::IsEq( p->span1,p->span1->parent )) {
HXLINE( 572)							root = p->span1;
            						}
            						else {
HXLINE( 575)							 ::zpp_nape::geom::ZPP_MarchSpan obj5 = p->span1;
HXLINE( 576)							 ::zpp_nape::geom::ZPP_MarchSpan stack4 = null();
HXLINE( 577)							while(hx::IsNotEq( obj5,obj5->parent )){
HXLINE( 578)								 ::zpp_nape::geom::ZPP_MarchSpan nxt8 = obj5->parent;
HXLINE( 579)								obj5->parent = stack4;
HXLINE( 580)								stack4 = obj5;
HXLINE( 581)								obj5 = nxt8;
            							}
HXLINE( 583)							while(hx::IsNotNull( stack4 )){
HXLINE( 584)								 ::zpp_nape::geom::ZPP_MarchSpan nxt9 = stack4->parent;
HXLINE( 585)								stack4->parent = obj5;
HXLINE( 586)								stack4 = nxt9;
            							}
HXLINE( 572)							root = obj5;
            						}
HXLINE( 591)						if (!(root->out)) {
HXLINE( 592)							root->out = true;
HXLINE( 593)							::zpp_nape::geom::ZPP_MarchingSquares_obj::me->output(ret,p->p1);
            						}
HXLINE( 595)						if (hx::IsNotNull( p->p2 )) {
HXLINE( 596)							if (hx::IsEq( p->span2,p->span2->parent )) {
HXLINE( 597)								root = p->span2;
            							}
            							else {
HXLINE( 599)								 ::zpp_nape::geom::ZPP_MarchSpan obj6 = p->span2;
HXLINE( 600)								 ::zpp_nape::geom::ZPP_MarchSpan stack5 = null();
HXLINE( 601)								while(hx::IsNotEq( obj6,obj6->parent )){
HXLINE( 602)									 ::zpp_nape::geom::ZPP_MarchSpan nxt10 = obj6->parent;
HXLINE( 603)									obj6->parent = stack5;
HXLINE( 604)									stack5 = obj6;
HXLINE( 605)									obj6 = nxt10;
            								}
HXLINE( 607)								while(hx::IsNotNull( stack5 )){
HXLINE( 608)									 ::zpp_nape::geom::ZPP_MarchSpan nxt11 = stack5->parent;
HXLINE( 609)									stack5->parent = obj6;
HXLINE( 610)									stack5 = nxt11;
            								}
HXLINE( 612)								root = obj6;
            							}
HXLINE( 615)							if (!(root->out)) {
HXLINE( 616)								root->out = true;
HXLINE( 617)								::zpp_nape::geom::ZPP_MarchingSquares_obj::me->output(ret,p->p2);
            							}
            						}
HXLINE( 620)						{
HXLINE( 621)							 ::zpp_nape::geom::ZPP_MarchPair o1 = p;
HXLINE( 630)							{
HXLINE( 630)								o1->p1 = (o1->p2 = (o1->pr = (o1->pd = null())));
HXDLIN( 630)								o1->span1 = (o1->span2 = (o1->spanr = null()));
            							}
HXLINE( 631)							o1->next = ::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool;
HXLINE( 632)							::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool = o1;
            						}
HXLINE( 637)						{
HXLINE( 637)							 ::zpp_nape::util::ZNPArray2_ZPP_MarchPair _this17 = ::zpp_nape::geom::ZPP_MarchingSquares_obj::map;
HXDLIN( 637)							_this17->list[((y3 * _this17->width) + x3)] = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 640)		while(hx::IsNotNull( spans )){
HXLINE( 641)			 ::zpp_nape::geom::ZPP_MarchSpan t = spans;
HXLINE( 642)			spans = t->next;
HXLINE( 643)			{
HXLINE( 644)				 ::zpp_nape::geom::ZPP_MarchSpan o2 = t;
HXLINE( 653)				o2->parent = o2;
HXLINE( 654)				o2->next = ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool;
HXLINE( 655)				::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool = o2;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ZPP_MarchingSquares_obj,run,(void))

::Array< int > ZPP_MarchingSquares_obj::look_march;

Float ZPP_MarchingSquares_obj::ISO( ::Dynamic iso,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_1929_ISO)
HXDLIN(1929)		return ( (Float)(iso(x,y)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_MarchingSquares_obj,ISO,return )


hx::ObjectPtr< ZPP_MarchingSquares_obj > ZPP_MarchingSquares_obj::__new() {
	hx::ObjectPtr< ZPP_MarchingSquares_obj > __this = new ZPP_MarchingSquares_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_MarchingSquares_obj > ZPP_MarchingSquares_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_MarchingSquares_obj *__this = (ZPP_MarchingSquares_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_MarchingSquares_obj), false, "zpp_nape.geom.ZPP_MarchingSquares"));
	*(void **)__this = ZPP_MarchingSquares_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_MarchingSquares_obj::ZPP_MarchingSquares_obj()
{
}

hx::Val ZPP_MarchingSquares_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"comb") ) { return hx::Val( comb_dyn() ); }
		if (HX_FIELD_EQ(inName,"lerp") ) { return hx::Val( lerp_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xlerp") ) { return hx::Val( xlerp_dyn() ); }
		if (HX_FIELD_EQ(inName,"ylerp") ) { return hx::Val( ylerp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { return hx::Val( output_dyn() ); }
		if (HX_FIELD_EQ(inName,"linkup") ) { return hx::Val( linkup_dyn() ); }
		if (HX_FIELD_EQ(inName,"combLR") ) { return hx::Val( combLR_dyn() ); }
		if (HX_FIELD_EQ(inName,"combUD") ) { return hx::Val( combUD_dyn() ); }
		if (HX_FIELD_EQ(inName,"combUp") ) { return hx::Val( combUp_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"linkleft") ) { return hx::Val( linkleft_dyn() ); }
		if (HX_FIELD_EQ(inName,"linkdown") ) { return hx::Val( linkdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"combLeft") ) { return hx::Val( combLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"combDown") ) { return hx::Val( combDown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"linkright") ) { return hx::Val( linkright_dyn() ); }
		if (HX_FIELD_EQ(inName,"combRight") ) { return hx::Val( combRight_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"marchSquare") ) { return hx::Val( marchSquare_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"combUD_virtual") ) { return hx::Val( combUD_virtual_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_MarchingSquares_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"me") ) { outValue = ( me ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = ( map ); return true; }
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ISO") ) { outValue = ISO_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"isos") ) { outValue = ( isos ); return true; }
		if (HX_FIELD_EQ(inName,"ints") ) { outValue = ( ints ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"look_march") ) { outValue = ( look_march ); return true; }
	}
	return false;
}

bool ZPP_MarchingSquares_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"me") ) { me=ioValue.Cast<  ::zpp_nape::geom::ZPP_MarchingSquares >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=ioValue.Cast<  ::zpp_nape::util::ZNPArray2_ZPP_MarchPair >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"isos") ) { isos=ioValue.Cast<  ::zpp_nape::util::ZNPArray2_Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ints") ) { ints=ioValue.Cast<  ::zpp_nape::util::ZNPArray2_ZPP_GeomVert >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"look_march") ) { look_march=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_MarchingSquares_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_MarchingSquares_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_MarchingSquares */ ,(void *) &ZPP_MarchingSquares_obj::me,HX_("me",58,5f,00,00)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPArray2_Float */ ,(void *) &ZPP_MarchingSquares_obj::isos,HX_("isos",8e,0b,bf,45)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPArray2_ZPP_GeomVert */ ,(void *) &ZPP_MarchingSquares_obj::ints,HX_("ints",a4,44,bb,45)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPArray2_ZPP_MarchPair */ ,(void *) &ZPP_MarchingSquares_obj::map,HX_("map",9c,0a,53,00)},
	{hx::fsObject /* ::Array< int > */ ,(void *) &ZPP_MarchingSquares_obj::look_march,HX_("look_march",a3,43,78,c3)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_MarchingSquares_obj_sMemberFields[] = {
	HX_("output",01,0f,81,0c),
	HX_("linkright",a2,c9,55,03),
	HX_("linkleft",01,a5,67,0e),
	HX_("linkdown",5c,95,25,09),
	HX_("linkup",d5,f0,a4,ec),
	HX_("combLR",c7,fd,25,c7),
	HX_("combUD",90,05,26,c7),
	HX_("combUD_virtual",1c,0d,c8,0c),
	HX_("combLeft",a8,01,05,5b),
	HX_("combRight",1b,7f,69,c0),
	HX_("combUp",bc,05,26,c7),
	HX_("combDown",03,f2,c2,55),
	HX_("comb",01,b9,c4,41),
	HX_("marchSquare",c0,ad,2c,3b),
	HX_("lerp",77,12,b0,47),
	HX_("xlerp",ef,ae,c5,5f),
	HX_("ylerp",70,43,2c,f3),
	::String(null()) };

static void ZPP_MarchingSquares_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_MarchingSquares_obj::me,"me");
	HX_MARK_MEMBER_NAME(ZPP_MarchingSquares_obj::isos,"isos");
	HX_MARK_MEMBER_NAME(ZPP_MarchingSquares_obj::ints,"ints");
	HX_MARK_MEMBER_NAME(ZPP_MarchingSquares_obj::map,"map");
	HX_MARK_MEMBER_NAME(ZPP_MarchingSquares_obj::look_march,"look_march");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_MarchingSquares_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_MarchingSquares_obj::me,"me");
	HX_VISIT_MEMBER_NAME(ZPP_MarchingSquares_obj::isos,"isos");
	HX_VISIT_MEMBER_NAME(ZPP_MarchingSquares_obj::ints,"ints");
	HX_VISIT_MEMBER_NAME(ZPP_MarchingSquares_obj::map,"map");
	HX_VISIT_MEMBER_NAME(ZPP_MarchingSquares_obj::look_march,"look_march");
};

#endif

hx::Class ZPP_MarchingSquares_obj::__mClass;

static ::String ZPP_MarchingSquares_obj_sStaticFields[] = {
	HX_("me",58,5f,00,00),
	HX_("isos",8e,0b,bf,45),
	HX_("ints",a4,44,bb,45),
	HX_("map",9c,0a,53,00),
	HX_("run",4b,e7,56,00),
	HX_("look_march",a3,43,78,c3),
	HX_("ISO",25,ad,37,00),
	::String(null())
};

void ZPP_MarchingSquares_obj::__register()
{
	ZPP_MarchingSquares_obj _hx_dummy;
	ZPP_MarchingSquares_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_MarchingSquares",81,28,dc,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_MarchingSquares_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_MarchingSquares_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_MarchingSquares_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_MarchingSquares_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_MarchingSquares_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_MarchingSquares_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_MarchingSquares_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_MarchingSquares_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_MarchingSquares_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_MarchingSquares_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d9331f34ff3f6620_271_boot)
HXDLIN( 271)		me =  ::zpp_nape::geom::ZPP_MarchingSquares_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9331f34ff3f6620_953_boot)
HXDLIN( 953)		look_march = ::Array_obj< int >::fromData( _hx_array_data_91dc2881_56,16);
            	}
}

} // end namespace zpp_nape
} // end namespace geom
