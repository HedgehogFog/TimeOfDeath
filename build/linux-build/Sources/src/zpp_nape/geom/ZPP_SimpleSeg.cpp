// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <hxinc/zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleSeg
#include <hxinc/zpp_nape/geom/ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <hxinc/zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleSeg
#include <hxinc/zpp_nape/util/ZPP_Set_ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleVert
#include <hxinc/zpp_nape/util/ZPP_Set_ZPP_SimpleVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a957e9eb63fc53fa_289_new,"zpp_nape.geom.ZPP_SimpleSeg","new",0x72728fff,"zpp_nape.geom.ZPP_SimpleSeg.new","zpp_nape/geom/Simple.hx",289,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_a957e9eb63fc53fa_321_free,"zpp_nape.geom.ZPP_SimpleSeg","free",0xac8b882d,"zpp_nape.geom.ZPP_SimpleSeg.free","zpp_nape/geom/Simple.hx",321,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_a957e9eb63fc53fa_329_alloc,"zpp_nape.geom.ZPP_SimpleSeg","alloc",0x6898c9d4,"zpp_nape.geom.ZPP_SimpleSeg.alloc","zpp_nape/geom/Simple.hx",329,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_a957e9eb63fc53fa_333_less_xy,"zpp_nape.geom.ZPP_SimpleSeg","less_xy",0x5f1ac486,"zpp_nape.geom.ZPP_SimpleSeg.less_xy","zpp_nape/geom/Simple.hx",333,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_a957e9eb63fc53fa_356_get,"zpp_nape.geom.ZPP_SimpleSeg","get",0x726d4035,"zpp_nape.geom.ZPP_SimpleSeg.get","zpp_nape/geom/Simple.hx",356,0x62f156db)
HX_LOCAL_STACK_FRAME(_hx_pos_a957e9eb63fc53fa_295_boot,"zpp_nape.geom.ZPP_SimpleSeg","boot",0xa9e46fb3,"zpp_nape.geom.ZPP_SimpleSeg.boot","zpp_nape/geom/Simple.hx",295,0x62f156db)
namespace zpp_nape{
namespace geom{

void ZPP_SimpleSeg_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a957e9eb63fc53fa_289_new)
HXLINE( 331)		this->node = null();
HXLINE( 330)		this->prev = null();
HXLINE( 294)		this->next = null();
HXLINE( 293)		this->id = 0;
HXLINE( 292)		this->vertices = null();
HXLINE( 291)		this->right = null();
HXLINE( 290)		this->left = null();
HXLINE( 336)		this->id = ::zpp_nape::ZPP_ID_obj::ZPP_SimpleSeg();
HXLINE( 338)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE( 339)			this->vertices =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 345)			this->vertices = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE( 346)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = this->vertices->next;
HXLINE( 347)			this->vertices->next = null();
            		}
HXLINE( 354)		this->vertices->lt = this->less_xy_dyn();
            	}

Dynamic ZPP_SimpleSeg_obj::__CreateEmpty() { return new ZPP_SimpleSeg_obj; }

void *ZPP_SimpleSeg_obj::_hx_vtable = 0;

Dynamic ZPP_SimpleSeg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SimpleSeg_obj > _hx_result = new ZPP_SimpleSeg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SimpleSeg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c205015;
}

void ZPP_SimpleSeg_obj::free(){
            	HX_STACKFRAME(&_hx_pos_a957e9eb63fc53fa_321_free)
HXLINE( 322)		this->left = (this->right = null());
HXLINE( 323)		this->prev = null();
HXLINE( 324)		this->node = null();
HXLINE( 325)		this->vertices->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimpleSeg_obj,free,(void))

void ZPP_SimpleSeg_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_a957e9eb63fc53fa_329_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimpleSeg_obj,alloc,(void))

bool ZPP_SimpleSeg_obj::less_xy( ::zpp_nape::geom::ZPP_SimpleVert a, ::zpp_nape::geom::ZPP_SimpleVert b){
            	HX_STACKFRAME(&_hx_pos_a957e9eb63fc53fa_333_less_xy)
HXDLIN( 333)		if (!((a->x < b->x))) {
HXDLIN( 333)			if ((a->x == b->x)) {
HXDLIN( 333)				return (a->y < b->y);
            			}
            			else {
HXDLIN( 333)				return false;
            			}
            		}
            		else {
HXDLIN( 333)			return true;
            		}
HXDLIN( 333)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleSeg_obj,less_xy,return )

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_SimpleSeg_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_SimpleSeg_obj::get( ::zpp_nape::geom::ZPP_SimpleVert left, ::zpp_nape::geom::ZPP_SimpleVert right){
            	HX_GC_STACKFRAME(&_hx_pos_a957e9eb63fc53fa_356_get)
HXLINE( 357)		 ::zpp_nape::geom::ZPP_SimpleSeg ret;
HXLINE( 359)		if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE( 360)			ret =  ::zpp_nape::geom::ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 366)			ret = ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool;
HXLINE( 367)			::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool = ret->next;
HXLINE( 368)			ret->next = null();
            		}
HXLINE( 375)		ret->left = left;
HXLINE( 376)		ret->right = right;
HXLINE( 377)		ret->vertices->insert(left);
HXLINE( 378)		ret->vertices->insert(right);
HXLINE( 379)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleSeg_obj,get,return )


hx::ObjectPtr< ZPP_SimpleSeg_obj > ZPP_SimpleSeg_obj::__new() {
	hx::ObjectPtr< ZPP_SimpleSeg_obj > __this = new ZPP_SimpleSeg_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SimpleSeg_obj > ZPP_SimpleSeg_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SimpleSeg_obj *__this = (ZPP_SimpleSeg_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SimpleSeg_obj), true, "zpp_nape.geom.ZPP_SimpleSeg"));
	*(void **)__this = ZPP_SimpleSeg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SimpleSeg_obj::ZPP_SimpleSeg_obj()
{
}

void ZPP_SimpleSeg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SimpleSeg);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_END_CLASS();
}

void ZPP_SimpleSeg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(node,"node");
}

hx::Val ZPP_SimpleSeg_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev ); }
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"less_xy") ) { return hx::Val( less_xy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_SimpleSeg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
	}
	return false;
}

hx::Val ZPP_SimpleSeg_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSeg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSeg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleVert >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_SimpleSeg_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSeg >(); return true; }
	}
	return false;
}

void ZPP_SimpleSeg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("vertices",f9,bf,15,6a));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("node",02,0a,0a,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SimpleSeg_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleVert */ ,(int)offsetof(ZPP_SimpleSeg_obj,left),HX_("left",07,08,b0,47)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleVert */ ,(int)offsetof(ZPP_SimpleSeg_obj,right),HX_("right",dc,0b,64,e9)},
	{hx::fsObject /*  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert */ ,(int)offsetof(ZPP_SimpleSeg_obj,vertices),HX_("vertices",f9,bf,15,6a)},
	{hx::fsInt,(int)offsetof(ZPP_SimpleSeg_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleSeg */ ,(int)offsetof(ZPP_SimpleSeg_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleSeg */ ,(int)offsetof(ZPP_SimpleSeg_obj,prev),HX_("prev",f3,be,5e,4a)},
	{hx::fsObject /*  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg */ ,(int)offsetof(ZPP_SimpleSeg_obj,node),HX_("node",02,0a,0a,49)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_SimpleSeg_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::geom::ZPP_SimpleSeg */ ,(void *) &ZPP_SimpleSeg_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_SimpleSeg_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("vertices",f9,bf,15,6a),
	HX_("id",db,5b,00,00),
	HX_("next",f3,84,02,49),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	HX_("prev",f3,be,5e,4a),
	HX_("node",02,0a,0a,49),
	HX_("less_xy",67,49,7a,70),
	::String(null()) };

static void ZPP_SimpleSeg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SimpleSeg_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SimpleSeg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SimpleSeg_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_SimpleSeg_obj::__mClass;

static ::String ZPP_SimpleSeg_obj_sStaticFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	HX_("get",96,80,4e,00),
	::String(null())
};

void ZPP_SimpleSeg_obj::__register()
{
	ZPP_SimpleSeg_obj _hx_dummy;
	ZPP_SimpleSeg_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.geom.ZPP_SimpleSeg",8d,24,d5,28);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SimpleSeg_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_SimpleSeg_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_SimpleSeg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SimpleSeg_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SimpleSeg_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SimpleSeg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SimpleSeg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SimpleSeg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SimpleSeg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_SimpleSeg_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a957e9eb63fc53fa_295_boot)
HXDLIN( 295)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
