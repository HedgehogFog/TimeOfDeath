// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_ConstraintList
#include <hxinc/nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_phys_InteractorList
#include <hxinc/nape/phys/InteractorList.h>
#endif
#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <hxinc/zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <hxinc/zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <hxinc/zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <hxinc/zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <hxinc/zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <hxinc/zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <hxinc/zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <hxinc/zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <hxinc/zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_17405d252dbf4182_174_new,"zpp_nape.callbacks.ZPP_CbSet","new",0xbe716a6f,"zpp_nape.callbacks.ZPP_CbSet.new","zpp_nape/callbacks/CbSet.hx",174,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_208_increment,"zpp_nape.callbacks.ZPP_CbSet","increment",0x3d0e157e,"zpp_nape.callbacks.ZPP_CbSet.increment","zpp_nape/callbacks/CbSet.hx",208,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_221_decrement,"zpp_nape.callbacks.ZPP_CbSet","decrement",0x1b910562,"zpp_nape.callbacks.ZPP_CbSet.decrement","zpp_nape/callbacks/CbSet.hx",221,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_224_invalidate_pairs,"zpp_nape.callbacks.ZPP_CbSet","invalidate_pairs",0x2f5af2a6,"zpp_nape.callbacks.ZPP_CbSet.invalidate_pairs","zpp_nape/callbacks/CbSet.hx",224,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_237_invalidate_listeners,"zpp_nape.callbacks.ZPP_CbSet","invalidate_listeners",0x9501e78c,"zpp_nape.callbacks.ZPP_CbSet.invalidate_listeners","zpp_nape/callbacks/CbSet.hx",237,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_245_validate_listeners,"zpp_nape.callbacks.ZPP_CbSet","validate_listeners",0xf65d9827,"zpp_nape.callbacks.ZPP_CbSet.validate_listeners","zpp_nape/callbacks/CbSet.hx",245,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_250_realvalidate_listeners,"zpp_nape.callbacks.ZPP_CbSet","realvalidate_listeners",0xcb5f4f85,"zpp_nape.callbacks.ZPP_CbSet.realvalidate_listeners","zpp_nape/callbacks/CbSet.hx",250,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_297_invalidate_bodylisteners,"zpp_nape.callbacks.ZPP_CbSet","invalidate_bodylisteners",0xcde5932a,"zpp_nape.callbacks.ZPP_CbSet.invalidate_bodylisteners","zpp_nape/callbacks/CbSet.hx",297,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_304_validate_bodylisteners,"zpp_nape.callbacks.ZPP_CbSet","validate_bodylisteners",0x3df52d45,"zpp_nape.callbacks.ZPP_CbSet.validate_bodylisteners","zpp_nape/callbacks/CbSet.hx",304,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_309_realvalidate_bodylisteners,"zpp_nape.callbacks.ZPP_CbSet","realvalidate_bodylisteners",0x9b48eba3,"zpp_nape.callbacks.ZPP_CbSet.realvalidate_bodylisteners","zpp_nape/callbacks/CbSet.hx",309,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_356_invalidate_conlisteners,"zpp_nape.callbacks.ZPP_CbSet","invalidate_conlisteners",0x5fc75110,"zpp_nape.callbacks.ZPP_CbSet.invalidate_conlisteners","zpp_nape/callbacks/CbSet.hx",356,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_363_validate_conlisteners,"zpp_nape.callbacks.ZPP_CbSet","validate_conlisteners",0xc54db355,"zpp_nape.callbacks.ZPP_CbSet.validate_conlisteners","zpp_nape/callbacks/CbSet.hx",363,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_368_realvalidate_conlisteners,"zpp_nape.callbacks.ZPP_CbSet","realvalidate_conlisteners",0x7b1a6ab7,"zpp_nape.callbacks.ZPP_CbSet.realvalidate_conlisteners","zpp_nape/callbacks/CbSet.hx",368,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_410_validate,"zpp_nape.callbacks.ZPP_CbSet","validate",0xf2926027,"zpp_nape.callbacks.ZPP_CbSet.validate","zpp_nape/callbacks/CbSet.hx",410,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_423_addConstraint,"zpp_nape.callbacks.ZPP_CbSet","addConstraint",0x82ffacad,"zpp_nape.callbacks.ZPP_CbSet.addConstraint","zpp_nape/callbacks/CbSet.hx",423,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_428_addInteractor,"zpp_nape.callbacks.ZPP_CbSet","addInteractor",0xada372a9,"zpp_nape.callbacks.ZPP_CbSet.addInteractor","zpp_nape/callbacks/CbSet.hx",428,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_433_remConstraint,"zpp_nape.callbacks.ZPP_CbSet","remConstraint",0xee593526,"zpp_nape.callbacks.ZPP_CbSet.remConstraint","zpp_nape/callbacks/CbSet.hx",433,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_438_remInteractor,"zpp_nape.callbacks.ZPP_CbSet","remInteractor",0x18fcfb22,"zpp_nape.callbacks.ZPP_CbSet.remInteractor","zpp_nape/callbacks/CbSet.hx",438,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_471_free,"zpp_nape.callbacks.ZPP_CbSet","free",0xdf8bcfbd,"zpp_nape.callbacks.ZPP_CbSet.free","zpp_nape/callbacks/CbSet.hx",471,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_520_alloc,"zpp_nape.callbacks.ZPP_CbSet","alloc",0xd5d72044,"zpp_nape.callbacks.ZPP_CbSet.alloc","zpp_nape/callbacks/CbSet.hx",520,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_440_setlt,"zpp_nape.callbacks.ZPP_CbSet","setlt",0x2e732279,"zpp_nape.callbacks.ZPP_CbSet.setlt","zpp_nape/callbacks/CbSet.hx",440,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_545_get,"zpp_nape.callbacks.ZPP_CbSet","get",0xbe6c1aa5,"zpp_nape.callbacks.ZPP_CbSet.get","zpp_nape/callbacks/CbSet.hx",545,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_582_compatible,"zpp_nape.callbacks.ZPP_CbSet","compatible",0xda413125,"zpp_nape.callbacks.ZPP_CbSet.compatible","zpp_nape/callbacks/CbSet.hx",582,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_586_empty_intersection,"zpp_nape.callbacks.ZPP_CbSet","empty_intersection",0x6822b54c,"zpp_nape.callbacks.ZPP_CbSet.empty_intersection","zpp_nape/callbacks/CbSet.hx",586,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_589_single_intersection,"zpp_nape.callbacks.ZPP_CbSet","single_intersection",0x2d1641af,"zpp_nape.callbacks.ZPP_CbSet.single_intersection","zpp_nape/callbacks/CbSet.hx",589,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_593_find_all,"zpp_nape.callbacks.ZPP_CbSet","find_all",0x947eae6c,"zpp_nape.callbacks.ZPP_CbSet.find_all","zpp_nape/callbacks/CbSet.hx",593,0x58b6155e)
HX_LOCAL_STACK_FRAME(_hx_pos_17405d252dbf4182_178_boot,"zpp_nape.callbacks.ZPP_CbSet","boot",0xdce4b743,"zpp_nape.callbacks.ZPP_CbSet.boot","zpp_nape/callbacks/CbSet.hx",178,0x58b6155e)
namespace zpp_nape{
namespace callbacks{

void ZPP_CbSet_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_174_new)
HXLINE( 419)		this->wrap_constraints = null();
HXLINE( 418)		this->constraints = null();
HXLINE( 417)		this->wrap_interactors = null();
HXLINE( 416)		this->interactors = null();
HXLINE( 352)		this->zip_conlisteners = false;
HXLINE( 351)		this->conlisteners = null();
HXLINE( 293)		this->zip_bodylisteners = false;
HXLINE( 292)		this->bodylisteners = null();
HXLINE( 234)		this->zip_listeners = false;
HXLINE( 233)		this->listeners = null();
HXLINE( 204)		this->cbpairs = null();
HXLINE( 203)		this->manager = null();
HXLINE( 202)		this->id = 0;
HXLINE( 177)		this->next = null();
HXLINE( 176)		this->count = 0;
HXLINE( 175)		this->cbTypes = null();
HXLINE( 456)		this->cbTypes =  ::zpp_nape::util::ZNPList_ZPP_CbType_obj::__alloc( HX_CTX );
HXLINE( 458)		this->listeners =  ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__alloc( HX_CTX );
HXLINE( 459)		this->zip_listeners = true;
HXLINE( 460)		this->bodylisteners =  ::zpp_nape::util::ZNPList_ZPP_BodyListener_obj::__alloc( HX_CTX );
HXLINE( 461)		this->zip_bodylisteners = true;
HXLINE( 462)		this->conlisteners =  ::zpp_nape::util::ZNPList_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
HXLINE( 463)		this->zip_conlisteners = true;
HXLINE( 464)		this->constraints =  ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__alloc( HX_CTX );
HXLINE( 465)		this->interactors =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
HXLINE( 466)		this->id = ::zpp_nape::ZPP_ID_obj::CbSet();
HXLINE( 467)		this->cbpairs =  ::zpp_nape::util::ZNPList_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_CbSet_obj::__CreateEmpty() { return new ZPP_CbSet_obj; }

void *ZPP_CbSet_obj::_hx_vtable = 0;

Dynamic ZPP_CbSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_CbSet_obj > _hx_result = new ZPP_CbSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_CbSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24559821;
}

void ZPP_CbSet_obj::increment(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_208_increment)
HXDLIN( 208)		this->count++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,increment,(void))

bool ZPP_CbSet_obj::decrement(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_221_decrement)
HXDLIN( 221)		return (--this->count == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,decrement,return )

void ZPP_CbSet_obj::invalidate_pairs(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_224_invalidate_pairs)
HXLINE( 225)		 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite = this->cbpairs->head;
HXLINE( 226)		while(hx::IsNotNull( cx_ite )){
HXLINE( 227)			 ::zpp_nape::callbacks::ZPP_CbSetPair cb = cx_ite->elt;
HXLINE( 228)			cb->zip_listeners = true;
HXLINE( 229)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,invalidate_pairs,(void))

void ZPP_CbSet_obj::invalidate_listeners(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_237_invalidate_listeners)
HXLINE( 238)		this->zip_listeners = true;
HXLINE( 239)		this->invalidate_pairs();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,invalidate_listeners,(void))

void ZPP_CbSet_obj::validate_listeners(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_245_validate_listeners)
HXDLIN( 245)		if (this->zip_listeners) {
HXLINE( 246)			this->zip_listeners = false;
HXLINE( 247)			this->realvalidate_listeners();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,validate_listeners,(void))

void ZPP_CbSet_obj::realvalidate_listeners(){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_250_realvalidate_listeners)
HXLINE( 251)		this->listeners->clear();
HXLINE( 252)		{
HXLINE( 253)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->cbTypes->head;
HXLINE( 254)			while(hx::IsNotNull( cx_ite )){
HXLINE( 255)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 256)				{
HXLINE( 257)					 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener npre = null();
HXLINE( 258)					 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener nite = this->listeners->head;
HXLINE( 259)					 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cite = cb->listeners->head;
HXLINE( 260)					while(hx::IsNotNull( cite )){
HXLINE( 261)						 ::zpp_nape::callbacks::ZPP_InteractionListener cx = cite->elt;
HXLINE( 262)						bool _hx_tmp;
HXDLIN( 262)						if (hx::IsNotNull( nite )) {
HXLINE( 262)							_hx_tmp = hx::IsEq( nite->elt,cx );
            						}
            						else {
HXLINE( 262)							_hx_tmp = false;
            						}
HXDLIN( 262)						if (_hx_tmp) {
HXLINE( 263)							cite = cite->next;
HXLINE( 264)							npre = nite;
HXLINE( 265)							nite = nite->next;
            						}
            						else {
HXLINE( 267)							bool _hx_tmp1;
HXDLIN( 267)							if (hx::IsNotNull( nite )) {
HXLINE( 267)								 ::zpp_nape::callbacks::ZPP_Listener b = nite->elt;
HXDLIN( 267)								if ((cx->precedence <= b->precedence)) {
HXLINE( 267)									if ((cx->precedence == b->precedence)) {
HXLINE( 267)										_hx_tmp1 = (cx->id > b->id);
            									}
            									else {
HXLINE( 267)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE( 267)									_hx_tmp1 = true;
            								}
            							}
            							else {
HXLINE( 267)								_hx_tmp1 = true;
            							}
HXDLIN( 267)							if (_hx_tmp1) {
HXLINE( 276)								if (hx::IsEq( cx->space,this->manager->space )) {
HXLINE( 278)									 ::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = this->listeners;
HXDLIN( 278)									 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret;
HXDLIN( 278)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 278)										ret =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 278)										ret = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 278)										::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret->next;
HXDLIN( 278)										ret->next = null();
            									}
HXDLIN( 278)									ret->elt = cx;
HXDLIN( 278)									 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp = ret;
HXDLIN( 278)									if (hx::IsNull( npre )) {
HXLINE( 278)										temp->next = _this->head;
HXDLIN( 278)										_this->head = temp;
            									}
            									else {
HXLINE( 278)										temp->next = npre->next;
HXDLIN( 278)										npre->next = temp;
            									}
HXDLIN( 278)									_this->pushmod = (_this->modified = true);
HXDLIN( 278)									_this->length++;
HXDLIN( 278)									npre = temp;
            								}
HXLINE( 280)								cite = cite->next;
            							}
            							else {
HXLINE( 283)								npre = nite;
HXLINE( 284)								nite = nite->next;
            							}
            						}
            					}
            				}
HXLINE( 288)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,realvalidate_listeners,(void))

void ZPP_CbSet_obj::invalidate_bodylisteners(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_297_invalidate_bodylisteners)
HXDLIN( 297)		this->zip_bodylisteners = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,invalidate_bodylisteners,(void))

void ZPP_CbSet_obj::validate_bodylisteners(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_304_validate_bodylisteners)
HXDLIN( 304)		if (this->zip_bodylisteners) {
HXLINE( 305)			this->zip_bodylisteners = false;
HXLINE( 306)			this->realvalidate_bodylisteners();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,validate_bodylisteners,(void))

void ZPP_CbSet_obj::realvalidate_bodylisteners(){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_309_realvalidate_bodylisteners)
HXLINE( 310)		this->bodylisteners->clear();
HXLINE( 311)		{
HXLINE( 312)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->cbTypes->head;
HXLINE( 313)			while(hx::IsNotNull( cx_ite )){
HXLINE( 314)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 315)				{
HXLINE( 316)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener npre = null();
HXLINE( 317)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener nite = this->bodylisteners->head;
HXLINE( 318)					 ::zpp_nape::util::ZNPNode_ZPP_BodyListener cite = cb->bodylisteners->head;
HXLINE( 319)					while(hx::IsNotNull( cite )){
HXLINE( 320)						 ::zpp_nape::callbacks::ZPP_BodyListener cx = cite->elt;
HXLINE( 321)						bool _hx_tmp;
HXDLIN( 321)						if (hx::IsNotNull( nite )) {
HXLINE( 321)							_hx_tmp = hx::IsEq( nite->elt,cx );
            						}
            						else {
HXLINE( 321)							_hx_tmp = false;
            						}
HXDLIN( 321)						if (_hx_tmp) {
HXLINE( 322)							cite = cite->next;
HXLINE( 323)							npre = nite;
HXLINE( 324)							nite = nite->next;
            						}
            						else {
HXLINE( 326)							bool _hx_tmp1;
HXDLIN( 326)							if (hx::IsNotNull( nite )) {
HXLINE( 326)								 ::zpp_nape::callbacks::ZPP_Listener b = nite->elt;
HXDLIN( 326)								if ((cx->precedence <= b->precedence)) {
HXLINE( 326)									if ((cx->precedence == b->precedence)) {
HXLINE( 326)										_hx_tmp1 = (cx->id > b->id);
            									}
            									else {
HXLINE( 326)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE( 326)									_hx_tmp1 = true;
            								}
            							}
            							else {
HXLINE( 326)								_hx_tmp1 = true;
            							}
HXDLIN( 326)							if (_hx_tmp1) {
HXLINE( 335)								bool _hx_tmp2;
HXDLIN( 335)								 ::zpp_nape::callbacks::ZPP_OptionType _this = cx->options;
HXDLIN( 335)								if (!(_this->nonemptyintersection(this->cbTypes,_this->excludes))) {
HXLINE( 335)									_hx_tmp2 = hx::IsEq( cx->space,this->manager->space );
            								}
            								else {
HXLINE( 335)									_hx_tmp2 = false;
            								}
HXDLIN( 335)								if (_hx_tmp2) {
HXLINE( 337)									 ::zpp_nape::util::ZNPList_ZPP_BodyListener _this1 = this->bodylisteners;
HXDLIN( 337)									 ::zpp_nape::util::ZNPNode_ZPP_BodyListener ret;
HXDLIN( 337)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )) {
HXLINE( 337)										ret =  ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 337)										ret = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN( 337)										::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = ret->next;
HXDLIN( 337)										ret->next = null();
            									}
HXDLIN( 337)									ret->elt = cx;
HXDLIN( 337)									 ::zpp_nape::util::ZNPNode_ZPP_BodyListener temp = ret;
HXDLIN( 337)									if (hx::IsNull( npre )) {
HXLINE( 337)										temp->next = _this1->head;
HXDLIN( 337)										_this1->head = temp;
            									}
            									else {
HXLINE( 337)										temp->next = npre->next;
HXDLIN( 337)										npre->next = temp;
            									}
HXDLIN( 337)									_this1->pushmod = (_this1->modified = true);
HXDLIN( 337)									_this1->length++;
HXDLIN( 337)									npre = temp;
            								}
HXLINE( 339)								cite = cite->next;
            							}
            							else {
HXLINE( 342)								npre = nite;
HXLINE( 343)								nite = nite->next;
            							}
            						}
            					}
            				}
HXLINE( 347)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,realvalidate_bodylisteners,(void))

void ZPP_CbSet_obj::invalidate_conlisteners(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_356_invalidate_conlisteners)
HXDLIN( 356)		this->zip_conlisteners = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,invalidate_conlisteners,(void))

void ZPP_CbSet_obj::validate_conlisteners(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_363_validate_conlisteners)
HXDLIN( 363)		if (this->zip_conlisteners) {
HXLINE( 364)			this->zip_conlisteners = false;
HXLINE( 365)			this->realvalidate_conlisteners();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,validate_conlisteners,(void))

void ZPP_CbSet_obj::realvalidate_conlisteners(){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_368_realvalidate_conlisteners)
HXLINE( 369)		this->conlisteners->clear();
HXLINE( 370)		{
HXLINE( 371)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->cbTypes->head;
HXLINE( 372)			while(hx::IsNotNull( cx_ite )){
HXLINE( 373)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 374)				{
HXLINE( 375)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener npre = null();
HXLINE( 376)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener nite = this->conlisteners->head;
HXLINE( 377)					 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cite = cb->conlisteners->head;
HXLINE( 378)					while(hx::IsNotNull( cite )){
HXLINE( 379)						 ::zpp_nape::callbacks::ZPP_ConstraintListener cx = cite->elt;
HXLINE( 380)						bool _hx_tmp;
HXDLIN( 380)						if (hx::IsNotNull( nite )) {
HXLINE( 380)							_hx_tmp = hx::IsEq( nite->elt,cx );
            						}
            						else {
HXLINE( 380)							_hx_tmp = false;
            						}
HXDLIN( 380)						if (_hx_tmp) {
HXLINE( 381)							cite = cite->next;
HXLINE( 382)							npre = nite;
HXLINE( 383)							nite = nite->next;
            						}
            						else {
HXLINE( 385)							bool _hx_tmp1;
HXDLIN( 385)							if (hx::IsNotNull( nite )) {
HXLINE( 385)								 ::zpp_nape::callbacks::ZPP_Listener b = nite->elt;
HXDLIN( 385)								if ((cx->precedence <= b->precedence)) {
HXLINE( 385)									if ((cx->precedence == b->precedence)) {
HXLINE( 385)										_hx_tmp1 = (cx->id > b->id);
            									}
            									else {
HXLINE( 385)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE( 385)									_hx_tmp1 = true;
            								}
            							}
            							else {
HXLINE( 385)								_hx_tmp1 = true;
            							}
HXDLIN( 385)							if (_hx_tmp1) {
HXLINE( 394)								bool _hx_tmp2;
HXDLIN( 394)								 ::zpp_nape::callbacks::ZPP_OptionType _this = cx->options;
HXDLIN( 394)								if (!(_this->nonemptyintersection(this->cbTypes,_this->excludes))) {
HXLINE( 394)									_hx_tmp2 = hx::IsEq( cx->space,this->manager->space );
            								}
            								else {
HXLINE( 394)									_hx_tmp2 = false;
            								}
HXDLIN( 394)								if (_hx_tmp2) {
HXLINE( 396)									 ::zpp_nape::util::ZNPList_ZPP_ConstraintListener _this1 = this->conlisteners;
HXDLIN( 396)									 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXDLIN( 396)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXLINE( 396)										ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 396)										ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN( 396)										::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXDLIN( 396)										ret->next = null();
            									}
HXDLIN( 396)									ret->elt = cx;
HXDLIN( 396)									 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener temp = ret;
HXDLIN( 396)									if (hx::IsNull( npre )) {
HXLINE( 396)										temp->next = _this1->head;
HXDLIN( 396)										_this1->head = temp;
            									}
            									else {
HXLINE( 396)										temp->next = npre->next;
HXDLIN( 396)										npre->next = temp;
            									}
HXDLIN( 396)									_this1->pushmod = (_this1->modified = true);
HXDLIN( 396)									_this1->length++;
HXDLIN( 396)									npre = temp;
            								}
HXLINE( 398)								cite = cite->next;
            							}
            							else {
HXLINE( 401)								npre = nite;
HXLINE( 402)								nite = nite->next;
            							}
            						}
            					}
            				}
HXLINE( 406)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,realvalidate_conlisteners,(void))

void ZPP_CbSet_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_410_validate)
HXLINE( 412)		if (this->zip_listeners) {
HXLINE( 412)			this->zip_listeners = false;
HXDLIN( 412)			this->realvalidate_listeners();
            		}
HXLINE( 413)		if (this->zip_bodylisteners) {
HXLINE( 413)			this->zip_bodylisteners = false;
HXDLIN( 413)			this->realvalidate_bodylisteners();
            		}
HXLINE( 414)		if (this->zip_conlisteners) {
HXLINE( 414)			this->zip_conlisteners = false;
HXDLIN( 414)			this->realvalidate_conlisteners();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,validate,(void))

void ZPP_CbSet_obj::addConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_423_addConstraint)
HXDLIN( 423)		this->constraints->add(con);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSet_obj,addConstraint,(void))

void ZPP_CbSet_obj::addInteractor( ::zpp_nape::phys::ZPP_Interactor intx){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_428_addInteractor)
HXDLIN( 428)		this->interactors->add(intx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSet_obj,addInteractor,(void))

void ZPP_CbSet_obj::remConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_433_remConstraint)
HXDLIN( 433)		this->constraints->remove(con);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSet_obj,remConstraint,(void))

void ZPP_CbSet_obj::remInteractor( ::zpp_nape::phys::ZPP_Interactor intx){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_438_remInteractor)
HXDLIN( 438)		this->interactors->remove(intx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSet_obj,remInteractor,(void))

void ZPP_CbSet_obj::free(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_471_free)
HXLINE( 497)		this->listeners->clear();
HXLINE( 498)		this->zip_listeners = true;
HXLINE( 499)		this->bodylisteners->clear();
HXLINE( 500)		this->zip_bodylisteners = true;
HXLINE( 501)		this->conlisteners->clear();
HXLINE( 502)		this->zip_conlisteners = true;
HXLINE( 504)		while(hx::IsNotNull( this->cbTypes->head )){
HXLINE( 505)			 ::zpp_nape::callbacks::ZPP_CbType cb = this->cbTypes->pop_unsafe();
HXLINE( 506)			cb->cbsets->remove(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,free,(void))

void ZPP_CbSet_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_520_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSet_obj,alloc,(void))

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_CbSet_obj::zpp_pool;

bool ZPP_CbSet_obj::setlt( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_440_setlt)
HXLINE( 441)		 ::zpp_nape::util::ZNPNode_ZPP_CbType i = a->cbTypes->head;
HXLINE( 442)		 ::zpp_nape::util::ZNPNode_ZPP_CbType j = b->cbTypes->head;
HXLINE( 443)		while(true){
HXLINE( 443)			bool _hx_tmp;
HXDLIN( 443)			if (hx::IsNotNull( i )) {
HXLINE( 443)				_hx_tmp = hx::IsNotNull( j );
            			}
            			else {
HXLINE( 443)				_hx_tmp = false;
            			}
HXDLIN( 443)			if (!(_hx_tmp)) {
HXLINE( 443)				goto _hx_goto_28;
            			}
HXLINE( 444)			 ::zpp_nape::callbacks::ZPP_CbType ca = i->elt;
HXLINE( 445)			 ::zpp_nape::callbacks::ZPP_CbType cb = j->elt;
HXLINE( 446)			if ((ca->id < cb->id)) {
HXLINE( 446)				return true;
            			}
HXLINE( 447)			if ((cb->id < ca->id)) {
HXLINE( 447)				return false;
            			}
            			else {
HXLINE( 449)				i = i->next;
HXLINE( 450)				j = j->next;
            			}
            		}
            		_hx_goto_28:;
HXLINE( 453)		if (hx::IsNotNull( j )) {
HXLINE( 453)			return hx::IsNull( i );
            		}
            		else {
HXLINE( 453)			return false;
            		}
HXDLIN( 453)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbSet_obj,setlt,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_CbSet_obj::get( ::zpp_nape::util::ZNPList_ZPP_CbType cbTypes){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_545_get)
HXLINE( 546)		 ::zpp_nape::callbacks::ZPP_CbSet ret;
HXLINE( 548)		if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 549)			ret =  ::zpp_nape::callbacks::ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 555)			ret = ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool;
HXLINE( 556)			::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool = ret->next;
HXLINE( 557)			ret->next = null();
            		}
HXLINE( 564)		 ::zpp_nape::util::ZNPNode_ZPP_CbType ite = null();
HXLINE( 567)		{
HXLINE( 568)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = cbTypes->head;
HXLINE( 569)			while(hx::IsNotNull( cx_ite )){
HXLINE( 570)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 571)				{
HXLINE( 572)					ite = ret->cbTypes->insert(ite,cb);
HXLINE( 573)					cb->cbsets->add(ret);
            				}
HXLINE( 575)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 578)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSet_obj,get,return )

bool ZPP_CbSet_obj::compatible( ::zpp_nape::callbacks::ZPP_InteractionListener i, ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b){
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_582_compatible)
HXDLIN( 582)		bool _hx_tmp;
HXDLIN( 582)		 ::zpp_nape::callbacks::ZPP_OptionType _this = i->options1;
HXDLIN( 582)		 ::zpp_nape::util::ZNPList_ZPP_CbType xs = a->cbTypes;
HXDLIN( 582)		bool _hx_tmp1;
HXDLIN( 582)		if (_this->nonemptyintersection(xs,_this->includes)) {
HXDLIN( 582)			_hx_tmp1 = !(_this->nonemptyintersection(xs,_this->excludes));
            		}
            		else {
HXDLIN( 582)			_hx_tmp1 = false;
            		}
HXDLIN( 582)		if (_hx_tmp1) {
HXDLIN( 582)			 ::zpp_nape::callbacks::ZPP_OptionType _this1 = i->options2;
HXDLIN( 582)			 ::zpp_nape::util::ZNPList_ZPP_CbType xs1 = b->cbTypes;
HXDLIN( 582)			if (_this1->nonemptyintersection(xs1,_this1->includes)) {
HXDLIN( 582)				_hx_tmp = !(_this1->nonemptyintersection(xs1,_this1->excludes));
            			}
            			else {
HXDLIN( 582)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 582)			_hx_tmp = false;
            		}
HXDLIN( 582)		if (!(_hx_tmp)) {
HXDLIN( 582)			 ::zpp_nape::callbacks::ZPP_OptionType _this2 = i->options2;
HXDLIN( 582)			 ::zpp_nape::util::ZNPList_ZPP_CbType xs2 = a->cbTypes;
HXDLIN( 582)			bool _hx_tmp2;
HXDLIN( 582)			if (_this2->nonemptyintersection(xs2,_this2->includes)) {
HXDLIN( 582)				_hx_tmp2 = !(_this2->nonemptyintersection(xs2,_this2->excludes));
            			}
            			else {
HXDLIN( 582)				_hx_tmp2 = false;
            			}
HXDLIN( 582)			if (_hx_tmp2) {
HXDLIN( 582)				 ::zpp_nape::callbacks::ZPP_OptionType _this3 = i->options1;
HXDLIN( 582)				 ::zpp_nape::util::ZNPList_ZPP_CbType xs3 = b->cbTypes;
HXDLIN( 582)				if (_this3->nonemptyintersection(xs3,_this3->includes)) {
HXDLIN( 582)					return !(_this3->nonemptyintersection(xs3,_this3->excludes));
            				}
            				else {
HXDLIN( 582)					return false;
            				}
            			}
            			else {
HXDLIN( 582)				return false;
            			}
            		}
            		else {
HXDLIN( 582)			return true;
            		}
HXDLIN( 582)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_CbSet_obj,compatible,return )

bool ZPP_CbSet_obj::empty_intersection( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_586_empty_intersection)
HXDLIN( 586)		 ::zpp_nape::space::ZPP_CbSetManager _this = a->manager;
HXDLIN( 586)		 ::zpp_nape::callbacks::ZPP_CbSetPair ret = null();
HXDLIN( 586)		 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN( 586)		if ((a->cbpairs->length < b->cbpairs->length)) {
HXDLIN( 586)			pairs = a->cbpairs;
            		}
            		else {
HXDLIN( 586)			pairs = b->cbpairs;
            		}
HXDLIN( 586)		{
HXDLIN( 586)			 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite = pairs->head;
HXDLIN( 586)			while(hx::IsNotNull( cx_ite )){
HXDLIN( 586)				 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite->elt;
HXDLIN( 586)				bool _hx_tmp;
HXDLIN( 586)				bool _hx_tmp1;
HXDLIN( 586)				if (hx::IsEq( p->a,a )) {
HXDLIN( 586)					_hx_tmp1 = hx::IsEq( p->b,b );
            				}
            				else {
HXDLIN( 586)					_hx_tmp1 = false;
            				}
HXDLIN( 586)				if (!(_hx_tmp1)) {
HXDLIN( 586)					if (hx::IsEq( p->a,b )) {
HXDLIN( 586)						_hx_tmp = hx::IsEq( p->b,a );
            					}
            					else {
HXDLIN( 586)						_hx_tmp = false;
            					}
            				}
            				else {
HXDLIN( 586)					_hx_tmp = true;
            				}
HXDLIN( 586)				if (_hx_tmp) {
HXDLIN( 586)					ret = p;
HXDLIN( 586)					goto _hx_goto_33;
            				}
HXDLIN( 586)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_33:;
            		}
HXDLIN( 586)		if (hx::IsNull( ret )) {
HXDLIN( 586)			 ::zpp_nape::callbacks::ZPP_CbSetPair ret1;
HXDLIN( 586)			{
HXDLIN( 586)				if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXDLIN( 586)					ret1 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            				}
            				else {
HXDLIN( 586)					ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 586)					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
HXDLIN( 586)					ret1->next = null();
            				}
HXDLIN( 586)				ret1->zip_listeners = true;
            			}
HXDLIN( 586)			if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b)) {
HXDLIN( 586)				ret1->a = a;
HXDLIN( 586)				ret1->b = b;
            			}
            			else {
HXDLIN( 586)				ret1->a = b;
HXDLIN( 586)				ret1->b = a;
            			}
HXDLIN( 586)			ret = ret1;
HXDLIN( 586)			a->cbpairs->add(ret);
HXDLIN( 586)			if (hx::IsNotEq( b,a )) {
HXDLIN( 586)				b->cbpairs->add(ret);
            			}
            		}
HXDLIN( 586)		if (ret->zip_listeners) {
HXDLIN( 586)			ret->zip_listeners = false;
HXDLIN( 586)			ret->_hx___validate();
            		}
HXDLIN( 586)		return hx::IsNull( ret->listeners->head );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbSet_obj,empty_intersection,return )

bool ZPP_CbSet_obj::single_intersection( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b, ::zpp_nape::callbacks::ZPP_InteractionListener i){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_589_single_intersection)
HXDLIN( 589)		 ::zpp_nape::space::ZPP_CbSetManager _this = a->manager;
HXDLIN( 589)		 ::zpp_nape::callbacks::ZPP_CbSetPair ret = null();
HXDLIN( 589)		 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN( 589)		if ((a->cbpairs->length < b->cbpairs->length)) {
HXDLIN( 589)			pairs = a->cbpairs;
            		}
            		else {
HXDLIN( 589)			pairs = b->cbpairs;
            		}
HXDLIN( 589)		{
HXDLIN( 589)			 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite = pairs->head;
HXDLIN( 589)			while(hx::IsNotNull( cx_ite )){
HXDLIN( 589)				 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite->elt;
HXDLIN( 589)				bool _hx_tmp;
HXDLIN( 589)				bool _hx_tmp1;
HXDLIN( 589)				if (hx::IsEq( p->a,a )) {
HXDLIN( 589)					_hx_tmp1 = hx::IsEq( p->b,b );
            				}
            				else {
HXDLIN( 589)					_hx_tmp1 = false;
            				}
HXDLIN( 589)				if (!(_hx_tmp1)) {
HXDLIN( 589)					if (hx::IsEq( p->a,b )) {
HXDLIN( 589)						_hx_tmp = hx::IsEq( p->b,a );
            					}
            					else {
HXDLIN( 589)						_hx_tmp = false;
            					}
            				}
            				else {
HXDLIN( 589)					_hx_tmp = true;
            				}
HXDLIN( 589)				if (_hx_tmp) {
HXDLIN( 589)					ret = p;
HXDLIN( 589)					goto _hx_goto_35;
            				}
HXDLIN( 589)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_35:;
            		}
HXDLIN( 589)		if (hx::IsNull( ret )) {
HXDLIN( 589)			 ::zpp_nape::callbacks::ZPP_CbSetPair ret1;
HXDLIN( 589)			{
HXDLIN( 589)				if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXDLIN( 589)					ret1 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            				}
            				else {
HXDLIN( 589)					ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 589)					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
HXDLIN( 589)					ret1->next = null();
            				}
HXDLIN( 589)				ret1->zip_listeners = true;
            			}
HXDLIN( 589)			if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b)) {
HXDLIN( 589)				ret1->a = a;
HXDLIN( 589)				ret1->b = b;
            			}
            			else {
HXDLIN( 589)				ret1->a = b;
HXDLIN( 589)				ret1->b = a;
            			}
HXDLIN( 589)			ret = ret1;
HXDLIN( 589)			a->cbpairs->add(ret);
HXDLIN( 589)			if (hx::IsNotEq( b,a )) {
HXDLIN( 589)				b->cbpairs->add(ret);
            			}
            		}
HXDLIN( 589)		if (ret->zip_listeners) {
HXDLIN( 589)			ret->zip_listeners = false;
HXDLIN( 589)			ret->_hx___validate();
            		}
HXDLIN( 589)		 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener ite = ret->listeners->head;
HXDLIN( 589)		bool _hx_tmp2;
HXDLIN( 589)		if (hx::IsNotNull( ite )) {
HXDLIN( 589)			_hx_tmp2 = hx::IsEq( ite->elt,i );
            		}
            		else {
HXDLIN( 589)			_hx_tmp2 = false;
            		}
HXDLIN( 589)		if (_hx_tmp2) {
HXDLIN( 589)			return hx::IsNull( ite->next );
            		}
            		else {
HXDLIN( 589)			return false;
            		}
HXDLIN( 589)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_CbSet_obj,single_intersection,return )

void ZPP_CbSet_obj::find_all( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b,int event, ::Dynamic cb){
            	HX_GC_STACKFRAME(&_hx_pos_17405d252dbf4182_593_find_all)
HXDLIN( 593)		 ::zpp_nape::space::ZPP_CbSetManager _this = a->manager;
HXDLIN( 593)		 ::zpp_nape::callbacks::ZPP_CbSetPair ret = null();
HXDLIN( 593)		 ::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;
HXDLIN( 593)		if ((a->cbpairs->length < b->cbpairs->length)) {
HXDLIN( 593)			pairs = a->cbpairs;
            		}
            		else {
HXDLIN( 593)			pairs = b->cbpairs;
            		}
HXDLIN( 593)		{
HXDLIN( 593)			 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite = pairs->head;
HXDLIN( 593)			while(hx::IsNotNull( cx_ite )){
HXDLIN( 593)				 ::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite->elt;
HXDLIN( 593)				bool _hx_tmp;
HXDLIN( 593)				bool _hx_tmp1;
HXDLIN( 593)				if (hx::IsEq( p->a,a )) {
HXDLIN( 593)					_hx_tmp1 = hx::IsEq( p->b,b );
            				}
            				else {
HXDLIN( 593)					_hx_tmp1 = false;
            				}
HXDLIN( 593)				if (!(_hx_tmp1)) {
HXDLIN( 593)					if (hx::IsEq( p->a,b )) {
HXDLIN( 593)						_hx_tmp = hx::IsEq( p->b,a );
            					}
            					else {
HXDLIN( 593)						_hx_tmp = false;
            					}
            				}
            				else {
HXDLIN( 593)					_hx_tmp = true;
            				}
HXDLIN( 593)				if (_hx_tmp) {
HXDLIN( 593)					ret = p;
HXDLIN( 593)					goto _hx_goto_37;
            				}
HXDLIN( 593)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_37:;
            		}
HXDLIN( 593)		if (hx::IsNull( ret )) {
HXDLIN( 593)			 ::zpp_nape::callbacks::ZPP_CbSetPair ret1;
HXDLIN( 593)			{
HXDLIN( 593)				if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXDLIN( 593)					ret1 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            				}
            				else {
HXDLIN( 593)					ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 593)					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
HXDLIN( 593)					ret1->next = null();
            				}
HXDLIN( 593)				ret1->zip_listeners = true;
            			}
HXDLIN( 593)			if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b)) {
HXDLIN( 593)				ret1->a = a;
HXDLIN( 593)				ret1->b = b;
            			}
            			else {
HXDLIN( 593)				ret1->a = b;
HXDLIN( 593)				ret1->b = a;
            			}
HXDLIN( 593)			ret = ret1;
HXDLIN( 593)			a->cbpairs->add(ret);
HXDLIN( 593)			if (hx::IsNotEq( b,a )) {
HXDLIN( 593)				b->cbpairs->add(ret);
            			}
            		}
HXDLIN( 593)		if (ret->zip_listeners) {
HXDLIN( 593)			ret->zip_listeners = false;
HXDLIN( 593)			ret->_hx___validate();
            		}
HXDLIN( 593)		{
HXDLIN( 593)			 ::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite1 = ret->listeners->head;
HXDLIN( 593)			while(hx::IsNotNull( cx_ite1 )){
HXDLIN( 593)				 ::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite1->elt;
HXDLIN( 593)				if ((x->event == event)) {
HXDLIN( 593)					cb(x);
            				}
HXDLIN( 593)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_CbSet_obj,find_all,(void))


hx::ObjectPtr< ZPP_CbSet_obj > ZPP_CbSet_obj::__new() {
	hx::ObjectPtr< ZPP_CbSet_obj > __this = new ZPP_CbSet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_CbSet_obj > ZPP_CbSet_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_CbSet_obj *__this = (ZPP_CbSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_CbSet_obj), true, "zpp_nape.callbacks.ZPP_CbSet"));
	*(void **)__this = ZPP_CbSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_CbSet_obj::ZPP_CbSet_obj()
{
}

void ZPP_CbSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_CbSet);
	HX_MARK_MEMBER_NAME(cbTypes,"cbTypes");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(cbpairs,"cbpairs");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(zip_listeners,"zip_listeners");
	HX_MARK_MEMBER_NAME(bodylisteners,"bodylisteners");
	HX_MARK_MEMBER_NAME(zip_bodylisteners,"zip_bodylisteners");
	HX_MARK_MEMBER_NAME(conlisteners,"conlisteners");
	HX_MARK_MEMBER_NAME(zip_conlisteners,"zip_conlisteners");
	HX_MARK_MEMBER_NAME(interactors,"interactors");
	HX_MARK_MEMBER_NAME(wrap_interactors,"wrap_interactors");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_END_CLASS();
}

void ZPP_CbSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cbTypes,"cbTypes");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(cbpairs,"cbpairs");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(zip_listeners,"zip_listeners");
	HX_VISIT_MEMBER_NAME(bodylisteners,"bodylisteners");
	HX_VISIT_MEMBER_NAME(zip_bodylisteners,"zip_bodylisteners");
	HX_VISIT_MEMBER_NAME(conlisteners,"conlisteners");
	HX_VISIT_MEMBER_NAME(zip_conlisteners,"zip_conlisteners");
	HX_VISIT_MEMBER_NAME(interactors,"interactors");
	HX_VISIT_MEMBER_NAME(wrap_interactors,"wrap_interactors");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
}

hx::Val ZPP_CbSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cbTypes") ) { return hx::Val( cbTypes ); }
		if (HX_FIELD_EQ(inName,"manager") ) { return hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"cbpairs") ) { return hx::Val( cbpairs ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"increment") ) { return hx::Val( increment_dyn() ); }
		if (HX_FIELD_EQ(inName,"decrement") ) { return hx::Val( decrement_dyn() ); }
		if (HX_FIELD_EQ(inName,"listeners") ) { return hx::Val( listeners ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interactors") ) { return hx::Val( interactors ); }
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"conlisteners") ) { return hx::Val( conlisteners ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"zip_listeners") ) { return hx::Val( zip_listeners ); }
		if (HX_FIELD_EQ(inName,"bodylisteners") ) { return hx::Val( bodylisteners ); }
		if (HX_FIELD_EQ(inName,"addConstraint") ) { return hx::Val( addConstraint_dyn() ); }
		if (HX_FIELD_EQ(inName,"addInteractor") ) { return hx::Val( addInteractor_dyn() ); }
		if (HX_FIELD_EQ(inName,"remConstraint") ) { return hx::Val( remConstraint_dyn() ); }
		if (HX_FIELD_EQ(inName,"remInteractor") ) { return hx::Val( remInteractor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"invalidate_pairs") ) { return hx::Val( invalidate_pairs_dyn() ); }
		if (HX_FIELD_EQ(inName,"zip_conlisteners") ) { return hx::Val( zip_conlisteners ); }
		if (HX_FIELD_EQ(inName,"wrap_interactors") ) { return hx::Val( wrap_interactors ); }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return hx::Val( wrap_constraints ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"zip_bodylisteners") ) { return hx::Val( zip_bodylisteners ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"validate_listeners") ) { return hx::Val( validate_listeners_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"invalidate_listeners") ) { return hx::Val( invalidate_listeners_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"validate_conlisteners") ) { return hx::Val( validate_conlisteners_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"realvalidate_listeners") ) { return hx::Val( realvalidate_listeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"validate_bodylisteners") ) { return hx::Val( validate_bodylisteners_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"invalidate_conlisteners") ) { return hx::Val( invalidate_conlisteners_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"invalidate_bodylisteners") ) { return hx::Val( invalidate_bodylisteners_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"realvalidate_conlisteners") ) { return hx::Val( realvalidate_conlisteners_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"realvalidate_bodylisteners") ) { return hx::Val( realvalidate_bodylisteners_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_CbSet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setlt") ) { outValue = setlt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
		if (HX_FIELD_EQ(inName,"find_all") ) { outValue = find_all_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"compatible") ) { outValue = compatible_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"empty_intersection") ) { outValue = empty_intersection_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"single_intersection") ) { outValue = single_intersection_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_CbSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cbTypes") ) { cbTypes=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::zpp_nape::space::ZPP_CbSetManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbpairs") ) { cbpairs=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbSetPair >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interactors") ) { interactors=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"conlisteners") ) { conlisteners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_ConstraintListener >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"zip_listeners") ) { zip_listeners=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bodylisteners") ) { bodylisteners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_BodyListener >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"zip_conlisteners") ) { zip_conlisteners=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_interactors") ) { wrap_interactors=inValue.Cast<  ::nape::phys::InteractorList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast<  ::nape::constraint::ConstraintList >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"zip_bodylisteners") ) { zip_bodylisteners=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_CbSet_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return true; }
	}
	return false;
}

void ZPP_CbSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cbTypes",5a,29,bf,f1));
	outFields->push(HX_("count",cf,44,63,4a));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("manager",6d,92,c1,13));
	outFields->push(HX_("cbpairs",1a,04,15,01));
	outFields->push(HX_("listeners",7f,65,8e,f3));
	outFields->push(HX_("zip_listeners",61,93,bf,e5));
	outFields->push(HX_("bodylisteners",9d,86,53,63));
	outFields->push(HX_("zip_bodylisteners",7f,4d,ae,ea));
	outFields->push(HX_("conlisteners",fd,cc,05,e1));
	outFields->push(HX_("zip_conlisteners",5b,f8,70,f7));
	outFields->push(HX_("interactors",fa,c7,5d,3c));
	outFields->push(HX_("wrap_interactors",c5,36,bb,d9));
	outFields->push(HX_("constraints",76,51,b4,17));
	outFields->push(HX_("wrap_constraints",41,c0,11,b5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_CbSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_CbType */ ,(int)offsetof(ZPP_CbSet_obj,cbTypes),HX_("cbTypes",5a,29,bf,f1)},
	{hx::fsInt,(int)offsetof(ZPP_CbSet_obj,count),HX_("count",cf,44,63,4a)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_CbSet */ ,(int)offsetof(ZPP_CbSet_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsInt,(int)offsetof(ZPP_CbSet_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_CbSetManager */ ,(int)offsetof(ZPP_CbSet_obj,manager),HX_("manager",6d,92,c1,13)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_CbSetPair */ ,(int)offsetof(ZPP_CbSet_obj,cbpairs),HX_("cbpairs",1a,04,15,01)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_InteractionListener */ ,(int)offsetof(ZPP_CbSet_obj,listeners),HX_("listeners",7f,65,8e,f3)},
	{hx::fsBool,(int)offsetof(ZPP_CbSet_obj,zip_listeners),HX_("zip_listeners",61,93,bf,e5)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_BodyListener */ ,(int)offsetof(ZPP_CbSet_obj,bodylisteners),HX_("bodylisteners",9d,86,53,63)},
	{hx::fsBool,(int)offsetof(ZPP_CbSet_obj,zip_bodylisteners),HX_("zip_bodylisteners",7f,4d,ae,ea)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_ConstraintListener */ ,(int)offsetof(ZPP_CbSet_obj,conlisteners),HX_("conlisteners",fd,cc,05,e1)},
	{hx::fsBool,(int)offsetof(ZPP_CbSet_obj,zip_conlisteners),HX_("zip_conlisteners",5b,f8,70,f7)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Interactor */ ,(int)offsetof(ZPP_CbSet_obj,interactors),HX_("interactors",fa,c7,5d,3c)},
	{hx::fsObject /*  ::nape::phys::InteractorList */ ,(int)offsetof(ZPP_CbSet_obj,wrap_interactors),HX_("wrap_interactors",c5,36,bb,d9)},
	{hx::fsObject /*  ::zpp_nape::util::ZNPList_ZPP_Constraint */ ,(int)offsetof(ZPP_CbSet_obj,constraints),HX_("constraints",76,51,b4,17)},
	{hx::fsObject /*  ::nape::constraint::ConstraintList */ ,(int)offsetof(ZPP_CbSet_obj,wrap_constraints),HX_("wrap_constraints",41,c0,11,b5)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_CbSet_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_CbSet */ ,(void *) &ZPP_CbSet_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_CbSet_obj_sMemberFields[] = {
	HX_("cbTypes",5a,29,bf,f1),
	HX_("count",cf,44,63,4a),
	HX_("next",f3,84,02,49),
	HX_("id",db,5b,00,00),
	HX_("manager",6d,92,c1,13),
	HX_("cbpairs",1a,04,15,01),
	HX_("increment",2f,06,ff,31),
	HX_("decrement",13,f6,81,10),
	HX_("invalidate_pairs",15,ea,48,8f),
	HX_("listeners",7f,65,8e,f3),
	HX_("zip_listeners",61,93,bf,e5),
	HX_("invalidate_listeners",7b,c2,31,d2),
	HX_("validate_listeners",56,89,4b,a7),
	HX_("realvalidate_listeners",34,04,6f,98),
	HX_("bodylisteners",9d,86,53,63),
	HX_("zip_bodylisteners",7f,4d,ae,ea),
	HX_("invalidate_bodylisteners",99,11,cf,c5),
	HX_("validate_bodylisteners",f4,e1,04,0b),
	HX_("realvalidate_bodylisteners",d2,23,62,7f),
	HX_("conlisteners",fd,cc,05,e1),
	HX_("zip_conlisteners",5b,f8,70,f7),
	HX_("invalidate_conlisteners",81,b5,75,00),
	HX_("validate_conlisteners",86,69,fd,11),
	HX_("realvalidate_conlisteners",68,8d,7f,6f),
	HX_("validate",96,d0,e3,04),
	HX_("interactors",fa,c7,5d,3c),
	HX_("wrap_interactors",c5,36,bb,d9),
	HX_("constraints",76,51,b4,17),
	HX_("wrap_constraints",41,c0,11,b5),
	HX_("addConstraint",de,49,15,c5),
	HX_("addInteractor",da,0f,b9,ef),
	HX_("remConstraint",57,d2,6e,30),
	HX_("remInteractor",53,98,12,5b),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	::String(null()) };

static void ZPP_CbSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_CbSet_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_CbSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_CbSet_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_CbSet_obj::__mClass;

static ::String ZPP_CbSet_obj_sStaticFields[] = {
	HX_("zpp_pool",81,5d,d4,38),
	HX_("setlt",aa,a6,2f,7a),
	HX_("get",96,80,4e,00),
	HX_("compatible",54,db,22,38),
	HX_("empty_intersection",7b,a6,10,19),
	HX_("single_intersection",a0,59,5b,4c),
	HX_("find_all",db,1e,d0,a6),
	::String(null())
};

void ZPP_CbSet_obj::__register()
{
	ZPP_CbSet_obj _hx_dummy;
	ZPP_CbSet_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.callbacks.ZPP_CbSet",fd,06,da,16);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_CbSet_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_CbSet_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_CbSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_CbSet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_CbSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_CbSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_CbSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_CbSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_CbSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_CbSet_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_17405d252dbf4182_178_boot)
HXDLIN( 178)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace callbacks
