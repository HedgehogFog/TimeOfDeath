// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_Callback
#include <hxinc/nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <hxinc/nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintListener
#include <hxinc/nape/callbacks/ConstraintListener.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <hxinc/nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_OptionType
#include <hxinc/nape/callbacks/OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <hxinc/zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <hxinc/zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <hxinc/zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <hxinc/zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSet
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_270_new,"zpp_nape.callbacks.ZPP_ConstraintListener","new",0xc2808169,"zpp_nape.callbacks.ZPP_ConstraintListener.new","zpp_nape/callbacks/Listener.hx",270,0x87b155a7)
HX_LOCAL_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_276_immutable_options,"zpp_nape.callbacks.ZPP_ConstraintListener","immutable_options",0x279bd5ea,"zpp_nape.callbacks.ZPP_ConstraintListener.immutable_options","zpp_nape/callbacks/Listener.hx",276,0x87b155a7)
HX_LOCAL_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_289_addedToSpace,"zpp_nape.callbacks.ZPP_ConstraintListener","addedToSpace",0xe183aa42,"zpp_nape.callbacks.ZPP_ConstraintListener.addedToSpace","zpp_nape/callbacks/Listener.hx",289,0x87b155a7)
HX_LOCAL_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_302_removedFromSpace,"zpp_nape.callbacks.ZPP_ConstraintListener","removedFromSpace",0xb8e1e093,"zpp_nape.callbacks.ZPP_ConstraintListener.removedFromSpace","zpp_nape/callbacks/Listener.hx",302,0x87b155a7)
HX_LOCAL_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_315_cbtype_change,"zpp_nape.callbacks.ZPP_ConstraintListener","cbtype_change",0x6e48119f,"zpp_nape.callbacks.ZPP_ConstraintListener.cbtype_change","zpp_nape/callbacks/Listener.hx",315,0x87b155a7)
HX_LOCAL_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_321_invalidate_precedence,"zpp_nape.callbacks.ZPP_ConstraintListener","invalidate_precedence",0xd4ed9cd7,"zpp_nape.callbacks.ZPP_ConstraintListener.invalidate_precedence","zpp_nape/callbacks/Listener.hx",321,0x87b155a7)
HX_LOCAL_STACK_FRAME(_hx_pos_a533cc99c77e5ab0_326_swapEvent,"zpp_nape.callbacks.ZPP_ConstraintListener","swapEvent",0x63fa7650,"zpp_nape.callbacks.ZPP_ConstraintListener.swapEvent","zpp_nape/callbacks/Listener.hx",326,0x87b155a7)
namespace zpp_nape{
namespace callbacks{

void ZPP_ConstraintListener_obj::__construct( ::nape::callbacks::OptionType options,int event, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_270_new)
HXLINE( 273)		this->handler = null();
HXLINE( 272)		this->options = null();
HXLINE( 271)		this->outer_zn = null();
HXLINE( 282)		super::__construct();
HXLINE( 283)		this->event = event;
HXLINE( 284)		this->handler = handler;
HXLINE( 285)		this->constraint = hx::ObjectPtr<OBJ_>(this);
HXLINE( 286)		this->type = 1;
HXLINE( 287)		this->options = options->zpp_inner;
            	}

Dynamic ZPP_ConstraintListener_obj::__CreateEmpty() { return new ZPP_ConstraintListener_obj; }

void *ZPP_ConstraintListener_obj::_hx_vtable = 0;

Dynamic ZPP_ConstraintListener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_ConstraintListener_obj > _hx_result = new ZPP_ConstraintListener_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ZPP_ConstraintListener_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x56485f37) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x56485f37;
	} else {
		return inClassId==(int)0x763b4a3a;
	}
}

void ZPP_ConstraintListener_obj::immutable_options(){
            	HX_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_276_immutable_options)
HXDLIN( 276)		bool _hx_tmp;
HXDLIN( 276)		if (hx::IsNotNull( this->space )) {
HXDLIN( 276)			_hx_tmp = this->space->midstep;
            		}
            		else {
HXDLIN( 276)			_hx_tmp = false;
            		}
HXDLIN( 276)		if (_hx_tmp) {
HXLINE( 277)			HX_STACK_DO_THROW(HX_("Error: Cannot change listener type options during space.step()",17,01,c2,dc));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ConstraintListener_obj,immutable_options,(void))

void ZPP_ConstraintListener_obj::addedToSpace(){
            	HX_GC_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_289_addedToSpace)
HXLINE( 290)		this->options->handler = this->cbtype_change_dyn();
HXLINE( 291)		{
HXLINE( 292)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->options->includes->head;
HXLINE( 293)			while(hx::IsNotNull( cx_ite )){
HXLINE( 294)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 296)				{
HXLINE( 296)					{
HXLINE( 296)						 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener pre = null();
HXDLIN( 296)						{
HXLINE( 296)							 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite1 = cb->conlisteners->head;
HXDLIN( 296)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 296)								 ::zpp_nape::callbacks::ZPP_ConstraintListener j = cx_ite1->elt;
HXDLIN( 296)								{
HXLINE( 296)									bool _hx_tmp;
HXDLIN( 296)									if ((this->precedence <= j->precedence)) {
HXLINE( 296)										if ((this->precedence == j->precedence)) {
HXLINE( 296)											_hx_tmp = (this->id > j->id);
            										}
            										else {
HXLINE( 296)											_hx_tmp = false;
            										}
            									}
            									else {
HXLINE( 296)										_hx_tmp = true;
            									}
HXDLIN( 296)									if (_hx_tmp) {
HXLINE( 296)										goto _hx_goto_3;
            									}
HXDLIN( 296)									pre = cx_ite1;
            								}
HXDLIN( 296)								cx_ite1 = cx_ite1->next;
            							}
            							_hx_goto_3:;
            						}
HXDLIN( 296)						{
HXLINE( 296)							 ::zpp_nape::util::ZNPList_ZPP_ConstraintListener _this = cb->conlisteners;
HXDLIN( 296)							 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener ret;
HXDLIN( 296)							if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXLINE( 296)								ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 296)								ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN( 296)								::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXDLIN( 296)								ret->next = null();
            							}
HXDLIN( 296)							ret->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 296)							 ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener temp = ret;
HXDLIN( 296)							if (hx::IsNull( pre )) {
HXLINE( 296)								temp->next = _this->head;
HXDLIN( 296)								_this->head = temp;
            							}
            							else {
HXLINE( 296)								temp->next = pre->next;
HXDLIN( 296)								pre->next = temp;
            							}
HXDLIN( 296)							_this->pushmod = (_this->modified = true);
HXDLIN( 296)							_this->length++;
            						}
            					}
HXDLIN( 296)					{
HXLINE( 296)						 ::zpp_nape::util::ZNPNode_ZPP_CbSet cx_ite2 = cb->cbsets->head;
HXDLIN( 296)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 296)							 ::zpp_nape::callbacks::ZPP_CbSet cb1 = cx_ite2->elt;
HXDLIN( 296)							cb1->zip_conlisteners = true;
HXDLIN( 296)							cx_ite2 = cx_ite2->next;
            						}
            					}
            				}
HXLINE( 298)				cx_ite = cx_ite->next;
            			}
            		}
            	}


void ZPP_ConstraintListener_obj::removedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_302_removedFromSpace)
HXLINE( 303)		{
HXLINE( 304)			 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = this->options->includes->head;
HXLINE( 305)			while(hx::IsNotNull( cx_ite )){
HXLINE( 306)				 ::zpp_nape::callbacks::ZPP_CbType cb = cx_ite->elt;
HXLINE( 308)				{
HXLINE( 308)					cb->conlisteners->remove(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 308)					{
HXLINE( 308)						 ::zpp_nape::util::ZNPNode_ZPP_CbSet cx_ite1 = cb->cbsets->head;
HXDLIN( 308)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 308)							 ::zpp_nape::callbacks::ZPP_CbSet cb1 = cx_ite1->elt;
HXDLIN( 308)							cb1->zip_conlisteners = true;
HXDLIN( 308)							cx_ite1 = cx_ite1->next;
            						}
            					}
            				}
HXLINE( 310)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 313)		this->options->handler = null();
            	}


void ZPP_ConstraintListener_obj::cbtype_change( ::zpp_nape::callbacks::ZPP_CbType cb,bool included,bool added){
            	HX_GC_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_315_cbtype_change)
HXLINE( 316)		this->removedFromSpace();
HXLINE( 317)		{
HXLINE( 317)			 ::zpp_nape::callbacks::ZPP_OptionType _this = this->options;
HXDLIN( 317)			if (included) {
HXLINE( 317)				if (added) {
HXLINE( 317)					 ::zpp_nape::util::ZNPNode_ZPP_CbType pre = null();
HXDLIN( 317)					{
HXLINE( 317)						 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite = _this->includes->head;
HXDLIN( 317)						while(hx::IsNotNull( cx_ite )){
HXLINE( 317)							 ::zpp_nape::callbacks::ZPP_CbType j = cx_ite->elt;
HXDLIN( 317)							{
HXLINE( 317)								if ((cb->id < j->id)) {
HXLINE( 317)									goto _hx_goto_9;
            								}
HXDLIN( 317)								pre = cx_ite;
            							}
HXDLIN( 317)							cx_ite = cx_ite->next;
            						}
            						_hx_goto_9:;
            					}
HXDLIN( 317)					{
HXLINE( 317)						 ::zpp_nape::util::ZNPList_ZPP_CbType _this1 = _this->includes;
HXDLIN( 317)						 ::zpp_nape::util::ZNPNode_ZPP_CbType ret;
HXDLIN( 317)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 317)							ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 317)							ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 317)							::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 317)							ret->next = null();
            						}
HXDLIN( 317)						ret->elt = cb;
HXDLIN( 317)						 ::zpp_nape::util::ZNPNode_ZPP_CbType temp = ret;
HXDLIN( 317)						if (hx::IsNull( pre )) {
HXLINE( 317)							temp->next = _this1->head;
HXDLIN( 317)							_this1->head = temp;
            						}
            						else {
HXLINE( 317)							temp->next = pre->next;
HXDLIN( 317)							pre->next = temp;
            						}
HXDLIN( 317)						_this1->pushmod = (_this1->modified = true);
HXDLIN( 317)						_this1->length++;
            					}
            				}
            				else {
HXLINE( 317)					_this->includes->remove(cb);
            				}
            			}
            			else {
HXLINE( 317)				if (added) {
HXLINE( 317)					 ::zpp_nape::util::ZNPNode_ZPP_CbType pre1 = null();
HXDLIN( 317)					{
HXLINE( 317)						 ::zpp_nape::util::ZNPNode_ZPP_CbType cx_ite1 = _this->excludes->head;
HXDLIN( 317)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 317)							 ::zpp_nape::callbacks::ZPP_CbType j1 = cx_ite1->elt;
HXDLIN( 317)							{
HXLINE( 317)								if ((cb->id < j1->id)) {
HXLINE( 317)									goto _hx_goto_10;
            								}
HXDLIN( 317)								pre1 = cx_ite1;
            							}
HXDLIN( 317)							cx_ite1 = cx_ite1->next;
            						}
            						_hx_goto_10:;
            					}
HXDLIN( 317)					{
HXLINE( 317)						 ::zpp_nape::util::ZNPList_ZPP_CbType _this2 = _this->excludes;
HXDLIN( 317)						 ::zpp_nape::util::ZNPNode_ZPP_CbType ret1;
HXDLIN( 317)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 317)							ret1 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 317)							ret1 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 317)							::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret1->next;
HXDLIN( 317)							ret1->next = null();
            						}
HXDLIN( 317)						ret1->elt = cb;
HXDLIN( 317)						 ::zpp_nape::util::ZNPNode_ZPP_CbType temp1 = ret1;
HXDLIN( 317)						if (hx::IsNull( pre1 )) {
HXLINE( 317)							temp1->next = _this2->head;
HXDLIN( 317)							_this2->head = temp1;
            						}
            						else {
HXLINE( 317)							temp1->next = pre1->next;
HXDLIN( 317)							pre1->next = temp1;
            						}
HXDLIN( 317)						_this2->pushmod = (_this2->modified = true);
HXDLIN( 317)						_this2->length++;
            					}
            				}
            				else {
HXLINE( 317)					_this->excludes->remove(cb);
            				}
            			}
            		}
HXLINE( 318)		this->addedToSpace();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_ConstraintListener_obj,cbtype_change,(void))

void ZPP_ConstraintListener_obj::invalidate_precedence(){
            	HX_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_321_invalidate_precedence)
HXDLIN( 321)		if (hx::IsNotNull( this->space )) {
HXLINE( 322)			this->removedFromSpace();
HXLINE( 323)			this->addedToSpace();
            		}
            	}


void ZPP_ConstraintListener_obj::swapEvent(int newev){
            	HX_STACKFRAME(&_hx_pos_a533cc99c77e5ab0_326_swapEvent)
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		bool _hx_tmp1;
HXDLIN( 328)		if ((newev != 2)) {
HXLINE( 328)			_hx_tmp1 = (newev != 3);
            		}
            		else {
HXLINE( 328)			_hx_tmp1 = false;
            		}
HXDLIN( 328)		if (_hx_tmp1) {
HXLINE( 328)			_hx_tmp = (newev != 4);
            		}
            		else {
HXLINE( 328)			_hx_tmp = false;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 329)			HX_STACK_DO_THROW(HX_("Error: ConstraintListener event must be either WAKE or SLEEP only",24,55,96,1f));
            		}
HXLINE( 332)		this->removedFromSpace();
HXLINE( 333)		this->event = newev;
HXLINE( 334)		this->addedToSpace();
            	}



hx::ObjectPtr< ZPP_ConstraintListener_obj > ZPP_ConstraintListener_obj::__new( ::nape::callbacks::OptionType options,int event, ::Dynamic handler) {
	hx::ObjectPtr< ZPP_ConstraintListener_obj > __this = new ZPP_ConstraintListener_obj();
	__this->__construct(options,event,handler);
	return __this;
}

hx::ObjectPtr< ZPP_ConstraintListener_obj > ZPP_ConstraintListener_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::callbacks::OptionType options,int event, ::Dynamic handler) {
	ZPP_ConstraintListener_obj *__this = (ZPP_ConstraintListener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_ConstraintListener_obj), true, "zpp_nape.callbacks.ZPP_ConstraintListener"));
	*(void **)__this = ZPP_ConstraintListener_obj::_hx_vtable;
	__this->__construct(options,event,handler);
	return __this;
}

ZPP_ConstraintListener_obj::ZPP_ConstraintListener_obj()
{
}

void ZPP_ConstraintListener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_ConstraintListener);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(handler,"handler");
	 ::zpp_nape::callbacks::ZPP_Listener_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_ConstraintListener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(handler,"handler");
	 ::zpp_nape::callbacks::ZPP_Listener_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_ConstraintListener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return hx::Val( options ); }
		if (HX_FIELD_EQ(inName,"handler") ) { return hx::Val( handler ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swapEvent") ) { return hx::Val( swapEvent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedToSpace") ) { return hx::Val( addedToSpace_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cbtype_change") ) { return hx::Val( cbtype_change_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removedFromSpace") ) { return hx::Val( removedFromSpace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"immutable_options") ) { return hx::Val( immutable_options_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"invalidate_precedence") ) { return hx::Val( invalidate_precedence_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_ConstraintListener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast<  ::zpp_nape::callbacks::ZPP_OptionType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handler") ) { handler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::callbacks::ConstraintListener >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_ConstraintListener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_zn",38,07,b0,a2));
	outFields->push(HX_("options",5e,33,fe,df));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_ConstraintListener_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::callbacks::ConstraintListener */ ,(int)offsetof(ZPP_ConstraintListener_obj,outer_zn),HX_("outer_zn",38,07,b0,a2)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_OptionType */ ,(int)offsetof(ZPP_ConstraintListener_obj,options),HX_("options",5e,33,fe,df)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ZPP_ConstraintListener_obj,handler),HX_("handler",ca,af,d5,45)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_ConstraintListener_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_ConstraintListener_obj_sMemberFields[] = {
	HX_("outer_zn",38,07,b0,a2),
	HX_("options",5e,33,fe,df),
	HX_("handler",ca,af,d5,45),
	HX_("immutable_options",21,c7,22,3a),
	HX_("addedToSpace",6b,44,b0,09),
	HX_("removedFromSpace",3c,43,d1,b7),
	HX_("cbtype_change",56,5b,22,6d),
	HX_("invalidate_precedence",8e,f5,4a,df),
	HX_("swapEvent",87,d8,71,eb),
	::String(null()) };

hx::Class ZPP_ConstraintListener_obj::__mClass;

void ZPP_ConstraintListener_obj::__register()
{
	ZPP_ConstraintListener_obj _hx_dummy;
	ZPP_ConstraintListener_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.callbacks.ZPP_ConstraintListener",f7,98,1f,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_ConstraintListener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_ConstraintListener_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_ConstraintListener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_ConstraintListener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace callbacks
