// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_BodyCallback
#include <hxinc/nape/callbacks/BodyCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <hxinc/nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <hxinc/nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionCallback
#include <hxinc/nape/callbacks/InteractionCallback.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <hxinc/nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <hxinc/zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <hxinc/zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <hxinc/zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <hxinc/zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <hxinc/zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <hxinc/zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <hxinc/zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <hxinc/zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <hxinc/zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <hxinc/zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ArbiterList
#include <hxinc/zpp_nape/util/ZPP_ArbiterList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_174_new,"zpp_nape.callbacks.ZPP_Callback","new",0xa4f50fbd,"zpp_nape.callbacks.ZPP_Callback.new","zpp_nape/callbacks/Callback.hx",174,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_181_wrapper_body,"zpp_nape.callbacks.ZPP_Callback","wrapper_body",0x7d8f0151,"zpp_nape.callbacks.ZPP_Callback.wrapper_body","zpp_nape/callbacks/Callback.hx",181,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_194_wrapper_con,"zpp_nape.callbacks.ZPP_Callback","wrapper_con",0xaa77a473,"zpp_nape.callbacks.ZPP_Callback.wrapper_con","zpp_nape/callbacks/Callback.hx",194,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_207_wrapper_int,"zpp_nape.callbacks.ZPP_Callback","wrapper_int",0xaa7c3120,"zpp_nape.callbacks.ZPP_Callback.wrapper_int","zpp_nape/callbacks/Callback.hx",207,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_228_push,"zpp_nape.callbacks.ZPP_Callback","push",0xb2d743dd,"zpp_nape.callbacks.ZPP_Callback.push","zpp_nape/callbacks/Callback.hx",228,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_244_push_rev,"zpp_nape.callbacks.ZPP_Callback","push_rev",0xc1e514c1,"zpp_nape.callbacks.ZPP_Callback.push_rev","zpp_nape/callbacks/Callback.hx",244,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_260_pop,"zpp_nape.callbacks.ZPP_Callback","pop",0xa4f69cee,"zpp_nape.callbacks.ZPP_Callback.pop","zpp_nape/callbacks/Callback.hx",260,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_276_pop_rev,"zpp_nape.callbacks.ZPP_Callback","pop_rev",0x22f4ca52,"zpp_nape.callbacks.ZPP_Callback.pop_rev","zpp_nape/callbacks/Callback.hx",276,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_293_empty,"zpp_nape.callbacks.ZPP_Callback","empty",0x6ecfcb2a,"zpp_nape.callbacks.ZPP_Callback.empty","zpp_nape/callbacks/Callback.hx",293,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_296_clear,"zpp_nape.callbacks.ZPP_Callback","clear",0x4751022a,"zpp_nape.callbacks.ZPP_Callback.clear","zpp_nape/callbacks/Callback.hx",296,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_298_splice,"zpp_nape.callbacks.ZPP_Callback","splice",0xd7877e3f,"zpp_nape.callbacks.ZPP_Callback.splice","zpp_nape/callbacks/Callback.hx",298,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_314_rotateL,"zpp_nape.callbacks.ZPP_Callback","rotateL",0xc50dfb6e,"zpp_nape.callbacks.ZPP_Callback.rotateL","zpp_nape/callbacks/Callback.hx",314,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_317_rotateR,"zpp_nape.callbacks.ZPP_Callback","rotateR",0xc50dfb74,"zpp_nape.callbacks.ZPP_Callback.rotateR","zpp_nape/callbacks/Callback.hx",317,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_328_cycleNext,"zpp_nape.callbacks.ZPP_Callback","cycleNext",0x71c65bd6,"zpp_nape.callbacks.ZPP_Callback.cycleNext","zpp_nape/callbacks/Callback.hx",328,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_340_cyclePrev,"zpp_nape.callbacks.ZPP_Callback","cyclePrev",0x732295d6,"zpp_nape.callbacks.ZPP_Callback.cyclePrev","zpp_nape/callbacks/Callback.hx",340,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_343_at,"zpp_nape.callbacks.ZPP_Callback","at",0xdd26f036,"zpp_nape.callbacks.ZPP_Callback.at","zpp_nape/callbacks/Callback.hx",343,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_356_rev_at,"zpp_nape.callbacks.ZPP_Callback","rev_at",0x22584a52,"zpp_nape.callbacks.ZPP_Callback.rev_at","zpp_nape/callbacks/Callback.hx",356,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_395_free,"zpp_nape.callbacks.ZPP_Callback","free",0xac38ceaf,"zpp_nape.callbacks.ZPP_Callback.free","zpp_nape/callbacks/Callback.hx",395,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_407_alloc,"zpp_nape.callbacks.ZPP_Callback","alloc",0x20893512,"zpp_nape.callbacks.ZPP_Callback.alloc","zpp_nape/callbacks/Callback.hx",407,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_416_genarbs,"zpp_nape.callbacks.ZPP_Callback","genarbs",0x87a7436f,"zpp_nape.callbacks.ZPP_Callback.genarbs","zpp_nape/callbacks/Callback.hx",416,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_179_boot,"zpp_nape.callbacks.ZPP_Callback","boot",0xa991b635,"zpp_nape.callbacks.ZPP_Callback.boot","zpp_nape/callbacks/Callback.hx",179,0x948ca4f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a740cc17f9a50b_369_boot,"zpp_nape.callbacks.ZPP_Callback","boot",0xa991b635,"zpp_nape.callbacks.ZPP_Callback.boot","zpp_nape/callbacks/Callback.hx",369,0x948ca4f6)
namespace zpp_nape{
namespace callbacks{

void ZPP_Callback_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_174_new)
HXLINE( 435)		this->constraint = null();
HXLINE( 434)		this->body = null();
HXLINE( 413)		this->pre_swapped = false;
HXLINE( 412)		this->pre_arbiter = null();
HXLINE( 411)		this->wrap_arbiters = null();
HXLINE( 410)		this->set = null();
HXLINE( 409)		this->int2 = null();
HXLINE( 408)		this->int1 = null();
HXLINE( 227)		this->length = 0;
HXLINE( 226)		this->prev = null();
HXLINE( 225)		this->next = null();
HXLINE( 224)		this->index = 0;
HXLINE( 223)		this->space = null();
HXLINE( 222)		this->listener = null();
HXLINE( 221)		this->event = 0;
HXLINE( 177)		this->outer_int = null();
HXLINE( 176)		this->outer_con = null();
HXLINE( 175)		this->outer_body = null();
HXLINE( 437)		this->length = 0;
            	}

Dynamic ZPP_Callback_obj::__CreateEmpty() { return new ZPP_Callback_obj; }

void *ZPP_Callback_obj::_hx_vtable = 0;

Dynamic ZPP_Callback_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Callback_obj > _hx_result = new ZPP_Callback_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Callback_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x001471c3;
}

 ::nape::callbacks::BodyCallback ZPP_Callback_obj::wrapper_body(){
            	HX_GC_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_181_wrapper_body)
HXLINE( 182)		if (hx::IsNull( this->outer_body )) {
HXLINE( 184)			::zpp_nape::callbacks::ZPP_Callback_obj::internal = true;
HXLINE( 186)			this->outer_body =  ::nape::callbacks::BodyCallback_obj::__alloc( HX_CTX );
HXLINE( 188)			::zpp_nape::callbacks::ZPP_Callback_obj::internal = false;
HXLINE( 190)			this->outer_body->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 192)		return this->outer_body;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,wrapper_body,return )

 ::nape::callbacks::ConstraintCallback ZPP_Callback_obj::wrapper_con(){
            	HX_GC_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_194_wrapper_con)
HXLINE( 195)		if (hx::IsNull( this->outer_con )) {
HXLINE( 197)			::zpp_nape::callbacks::ZPP_Callback_obj::internal = true;
HXLINE( 199)			this->outer_con =  ::nape::callbacks::ConstraintCallback_obj::__alloc( HX_CTX );
HXLINE( 201)			::zpp_nape::callbacks::ZPP_Callback_obj::internal = false;
HXLINE( 203)			this->outer_con->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 205)		return this->outer_con;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,wrapper_con,return )

 ::nape::callbacks::InteractionCallback ZPP_Callback_obj::wrapper_int(){
            	HX_GC_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_207_wrapper_int)
HXLINE( 208)		if (hx::IsNull( this->outer_int )) {
HXLINE( 210)			::zpp_nape::callbacks::ZPP_Callback_obj::internal = true;
HXLINE( 212)			this->outer_int =  ::nape::callbacks::InteractionCallback_obj::__alloc( HX_CTX );
HXLINE( 214)			::zpp_nape::callbacks::ZPP_Callback_obj::internal = false;
HXLINE( 216)			this->outer_int->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 218)		{
HXLINE( 218)			if (hx::IsNull( this->wrap_arbiters )) {
HXLINE( 218)				this->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->set->arbiters,true);
            			}
            			else {
HXLINE( 218)				this->wrap_arbiters->zpp_inner->inner = this->set->arbiters;
            			}
HXDLIN( 218)			this->wrap_arbiters->zpp_inner->zip_length = true;
HXDLIN( 218)			this->wrap_arbiters->zpp_inner->at_ite = null();
            		}
HXLINE( 219)		return this->outer_int;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,wrapper_int,return )

void ZPP_Callback_obj::push( ::zpp_nape::callbacks::ZPP_Callback obj){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_228_push)
HXLINE( 237)		if (hx::IsNotNull( this->prev )) {
HXLINE( 237)			this->prev->next = obj;
            		}
            		else {
HXLINE( 238)			this->next = obj;
            		}
HXLINE( 239)		obj->prev = this->prev;
HXLINE( 240)		obj->next = null();
HXLINE( 241)		this->prev = obj;
HXLINE( 242)		this->length++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,push,(void))

void ZPP_Callback_obj::push_rev( ::zpp_nape::callbacks::ZPP_Callback obj){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_244_push_rev)
HXLINE( 253)		if (hx::IsNotNull( this->next )) {
HXLINE( 253)			this->next->prev = obj;
            		}
            		else {
HXLINE( 254)			this->prev = obj;
            		}
HXLINE( 255)		obj->next = this->next;
HXLINE( 256)		obj->prev = null();
HXLINE( 257)		this->next = obj;
HXLINE( 258)		this->length++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,push_rev,(void))

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_260_pop)
HXLINE( 269)		 ::zpp_nape::callbacks::ZPP_Callback ret = this->next;
HXLINE( 270)		this->next = ret->next;
HXLINE( 271)		if (hx::IsNull( this->next )) {
HXLINE( 271)			this->prev = null();
            		}
            		else {
HXLINE( 272)			this->next->prev = null();
            		}
HXLINE( 273)		this->length--;
HXLINE( 274)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,pop,return )

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::pop_rev(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_276_pop_rev)
HXLINE( 285)		 ::zpp_nape::callbacks::ZPP_Callback ret = this->prev;
HXLINE( 286)		this->prev = ret->prev;
HXLINE( 287)		if (hx::IsNull( this->prev )) {
HXLINE( 287)			this->next = null();
            		}
            		else {
HXLINE( 288)			this->prev->next = null();
            		}
HXLINE( 289)		this->length--;
HXLINE( 290)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,pop_rev,return )

bool ZPP_Callback_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_293_empty)
HXDLIN( 293)		return hx::IsNull( this->next );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,empty,return )

void ZPP_Callback_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_296_clear)
HXDLIN( 296)		while(!(this->empty())){
HXDLIN( 296)			this->pop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,clear,(void))

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::splice( ::zpp_nape::callbacks::ZPP_Callback o){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_298_splice)
HXLINE( 299)		 ::zpp_nape::callbacks::ZPP_Callback ret = o->next;
HXLINE( 300)		if (hx::IsNull( o->prev )) {
HXLINE( 301)			this->next = o->next;
HXLINE( 302)			if (hx::IsNotNull( this->next )) {
HXLINE( 302)				this->next->prev = null();
            			}
            			else {
HXLINE( 303)				this->prev = null();
            			}
            		}
            		else {
HXLINE( 306)			o->prev->next = o->next;
HXLINE( 307)			if (hx::IsNotNull( o->next )) {
HXLINE( 307)				o->next->prev = o->prev;
            			}
            			else {
HXLINE( 308)				this->prev = o->prev;
            			}
            		}
HXLINE( 310)		this->length--;
HXLINE( 311)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,splice,return )

void ZPP_Callback_obj::rotateL(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_314_rotateL)
HXDLIN( 314)		this->push(this->pop());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,rotateL,(void))

void ZPP_Callback_obj::rotateR(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_317_rotateR)
HXDLIN( 317)		this->push_rev(this->pop_rev());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,rotateR,(void))

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::cycleNext( ::zpp_nape::callbacks::ZPP_Callback o){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_328_cycleNext)
HXDLIN( 328)		if (hx::IsNull( o->next )) {
HXDLIN( 328)			return this->next;
            		}
            		else {
HXLINE( 329)			return o->next;
            		}
HXLINE( 328)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,cycleNext,return )

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::cyclePrev( ::zpp_nape::callbacks::ZPP_Callback o){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_340_cyclePrev)
HXDLIN( 340)		if (hx::IsNull( o->prev )) {
HXDLIN( 340)			return this->prev;
            		}
            		else {
HXLINE( 341)			return o->prev;
            		}
HXLINE( 340)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,cyclePrev,return )

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::at(int i){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_343_at)
HXLINE( 352)		 ::zpp_nape::callbacks::ZPP_Callback ret = this->next;
HXLINE( 353)		while(true){
HXLINE( 353)			i = (i - 1);
HXDLIN( 353)			if (!(((i + 1) != 0))) {
HXLINE( 353)				goto _hx_goto_16;
            			}
HXDLIN( 353)			ret = ret->next;
            		}
            		_hx_goto_16:;
HXLINE( 354)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,at,return )

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::rev_at(int i){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_356_rev_at)
HXLINE( 365)		 ::zpp_nape::callbacks::ZPP_Callback ret = this->prev;
HXLINE( 366)		while(true){
HXLINE( 366)			i = (i - 1);
HXDLIN( 366)			if (!(((i + 1) != 0))) {
HXLINE( 366)				goto _hx_goto_18;
            			}
HXDLIN( 366)			ret = ret->prev;
            		}
            		_hx_goto_18:;
HXLINE( 367)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Callback_obj,rev_at,return )

void ZPP_Callback_obj::free(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_395_free)
HXLINE( 396)		this->int1 = (this->int2 = null());
HXLINE( 397)		this->body = null();
HXLINE( 398)		this->constraint = null();
HXLINE( 399)		this->listener = null();
HXLINE( 400)		if (hx::IsNotNull( this->wrap_arbiters )) {
HXLINE( 401)			this->wrap_arbiters->zpp_inner->inner = null();
            		}
HXLINE( 403)		this->set = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,free,(void))

void ZPP_Callback_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_407_alloc)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,alloc,(void))

void ZPP_Callback_obj::genarbs(){
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_416_genarbs)
HXLINE( 425)		if (hx::IsNull( this->wrap_arbiters )) {
HXLINE( 426)			this->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->set->arbiters,true);
            		}
            		else {
HXLINE( 429)			this->wrap_arbiters->zpp_inner->inner = this->set->arbiters;
            		}
HXLINE( 431)		this->wrap_arbiters->zpp_inner->zip_length = true;
HXLINE( 432)		this->wrap_arbiters->zpp_inner->at_ite = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Callback_obj,genarbs,(void))

bool ZPP_Callback_obj::internal;

 ::zpp_nape::callbacks::ZPP_Callback ZPP_Callback_obj::zpp_pool;


hx::ObjectPtr< ZPP_Callback_obj > ZPP_Callback_obj::__new() {
	hx::ObjectPtr< ZPP_Callback_obj > __this = new ZPP_Callback_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Callback_obj > ZPP_Callback_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Callback_obj *__this = (ZPP_Callback_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Callback_obj), true, "zpp_nape.callbacks.ZPP_Callback"));
	*(void **)__this = ZPP_Callback_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Callback_obj::ZPP_Callback_obj()
{
}

void ZPP_Callback_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Callback);
	HX_MARK_MEMBER_NAME(outer_body,"outer_body");
	HX_MARK_MEMBER_NAME(outer_con,"outer_con");
	HX_MARK_MEMBER_NAME(outer_int,"outer_int");
	HX_MARK_MEMBER_NAME(event,"event");
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(int1,"int1");
	HX_MARK_MEMBER_NAME(int2,"int2");
	HX_MARK_MEMBER_NAME(set,"set");
	HX_MARK_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_MARK_MEMBER_NAME(pre_arbiter,"pre_arbiter");
	HX_MARK_MEMBER_NAME(pre_swapped,"pre_swapped");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(constraint,"constraint");
	HX_MARK_END_CLASS();
}

void ZPP_Callback_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_body,"outer_body");
	HX_VISIT_MEMBER_NAME(outer_con,"outer_con");
	HX_VISIT_MEMBER_NAME(outer_int,"outer_int");
	HX_VISIT_MEMBER_NAME(event,"event");
	HX_VISIT_MEMBER_NAME(listener,"listener");
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(int1,"int1");
	HX_VISIT_MEMBER_NAME(int2,"int2");
	HX_VISIT_MEMBER_NAME(set,"set");
	HX_VISIT_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_VISIT_MEMBER_NAME(pre_arbiter,"pre_arbiter");
	HX_VISIT_MEMBER_NAME(pre_swapped,"pre_swapped");
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(constraint,"constraint");
}

hx::Val ZPP_Callback_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev ); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		if (HX_FIELD_EQ(inName,"int1") ) { return hx::Val( int1 ); }
		if (HX_FIELD_EQ(inName,"int2") ) { return hx::Val( int2 ); }
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { return hx::Val( event ); }
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space ); }
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		if (HX_FIELD_EQ(inName,"rev_at") ) { return hx::Val( rev_at_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pop_rev") ) { return hx::Val( pop_rev_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateL") ) { return hx::Val( rotateL_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateR") ) { return hx::Val( rotateR_dyn() ); }
		if (HX_FIELD_EQ(inName,"genarbs") ) { return hx::Val( genarbs_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( listener ); }
		if (HX_FIELD_EQ(inName,"push_rev") ) { return hx::Val( push_rev_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"outer_con") ) { return hx::Val( outer_con ); }
		if (HX_FIELD_EQ(inName,"outer_int") ) { return hx::Val( outer_int ); }
		if (HX_FIELD_EQ(inName,"cycleNext") ) { return hx::Val( cycleNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"cyclePrev") ) { return hx::Val( cyclePrev_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"outer_body") ) { return hx::Val( outer_body ); }
		if (HX_FIELD_EQ(inName,"constraint") ) { return hx::Val( constraint ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrapper_con") ) { return hx::Val( wrapper_con_dyn() ); }
		if (HX_FIELD_EQ(inName,"wrapper_int") ) { return hx::Val( wrapper_int_dyn() ); }
		if (HX_FIELD_EQ(inName,"pre_arbiter") ) { return hx::Val( pre_arbiter ); }
		if (HX_FIELD_EQ(inName,"pre_swapped") ) { return hx::Val( pre_swapped ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrapper_body") ) { return hx::Val( wrapper_body_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { return hx::Val( wrap_arbiters ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Callback_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = ( internal ); return true; }
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = ( zpp_pool ); return true; }
	}
	return false;
}

hx::Val ZPP_Callback_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { set=inValue.Cast<  ::zpp_nape::space::ZPP_CallbackSet >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::callbacks::ZPP_Callback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::callbacks::ZPP_Callback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"int1") ) { int1=inValue.Cast<  ::zpp_nape::phys::ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"int2") ) { int2=inValue.Cast<  ::zpp_nape::phys::ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { event=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { listener=inValue.Cast<  ::zpp_nape::callbacks::ZPP_Listener >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"outer_con") ) { outer_con=inValue.Cast<  ::nape::callbacks::ConstraintCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outer_int") ) { outer_int=inValue.Cast<  ::nape::callbacks::InteractionCallback >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"outer_body") ) { outer_body=inValue.Cast<  ::nape::callbacks::BodyCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraint") ) { constraint=inValue.Cast<  ::zpp_nape::constraint::ZPP_Constraint >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pre_arbiter") ) { pre_arbiter=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Arbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_swapped") ) { pre_swapped=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { wrap_arbiters=inValue.Cast<  ::nape::dynamics::ArbiterList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Callback_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::callbacks::ZPP_Callback >(); return true; }
	}
	return false;
}

void ZPP_Callback_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("outer_body",26,40,4e,a4));
	outFields->push(HX_("outer_con",3e,d7,44,b7));
	outFields->push(HX_("outer_int",eb,63,49,b7));
	outFields->push(HX_("event",1a,c8,c4,75));
	outFields->push(HX_("listener",74,00,32,38));
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("index",12,9b,14,be));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("int1",62,44,bb,45));
	outFields->push(HX_("int2",63,44,bb,45));
	outFields->push(HX_("set",a2,9b,57,00));
	outFields->push(HX_("wrap_arbiters",bf,60,dc,11));
	outFields->push(HX_("pre_arbiter",8d,d4,c4,7e));
	outFields->push(HX_("pre_swapped",c0,dc,46,dc));
	outFields->push(HX_("body",a2,7a,1b,41));
	outFields->push(HX_("constraint",5d,00,cc,5a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Callback_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::callbacks::BodyCallback */ ,(int)offsetof(ZPP_Callback_obj,outer_body),HX_("outer_body",26,40,4e,a4)},
	{hx::fsObject /*  ::nape::callbacks::ConstraintCallback */ ,(int)offsetof(ZPP_Callback_obj,outer_con),HX_("outer_con",3e,d7,44,b7)},
	{hx::fsObject /*  ::nape::callbacks::InteractionCallback */ ,(int)offsetof(ZPP_Callback_obj,outer_int),HX_("outer_int",eb,63,49,b7)},
	{hx::fsInt,(int)offsetof(ZPP_Callback_obj,event),HX_("event",1a,c8,c4,75)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_Listener */ ,(int)offsetof(ZPP_Callback_obj,listener),HX_("listener",74,00,32,38)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_Space */ ,(int)offsetof(ZPP_Callback_obj,space),HX_("space",c6,8c,66,81)},
	{hx::fsInt,(int)offsetof(ZPP_Callback_obj,index),HX_("index",12,9b,14,be)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_Callback */ ,(int)offsetof(ZPP_Callback_obj,next),HX_("next",f3,84,02,49)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_Callback */ ,(int)offsetof(ZPP_Callback_obj,prev),HX_("prev",f3,be,5e,4a)},
	{hx::fsInt,(int)offsetof(ZPP_Callback_obj,length),HX_("length",e6,94,07,9f)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Interactor */ ,(int)offsetof(ZPP_Callback_obj,int1),HX_("int1",62,44,bb,45)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Interactor */ ,(int)offsetof(ZPP_Callback_obj,int2),HX_("int2",63,44,bb,45)},
	{hx::fsObject /*  ::zpp_nape::space::ZPP_CallbackSet */ ,(int)offsetof(ZPP_Callback_obj,set),HX_("set",a2,9b,57,00)},
	{hx::fsObject /*  ::nape::dynamics::ArbiterList */ ,(int)offsetof(ZPP_Callback_obj,wrap_arbiters),HX_("wrap_arbiters",bf,60,dc,11)},
	{hx::fsObject /*  ::zpp_nape::dynamics::ZPP_Arbiter */ ,(int)offsetof(ZPP_Callback_obj,pre_arbiter),HX_("pre_arbiter",8d,d4,c4,7e)},
	{hx::fsBool,(int)offsetof(ZPP_Callback_obj,pre_swapped),HX_("pre_swapped",c0,dc,46,dc)},
	{hx::fsObject /*  ::zpp_nape::phys::ZPP_Body */ ,(int)offsetof(ZPP_Callback_obj,body),HX_("body",a2,7a,1b,41)},
	{hx::fsObject /*  ::zpp_nape::constraint::ZPP_Constraint */ ,(int)offsetof(ZPP_Callback_obj,constraint),HX_("constraint",5d,00,cc,5a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Callback_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ZPP_Callback_obj::internal,HX_("internal",3d,67,76,28)},
	{hx::fsObject /*  ::zpp_nape::callbacks::ZPP_Callback */ ,(void *) &ZPP_Callback_obj::zpp_pool,HX_("zpp_pool",81,5d,d4,38)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Callback_obj_sMemberFields[] = {
	HX_("outer_body",26,40,4e,a4),
	HX_("outer_con",3e,d7,44,b7),
	HX_("outer_int",eb,63,49,b7),
	HX_("wrapper_body",4e,94,c2,0f),
	HX_("wrapper_con",16,40,4c,f2),
	HX_("wrapper_int",c3,cc,50,f2),
	HX_("event",1a,c8,c4,75),
	HX_("listener",74,00,32,38),
	HX_("space",c6,8c,66,81),
	HX_("index",12,9b,14,be),
	HX_("next",f3,84,02,49),
	HX_("prev",f3,be,5e,4a),
	HX_("length",e6,94,07,9f),
	HX_("push",da,11,61,4a),
	HX_("push_rev",3e,25,3a,23),
	HX_("pop",91,5d,55,00),
	HX_("pop_rev",75,18,04,4f),
	HX_("empty",8d,3a,da,6f),
	HX_("clear",8d,71,5b,48),
	HX_("splice",7c,85,9e,bf),
	HX_("rotateL",91,49,1d,f1),
	HX_("rotateR",97,49,1d,f1),
	HX_("cycleNext",b9,b8,df,3a),
	HX_("cyclePrev",b9,f2,3b,3c),
	HX_("at",f3,54,00,00),
	HX_("rev_at",8f,51,6f,0a),
	HX_("free",ac,9c,c2,43),
	HX_("alloc",75,a4,93,21),
	HX_("int1",62,44,bb,45),
	HX_("int2",63,44,bb,45),
	HX_("set",a2,9b,57,00),
	HX_("wrap_arbiters",bf,60,dc,11),
	HX_("pre_arbiter",8d,d4,c4,7e),
	HX_("pre_swapped",c0,dc,46,dc),
	HX_("genarbs",92,91,b6,b3),
	HX_("body",a2,7a,1b,41),
	HX_("constraint",5d,00,cc,5a),
	::String(null()) };

static void ZPP_Callback_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Callback_obj::internal,"internal");
	HX_MARK_MEMBER_NAME(ZPP_Callback_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Callback_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Callback_obj::internal,"internal");
	HX_VISIT_MEMBER_NAME(ZPP_Callback_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Callback_obj::__mClass;

static ::String ZPP_Callback_obj_sStaticFields[] = {
	HX_("internal",3d,67,76,28),
	HX_("zpp_pool",81,5d,d4,38),
	::String(null())
};

void ZPP_Callback_obj::__register()
{
	ZPP_Callback_obj _hx_dummy;
	ZPP_Callback_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zpp_nape.callbacks.ZPP_Callback",4b,6d,71,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Callback_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Callback_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Callback_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Callback_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Callback_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Callback_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Callback_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Callback_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Callback_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Callback_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_179_boot)
HXDLIN( 179)		internal = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f6a740cc17f9a50b_369_boot)
HXDLIN( 369)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace callbacks
