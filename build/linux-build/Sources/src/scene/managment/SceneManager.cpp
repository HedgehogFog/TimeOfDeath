// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <hxinc/nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <hxinc/nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_scene_Scene
#include <hxinc/scene/Scene.h>
#endif
#ifndef INCLUDED_scene_impl_PreloaderScene
#include <hxinc/scene/impl/PreloaderScene.h>
#endif
#ifndef INCLUDED_scene_managment_SceneManager
#include <hxinc/scene/managment/SceneManager.h>
#endif
#ifndef INCLUDED_util_Timer
#include <hxinc/util/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6869a8c95a4192ca_17_new,"scene.managment.SceneManager","new",0x524d7ac5,"scene.managment.SceneManager.new","scene/managment/SceneManager.hx",17,0xf09f5349)
HX_LOCAL_STACK_FRAME(_hx_pos_6869a8c95a4192ca_24_draw,"scene.managment.SceneManager","draw",0xaaeb99ff,"scene.managment.SceneManager.draw","scene/managment/SceneManager.hx",24,0xf09f5349)
HX_LOCAL_STACK_FRAME(_hx_pos_6869a8c95a4192ca_27_update,"scene.managment.SceneManager","update",0x97b4a8c4,"scene.managment.SceneManager.update","scene/managment/SceneManager.hx",27,0xf09f5349)
HX_LOCAL_STACK_FRAME(_hx_pos_6869a8c95a4192ca_33_setScene,"scene.managment.SceneManager","setScene",0x7bcfc9c5,"scene.managment.SceneManager.setScene","scene/managment/SceneManager.hx",33,0xf09f5349)
HX_LOCAL_STACK_FRAME(_hx_pos_6869a8c95a4192ca_11_boot,"scene.managment.SceneManager","boot",0xa996f22d,"scene.managment.SceneManager.boot","scene/managment/SceneManager.hx",11,0xf09f5349)
namespace scene{
namespace managment{

void SceneManager_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_6869a8c95a4192ca_17_new)
HXLINE(  18)		this->currentScene =  ::scene::impl::PreloaderScene_obj::__alloc( HX_CTX );
HXLINE(  19)		this->space =  ::nape::space::Space_obj::__alloc( HX_CTX , ::nape::geom::Vec2_obj::__alloc( HX_CTX ,0,300),null());
HXLINE(  20)		this->timer =  ::util::Timer_obj::__alloc( HX_CTX );
            	}

Dynamic SceneManager_obj::__CreateEmpty() { return new SceneManager_obj; }

void *SceneManager_obj::_hx_vtable = 0;

Dynamic SceneManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SceneManager_obj > _hx_result = new SceneManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SceneManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x775ac3f3;
}

void SceneManager_obj::draw( ::kha::graphics2::Graphics gr){
            	HX_STACKFRAME(&_hx_pos_6869a8c95a4192ca_24_draw)
HXDLIN(  24)		::scene::Scene_obj::draw(this->currentScene,gr);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneManager_obj,draw,(void))

void SceneManager_obj::update(){
            	HX_STACKFRAME(&_hx_pos_6869a8c95a4192ca_27_update)
HXLINE(  28)		this->space->step(((Float)0.0166666666666666664),null(),null());
HXLINE(  29)		this->timer->update();
HXLINE(  30)		::scene::Scene_obj::update(this->currentScene,this->timer->delta);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SceneManager_obj,update,(void))

void SceneManager_obj::setScene(::Dynamic scene1){
            	HX_STACKFRAME(&_hx_pos_6869a8c95a4192ca_33_setScene)
HXLINE(  34)		::scene::Scene_obj::destroy(this->currentScene);
HXLINE(  35)		this->currentScene = scene1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneManager_obj,setScene,(void))

 ::scene::managment::SceneManager SceneManager_obj::instance;


hx::ObjectPtr< SceneManager_obj > SceneManager_obj::__new() {
	hx::ObjectPtr< SceneManager_obj > __this = new SceneManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SceneManager_obj > SceneManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	SceneManager_obj *__this = (SceneManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SceneManager_obj), true, "scene.managment.SceneManager"));
	*(void **)__this = SceneManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SceneManager_obj::SceneManager_obj()
{
}

void SceneManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SceneManager);
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(currentScene,"currentScene");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_END_CLASS();
}

void SceneManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(currentScene,"currentScene");
	HX_VISIT_MEMBER_NAME(space,"space");
}

hx::Val SceneManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setScene") ) { return hx::Val( setScene_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentScene") ) { return hx::Val( currentScene ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SceneManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
	}
	return false;
}

hx::Val SceneManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::util::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::nape::space::Space >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentScene") ) { currentScene=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SceneManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::scene::managment::SceneManager >(); return true; }
	}
	return false;
}

void SceneManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("timer",c5,bf,35,10));
	outFields->push(HX_("currentScene",53,be,dd,bf));
	outFields->push(HX_("space",c6,8c,66,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SceneManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::util::Timer */ ,(int)offsetof(SceneManager_obj,timer),HX_("timer",c5,bf,35,10)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(SceneManager_obj,currentScene),HX_("currentScene",53,be,dd,bf)},
	{hx::fsObject /*  ::nape::space::Space */ ,(int)offsetof(SceneManager_obj,space),HX_("space",c6,8c,66,81)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SceneManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::scene::managment::SceneManager */ ,(void *) &SceneManager_obj::instance,HX_("instance",95,1f,e1,59)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SceneManager_obj_sMemberFields[] = {
	HX_("timer",c5,bf,35,10),
	HX_("currentScene",53,be,dd,bf),
	HX_("space",c6,8c,66,81),
	HX_("draw",04,2c,70,42),
	HX_("update",09,86,05,87),
	HX_("setScene",4a,42,06,87),
	::String(null()) };

static void SceneManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SceneManager_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SceneManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SceneManager_obj::instance,"instance");
};

#endif

hx::Class SceneManager_obj::__mClass;

static ::String SceneManager_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	::String(null())
};

void SceneManager_obj::__register()
{
	SceneManager_obj _hx_dummy;
	SceneManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("scene.managment.SceneManager",53,b4,65,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SceneManager_obj::__GetStatic;
	__mClass->mSetStaticField = &SceneManager_obj::__SetStatic;
	__mClass->mMarkFunc = SceneManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SceneManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SceneManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SceneManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SceneManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SceneManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SceneManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SceneManager_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6869a8c95a4192ca_11_boot)
HXDLIN(  11)		instance =  ::scene::managment::SceneManager_obj::__alloc( HX_CTX );
            	}
}

} // end namespace scene
} // end namespace managment
