// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_entity_element_Entity
#include <hxinc/entity/element/Entity.h>
#endif
#ifndef INCLUDED_entity_element_IEntity
#include <hxinc/entity/element/IEntity.h>
#endif
#ifndef INCLUDED_entity_element_ui_physic_PhysicUI
#include <hxinc/entity/element/ui/physic/PhysicUI.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <hxinc/nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <hxinc/nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <hxinc/nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <hxinc/nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <hxinc/nape/space/Space.h>
#endif
#ifndef INCLUDED_scene_managment_SceneManager
#include <hxinc/scene/managment/SceneManager.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a59115dd2bd87da8_16_new,"entity.element.ui.physic.PhysicUI","new",0xad76bb57,"entity.element.ui.physic.PhysicUI.new","entity/element/ui/physic/PhysicUI.hx",16,0x21db4997)
namespace entity{
namespace element{
namespace ui{
namespace physic{

void PhysicUI_obj::__construct(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_a59115dd2bd87da8_16_new)
HXLINE(  17)		super::__construct();
HXLINE(  19)		this->x = x;
HXLINE(  20)		this->y = y;
HXLINE(  22)		this->space = ::scene::managment::SceneManager_obj::instance->space;
            	}

Dynamic PhysicUI_obj::__CreateEmpty() { return new PhysicUI_obj; }

void *PhysicUI_obj::_hx_vtable = 0;

Dynamic PhysicUI_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PhysicUI_obj > _hx_result = new PhysicUI_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PhysicUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e1ea9d1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e1ea9d1;
	} else {
		return inClassId==(int)0x49e62f7c;
	}
}


hx::ObjectPtr< PhysicUI_obj > PhysicUI_obj::__new(Float x,Float y) {
	hx::ObjectPtr< PhysicUI_obj > __this = new PhysicUI_obj();
	__this->__construct(x,y);
	return __this;
}

hx::ObjectPtr< PhysicUI_obj > PhysicUI_obj::__alloc(hx::Ctx *_hx_ctx,Float x,Float y) {
	PhysicUI_obj *__this = (PhysicUI_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PhysicUI_obj), true, "entity.element.ui.physic.PhysicUI"));
	*(void **)__this = PhysicUI_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

PhysicUI_obj::PhysicUI_obj()
{
}

void PhysicUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PhysicUI);
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(shape,"shape");
	 ::entity::element::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PhysicUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(shape,"shape");
	 ::entity::element::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PhysicUI_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space ); }
		if (HX_FIELD_EQ(inName,"shape") ) { return hx::Val( shape ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PhysicUI_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::nape::phys::Body >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::nape::space::Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shape") ) { shape=inValue.Cast<  ::nape::shape::Polygon >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PhysicUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("body",a2,7a,1b,41));
	outFields->push(HX_("shape",21,e3,1c,7c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PhysicUI_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::nape::space::Space */ ,(int)offsetof(PhysicUI_obj,space),HX_("space",c6,8c,66,81)},
	{hx::fsObject /*  ::nape::phys::Body */ ,(int)offsetof(PhysicUI_obj,body),HX_("body",a2,7a,1b,41)},
	{hx::fsObject /*  ::nape::shape::Polygon */ ,(int)offsetof(PhysicUI_obj,shape),HX_("shape",21,e3,1c,7c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PhysicUI_obj_sStaticStorageInfo = 0;
#endif

static ::String PhysicUI_obj_sMemberFields[] = {
	HX_("space",c6,8c,66,81),
	HX_("body",a2,7a,1b,41),
	HX_("shape",21,e3,1c,7c),
	::String(null()) };

hx::Class PhysicUI_obj::__mClass;

void PhysicUI_obj::__register()
{
	PhysicUI_obj _hx_dummy;
	PhysicUI_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("entity.element.ui.physic.PhysicUI",e5,c3,da,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PhysicUI_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PhysicUI_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PhysicUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PhysicUI_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
} // end namespace element
} // end namespace ui
} // end namespace physic
