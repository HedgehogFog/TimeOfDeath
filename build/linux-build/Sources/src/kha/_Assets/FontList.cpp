// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_FontList
#include <hxinc/kha/_Assets/FontList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_472b3f8c48477a9c_46_new,"kha._Assets.FontList","new",0x50cce395,"kha._Assets.FontList.new","kha/Assets.hx",46,0x66f27110)
static const ::String _hx_array_data_232c7523_1[] = {
	HX_("OpenSans",5d,1d,3b,c7),
};
static const ::String _hx_array_data_232c7523_2[] = {
	HX_("OpenSans.ttf",55,cb,91,ca),
};
HX_LOCAL_STACK_FRAME(_hx_pos_472b3f8c48477a9c_52_get,"kha._Assets.FontList","get",0x50c793cb,"kha._Assets.FontList.get","kha/Assets.hx",52,0x66f27110)
HX_LOCAL_STACK_FRAME(_hx_pos_4a5b61adc637a5b1_142_OpenSansLoad,"kha._Assets.FontList","OpenSansLoad",0x8d19b44e,"kha._Assets.FontList.OpenSansLoad","kha/internal/AssetsBuilder.hx",142,0x6901246d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a5b61adc637a5b1_182_OpenSansUnload,"kha._Assets.FontList","OpenSansUnload",0x5b479527,"kha._Assets.FontList.OpenSansUnload","kha/internal/AssetsBuilder.hx",182,0x6901246d)
namespace kha{
namespace _Assets{

void FontList_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_472b3f8c48477a9c_46_new)
HXLINE( 198)		this->names = ::Array_obj< ::String >::fromData( _hx_array_data_232c7523_1,1);
HXLINE( 122)		this->OpenSansDescription =  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("files",77,de,98,00),::Array_obj< ::String >::fromData( _hx_array_data_232c7523_2,1))
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("OpenSans",5d,1d,3b,c7))
            			->setFixed(2,HX_("type",ba,f2,08,4d),HX_("font",cf,5d,c0,43)));
HXLINE( 113)		this->OpenSansName = HX_("OpenSans",5d,1d,3b,c7);
HXLINE(  94)		this->OpenSans = null();
            	}

Dynamic FontList_obj::__CreateEmpty() { return new FontList_obj; }

void *FontList_obj::_hx_vtable = 0;

Dynamic FontList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FontList_obj > _hx_result = new FontList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FontList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cc63163;
}

 ::kha::Kravur FontList_obj::get(::String name){
            	HX_STACKFRAME(&_hx_pos_472b3f8c48477a9c_52_get)
HXDLIN(  52)		return ( ( ::kha::Kravur)(::Reflect_obj::field(hx::ObjectPtr<OBJ_>(this),name)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontList_obj,get,return )

void FontList_obj::OpenSansLoad( ::Dynamic done, ::Dynamic failure){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::kha::Kravur font){
            			HX_STACKFRAME(&_hx_pos_4a5b61adc637a5b1_142_OpenSansLoad)
HXDLIN( 142)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_4a5b61adc637a5b1_142_OpenSansLoad)
HXDLIN( 142)		 ::Dynamic _hx_tmp;
HXDLIN( 142)		if (hx::IsNotNull( failure )) {
HXDLIN( 142)			_hx_tmp = failure;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,infos, ::Dynamic,f) HXARGC(1)
            			void _hx_run( ::Dynamic v){
            				HX_STACKFRAME(&_hx_pos_4a5b61adc637a5b1_142_OpenSansLoad)
HXDLIN( 142)				f(v,infos);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN( 142)			 ::Dynamic f = ::haxe::Log_obj::trace;
HXDLIN( 142)			 ::Dynamic infos = hx::SourceInfo(HX_("kha/internal/AssetsBuilder.hx",6d,24,01,69),142,HX_("kha._Assets.FontList",23,75,2c,23),HX_("OpenSansLoad",23,56,62,de));
HXDLIN( 142)			_hx_tmp =  ::Dynamic(new _hx_Closure_0(infos,f));
            		}
HXDLIN( 142)		::kha::Assets_obj::loadFont(HX_("OpenSans",5d,1d,3b,c7), ::Dynamic(new _hx_Closure_1(done)),_hx_tmp,hx::SourceInfo(HX_("kha/internal/AssetsBuilder.hx",6d,24,01,69),142,HX_("kha._Assets.FontList",23,75,2c,23),HX_("OpenSansLoad",23,56,62,de)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FontList_obj,OpenSansLoad,(void))

void FontList_obj::OpenSansUnload(){
            	HX_STACKFRAME(&_hx_pos_4a5b61adc637a5b1_182_OpenSansUnload)
HXLINE( 183)		this->OpenSans->unload();
HXLINE( 184)		this->OpenSans = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FontList_obj,OpenSansUnload,(void))


hx::ObjectPtr< FontList_obj > FontList_obj::__new() {
	hx::ObjectPtr< FontList_obj > __this = new FontList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FontList_obj > FontList_obj::__alloc(hx::Ctx *_hx_ctx) {
	FontList_obj *__this = (FontList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FontList_obj), true, "kha._Assets.FontList"));
	*(void **)__this = FontList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FontList_obj::FontList_obj()
{
}

void FontList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FontList);
	HX_MARK_MEMBER_NAME(OpenSans,"OpenSans");
	HX_MARK_MEMBER_NAME(OpenSansName,"OpenSansName");
	HX_MARK_MEMBER_NAME(OpenSansDescription,"OpenSansDescription");
	HX_MARK_MEMBER_NAME(names,"names");
	HX_MARK_END_CLASS();
}

void FontList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(OpenSans,"OpenSans");
	HX_VISIT_MEMBER_NAME(OpenSansName,"OpenSansName");
	HX_VISIT_MEMBER_NAME(OpenSansDescription,"OpenSansDescription");
	HX_VISIT_MEMBER_NAME(names,"names");
}

hx::Val FontList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { return hx::Val( names ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"OpenSans") ) { return hx::Val( OpenSans ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"OpenSansName") ) { return hx::Val( OpenSansName ); }
		if (HX_FIELD_EQ(inName,"OpenSansLoad") ) { return hx::Val( OpenSansLoad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"OpenSansUnload") ) { return hx::Val( OpenSansUnload_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"OpenSansDescription") ) { return hx::Val( OpenSansDescription ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FontList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { names=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"OpenSans") ) { OpenSans=inValue.Cast<  ::kha::Kravur >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"OpenSansName") ) { OpenSansName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"OpenSansDescription") ) { OpenSansDescription=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FontList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("OpenSans",5d,1d,3b,c7));
	outFields->push(HX_("OpenSansName",48,2e,aa,df));
	outFields->push(HX_("OpenSansDescription",9f,76,ea,b1));
	outFields->push(HX_("names",c8,8f,84,96));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FontList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::Kravur */ ,(int)offsetof(FontList_obj,OpenSans),HX_("OpenSans",5d,1d,3b,c7)},
	{hx::fsString,(int)offsetof(FontList_obj,OpenSansName),HX_("OpenSansName",48,2e,aa,df)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FontList_obj,OpenSansDescription),HX_("OpenSansDescription",9f,76,ea,b1)},
	{hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FontList_obj,names),HX_("names",c8,8f,84,96)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FontList_obj_sStaticStorageInfo = 0;
#endif

static ::String FontList_obj_sMemberFields[] = {
	HX_("get",96,80,4e,00),
	HX_("OpenSans",5d,1d,3b,c7),
	HX_("OpenSansName",48,2e,aa,df),
	HX_("OpenSansDescription",9f,76,ea,b1),
	HX_("OpenSansLoad",23,56,62,de),
	HX_("OpenSansUnload",3c,16,5c,09),
	HX_("names",c8,8f,84,96),
	::String(null()) };

hx::Class FontList_obj::__mClass;

void FontList_obj::__register()
{
	FontList_obj _hx_dummy;
	FontList_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha._Assets.FontList",23,75,2c,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FontList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FontList_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FontList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FontList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace _Assets
