// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_30_hasField,"Reflect","hasField",0xef8c2571,"Reflect.hasField","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",30,0xce470e84)
HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_34_field,"Reflect","field",0x54b04da9,"Reflect.field","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",34,0xce470e84)
HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_38_setField,"Reflect","setField",0x71684429,"Reflect.setField","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",38,0xce470e84)
HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_51_callMethod,"Reflect","callMethod",0xb49e52d0,"Reflect.callMethod","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",51,0xce470e84)
HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_61_fields,"Reflect","fields",0xc593a6aa,"Reflect.fields","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",61,0xce470e84)
HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_84_isObject,"Reflect","isObject",0xd04960ba,"Reflect.isObject","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",84,0xce470e84)
HX_LOCAL_STACK_FRAME(_hx_pos_59168e135b6d2dc9_100_copy,"Reflect","copy",0x47e2b5a6,"Reflect.copy","/home/hedgehog/Program/KodeStudio-Linux/resources/app/kodeExtensions/kha/Kha/Tools/haxe/std/cpp/_std/Reflect.hx",100,0xce470e84)

void Reflect_obj::__construct() { }

Dynamic Reflect_obj::__CreateEmpty() { return new Reflect_obj; }

void *Reflect_obj::_hx_vtable = 0;

Dynamic Reflect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reflect_obj > _hx_result = new Reflect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Reflect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e2f4039;
}

bool Reflect_obj::hasField( ::Dynamic o,::String field){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_30_hasField)
HXDLIN(  30)		return (hx::IsNotNull( o ) && ( (bool)(o->__HasField(field)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,hasField,return )

 ::Dynamic Reflect_obj::field( ::Dynamic o,::String field){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_34_field)
HXDLIN(  34)		return hx::IsNull( o ) ? null() : o->__Field(field,hx::paccNever);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,field,return )

void Reflect_obj::setField( ::Dynamic o,::String field, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_38_setField)
HXDLIN(  38)		if (hx::IsNotNull( o )) {
HXLINE(  39)			o->__SetField(field,value,hx::paccNever);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reflect_obj,setField,(void))

 ::Dynamic Reflect_obj::callMethod( ::Dynamic o, ::Dynamic func,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_51_callMethod)
HXLINE(  52)		if ((hx::IsNotNull( func ) && hx::IsEq( func->__GetType(),3 ))) {
HXLINE(  53)			if (hx::IsNull( o )) {
HXLINE(  53)				HX_STACK_DO_THROW(HX_INVALID_OBJECT);
            			}
HXLINE(  54)			func = o->__Field(func,hx::paccDynamic);
            		}
HXLINE(  56)		if (hx::IsNull( func )) {
HXLINE(  56)			HX_STACK_DO_THROW(HX_NULL_FUNCTION_POINTER);
            		}
HXLINE(  57)		func->__SetThis(o);
HXLINE(  58)		return func->__Run(args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reflect_obj,callMethod,return )

::Array< ::String > Reflect_obj::fields( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_61_fields)
HXLINE(  62)		if (hx::IsNull( o )) {
HXLINE(  62)			return ::Array_obj< ::String >::__new();
            		}
HXLINE(  63)		::Array< ::String > a = ::Array_obj< ::String >::__new(0);
HXLINE(  64)		o->__GetFields(a);
HXLINE(  65)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,fields,return )

bool Reflect_obj::isObject( ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_84_isObject)
HXLINE(  85)		if (hx::IsNull( v )) {
HXLINE(  85)			return false;
            		}
HXLINE(  86)		int t = ( (int)(v->__GetType()) );
HXLINE(  87)		return ((((t == 4) || (t == 8)) || (t == 3)) || (t == 5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,isObject,return )

 ::Dynamic Reflect_obj::copy( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_59168e135b6d2dc9_100_copy)
HXLINE( 101)		if (hx::IsNull( o )) {
HXLINE( 101)			return null();
            		}
HXLINE( 102)		if (hx::IsEq( o->__GetType(),3 )) {
HXLINE( 102)			return o;
            		}
HXLINE( 103)		if (hx::IsEq( o->__GetType(),5 )) {
HXLINE( 104)			return o->__Field(HX_("copy",b5,bb,c4,41),hx::paccDynamic)();
            		}
HXLINE( 105)		 ::Dynamic o2 =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 106)		{
HXLINE( 106)			int _g = 0;
HXDLIN( 106)			::Array< ::String > _g1 = ::Reflect_obj::fields(o);
HXDLIN( 106)			while((_g < _g1->length)){
HXLINE( 106)				::String f = _g1->__get(_g);
HXDLIN( 106)				++_g;
HXLINE( 107)				::Reflect_obj::setField(o2,f,::Reflect_obj::field(o,f));
            			}
            		}
HXLINE( 108)		return o2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,copy,return )


Reflect_obj::Reflect_obj()
{
}

bool Reflect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"field") ) { outValue = field_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { outValue = fields_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasField") ) { outValue = hasField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setField") ) { outValue = setField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObject") ) { outValue = isObject_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"callMethod") ) { outValue = callMethod_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Reflect_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Reflect_obj_sStaticStorageInfo = 0;
#endif

hx::Class Reflect_obj::__mClass;

static ::String Reflect_obj_sStaticFields[] = {
	HX_("hasField",00,df,eb,8c),
	HX_("field",ba,94,93,00),
	HX_("setField",b8,fd,c7,0e),
	HX_("callMethod",1f,ce,8a,34),
	HX_("fields",79,8e,8e,80),
	HX_("isObject",49,1a,a9,6d),
	HX_("copy",b5,bb,c4,41),
	::String(null())
};

void Reflect_obj::__register()
{
	Reflect_obj _hx_dummy;
	Reflect_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Reflect",1d,ac,7a,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reflect_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reflect_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Reflect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reflect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reflect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

