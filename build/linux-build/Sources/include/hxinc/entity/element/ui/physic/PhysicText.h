// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_entity_element_ui_physic_PhysicText
#define INCLUDED_entity_element_ui_physic_PhysicText

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_entity_element_ui_physic_PhysicUI
#include <hxinc/entity/element/ui/physic/PhysicUI.h>
#endif
HX_DECLARE_CLASS2(entity,element,Entity)
HX_DECLARE_CLASS2(entity,element,IEntity)
HX_DECLARE_CLASS4(entity,element,ui,physic,PhysicText)
HX_DECLARE_CLASS4(entity,element,ui,physic,PhysicUI)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace entity{
namespace element{
namespace ui{
namespace physic{


class HXCPP_CLASS_ATTRIBUTES PhysicText_obj : public  ::entity::element::ui::physic::PhysicUI_obj
{
	public:
		typedef  ::entity::element::ui::physic::PhysicUI_obj super;
		typedef PhysicText_obj OBJ_;
		PhysicText_obj();

	public:
		enum { _hx_ClassId = 0x213075a6 };

		void __construct(Float x,Float y,::String __o_text,hx::Null< int >  __o_size, ::Dynamic width);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="entity.element.ui.physic.PhysicText")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"entity.element.ui.physic.PhysicText"); }
		static hx::ObjectPtr< PhysicText_obj > __new(Float x,Float y,::String __o_text,hx::Null< int >  __o_size, ::Dynamic width);
		static hx::ObjectPtr< PhysicText_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y,::String __o_text,hx::Null< int >  __o_size, ::Dynamic width);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PhysicText_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PhysicText",19,b1,4b,b4); }

		::String text;
		int size;
		bool risizeble;
		void draw( ::kha::graphics2::Graphics gr);

		void update(Float dt);

};

} // end namespace entity
} // end namespace element
} // end namespace ui
} // end namespace physic

#endif /* INCLUDED_entity_element_ui_physic_PhysicText */ 
