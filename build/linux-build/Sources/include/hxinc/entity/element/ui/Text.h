// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_entity_element_ui_Text
#define INCLUDED_entity_element_ui_Text

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_entity_element_Entity
#include <hxinc/entity/element/Entity.h>
#endif
HX_DECLARE_CLASS2(entity,element,Entity)
HX_DECLARE_CLASS2(entity,element,IEntity)
HX_DECLARE_CLASS3(entity,element,ui,Text)

namespace entity{
namespace element{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES Text_obj : public  ::entity::element::Entity_obj
{
	public:
		typedef  ::entity::element::Entity_obj super;
		typedef Text_obj OBJ_;
		Text_obj();

	public:
		enum { _hx_ClassId = 0x39121c76 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="entity.element.ui.Text")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"entity.element.ui.Text"); }
		static hx::ObjectPtr< Text_obj > __new();
		static hx::ObjectPtr< Text_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Text_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Text",cd,f8,d2,37); }

};

} // end namespace entity
} // end namespace element
} // end namespace ui

#endif /* INCLUDED_entity_element_ui_Text */ 
