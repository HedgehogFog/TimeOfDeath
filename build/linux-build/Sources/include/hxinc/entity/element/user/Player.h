// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_entity_element_user_Player
#define INCLUDED_entity_element_user_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_entity_element_Entity
#include <hxinc/entity/element/Entity.h>
#endif
HX_DECLARE_CLASS2(entity,element,Entity)
HX_DECLARE_CLASS2(entity,element,IEntity)
HX_DECLARE_CLASS3(entity,element,user,Player)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace entity{
namespace element{
namespace user{


class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::entity::element::Entity_obj
{
	public:
		typedef  ::entity::element::Entity_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		enum { _hx_ClassId = 0x0a52b4f5 };

		void __construct(Float x,Float y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="entity.element.user.Player")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"entity.element.user.Player"); }
		static hx::ObjectPtr< Player_obj > __new(Float x,Float y);
		static hx::ObjectPtr< Player_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Player",81,5f,4d,6c); }

		void update(Float dt);

		void draw( ::kha::graphics2::Graphics gr);

		void downListener(int code);
		::Dynamic downListener_dyn();

		void upListener(int code);
		::Dynamic upListener_dyn();

};

} // end namespace entity
} // end namespace element
} // end namespace user

#endif /* INCLUDED_entity_element_user_Player */ 
