// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_world_Stage
#define INCLUDED_world_Stage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(entity,element,IEntity)
HX_DECLARE_CLASS2(entity,group,TypedGroup)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,internal,BytesBlob)
HX_DECLARE_CLASS1(world,Stage)

namespace world{


class HXCPP_CLASS_ATTRIBUTES Stage_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Stage_obj OBJ_;
		Stage_obj();

	public:
		enum { _hx_ClassId = 0x1aeb67cc };

		void __construct(::String file);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="world.Stage")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"world.Stage"); }
		static hx::ObjectPtr< Stage_obj > __new(::String file);
		static hx::ObjectPtr< Stage_obj > __alloc(hx::Ctx *_hx_ctx,::String file);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Stage_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Stage",9e,da,38,17); }

		int width;
		int height;
		::String name;
		::String desc;
		::String version;
		 ::haxe::ds::StringMap values;
		 ::haxe::ds::StringMap objects;
		 ::Xml xml;
		 ::Xml fastXml;
		void setStage(::String file);
		::Dynamic setStage_dyn();

		void loadSucc( ::kha::internal::BytesBlob blob);
		::Dynamic loadSucc_dyn();

		void loadValues();
		::Dynamic loadValues_dyn();

		void spawn( ::entity::group::TypedGroup container,::String layerId);
		::Dynamic spawn_dyn();

		bool parseBool(::String value);
		::Dynamic parseBool_dyn();

};

} // end namespace world

#endif /* INCLUDED_world_Stage */ 
