// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_nape_util_Debug
#define INCLUDED_nape_util_Debug

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,util,Debug)

namespace nape{
namespace util{


class HXCPP_CLASS_ATTRIBUTES Debug_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Debug_obj OBJ_;
		Debug_obj();

	public:
		enum { _hx_ClassId = 0x22050309 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nape.util.Debug")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"nape.util.Debug"); }

		hx::ObjectPtr< Debug_obj > __new() {
			hx::ObjectPtr< Debug_obj > __this = new Debug_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Debug_obj > __alloc(hx::Ctx *_hx_ctx) {
			Debug_obj *__this = (Debug_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Debug_obj), false, "nape.util.Debug"));
			*(void **)__this = Debug_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Debug_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Debug",33,c2,4c,6a); }

		static ::String version();
		static ::Dynamic version_dyn();

		static void clearObjectPools();
		static ::Dynamic clearObjectPools_dyn();

};

} // end namespace nape
} // end namespace util

#endif /* INCLUDED_nape_util_Debug */ 
