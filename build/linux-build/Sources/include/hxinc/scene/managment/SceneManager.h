// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_scene_managment_SceneManager
#define INCLUDED_scene_managment_SceneManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(kha,graphics2,Graphics)
HX_DECLARE_CLASS2(nape,space,Space)
HX_DECLARE_CLASS1(scene,Scene)
HX_DECLARE_CLASS2(scene,managment,SceneManager)
HX_DECLARE_CLASS1(util,Timer)

namespace scene{
namespace managment{


class HXCPP_CLASS_ATTRIBUTES SceneManager_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SceneManager_obj OBJ_;
		SceneManager_obj();

	public:
		enum { _hx_ClassId = 0x775ac3f3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="scene.managment.SceneManager")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"scene.managment.SceneManager"); }
		static hx::ObjectPtr< SceneManager_obj > __new();
		static hx::ObjectPtr< SceneManager_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SceneManager_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SceneManager",a1,2e,2a,1a); }

		static void __boot();
		static  ::scene::managment::SceneManager instance;
		 ::util::Timer timer;
		::Dynamic currentScene;
		 ::nape::space::Space space;
		void draw( ::kha::graphics2::Graphics gr);
		::Dynamic draw_dyn();

		void update();
		::Dynamic update_dyn();

		void setScene(::Dynamic scene1);
		::Dynamic setScene_dyn();

};

} // end namespace scene
} // end namespace managment

#endif /* INCLUDED_scene_managment_SceneManager */ 
